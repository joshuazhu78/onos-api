// Code generated by MockGen. DO NOT EDIT.
// Source: go/onos/kpimon/kpimon.pb.go

// Package kpimon is a generated GoMock package.
package kpimon

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockKpimonClient is a mock of KpimonClient interface.
type MockKpimonClient struct {
	ctrl     *gomock.Controller
	recorder *MockKpimonClientMockRecorder
}

// MockKpimonClientMockRecorder is the mock recorder for MockKpimonClient.
type MockKpimonClientMockRecorder struct {
	mock *MockKpimonClient
}

// NewMockKpimonClient creates a new mock instance.
func NewMockKpimonClient(ctrl *gomock.Controller) *MockKpimonClient {
	mock := &MockKpimonClient{ctrl: ctrl}
	mock.recorder = &MockKpimonClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKpimonClient) EXPECT() *MockKpimonClientMockRecorder {
	return m.recorder
}

// GetNumActiveUEs mocks base method.
func (m *MockKpimonClient) GetNumActiveUEs(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNumActiveUEs", varargs...)
	ret0, _ := ret[0].(*GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNumActiveUEs indicates an expected call of GetNumActiveUEs.
func (mr *MockKpimonClientMockRecorder) GetNumActiveUEs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumActiveUEs", reflect.TypeOf((*MockKpimonClient)(nil).GetNumActiveUEs), varargs...)
}

// MockKpimonServer is a mock of KpimonServer interface.
type MockKpimonServer struct {
	ctrl     *gomock.Controller
	recorder *MockKpimonServerMockRecorder
}

// MockKpimonServerMockRecorder is the mock recorder for MockKpimonServer.
type MockKpimonServerMockRecorder struct {
	mock *MockKpimonServer
}

// NewMockKpimonServer creates a new mock instance.
func NewMockKpimonServer(ctrl *gomock.Controller) *MockKpimonServer {
	mock := &MockKpimonServer{ctrl: ctrl}
	mock.recorder = &MockKpimonServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockKpimonServer) EXPECT() *MockKpimonServerMockRecorder {
	return m.recorder
}

// GetNumActiveUEs mocks base method.
func (m *MockKpimonServer) GetNumActiveUEs(arg0 context.Context, arg1 *GetRequest) (*GetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNumActiveUEs", arg0, arg1)
	ret0, _ := ret[0].(*GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNumActiveUEs indicates an expected call of GetNumActiveUEs.
func (mr *MockKpimonServerMockRecorder) GetNumActiveUEs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNumActiveUEs", reflect.TypeOf((*MockKpimonServer)(nil).GetNumActiveUEs), arg0, arg1)
}
