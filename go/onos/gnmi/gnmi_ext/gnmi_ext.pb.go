// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: onos/gnmi/gnmi_ext/gnmi_ext.proto

// Package gnmi_ext defines a set of extensions messages which can be optionally
// included with the request and response messages of gNMI RPCs. A set of
// well-known extensions are defined within this file, along with a registry for
// extensions defined outside of this package.

package gnmi_ext

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// RegisteredExtension is an enumeration acting as a registry for extensions
// defined by external sources.
type ExtensionID int32

const (
	ExtensionID_EID_UNSET ExtensionID = 0
	// An experimental extension that may be used during prototyping of a new
	// extension.
	ExtensionID_EID_EXPERIMENTAL ExtensionID = 999
)

var ExtensionID_name = map[int32]string{
	0:   "EID_UNSET",
	999: "EID_EXPERIMENTAL",
}

var ExtensionID_value = map[string]int32{
	"EID_UNSET":        0,
	"EID_EXPERIMENTAL": 999,
}

func (x ExtensionID) String() string {
	return proto.EnumName(ExtensionID_name, int32(x))
}

func (ExtensionID) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_b619f7bee3842556, []int{0}
}

// The Extension message contains a single gNMI extension.
type Extension struct {
	// Types that are valid to be assigned to Ext:
	//	*Extension_RegisteredExt
	//	*Extension_MasterArbitration
	Ext isExtension_Ext `protobuf_oneof:"ext"`
}

func (m *Extension) Reset()         { *m = Extension{} }
func (m *Extension) String() string { return proto.CompactTextString(m) }
func (*Extension) ProtoMessage()    {}
func (*Extension) Descriptor() ([]byte, []int) {
	return fileDescriptor_b619f7bee3842556, []int{0}
}
func (m *Extension) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Extension) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Extension.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Extension) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Extension.Merge(m, src)
}
func (m *Extension) XXX_Size() int {
	return m.Size()
}
func (m *Extension) XXX_DiscardUnknown() {
	xxx_messageInfo_Extension.DiscardUnknown(m)
}

var xxx_messageInfo_Extension proto.InternalMessageInfo

type isExtension_Ext interface {
	isExtension_Ext()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Extension_RegisteredExt struct {
	RegisteredExt *RegisteredExtension `protobuf:"bytes,1,opt,name=registered_ext,json=registeredExt,proto3,oneof" json:"registered_ext,omitempty"`
}
type Extension_MasterArbitration struct {
	MasterArbitration *MasterArbitration `protobuf:"bytes,2,opt,name=master_arbitration,json=masterArbitration,proto3,oneof" json:"master_arbitration,omitempty"`
}

func (*Extension_RegisteredExt) isExtension_Ext()     {}
func (*Extension_MasterArbitration) isExtension_Ext() {}

func (m *Extension) GetExt() isExtension_Ext {
	if m != nil {
		return m.Ext
	}
	return nil
}

func (m *Extension) GetRegisteredExt() *RegisteredExtension {
	if x, ok := m.GetExt().(*Extension_RegisteredExt); ok {
		return x.RegisteredExt
	}
	return nil
}

func (m *Extension) GetMasterArbitration() *MasterArbitration {
	if x, ok := m.GetExt().(*Extension_MasterArbitration); ok {
		return x.MasterArbitration
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Extension) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Extension_RegisteredExt)(nil),
		(*Extension_MasterArbitration)(nil),
	}
}

// The RegisteredExtension message defines an extension which is defined outside
// of this file.
type RegisteredExtension struct {
	Id  ExtensionID `protobuf:"varint,1,opt,name=id,proto3,enum=gnmi_ext.ExtensionID" json:"id,omitempty"`
	Msg []byte      `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (m *RegisteredExtension) Reset()         { *m = RegisteredExtension{} }
func (m *RegisteredExtension) String() string { return proto.CompactTextString(m) }
func (*RegisteredExtension) ProtoMessage()    {}
func (*RegisteredExtension) Descriptor() ([]byte, []int) {
	return fileDescriptor_b619f7bee3842556, []int{1}
}
func (m *RegisteredExtension) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisteredExtension) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisteredExtension.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisteredExtension) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisteredExtension.Merge(m, src)
}
func (m *RegisteredExtension) XXX_Size() int {
	return m.Size()
}
func (m *RegisteredExtension) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisteredExtension.DiscardUnknown(m)
}

var xxx_messageInfo_RegisteredExtension proto.InternalMessageInfo

func (m *RegisteredExtension) GetId() ExtensionID {
	if m != nil {
		return m.Id
	}
	return ExtensionID_EID_UNSET
}

func (m *RegisteredExtension) GetMsg() []byte {
	if m != nil {
		return m.Msg
	}
	return nil
}

// MasterArbitration is used to select the master among multiple gNMI clients
// with the same Roles. The client with the largest election_id is honored as
// the master.
// The document about gNMI master arbitration can be found at
// https://github.com/openconfig/reference/blob/master/rpc/gnmi/gnmi-master-arbitration.md
type MasterArbitration struct {
	Role       *Role    `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	ElectionId *Uint128 `protobuf:"bytes,2,opt,name=election_id,json=electionId,proto3" json:"election_id,omitempty"`
}

func (m *MasterArbitration) Reset()         { *m = MasterArbitration{} }
func (m *MasterArbitration) String() string { return proto.CompactTextString(m) }
func (*MasterArbitration) ProtoMessage()    {}
func (*MasterArbitration) Descriptor() ([]byte, []int) {
	return fileDescriptor_b619f7bee3842556, []int{2}
}
func (m *MasterArbitration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MasterArbitration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MasterArbitration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MasterArbitration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MasterArbitration.Merge(m, src)
}
func (m *MasterArbitration) XXX_Size() int {
	return m.Size()
}
func (m *MasterArbitration) XXX_DiscardUnknown() {
	xxx_messageInfo_MasterArbitration.DiscardUnknown(m)
}

var xxx_messageInfo_MasterArbitration proto.InternalMessageInfo

func (m *MasterArbitration) GetRole() *Role {
	if m != nil {
		return m.Role
	}
	return nil
}

func (m *MasterArbitration) GetElectionId() *Uint128 {
	if m != nil {
		return m.ElectionId
	}
	return nil
}

// Representation of unsigned 128-bit integer.
type Uint128 struct {
	High uint64 `protobuf:"varint,1,opt,name=high,proto3" json:"high,omitempty"`
	Low  uint64 `protobuf:"varint,2,opt,name=low,proto3" json:"low,omitempty"`
}

func (m *Uint128) Reset()         { *m = Uint128{} }
func (m *Uint128) String() string { return proto.CompactTextString(m) }
func (*Uint128) ProtoMessage()    {}
func (*Uint128) Descriptor() ([]byte, []int) {
	return fileDescriptor_b619f7bee3842556, []int{3}
}
func (m *Uint128) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Uint128) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Uint128.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Uint128) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Uint128.Merge(m, src)
}
func (m *Uint128) XXX_Size() int {
	return m.Size()
}
func (m *Uint128) XXX_DiscardUnknown() {
	xxx_messageInfo_Uint128.DiscardUnknown(m)
}

var xxx_messageInfo_Uint128 proto.InternalMessageInfo

func (m *Uint128) GetHigh() uint64 {
	if m != nil {
		return m.High
	}
	return 0
}

func (m *Uint128) GetLow() uint64 {
	if m != nil {
		return m.Low
	}
	return 0
}

// There can be one master for each role. The role is identified by its id.
type Role struct {
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *Role) Reset()         { *m = Role{} }
func (m *Role) String() string { return proto.CompactTextString(m) }
func (*Role) ProtoMessage()    {}
func (*Role) Descriptor() ([]byte, []int) {
	return fileDescriptor_b619f7bee3842556, []int{4}
}
func (m *Role) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Role) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Role.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Role) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Role.Merge(m, src)
}
func (m *Role) XXX_Size() int {
	return m.Size()
}
func (m *Role) XXX_DiscardUnknown() {
	xxx_messageInfo_Role.DiscardUnknown(m)
}

var xxx_messageInfo_Role proto.InternalMessageInfo

func (m *Role) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func init() {
	proto.RegisterEnum("gnmi_ext.ExtensionID", ExtensionID_name, ExtensionID_value)
	proto.RegisterType((*Extension)(nil), "gnmi_ext.Extension")
	proto.RegisterType((*RegisteredExtension)(nil), "gnmi_ext.RegisteredExtension")
	proto.RegisterType((*MasterArbitration)(nil), "gnmi_ext.MasterArbitration")
	proto.RegisterType((*Uint128)(nil), "gnmi_ext.Uint128")
	proto.RegisterType((*Role)(nil), "gnmi_ext.Role")
}

func init() { proto.RegisterFile("onos/gnmi/gnmi_ext/gnmi_ext.proto", fileDescriptor_b619f7bee3842556) }

var fileDescriptor_b619f7bee3842556 = []byte{
	// 361 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x52, 0xcd, 0x6a, 0xea, 0x40,
	0x14, 0x4e, 0x34, 0xf7, 0x7a, 0x3d, 0x5e, 0x43, 0x9c, 0x8b, 0x17, 0xa1, 0x34, 0xb4, 0x81, 0x42,
	0xe9, 0x42, 0x69, 0xdc, 0x74, 0xab, 0x98, 0x62, 0x40, 0xa5, 0x4c, 0x15, 0xba, 0x0b, 0xda, 0x0c,
	0x71, 0x68, 0x92, 0x29, 0x93, 0x81, 0xfa, 0x18, 0x7d, 0x8c, 0x3e, 0x4a, 0x97, 0x2e, 0xbb, 0x2c,
	0xba, 0xe8, 0x6b, 0x94, 0x19, 0x34, 0x91, 0xb6, 0x9b, 0xf0, 0x9d, 0x73, 0xbe, 0x7c, 0x3f, 0x30,
	0x70, 0xca, 0x52, 0x96, 0x75, 0xa2, 0x34, 0xa1, 0xea, 0x13, 0x90, 0x95, 0xc8, 0x41, 0xfb, 0x91,
	0x33, 0xc1, 0xd0, 0x9f, 0xfd, 0xec, 0xbc, 0xe8, 0x50, 0xf5, 0x56, 0x82, 0xa4, 0x19, 0x65, 0x29,
	0xba, 0x06, 0x93, 0x93, 0x88, 0x66, 0x82, 0x70, 0x12, 0xca, 0x7b, 0x4b, 0x3f, 0xd1, 0xcf, 0x6b,
	0xee, 0x71, 0x3b, 0x17, 0xc0, 0xf9, 0x3d, 0xff, 0x6d, 0xa8, 0xe1, 0x3a, 0x3f, 0x5c, 0xa3, 0x11,
	0xa0, 0x64, 0x2e, 0xc7, 0x60, 0xce, 0x17, 0x54, 0xf0, 0xb9, 0xa0, 0x2c, 0x6d, 0x95, 0x94, 0xd6,
	0x51, 0xa1, 0x35, 0x56, 0x9c, 0x5e, 0x41, 0x19, 0x6a, 0xb8, 0x91, 0x7c, 0x5d, 0xf6, 0x7f, 0x41,
	0x59, 0x46, 0x9d, 0xc0, 0xbf, 0x1f, 0xcc, 0xd1, 0x19, 0x94, 0x68, 0xa8, 0x72, 0x9a, 0x6e, 0xb3,
	0xd0, 0xce, 0x09, 0xfe, 0x00, 0x97, 0x68, 0x88, 0x2c, 0x28, 0x27, 0x59, 0xa4, 0x32, 0xfc, 0xc5,
	0x12, 0x3a, 0x0f, 0xd0, 0xf8, 0x16, 0x00, 0x39, 0x60, 0x70, 0x16, 0x93, 0x5d, 0x6f, 0xf3, 0xa0,
	0x37, 0x8b, 0x09, 0x56, 0x37, 0xe4, 0x42, 0x8d, 0xc4, 0xe4, 0x5e, 0xf2, 0x03, 0x1a, 0xee, 0x6a,
	0x35, 0x0a, 0xea, 0x8c, 0xa6, 0xe2, 0xd2, 0xbd, 0xc2, 0xb0, 0x67, 0xf9, 0xa1, 0xd3, 0x81, 0xca,
	0x6e, 0x8d, 0x10, 0x18, 0x4b, 0x1a, 0x2d, 0x95, 0x85, 0x81, 0x15, 0x96, 0xe9, 0x62, 0xf6, 0xa4,
	0xa4, 0x0c, 0x2c, 0xa1, 0xf3, 0x1f, 0x0c, 0x69, 0x89, 0xcc, 0xbc, 0x5e, 0x55, 0xf6, 0xb8, 0xe8,
	0x42, 0xed, 0xa0, 0x1a, 0xaa, 0x43, 0xd5, 0xf3, 0x07, 0xc1, 0x6c, 0x72, 0xeb, 0x4d, 0x2d, 0x0d,
	0x35, 0xc1, 0x92, 0xa3, 0x77, 0x77, 0xe3, 0x61, 0x7f, 0xec, 0x4d, 0xa6, 0xbd, 0x91, 0xf5, 0x51,
	0xe9, 0xb7, 0x5e, 0x37, 0xb6, 0xbe, 0xde, 0xd8, 0xfa, 0xfb, 0xc6, 0xd6, 0x9f, 0xb7, 0xb6, 0xb6,
	0xde, 0xda, 0xda, 0xdb, 0xd6, 0xd6, 0x16, 0xbf, 0xd5, 0x83, 0xe8, 0x7e, 0x06, 0x00, 0x00, 0xff,
	0xff, 0x2b, 0xf8, 0xe1, 0x3c, 0x35, 0x02, 0x00, 0x00,
}

func (m *Extension) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Extension) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Extension) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ext != nil {
		{
			size := m.Ext.Size()
			i -= size
			if _, err := m.Ext.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Extension_RegisteredExt) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Extension_RegisteredExt) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.RegisteredExt != nil {
		{
			size, err := m.RegisteredExt.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGnmiExt(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Extension_MasterArbitration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Extension_MasterArbitration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MasterArbitration != nil {
		{
			size, err := m.MasterArbitration.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGnmiExt(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *RegisteredExtension) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisteredExtension) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RegisteredExtension) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintGnmiExt(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintGnmiExt(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MasterArbitration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MasterArbitration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MasterArbitration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ElectionId != nil {
		{
			size, err := m.ElectionId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGnmiExt(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Role != nil {
		{
			size, err := m.Role.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintGnmiExt(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Uint128) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Uint128) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Uint128) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Low != 0 {
		i = encodeVarintGnmiExt(dAtA, i, uint64(m.Low))
		i--
		dAtA[i] = 0x10
	}
	if m.High != 0 {
		i = encodeVarintGnmiExt(dAtA, i, uint64(m.High))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Role) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Role) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Role) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintGnmiExt(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintGnmiExt(dAtA []byte, offset int, v uint64) int {
	offset -= sovGnmiExt(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Extension) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ext != nil {
		n += m.Ext.Size()
	}
	return n
}

func (m *Extension_RegisteredExt) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RegisteredExt != nil {
		l = m.RegisteredExt.Size()
		n += 1 + l + sovGnmiExt(uint64(l))
	}
	return n
}
func (m *Extension_MasterArbitration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MasterArbitration != nil {
		l = m.MasterArbitration.Size()
		n += 1 + l + sovGnmiExt(uint64(l))
	}
	return n
}
func (m *RegisteredExtension) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovGnmiExt(uint64(m.Id))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovGnmiExt(uint64(l))
	}
	return n
}

func (m *MasterArbitration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Role != nil {
		l = m.Role.Size()
		n += 1 + l + sovGnmiExt(uint64(l))
	}
	if m.ElectionId != nil {
		l = m.ElectionId.Size()
		n += 1 + l + sovGnmiExt(uint64(l))
	}
	return n
}

func (m *Uint128) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.High != 0 {
		n += 1 + sovGnmiExt(uint64(m.High))
	}
	if m.Low != 0 {
		n += 1 + sovGnmiExt(uint64(m.Low))
	}
	return n
}

func (m *Role) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovGnmiExt(uint64(l))
	}
	return n
}

func sovGnmiExt(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozGnmiExt(x uint64) (n int) {
	return sovGnmiExt(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Extension) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGnmiExt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Extension: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Extension: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RegisteredExt", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGnmiExt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGnmiExt
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGnmiExt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &RegisteredExtension{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Ext = &Extension_RegisteredExt{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterArbitration", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGnmiExt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGnmiExt
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGnmiExt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MasterArbitration{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Ext = &Extension_MasterArbitration{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGnmiExt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGnmiExt
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGnmiExt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisteredExtension) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGnmiExt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisteredExtension: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisteredExtension: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGnmiExt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= ExtensionID(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGnmiExt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthGnmiExt
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthGnmiExt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = append(m.Msg[:0], dAtA[iNdEx:postIndex]...)
			if m.Msg == nil {
				m.Msg = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGnmiExt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGnmiExt
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGnmiExt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MasterArbitration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGnmiExt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MasterArbitration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MasterArbitration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGnmiExt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGnmiExt
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGnmiExt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Role == nil {
				m.Role = &Role{}
			}
			if err := m.Role.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ElectionId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGnmiExt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGnmiExt
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthGnmiExt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ElectionId == nil {
				m.ElectionId = &Uint128{}
			}
			if err := m.ElectionId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGnmiExt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGnmiExt
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGnmiExt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Uint128) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGnmiExt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Uint128: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Uint128: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field High", wireType)
			}
			m.High = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGnmiExt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.High |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Low", wireType)
			}
			m.Low = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGnmiExt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Low |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGnmiExt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGnmiExt
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGnmiExt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Role) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGnmiExt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Role: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Role: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGnmiExt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthGnmiExt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthGnmiExt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGnmiExt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGnmiExt
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthGnmiExt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGnmiExt(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGnmiExt
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGnmiExt
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGnmiExt
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthGnmiExt
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupGnmiExt
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthGnmiExt
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthGnmiExt        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGnmiExt          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupGnmiExt = fmt.Errorf("proto: unexpected end of group")
)
