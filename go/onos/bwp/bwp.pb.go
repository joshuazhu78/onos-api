// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: onos/bwp/bwp.proto

// Package onos.bwp defines interfaces to monitor BWP

package bwp

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type CellType int32

const (
	CellType_FEMTO         CellType = 0
	CellType_ENTERPRISE    CellType = 1
	CellType_OUTDOOR_SMALL CellType = 2
	CellType_MACRO         CellType = 3
)

var CellType_name = map[int32]string{
	0: "FEMTO",
	1: "ENTERPRISE",
	2: "OUTDOOR_SMALL",
	3: "MACRO",
}

var CellType_value = map[string]int32{
	"FEMTO":         0,
	"ENTERPRISE":    1,
	"OUTDOOR_SMALL": 2,
	"MACRO":         3,
}

func (x CellType) String() string {
	return proto.EnumName(CellType_name, int32(x))
}

func (CellType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_c1acc9dd09d154a7, []int{0}
}

// if cell id is not specified, will return all cells with conflicts
type GetConflictsRequest struct {
	CellId uint64 `protobuf:"varint,1,opt,name=cell_id,json=cellId,proto3" json:"cell_id,omitempty"`
}

func (m *GetConflictsRequest) Reset()         { *m = GetConflictsRequest{} }
func (m *GetConflictsRequest) String() string { return proto.CompactTextString(m) }
func (*GetConflictsRequest) ProtoMessage()    {}
func (*GetConflictsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1acc9dd09d154a7, []int{0}
}
func (m *GetConflictsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetConflictsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetConflictsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetConflictsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetConflictsRequest.Merge(m, src)
}
func (m *GetConflictsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetConflictsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetConflictsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetConflictsRequest proto.InternalMessageInfo

func (m *GetConflictsRequest) GetCellId() uint64 {
	if m != nil {
		return m.CellId
	}
	return 0
}

type GetConflictsResponse struct {
	Cells []*BwpCell `protobuf:"bytes,1,rep,name=cells,proto3" json:"cells,omitempty"`
}

func (m *GetConflictsResponse) Reset()         { *m = GetConflictsResponse{} }
func (m *GetConflictsResponse) String() string { return proto.CompactTextString(m) }
func (*GetConflictsResponse) ProtoMessage()    {}
func (*GetConflictsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1acc9dd09d154a7, []int{1}
}
func (m *GetConflictsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetConflictsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetConflictsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetConflictsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetConflictsResponse.Merge(m, src)
}
func (m *GetConflictsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetConflictsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetConflictsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetConflictsResponse proto.InternalMessageInfo

func (m *GetConflictsResponse) GetCells() []*BwpCell {
	if m != nil {
		return m.Cells
	}
	return nil
}

type GetResolvedConflictsRequest struct {
}

func (m *GetResolvedConflictsRequest) Reset()         { *m = GetResolvedConflictsRequest{} }
func (m *GetResolvedConflictsRequest) String() string { return proto.CompactTextString(m) }
func (*GetResolvedConflictsRequest) ProtoMessage()    {}
func (*GetResolvedConflictsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1acc9dd09d154a7, []int{2}
}
func (m *GetResolvedConflictsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetResolvedConflictsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetResolvedConflictsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetResolvedConflictsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetResolvedConflictsRequest.Merge(m, src)
}
func (m *GetResolvedConflictsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetResolvedConflictsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetResolvedConflictsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetResolvedConflictsRequest proto.InternalMessageInfo

// returns all the resolved conflicts in the store
type GetResolvedConflictsResponse struct {
	Cells []*CellResolution `protobuf:"bytes,1,rep,name=cells,proto3" json:"cells,omitempty"`
}

func (m *GetResolvedConflictsResponse) Reset()         { *m = GetResolvedConflictsResponse{} }
func (m *GetResolvedConflictsResponse) String() string { return proto.CompactTextString(m) }
func (*GetResolvedConflictsResponse) ProtoMessage()    {}
func (*GetResolvedConflictsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1acc9dd09d154a7, []int{3}
}
func (m *GetResolvedConflictsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetResolvedConflictsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetResolvedConflictsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetResolvedConflictsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetResolvedConflictsResponse.Merge(m, src)
}
func (m *GetResolvedConflictsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetResolvedConflictsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetResolvedConflictsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetResolvedConflictsResponse proto.InternalMessageInfo

func (m *GetResolvedConflictsResponse) GetCells() []*CellResolution {
	if m != nil {
		return m.Cells
	}
	return nil
}

type CellResolution struct {
	Id                uint64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ResolvedBwp       []int32 `protobuf:"varint,2,rep,packed,name=resolved_bwp,json=resolvedBwp,proto3" json:"resolved_bwp,omitempty"`
	OriginalBwp       []int32 `protobuf:"varint,3,rep,packed,name=original_bwp,json=originalBwp,proto3" json:"original_bwp,omitempty"`
	ResolvedConflicts uint32  `protobuf:"varint,4,opt,name=resolved_conflicts,json=resolvedConflicts,proto3" json:"resolved_conflicts,omitempty"`
}

func (m *CellResolution) Reset()         { *m = CellResolution{} }
func (m *CellResolution) String() string { return proto.CompactTextString(m) }
func (*CellResolution) ProtoMessage()    {}
func (*CellResolution) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1acc9dd09d154a7, []int{4}
}
func (m *CellResolution) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CellResolution) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CellResolution.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CellResolution) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CellResolution.Merge(m, src)
}
func (m *CellResolution) XXX_Size() int {
	return m.Size()
}
func (m *CellResolution) XXX_DiscardUnknown() {
	xxx_messageInfo_CellResolution.DiscardUnknown(m)
}

var xxx_messageInfo_CellResolution proto.InternalMessageInfo

func (m *CellResolution) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *CellResolution) GetResolvedBwp() []int32 {
	if m != nil {
		return m.ResolvedBwp
	}
	return nil
}

func (m *CellResolution) GetOriginalBwp() []int32 {
	if m != nil {
		return m.OriginalBwp
	}
	return nil
}

func (m *CellResolution) GetResolvedConflicts() uint32 {
	if m != nil {
		return m.ResolvedConflicts
	}
	return 0
}

// cell id required
type GetCellRequest struct {
	CellId uint64 `protobuf:"varint,1,opt,name=cell_id,json=cellId,proto3" json:"cell_id,omitempty"`
}

func (m *GetCellRequest) Reset()         { *m = GetCellRequest{} }
func (m *GetCellRequest) String() string { return proto.CompactTextString(m) }
func (*GetCellRequest) ProtoMessage()    {}
func (*GetCellRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1acc9dd09d154a7, []int{5}
}
func (m *GetCellRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCellRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCellRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCellRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCellRequest.Merge(m, src)
}
func (m *GetCellRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCellRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCellRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCellRequest proto.InternalMessageInfo

func (m *GetCellRequest) GetCellId() uint64 {
	if m != nil {
		return m.CellId
	}
	return 0
}

type GetCellResponse struct {
	Cell *BwpCell `protobuf:"bytes,1,opt,name=cell,proto3" json:"cell,omitempty"`
}

func (m *GetCellResponse) Reset()         { *m = GetCellResponse{} }
func (m *GetCellResponse) String() string { return proto.CompactTextString(m) }
func (*GetCellResponse) ProtoMessage()    {}
func (*GetCellResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1acc9dd09d154a7, []int{6}
}
func (m *GetCellResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCellResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCellResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCellResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCellResponse.Merge(m, src)
}
func (m *GetCellResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCellResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCellResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCellResponse proto.InternalMessageInfo

func (m *GetCellResponse) GetCell() *BwpCell {
	if m != nil {
		return m.Cell
	}
	return nil
}

type GetCellsRequest struct {
}

func (m *GetCellsRequest) Reset()         { *m = GetCellsRequest{} }
func (m *GetCellsRequest) String() string { return proto.CompactTextString(m) }
func (*GetCellsRequest) ProtoMessage()    {}
func (*GetCellsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1acc9dd09d154a7, []int{7}
}
func (m *GetCellsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCellsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCellsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCellsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCellsRequest.Merge(m, src)
}
func (m *GetCellsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetCellsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCellsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetCellsRequest proto.InternalMessageInfo

type GetCellsResponse struct {
	Cells []*BwpCell `protobuf:"bytes,1,rep,name=cells,proto3" json:"cells,omitempty"`
}

func (m *GetCellsResponse) Reset()         { *m = GetCellsResponse{} }
func (m *GetCellsResponse) String() string { return proto.CompactTextString(m) }
func (*GetCellsResponse) ProtoMessage()    {}
func (*GetCellsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1acc9dd09d154a7, []int{8}
}
func (m *GetCellsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetCellsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetCellsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetCellsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetCellsResponse.Merge(m, src)
}
func (m *GetCellsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetCellsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetCellsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetCellsResponse proto.InternalMessageInfo

func (m *GetCellsResponse) GetCells() []*BwpCell {
	if m != nil {
		return m.Cells
	}
	return nil
}

type BwpCell struct {
	Id          uint64   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NodeId      string   `protobuf:"bytes,2,opt,name=node_id,json=nodeId,proto3" json:"node_id,omitempty"`
	Arfcn       uint32   `protobuf:"varint,3,opt,name=arfcn,proto3" json:"arfcn,omitempty"`
	CellType    CellType `protobuf:"varint,4,opt,name=cell_type,json=cellType,proto3,enum=onos.bwp.CellType" json:"cell_type,omitempty"`
	Bwps        []int32  `protobuf:"varint,5,rep,packed,name=bwps,proto3" json:"bwps,omitempty"`
	NeighborIds []uint64 `protobuf:"varint,6,rep,packed,name=neighbor_ids,json=neighborIds,proto3" json:"neighbor_ids,omitempty"`
}

func (m *BwpCell) Reset()         { *m = BwpCell{} }
func (m *BwpCell) String() string { return proto.CompactTextString(m) }
func (*BwpCell) ProtoMessage()    {}
func (*BwpCell) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1acc9dd09d154a7, []int{9}
}
func (m *BwpCell) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BwpCell) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BwpCell.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BwpCell) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BwpCell.Merge(m, src)
}
func (m *BwpCell) XXX_Size() int {
	return m.Size()
}
func (m *BwpCell) XXX_DiscardUnknown() {
	xxx_messageInfo_BwpCell.DiscardUnknown(m)
}

var xxx_messageInfo_BwpCell proto.InternalMessageInfo

func (m *BwpCell) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *BwpCell) GetNodeId() string {
	if m != nil {
		return m.NodeId
	}
	return ""
}

func (m *BwpCell) GetArfcn() uint32 {
	if m != nil {
		return m.Arfcn
	}
	return 0
}

func (m *BwpCell) GetCellType() CellType {
	if m != nil {
		return m.CellType
	}
	return CellType_FEMTO
}

func (m *BwpCell) GetBwps() []int32 {
	if m != nil {
		return m.Bwps
	}
	return nil
}

func (m *BwpCell) GetNeighborIds() []uint64 {
	if m != nil {
		return m.NeighborIds
	}
	return nil
}

// ue id required
type GetUeRequest struct {
	UeId string `protobuf:"bytes,1,opt,name=ue_id,json=ueId,proto3" json:"ue_id,omitempty"`
}

func (m *GetUeRequest) Reset()         { *m = GetUeRequest{} }
func (m *GetUeRequest) String() string { return proto.CompactTextString(m) }
func (*GetUeRequest) ProtoMessage()    {}
func (*GetUeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1acc9dd09d154a7, []int{10}
}
func (m *GetUeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUeRequest.Merge(m, src)
}
func (m *GetUeRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetUeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetUeRequest proto.InternalMessageInfo

func (m *GetUeRequest) GetUeId() string {
	if m != nil {
		return m.UeId
	}
	return ""
}

type GetUeResponse struct {
	Ue *BwpUe `protobuf:"bytes,1,opt,name=ue,proto3" json:"ue,omitempty"`
}

func (m *GetUeResponse) Reset()         { *m = GetUeResponse{} }
func (m *GetUeResponse) String() string { return proto.CompactTextString(m) }
func (*GetUeResponse) ProtoMessage()    {}
func (*GetUeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1acc9dd09d154a7, []int{11}
}
func (m *GetUeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUeResponse.Merge(m, src)
}
func (m *GetUeResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetUeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetUeResponse proto.InternalMessageInfo

func (m *GetUeResponse) GetUe() *BwpUe {
	if m != nil {
		return m.Ue
	}
	return nil
}

type GetUesRequest struct {
}

func (m *GetUesRequest) Reset()         { *m = GetUesRequest{} }
func (m *GetUesRequest) String() string { return proto.CompactTextString(m) }
func (*GetUesRequest) ProtoMessage()    {}
func (*GetUesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1acc9dd09d154a7, []int{12}
}
func (m *GetUesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUesRequest.Merge(m, src)
}
func (m *GetUesRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetUesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetUesRequest proto.InternalMessageInfo

type GetUesResponse struct {
	Ues []*BwpUe `protobuf:"bytes,1,rep,name=ues,proto3" json:"ues,omitempty"`
}

func (m *GetUesResponse) Reset()         { *m = GetUesResponse{} }
func (m *GetUesResponse) String() string { return proto.CompactTextString(m) }
func (*GetUesResponse) ProtoMessage()    {}
func (*GetUesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1acc9dd09d154a7, []int{13}
}
func (m *GetUesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetUesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetUesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetUesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetUesResponse.Merge(m, src)
}
func (m *GetUesResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetUesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetUesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetUesResponse proto.InternalMessageInfo

func (m *GetUesResponse) GetUes() []*BwpUe {
	if m != nil {
		return m.Ues
	}
	return nil
}

type BwpUe struct {
	UeId    string `protobuf:"bytes,1,opt,name=ue_id,json=ueId,proto3" json:"ue_id,omitempty"`
	DlTputs int32  `protobuf:"varint,2,opt,name=dl_tputs,json=dlTputs,proto3" json:"dl_tputs,omitempty"`
}

func (m *BwpUe) Reset()         { *m = BwpUe{} }
func (m *BwpUe) String() string { return proto.CompactTextString(m) }
func (*BwpUe) ProtoMessage()    {}
func (*BwpUe) Descriptor() ([]byte, []int) {
	return fileDescriptor_c1acc9dd09d154a7, []int{14}
}
func (m *BwpUe) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BwpUe) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BwpUe.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BwpUe) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BwpUe.Merge(m, src)
}
func (m *BwpUe) XXX_Size() int {
	return m.Size()
}
func (m *BwpUe) XXX_DiscardUnknown() {
	xxx_messageInfo_BwpUe.DiscardUnknown(m)
}

var xxx_messageInfo_BwpUe proto.InternalMessageInfo

func (m *BwpUe) GetUeId() string {
	if m != nil {
		return m.UeId
	}
	return ""
}

func (m *BwpUe) GetDlTputs() int32 {
	if m != nil {
		return m.DlTputs
	}
	return 0
}

func init() {
	proto.RegisterEnum("onos.bwp.CellType", CellType_name, CellType_value)
	proto.RegisterType((*GetConflictsRequest)(nil), "onos.bwp.GetConflictsRequest")
	proto.RegisterType((*GetConflictsResponse)(nil), "onos.bwp.GetConflictsResponse")
	proto.RegisterType((*GetResolvedConflictsRequest)(nil), "onos.bwp.GetResolvedConflictsRequest")
	proto.RegisterType((*GetResolvedConflictsResponse)(nil), "onos.bwp.GetResolvedConflictsResponse")
	proto.RegisterType((*CellResolution)(nil), "onos.bwp.CellResolution")
	proto.RegisterType((*GetCellRequest)(nil), "onos.bwp.GetCellRequest")
	proto.RegisterType((*GetCellResponse)(nil), "onos.bwp.GetCellResponse")
	proto.RegisterType((*GetCellsRequest)(nil), "onos.bwp.GetCellsRequest")
	proto.RegisterType((*GetCellsResponse)(nil), "onos.bwp.GetCellsResponse")
	proto.RegisterType((*BwpCell)(nil), "onos.bwp.BwpCell")
	proto.RegisterType((*GetUeRequest)(nil), "onos.bwp.GetUeRequest")
	proto.RegisterType((*GetUeResponse)(nil), "onos.bwp.GetUeResponse")
	proto.RegisterType((*GetUesRequest)(nil), "onos.bwp.GetUesRequest")
	proto.RegisterType((*GetUesResponse)(nil), "onos.bwp.GetUesResponse")
	proto.RegisterType((*BwpUe)(nil), "onos.bwp.BwpUe")
}

func init() { proto.RegisterFile("onos/bwp/bwp.proto", fileDescriptor_c1acc9dd09d154a7) }

var fileDescriptor_c1acc9dd09d154a7 = []byte{
	// 684 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x54, 0xcd, 0x4e, 0xdb, 0x4c,
	0x14, 0x8d, 0xed, 0x38, 0x3f, 0x17, 0x08, 0xc9, 0x80, 0x3e, 0x4c, 0xbe, 0xe2, 0x06, 0x57, 0xb4,
	0x69, 0xa5, 0x86, 0x0a, 0x16, 0xad, 0x5a, 0x55, 0x2d, 0xa4, 0x29, 0x8a, 0x04, 0xa4, 0x1a, 0xc2,
	0x3a, 0xc2, 0xf1, 0x40, 0x2d, 0x59, 0xb6, 0xeb, 0x9f, 0x5a, 0xbc, 0x45, 0x37, 0x7d, 0x8f, 0xbe,
	0x42, 0x77, 0x5d, 0xb2, 0xec, 0xb2, 0x82, 0x17, 0xa9, 0x66, 0xe2, 0x99, 0xc8, 0xd8, 0x08, 0x75,
	0x61, 0xc9, 0x73, 0xcf, 0xb9, 0x73, 0xee, 0x9c, 0x7b, 0x67, 0x00, 0x79, 0xae, 0x17, 0x6e, 0x9b,
	0x89, 0x4f, 0xbf, 0x9e, 0x1f, 0x78, 0x91, 0x87, 0x6a, 0x34, 0xd6, 0x33, 0x13, 0xdf, 0xe8, 0xc1,
	0xca, 0x01, 0x89, 0xfa, 0x9e, 0x7b, 0xee, 0xd8, 0xd3, 0x28, 0xc4, 0xe4, 0x4b, 0x4c, 0xc2, 0x08,
	0xad, 0x41, 0x75, 0x4a, 0x1c, 0x67, 0x62, 0x5b, 0x9a, 0xd4, 0x91, 0xba, 0x65, 0x5c, 0xa1, 0xcb,
	0xa1, 0x65, 0xbc, 0x83, 0xd5, 0x2c, 0x3f, 0xf4, 0x3d, 0x37, 0x24, 0xe8, 0x09, 0xa8, 0x94, 0x11,
	0x6a, 0x52, 0x47, 0xe9, 0x2e, 0xec, 0xb4, 0x7a, 0x5c, 0xa1, 0xb7, 0x9f, 0xf8, 0x7d, 0xe2, 0x38,
	0x78, 0x86, 0x1b, 0x1b, 0xf0, 0xff, 0x01, 0x89, 0x30, 0x09, 0x3d, 0xe7, 0x2b, 0xb1, 0x6e, 0x0b,
	0x1b, 0xc7, 0xf0, 0xa0, 0x18, 0x4e, 0x75, 0x7a, 0x59, 0x1d, 0x6d, 0xae, 0xc3, 0x44, 0x68, 0x5e,
	0x1c, 0xd9, 0x9e, 0xcb, 0xe5, 0xbe, 0x4b, 0xd0, 0xc8, 0x22, 0xa8, 0x01, 0xb2, 0x38, 0x96, 0x6c,
	0x5b, 0x68, 0x13, 0x16, 0x83, 0x54, 0x6f, 0x62, 0x26, 0xbe, 0x26, 0x77, 0x94, 0xae, 0x8a, 0x17,
	0x78, 0x6c, 0x3f, 0xf1, 0x29, 0xc5, 0x0b, 0xec, 0x0b, 0xdb, 0x3d, 0x73, 0x18, 0x45, 0x99, 0x51,
	0x78, 0x8c, 0x52, 0x9e, 0x03, 0x12, 0xbb, 0x4c, 0x79, 0xd9, 0x5a, 0xb9, 0x23, 0x75, 0x97, 0x70,
	0x2b, 0xb8, 0x7d, 0x1e, 0xe3, 0x29, 0x34, 0xa8, 0x8f, 0xac, 0xb2, 0x7b, 0x2c, 0x7f, 0x05, 0xcb,
	0x82, 0x9a, 0xba, 0xb0, 0x05, 0x65, 0x0a, 0x32, 0x62, 0xa1, 0xd9, 0x0c, 0x36, 0x5a, 0x22, 0x53,
	0xf8, 0xfb, 0x06, 0x9a, 0xf3, 0xd0, 0xbf, 0xf6, 0xee, 0x87, 0x04, 0xd5, 0x34, 0x94, 0x73, 0x71,
	0x0d, 0xaa, 0xae, 0x67, 0x11, 0x5a, 0xbe, 0xdc, 0x91, 0xba, 0x75, 0x5c, 0xa1, 0xcb, 0xa1, 0x85,
	0x56, 0x41, 0x3d, 0x0b, 0xce, 0xa7, 0xae, 0xa6, 0x30, 0x2f, 0x66, 0x0b, 0xb4, 0x0d, 0x75, 0x76,
	0xda, 0xe8, 0xd2, 0x27, 0xcc, 0xa5, 0xc6, 0x0e, 0xca, 0xf6, 0x72, 0x7c, 0xe9, 0x13, 0x5c, 0x9b,
	0xa6, 0x7f, 0x08, 0x41, 0xd9, 0x4c, 0xfc, 0x50, 0x53, 0x99, 0xf5, 0xec, 0x9f, 0xb6, 0xc5, 0x25,
	0xf6, 0xc5, 0x67, 0xd3, 0x0b, 0x26, 0xb6, 0x15, 0x6a, 0x95, 0x8e, 0xd2, 0x2d, 0xe3, 0x05, 0x1e,
	0x1b, 0x5a, 0xa1, 0xf1, 0x08, 0x16, 0x0f, 0x48, 0x74, 0x4a, 0xb8, 0xcb, 0x2b, 0xa0, 0xc6, 0x84,
	0x7b, 0x5c, 0xc7, 0xe5, 0x98, 0x0c, 0x2d, 0xe3, 0x05, 0x2c, 0xa5, 0xa4, 0xd4, 0x91, 0x87, 0x20,
	0xc7, 0x24, 0x75, 0x77, 0x39, 0x63, 0xc7, 0x29, 0xc1, 0x72, 0x4c, 0x8c, 0xe5, 0x34, 0x43, 0xf8,
	0xba, 0xcb, 0xfa, 0xc9, 0x02, 0xe9, 0x1e, 0x9b, 0xa0, 0xc4, 0x84, 0x7b, 0x9a, 0xdb, 0x84, 0x62,
	0xc6, 0x4b, 0x50, 0xd9, 0xaa, 0xb0, 0x2a, 0xb4, 0x0e, 0x35, 0xcb, 0x99, 0x44, 0x7e, 0x1c, 0x85,
	0xcc, 0x52, 0x15, 0x57, 0x2d, 0x67, 0x4c, 0x97, 0xcf, 0xfa, 0x50, 0xe3, 0x16, 0xa1, 0x3a, 0xa8,
	0x1f, 0x07, 0x47, 0xe3, 0x51, 0xb3, 0x84, 0x1a, 0x00, 0x83, 0xe3, 0xf1, 0x00, 0x7f, 0xc2, 0xc3,
	0x93, 0x41, 0x53, 0x42, 0x2d, 0x58, 0x1a, 0x9d, 0x8e, 0x3f, 0x8c, 0x46, 0x78, 0x72, 0x72, 0xb4,
	0x77, 0x78, 0xd8, 0x94, 0x29, 0xfb, 0x68, 0xaf, 0x8f, 0x47, 0x4d, 0x65, 0xe7, 0xa7, 0x02, 0x0a,
	0x9d, 0xdc, 0x11, 0xb3, 0x48, 0x8c, 0x26, 0xda, 0x98, 0xd7, 0x5a, 0xf0, 0x34, 0xb4, 0xf5, 0xbb,
	0xe0, 0xd9, 0xb9, 0x8d, 0x12, 0xba, 0x60, 0x6f, 0x44, 0xee, 0x0e, 0xa3, 0xad, 0x4c, 0xe6, 0x5d,
	0x4f, 0x40, 0xfb, 0xf1, 0x7d, 0x34, 0x21, 0xf4, 0x1e, 0xaa, 0xe9, 0x30, 0x23, 0x2d, 0x5b, 0xd5,
	0xfc, 0x5e, 0xb5, 0xd7, 0x0b, 0x10, 0xb1, 0x43, 0x1f, 0x6a, 0xfc, 0x3a, 0xa0, 0x3c, 0x51, 0x94,
	0xd4, 0x2e, 0x82, 0xc4, 0x26, 0xaf, 0x41, 0x65, 0xbd, 0x47, 0xff, 0x65, 0x68, 0x62, 0xe8, 0xda,
	0x6b, 0xb9, 0xb8, 0xc8, 0x7d, 0x0b, 0x95, 0xd9, 0xdc, 0xa0, 0xdb, 0x24, 0x21, 0xae, 0xe5, 0x01,
	0x9e, 0xbe, 0xaf, 0xfd, 0xba, 0xd6, 0xa5, 0xab, 0x6b, 0x5d, 0xfa, 0x73, 0xad, 0x4b, 0xdf, 0x6e,
	0xf4, 0xd2, 0xd5, 0x8d, 0x5e, 0xfa, 0x7d, 0xa3, 0x97, 0xcc, 0x0a, 0x7b, 0xe9, 0x77, 0xff, 0x06,
	0x00, 0x00, 0xff, 0xff, 0xc8, 0xb5, 0x42, 0xc7, 0xff, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BwpClient is the client API for Bwp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BwpClient interface {
	GetConflicts(ctx context.Context, in *GetConflictsRequest, opts ...grpc.CallOption) (*GetConflictsResponse, error)
	GetResolvedConflicts(ctx context.Context, in *GetResolvedConflictsRequest, opts ...grpc.CallOption) (*GetResolvedConflictsResponse, error)
	GetCell(ctx context.Context, in *GetCellRequest, opts ...grpc.CallOption) (*GetCellResponse, error)
	GetCells(ctx context.Context, in *GetCellsRequest, opts ...grpc.CallOption) (*GetCellsResponse, error)
	GetUe(ctx context.Context, in *GetUeRequest, opts ...grpc.CallOption) (*GetUeResponse, error)
	GetUes(ctx context.Context, in *GetUesRequest, opts ...grpc.CallOption) (*GetUesResponse, error)
}

type bwpClient struct {
	cc *grpc.ClientConn
}

func NewBwpClient(cc *grpc.ClientConn) BwpClient {
	return &bwpClient{cc}
}

func (c *bwpClient) GetConflicts(ctx context.Context, in *GetConflictsRequest, opts ...grpc.CallOption) (*GetConflictsResponse, error) {
	out := new(GetConflictsResponse)
	err := c.cc.Invoke(ctx, "/onos.bwp.Bwp/GetConflicts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bwpClient) GetResolvedConflicts(ctx context.Context, in *GetResolvedConflictsRequest, opts ...grpc.CallOption) (*GetResolvedConflictsResponse, error) {
	out := new(GetResolvedConflictsResponse)
	err := c.cc.Invoke(ctx, "/onos.bwp.Bwp/GetResolvedConflicts", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bwpClient) GetCell(ctx context.Context, in *GetCellRequest, opts ...grpc.CallOption) (*GetCellResponse, error) {
	out := new(GetCellResponse)
	err := c.cc.Invoke(ctx, "/onos.bwp.Bwp/GetCell", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bwpClient) GetCells(ctx context.Context, in *GetCellsRequest, opts ...grpc.CallOption) (*GetCellsResponse, error) {
	out := new(GetCellsResponse)
	err := c.cc.Invoke(ctx, "/onos.bwp.Bwp/GetCells", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bwpClient) GetUe(ctx context.Context, in *GetUeRequest, opts ...grpc.CallOption) (*GetUeResponse, error) {
	out := new(GetUeResponse)
	err := c.cc.Invoke(ctx, "/onos.bwp.Bwp/GetUe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bwpClient) GetUes(ctx context.Context, in *GetUesRequest, opts ...grpc.CallOption) (*GetUesResponse, error) {
	out := new(GetUesResponse)
	err := c.cc.Invoke(ctx, "/onos.bwp.Bwp/GetUes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BwpServer is the server API for Bwp service.
type BwpServer interface {
	GetConflicts(context.Context, *GetConflictsRequest) (*GetConflictsResponse, error)
	GetResolvedConflicts(context.Context, *GetResolvedConflictsRequest) (*GetResolvedConflictsResponse, error)
	GetCell(context.Context, *GetCellRequest) (*GetCellResponse, error)
	GetCells(context.Context, *GetCellsRequest) (*GetCellsResponse, error)
	GetUe(context.Context, *GetUeRequest) (*GetUeResponse, error)
	GetUes(context.Context, *GetUesRequest) (*GetUesResponse, error)
}

// UnimplementedBwpServer can be embedded to have forward compatible implementations.
type UnimplementedBwpServer struct {
}

func (*UnimplementedBwpServer) GetConflicts(ctx context.Context, req *GetConflictsRequest) (*GetConflictsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConflicts not implemented")
}
func (*UnimplementedBwpServer) GetResolvedConflicts(ctx context.Context, req *GetResolvedConflictsRequest) (*GetResolvedConflictsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResolvedConflicts not implemented")
}
func (*UnimplementedBwpServer) GetCell(ctx context.Context, req *GetCellRequest) (*GetCellResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCell not implemented")
}
func (*UnimplementedBwpServer) GetCells(ctx context.Context, req *GetCellsRequest) (*GetCellsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCells not implemented")
}
func (*UnimplementedBwpServer) GetUe(ctx context.Context, req *GetUeRequest) (*GetUeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUe not implemented")
}
func (*UnimplementedBwpServer) GetUes(ctx context.Context, req *GetUesRequest) (*GetUesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUes not implemented")
}

func RegisterBwpServer(s *grpc.Server, srv BwpServer) {
	s.RegisterService(&_Bwp_serviceDesc, srv)
}

func _Bwp_GetConflicts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetConflictsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BwpServer).GetConflicts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.bwp.Bwp/GetConflicts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BwpServer).GetConflicts(ctx, req.(*GetConflictsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bwp_GetResolvedConflicts_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResolvedConflictsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BwpServer).GetResolvedConflicts(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.bwp.Bwp/GetResolvedConflicts",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BwpServer).GetResolvedConflicts(ctx, req.(*GetResolvedConflictsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bwp_GetCell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCellRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BwpServer).GetCell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.bwp.Bwp/GetCell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BwpServer).GetCell(ctx, req.(*GetCellRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bwp_GetCells_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCellsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BwpServer).GetCells(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.bwp.Bwp/GetCells",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BwpServer).GetCells(ctx, req.(*GetCellsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bwp_GetUe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BwpServer).GetUe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.bwp.Bwp/GetUe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BwpServer).GetUe(ctx, req.(*GetUeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bwp_GetUes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BwpServer).GetUes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/onos.bwp.Bwp/GetUes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BwpServer).GetUes(ctx, req.(*GetUesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Bwp_serviceDesc = grpc.ServiceDesc{
	ServiceName: "onos.bwp.Bwp",
	HandlerType: (*BwpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConflicts",
			Handler:    _Bwp_GetConflicts_Handler,
		},
		{
			MethodName: "GetResolvedConflicts",
			Handler:    _Bwp_GetResolvedConflicts_Handler,
		},
		{
			MethodName: "GetCell",
			Handler:    _Bwp_GetCell_Handler,
		},
		{
			MethodName: "GetCells",
			Handler:    _Bwp_GetCells_Handler,
		},
		{
			MethodName: "GetUe",
			Handler:    _Bwp_GetUe_Handler,
		},
		{
			MethodName: "GetUes",
			Handler:    _Bwp_GetUes_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "onos/bwp/bwp.proto",
}

func (m *GetConflictsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetConflictsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetConflictsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CellId != 0 {
		i = encodeVarintBwp(dAtA, i, uint64(m.CellId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetConflictsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetConflictsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetConflictsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cells) > 0 {
		for iNdEx := len(m.Cells) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cells[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBwp(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *GetResolvedConflictsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetResolvedConflictsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetResolvedConflictsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetResolvedConflictsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetResolvedConflictsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetResolvedConflictsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cells) > 0 {
		for iNdEx := len(m.Cells) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cells[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBwp(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *CellResolution) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CellResolution) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CellResolution) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ResolvedConflicts != 0 {
		i = encodeVarintBwp(dAtA, i, uint64(m.ResolvedConflicts))
		i--
		dAtA[i] = 0x20
	}
	if len(m.OriginalBwp) > 0 {
		dAtA2 := make([]byte, len(m.OriginalBwp)*10)
		var j1 int
		for _, num1 := range m.OriginalBwp {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA2[j1] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j1++
			}
			dAtA2[j1] = uint8(num)
			j1++
		}
		i -= j1
		copy(dAtA[i:], dAtA2[:j1])
		i = encodeVarintBwp(dAtA, i, uint64(j1))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ResolvedBwp) > 0 {
		dAtA4 := make([]byte, len(m.ResolvedBwp)*10)
		var j3 int
		for _, num1 := range m.ResolvedBwp {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA4[j3] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j3++
			}
			dAtA4[j3] = uint8(num)
			j3++
		}
		i -= j3
		copy(dAtA[i:], dAtA4[:j3])
		i = encodeVarintBwp(dAtA, i, uint64(j3))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintBwp(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetCellRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCellRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCellRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.CellId != 0 {
		i = encodeVarintBwp(dAtA, i, uint64(m.CellId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetCellResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCellResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCellResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Cell != nil {
		{
			size, err := m.Cell.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBwp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetCellsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCellsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCellsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetCellsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetCellsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetCellsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Cells) > 0 {
		for iNdEx := len(m.Cells) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Cells[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBwp(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BwpCell) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BwpCell) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BwpCell) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.NeighborIds) > 0 {
		dAtA7 := make([]byte, len(m.NeighborIds)*10)
		var j6 int
		for _, num := range m.NeighborIds {
			for num >= 1<<7 {
				dAtA7[j6] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j6++
			}
			dAtA7[j6] = uint8(num)
			j6++
		}
		i -= j6
		copy(dAtA[i:], dAtA7[:j6])
		i = encodeVarintBwp(dAtA, i, uint64(j6))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Bwps) > 0 {
		dAtA9 := make([]byte, len(m.Bwps)*10)
		var j8 int
		for _, num1 := range m.Bwps {
			num := uint64(num1)
			for num >= 1<<7 {
				dAtA9[j8] = uint8(uint64(num)&0x7f | 0x80)
				num >>= 7
				j8++
			}
			dAtA9[j8] = uint8(num)
			j8++
		}
		i -= j8
		copy(dAtA[i:], dAtA9[:j8])
		i = encodeVarintBwp(dAtA, i, uint64(j8))
		i--
		dAtA[i] = 0x2a
	}
	if m.CellType != 0 {
		i = encodeVarintBwp(dAtA, i, uint64(m.CellType))
		i--
		dAtA[i] = 0x20
	}
	if m.Arfcn != 0 {
		i = encodeVarintBwp(dAtA, i, uint64(m.Arfcn))
		i--
		dAtA[i] = 0x18
	}
	if len(m.NodeId) > 0 {
		i -= len(m.NodeId)
		copy(dAtA[i:], m.NodeId)
		i = encodeVarintBwp(dAtA, i, uint64(len(m.NodeId)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintBwp(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *GetUeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.UeId) > 0 {
		i -= len(m.UeId)
		copy(dAtA[i:], m.UeId)
		i = encodeVarintBwp(dAtA, i, uint64(len(m.UeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetUeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Ue != nil {
		{
			size, err := m.Ue.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintBwp(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetUesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetUesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetUesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetUesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Ues) > 0 {
		for iNdEx := len(m.Ues) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Ues[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintBwp(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BwpUe) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BwpUe) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BwpUe) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DlTputs != 0 {
		i = encodeVarintBwp(dAtA, i, uint64(m.DlTputs))
		i--
		dAtA[i] = 0x10
	}
	if len(m.UeId) > 0 {
		i -= len(m.UeId)
		copy(dAtA[i:], m.UeId)
		i = encodeVarintBwp(dAtA, i, uint64(len(m.UeId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBwp(dAtA []byte, offset int, v uint64) int {
	offset -= sovBwp(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *GetConflictsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CellId != 0 {
		n += 1 + sovBwp(uint64(m.CellId))
	}
	return n
}

func (m *GetConflictsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Cells) > 0 {
		for _, e := range m.Cells {
			l = e.Size()
			n += 1 + l + sovBwp(uint64(l))
		}
	}
	return n
}

func (m *GetResolvedConflictsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetResolvedConflictsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Cells) > 0 {
		for _, e := range m.Cells {
			l = e.Size()
			n += 1 + l + sovBwp(uint64(l))
		}
	}
	return n
}

func (m *CellResolution) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBwp(uint64(m.Id))
	}
	if len(m.ResolvedBwp) > 0 {
		l = 0
		for _, e := range m.ResolvedBwp {
			l += sovBwp(uint64(e))
		}
		n += 1 + sovBwp(uint64(l)) + l
	}
	if len(m.OriginalBwp) > 0 {
		l = 0
		for _, e := range m.OriginalBwp {
			l += sovBwp(uint64(e))
		}
		n += 1 + sovBwp(uint64(l)) + l
	}
	if m.ResolvedConflicts != 0 {
		n += 1 + sovBwp(uint64(m.ResolvedConflicts))
	}
	return n
}

func (m *GetCellRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CellId != 0 {
		n += 1 + sovBwp(uint64(m.CellId))
	}
	return n
}

func (m *GetCellResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Cell != nil {
		l = m.Cell.Size()
		n += 1 + l + sovBwp(uint64(l))
	}
	return n
}

func (m *GetCellsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetCellsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Cells) > 0 {
		for _, e := range m.Cells {
			l = e.Size()
			n += 1 + l + sovBwp(uint64(l))
		}
	}
	return n
}

func (m *BwpCell) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovBwp(uint64(m.Id))
	}
	l = len(m.NodeId)
	if l > 0 {
		n += 1 + l + sovBwp(uint64(l))
	}
	if m.Arfcn != 0 {
		n += 1 + sovBwp(uint64(m.Arfcn))
	}
	if m.CellType != 0 {
		n += 1 + sovBwp(uint64(m.CellType))
	}
	if len(m.Bwps) > 0 {
		l = 0
		for _, e := range m.Bwps {
			l += sovBwp(uint64(e))
		}
		n += 1 + sovBwp(uint64(l)) + l
	}
	if len(m.NeighborIds) > 0 {
		l = 0
		for _, e := range m.NeighborIds {
			l += sovBwp(uint64(e))
		}
		n += 1 + sovBwp(uint64(l)) + l
	}
	return n
}

func (m *GetUeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UeId)
	if l > 0 {
		n += 1 + l + sovBwp(uint64(l))
	}
	return n
}

func (m *GetUeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ue != nil {
		l = m.Ue.Size()
		n += 1 + l + sovBwp(uint64(l))
	}
	return n
}

func (m *GetUesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetUesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Ues) > 0 {
		for _, e := range m.Ues {
			l = e.Size()
			n += 1 + l + sovBwp(uint64(l))
		}
	}
	return n
}

func (m *BwpUe) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.UeId)
	if l > 0 {
		n += 1 + l + sovBwp(uint64(l))
	}
	if m.DlTputs != 0 {
		n += 1 + sovBwp(uint64(m.DlTputs))
	}
	return n
}

func sovBwp(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBwp(x uint64) (n int) {
	return sovBwp(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetConflictsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBwp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetConflictsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetConflictsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellId", wireType)
			}
			m.CellId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBwp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CellId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBwp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBwp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetConflictsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBwp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetConflictsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetConflictsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cells", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBwp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBwp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBwp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cells = append(m.Cells, &BwpCell{})
			if err := m.Cells[len(m.Cells)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBwp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBwp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetResolvedConflictsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBwp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetResolvedConflictsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetResolvedConflictsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBwp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBwp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetResolvedConflictsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBwp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetResolvedConflictsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetResolvedConflictsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cells", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBwp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBwp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBwp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cells = append(m.Cells, &CellResolution{})
			if err := m.Cells[len(m.Cells)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBwp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBwp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CellResolution) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBwp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CellResolution: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CellResolution: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBwp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBwp
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.ResolvedBwp = append(m.ResolvedBwp, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBwp
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBwp
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBwp
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.ResolvedBwp) == 0 {
					m.ResolvedBwp = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBwp
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.ResolvedBwp = append(m.ResolvedBwp, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolvedBwp", wireType)
			}
		case 3:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBwp
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.OriginalBwp = append(m.OriginalBwp, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBwp
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBwp
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBwp
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.OriginalBwp) == 0 {
					m.OriginalBwp = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBwp
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.OriginalBwp = append(m.OriginalBwp, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field OriginalBwp", wireType)
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResolvedConflicts", wireType)
			}
			m.ResolvedConflicts = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBwp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResolvedConflicts |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBwp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBwp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCellRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBwp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCellRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCellRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellId", wireType)
			}
			m.CellId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBwp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CellId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBwp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBwp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCellResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBwp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCellResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCellResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cell", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBwp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBwp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBwp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Cell == nil {
				m.Cell = &BwpCell{}
			}
			if err := m.Cell.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBwp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBwp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCellsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBwp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCellsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCellsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBwp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBwp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetCellsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBwp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetCellsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetCellsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cells", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBwp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBwp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBwp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cells = append(m.Cells, &BwpCell{})
			if err := m.Cells[len(m.Cells)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBwp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBwp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BwpCell) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBwp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BwpCell: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BwpCell: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBwp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBwp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBwp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBwp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NodeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arfcn", wireType)
			}
			m.Arfcn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBwp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Arfcn |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellType", wireType)
			}
			m.CellType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBwp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CellType |= CellType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType == 0 {
				var v int32
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBwp
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= int32(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.Bwps = append(m.Bwps, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBwp
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBwp
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBwp
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Bwps) == 0 {
					m.Bwps = make([]int32, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v int32
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBwp
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= int32(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.Bwps = append(m.Bwps, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Bwps", wireType)
			}
		case 6:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBwp
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				m.NeighborIds = append(m.NeighborIds, v)
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBwp
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return ErrInvalidLengthBwp
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return ErrInvalidLengthBwp
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.NeighborIds) == 0 {
					m.NeighborIds = make([]uint64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBwp
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					m.NeighborIds = append(m.NeighborIds, v)
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field NeighborIds", wireType)
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBwp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBwp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBwp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBwp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBwp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBwp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBwp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBwp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBwp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ue", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBwp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBwp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBwp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ue == nil {
				m.Ue = &BwpUe{}
			}
			if err := m.Ue.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBwp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBwp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBwp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipBwp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBwp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetUesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBwp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetUesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetUesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBwp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBwp
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthBwp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ues = append(m.Ues, &BwpUe{})
			if err := m.Ues[len(m.Ues)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBwp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBwp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BwpUe) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBwp
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BwpUe: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BwpUe: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UeId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBwp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBwp
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBwp
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UeId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DlTputs", wireType)
			}
			m.DlTputs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBwp
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DlTputs |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBwp(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBwp
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBwp(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBwp
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBwp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBwp
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBwp
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBwp
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBwp
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBwp        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBwp          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBwp = fmt.Errorf("proto: unexpected end of group")
)
