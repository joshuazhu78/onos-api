// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: onos/onos-ric/nb/apps/types/types.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	nb "onos/onos-ric/nb"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Change event type
type Type int32

const (
	// NONE indicates this response does not represent a modification of the Change
	Type_NONE Type = 0
	// ADDED is an event which occurs when a Change is added to the topology
	Type_ADDED Type = 1
	// UPDATED is an event which occurs when a Change is updated
	Type_UPDATED Type = 2
	// REMOVED is an event which occurs when a Change is removed from the configuration
	Type_REMOVED Type = 3
)

var Type_name = map[int32]string{
	0: "NONE",
	1: "ADDED",
	2: "UPDATED",
	3: "REMOVED",
}

var Type_value = map[string]int32{
	"NONE":    0,
	"ADDED":   1,
	"UPDATED": 2,
	"REMOVED": 3,
}

func (x Type) String() string {
	return proto.EnumName(Type_name, int32(x))
}

func (Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ccd8d98ab3d7e91e, []int{0}
}

type HOParams struct {
	Ecgi        *nb.ECGI `protobuf:"bytes,1,opt,name=ecgi,proto3" json:"ecgi,omitempty"`
	HystCqi     int32    `protobuf:"varint,2,opt,name=HystCqi,proto3" json:"HystCqi,omitempty"`
	A3OffsetCqi int32    `protobuf:"varint,3,opt,name=A3OffsetCqi,proto3" json:"A3OffsetCqi,omitempty"`
	TTTMs       int32    `protobuf:"varint,4,opt,name=TTTMs,proto3" json:"TTTMs,omitempty"`
}

func (m *HOParams) Reset()         { *m = HOParams{} }
func (m *HOParams) String() string { return proto.CompactTextString(m) }
func (*HOParams) ProtoMessage()    {}
func (*HOParams) Descriptor() ([]byte, []int) {
	return fileDescriptor_ccd8d98ab3d7e91e, []int{0}
}
func (m *HOParams) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *HOParams) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_HOParams.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *HOParams) XXX_Merge(src proto.Message) {
	xxx_messageInfo_HOParams.Merge(m, src)
}
func (m *HOParams) XXX_Size() int {
	return m.Size()
}
func (m *HOParams) XXX_DiscardUnknown() {
	xxx_messageInfo_HOParams.DiscardUnknown(m)
}

var xxx_messageInfo_HOParams proto.InternalMessageInfo

func (m *HOParams) GetEcgi() *nb.ECGI {
	if m != nil {
		return m.Ecgi
	}
	return nil
}

func (m *HOParams) GetHystCqi() int32 {
	if m != nil {
		return m.HystCqi
	}
	return 0
}

func (m *HOParams) GetA3OffsetCqi() int32 {
	if m != nil {
		return m.A3OffsetCqi
	}
	return 0
}

func (m *HOParams) GetTTTMs() int32 {
	if m != nil {
		return m.TTTMs
	}
	return 0
}

func init() {
	proto.RegisterEnum("ricapps.types.Type", Type_name, Type_value)
	proto.RegisterType((*HOParams)(nil), "ricapps.types.HOParams")
}

func init() {
	proto.RegisterFile("onos/onos-ric/nb/apps/types/types.proto", fileDescriptor_ccd8d98ab3d7e91e)
}

var fileDescriptor_ccd8d98ab3d7e91e = []byte{
	// 265 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x52, 0xcf, 0xcf, 0xcb, 0x2f,
	0xd6, 0x07, 0x11, 0xba, 0x45, 0x99, 0xc9, 0xfa, 0x79, 0x49, 0xfa, 0x89, 0x05, 0x05, 0xc5, 0xfa,
	0x25, 0x95, 0x05, 0xa9, 0x50, 0x52, 0xaf, 0xa0, 0x28, 0xbf, 0x24, 0x5f, 0x88, 0xb7, 0x28, 0x33,
	0x19, 0x24, 0xa5, 0x07, 0x16, 0x94, 0x52, 0xc6, 0xd0, 0x97, 0x6c, 0xa8, 0x9b, 0x99, 0x57, 0x92,
	0x5a, 0x94, 0x96, 0x98, 0x9c, 0x0a, 0xd1, 0xa3, 0xd4, 0xc2, 0xc8, 0xc5, 0xe1, 0xe1, 0x1f, 0x90,
	0x58, 0x94, 0x98, 0x5b, 0x2c, 0xa4, 0xc6, 0xc5, 0x92, 0x9a, 0x9c, 0x9e, 0x29, 0xc1, 0xa8, 0xc0,
	0xa8, 0xc1, 0x6d, 0x24, 0xa4, 0x87, 0x50, 0x9c, 0x6c, 0xa8, 0xe7, 0xea, 0xec, 0xee, 0x19, 0x04,
	0x96, 0x17, 0x92, 0xe0, 0x62, 0xf7, 0xa8, 0x2c, 0x2e, 0x71, 0x2e, 0xcc, 0x94, 0x60, 0x52, 0x60,
	0xd4, 0x60, 0x0d, 0x82, 0x71, 0x85, 0x14, 0xb8, 0xb8, 0x1d, 0x8d, 0xfd, 0xd3, 0xd2, 0x8a, 0x53,
	0xc1, 0xb2, 0xcc, 0x60, 0x59, 0x64, 0x21, 0x21, 0x11, 0x2e, 0xd6, 0x90, 0x90, 0x10, 0xdf, 0x62,
	0x09, 0x16, 0xb0, 0x1c, 0x84, 0xa3, 0x65, 0xca, 0xc5, 0x12, 0x52, 0x59, 0x90, 0x2a, 0xc4, 0xc1,
	0xc5, 0xe2, 0xe7, 0xef, 0xe7, 0x2a, 0xc0, 0x20, 0xc4, 0xc9, 0xc5, 0xea, 0xe8, 0xe2, 0xe2, 0xea,
	0x22, 0xc0, 0x28, 0xc4, 0xcd, 0xc5, 0x1e, 0x1a, 0xe0, 0xe2, 0x18, 0xe2, 0xea, 0x22, 0xc0, 0x04,
	0xe2, 0x04, 0xb9, 0xfa, 0xfa, 0x87, 0xb9, 0xba, 0x08, 0x30, 0x3b, 0x49, 0x9c, 0x78, 0x24, 0xc7,
	0x78, 0xe1, 0x91, 0x1c, 0xe3, 0x83, 0x47, 0x72, 0x8c, 0x13, 0x1e, 0xcb, 0x31, 0x5c, 0x78, 0x2c,
	0xc7, 0x70, 0xe3, 0xb1, 0x1c, 0x43, 0x12, 0x1b, 0xd8, 0x7b, 0xc6, 0x80, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x85, 0x49, 0xee, 0xfa, 0x3d, 0x01, 0x00, 0x00,
}

func (m *HOParams) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *HOParams) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *HOParams) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TTTMs != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.TTTMs))
		i--
		dAtA[i] = 0x20
	}
	if m.A3OffsetCqi != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.A3OffsetCqi))
		i--
		dAtA[i] = 0x18
	}
	if m.HystCqi != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.HystCqi))
		i--
		dAtA[i] = 0x10
	}
	if m.Ecgi != nil {
		{
			size, err := m.Ecgi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *HOParams) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ecgi != nil {
		l = m.Ecgi.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.HystCqi != 0 {
		n += 1 + sovTypes(uint64(m.HystCqi))
	}
	if m.A3OffsetCqi != 0 {
		n += 1 + sovTypes(uint64(m.A3OffsetCqi))
	}
	if m.TTTMs != 0 {
		n += 1 + sovTypes(uint64(m.TTTMs))
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *HOParams) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: HOParams: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: HOParams: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ecgi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ecgi == nil {
				m.Ecgi = &nb.ECGI{}
			}
			if err := m.Ecgi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HystCqi", wireType)
			}
			m.HystCqi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HystCqi |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field A3OffsetCqi", wireType)
			}
			m.A3OffsetCqi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.A3OffsetCqi |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TTTMs", wireType)
			}
			m.TTTMs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TTTMs |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
