// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: onos/onos-ric/nb/apps/onos-ric-son.proto

package ricapps_son

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	types "gitlab.devtools.intel.com/ngs-syseng/onosproject/onos-api/go/onos/onos-ric/nb/apps/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Change DRL Command type
type DrlCmdType int32

const (
	// NONE indicates no DRL command is generated
	DrlCmdType_CMDNONE DrlCmdType = 0
	// TOWER maps DRL commands to tower power adjustment
	DrlCmdType_CMDTOWER DrlCmdType = 1
	// HOPARAM maps DRL commands to handover parameter adjustment
	DrlCmdType_CMDHOPARAM DrlCmdType = 2
	// HO maps DRL commands to handover command
	DrlCmdType_CMDHO DrlCmdType = 3
	// TOWERHOPARAM maps DRL commands to tower power adj and handover parameters
	DrlCmdType_CMDTOWERHOPARAM DrlCmdType = 4
	// TOWERHO maps DRL commands to tower power adj and handover
	DrlCmdType_CMDTOWERHO DrlCmdType = 5
)

var DrlCmdType_name = map[int32]string{
	0: "CMDNONE",
	1: "CMDTOWER",
	2: "CMDHOPARAM",
	3: "CMDHO",
	4: "CMDTOWERHOPARAM",
	5: "CMDTOWERHO",
}

var DrlCmdType_value = map[string]int32{
	"CMDNONE":         0,
	"CMDTOWER":        1,
	"CMDHOPARAM":      2,
	"CMDHO":           3,
	"CMDTOWERHOPARAM": 4,
	"CMDTOWERHO":      5,
}

func (x DrlCmdType) String() string {
	return proto.EnumName(DrlCmdType_name, int32(x))
}

func (DrlCmdType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_7328c3b96c86bb3d, []int{0}
}

type SetDrlCmdTypeRequest struct {
	Type DrlCmdType `protobuf:"varint,1,opt,name=type,proto3,enum=ricapps.son.DrlCmdType" json:"type,omitempty"`
}

func (m *SetDrlCmdTypeRequest) Reset()         { *m = SetDrlCmdTypeRequest{} }
func (m *SetDrlCmdTypeRequest) String() string { return proto.CompactTextString(m) }
func (*SetDrlCmdTypeRequest) ProtoMessage()    {}
func (*SetDrlCmdTypeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7328c3b96c86bb3d, []int{0}
}
func (m *SetDrlCmdTypeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetDrlCmdTypeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetDrlCmdTypeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetDrlCmdTypeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetDrlCmdTypeRequest.Merge(m, src)
}
func (m *SetDrlCmdTypeRequest) XXX_Size() int {
	return m.Size()
}
func (m *SetDrlCmdTypeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SetDrlCmdTypeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SetDrlCmdTypeRequest proto.InternalMessageInfo

func (m *SetDrlCmdTypeRequest) GetType() DrlCmdType {
	if m != nil {
		return m.Type
	}
	return DrlCmdType_CMDNONE
}

type SetDrlCmdTypeResponse struct {
	Type DrlCmdType `protobuf:"varint,1,opt,name=type,proto3,enum=ricapps.son.DrlCmdType" json:"type,omitempty"`
}

func (m *SetDrlCmdTypeResponse) Reset()         { *m = SetDrlCmdTypeResponse{} }
func (m *SetDrlCmdTypeResponse) String() string { return proto.CompactTextString(m) }
func (*SetDrlCmdTypeResponse) ProtoMessage()    {}
func (*SetDrlCmdTypeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7328c3b96c86bb3d, []int{1}
}
func (m *SetDrlCmdTypeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SetDrlCmdTypeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SetDrlCmdTypeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SetDrlCmdTypeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SetDrlCmdTypeResponse.Merge(m, src)
}
func (m *SetDrlCmdTypeResponse) XXX_Size() int {
	return m.Size()
}
func (m *SetDrlCmdTypeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SetDrlCmdTypeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SetDrlCmdTypeResponse proto.InternalMessageInfo

func (m *SetDrlCmdTypeResponse) GetType() DrlCmdType {
	if m != nil {
		return m.Type
	}
	return DrlCmdType_CMDNONE
}

type RicSonConfigRequest struct {
}

func (m *RicSonConfigRequest) Reset()         { *m = RicSonConfigRequest{} }
func (m *RicSonConfigRequest) String() string { return proto.CompactTextString(m) }
func (*RicSonConfigRequest) ProtoMessage()    {}
func (*RicSonConfigRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7328c3b96c86bb3d, []int{2}
}
func (m *RicSonConfigRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RicSonConfigRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RicSonConfigRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RicSonConfigRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RicSonConfigRequest.Merge(m, src)
}
func (m *RicSonConfigRequest) XXX_Size() int {
	return m.Size()
}
func (m *RicSonConfigRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RicSonConfigRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RicSonConfigRequest proto.InternalMessageInfo

type RicSonConfig struct {
	// DRL command type
	DrlCmdType DrlCmdType `protobuf:"varint,1,opt,name=drlCmdType,proto3,enum=ricapps.son.DrlCmdType" json:"drlCmdType,omitempty"`
}

func (m *RicSonConfig) Reset()         { *m = RicSonConfig{} }
func (m *RicSonConfig) String() string { return proto.CompactTextString(m) }
func (*RicSonConfig) ProtoMessage()    {}
func (*RicSonConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_7328c3b96c86bb3d, []int{3}
}
func (m *RicSonConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RicSonConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RicSonConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RicSonConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RicSonConfig.Merge(m, src)
}
func (m *RicSonConfig) XXX_Size() int {
	return m.Size()
}
func (m *RicSonConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_RicSonConfig.DiscardUnknown(m)
}

var xxx_messageInfo_RicSonConfig proto.InternalMessageInfo

func (m *RicSonConfig) GetDrlCmdType() DrlCmdType {
	if m != nil {
		return m.DrlCmdType
	}
	return DrlCmdType_CMDNONE
}

type ListCellParamsRequest struct {
	// subscribe indicates whether to subscribe to events (e.g. ADD, UPDATE, and REMOVE) that occur
	// after all cells have been streamed to the client
	Subscribe bool `protobuf:"varint,1,opt,name=subscribe,proto3" json:"subscribe,omitempty"`
	// option to request only changes that happen after the call
	WithoutReplay bool `protobuf:"varint,2,opt,name=withoutReplay,proto3" json:"withoutReplay,omitempty"`
}

func (m *ListCellParamsRequest) Reset()         { *m = ListCellParamsRequest{} }
func (m *ListCellParamsRequest) String() string { return proto.CompactTextString(m) }
func (*ListCellParamsRequest) ProtoMessage()    {}
func (*ListCellParamsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_7328c3b96c86bb3d, []int{4}
}
func (m *ListCellParamsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCellParamsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCellParamsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCellParamsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCellParamsRequest.Merge(m, src)
}
func (m *ListCellParamsRequest) XXX_Size() int {
	return m.Size()
}
func (m *ListCellParamsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCellParamsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ListCellParamsRequest proto.InternalMessageInfo

func (m *ListCellParamsRequest) GetSubscribe() bool {
	if m != nil {
		return m.Subscribe
	}
	return false
}

func (m *ListCellParamsRequest) GetWithoutReplay() bool {
	if m != nil {
		return m.WithoutReplay
	}
	return false
}

type ListCellParamsResponse struct {
	// cell is the cell change on which the event occurred
	CellParam *types.HOParams `protobuf:"bytes,1,opt,name=cellParam,proto3" json:"cellParam,omitempty"`
	// type is a qualification of the type of change being made
	Type types.Type `protobuf:"varint,2,opt,name=type,proto3,enum=ricapps.types.Type" json:"type,omitempty"`
}

func (m *ListCellParamsResponse) Reset()         { *m = ListCellParamsResponse{} }
func (m *ListCellParamsResponse) String() string { return proto.CompactTextString(m) }
func (*ListCellParamsResponse) ProtoMessage()    {}
func (*ListCellParamsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_7328c3b96c86bb3d, []int{5}
}
func (m *ListCellParamsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ListCellParamsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ListCellParamsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ListCellParamsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ListCellParamsResponse.Merge(m, src)
}
func (m *ListCellParamsResponse) XXX_Size() int {
	return m.Size()
}
func (m *ListCellParamsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ListCellParamsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ListCellParamsResponse proto.InternalMessageInfo

func (m *ListCellParamsResponse) GetCellParam() *types.HOParams {
	if m != nil {
		return m.CellParam
	}
	return nil
}

func (m *ListCellParamsResponse) GetType() types.Type {
	if m != nil {
		return m.Type
	}
	return types.Type_NONE
}

func init() {
	proto.RegisterEnum("ricapps.son.DrlCmdType", DrlCmdType_name, DrlCmdType_value)
	proto.RegisterType((*SetDrlCmdTypeRequest)(nil), "ricapps.son.SetDrlCmdTypeRequest")
	proto.RegisterType((*SetDrlCmdTypeResponse)(nil), "ricapps.son.SetDrlCmdTypeResponse")
	proto.RegisterType((*RicSonConfigRequest)(nil), "ricapps.son.RicSonConfigRequest")
	proto.RegisterType((*RicSonConfig)(nil), "ricapps.son.RicSonConfig")
	proto.RegisterType((*ListCellParamsRequest)(nil), "ricapps.son.ListCellParamsRequest")
	proto.RegisterType((*ListCellParamsResponse)(nil), "ricapps.son.ListCellParamsResponse")
}

func init() {
	proto.RegisterFile("onos/onos-ric/nb/apps/onos-ric-son.proto", fileDescriptor_7328c3b96c86bb3d)
}

var fileDescriptor_7328c3b96c86bb3d = []byte{
	// 441 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0x41, 0x8f, 0x93, 0x40,
	0x1c, 0xc5, 0x01, 0x77, 0xd7, 0xed, 0xbf, 0xbb, 0x5d, 0x32, 0xb5, 0x5a, 0x89, 0x21, 0x2b, 0x9a,
	0xec, 0x46, 0xb3, 0xd4, 0xac, 0x31, 0x9e, 0x57, 0xd8, 0xec, 0x1e, 0xa4, 0x34, 0xb4, 0xd1, 0x43,
	0x4f, 0x40, 0xc7, 0x4a, 0x42, 0x19, 0x64, 0xa6, 0xd1, 0x7e, 0x08, 0x13, 0x3f, 0x96, 0xc7, 0x1e,
	0x3d, 0x9a, 0xf6, 0x8b, 0x98, 0xc2, 0x20, 0xd0, 0x60, 0xcd, 0x5e, 0x26, 0xe1, 0xcd, 0xef, 0xbd,
	0xcc, 0xfc, 0xdf, 0x00, 0xe7, 0x24, 0x22, 0xb4, 0xb7, 0x59, 0x2e, 0x92, 0xc0, 0xef, 0x45, 0x5e,
	0xcf, 0x8d, 0xe3, 0x42, 0xb8, 0xa0, 0x24, 0xd2, 0xe3, 0x84, 0x30, 0x82, 0x9a, 0x49, 0xe0, 0x6f,
	0xf6, 0x74, 0x4a, 0x22, 0xe5, 0xac, 0xde, 0xc6, 0x16, 0x31, 0xe6, 0x6b, 0xe6, 0xd2, 0x0c, 0x78,
	0x30, 0xc4, 0xcc, 0x4c, 0x42, 0x63, 0x36, 0x19, 0x2d, 0x62, 0xec, 0xe0, 0x2f, 0x73, 0x4c, 0x19,
	0x7a, 0x09, 0x7b, 0x1b, 0xac, 0x2b, 0x9e, 0x8a, 0xe7, 0xad, 0xcb, 0x47, 0x7a, 0x29, 0x5c, 0x2f,
	0xd1, 0x29, 0xa4, 0x99, 0xd0, 0xd9, 0x0a, 0xa1, 0x31, 0x89, 0x28, 0xbe, 0x5b, 0x4a, 0x07, 0xda,
	0x4e, 0xe0, 0x0f, 0x49, 0x64, 0x90, 0xe8, 0x53, 0x30, 0xe5, 0x27, 0xd1, 0x6e, 0xe0, 0xa8, 0x2c,
	0xa3, 0xb7, 0x00, 0x93, 0xbf, 0xd6, 0xff, 0x25, 0x97, 0x50, 0x6d, 0x0c, 0x9d, 0xf7, 0x01, 0x65,
	0x06, 0x0e, 0xc3, 0x81, 0x9b, 0xb8, 0x33, 0x9a, 0xdf, 0xf5, 0x09, 0x34, 0xe8, 0xdc, 0xa3, 0x7e,
	0x12, 0x78, 0x59, 0xe0, 0xa1, 0x53, 0x08, 0xe8, 0x39, 0x1c, 0x7f, 0x0d, 0xd8, 0x67, 0x32, 0x67,
	0x0e, 0x8e, 0x43, 0x77, 0xd1, 0x95, 0x52, 0xa2, 0x2a, 0x6a, 0xdf, 0xe0, 0xe1, 0x76, 0x38, 0x9f,
	0xc1, 0x1b, 0x68, 0xf8, 0xb9, 0x9a, 0xa6, 0x37, 0x4b, 0xc7, 0xcd, 0xaa, 0xb8, 0xb5, 0xb9, 0xa7,
	0x20, 0xd1, 0x19, 0x1f, 0x9d, 0x94, 0x5e, 0xb0, 0xbd, 0xe5, 0x28, 0xc6, 0xf6, 0x62, 0x0a, 0x50,
	0x5c, 0x18, 0x35, 0xe1, 0xbe, 0x61, 0x99, 0x7d, 0xbb, 0x7f, 0x2d, 0x0b, 0xe8, 0x08, 0x0e, 0x0d,
	0xcb, 0x1c, 0xd9, 0x1f, 0xaf, 0x1d, 0x59, 0x44, 0x2d, 0x00, 0xc3, 0x32, 0x6f, 0xed, 0xc1, 0x95,
	0x73, 0x65, 0xc9, 0x12, 0x6a, 0xc0, 0x7e, 0xfa, 0x2d, 0xdf, 0x43, 0x6d, 0x38, 0xc9, 0xc1, 0x7c,
	0x7f, 0x8f, 0xf3, 0x5c, 0x94, 0xf7, 0x2f, 0xbf, 0x4b, 0x70, 0x90, 0x35, 0x81, 0xfa, 0x70, 0x72,
	0x83, 0x59, 0xa5, 0x96, 0xd3, 0x4a, 0x05, 0x35, 0x45, 0x2a, 0x8f, 0xff, 0x49, 0xa0, 0x0f, 0x70,
	0x5c, 0x79, 0x40, 0xe8, 0x69, 0x85, 0xad, 0x7b, 0xa1, 0x8a, 0xb6, 0x0b, 0xe1, 0xb3, 0x1f, 0x43,
	0xab, 0xda, 0x0a, 0xaa, 0xba, 0x6a, 0xdf, 0x83, 0xf2, 0x6c, 0x27, 0x93, 0x45, 0xbf, 0x12, 0xdf,
	0x75, 0x7f, 0xae, 0x54, 0x71, 0xb9, 0x52, 0xc5, 0xdf, 0x2b, 0x55, 0xfc, 0xb1, 0x56, 0x85, 0xe5,
	0x5a, 0x15, 0x7e, 0xad, 0x55, 0xc1, 0x3b, 0x48, 0xff, 0xad, 0xd7, 0x7f, 0x02, 0x00, 0x00, 0xff,
	0xff, 0xfd, 0x60, 0x3b, 0x8b, 0xbd, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// RicSonClient is the client API for RicSon service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type RicSonClient interface {
	GetRicSonConfig(ctx context.Context, in *RicSonConfigRequest, opts ...grpc.CallOption) (*RicSonConfig, error)
	SetDrlCmdType(ctx context.Context, in *SetDrlCmdTypeRequest, opts ...grpc.CallOption) (*SetDrlCmdTypeResponse, error)
	ListCellParams(ctx context.Context, in *ListCellParamsRequest, opts ...grpc.CallOption) (RicSon_ListCellParamsClient, error)
}

type ricSonClient struct {
	cc *grpc.ClientConn
}

func NewRicSonClient(cc *grpc.ClientConn) RicSonClient {
	return &ricSonClient{cc}
}

func (c *ricSonClient) GetRicSonConfig(ctx context.Context, in *RicSonConfigRequest, opts ...grpc.CallOption) (*RicSonConfig, error) {
	out := new(RicSonConfig)
	err := c.cc.Invoke(ctx, "/ricapps.son.RicSon/GetRicSonConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ricSonClient) SetDrlCmdType(ctx context.Context, in *SetDrlCmdTypeRequest, opts ...grpc.CallOption) (*SetDrlCmdTypeResponse, error) {
	out := new(SetDrlCmdTypeResponse)
	err := c.cc.Invoke(ctx, "/ricapps.son.RicSon/SetDrlCmdType", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *ricSonClient) ListCellParams(ctx context.Context, in *ListCellParamsRequest, opts ...grpc.CallOption) (RicSon_ListCellParamsClient, error) {
	stream, err := c.cc.NewStream(ctx, &_RicSon_serviceDesc.Streams[0], "/ricapps.son.RicSon/ListCellParams", opts...)
	if err != nil {
		return nil, err
	}
	x := &ricSonListCellParamsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RicSon_ListCellParamsClient interface {
	Recv() (*ListCellParamsResponse, error)
	grpc.ClientStream
}

type ricSonListCellParamsClient struct {
	grpc.ClientStream
}

func (x *ricSonListCellParamsClient) Recv() (*ListCellParamsResponse, error) {
	m := new(ListCellParamsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RicSonServer is the server API for RicSon service.
type RicSonServer interface {
	GetRicSonConfig(context.Context, *RicSonConfigRequest) (*RicSonConfig, error)
	SetDrlCmdType(context.Context, *SetDrlCmdTypeRequest) (*SetDrlCmdTypeResponse, error)
	ListCellParams(*ListCellParamsRequest, RicSon_ListCellParamsServer) error
}

// UnimplementedRicSonServer can be embedded to have forward compatible implementations.
type UnimplementedRicSonServer struct {
}

func (*UnimplementedRicSonServer) GetRicSonConfig(ctx context.Context, req *RicSonConfigRequest) (*RicSonConfig, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRicSonConfig not implemented")
}
func (*UnimplementedRicSonServer) SetDrlCmdType(ctx context.Context, req *SetDrlCmdTypeRequest) (*SetDrlCmdTypeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetDrlCmdType not implemented")
}
func (*UnimplementedRicSonServer) ListCellParams(req *ListCellParamsRequest, srv RicSon_ListCellParamsServer) error {
	return status.Errorf(codes.Unimplemented, "method ListCellParams not implemented")
}

func RegisterRicSonServer(s *grpc.Server, srv RicSonServer) {
	s.RegisterService(&_RicSon_serviceDesc, srv)
}

func _RicSon_GetRicSonConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RicSonConfigRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RicSonServer).GetRicSonConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ricapps.son.RicSon/GetRicSonConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RicSonServer).GetRicSonConfig(ctx, req.(*RicSonConfigRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RicSon_SetDrlCmdType_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetDrlCmdTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RicSonServer).SetDrlCmdType(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ricapps.son.RicSon/SetDrlCmdType",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RicSonServer).SetDrlCmdType(ctx, req.(*SetDrlCmdTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RicSon_ListCellParams_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListCellParamsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RicSonServer).ListCellParams(m, &ricSonListCellParamsServer{stream})
}

type RicSon_ListCellParamsServer interface {
	Send(*ListCellParamsResponse) error
	grpc.ServerStream
}

type ricSonListCellParamsServer struct {
	grpc.ServerStream
}

func (x *ricSonListCellParamsServer) Send(m *ListCellParamsResponse) error {
	return x.ServerStream.SendMsg(m)
}

var _RicSon_serviceDesc = grpc.ServiceDesc{
	ServiceName: "ricapps.son.RicSon",
	HandlerType: (*RicSonServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetRicSonConfig",
			Handler:    _RicSon_GetRicSonConfig_Handler,
		},
		{
			MethodName: "SetDrlCmdType",
			Handler:    _RicSon_SetDrlCmdType_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListCellParams",
			Handler:       _RicSon_ListCellParams_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "onos/onos-ric/nb/apps/onos-ric-son.proto",
}

func (m *SetDrlCmdTypeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetDrlCmdTypeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetDrlCmdTypeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintOnosRicSon(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SetDrlCmdTypeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetDrlCmdTypeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SetDrlCmdTypeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintOnosRicSon(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *RicSonConfigRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RicSonConfigRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RicSonConfigRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *RicSonConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RicSonConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RicSonConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DrlCmdType != 0 {
		i = encodeVarintOnosRicSon(dAtA, i, uint64(m.DrlCmdType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListCellParamsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCellParamsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCellParamsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.WithoutReplay {
		i--
		if m.WithoutReplay {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Subscribe {
		i--
		if m.Subscribe {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ListCellParamsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ListCellParamsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ListCellParamsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Type != 0 {
		i = encodeVarintOnosRicSon(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if m.CellParam != nil {
		{
			size, err := m.CellParam.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintOnosRicSon(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintOnosRicSon(dAtA []byte, offset int, v uint64) int {
	offset -= sovOnosRicSon(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *SetDrlCmdTypeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovOnosRicSon(uint64(m.Type))
	}
	return n
}

func (m *SetDrlCmdTypeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovOnosRicSon(uint64(m.Type))
	}
	return n
}

func (m *RicSonConfigRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *RicSonConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.DrlCmdType != 0 {
		n += 1 + sovOnosRicSon(uint64(m.DrlCmdType))
	}
	return n
}

func (m *ListCellParamsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Subscribe {
		n += 2
	}
	if m.WithoutReplay {
		n += 2
	}
	return n
}

func (m *ListCellParamsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.CellParam != nil {
		l = m.CellParam.Size()
		n += 1 + l + sovOnosRicSon(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + sovOnosRicSon(uint64(m.Type))
	}
	return n
}

func sovOnosRicSon(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozOnosRicSon(x uint64) (n int) {
	return sovOnosRicSon(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SetDrlCmdTypeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOnosRicSon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetDrlCmdTypeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetDrlCmdTypeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnosRicSon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= DrlCmdType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOnosRicSon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOnosRicSon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOnosRicSon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetDrlCmdTypeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOnosRicSon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetDrlCmdTypeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetDrlCmdTypeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnosRicSon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= DrlCmdType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOnosRicSon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOnosRicSon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOnosRicSon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RicSonConfigRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOnosRicSon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RicSonConfigRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RicSonConfigRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipOnosRicSon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOnosRicSon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOnosRicSon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RicSonConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOnosRicSon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RicSonConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RicSonConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DrlCmdType", wireType)
			}
			m.DrlCmdType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnosRicSon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DrlCmdType |= DrlCmdType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOnosRicSon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOnosRicSon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOnosRicSon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCellParamsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOnosRicSon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListCellParamsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListCellParamsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Subscribe", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnosRicSon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Subscribe = bool(v != 0)
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field WithoutReplay", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnosRicSon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.WithoutReplay = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipOnosRicSon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOnosRicSon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOnosRicSon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ListCellParamsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowOnosRicSon
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ListCellParamsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ListCellParamsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CellParam", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnosRicSon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthOnosRicSon
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthOnosRicSon
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CellParam == nil {
				m.CellParam = &types.HOParams{}
			}
			if err := m.CellParam.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowOnosRicSon
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= types.Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipOnosRicSon(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthOnosRicSon
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthOnosRicSon
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipOnosRicSon(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowOnosRicSon
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOnosRicSon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowOnosRicSon
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthOnosRicSon
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupOnosRicSon
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthOnosRicSon
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthOnosRicSon        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowOnosRicSon          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupOnosRicSon = fmt.Errorf("proto: unexpected end of group")
)
