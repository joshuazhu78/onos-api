// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: onos/onos-ric/nb/a1/a1.proto

package a1

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	qos "gitlab.devtools.intel.com/ngs-syseng/onosproject/onos-api/go/onos/onos-ric/nb/a1/a1-p/qos"
	tsp "gitlab.devtools.intel.com/ngs-syseng/onosproject/onos-api/go/onos/onos-ric/nb/a1/a1-p/tsp"
	types "gitlab.devtools.intel.com/ngs-syseng/onosproject/onos-api/go/onos/onos-ric/nb/a1/types"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ProblemDetails
type ProblemDetails struct {
	Title  string `protobuf:"bytes,1,opt,name=title,proto3" json:"title,omitempty"`
	Detail string `protobuf:"bytes,2,opt,name=detail,proto3" json:"detail,omitempty"`
}

func (m *ProblemDetails) Reset()         { *m = ProblemDetails{} }
func (m *ProblemDetails) String() string { return proto.CompactTextString(m) }
func (*ProblemDetails) ProtoMessage()    {}
func (*ProblemDetails) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406dc4fcc4ea32a, []int{0}
}
func (m *ProblemDetails) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProblemDetails) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProblemDetails.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProblemDetails) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProblemDetails.Merge(m, src)
}
func (m *ProblemDetails) XXX_Size() int {
	return m.Size()
}
func (m *ProblemDetails) XXX_DiscardUnknown() {
	xxx_messageInfo_ProblemDetails.DiscardUnknown(m)
}

var xxx_messageInfo_ProblemDetails proto.InternalMessageInfo

func (m *ProblemDetails) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ProblemDetails) GetDetail() string {
	if m != nil {
		return m.Detail
	}
	return ""
}

// PolicyStatement 	Expression of a directive in an A1 policy
// that is related to policy objectives and/or policy resources
// and are to be applied to/for the entities identified by the scope identifier.
type PolicyStatement struct {
	Type types.PolicyType `protobuf:"varint,1,opt,name=type,proto3,enum=types.PolicyType" json:"type,omitempty"`
	// Types that are valid to be assigned to Statement:
	//	*PolicyStatement_QosObjectives
	//	*PolicyStatement_TspResources
	Statement isPolicyStatement_Statement `protobuf_oneof:"statement"`
}

func (m *PolicyStatement) Reset()         { *m = PolicyStatement{} }
func (m *PolicyStatement) String() string { return proto.CompactTextString(m) }
func (*PolicyStatement) ProtoMessage()    {}
func (*PolicyStatement) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406dc4fcc4ea32a, []int{1}
}
func (m *PolicyStatement) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PolicyStatement) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PolicyStatement.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PolicyStatement) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyStatement.Merge(m, src)
}
func (m *PolicyStatement) XXX_Size() int {
	return m.Size()
}
func (m *PolicyStatement) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyStatement.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyStatement proto.InternalMessageInfo

type isPolicyStatement_Statement interface {
	isPolicyStatement_Statement()
	MarshalTo([]byte) (int, error)
	Size() int
}

type PolicyStatement_QosObjectives struct {
	QosObjectives *qos.QosObjectives `protobuf:"bytes,2,opt,name=qos_objectives,json=qosObjectives,proto3,oneof" json:"qos_objectives,omitempty"`
}
type PolicyStatement_TspResources struct {
	TspResources *tsp.TspResources `protobuf:"bytes,3,opt,name=tsp_resources,json=tspResources,proto3,oneof" json:"tsp_resources,omitempty"`
}

func (*PolicyStatement_QosObjectives) isPolicyStatement_Statement() {}
func (*PolicyStatement_TspResources) isPolicyStatement_Statement()  {}

func (m *PolicyStatement) GetStatement() isPolicyStatement_Statement {
	if m != nil {
		return m.Statement
	}
	return nil
}

func (m *PolicyStatement) GetType() types.PolicyType {
	if m != nil {
		return m.Type
	}
	return types.PolicyType_QOS
}

func (m *PolicyStatement) GetQosObjectives() *qos.QosObjectives {
	if x, ok := m.GetStatement().(*PolicyStatement_QosObjectives); ok {
		return x.QosObjectives
	}
	return nil
}

func (m *PolicyStatement) GetTspResources() *tsp.TspResources {
	if x, ok := m.GetStatement().(*PolicyStatement_TspResources); ok {
		return x.TspResources
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*PolicyStatement) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*PolicyStatement_QosObjectives)(nil),
		(*PolicyStatement_TspResources)(nil),
	}
}

// Policy an A1 policy which contains a scope identifier and one or more policy statements
type Policy struct {
	ScopeId         *types.ScopeIdentifier `protobuf:"bytes,1,opt,name=scope_id,json=scopeId,proto3" json:"scope_id,omitempty"`
	PolicyStatement []*PolicyStatement     `protobuf:"bytes,2,rep,name=policy_statement,json=policyStatement,proto3" json:"policy_statement,omitempty"`
}

func (m *Policy) Reset()         { *m = Policy{} }
func (m *Policy) String() string { return proto.CompactTextString(m) }
func (*Policy) ProtoMessage()    {}
func (*Policy) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406dc4fcc4ea32a, []int{2}
}
func (m *Policy) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Policy) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Policy.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Policy) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Policy.Merge(m, src)
}
func (m *Policy) XXX_Size() int {
	return m.Size()
}
func (m *Policy) XXX_DiscardUnknown() {
	xxx_messageInfo_Policy.DiscardUnknown(m)
}

var xxx_messageInfo_Policy proto.InternalMessageInfo

func (m *Policy) GetScopeId() *types.ScopeIdentifier {
	if m != nil {
		return m.ScopeId
	}
	return nil
}

func (m *Policy) GetPolicyStatement() []*PolicyStatement {
	if m != nil {
		return m.PolicyStatement
	}
	return nil
}

// CreateOrUpdateRequest a request to create or update a policy
type CreateOrUpdateRequest struct {
	PolicyId *types.PolicyID `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	Policy   *Policy         `protobuf:"bytes,2,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (m *CreateOrUpdateRequest) Reset()         { *m = CreateOrUpdateRequest{} }
func (m *CreateOrUpdateRequest) String() string { return proto.CompactTextString(m) }
func (*CreateOrUpdateRequest) ProtoMessage()    {}
func (*CreateOrUpdateRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406dc4fcc4ea32a, []int{3}
}
func (m *CreateOrUpdateRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateOrUpdateRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateOrUpdateRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateOrUpdateRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateOrUpdateRequest.Merge(m, src)
}
func (m *CreateOrUpdateRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateOrUpdateRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateOrUpdateRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateOrUpdateRequest proto.InternalMessageInfo

func (m *CreateOrUpdateRequest) GetPolicyId() *types.PolicyID {
	if m != nil {
		return m.PolicyId
	}
	return nil
}

func (m *CreateOrUpdateRequest) GetPolicy() *Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

// CreateOrUpdateResponse response to a CreateOrUpdateRequest
type CreateOrUpdateResponse struct {
	Policy         *Policy               `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	Status         types.OperationStatus `protobuf:"varint,2,opt,name=status,proto3,enum=types.OperationStatus" json:"status,omitempty"`
	ProblemDetails *ProblemDetails       `protobuf:"bytes,3,opt,name=problem_details,json=problemDetails,proto3" json:"problem_details,omitempty"`
}

func (m *CreateOrUpdateResponse) Reset()         { *m = CreateOrUpdateResponse{} }
func (m *CreateOrUpdateResponse) String() string { return proto.CompactTextString(m) }
func (*CreateOrUpdateResponse) ProtoMessage()    {}
func (*CreateOrUpdateResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406dc4fcc4ea32a, []int{4}
}
func (m *CreateOrUpdateResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateOrUpdateResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateOrUpdateResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateOrUpdateResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateOrUpdateResponse.Merge(m, src)
}
func (m *CreateOrUpdateResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateOrUpdateResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateOrUpdateResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateOrUpdateResponse proto.InternalMessageInfo

func (m *CreateOrUpdateResponse) GetPolicy() *Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

func (m *CreateOrUpdateResponse) GetStatus() types.OperationStatus {
	if m != nil {
		return m.Status
	}
	return types.OperationStatus_SUCCESS
}

func (m *CreateOrUpdateResponse) GetProblemDetails() *ProblemDetails {
	if m != nil {
		return m.ProblemDetails
	}
	return nil
}

// SinglePolicyResponse representation of a A1 single policy response
type SinglePolicyResponse struct {
	Policy *Policy `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
}

func (m *SinglePolicyResponse) Reset()         { *m = SinglePolicyResponse{} }
func (m *SinglePolicyResponse) String() string { return proto.CompactTextString(m) }
func (*SinglePolicyResponse) ProtoMessage()    {}
func (*SinglePolicyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406dc4fcc4ea32a, []int{5}
}
func (m *SinglePolicyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SinglePolicyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SinglePolicyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SinglePolicyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SinglePolicyResponse.Merge(m, src)
}
func (m *SinglePolicyResponse) XXX_Size() int {
	return m.Size()
}
func (m *SinglePolicyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SinglePolicyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SinglePolicyResponse proto.InternalMessageInfo

func (m *SinglePolicyResponse) GetPolicy() *Policy {
	if m != nil {
		return m.Policy
	}
	return nil
}

// AllPolicyResponse representation of a A1 All policy response which contains list of all policy IDs
type AllPolicyResponse struct {
	PolicyId []*types.PolicyID `protobuf:"bytes,1,rep,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
}

func (m *AllPolicyResponse) Reset()         { *m = AllPolicyResponse{} }
func (m *AllPolicyResponse) String() string { return proto.CompactTextString(m) }
func (*AllPolicyResponse) ProtoMessage()    {}
func (*AllPolicyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406dc4fcc4ea32a, []int{6}
}
func (m *AllPolicyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AllPolicyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AllPolicyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AllPolicyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllPolicyResponse.Merge(m, src)
}
func (m *AllPolicyResponse) XXX_Size() int {
	return m.Size()
}
func (m *AllPolicyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AllPolicyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AllPolicyResponse proto.InternalMessageInfo

func (m *AllPolicyResponse) GetPolicyId() []*types.PolicyID {
	if m != nil {
		return m.PolicyId
	}
	return nil
}

// PolicyStatus representation of a A1  policy enforcement status and reasons
type PolicyStatus struct {
	EnforceStatus types.EnforcementStatusType `protobuf:"varint,1,opt,name=enforce_status,json=enforceStatus,proto3,enum=types.EnforcementStatusType" json:"enforce_status,omitempty"`
	EnforceReason types.EnforcementReasonType `protobuf:"varint,2,opt,name=enforce_reason,json=enforceReason,proto3,enum=types.EnforcementReasonType" json:"enforce_reason,omitempty"`
}

func (m *PolicyStatus) Reset()         { *m = PolicyStatus{} }
func (m *PolicyStatus) String() string { return proto.CompactTextString(m) }
func (*PolicyStatus) ProtoMessage()    {}
func (*PolicyStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406dc4fcc4ea32a, []int{7}
}
func (m *PolicyStatus) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PolicyStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PolicyStatus.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PolicyStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyStatus.Merge(m, src)
}
func (m *PolicyStatus) XXX_Size() int {
	return m.Size()
}
func (m *PolicyStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyStatus.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyStatus proto.InternalMessageInfo

func (m *PolicyStatus) GetEnforceStatus() types.EnforcementStatusType {
	if m != nil {
		return m.EnforceStatus
	}
	return types.EnforcementStatusType_ENFORCED
}

func (m *PolicyStatus) GetEnforceReason() types.EnforcementReasonType {
	if m != nil {
		return m.EnforceReason
	}
	return types.EnforcementReasonType_SCOPE_NOT_APPLICABLE
}

// PolicyStatusResponse
type PolicyStatusResponse struct {
	PolicyStatus *PolicyStatus `protobuf:"bytes,1,opt,name=policy_status,json=policyStatus,proto3" json:"policy_status,omitempty"`
}

func (m *PolicyStatusResponse) Reset()         { *m = PolicyStatusResponse{} }
func (m *PolicyStatusResponse) String() string { return proto.CompactTextString(m) }
func (*PolicyStatusResponse) ProtoMessage()    {}
func (*PolicyStatusResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406dc4fcc4ea32a, []int{8}
}
func (m *PolicyStatusResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PolicyStatusResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PolicyStatusResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PolicyStatusResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PolicyStatusResponse.Merge(m, src)
}
func (m *PolicyStatusResponse) XXX_Size() int {
	return m.Size()
}
func (m *PolicyStatusResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PolicyStatusResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PolicyStatusResponse proto.InternalMessageInfo

func (m *PolicyStatusResponse) GetPolicyStatus() *PolicyStatus {
	if m != nil {
		return m.PolicyStatus
	}
	return nil
}

// QueryRequest a request to query about one or more than one policy
type QueryRequest struct {
	// Policy Type
	Type types.PolicyQueryType `protobuf:"varint,1,opt,name=type,proto3,enum=types.PolicyQueryType" json:"type,omitempty"`
	// PolicyID
	PolicyId *types.PolicyID `protobuf:"bytes,2,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
}

func (m *QueryRequest) Reset()         { *m = QueryRequest{} }
func (m *QueryRequest) String() string { return proto.CompactTextString(m) }
func (*QueryRequest) ProtoMessage()    {}
func (*QueryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406dc4fcc4ea32a, []int{9}
}
func (m *QueryRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryRequest.Merge(m, src)
}
func (m *QueryRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryRequest proto.InternalMessageInfo

func (m *QueryRequest) GetType() types.PolicyQueryType {
	if m != nil {
		return m.Type
	}
	return types.PolicyQueryType_SINGLE_POLICY
}

func (m *QueryRequest) GetPolicyId() *types.PolicyID {
	if m != nil {
		return m.PolicyId
	}
	return nil
}

// QueryResponse a response to a query request
type QueryResponse struct {
	// Types that are valid to be assigned to Response:
	//	*QueryResponse_SinglePolicyResponse
	//	*QueryResponse_AllPolicyResponse
	//	*QueryResponse_PolicyStatusResponse
	Response       isQueryResponse_Response `protobuf_oneof:"response"`
	Status         types.OperationStatus    `protobuf:"varint,4,opt,name=status,proto3,enum=types.OperationStatus" json:"status,omitempty"`
	ProblemDetails *ProblemDetails          `protobuf:"bytes,5,opt,name=problem_details,json=problemDetails,proto3" json:"problem_details,omitempty"`
}

func (m *QueryResponse) Reset()         { *m = QueryResponse{} }
func (m *QueryResponse) String() string { return proto.CompactTextString(m) }
func (*QueryResponse) ProtoMessage()    {}
func (*QueryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406dc4fcc4ea32a, []int{10}
}
func (m *QueryResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryResponse.Merge(m, src)
}
func (m *QueryResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryResponse proto.InternalMessageInfo

type isQueryResponse_Response interface {
	isQueryResponse_Response()
	MarshalTo([]byte) (int, error)
	Size() int
}

type QueryResponse_SinglePolicyResponse struct {
	SinglePolicyResponse *SinglePolicyResponse `protobuf:"bytes,1,opt,name=single_policy_response,json=singlePolicyResponse,proto3,oneof" json:"single_policy_response,omitempty"`
}
type QueryResponse_AllPolicyResponse struct {
	AllPolicyResponse *AllPolicyResponse `protobuf:"bytes,2,opt,name=all_policy_response,json=allPolicyResponse,proto3,oneof" json:"all_policy_response,omitempty"`
}
type QueryResponse_PolicyStatusResponse struct {
	PolicyStatusResponse *PolicyStatusResponse `protobuf:"bytes,3,opt,name=policy_status_response,json=policyStatusResponse,proto3,oneof" json:"policy_status_response,omitempty"`
}

func (*QueryResponse_SinglePolicyResponse) isQueryResponse_Response() {}
func (*QueryResponse_AllPolicyResponse) isQueryResponse_Response()    {}
func (*QueryResponse_PolicyStatusResponse) isQueryResponse_Response() {}

func (m *QueryResponse) GetResponse() isQueryResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (m *QueryResponse) GetSinglePolicyResponse() *SinglePolicyResponse {
	if x, ok := m.GetResponse().(*QueryResponse_SinglePolicyResponse); ok {
		return x.SinglePolicyResponse
	}
	return nil
}

func (m *QueryResponse) GetAllPolicyResponse() *AllPolicyResponse {
	if x, ok := m.GetResponse().(*QueryResponse_AllPolicyResponse); ok {
		return x.AllPolicyResponse
	}
	return nil
}

func (m *QueryResponse) GetPolicyStatusResponse() *PolicyStatusResponse {
	if x, ok := m.GetResponse().(*QueryResponse_PolicyStatusResponse); ok {
		return x.PolicyStatusResponse
	}
	return nil
}

func (m *QueryResponse) GetStatus() types.OperationStatus {
	if m != nil {
		return m.Status
	}
	return types.OperationStatus_SUCCESS
}

func (m *QueryResponse) GetProblemDetails() *ProblemDetails {
	if m != nil {
		return m.ProblemDetails
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*QueryResponse) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*QueryResponse_SinglePolicyResponse)(nil),
		(*QueryResponse_AllPolicyResponse)(nil),
		(*QueryResponse_PolicyStatusResponse)(nil),
	}
}

// DeleteRequest a request to delete a policy
type DeleteRequest struct {
	PolicyId *types.PolicyID `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
}

func (m *DeleteRequest) Reset()         { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()    {}
func (*DeleteRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406dc4fcc4ea32a, []int{11}
}
func (m *DeleteRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteRequest.Merge(m, src)
}
func (m *DeleteRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteRequest proto.InternalMessageInfo

func (m *DeleteRequest) GetPolicyId() *types.PolicyID {
	if m != nil {
		return m.PolicyId
	}
	return nil
}

// DeleteResponse a response to a DeleteRequest
type DeleteResponse struct {
	Status         types.OperationStatus `protobuf:"varint,1,opt,name=status,proto3,enum=types.OperationStatus" json:"status,omitempty"`
	ProblemDetails *ProblemDetails       `protobuf:"bytes,2,opt,name=problem_details,json=problemDetails,proto3" json:"problem_details,omitempty"`
}

func (m *DeleteResponse) Reset()         { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()    {}
func (*DeleteResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406dc4fcc4ea32a, []int{12}
}
func (m *DeleteResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeleteResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteResponse.Merge(m, src)
}
func (m *DeleteResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteResponse proto.InternalMessageInfo

func (m *DeleteResponse) GetStatus() types.OperationStatus {
	if m != nil {
		return m.Status
	}
	return types.OperationStatus_SUCCESS
}

func (m *DeleteResponse) GetProblemDetails() *ProblemDetails {
	if m != nil {
		return m.ProblemDetails
	}
	return nil
}

// NotifyRequest a request to get updates about changes in the policy enforcement status for an A1 policy;
type NotifyRequest struct {
}

func (m *NotifyRequest) Reset()         { *m = NotifyRequest{} }
func (m *NotifyRequest) String() string { return proto.CompactTextString(m) }
func (*NotifyRequest) ProtoMessage()    {}
func (*NotifyRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406dc4fcc4ea32a, []int{13}
}
func (m *NotifyRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyRequest.Merge(m, src)
}
func (m *NotifyRequest) XXX_Size() int {
	return m.Size()
}
func (m *NotifyRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyRequest proto.InternalMessageInfo

// NotifyResponse a notification response contains the information about changes and causes
type NotifyResponse struct {
	PolicyStatus *PolicyStatus `protobuf:"bytes,1,opt,name=policy_status,json=policyStatus,proto3" json:"policy_status,omitempty"`
}

func (m *NotifyResponse) Reset()         { *m = NotifyResponse{} }
func (m *NotifyResponse) String() string { return proto.CompactTextString(m) }
func (*NotifyResponse) ProtoMessage()    {}
func (*NotifyResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1406dc4fcc4ea32a, []int{14}
}
func (m *NotifyResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NotifyResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NotifyResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NotifyResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NotifyResponse.Merge(m, src)
}
func (m *NotifyResponse) XXX_Size() int {
	return m.Size()
}
func (m *NotifyResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NotifyResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NotifyResponse proto.InternalMessageInfo

func (m *NotifyResponse) GetPolicyStatus() *PolicyStatus {
	if m != nil {
		return m.PolicyStatus
	}
	return nil
}

func init() {
	proto.RegisterType((*ProblemDetails)(nil), "a1.ProblemDetails")
	proto.RegisterType((*PolicyStatement)(nil), "a1.PolicyStatement")
	proto.RegisterType((*Policy)(nil), "a1.Policy")
	proto.RegisterType((*CreateOrUpdateRequest)(nil), "a1.CreateOrUpdateRequest")
	proto.RegisterType((*CreateOrUpdateResponse)(nil), "a1.CreateOrUpdateResponse")
	proto.RegisterType((*SinglePolicyResponse)(nil), "a1.SinglePolicyResponse")
	proto.RegisterType((*AllPolicyResponse)(nil), "a1.AllPolicyResponse")
	proto.RegisterType((*PolicyStatus)(nil), "a1.PolicyStatus")
	proto.RegisterType((*PolicyStatusResponse)(nil), "a1.PolicyStatusResponse")
	proto.RegisterType((*QueryRequest)(nil), "a1.QueryRequest")
	proto.RegisterType((*QueryResponse)(nil), "a1.QueryResponse")
	proto.RegisterType((*DeleteRequest)(nil), "a1.DeleteRequest")
	proto.RegisterType((*DeleteResponse)(nil), "a1.DeleteResponse")
	proto.RegisterType((*NotifyRequest)(nil), "a1.NotifyRequest")
	proto.RegisterType((*NotifyResponse)(nil), "a1.NotifyResponse")
}

func init() { proto.RegisterFile("onos/onos-ric/nb/a1/a1.proto", fileDescriptor_1406dc4fcc4ea32a) }

var fileDescriptor_1406dc4fcc4ea32a = []byte{
	// 809 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0x4d, 0x6f, 0xe2, 0x46,
	0x18, 0xc6, 0x90, 0xd0, 0xe4, 0x05, 0x4c, 0x98, 0x10, 0x44, 0x51, 0x84, 0x22, 0x4b, 0xa9, 0xa2,
	0xaa, 0x81, 0x40, 0xd4, 0x4b, 0xa3, 0x46, 0xca, 0x47, 0x15, 0x72, 0x68, 0x43, 0x86, 0xf4, 0x8c,
	0x0c, 0x4c, 0x5a, 0x57, 0x8e, 0x67, 0xf0, 0x0c, 0x95, 0x50, 0xd5, 0xff, 0xd0, 0x63, 0xff, 0x42,
	0xff, 0x46, 0x4f, 0x7b, 0xcc, 0x71, 0x8f, 0xab, 0xf0, 0x1b, 0xf6, 0xbe, 0xf2, 0xcc, 0x18, 0x6c,
	0xf0, 0x66, 0xb3, 0xd9, 0x03, 0x56, 0xe6, 0xfd, 0x7c, 0xe6, 0x79, 0x9f, 0x77, 0x14, 0xd8, 0xa5,
	0x1e, 0xe5, 0xcd, 0xe0, 0x73, 0xe8, 0x3b, 0xc3, 0xa6, 0x37, 0x68, 0xda, 0xad, 0xa6, 0xdd, 0x6a,
	0x30, 0x9f, 0x0a, 0x8a, 0xd2, 0x76, 0xab, 0xf6, 0x4d, 0x72, 0xc4, 0x21, 0x6b, 0x8e, 0x29, 0x0f,
	0x7e, 0x2a, 0xf6, 0x99, 0x38, 0xc1, 0xe5, 0x4f, 0xc7, 0xed, 0x27, 0xc5, 0x89, 0x29, 0x23, 0x5c,
	0x7d, 0x55, 0x98, 0x75, 0x0a, 0x66, 0xd7, 0xa7, 0x03, 0x97, 0x3c, 0x5c, 0x12, 0x61, 0x3b, 0x2e,
	0x47, 0x65, 0x58, 0x17, 0x8e, 0x70, 0x49, 0xd5, 0xd8, 0x33, 0x0e, 0x36, 0xb1, 0x3a, 0xa0, 0x0a,
	0x64, 0x47, 0x32, 0xa0, 0x9a, 0x96, 0x66, 0x7d, 0xb2, 0xfe, 0x37, 0xa0, 0xd8, 0xa5, 0xae, 0x33,
	0x9c, 0xf6, 0x84, 0x2d, 0xc8, 0x03, 0xf1, 0x04, 0xda, 0x87, 0xb5, 0xa0, 0x85, 0x2c, 0x60, 0xb6,
	0x4b, 0x0d, 0xd5, 0x4f, 0x45, 0xdd, 0x4d, 0x19, 0xc1, 0xd2, 0x8d, 0x4e, 0xc1, 0x1c, 0x53, 0xde,
	0xa7, 0x83, 0x3f, 0xc8, 0x50, 0x38, 0x7f, 0x12, 0x2e, 0x4b, 0xe7, 0xda, 0x3b, 0x0d, 0xbb, 0xd5,
	0x08, 0x2e, 0x7c, 0x4b, 0xf9, 0xcd, 0xdc, 0xd9, 0x49, 0xe1, 0xc2, 0x38, 0x6a, 0x40, 0x27, 0x50,
	0x10, 0x9c, 0xf5, 0x7d, 0xc2, 0xe9, 0xc4, 0x1f, 0x12, 0x5e, 0xcd, 0xc8, 0xf4, 0x72, 0x90, 0x1e,
	0xf0, 0x70, 0xc7, 0x19, 0x0e, 0x7d, 0x9d, 0x14, 0xce, 0x8b, 0xc8, 0xf9, 0x3c, 0x07, 0x9b, 0x3c,
	0x04, 0x6c, 0xfd, 0x05, 0x59, 0x85, 0x0e, 0xb5, 0x60, 0x83, 0x0f, 0x29, 0x23, 0x7d, 0x67, 0x24,
	0xe1, 0xe7, 0xda, 0x15, 0x0d, 0xbf, 0x17, 0x98, 0xaf, 0x47, 0xc4, 0x13, 0xce, 0xbd, 0x43, 0x7c,
	0xfc, 0x15, 0x57, 0x06, 0x74, 0x0a, 0x5b, 0x4c, 0x26, 0xf7, 0xe7, 0x05, 0xab, 0xe9, 0xbd, 0xcc,
	0x41, 0xae, 0xbd, 0x1d, 0x20, 0x59, 0x22, 0x07, 0x17, 0x59, 0xdc, 0x60, 0x39, 0xb0, 0x73, 0xe1,
	0x13, 0x5b, 0x90, 0x1b, 0xff, 0x57, 0x36, 0xb2, 0x05, 0xc1, 0x64, 0x3c, 0x21, 0x5c, 0xa0, 0xef,
	0x60, 0x53, 0x17, 0x9e, 0x83, 0x29, 0xc6, 0xb8, 0xbc, 0xbe, 0xc4, 0x1b, 0x2a, 0xe2, 0x7a, 0x84,
	0x2c, 0xc8, 0xaa, 0xbf, 0x35, 0x8b, 0xb0, 0x68, 0x8e, 0xb5, 0xc7, 0xfa, 0xcf, 0x80, 0xca, 0x72,
	0x2f, 0xce, 0xa8, 0xc7, 0x49, 0x24, 0xdd, 0xf8, 0x58, 0x3a, 0x6a, 0x40, 0x36, 0xb8, 0xe2, 0x44,
	0x0d, 0xca, 0x9c, 0x53, 0x73, 0xc3, 0x88, 0x6f, 0x0b, 0x87, 0x7a, 0x3d, 0xe9, 0xc5, 0x3a, 0x0a,
	0x9d, 0x40, 0x91, 0x29, 0x6d, 0xf5, 0x95, 0x5a, 0xc2, 0x11, 0x21, 0x59, 0x3c, 0x26, 0x3b, 0x6c,
	0xb2, 0xd8, 0xd9, 0xfa, 0x01, 0xca, 0x3d, 0xc7, 0xfb, 0xcd, 0x25, 0x1a, 0xc4, 0x67, 0x00, 0xb5,
	0xce, 0xa0, 0x74, 0xe6, 0xba, 0x4b, 0x89, 0x4b, 0x74, 0x66, 0x9e, 0xa5, 0xd3, 0xfa, 0xd7, 0x80,
	0xfc, 0x62, 0x74, 0x13, 0x8e, 0x2e, 0xc0, 0x24, 0xde, 0x3d, 0xf5, 0x87, 0xa4, 0xaf, 0x49, 0x50,
	0xf2, 0xde, 0xd5, 0x35, 0x7e, 0x52, 0xce, 0x60, 0xa4, 0x2a, 0x43, 0x2a, 0xbd, 0xa0, 0x73, 0x56,
	0x8b, 0xf8, 0xc4, 0xe6, 0xd4, 0xd3, 0x4c, 0x26, 0x14, 0xc1, 0xd2, 0x1f, 0x2b, 0xa2, 0x4c, 0xd6,
	0xcf, 0x50, 0x8e, 0x22, 0x9b, 0x5f, 0xf0, 0x7b, 0x28, 0x44, 0x84, 0xa8, 0x01, 0xe6, 0xda, 0x5b,
	0x71, 0x15, 0x4e, 0x38, 0xce, 0xb3, 0xc8, 0xc9, 0xfa, 0x1d, 0xf2, 0xb7, 0x13, 0xe2, 0x4f, 0x43,
	0xd9, 0x7d, 0x1b, 0xdb, 0xde, 0x4a, 0x8c, 0x22, 0x19, 0x18, 0x59, 0xe1, 0x18, 0xa7, 0xe9, 0x4f,
	0x48, 0xd4, 0x7a, 0x9f, 0x86, 0x82, 0x6e, 0xa5, 0x21, 0x77, 0xa1, 0xc2, 0xe5, 0x90, 0xfb, 0xba,
	0x8c, 0xaf, 0x3d, 0x1a, 0x7b, 0x35, 0xc0, 0x9e, 0x24, 0x83, 0x4e, 0x0a, 0x97, 0x79, 0x92, 0x3c,
	0xae, 0x60, 0xdb, 0x76, 0xdd, 0x95, 0x72, 0x91, 0x97, 0x65, 0x45, 0x19, 0x9d, 0x14, 0x2e, 0xd9,
	0x2b, 0x72, 0xe9, 0x42, 0x25, 0xc6, 0xe6, 0xa2, 0x56, 0x66, 0x01, 0x2d, 0x69, 0x0e, 0x01, 0x34,
	0x96, 0x34, 0x9f, 0xc5, 0xfa, 0xac, 0xbd, 0x76, 0x7d, 0xd6, 0x5f, 0xba, 0x3e, 0xe7, 0x00, 0x1b,
	0x21, 0x60, 0xeb, 0x47, 0x28, 0x5c, 0x12, 0x97, 0xbc, 0xf2, 0x65, 0xb1, 0xfe, 0x06, 0x33, 0x4c,
	0x5f, 0xb9, 0x89, 0xf1, 0xda, 0x9b, 0xa4, 0x5f, 0xfc, 0x10, 0x14, 0xa1, 0xf0, 0x0b, 0x15, 0xce,
	0x7d, 0x28, 0x50, 0xeb, 0x0a, 0xcc, 0xd0, 0xf0, 0x45, 0xca, 0x6f, 0xcf, 0x0c, 0x48, 0xdb, 0x2d,
	0x74, 0x05, 0x66, 0xfc, 0x51, 0x44, 0x5f, 0x07, 0x89, 0x89, 0x8f, 0x72, 0xad, 0x96, 0xe4, 0x9a,
	0xd3, 0xb2, 0x2e, 0xe5, 0x8d, 0x64, 0xe3, 0xe8, 0x52, 0xd5, 0x4a, 0x11, 0x8b, 0x8a, 0x3e, 0x32,
	0x50, 0x13, 0xb2, 0x8a, 0x58, 0x24, 0xdd, 0xb1, 0x19, 0xd5, 0x50, 0xd4, 0xa4, 0x1b, 0x1c, 0x43,
	0x56, 0xdd, 0x5c, 0x25, 0xc4, 0x68, 0x51, 0x09, 0x71, 0x62, 0x0e, 0x8c, 0x23, 0xe3, 0xbc, 0xfa,
	0xe6, 0xa9, 0x6e, 0x3c, 0x3e, 0xd5, 0x8d, 0x77, 0x4f, 0x75, 0xe3, 0x9f, 0x59, 0x3d, 0xf5, 0x38,
	0xab, 0xa7, 0xde, 0xce, 0xea, 0xa9, 0x41, 0x56, 0xfe, 0x0b, 0x70, 0xfc, 0x21, 0x00, 0x00, 0xff,
	0xff, 0x7d, 0x75, 0x2f, 0xc5, 0x9d, 0x08, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// A1Client is the client API for A1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type A1Client interface {
	// CreateOrUpdate creates an A1 policy
	CreateOrUpdate(ctx context.Context, in *CreateOrUpdateRequest, opts ...grpc.CallOption) (*CreateOrUpdateResponse, error)
	// Query queries about one or more than one A1 policies
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (A1_QueryClient, error)
	// Delete deletes an A1 policy
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
	// Notify notify about an enforcement status change of a policy between 'enforced' and 'not enforced'.
	Notify(ctx context.Context, opts ...grpc.CallOption) (A1_NotifyClient, error)
}

type a1Client struct {
	cc *grpc.ClientConn
}

func NewA1Client(cc *grpc.ClientConn) A1Client {
	return &a1Client{cc}
}

func (c *a1Client) CreateOrUpdate(ctx context.Context, in *CreateOrUpdateRequest, opts ...grpc.CallOption) (*CreateOrUpdateResponse, error) {
	out := new(CreateOrUpdateResponse)
	err := c.cc.Invoke(ctx, "/a1.a1/CreateOrUpdate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *a1Client) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (A1_QueryClient, error) {
	stream, err := c.cc.NewStream(ctx, &_A1_serviceDesc.Streams[0], "/a1.a1/Query", opts...)
	if err != nil {
		return nil, err
	}
	x := &a1QueryClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type A1_QueryClient interface {
	Recv() (*QueryResponse, error)
	grpc.ClientStream
}

type a1QueryClient struct {
	grpc.ClientStream
}

func (x *a1QueryClient) Recv() (*QueryResponse, error) {
	m := new(QueryResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *a1Client) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := c.cc.Invoke(ctx, "/a1.a1/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *a1Client) Notify(ctx context.Context, opts ...grpc.CallOption) (A1_NotifyClient, error) {
	stream, err := c.cc.NewStream(ctx, &_A1_serviceDesc.Streams[1], "/a1.a1/Notify", opts...)
	if err != nil {
		return nil, err
	}
	x := &a1NotifyClient{stream}
	return x, nil
}

type A1_NotifyClient interface {
	Send(*NotifyRequest) error
	Recv() (*NotifyResponse, error)
	grpc.ClientStream
}

type a1NotifyClient struct {
	grpc.ClientStream
}

func (x *a1NotifyClient) Send(m *NotifyRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *a1NotifyClient) Recv() (*NotifyResponse, error) {
	m := new(NotifyResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// A1Server is the server API for A1 service.
type A1Server interface {
	// CreateOrUpdate creates an A1 policy
	CreateOrUpdate(context.Context, *CreateOrUpdateRequest) (*CreateOrUpdateResponse, error)
	// Query queries about one or more than one A1 policies
	Query(*QueryRequest, A1_QueryServer) error
	// Delete deletes an A1 policy
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
	// Notify notify about an enforcement status change of a policy between 'enforced' and 'not enforced'.
	Notify(A1_NotifyServer) error
}

// UnimplementedA1Server can be embedded to have forward compatible implementations.
type UnimplementedA1Server struct {
}

func (*UnimplementedA1Server) CreateOrUpdate(ctx context.Context, req *CreateOrUpdateRequest) (*CreateOrUpdateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateOrUpdate not implemented")
}
func (*UnimplementedA1Server) Query(req *QueryRequest, srv A1_QueryServer) error {
	return status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (*UnimplementedA1Server) Delete(ctx context.Context, req *DeleteRequest) (*DeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (*UnimplementedA1Server) Notify(srv A1_NotifyServer) error {
	return status.Errorf(codes.Unimplemented, "method Notify not implemented")
}

func RegisterA1Server(s *grpc.Server, srv A1Server) {
	s.RegisterService(&_A1_serviceDesc, srv)
}

func _A1_CreateOrUpdate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateOrUpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(A1Server).CreateOrUpdate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/a1.a1/CreateOrUpdate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(A1Server).CreateOrUpdate(ctx, req.(*CreateOrUpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _A1_Query_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(QueryRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(A1Server).Query(m, &a1QueryServer{stream})
}

type A1_QueryServer interface {
	Send(*QueryResponse) error
	grpc.ServerStream
}

type a1QueryServer struct {
	grpc.ServerStream
}

func (x *a1QueryServer) Send(m *QueryResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _A1_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(A1Server).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/a1.a1/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(A1Server).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _A1_Notify_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(A1Server).Notify(&a1NotifyServer{stream})
}

type A1_NotifyServer interface {
	Send(*NotifyResponse) error
	Recv() (*NotifyRequest, error)
	grpc.ServerStream
}

type a1NotifyServer struct {
	grpc.ServerStream
}

func (x *a1NotifyServer) Send(m *NotifyResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *a1NotifyServer) Recv() (*NotifyRequest, error) {
	m := new(NotifyRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _A1_serviceDesc = grpc.ServiceDesc{
	ServiceName: "a1.a1",
	HandlerType: (*A1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateOrUpdate",
			Handler:    _A1_CreateOrUpdate_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _A1_Delete_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Query",
			Handler:       _A1_Query_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Notify",
			Handler:       _A1_Notify_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "onos/onos-ric/nb/a1/a1.proto",
}

func (m *ProblemDetails) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProblemDetails) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProblemDetails) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Detail) > 0 {
		i -= len(m.Detail)
		copy(dAtA[i:], m.Detail)
		i = encodeVarintA1(dAtA, i, uint64(len(m.Detail)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintA1(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PolicyStatement) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicyStatement) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyStatement) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Statement != nil {
		{
			size := m.Statement.Size()
			i -= size
			if _, err := m.Statement.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	if m.Type != 0 {
		i = encodeVarintA1(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PolicyStatement_QosObjectives) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyStatement_QosObjectives) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.QosObjectives != nil {
		{
			size, err := m.QosObjectives.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA1(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *PolicyStatement_TspResources) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyStatement_TspResources) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.TspResources != nil {
		{
			size, err := m.TspResources.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA1(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *Policy) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Policy) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Policy) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PolicyStatement) > 0 {
		for iNdEx := len(m.PolicyStatement) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PolicyStatement[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintA1(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.ScopeId != nil {
		{
			size, err := m.ScopeId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA1(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateOrUpdateRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateOrUpdateRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateOrUpdateRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Policy != nil {
		{
			size, err := m.Policy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA1(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.PolicyId != nil {
		{
			size, err := m.PolicyId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA1(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateOrUpdateResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateOrUpdateResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateOrUpdateResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProblemDetails != nil {
		{
			size, err := m.ProblemDetails.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA1(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Status != 0 {
		i = encodeVarintA1(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x10
	}
	if m.Policy != nil {
		{
			size, err := m.Policy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA1(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SinglePolicyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SinglePolicyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SinglePolicyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Policy != nil {
		{
			size, err := m.Policy.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA1(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AllPolicyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AllPolicyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AllPolicyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PolicyId) > 0 {
		for iNdEx := len(m.PolicyId) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.PolicyId[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintA1(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PolicyStatus) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicyStatus) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyStatus) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.EnforceReason != 0 {
		i = encodeVarintA1(dAtA, i, uint64(m.EnforceReason))
		i--
		dAtA[i] = 0x10
	}
	if m.EnforceStatus != 0 {
		i = encodeVarintA1(dAtA, i, uint64(m.EnforceStatus))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PolicyStatusResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PolicyStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PolicyStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PolicyStatus != nil {
		{
			size, err := m.PolicyStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA1(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PolicyId != nil {
		{
			size, err := m.PolicyId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA1(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = encodeVarintA1(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProblemDetails != nil {
		{
			size, err := m.ProblemDetails.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA1(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Status != 0 {
		i = encodeVarintA1(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x20
	}
	if m.Response != nil {
		{
			size := m.Response.Size()
			i -= size
			if _, err := m.Response.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryResponse_SinglePolicyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryResponse_SinglePolicyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.SinglePolicyResponse != nil {
		{
			size, err := m.SinglePolicyResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA1(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *QueryResponse_AllPolicyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryResponse_AllPolicyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.AllPolicyResponse != nil {
		{
			size, err := m.AllPolicyResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA1(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func (m *QueryResponse_PolicyStatusResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryResponse_PolicyStatusResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PolicyStatusResponse != nil {
		{
			size, err := m.PolicyStatusResponse.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA1(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}
func (m *DeleteRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PolicyId != nil {
		{
			size, err := m.PolicyId.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA1(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeleteResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeleteResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.ProblemDetails != nil {
		{
			size, err := m.ProblemDetails.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA1(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Status != 0 {
		i = encodeVarintA1(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *NotifyRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *NotifyResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NotifyResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NotifyResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PolicyStatus != nil {
		{
			size, err := m.PolicyStatus.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintA1(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintA1(dAtA []byte, offset int, v uint64) int {
	offset -= sovA1(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ProblemDetails) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovA1(uint64(l))
	}
	l = len(m.Detail)
	if l > 0 {
		n += 1 + l + sovA1(uint64(l))
	}
	return n
}

func (m *PolicyStatement) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovA1(uint64(m.Type))
	}
	if m.Statement != nil {
		n += m.Statement.Size()
	}
	return n
}

func (m *PolicyStatement_QosObjectives) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.QosObjectives != nil {
		l = m.QosObjectives.Size()
		n += 1 + l + sovA1(uint64(l))
	}
	return n
}
func (m *PolicyStatement_TspResources) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TspResources != nil {
		l = m.TspResources.Size()
		n += 1 + l + sovA1(uint64(l))
	}
	return n
}
func (m *Policy) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ScopeId != nil {
		l = m.ScopeId.Size()
		n += 1 + l + sovA1(uint64(l))
	}
	if len(m.PolicyStatement) > 0 {
		for _, e := range m.PolicyStatement {
			l = e.Size()
			n += 1 + l + sovA1(uint64(l))
		}
	}
	return n
}

func (m *CreateOrUpdateRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PolicyId != nil {
		l = m.PolicyId.Size()
		n += 1 + l + sovA1(uint64(l))
	}
	if m.Policy != nil {
		l = m.Policy.Size()
		n += 1 + l + sovA1(uint64(l))
	}
	return n
}

func (m *CreateOrUpdateResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Policy != nil {
		l = m.Policy.Size()
		n += 1 + l + sovA1(uint64(l))
	}
	if m.Status != 0 {
		n += 1 + sovA1(uint64(m.Status))
	}
	if m.ProblemDetails != nil {
		l = m.ProblemDetails.Size()
		n += 1 + l + sovA1(uint64(l))
	}
	return n
}

func (m *SinglePolicyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Policy != nil {
		l = m.Policy.Size()
		n += 1 + l + sovA1(uint64(l))
	}
	return n
}

func (m *AllPolicyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.PolicyId) > 0 {
		for _, e := range m.PolicyId {
			l = e.Size()
			n += 1 + l + sovA1(uint64(l))
		}
	}
	return n
}

func (m *PolicyStatus) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EnforceStatus != 0 {
		n += 1 + sovA1(uint64(m.EnforceStatus))
	}
	if m.EnforceReason != 0 {
		n += 1 + sovA1(uint64(m.EnforceReason))
	}
	return n
}

func (m *PolicyStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PolicyStatus != nil {
		l = m.PolicyStatus.Size()
		n += 1 + l + sovA1(uint64(l))
	}
	return n
}

func (m *QueryRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovA1(uint64(m.Type))
	}
	if m.PolicyId != nil {
		l = m.PolicyId.Size()
		n += 1 + l + sovA1(uint64(l))
	}
	return n
}

func (m *QueryResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Response != nil {
		n += m.Response.Size()
	}
	if m.Status != 0 {
		n += 1 + sovA1(uint64(m.Status))
	}
	if m.ProblemDetails != nil {
		l = m.ProblemDetails.Size()
		n += 1 + l + sovA1(uint64(l))
	}
	return n
}

func (m *QueryResponse_SinglePolicyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.SinglePolicyResponse != nil {
		l = m.SinglePolicyResponse.Size()
		n += 1 + l + sovA1(uint64(l))
	}
	return n
}
func (m *QueryResponse_AllPolicyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.AllPolicyResponse != nil {
		l = m.AllPolicyResponse.Size()
		n += 1 + l + sovA1(uint64(l))
	}
	return n
}
func (m *QueryResponse_PolicyStatusResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PolicyStatusResponse != nil {
		l = m.PolicyStatusResponse.Size()
		n += 1 + l + sovA1(uint64(l))
	}
	return n
}
func (m *DeleteRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PolicyId != nil {
		l = m.PolicyId.Size()
		n += 1 + l + sovA1(uint64(l))
	}
	return n
}

func (m *DeleteResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovA1(uint64(m.Status))
	}
	if m.ProblemDetails != nil {
		l = m.ProblemDetails.Size()
		n += 1 + l + sovA1(uint64(l))
	}
	return n
}

func (m *NotifyRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *NotifyResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PolicyStatus != nil {
		l = m.PolicyStatus.Size()
		n += 1 + l + sovA1(uint64(l))
	}
	return n
}

func sovA1(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozA1(x uint64) (n int) {
	return sovA1(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProblemDetails) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProblemDetails: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProblemDetails: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA1
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Detail", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthA1
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthA1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Detail = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthA1
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthA1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PolicyStatement) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicyStatement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicyStatement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= types.PolicyType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field QosObjectives", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA1
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &qos.QosObjectives{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Statement = &PolicyStatement_QosObjectives{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TspResources", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA1
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &tsp.TspResources{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Statement = &PolicyStatement_TspResources{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthA1
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthA1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Policy) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Policy: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Policy: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ScopeId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA1
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ScopeId == nil {
				m.ScopeId = &types.ScopeIdentifier{}
			}
			if err := m.ScopeId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyStatement", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA1
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyStatement = append(m.PolicyStatement, &PolicyStatement{})
			if err := m.PolicyStatement[len(m.PolicyStatement)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthA1
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthA1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateOrUpdateRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateOrUpdateRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateOrUpdateRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA1
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PolicyId == nil {
				m.PolicyId = &types.PolicyID{}
			}
			if err := m.PolicyId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA1
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Policy == nil {
				m.Policy = &Policy{}
			}
			if err := m.Policy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthA1
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthA1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateOrUpdateResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateOrUpdateResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateOrUpdateResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA1
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Policy == nil {
				m.Policy = &Policy{}
			}
			if err := m.Policy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= types.OperationStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProblemDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA1
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProblemDetails == nil {
				m.ProblemDetails = &ProblemDetails{}
			}
			if err := m.ProblemDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthA1
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthA1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SinglePolicyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SinglePolicyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SinglePolicyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Policy", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA1
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Policy == nil {
				m.Policy = &Policy{}
			}
			if err := m.Policy.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthA1
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthA1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AllPolicyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AllPolicyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AllPolicyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA1
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PolicyId = append(m.PolicyId, &types.PolicyID{})
			if err := m.PolicyId[len(m.PolicyId)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthA1
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthA1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PolicyStatus) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicyStatus: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicyStatus: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnforceStatus", wireType)
			}
			m.EnforceStatus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnforceStatus |= types.EnforcementStatusType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EnforceReason", wireType)
			}
			m.EnforceReason = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EnforceReason |= types.EnforcementReasonType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipA1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthA1
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthA1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PolicyStatusResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PolicyStatusResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PolicyStatusResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA1
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PolicyStatus == nil {
				m.PolicyStatus = &PolicyStatus{}
			}
			if err := m.PolicyStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthA1
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthA1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= types.PolicyQueryType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA1
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PolicyId == nil {
				m.PolicyId = &types.PolicyID{}
			}
			if err := m.PolicyId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthA1
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthA1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SinglePolicyResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA1
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &SinglePolicyResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &QueryResponse_SinglePolicyResponse{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AllPolicyResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA1
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &AllPolicyResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &QueryResponse_AllPolicyResponse{v}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyStatusResponse", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA1
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PolicyStatusResponse{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Response = &QueryResponse_PolicyStatusResponse{v}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= types.OperationStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProblemDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA1
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProblemDetails == nil {
				m.ProblemDetails = &ProblemDetails{}
			}
			if err := m.ProblemDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthA1
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthA1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA1
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PolicyId == nil {
				m.PolicyId = &types.PolicyID{}
			}
			if err := m.PolicyId.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthA1
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthA1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= types.OperationStatus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProblemDetails", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA1
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ProblemDetails == nil {
				m.ProblemDetails = &ProblemDetails{}
			}
			if err := m.ProblemDetails.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthA1
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthA1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipA1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthA1
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthA1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NotifyResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowA1
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NotifyResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NotifyResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PolicyStatus", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowA1
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthA1
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthA1
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.PolicyStatus == nil {
				m.PolicyStatus = &PolicyStatus{}
			}
			if err := m.PolicyStatus.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipA1(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthA1
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthA1
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipA1(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowA1
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowA1
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowA1
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthA1
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupA1
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthA1
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthA1        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowA1          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupA1 = fmt.Errorf("proto: unexpected end of group")
)
