// Code generated by MockGen. DO NOT EDIT.
// Source: go/onos/onos-ric/sb/e2ap/e2ap.pb.go

// Package e2ap is a generated GoMock package.
package e2ap

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockE2APClient is a mock of E2APClient interface.
type MockE2APClient struct {
	ctrl     *gomock.Controller
	recorder *MockE2APClientMockRecorder
}

// MockE2APClientMockRecorder is the mock recorder for MockE2APClient.
type MockE2APClientMockRecorder struct {
	mock *MockE2APClient
}

// NewMockE2APClient creates a new mock instance.
func NewMockE2APClient(ctrl *gomock.Controller) *MockE2APClient {
	mock := &MockE2APClient{ctrl: ctrl}
	mock.recorder = &MockE2APClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockE2APClient) EXPECT() *MockE2APClientMockRecorder {
	return m.recorder
}

// RicSubscribe mocks base method.
func (m *MockE2APClient) RicSubscribe(ctx context.Context, in *RicSubscriptionRequest, opts ...grpc.CallOption) (*RicSubscriptionResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RicSubscribe", varargs...)
	ret0, _ := ret[0].(*RicSubscriptionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RicSubscribe indicates an expected call of RicSubscribe.
func (mr *MockE2APClientMockRecorder) RicSubscribe(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RicSubscribe", reflect.TypeOf((*MockE2APClient)(nil).RicSubscribe), varargs...)
}

// RicChan mocks base method.
func (m *MockE2APClient) RicChan(ctx context.Context, opts ...grpc.CallOption) (E2AP_RicChanClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RicChan", varargs...)
	ret0, _ := ret[0].(E2AP_RicChanClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RicChan indicates an expected call of RicChan.
func (mr *MockE2APClientMockRecorder) RicChan(ctx interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RicChan", reflect.TypeOf((*MockE2APClient)(nil).RicChan), varargs...)
}

// MockE2AP_RicChanClient is a mock of E2AP_RicChanClient interface.
type MockE2AP_RicChanClient struct {
	ctrl     *gomock.Controller
	recorder *MockE2AP_RicChanClientMockRecorder
}

// MockE2AP_RicChanClientMockRecorder is the mock recorder for MockE2AP_RicChanClient.
type MockE2AP_RicChanClientMockRecorder struct {
	mock *MockE2AP_RicChanClient
}

// NewMockE2AP_RicChanClient creates a new mock instance.
func NewMockE2AP_RicChanClient(ctrl *gomock.Controller) *MockE2AP_RicChanClient {
	mock := &MockE2AP_RicChanClient{ctrl: ctrl}
	mock.recorder = &MockE2AP_RicChanClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockE2AP_RicChanClient) EXPECT() *MockE2AP_RicChanClientMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockE2AP_RicChanClient) Send(arg0 *RicControlRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockE2AP_RicChanClientMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockE2AP_RicChanClient)(nil).Send), arg0)
}

// Recv mocks base method.
func (m *MockE2AP_RicChanClient) Recv() (*RicIndication, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*RicIndication)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockE2AP_RicChanClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockE2AP_RicChanClient)(nil).Recv))
}

// Header mocks base method.
func (m *MockE2AP_RicChanClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockE2AP_RicChanClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockE2AP_RicChanClient)(nil).Header))
}

// Trailer mocks base method.
func (m *MockE2AP_RicChanClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockE2AP_RicChanClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockE2AP_RicChanClient)(nil).Trailer))
}

// CloseSend mocks base method.
func (m *MockE2AP_RicChanClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockE2AP_RicChanClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockE2AP_RicChanClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockE2AP_RicChanClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockE2AP_RicChanClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockE2AP_RicChanClient)(nil).Context))
}

// SendMsg mocks base method.
func (m_2 *MockE2AP_RicChanClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockE2AP_RicChanClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockE2AP_RicChanClient)(nil).SendMsg), m)
}

// RecvMsg mocks base method.
func (m_2 *MockE2AP_RicChanClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockE2AP_RicChanClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockE2AP_RicChanClient)(nil).RecvMsg), m)
}

// MockE2APServer is a mock of E2APServer interface.
type MockE2APServer struct {
	ctrl     *gomock.Controller
	recorder *MockE2APServerMockRecorder
}

// MockE2APServerMockRecorder is the mock recorder for MockE2APServer.
type MockE2APServerMockRecorder struct {
	mock *MockE2APServer
}

// NewMockE2APServer creates a new mock instance.
func NewMockE2APServer(ctrl *gomock.Controller) *MockE2APServer {
	mock := &MockE2APServer{ctrl: ctrl}
	mock.recorder = &MockE2APServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockE2APServer) EXPECT() *MockE2APServerMockRecorder {
	return m.recorder
}

// RicSubscribe mocks base method.
func (m *MockE2APServer) RicSubscribe(arg0 context.Context, arg1 *RicSubscriptionRequest) (*RicSubscriptionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RicSubscribe", arg0, arg1)
	ret0, _ := ret[0].(*RicSubscriptionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RicSubscribe indicates an expected call of RicSubscribe.
func (mr *MockE2APServerMockRecorder) RicSubscribe(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RicSubscribe", reflect.TypeOf((*MockE2APServer)(nil).RicSubscribe), arg0, arg1)
}

// RicChan mocks base method.
func (m *MockE2APServer) RicChan(arg0 E2AP_RicChanServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RicChan", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RicChan indicates an expected call of RicChan.
func (mr *MockE2APServerMockRecorder) RicChan(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RicChan", reflect.TypeOf((*MockE2APServer)(nil).RicChan), arg0)
}

// MockE2AP_RicChanServer is a mock of E2AP_RicChanServer interface.
type MockE2AP_RicChanServer struct {
	ctrl     *gomock.Controller
	recorder *MockE2AP_RicChanServerMockRecorder
}

// MockE2AP_RicChanServerMockRecorder is the mock recorder for MockE2AP_RicChanServer.
type MockE2AP_RicChanServerMockRecorder struct {
	mock *MockE2AP_RicChanServer
}

// NewMockE2AP_RicChanServer creates a new mock instance.
func NewMockE2AP_RicChanServer(ctrl *gomock.Controller) *MockE2AP_RicChanServer {
	mock := &MockE2AP_RicChanServer{ctrl: ctrl}
	mock.recorder = &MockE2AP_RicChanServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockE2AP_RicChanServer) EXPECT() *MockE2AP_RicChanServerMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockE2AP_RicChanServer) Send(arg0 *RicIndication) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockE2AP_RicChanServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockE2AP_RicChanServer)(nil).Send), arg0)
}

// Recv mocks base method.
func (m *MockE2AP_RicChanServer) Recv() (*RicControlRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*RicControlRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockE2AP_RicChanServerMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockE2AP_RicChanServer)(nil).Recv))
}

// SetHeader mocks base method.
func (m *MockE2AP_RicChanServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockE2AP_RicChanServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockE2AP_RicChanServer)(nil).SetHeader), arg0)
}

// SendHeader mocks base method.
func (m *MockE2AP_RicChanServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockE2AP_RicChanServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockE2AP_RicChanServer)(nil).SendHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockE2AP_RicChanServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockE2AP_RicChanServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockE2AP_RicChanServer)(nil).SetTrailer), arg0)
}

// Context mocks base method.
func (m *MockE2AP_RicChanServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockE2AP_RicChanServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockE2AP_RicChanServer)(nil).Context))
}

// SendMsg mocks base method.
func (m_2 *MockE2AP_RicChanServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockE2AP_RicChanServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockE2AP_RicChanServer)(nil).SendMsg), m)
}

// RecvMsg mocks base method.
func (m_2 *MockE2AP_RicChanServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockE2AP_RicChanServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockE2AP_RicChanServer)(nil).RecvMsg), m)
}
