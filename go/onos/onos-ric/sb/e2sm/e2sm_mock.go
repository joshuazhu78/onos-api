// Code generated by MockGen. DO NOT EDIT.
// Source: go/onos/onos-ric/sb/e2sm/e2sm.pb.go

// Package e2sm is a generated GoMock package.
package e2sm

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockisRicSubscriptionMessage_S is a mock of isRicSubscriptionMessage_S interface.
type MockisRicSubscriptionMessage_S struct {
	ctrl     *gomock.Controller
	recorder *MockisRicSubscriptionMessage_SMockRecorder
}

// MockisRicSubscriptionMessage_SMockRecorder is the mock recorder for MockisRicSubscriptionMessage_S.
type MockisRicSubscriptionMessage_SMockRecorder struct {
	mock *MockisRicSubscriptionMessage_S
}

// NewMockisRicSubscriptionMessage_S creates a new mock instance.
func NewMockisRicSubscriptionMessage_S(ctrl *gomock.Controller) *MockisRicSubscriptionMessage_S {
	mock := &MockisRicSubscriptionMessage_S{ctrl: ctrl}
	mock.recorder = &MockisRicSubscriptionMessage_SMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisRicSubscriptionMessage_S) EXPECT() *MockisRicSubscriptionMessage_SMockRecorder {
	return m.recorder
}

// isRicSubscriptionMessage_S mocks base method.
func (m *MockisRicSubscriptionMessage_S) isRicSubscriptionMessage_S() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isRicSubscriptionMessage_S")
}

// isRicSubscriptionMessage_S indicates an expected call of isRicSubscriptionMessage_S.
func (mr *MockisRicSubscriptionMessage_SMockRecorder) isRicSubscriptionMessage_S() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isRicSubscriptionMessage_S", reflect.TypeOf((*MockisRicSubscriptionMessage_S)(nil).isRicSubscriptionMessage_S))
}

// MarshalTo mocks base method.
func (m *MockisRicSubscriptionMessage_S) MarshalTo(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo.
func (mr *MockisRicSubscriptionMessage_SMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisRicSubscriptionMessage_S)(nil).MarshalTo), arg0)
}

// Size mocks base method.
func (m *MockisRicSubscriptionMessage_S) Size() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockisRicSubscriptionMessage_SMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisRicSubscriptionMessage_S)(nil).Size))
}

// MockisRicIndicationMessage_S is a mock of isRicIndicationMessage_S interface.
type MockisRicIndicationMessage_S struct {
	ctrl     *gomock.Controller
	recorder *MockisRicIndicationMessage_SMockRecorder
}

// MockisRicIndicationMessage_SMockRecorder is the mock recorder for MockisRicIndicationMessage_S.
type MockisRicIndicationMessage_SMockRecorder struct {
	mock *MockisRicIndicationMessage_S
}

// NewMockisRicIndicationMessage_S creates a new mock instance.
func NewMockisRicIndicationMessage_S(ctrl *gomock.Controller) *MockisRicIndicationMessage_S {
	mock := &MockisRicIndicationMessage_S{ctrl: ctrl}
	mock.recorder = &MockisRicIndicationMessage_SMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisRicIndicationMessage_S) EXPECT() *MockisRicIndicationMessage_SMockRecorder {
	return m.recorder
}

// isRicIndicationMessage_S mocks base method.
func (m *MockisRicIndicationMessage_S) isRicIndicationMessage_S() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isRicIndicationMessage_S")
}

// isRicIndicationMessage_S indicates an expected call of isRicIndicationMessage_S.
func (mr *MockisRicIndicationMessage_SMockRecorder) isRicIndicationMessage_S() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isRicIndicationMessage_S", reflect.TypeOf((*MockisRicIndicationMessage_S)(nil).isRicIndicationMessage_S))
}

// MarshalTo mocks base method.
func (m *MockisRicIndicationMessage_S) MarshalTo(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo.
func (mr *MockisRicIndicationMessage_SMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisRicIndicationMessage_S)(nil).MarshalTo), arg0)
}

// Size mocks base method.
func (m *MockisRicIndicationMessage_S) Size() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockisRicIndicationMessage_SMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisRicIndicationMessage_S)(nil).Size))
}

// MockisRicControlMessage_S is a mock of isRicControlMessage_S interface.
type MockisRicControlMessage_S struct {
	ctrl     *gomock.Controller
	recorder *MockisRicControlMessage_SMockRecorder
}

// MockisRicControlMessage_SMockRecorder is the mock recorder for MockisRicControlMessage_S.
type MockisRicControlMessage_SMockRecorder struct {
	mock *MockisRicControlMessage_S
}

// NewMockisRicControlMessage_S creates a new mock instance.
func NewMockisRicControlMessage_S(ctrl *gomock.Controller) *MockisRicControlMessage_S {
	mock := &MockisRicControlMessage_S{ctrl: ctrl}
	mock.recorder = &MockisRicControlMessage_SMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisRicControlMessage_S) EXPECT() *MockisRicControlMessage_SMockRecorder {
	return m.recorder
}

// isRicControlMessage_S mocks base method.
func (m *MockisRicControlMessage_S) isRicControlMessage_S() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isRicControlMessage_S")
}

// isRicControlMessage_S indicates an expected call of isRicControlMessage_S.
func (mr *MockisRicControlMessage_SMockRecorder) isRicControlMessage_S() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isRicControlMessage_S", reflect.TypeOf((*MockisRicControlMessage_S)(nil).isRicControlMessage_S))
}

// MarshalTo mocks base method.
func (m *MockisRicControlMessage_S) MarshalTo(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo.
func (mr *MockisRicControlMessage_SMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisRicControlMessage_S)(nil).MarshalTo), arg0)
}

// Size mocks base method.
func (m *MockisRicControlMessage_S) Size() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockisRicControlMessage_SMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisRicControlMessage_S)(nil).Size))
}

// MockisRicControlOutcome_S is a mock of isRicControlOutcome_S interface.
type MockisRicControlOutcome_S struct {
	ctrl     *gomock.Controller
	recorder *MockisRicControlOutcome_SMockRecorder
}

// MockisRicControlOutcome_SMockRecorder is the mock recorder for MockisRicControlOutcome_S.
type MockisRicControlOutcome_SMockRecorder struct {
	mock *MockisRicControlOutcome_S
}

// NewMockisRicControlOutcome_S creates a new mock instance.
func NewMockisRicControlOutcome_S(ctrl *gomock.Controller) *MockisRicControlOutcome_S {
	mock := &MockisRicControlOutcome_S{ctrl: ctrl}
	mock.recorder = &MockisRicControlOutcome_SMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockisRicControlOutcome_S) EXPECT() *MockisRicControlOutcome_SMockRecorder {
	return m.recorder
}

// isRicControlOutcome_S mocks base method.
func (m *MockisRicControlOutcome_S) isRicControlOutcome_S() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "isRicControlOutcome_S")
}

// isRicControlOutcome_S indicates an expected call of isRicControlOutcome_S.
func (mr *MockisRicControlOutcome_SMockRecorder) isRicControlOutcome_S() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "isRicControlOutcome_S", reflect.TypeOf((*MockisRicControlOutcome_S)(nil).isRicControlOutcome_S))
}

// MarshalTo mocks base method.
func (m *MockisRicControlOutcome_S) MarshalTo(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarshalTo", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarshalTo indicates an expected call of MarshalTo.
func (mr *MockisRicControlOutcome_SMockRecorder) MarshalTo(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarshalTo", reflect.TypeOf((*MockisRicControlOutcome_S)(nil).MarshalTo), arg0)
}

// Size mocks base method.
func (m *MockisRicControlOutcome_S) Size() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Size")
	ret0, _ := ret[0].(int)
	return ret0
}

// Size indicates an expected call of Size.
func (mr *MockisRicControlOutcome_SMockRecorder) Size() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Size", reflect.TypeOf((*MockisRicControlOutcome_S)(nil).Size))
}
