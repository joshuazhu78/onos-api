// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: onos/onos-ztp/admin/roles.proto

package admin

import (
	context "context"
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type DeviceRoleChange_ChangeType int32

const (
	DeviceRoleChange_UPDATED DeviceRoleChange_ChangeType = 0
	DeviceRoleChange_ADDED   DeviceRoleChange_ChangeType = 1
	DeviceRoleChange_DELETED DeviceRoleChange_ChangeType = 2
)

var DeviceRoleChange_ChangeType_name = map[int32]string{
	0: "UPDATED",
	1: "ADDED",
	2: "DELETED",
}

var DeviceRoleChange_ChangeType_value = map[string]int32{
	"UPDATED": 0,
	"ADDED":   1,
	"DELETED": 2,
}

func (x DeviceRoleChange_ChangeType) String() string {
	return proto.EnumName(DeviceRoleChange_ChangeType_name, int32(x))
}

func (DeviceRoleChange_ChangeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_45d97f55ebef07b1, []int{4, 0}
}

type DeviceRoleChangeRequest_ChangeType int32

const (
	DeviceRoleChangeRequest_UPDATE DeviceRoleChangeRequest_ChangeType = 0
	DeviceRoleChangeRequest_ADD    DeviceRoleChangeRequest_ChangeType = 1
	DeviceRoleChangeRequest_DELETE DeviceRoleChangeRequest_ChangeType = 2
)

var DeviceRoleChangeRequest_ChangeType_name = map[int32]string{
	0: "UPDATE",
	1: "ADD",
	2: "DELETE",
}

var DeviceRoleChangeRequest_ChangeType_value = map[string]int32{
	"UPDATE": 0,
	"ADD":    1,
	"DELETE": 2,
}

func (x DeviceRoleChangeRequest_ChangeType) String() string {
	return proto.EnumName(DeviceRoleChangeRequest_ChangeType_name, int32(x))
}

func (DeviceRoleChangeRequest_ChangeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_45d97f55ebef07b1, []int{5, 0}
}

// DeviceRoleConfig carries the template configuration associated with a device role
type DeviceRoleConfig struct {
	Role     string          `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
	Config   *DeviceConfig   `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
	Pipeline *DevicePipeline `protobuf:"bytes,3,opt,name=pipeline,proto3" json:"pipeline,omitempty"`
}

func (m *DeviceRoleConfig) Reset()         { *m = DeviceRoleConfig{} }
func (m *DeviceRoleConfig) String() string { return proto.CompactTextString(m) }
func (*DeviceRoleConfig) ProtoMessage()    {}
func (*DeviceRoleConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_45d97f55ebef07b1, []int{0}
}
func (m *DeviceRoleConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceRoleConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceRoleConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceRoleConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceRoleConfig.Merge(m, src)
}
func (m *DeviceRoleConfig) XXX_Size() int {
	return m.Size()
}
func (m *DeviceRoleConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceRoleConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceRoleConfig proto.InternalMessageInfo

func (m *DeviceRoleConfig) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func (m *DeviceRoleConfig) GetConfig() *DeviceConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

func (m *DeviceRoleConfig) GetPipeline() *DevicePipeline {
	if m != nil {
		return m.Pipeline
	}
	return nil
}

// DeviceConfig is a set of initial configuration properties to be applied to a device.
type DeviceConfig struct {
	SoftwareVersion string            `protobuf:"bytes,1,opt,name=softwareVersion,proto3" json:"softwareVersion,omitempty"`
	Properties      []*DeviceProperty `protobuf:"bytes,2,rep,name=properties,proto3" json:"properties,omitempty"`
}

func (m *DeviceConfig) Reset()         { *m = DeviceConfig{} }
func (m *DeviceConfig) String() string { return proto.CompactTextString(m) }
func (*DeviceConfig) ProtoMessage()    {}
func (*DeviceConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_45d97f55ebef07b1, []int{1}
}
func (m *DeviceConfig) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceConfig.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceConfig.Merge(m, src)
}
func (m *DeviceConfig) XXX_Size() int {
	return m.Size()
}
func (m *DeviceConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceConfig proto.InternalMessageInfo

func (m *DeviceConfig) GetSoftwareVersion() string {
	if m != nil {
		return m.SoftwareVersion
	}
	return ""
}

func (m *DeviceConfig) GetProperties() []*DeviceProperty {
	if m != nil {
		return m.Properties
	}
	return nil
}

// DeviceProperty is a path/type/value tuple
type DeviceProperty struct {
	Path  string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	Type  string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Value string `protobuf:"bytes,3,opt,name=value,proto3" json:"value,omitempty"`
}

func (m *DeviceProperty) Reset()         { *m = DeviceProperty{} }
func (m *DeviceProperty) String() string { return proto.CompactTextString(m) }
func (*DeviceProperty) ProtoMessage()    {}
func (*DeviceProperty) Descriptor() ([]byte, []int) {
	return fileDescriptor_45d97f55ebef07b1, []int{2}
}
func (m *DeviceProperty) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceProperty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceProperty.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceProperty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceProperty.Merge(m, src)
}
func (m *DeviceProperty) XXX_Size() int {
	return m.Size()
}
func (m *DeviceProperty) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceProperty.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceProperty proto.InternalMessageInfo

func (m *DeviceProperty) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *DeviceProperty) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *DeviceProperty) GetValue() string {
	if m != nil {
		return m.Value
	}
	return ""
}

// DevicePipeline carries information about the P4 pipeline configuration
type DevicePipeline struct {
	Pipeconf string `protobuf:"bytes,1,opt,name=pipeconf,proto3" json:"pipeconf,omitempty"`
	Driver   string `protobuf:"bytes,2,opt,name=driver,proto3" json:"driver,omitempty"`
}

func (m *DevicePipeline) Reset()         { *m = DevicePipeline{} }
func (m *DevicePipeline) String() string { return proto.CompactTextString(m) }
func (*DevicePipeline) ProtoMessage()    {}
func (*DevicePipeline) Descriptor() ([]byte, []int) {
	return fileDescriptor_45d97f55ebef07b1, []int{3}
}
func (m *DevicePipeline) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DevicePipeline) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DevicePipeline.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DevicePipeline) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DevicePipeline.Merge(m, src)
}
func (m *DevicePipeline) XXX_Size() int {
	return m.Size()
}
func (m *DevicePipeline) XXX_DiscardUnknown() {
	xxx_messageInfo_DevicePipeline.DiscardUnknown(m)
}

var xxx_messageInfo_DevicePipeline proto.InternalMessageInfo

func (m *DevicePipeline) GetPipeconf() string {
	if m != nil {
		return m.Pipeconf
	}
	return ""
}

func (m *DevicePipeline) GetDriver() string {
	if m != nil {
		return m.Driver
	}
	return ""
}

// DeviceRoleChange is an event describing a change to a device role configuration.
type DeviceRoleChange struct {
	Change DeviceRoleChange_ChangeType `protobuf:"varint,1,opt,name=change,proto3,enum=admin.DeviceRoleChange_ChangeType" json:"change,omitempty"`
	Config *DeviceRoleConfig           `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (m *DeviceRoleChange) Reset()         { *m = DeviceRoleChange{} }
func (m *DeviceRoleChange) String() string { return proto.CompactTextString(m) }
func (*DeviceRoleChange) ProtoMessage()    {}
func (*DeviceRoleChange) Descriptor() ([]byte, []int) {
	return fileDescriptor_45d97f55ebef07b1, []int{4}
}
func (m *DeviceRoleChange) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceRoleChange) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceRoleChange.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceRoleChange) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceRoleChange.Merge(m, src)
}
func (m *DeviceRoleChange) XXX_Size() int {
	return m.Size()
}
func (m *DeviceRoleChange) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceRoleChange.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceRoleChange proto.InternalMessageInfo

func (m *DeviceRoleChange) GetChange() DeviceRoleChange_ChangeType {
	if m != nil {
		return m.Change
	}
	return DeviceRoleChange_UPDATED
}

func (m *DeviceRoleChange) GetConfig() *DeviceRoleConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

// DeviceRoleChangeRequest is a request for a change to a device role configuration
type DeviceRoleChangeRequest struct {
	Change DeviceRoleChangeRequest_ChangeType `protobuf:"varint,1,opt,name=change,proto3,enum=admin.DeviceRoleChangeRequest_ChangeType" json:"change,omitempty"`
	Config *DeviceRoleConfig                  `protobuf:"bytes,2,opt,name=config,proto3" json:"config,omitempty"`
}

func (m *DeviceRoleChangeRequest) Reset()         { *m = DeviceRoleChangeRequest{} }
func (m *DeviceRoleChangeRequest) String() string { return proto.CompactTextString(m) }
func (*DeviceRoleChangeRequest) ProtoMessage()    {}
func (*DeviceRoleChangeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_45d97f55ebef07b1, []int{5}
}
func (m *DeviceRoleChangeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceRoleChangeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceRoleChangeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceRoleChangeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceRoleChangeRequest.Merge(m, src)
}
func (m *DeviceRoleChangeRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeviceRoleChangeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceRoleChangeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceRoleChangeRequest proto.InternalMessageInfo

func (m *DeviceRoleChangeRequest) GetChange() DeviceRoleChangeRequest_ChangeType {
	if m != nil {
		return m.Change
	}
	return DeviceRoleChangeRequest_UPDATE
}

func (m *DeviceRoleChangeRequest) GetConfig() *DeviceRoleConfig {
	if m != nil {
		return m.Config
	}
	return nil
}

// DeviceRoleChangeResponse is a response for a change to a device role configuration
type DeviceRoleChangeResponse struct {
	Change *DeviceRoleChange `protobuf:"bytes,2,opt,name=change,proto3" json:"change,omitempty"`
}

func (m *DeviceRoleChangeResponse) Reset()         { *m = DeviceRoleChangeResponse{} }
func (m *DeviceRoleChangeResponse) String() string { return proto.CompactTextString(m) }
func (*DeviceRoleChangeResponse) ProtoMessage()    {}
func (*DeviceRoleChangeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_45d97f55ebef07b1, []int{6}
}
func (m *DeviceRoleChangeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceRoleChangeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceRoleChangeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceRoleChangeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceRoleChangeResponse.Merge(m, src)
}
func (m *DeviceRoleChangeResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeviceRoleChangeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceRoleChangeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceRoleChangeResponse proto.InternalMessageInfo

func (m *DeviceRoleChangeResponse) GetChange() *DeviceRoleChange {
	if m != nil {
		return m.Change
	}
	return nil
}

// DeviceRoleRequest is a request for device role configuration.
type DeviceRoleRequest struct {
	Role string `protobuf:"bytes,1,opt,name=role,proto3" json:"role,omitempty"`
}

func (m *DeviceRoleRequest) Reset()         { *m = DeviceRoleRequest{} }
func (m *DeviceRoleRequest) String() string { return proto.CompactTextString(m) }
func (*DeviceRoleRequest) ProtoMessage()    {}
func (*DeviceRoleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_45d97f55ebef07b1, []int{7}
}
func (m *DeviceRoleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeviceRoleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeviceRoleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DeviceRoleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeviceRoleRequest.Merge(m, src)
}
func (m *DeviceRoleRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeviceRoleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeviceRoleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeviceRoleRequest proto.InternalMessageInfo

func (m *DeviceRoleRequest) GetRole() string {
	if m != nil {
		return m.Role
	}
	return ""
}

func init() {
	proto.RegisterEnum("admin.DeviceRoleChange_ChangeType", DeviceRoleChange_ChangeType_name, DeviceRoleChange_ChangeType_value)
	proto.RegisterEnum("admin.DeviceRoleChangeRequest_ChangeType", DeviceRoleChangeRequest_ChangeType_name, DeviceRoleChangeRequest_ChangeType_value)
	proto.RegisterType((*DeviceRoleConfig)(nil), "admin.DeviceRoleConfig")
	proto.RegisterType((*DeviceConfig)(nil), "admin.DeviceConfig")
	proto.RegisterType((*DeviceProperty)(nil), "admin.DeviceProperty")
	proto.RegisterType((*DevicePipeline)(nil), "admin.DevicePipeline")
	proto.RegisterType((*DeviceRoleChange)(nil), "admin.DeviceRoleChange")
	proto.RegisterType((*DeviceRoleChangeRequest)(nil), "admin.DeviceRoleChangeRequest")
	proto.RegisterType((*DeviceRoleChangeResponse)(nil), "admin.DeviceRoleChangeResponse")
	proto.RegisterType((*DeviceRoleRequest)(nil), "admin.DeviceRoleRequest")
}

func init() { proto.RegisterFile("onos/onos-ztp/admin/roles.proto", fileDescriptor_45d97f55ebef07b1) }

var fileDescriptor_45d97f55ebef07b1 = []byte{
	// 516 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xcd, 0x6e, 0xd3, 0x40,
	0x10, 0xce, 0x26, 0xc4, 0x25, 0x53, 0x54, 0xc2, 0xf0, 0x53, 0xab, 0x07, 0x37, 0xf2, 0x85, 0x20,
	0xd4, 0xa4, 0x0d, 0xe2, 0xd2, 0x13, 0x01, 0x07, 0x0e, 0x20, 0x54, 0x39, 0x85, 0xbb, 0x93, 0x4e,
	0x5b, 0x4b, 0xc1, 0xbb, 0xac, 0x9d, 0xa0, 0xf0, 0x00, 0x9c, 0x79, 0x16, 0xce, 0x3c, 0x00, 0xc7,
	0x1e, 0xe1, 0x86, 0x92, 0x17, 0x41, 0xfb, 0x93, 0x1f, 0x27, 0x04, 0x09, 0xa9, 0x17, 0x7b, 0x76,
	0xe6, 0x9b, 0x6f, 0xbf, 0x6f, 0x46, 0x36, 0xec, 0xf3, 0x84, 0xa7, 0x4d, 0xf5, 0x38, 0xf8, 0x9c,
	0x89, 0x66, 0x74, 0xf6, 0x21, 0x4e, 0x9a, 0x92, 0x0f, 0x28, 0x6d, 0x08, 0xc9, 0x33, 0x8e, 0x65,
	0x9d, 0xf2, 0xbf, 0x30, 0xa8, 0x06, 0x34, 0x8a, 0xfb, 0x14, 0xf2, 0x01, 0xbd, 0xe0, 0xc9, 0x79,
	0x7c, 0x81, 0x08, 0x37, 0x14, 0xd4, 0x65, 0x35, 0x56, 0xaf, 0x84, 0x3a, 0xc6, 0xc7, 0xe0, 0xf4,
	0x75, 0xd5, 0x2d, 0xd6, 0x58, 0x7d, 0xbb, 0x75, 0xb7, 0xa1, 0x09, 0x1a, 0xa6, 0xd9, 0x34, 0x86,
	0x16, 0x82, 0x47, 0x70, 0x53, 0xc4, 0x82, 0x06, 0x71, 0x42, 0x6e, 0x49, 0xc3, 0xef, 0xe7, 0xe0,
	0x27, 0xb6, 0x18, 0xce, 0x61, 0x3e, 0x87, 0x5b, 0xcb, 0x54, 0x58, 0x87, 0xdb, 0x29, 0x3f, 0xcf,
	0x3e, 0x45, 0x92, 0xde, 0x93, 0x4c, 0x63, 0x9e, 0x58, 0x39, 0xab, 0x69, 0x7c, 0x0a, 0x20, 0x24,
	0x17, 0x24, 0xb3, 0x98, 0x52, 0xb7, 0x58, 0x2b, 0xad, 0x5f, 0x67, 0xca, 0xe3, 0x70, 0x09, 0xe8,
	0xbf, 0x85, 0x9d, 0x7c, 0x55, 0xd9, 0x16, 0x51, 0x76, 0x39, 0xb3, 0xad, 0x62, 0x95, 0xcb, 0xc6,
	0x82, 0xb4, 0xe9, 0x4a, 0xa8, 0x63, 0xbc, 0x07, 0xe5, 0x51, 0x34, 0x18, 0x1a, 0x6b, 0x95, 0xd0,
	0x1c, 0xfc, 0x60, 0xce, 0x67, 0x2d, 0xe1, 0x9e, 0x99, 0x82, 0x9a, 0x89, 0xe5, 0x9c, 0x9f, 0xf1,
	0x01, 0x38, 0x67, 0x32, 0x1e, 0x91, 0xb4, 0xcc, 0xf6, 0xe4, 0x7f, 0xcb, 0xef, 0xe3, 0x32, 0x4a,
	0x2e, 0x08, 0x8f, 0xc1, 0xe9, 0xeb, 0x48, 0xd3, 0xec, 0xb4, 0xfc, 0x9c, 0xbb, 0x05, 0xb0, 0x61,
	0x5e, 0xa7, 0x63, 0x41, 0xa1, 0xed, 0xc0, 0xe6, 0xca, 0xde, 0x76, 0xd7, 0x7b, 0x73, 0xbb, 0xf3,
	0x8f, 0x00, 0x16, 0x34, 0xb8, 0x0d, 0x5b, 0xef, 0x4e, 0x82, 0xf6, 0x69, 0x27, 0xa8, 0x16, 0xb0,
	0x02, 0xe5, 0x76, 0x10, 0x74, 0x82, 0x2a, 0x53, 0xf9, 0xa0, 0xf3, 0xa6, 0xa3, 0xf2, 0x45, 0xff,
	0x3b, 0x83, 0xdd, 0x55, 0x2d, 0x21, 0x7d, 0x1c, 0x52, 0x9a, 0x61, 0x7b, 0x45, 0xfb, 0xa3, 0x0d,
	0xda, 0x2d, 0xfe, 0x5a, 0x2c, 0x1c, 0xe4, 0x2c, 0x00, 0x38, 0xc6, 0x42, 0xb5, 0x80, 0x5b, 0x50,
	0x6a, 0x07, 0x4a, 0x3f, 0x80, 0x63, 0xf4, 0x57, 0x8b, 0xfe, 0x6b, 0x70, 0xd7, 0xd5, 0xa4, 0x82,
	0x27, 0xa9, 0xb9, 0xdb, 0xc8, 0xdf, 0x78, 0xb7, 0x69, 0xb0, 0x30, 0xff, 0x21, 0xdc, 0x59, 0xd4,
	0x66, 0x43, 0xf8, 0xcb, 0x07, 0xd5, 0xfa, 0xc5, 0x96, 0x91, 0x5d, 0x92, 0x2a, 0xc4, 0x97, 0x50,
	0xea, 0x52, 0x86, 0xde, 0xbf, 0xa7, 0xb4, 0xb7, 0xbf, 0xb1, 0x6e, 0x75, 0x1f, 0x43, 0xe9, 0x15,
	0x65, 0xe8, 0xae, 0xe1, 0x66, 0x0c, 0x9b, 0x86, 0x78, 0xc8, 0xf0, 0x19, 0x54, 0xba, 0xc3, 0x5e,
	0xda, 0x97, 0x71, 0x8f, 0xfe, 0x8f, 0x41, 0x6b, 0x38, 0x64, 0xcf, 0xdd, 0x1f, 0x13, 0x8f, 0x5d,
	0x4d, 0x3c, 0xf6, 0x7b, 0xe2, 0xb1, 0xaf, 0x53, 0xaf, 0x70, 0x35, 0xf5, 0x0a, 0x3f, 0xa7, 0x5e,
	0xa1, 0xe7, 0xe8, 0xbf, 0xcf, 0x93, 0x3f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x8a, 0x26, 0x7d, 0x79,
	0xa0, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DeviceRoleServiceClient is the client API for DeviceRoleService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DeviceRoleServiceClient interface {
	// Set provides means to add, update or delete device role configuration.
	Set(ctx context.Context, in *DeviceRoleChangeRequest, opts ...grpc.CallOption) (*DeviceRoleChangeResponse, error)
	// Get provides means to query device role configuration.
	Get(ctx context.Context, in *DeviceRoleRequest, opts ...grpc.CallOption) (DeviceRoleService_GetClient, error)
	// Subscribe provides means to monitor changes in the device role configuration.
	Subscribe(ctx context.Context, in *DeviceRoleRequest, opts ...grpc.CallOption) (DeviceRoleService_SubscribeClient, error)
}

type deviceRoleServiceClient struct {
	cc *grpc.ClientConn
}

func NewDeviceRoleServiceClient(cc *grpc.ClientConn) DeviceRoleServiceClient {
	return &deviceRoleServiceClient{cc}
}

func (c *deviceRoleServiceClient) Set(ctx context.Context, in *DeviceRoleChangeRequest, opts ...grpc.CallOption) (*DeviceRoleChangeResponse, error) {
	out := new(DeviceRoleChangeResponse)
	err := c.cc.Invoke(ctx, "/admin.DeviceRoleService/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *deviceRoleServiceClient) Get(ctx context.Context, in *DeviceRoleRequest, opts ...grpc.CallOption) (DeviceRoleService_GetClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DeviceRoleService_serviceDesc.Streams[0], "/admin.DeviceRoleService/Get", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceRoleServiceGetClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceRoleService_GetClient interface {
	Recv() (*DeviceRoleConfig, error)
	grpc.ClientStream
}

type deviceRoleServiceGetClient struct {
	grpc.ClientStream
}

func (x *deviceRoleServiceGetClient) Recv() (*DeviceRoleConfig, error) {
	m := new(DeviceRoleConfig)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *deviceRoleServiceClient) Subscribe(ctx context.Context, in *DeviceRoleRequest, opts ...grpc.CallOption) (DeviceRoleService_SubscribeClient, error) {
	stream, err := c.cc.NewStream(ctx, &_DeviceRoleService_serviceDesc.Streams[1], "/admin.DeviceRoleService/Subscribe", opts...)
	if err != nil {
		return nil, err
	}
	x := &deviceRoleServiceSubscribeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DeviceRoleService_SubscribeClient interface {
	Recv() (*DeviceRoleChange, error)
	grpc.ClientStream
}

type deviceRoleServiceSubscribeClient struct {
	grpc.ClientStream
}

func (x *deviceRoleServiceSubscribeClient) Recv() (*DeviceRoleChange, error) {
	m := new(DeviceRoleChange)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DeviceRoleServiceServer is the server API for DeviceRoleService service.
type DeviceRoleServiceServer interface {
	// Set provides means to add, update or delete device role configuration.
	Set(context.Context, *DeviceRoleChangeRequest) (*DeviceRoleChangeResponse, error)
	// Get provides means to query device role configuration.
	Get(*DeviceRoleRequest, DeviceRoleService_GetServer) error
	// Subscribe provides means to monitor changes in the device role configuration.
	Subscribe(*DeviceRoleRequest, DeviceRoleService_SubscribeServer) error
}

// UnimplementedDeviceRoleServiceServer can be embedded to have forward compatible implementations.
type UnimplementedDeviceRoleServiceServer struct {
}

func (*UnimplementedDeviceRoleServiceServer) Set(ctx context.Context, req *DeviceRoleChangeRequest) (*DeviceRoleChangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (*UnimplementedDeviceRoleServiceServer) Get(req *DeviceRoleRequest, srv DeviceRoleService_GetServer) error {
	return status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedDeviceRoleServiceServer) Subscribe(req *DeviceRoleRequest, srv DeviceRoleService_SubscribeServer) error {
	return status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}

func RegisterDeviceRoleServiceServer(s *grpc.Server, srv DeviceRoleServiceServer) {
	s.RegisterService(&_DeviceRoleService_serviceDesc, srv)
}

func _DeviceRoleService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeviceRoleChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DeviceRoleServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/admin.DeviceRoleService/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DeviceRoleServiceServer).Set(ctx, req.(*DeviceRoleChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DeviceRoleService_Get_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceRoleRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceRoleServiceServer).Get(m, &deviceRoleServiceGetServer{stream})
}

type DeviceRoleService_GetServer interface {
	Send(*DeviceRoleConfig) error
	grpc.ServerStream
}

type deviceRoleServiceGetServer struct {
	grpc.ServerStream
}

func (x *deviceRoleServiceGetServer) Send(m *DeviceRoleConfig) error {
	return x.ServerStream.SendMsg(m)
}

func _DeviceRoleService_Subscribe_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DeviceRoleRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DeviceRoleServiceServer).Subscribe(m, &deviceRoleServiceSubscribeServer{stream})
}

type DeviceRoleService_SubscribeServer interface {
	Send(*DeviceRoleChange) error
	grpc.ServerStream
}

type deviceRoleServiceSubscribeServer struct {
	grpc.ServerStream
}

func (x *deviceRoleServiceSubscribeServer) Send(m *DeviceRoleChange) error {
	return x.ServerStream.SendMsg(m)
}

var _DeviceRoleService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "admin.DeviceRoleService",
	HandlerType: (*DeviceRoleServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Set",
			Handler:    _DeviceRoleService_Set_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Get",
			Handler:       _DeviceRoleService_Get_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Subscribe",
			Handler:       _DeviceRoleService_Subscribe_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "onos/onos-ztp/admin/roles.proto",
}

func (m *DeviceRoleConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceRoleConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceRoleConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Pipeline != nil {
		{
			size, err := m.Pipeline.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRoles(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRoles(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Role) > 0 {
		i -= len(m.Role)
		copy(dAtA[i:], m.Role)
		i = encodeVarintRoles(dAtA, i, uint64(len(m.Role)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeviceConfig) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceConfig) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceConfig) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Properties) > 0 {
		for iNdEx := len(m.Properties) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Properties[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintRoles(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.SoftwareVersion) > 0 {
		i -= len(m.SoftwareVersion)
		copy(dAtA[i:], m.SoftwareVersion)
		i = encodeVarintRoles(dAtA, i, uint64(len(m.SoftwareVersion)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeviceProperty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceProperty) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceProperty) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = encodeVarintRoles(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintRoles(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Path) > 0 {
		i -= len(m.Path)
		copy(dAtA[i:], m.Path)
		i = encodeVarintRoles(dAtA, i, uint64(len(m.Path)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DevicePipeline) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DevicePipeline) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DevicePipeline) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Driver) > 0 {
		i -= len(m.Driver)
		copy(dAtA[i:], m.Driver)
		i = encodeVarintRoles(dAtA, i, uint64(len(m.Driver)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Pipeconf) > 0 {
		i -= len(m.Pipeconf)
		copy(dAtA[i:], m.Pipeconf)
		i = encodeVarintRoles(dAtA, i, uint64(len(m.Pipeconf)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DeviceRoleChange) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceRoleChange) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceRoleChange) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRoles(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Change != 0 {
		i = encodeVarintRoles(dAtA, i, uint64(m.Change))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeviceRoleChangeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceRoleChangeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceRoleChangeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Config != nil {
		{
			size, err := m.Config.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRoles(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Change != 0 {
		i = encodeVarintRoles(dAtA, i, uint64(m.Change))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *DeviceRoleChangeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceRoleChangeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceRoleChangeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Change != nil {
		{
			size, err := m.Change.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintRoles(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *DeviceRoleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeviceRoleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DeviceRoleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Role) > 0 {
		i -= len(m.Role)
		copy(dAtA[i:], m.Role)
		i = encodeVarintRoles(dAtA, i, uint64(len(m.Role)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintRoles(dAtA []byte, offset int, v uint64) int {
	offset -= sovRoles(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *DeviceRoleConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Role)
	if l > 0 {
		n += 1 + l + sovRoles(uint64(l))
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovRoles(uint64(l))
	}
	if m.Pipeline != nil {
		l = m.Pipeline.Size()
		n += 1 + l + sovRoles(uint64(l))
	}
	return n
}

func (m *DeviceConfig) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.SoftwareVersion)
	if l > 0 {
		n += 1 + l + sovRoles(uint64(l))
	}
	if len(m.Properties) > 0 {
		for _, e := range m.Properties {
			l = e.Size()
			n += 1 + l + sovRoles(uint64(l))
		}
	}
	return n
}

func (m *DeviceProperty) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Path)
	if l > 0 {
		n += 1 + l + sovRoles(uint64(l))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovRoles(uint64(l))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + sovRoles(uint64(l))
	}
	return n
}

func (m *DevicePipeline) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Pipeconf)
	if l > 0 {
		n += 1 + l + sovRoles(uint64(l))
	}
	l = len(m.Driver)
	if l > 0 {
		n += 1 + l + sovRoles(uint64(l))
	}
	return n
}

func (m *DeviceRoleChange) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Change != 0 {
		n += 1 + sovRoles(uint64(m.Change))
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovRoles(uint64(l))
	}
	return n
}

func (m *DeviceRoleChangeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Change != 0 {
		n += 1 + sovRoles(uint64(m.Change))
	}
	if m.Config != nil {
		l = m.Config.Size()
		n += 1 + l + sovRoles(uint64(l))
	}
	return n
}

func (m *DeviceRoleChangeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Change != nil {
		l = m.Change.Size()
		n += 1 + l + sovRoles(uint64(l))
	}
	return n
}

func (m *DeviceRoleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Role)
	if l > 0 {
		n += 1 + l + sovRoles(uint64(l))
	}
	return n
}

func sovRoles(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozRoles(x uint64) (n int) {
	return sovRoles(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *DeviceRoleConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoles
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceRoleConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceRoleConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoles
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRoles
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Role = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoles
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoles
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &DeviceConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pipeline", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoles
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoles
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pipeline == nil {
				m.Pipeline = &DevicePipeline{}
			}
			if err := m.Pipeline.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoles(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoles
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRoles
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceConfig) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoles
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceConfig: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceConfig: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoftwareVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoles
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRoles
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SoftwareVersion = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Properties", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoles
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoles
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Properties = append(m.Properties, &DeviceProperty{})
			if err := m.Properties[len(m.Properties)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoles(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoles
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRoles
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceProperty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoles
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceProperty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceProperty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Path", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoles
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRoles
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Path = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoles
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRoles
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoles
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRoles
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoles(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoles
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRoles
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DevicePipeline) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoles
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DevicePipeline: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DevicePipeline: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pipeconf", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoles
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRoles
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pipeconf = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Driver", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoles
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRoles
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Driver = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoles(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoles
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRoles
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceRoleChange) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoles
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceRoleChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceRoleChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Change", wireType)
			}
			m.Change = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Change |= DeviceRoleChange_ChangeType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoles
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoles
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &DeviceRoleConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoles(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoles
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRoles
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceRoleChangeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoles
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceRoleChangeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceRoleChangeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Change", wireType)
			}
			m.Change = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Change |= DeviceRoleChangeRequest_ChangeType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Config", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoles
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoles
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Config == nil {
				m.Config = &DeviceRoleConfig{}
			}
			if err := m.Config.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoles(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoles
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRoles
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceRoleChangeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoles
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceRoleChangeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceRoleChangeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Change", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthRoles
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthRoles
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Change == nil {
				m.Change = &DeviceRoleChange{}
			}
			if err := m.Change.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoles(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoles
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRoles
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeviceRoleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowRoles
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeviceRoleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeviceRoleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Role", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowRoles
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthRoles
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthRoles
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Role = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipRoles(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthRoles
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthRoles
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipRoles(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowRoles
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoles
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowRoles
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthRoles
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupRoles
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthRoles
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthRoles        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowRoles          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupRoles = fmt.Errorf("proto: unexpected end of group")
)
