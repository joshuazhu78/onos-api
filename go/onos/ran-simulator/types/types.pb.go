// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: onos/ran-simulator/types/types.proto

package types

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Pathloss model type
type PathlossModelType int32

const (
	PathlossModelType_DEFAULT    PathlossModelType = 0
	PathlossModelType_GPPUMALOS  PathlossModelType = 1
	PathlossModelType_GPPUMANLOS PathlossModelType = 2
	PathlossModelType_GPPINHLOS  PathlossModelType = 3
	PathlossModelType_GPPINHNLOS PathlossModelType = 4
	PathlossModelType_GPPUMILOS  PathlossModelType = 5
	PathlossModelType_GPPUMINLOS PathlossModelType = 6
	PathlossModelType_GPPUMA     PathlossModelType = 7
	PathlossModelType_GPPINH     PathlossModelType = 8
	PathlossModelType_GPPUMI     PathlossModelType = 9
)

var PathlossModelType_name = map[int32]string{
	0: "DEFAULT",
	1: "GPPUMALOS",
	2: "GPPUMANLOS",
	3: "GPPINHLOS",
	4: "GPPINHNLOS",
	5: "GPPUMILOS",
	6: "GPPUMINLOS",
	7: "GPPUMA",
	8: "GPPINH",
	9: "GPPUMI",
}

var PathlossModelType_value = map[string]int32{
	"DEFAULT":    0,
	"GPPUMALOS":  1,
	"GPPUMANLOS": 2,
	"GPPINHLOS":  3,
	"GPPINHNLOS": 4,
	"GPPUMILOS":  5,
	"GPPUMINLOS": 6,
	"GPPUMA":     7,
	"GPPINH":     8,
	"GPPUMI":     9,
}

func (x PathlossModelType) String() string {
	return proto.EnumName(PathlossModelType_name, int32(x))
}

func (PathlossModelType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a8584458938851ce, []int{0}
}

type Point struct {
	Lat float64 `protobuf:"fixed64,1,opt,name=lat,proto3" json:"lat,omitempty"`
	Lng float64 `protobuf:"fixed64,2,opt,name=lng,proto3" json:"lng,omitempty"`
}

func (m *Point) Reset()         { *m = Point{} }
func (m *Point) String() string { return proto.CompactTextString(m) }
func (*Point) ProtoMessage()    {}
func (*Point) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8584458938851ce, []int{0}
}
func (m *Point) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Point) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Point.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Point) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Point.Merge(m, src)
}
func (m *Point) XXX_Size() int {
	return m.Size()
}
func (m *Point) XXX_DiscardUnknown() {
	xxx_messageInfo_Point.DiscardUnknown(m)
}

var xxx_messageInfo_Point proto.InternalMessageInfo

func (m *Point) GetLat() float64 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *Point) GetLng() float64 {
	if m != nil {
		return m.Lng
	}
	return 0
}

type Sector struct {
	Azimuth  int32  `protobuf:"varint,1,opt,name=azimuth,proto3" json:"azimuth,omitempty"`
	Arc      int32  `protobuf:"varint,2,opt,name=arc,proto3" json:"arc,omitempty"`
	Centroid *Point `protobuf:"bytes,3,opt,name=centroid,proto3" json:"centroid,omitempty"`
}

func (m *Sector) Reset()         { *m = Sector{} }
func (m *Sector) String() string { return proto.CompactTextString(m) }
func (*Sector) ProtoMessage()    {}
func (*Sector) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8584458938851ce, []int{1}
}
func (m *Sector) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Sector) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Sector.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Sector) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Sector.Merge(m, src)
}
func (m *Sector) XXX_Size() int {
	return m.Size()
}
func (m *Sector) XXX_DiscardUnknown() {
	xxx_messageInfo_Sector.DiscardUnknown(m)
}

var xxx_messageInfo_Sector proto.InternalMessageInfo

func (m *Sector) GetAzimuth() int32 {
	if m != nil {
		return m.Azimuth
	}
	return 0
}

func (m *Sector) GetArc() int32 {
	if m != nil {
		return m.Arc
	}
	return 0
}

func (m *Sector) GetCentroid() *Point {
	if m != nil {
		return m.Centroid
	}
	return nil
}

type Route struct {
	RouteID   Imsi     `protobuf:"varint,1,opt,name=name,proto3,casttype=Imsi" json:"name,omitempty"`
	Waypoints []*Point `protobuf:"bytes,2,rep,name=waypoints,proto3" json:"waypoints,omitempty"`
	Color     string   `protobuf:"bytes,3,opt,name=color,proto3" json:"color,omitempty"`
}

func (m *Route) Reset()         { *m = Route{} }
func (m *Route) String() string { return proto.CompactTextString(m) }
func (*Route) ProtoMessage()    {}
func (*Route) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8584458938851ce, []int{2}
}
func (m *Route) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Route) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Route.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Route) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Route.Merge(m, src)
}
func (m *Route) XXX_Size() int {
	return m.Size()
}
func (m *Route) XXX_DiscardUnknown() {
	xxx_messageInfo_Route.DiscardUnknown(m)
}

var xxx_messageInfo_Route proto.InternalMessageInfo

func (m *Route) GetRouteID() Imsi {
	if m != nil {
		return m.RouteID
	}
	return 0
}

func (m *Route) GetWaypoints() []*Point {
	if m != nil {
		return m.Waypoints
	}
	return nil
}

func (m *Route) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

type Ue struct {
	Imsi                 Imsi       `protobuf:"varint,1,opt,name=imsi,proto3,casttype=Imsi" json:"imsi,omitempty"`
	Type                 string     `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Position             *Point     `protobuf:"bytes,4,opt,name=position,proto3" json:"position,omitempty"`
	Rotation             uint32     `protobuf:"varint,5,opt,name=rotation,proto3" json:"rotation,omitempty"`
	ServingTower         *ECGI      `protobuf:"bytes,7,opt,name=serving_tower,json=servingTower,proto3" json:"serving_tower,omitempty"`
	ServingTowerStrength float64    `protobuf:"fixed64,8,opt,name=serving_tower_strength,json=servingTowerStrength,proto3" json:"serving_tower_strength,omitempty"`
	Tower1               *ECGI      `protobuf:"bytes,9,opt,name=tower1,proto3" json:"tower1,omitempty"`
	Tower1Strength       float64    `protobuf:"fixed64,10,opt,name=tower1_strength,json=tower1Strength,proto3" json:"tower1_strength,omitempty"`
	Tower2               *ECGI      `protobuf:"bytes,11,opt,name=tower2,proto3" json:"tower2,omitempty"`
	Tower2Strength       float64    `protobuf:"fixed64,12,opt,name=tower2_strength,json=tower2Strength,proto3" json:"tower2_strength,omitempty"`
	Tower3               *ECGI      `protobuf:"bytes,13,opt,name=tower3,proto3" json:"tower3,omitempty"`
	Tower3Strength       float64    `protobuf:"fixed64,14,opt,name=tower3_strength,json=tower3Strength,proto3" json:"tower3_strength,omitempty"`
	Crnti                Crnti      `protobuf:"bytes,15,opt,name=crnti,proto3,casttype=Crnti" json:"crnti,omitempty"`
	Admitted             bool       `protobuf:"varint,16,opt,name=admitted,proto3" json:"admitted,omitempty"`
	Metrics              *UeMetrics `protobuf:"bytes,17,opt,name=metrics,proto3" json:"metrics,omitempty"`
}

func (m *Ue) Reset()         { *m = Ue{} }
func (m *Ue) String() string { return proto.CompactTextString(m) }
func (*Ue) ProtoMessage()    {}
func (*Ue) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8584458938851ce, []int{3}
}
func (m *Ue) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Ue) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Ue.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Ue) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ue.Merge(m, src)
}
func (m *Ue) XXX_Size() int {
	return m.Size()
}
func (m *Ue) XXX_DiscardUnknown() {
	xxx_messageInfo_Ue.DiscardUnknown(m)
}

var xxx_messageInfo_Ue proto.InternalMessageInfo

func (m *Ue) GetImsi() Imsi {
	if m != nil {
		return m.Imsi
	}
	return 0
}

func (m *Ue) GetType() string {
	if m != nil {
		return m.Type
	}
	return ""
}

func (m *Ue) GetPosition() *Point {
	if m != nil {
		return m.Position
	}
	return nil
}

func (m *Ue) GetRotation() uint32 {
	if m != nil {
		return m.Rotation
	}
	return 0
}

func (m *Ue) GetServingTower() *ECGI {
	if m != nil {
		return m.ServingTower
	}
	return nil
}

func (m *Ue) GetServingTowerStrength() float64 {
	if m != nil {
		return m.ServingTowerStrength
	}
	return 0
}

func (m *Ue) GetTower1() *ECGI {
	if m != nil {
		return m.Tower1
	}
	return nil
}

func (m *Ue) GetTower1Strength() float64 {
	if m != nil {
		return m.Tower1Strength
	}
	return 0
}

func (m *Ue) GetTower2() *ECGI {
	if m != nil {
		return m.Tower2
	}
	return nil
}

func (m *Ue) GetTower2Strength() float64 {
	if m != nil {
		return m.Tower2Strength
	}
	return 0
}

func (m *Ue) GetTower3() *ECGI {
	if m != nil {
		return m.Tower3
	}
	return nil
}

func (m *Ue) GetTower3Strength() float64 {
	if m != nil {
		return m.Tower3Strength
	}
	return 0
}

func (m *Ue) GetCrnti() Crnti {
	if m != nil {
		return m.Crnti
	}
	return ""
}

func (m *Ue) GetAdmitted() bool {
	if m != nil {
		return m.Admitted
	}
	return false
}

func (m *Ue) GetMetrics() *UeMetrics {
	if m != nil {
		return m.Metrics
	}
	return nil
}

type UeMetrics struct {
	// Latency (in nanoseconds) of the most recent hand-over
	HoLatency int64 `protobuf:"varint,1,opt,name=ho_latency,json=hoLatency,proto3" json:"ho_latency,omitempty"`
	// Handover report timestamp (in nanoseconds since epoch)
	HoReportTimestamp int64 `protobuf:"varint,2,opt,name=ho_report_timestamp,json=hoReportTimestamp,proto3" json:"ho_report_timestamp,omitempty"`
	// flag to indicate the first measurement
	IsFirst bool `protobuf:"varint,3,opt,name=isFirst,proto3" json:"isFirst,omitempty"`
	// DL serving cell SINR in dB
	ServingSinrDl float32 `protobuf:"fixed32,4,opt,name=serving_sinr_dl,json=servingSinrDl,proto3" json:"serving_sinr_dl,omitempty"`
	// DL PDCP throughput
	PdcpThroughputDl float32 `protobuf:"fixed32,5,opt,name=pdcp_throughput_dl,json=pdcpThroughputDl,proto3" json:"pdcp_throughput_dl,omitempty"`
	// UL serving cell SINR in dB
	ServingSinrUl float32 `protobuf:"fixed32,6,opt,name=serving_sinr_ul,json=servingSinrUl,proto3" json:"serving_sinr_ul,omitempty"`
	// UL PDCP throughput
	PdcpThroughputUl float32 `protobuf:"fixed32,7,opt,name=pdcp_throughput_ul,json=pdcpThroughputUl,proto3" json:"pdcp_throughput_ul,omitempty"`
}

func (m *UeMetrics) Reset()         { *m = UeMetrics{} }
func (m *UeMetrics) String() string { return proto.CompactTextString(m) }
func (*UeMetrics) ProtoMessage()    {}
func (*UeMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8584458938851ce, []int{4}
}
func (m *UeMetrics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *UeMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_UeMetrics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *UeMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UeMetrics.Merge(m, src)
}
func (m *UeMetrics) XXX_Size() int {
	return m.Size()
}
func (m *UeMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_UeMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_UeMetrics proto.InternalMessageInfo

func (m *UeMetrics) GetHoLatency() int64 {
	if m != nil {
		return m.HoLatency
	}
	return 0
}

func (m *UeMetrics) GetHoReportTimestamp() int64 {
	if m != nil {
		return m.HoReportTimestamp
	}
	return 0
}

func (m *UeMetrics) GetIsFirst() bool {
	if m != nil {
		return m.IsFirst
	}
	return false
}

func (m *UeMetrics) GetServingSinrDl() float32 {
	if m != nil {
		return m.ServingSinrDl
	}
	return 0
}

func (m *UeMetrics) GetPdcpThroughputDl() float32 {
	if m != nil {
		return m.PdcpThroughputDl
	}
	return 0
}

func (m *UeMetrics) GetServingSinrUl() float32 {
	if m != nil {
		return m.ServingSinrUl
	}
	return 0
}

func (m *UeMetrics) GetPdcpThroughputUl() float32 {
	if m != nil {
		return m.PdcpThroughputUl
	}
	return 0
}

// station's unique ID
type ECGI struct {
	EcID   EcID   `protobuf:"bytes,1,opt,name=ecID,proto3,casttype=EcID" json:"ecID,omitempty"`
	PlmnID PlmnID `protobuf:"bytes,2,opt,name=plmnID,proto3,casttype=PlmnID" json:"plmnID,omitempty"`
}

func (m *ECGI) Reset()         { *m = ECGI{} }
func (m *ECGI) String() string { return proto.CompactTextString(m) }
func (*ECGI) ProtoMessage()    {}
func (*ECGI) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8584458938851ce, []int{5}
}
func (m *ECGI) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ECGI) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ECGI.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ECGI) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ECGI.Merge(m, src)
}
func (m *ECGI) XXX_Size() int {
	return m.Size()
}
func (m *ECGI) XXX_DiscardUnknown() {
	xxx_messageInfo_ECGI.DiscardUnknown(m)
}

var xxx_messageInfo_ECGI proto.InternalMessageInfo

func (m *ECGI) GetEcID() EcID {
	if m != nil {
		return m.EcID
	}
	return ""
}

func (m *ECGI) GetPlmnID() PlmnID {
	if m != nil {
		return m.PlmnID
	}
	return ""
}

type Cell struct {
	Ecgi      *ECGI   `protobuf:"bytes,1,opt,name=ecgi,proto3" json:"ecgi,omitempty"`
	Location  *Point  `protobuf:"bytes,3,opt,name=location,proto3" json:"location,omitempty"`
	Sector    *Sector `protobuf:"bytes,4,opt,name=sector,proto3" json:"sector,omitempty"`
	Color     string  `protobuf:"bytes,5,opt,name=color,proto3" json:"color,omitempty"`
	MaxUEs    uint32  `protobuf:"varint,6,opt,name=maxUEs,proto3" json:"maxUEs,omitempty"`
	Neighbors []*ECGI `protobuf:"bytes,7,rep,name=neighbors,proto3" json:"neighbors,omitempty"`
	// The cell transmit power in decibels
	TxPowerdB float64 `protobuf:"fixed64,8,opt,name=txPowerdB,proto3" json:"txPowerdB,omitempty"`
	// crntis maps a ue's name to its crnti
	CrntiMap    map[Crnti]Imsi `protobuf:"bytes,9,rep,name=crntiMap,proto3,castkey=Crnti,castvalue=Imsi" json:"crntiMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`
	CrntiIndex  uint32         `protobuf:"varint,10,opt,name=crntiIndex,proto3" json:"crntiIndex,omitempty"`
	Port        uint32         `protobuf:"varint,11,opt,name=port,proto3" json:"port,omitempty"`
	Metrics     *CellMetrics   `protobuf:"bytes,12,opt,name=metrics,proto3" json:"metrics,omitempty"`
	Height      float64        `protobuf:"fixed64,13,opt,name=height,proto3" json:"height,omitempty"`
	Frequency   float64        `protobuf:"fixed64,14,opt,name=frequency,proto3" json:"frequency,omitempty"`
	Thetadegree float64        `protobuf:"fixed64,15,opt,name=thetadegree,proto3" json:"thetadegree,omitempty"`
	Pci         uint32         `protobuf:"varint,16,opt,name=pci,proto3" json:"pci,omitempty"`
	// address is the host:port of the topo.device
	Address string `protobuf:"bytes,17,opt,name=address,proto3" json:"address,omitempty"`
	// e2taddress is the host:port of ric platform
	E2Taddress string `protobuf:"bytes,18,opt,name=e2taddress,proto3" json:"e2taddress,omitempty"`
}

func (m *Cell) Reset()         { *m = Cell{} }
func (m *Cell) String() string { return proto.CompactTextString(m) }
func (*Cell) ProtoMessage()    {}
func (*Cell) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8584458938851ce, []int{6}
}
func (m *Cell) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Cell) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Cell.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Cell) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Cell.Merge(m, src)
}
func (m *Cell) XXX_Size() int {
	return m.Size()
}
func (m *Cell) XXX_DiscardUnknown() {
	xxx_messageInfo_Cell.DiscardUnknown(m)
}

var xxx_messageInfo_Cell proto.InternalMessageInfo

func (m *Cell) GetEcgi() *ECGI {
	if m != nil {
		return m.Ecgi
	}
	return nil
}

func (m *Cell) GetLocation() *Point {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Cell) GetSector() *Sector {
	if m != nil {
		return m.Sector
	}
	return nil
}

func (m *Cell) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

func (m *Cell) GetMaxUEs() uint32 {
	if m != nil {
		return m.MaxUEs
	}
	return 0
}

func (m *Cell) GetNeighbors() []*ECGI {
	if m != nil {
		return m.Neighbors
	}
	return nil
}

func (m *Cell) GetTxPowerdB() float64 {
	if m != nil {
		return m.TxPowerdB
	}
	return 0
}

func (m *Cell) GetCrntiMap() map[Crnti]Imsi {
	if m != nil {
		return m.CrntiMap
	}
	return nil
}

func (m *Cell) GetCrntiIndex() uint32 {
	if m != nil {
		return m.CrntiIndex
	}
	return 0
}

func (m *Cell) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *Cell) GetMetrics() *CellMetrics {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *Cell) GetHeight() float64 {
	if m != nil {
		return m.Height
	}
	return 0
}

func (m *Cell) GetFrequency() float64 {
	if m != nil {
		return m.Frequency
	}
	return 0
}

func (m *Cell) GetThetadegree() float64 {
	if m != nil {
		return m.Thetadegree
	}
	return 0
}

func (m *Cell) GetPci() uint32 {
	if m != nil {
		return m.Pci
	}
	return 0
}

func (m *Cell) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Cell) GetE2Taddress() string {
	if m != nil {
		return m.E2Taddress
	}
	return ""
}

type CellMetrics struct {
	// Instant cell spectrum efficiency in bps/Hz
	InstSpecEffi float32 `protobuf:"fixed32,1,opt,name=instSpecEffi,proto3" json:"instSpecEffi,omitempty"`
}

func (m *CellMetrics) Reset()         { *m = CellMetrics{} }
func (m *CellMetrics) String() string { return proto.CompactTextString(m) }
func (*CellMetrics) ProtoMessage()    {}
func (*CellMetrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8584458938851ce, []int{7}
}
func (m *CellMetrics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CellMetrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CellMetrics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CellMetrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CellMetrics.Merge(m, src)
}
func (m *CellMetrics) XXX_Size() int {
	return m.Size()
}
func (m *CellMetrics) XXX_DiscardUnknown() {
	xxx_messageInfo_CellMetrics.DiscardUnknown(m)
}

var xxx_messageInfo_CellMetrics proto.InternalMessageInfo

func (m *CellMetrics) GetInstSpecEffi() float32 {
	if m != nil {
		return m.InstSpecEffi
	}
	return 0
}

type MapLayout struct {
	// Map center latitude and longitude
	Center *Point `protobuf:"bytes,1,opt,name=center,proto3" json:"center,omitempty"`
	// The starting Zoom level
	Zoom float32 `protobuf:"fixed32,2,opt,name=zoom,proto3" json:"zoom,omitempty"`
	// Show map as faded on start
	Fade bool `protobuf:"varint,3,opt,name=fade,proto3" json:"fade,omitempty"`
	// Show routes on start
	ShowRoutes bool `protobuf:"varint,4,opt,name=showRoutes,proto3" json:"showRoutes,omitempty"`
	// Show power as circle on start
	ShowPower bool `protobuf:"varint,5,opt,name=showPower,proto3" json:"showPower,omitempty"`
	// Max number of UEs for complete simulation
	MinUes uint32 `protobuf:"varint,6,opt,name=min_ues,json=minUes,proto3" json:"min_ues,omitempty"`
	// Max number of UEs for complete simulation
	MaxUes uint32 `protobuf:"varint,7,opt,name=max_ues,json=maxUes,proto3" json:"max_ues,omitempty"`
	// the current number of routes
	CurrentRoutes uint32 `protobuf:"varint,8,opt,name=current_routes,json=currentRoutes,proto3" json:"current_routes,omitempty"`
	// Ratio of random locations diameter to tower grid width
	LocationsScale float32 `protobuf:"fixed32,9,opt,name=locationsScale,proto3" json:"locationsScale,omitempty"`
	// Pathloss model type
	PathlossModel PathlossModelType `protobuf:"varint,10,opt,name=pathlossModel,proto3,enum=ran.trafficsim.types.PathlossModelType" json:"pathlossModel,omitempty"`
	// mean UE move speed in km/h
	MeanUeSpeed float32 `protobuf:"fixed32,11,opt,name=meanUeSpeed,proto3" json:"meanUeSpeed,omitempty"`
}

func (m *MapLayout) Reset()         { *m = MapLayout{} }
func (m *MapLayout) String() string { return proto.CompactTextString(m) }
func (*MapLayout) ProtoMessage()    {}
func (*MapLayout) Descriptor() ([]byte, []int) {
	return fileDescriptor_a8584458938851ce, []int{8}
}
func (m *MapLayout) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MapLayout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MapLayout.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MapLayout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MapLayout.Merge(m, src)
}
func (m *MapLayout) XXX_Size() int {
	return m.Size()
}
func (m *MapLayout) XXX_DiscardUnknown() {
	xxx_messageInfo_MapLayout.DiscardUnknown(m)
}

var xxx_messageInfo_MapLayout proto.InternalMessageInfo

func (m *MapLayout) GetCenter() *Point {
	if m != nil {
		return m.Center
	}
	return nil
}

func (m *MapLayout) GetZoom() float32 {
	if m != nil {
		return m.Zoom
	}
	return 0
}

func (m *MapLayout) GetFade() bool {
	if m != nil {
		return m.Fade
	}
	return false
}

func (m *MapLayout) GetShowRoutes() bool {
	if m != nil {
		return m.ShowRoutes
	}
	return false
}

func (m *MapLayout) GetShowPower() bool {
	if m != nil {
		return m.ShowPower
	}
	return false
}

func (m *MapLayout) GetMinUes() uint32 {
	if m != nil {
		return m.MinUes
	}
	return 0
}

func (m *MapLayout) GetMaxUes() uint32 {
	if m != nil {
		return m.MaxUes
	}
	return 0
}

func (m *MapLayout) GetCurrentRoutes() uint32 {
	if m != nil {
		return m.CurrentRoutes
	}
	return 0
}

func (m *MapLayout) GetLocationsScale() float32 {
	if m != nil {
		return m.LocationsScale
	}
	return 0
}

func (m *MapLayout) GetPathlossModel() PathlossModelType {
	if m != nil {
		return m.PathlossModel
	}
	return PathlossModelType_DEFAULT
}

func (m *MapLayout) GetMeanUeSpeed() float32 {
	if m != nil {
		return m.MeanUeSpeed
	}
	return 0
}

func init() {
	proto.RegisterEnum("ran.trafficsim.types.PathlossModelType", PathlossModelType_name, PathlossModelType_value)
	proto.RegisterType((*Point)(nil), "ran.trafficsim.types.Point")
	proto.RegisterType((*Sector)(nil), "ran.trafficsim.types.Sector")
	proto.RegisterType((*Route)(nil), "ran.trafficsim.types.Route")
	proto.RegisterType((*Ue)(nil), "ran.trafficsim.types.Ue")
	proto.RegisterType((*UeMetrics)(nil), "ran.trafficsim.types.UeMetrics")
	proto.RegisterType((*ECGI)(nil), "ran.trafficsim.types.ECGI")
	proto.RegisterType((*Cell)(nil), "ran.trafficsim.types.Cell")
	proto.RegisterMapType((map[Crnti]Imsi)(nil), "ran.trafficsim.types.Cell.CrntiMapEntry")
	proto.RegisterType((*CellMetrics)(nil), "ran.trafficsim.types.CellMetrics")
	proto.RegisterType((*MapLayout)(nil), "ran.trafficsim.types.MapLayout")
}

func init() {
	proto.RegisterFile("onos/ran-simulator/types/types.proto", fileDescriptor_a8584458938851ce)
}

var fileDescriptor_a8584458938851ce = []byte{
	// 1273 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x56, 0x4d, 0x6f, 0xdb, 0x46,
	0x13, 0x36, 0x25, 0x51, 0x12, 0xc7, 0x96, 0x23, 0x6f, 0x8c, 0xbc, 0x84, 0xdf, 0x54, 0x76, 0x85,
	0x34, 0x31, 0xda, 0x54, 0x41, 0xe4, 0x00, 0x4d, 0x9a, 0x43, 0x11, 0x7f, 0x24, 0x11, 0x60, 0xbb,
	0xc6, 0xca, 0x42, 0x81, 0x5e, 0x04, 0x86, 0x5c, 0x8b, 0x44, 0x49, 0x2e, 0xbb, 0xbb, 0x4a, 0xec,
	0xdc, 0xda, 0x63, 0x4f, 0x3d, 0xf6, 0xd8, 0xf6, 0xd7, 0xf4, 0x98, 0x53, 0xd1, 0x93, 0x53, 0x28,
	0xff, 0x22, 0xa7, 0x62, 0x87, 0x14, 0x29, 0xc7, 0x4e, 0xe2, 0x8b, 0x3d, 0x1f, 0xcf, 0x3e, 0xbb,
	0xb3, 0x3b, 0xf3, 0x50, 0x70, 0x83, 0xc7, 0x5c, 0xde, 0x11, 0x4e, 0xfc, 0xa5, 0x0c, 0xa2, 0x71,
	0xe8, 0x28, 0x2e, 0xee, 0xa8, 0x93, 0x84, 0xc9, 0xf4, 0x6f, 0x27, 0x11, 0x5c, 0x71, 0xb2, 0x2c,
	0x9c, 0xb8, 0xa3, 0x84, 0x73, 0x74, 0x14, 0xb8, 0x32, 0x88, 0x3a, 0x98, 0x5b, 0x59, 0x1e, 0xf1,
	0x11, 0x47, 0xc0, 0x1d, 0x6d, 0xa5, 0xd8, 0xf6, 0x17, 0x60, 0x1e, 0xf0, 0x20, 0x56, 0xa4, 0x09,
	0xe5, 0xd0, 0x51, 0xb6, 0xb1, 0x66, 0xac, 0x1b, 0x54, 0x9b, 0x18, 0x89, 0x47, 0x76, 0x29, 0x8b,
	0xc4, 0xa3, 0x76, 0x04, 0xd5, 0x3e, 0x73, 0x15, 0x17, 0xc4, 0x86, 0x9a, 0xf3, 0x32, 0x88, 0xc6,
	0xca, 0xc7, 0x15, 0x26, 0x9d, 0xba, 0x7a, 0x95, 0x23, 0x5c, 0x5c, 0x65, 0x52, 0x6d, 0x92, 0xaf,
	0xa0, 0xee, 0xb2, 0x58, 0x09, 0x1e, 0x78, 0x76, 0x79, 0xcd, 0x58, 0x9f, 0xef, 0xfe, 0xbf, 0x73,
	0xd1, 0x09, 0x3b, 0x78, 0x10, 0x9a, 0x83, 0xdb, 0x3f, 0x19, 0x60, 0x52, 0x3e, 0x56, 0x8c, 0xdc,
	0x82, 0x4a, 0xec, 0x44, 0x0c, 0xf7, 0xaa, 0x6c, 0x5e, 0x9d, 0x9c, 0xae, 0xd6, 0x30, 0xd1, 0xdb,
	0x7e, 0x7b, 0xba, 0x5a, 0xe9, 0x45, 0x32, 0xa0, 0x08, 0x20, 0x0f, 0xc0, 0x7a, 0xe1, 0x9c, 0x24,
	0x9a, 0x48, 0xda, 0xa5, 0xb5, 0xf2, 0xc7, 0x36, 0x2b, 0xd0, 0x64, 0x19, 0x4c, 0x97, 0x87, 0x5c,
	0xe0, 0x19, 0x2d, 0x9a, 0x3a, 0xed, 0x3f, 0x4d, 0x28, 0x0d, 0x18, 0xb9, 0x01, 0x95, 0x20, 0x92,
	0x41, 0x76, 0x80, 0xe6, 0x24, 0xdb, 0xb5, 0xd8, 0x5d, 0x67, 0x09, 0x81, 0x8a, 0x26, 0xc7, 0xe2,
	0x2d, 0x8a, 0xb6, 0xae, 0x3e, 0xe1, 0x32, 0x50, 0x01, 0x8f, 0xed, 0xca, 0x25, 0xaa, 0x9f, 0x82,
	0xc9, 0x0a, 0xd4, 0x05, 0x57, 0x0e, 0x2e, 0x34, 0xd7, 0x8c, 0xf5, 0x06, 0xcd, 0x7d, 0xf2, 0x0d,
	0x34, 0x24, 0x13, 0xcf, 0x83, 0x78, 0x34, 0x54, 0xfc, 0x05, 0x13, 0x76, 0x0d, 0x99, 0x57, 0x2e,
	0x66, 0xde, 0xd9, 0x7a, 0xd2, 0xa3, 0x0b, 0xd9, 0x82, 0x43, 0x8d, 0x27, 0xf7, 0xe0, 0xda, 0x19,
	0x82, 0xa1, 0x54, 0x82, 0xc5, 0x23, 0xe5, 0xdb, 0x75, 0x7c, 0xee, 0xe5, 0x59, 0x74, 0x3f, 0xcb,
	0x91, 0x2e, 0x54, 0x11, 0x7d, 0xd7, 0xb6, 0x3e, 0xba, 0x5f, 0x86, 0x24, 0xb7, 0xe0, 0x4a, 0x6a,
	0x15, 0x5b, 0x00, 0x6e, 0xb1, 0x98, 0x86, 0xcf, 0x91, 0x77, 0xed, 0xf9, 0x4b, 0x92, 0x77, 0x73,
	0xf2, 0x6e, 0x41, 0xbe, 0x30, 0x43, 0xde, 0x3d, 0x47, 0xbe, 0x61, 0x37, 0x2e, 0x49, 0xbe, 0x91,
	0x93, 0x6f, 0x14, 0xe4, 0x8b, 0x33, 0xe4, 0x1b, 0x39, 0xf9, 0x3a, 0x98, 0xae, 0x88, 0x55, 0x60,
	0x5f, 0xd1, 0xef, 0xbe, 0x49, 0x26, 0xa7, 0xab, 0xe6, 0x96, 0x0e, 0xbc, 0x9d, 0x1a, 0x34, 0x05,
	0xe8, 0x37, 0x75, 0xbc, 0x28, 0x50, 0x8a, 0x79, 0x76, 0x73, 0xcd, 0x58, 0xaf, 0xd3, 0xdc, 0x27,
	0x0f, 0xa0, 0x16, 0x31, 0x25, 0x02, 0x57, 0xda, 0x4b, 0x78, 0xc6, 0xd5, 0x8b, 0xcf, 0x38, 0x60,
	0x7b, 0x29, 0x8c, 0x4e, 0xf1, 0xed, 0xdf, 0x4b, 0x60, 0xe5, 0x61, 0xf2, 0x09, 0x80, 0xcf, 0x87,
	0xa1, 0xa3, 0x58, 0xec, 0x9e, 0x60, 0xc7, 0x96, 0xa9, 0xe5, 0xf3, 0xdd, 0x34, 0x40, 0x3a, 0x70,
	0xd5, 0xe7, 0x43, 0xc1, 0x12, 0x2e, 0xd4, 0x50, 0x05, 0x11, 0x93, 0xca, 0x89, 0x12, 0xec, 0xd9,
	0x32, 0x5d, 0xf2, 0x39, 0xc5, 0xcc, 0xe1, 0x34, 0xa1, 0x47, 0x3d, 0x90, 0x8f, 0x03, 0x21, 0x15,
	0x4e, 0x46, 0x9d, 0x4e, 0x5d, 0x72, 0x13, 0xae, 0x4c, 0x9b, 0x48, 0x06, 0xb1, 0x18, 0x7a, 0x21,
	0x76, 0x78, 0x89, 0x4e, 0x9b, 0xb3, 0x1f, 0xc4, 0x62, 0x3b, 0x24, 0xb7, 0x81, 0x24, 0x9e, 0x9b,
	0x0c, 0x95, 0x2f, 0xf8, 0x78, 0xe4, 0x27, 0x63, 0xa5, 0xa1, 0x26, 0x42, 0x9b, 0x3a, 0x73, 0x98,
	0x27, 0xb6, 0xc3, 0x73, 0xac, 0xe3, 0xd0, 0xae, 0x9e, 0x63, 0x1d, 0x5c, 0xc8, 0x3a, 0x0e, 0x71,
	0x10, 0xce, 0xb1, 0x0e, 0xc2, 0xf6, 0xf7, 0x50, 0xd1, 0x8f, 0xab, 0x07, 0x99, 0xb9, 0xbd, 0x6d,
	0xbc, 0x16, 0x2b, 0x1d, 0xe4, 0x1d, 0x37, 0x95, 0x11, 0xfd, 0x9f, 0x62, 0x96, 0xdc, 0x86, 0x6a,
	0x12, 0x46, 0x71, 0x6f, 0x3b, 0x1d, 0xe5, 0xcd, 0xe5, 0xc9, 0xe9, 0x6a, 0xf5, 0x00, 0x23, 0x6f,
	0x73, 0x8b, 0x66, 0x98, 0xf6, 0xdf, 0x26, 0x54, 0xb6, 0x58, 0x18, 0x92, 0x8e, 0x26, 0x1f, 0xa5,
	0x2a, 0xf1, 0xe1, 0x1e, 0x43, 0x9c, 0xd6, 0x86, 0x90, 0xbb, 0xe9, 0x88, 0x5f, 0x46, 0x19, 0xa7,
	0x60, 0x72, 0x0f, 0xaa, 0x12, 0x85, 0x38, 0x93, 0x94, 0xeb, 0x17, 0x2f, 0x4b, 0xc5, 0x9a, 0x66,
	0xd8, 0x42, 0xe1, 0xcc, 0x19, 0x85, 0x23, 0xd7, 0xa0, 0x1a, 0x39, 0xc7, 0x83, 0x1d, 0x89, 0xd7,
	0xdc, 0xa0, 0x99, 0x47, 0xee, 0x83, 0x15, 0xb3, 0x60, 0xe4, 0x3f, 0xe3, 0x42, 0xda, 0x35, 0x94,
	0xd2, 0x0f, 0x55, 0x54, 0x80, 0xc9, 0x75, 0xb0, 0xd4, 0xf1, 0x81, 0x9e, 0x11, 0x6f, 0x33, 0xd3,
	0x93, 0x22, 0x40, 0xbe, 0x83, 0x3a, 0x0e, 0xc3, 0x9e, 0x93, 0xd8, 0x16, 0xd2, 0xae, 0x5f, 0x4c,
	0xab, 0xaf, 0xb4, 0xb3, 0x95, 0x41, 0x77, 0x62, 0x25, 0x4e, 0x36, 0x97, 0x7e, 0x7e, 0x9d, 0x4d,
	0xd4, 0x2f, 0xaf, 0x33, 0xe5, 0xcd, 0xc9, 0x48, 0x0b, 0x00, 0xed, 0x5e, 0xec, 0xb1, 0x63, 0x14,
	0x99, 0x06, 0x9d, 0x89, 0x68, 0x75, 0xd6, 0x9d, 0x8d, 0xf2, 0xd2, 0xa0, 0x68, 0x93, 0x87, 0xc5,
	0xd0, 0x2d, 0xe0, 0x4d, 0x7e, 0xfa, 0xfe, 0xb3, 0xbc, 0x3b, 0x76, 0xfa, 0xe6, 0x7c, 0x5d, 0xb4,
	0x42, 0x51, 0x31, 0x68, 0xe6, 0xe9, 0xfa, 0x8f, 0x04, 0xfb, 0x71, 0x8c, 0xf3, 0x97, 0x4a, 0x46,
	0x11, 0x20, 0x6b, 0x30, 0xaf, 0x7c, 0xa6, 0x1c, 0x8f, 0x8d, 0x04, 0x63, 0xa8, 0x19, 0x06, 0x9d,
	0x0d, 0xe9, 0x4f, 0x68, 0xe2, 0x06, 0x28, 0x10, 0x0d, 0xaa, 0x4d, 0xfc, 0xdc, 0x7a, 0x9e, 0x60,
	0x32, 0xd5, 0x06, 0x8b, 0x4e, 0x5d, 0x5d, 0x34, 0xeb, 0xaa, 0x69, 0x92, 0x60, 0x72, 0x26, 0xb2,
	0xf2, 0x10, 0x1a, 0x67, 0xae, 0x50, 0x93, 0xff, 0xc0, 0x52, 0x59, 0xb0, 0xa8, 0x36, 0x75, 0x5b,
	0x3c, 0x77, 0xc2, 0x71, 0xfa, 0xd9, 0xaa, 0xd0, 0xd4, 0xf9, 0xba, 0x74, 0xdf, 0x68, 0xdf, 0x85,
	0xf9, 0x99, 0xc2, 0x49, 0x1b, 0x16, 0x82, 0x58, 0xaa, 0x7e, 0xc2, 0xdc, 0x9d, 0xa3, 0xa3, 0xb4,
	0xcd, 0x4b, 0xf4, 0x4c, 0xac, 0xfd, 0x5b, 0x19, 0xac, 0x3d, 0x27, 0xd9, 0x75, 0x4e, 0xf8, 0x58,
	0x91, 0x0d, 0xa8, 0xea, 0xaf, 0x39, 0x13, 0xd9, 0x48, 0x7c, 0xb0, 0xbd, 0x33, 0xa8, 0x7e, 0xa7,
	0x97, 0x9c, 0x47, 0x78, 0x9c, 0x12, 0x45, 0x5b, 0xc7, 0x8e, 0x1c, 0x8f, 0x65, 0x0a, 0x84, 0xb6,
	0x2e, 0x5d, 0xfa, 0xfc, 0x05, 0xfe, 0x10, 0x90, 0x38, 0x08, 0x75, 0x3a, 0x13, 0xd1, 0xcf, 0xa0,
	0x3d, 0xec, 0x3b, 0x6c, 0xf9, 0x3a, 0x2d, 0x02, 0xe4, 0x7f, 0x50, 0x8b, 0x82, 0x78, 0x38, 0x66,
	0x45, 0xdf, 0x07, 0xf1, 0x80, 0x49, 0x4c, 0x38, 0xc7, 0x98, 0xa8, 0x15, 0x03, 0xc1, 0x24, 0xf9,
	0x0c, 0x16, 0xdd, 0xb1, 0x10, 0x2c, 0x56, 0x43, 0x91, 0xee, 0x59, 0xc7, 0x7c, 0x23, 0x8b, 0x66,
	0xdb, 0xde, 0x84, 0xc5, 0xe9, 0x9c, 0xca, 0xbe, 0xeb, 0x84, 0x0c, 0x3f, 0x96, 0x25, 0xfa, 0x4e,
	0x94, 0xec, 0x41, 0x23, 0x71, 0x94, 0x1f, 0x72, 0x29, 0xf7, 0xb8, 0xc7, 0x42, 0xec, 0xd8, 0xc5,
	0xee, 0xad, 0xf7, 0x5c, 0xd1, 0x2c, 0xf4, 0xf0, 0x24, 0x61, 0xf4, 0xec, 0x6a, 0xdd, 0x56, 0x11,
	0x73, 0xe2, 0x01, 0xeb, 0x27, 0x8c, 0x79, 0xd8, 0xe4, 0x25, 0x3a, 0x1b, 0xfa, 0xfc, 0x0f, 0x03,
	0x96, 0xce, 0xd1, 0x90, 0x79, 0xa8, 0x6d, 0xef, 0x3c, 0x7e, 0x34, 0xd8, 0x3d, 0x6c, 0xce, 0x91,
	0x06, 0x58, 0x4f, 0x0e, 0x0e, 0x06, 0x7b, 0x8f, 0x76, 0xbf, 0xed, 0x37, 0x0d, 0xb2, 0x08, 0x90,
	0xba, 0xfb, 0xda, 0x2f, 0x65, 0xe9, 0xde, 0xfe, 0x53, 0xed, 0x96, 0xb3, 0x74, 0x6f, 0xff, 0x29,
	0xa6, 0x2b, 0xf9, 0xea, 0x9e, 0x76, 0xcd, 0x7c, 0x75, 0x0f, 0xd3, 0x55, 0x02, 0x50, 0x4d, 0xd9,
	0x9a, 0xb5, 0xcc, 0xee, 0xed, 0x3f, 0x6d, 0xd6, 0xf3, 0x78, 0xaf, 0x69, 0x6d, 0xda, 0x7f, 0x4d,
	0x5a, 0xc6, 0xab, 0x49, 0xcb, 0xf8, 0x77, 0xd2, 0x32, 0x7e, 0x7d, 0xd3, 0x9a, 0x7b, 0xf5, 0xa6,
	0x35, 0xf7, 0xcf, 0x9b, 0xd6, 0xdc, 0xb3, 0x2a, 0xfe, 0x5e, 0xdd, 0xf8, 0x2f, 0x00, 0x00, 0xff,
	0xff, 0x64, 0xb4, 0xa9, 0xd5, 0x03, 0x0b, 0x00, 0x00,
}

func (m *Point) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Point) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Point) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Lng != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lng))))
		i--
		dAtA[i] = 0x11
	}
	if m.Lat != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lat))))
		i--
		dAtA[i] = 0x9
	}
	return len(dAtA) - i, nil
}

func (m *Sector) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Sector) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Sector) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Centroid != nil {
		{
			size, err := m.Centroid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Arc != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Arc))
		i--
		dAtA[i] = 0x10
	}
	if m.Azimuth != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Azimuth))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Route) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Route) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Route) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Color) > 0 {
		i -= len(m.Color)
		copy(dAtA[i:], m.Color)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Color)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Waypoints) > 0 {
		for iNdEx := len(m.Waypoints) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Waypoints[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x12
		}
	}
	if m.RouteID != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.RouteID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Ue) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Ue) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Ue) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Metrics != nil {
		{
			size, err := m.Metrics.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.Admitted {
		i--
		if m.Admitted {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if len(m.Crnti) > 0 {
		i -= len(m.Crnti)
		copy(dAtA[i:], m.Crnti)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Crnti)))
		i--
		dAtA[i] = 0x7a
	}
	if m.Tower3Strength != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Tower3Strength))))
		i--
		dAtA[i] = 0x71
	}
	if m.Tower3 != nil {
		{
			size, err := m.Tower3.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x6a
	}
	if m.Tower2Strength != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Tower2Strength))))
		i--
		dAtA[i] = 0x61
	}
	if m.Tower2 != nil {
		{
			size, err := m.Tower2.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x5a
	}
	if m.Tower1Strength != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Tower1Strength))))
		i--
		dAtA[i] = 0x51
	}
	if m.Tower1 != nil {
		{
			size, err := m.Tower1.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x4a
	}
	if m.ServingTowerStrength != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.ServingTowerStrength))))
		i--
		dAtA[i] = 0x41
	}
	if m.ServingTower != nil {
		{
			size, err := m.ServingTower.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x3a
	}
	if m.Rotation != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Rotation))
		i--
		dAtA[i] = 0x28
	}
	if m.Position != nil {
		{
			size, err := m.Position.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.Type) > 0 {
		i -= len(m.Type)
		copy(dAtA[i:], m.Type)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Type)))
		i--
		dAtA[i] = 0x12
	}
	if m.Imsi != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Imsi))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *UeMetrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UeMetrics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *UeMetrics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.PdcpThroughputUl != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.PdcpThroughputUl))))
		i--
		dAtA[i] = 0x3d
	}
	if m.ServingSinrUl != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.ServingSinrUl))))
		i--
		dAtA[i] = 0x35
	}
	if m.PdcpThroughputDl != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.PdcpThroughputDl))))
		i--
		dAtA[i] = 0x2d
	}
	if m.ServingSinrDl != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.ServingSinrDl))))
		i--
		dAtA[i] = 0x25
	}
	if m.IsFirst {
		i--
		if m.IsFirst {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.HoReportTimestamp != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.HoReportTimestamp))
		i--
		dAtA[i] = 0x10
	}
	if m.HoLatency != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.HoLatency))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ECGI) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ECGI) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ECGI) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.PlmnID) > 0 {
		i -= len(m.PlmnID)
		copy(dAtA[i:], m.PlmnID)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.PlmnID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.EcID) > 0 {
		i -= len(m.EcID)
		copy(dAtA[i:], m.EcID)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.EcID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Cell) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Cell) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Cell) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.E2Taddress) > 0 {
		i -= len(m.E2Taddress)
		copy(dAtA[i:], m.E2Taddress)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.E2Taddress)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x92
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x8a
	}
	if m.Pci != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Pci))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x80
	}
	if m.Thetadegree != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Thetadegree))))
		i--
		dAtA[i] = 0x79
	}
	if m.Frequency != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Frequency))))
		i--
		dAtA[i] = 0x71
	}
	if m.Height != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Height))))
		i--
		dAtA[i] = 0x69
	}
	if m.Metrics != nil {
		{
			size, err := m.Metrics.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x62
	}
	if m.Port != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x58
	}
	if m.CrntiIndex != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.CrntiIndex))
		i--
		dAtA[i] = 0x50
	}
	if len(m.CrntiMap) > 0 {
		for k := range m.CrntiMap {
			v := m.CrntiMap[k]
			baseI := i
			i = encodeVarintTypes(dAtA, i, uint64(v))
			i--
			dAtA[i] = 0x10
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintTypes(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintTypes(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x4a
		}
	}
	if m.TxPowerdB != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.TxPowerdB))))
		i--
		dAtA[i] = 0x41
	}
	if len(m.Neighbors) > 0 {
		for iNdEx := len(m.Neighbors) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Neighbors[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTypes(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x3a
		}
	}
	if m.MaxUEs != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxUEs))
		i--
		dAtA[i] = 0x30
	}
	if len(m.Color) > 0 {
		i -= len(m.Color)
		copy(dAtA[i:], m.Color)
		i = encodeVarintTypes(dAtA, i, uint64(len(m.Color)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Sector != nil {
		{
			size, err := m.Sector.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Location != nil {
		{
			size, err := m.Location.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Ecgi != nil {
		{
			size, err := m.Ecgi.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CellMetrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CellMetrics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CellMetrics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.InstSpecEffi != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.InstSpecEffi))))
		i--
		dAtA[i] = 0xd
	}
	return len(dAtA) - i, nil
}

func (m *MapLayout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MapLayout) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MapLayout) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.MeanUeSpeed != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.MeanUeSpeed))))
		i--
		dAtA[i] = 0x5d
	}
	if m.PathlossModel != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.PathlossModel))
		i--
		dAtA[i] = 0x50
	}
	if m.LocationsScale != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.LocationsScale))))
		i--
		dAtA[i] = 0x4d
	}
	if m.CurrentRoutes != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.CurrentRoutes))
		i--
		dAtA[i] = 0x40
	}
	if m.MaxUes != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MaxUes))
		i--
		dAtA[i] = 0x38
	}
	if m.MinUes != 0 {
		i = encodeVarintTypes(dAtA, i, uint64(m.MinUes))
		i--
		dAtA[i] = 0x30
	}
	if m.ShowPower {
		i--
		if m.ShowPower {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.ShowRoutes {
		i--
		if m.ShowRoutes {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x20
	}
	if m.Fade {
		i--
		if m.Fade {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.Zoom != 0 {
		i -= 4
		encoding_binary.LittleEndian.PutUint32(dAtA[i:], uint32(math.Float32bits(float32(m.Zoom))))
		i--
		dAtA[i] = 0x15
	}
	if m.Center != nil {
		{
			size, err := m.Center.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTypes(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTypes(dAtA []byte, offset int, v uint64) int {
	offset -= sovTypes(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Point) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Lat != 0 {
		n += 9
	}
	if m.Lng != 0 {
		n += 9
	}
	return n
}

func (m *Sector) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Azimuth != 0 {
		n += 1 + sovTypes(uint64(m.Azimuth))
	}
	if m.Arc != 0 {
		n += 1 + sovTypes(uint64(m.Arc))
	}
	if m.Centroid != nil {
		l = m.Centroid.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Route) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.RouteID != 0 {
		n += 1 + sovTypes(uint64(m.RouteID))
	}
	if len(m.Waypoints) > 0 {
		for _, e := range m.Waypoints {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	l = len(m.Color)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Ue) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Imsi != 0 {
		n += 1 + sovTypes(uint64(m.Imsi))
	}
	l = len(m.Type)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Position != nil {
		l = m.Position.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Rotation != 0 {
		n += 1 + sovTypes(uint64(m.Rotation))
	}
	if m.ServingTower != nil {
		l = m.ServingTower.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.ServingTowerStrength != 0 {
		n += 9
	}
	if m.Tower1 != nil {
		l = m.Tower1.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Tower1Strength != 0 {
		n += 9
	}
	if m.Tower2 != nil {
		l = m.Tower2.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Tower2Strength != 0 {
		n += 9
	}
	if m.Tower3 != nil {
		l = m.Tower3.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Tower3Strength != 0 {
		n += 9
	}
	l = len(m.Crnti)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Admitted {
		n += 3
	}
	if m.Metrics != nil {
		l = m.Metrics.Size()
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *UeMetrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HoLatency != 0 {
		n += 1 + sovTypes(uint64(m.HoLatency))
	}
	if m.HoReportTimestamp != 0 {
		n += 1 + sovTypes(uint64(m.HoReportTimestamp))
	}
	if m.IsFirst {
		n += 2
	}
	if m.ServingSinrDl != 0 {
		n += 5
	}
	if m.PdcpThroughputDl != 0 {
		n += 5
	}
	if m.ServingSinrUl != 0 {
		n += 5
	}
	if m.PdcpThroughputUl != 0 {
		n += 5
	}
	return n
}

func (m *ECGI) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.EcID)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.PlmnID)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *Cell) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ecgi != nil {
		l = m.Ecgi.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Location != nil {
		l = m.Location.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Sector != nil {
		l = m.Sector.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	l = len(m.Color)
	if l > 0 {
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.MaxUEs != 0 {
		n += 1 + sovTypes(uint64(m.MaxUEs))
	}
	if len(m.Neighbors) > 0 {
		for _, e := range m.Neighbors {
			l = e.Size()
			n += 1 + l + sovTypes(uint64(l))
		}
	}
	if m.TxPowerdB != 0 {
		n += 9
	}
	if len(m.CrntiMap) > 0 {
		for k, v := range m.CrntiMap {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovTypes(uint64(len(k))) + 1 + sovTypes(uint64(v))
			n += mapEntrySize + 1 + sovTypes(uint64(mapEntrySize))
		}
	}
	if m.CrntiIndex != 0 {
		n += 1 + sovTypes(uint64(m.CrntiIndex))
	}
	if m.Port != 0 {
		n += 1 + sovTypes(uint64(m.Port))
	}
	if m.Metrics != nil {
		l = m.Metrics.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Height != 0 {
		n += 9
	}
	if m.Frequency != 0 {
		n += 9
	}
	if m.Thetadegree != 0 {
		n += 9
	}
	if m.Pci != 0 {
		n += 2 + sovTypes(uint64(m.Pci))
	}
	l = len(m.Address)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	l = len(m.E2Taddress)
	if l > 0 {
		n += 2 + l + sovTypes(uint64(l))
	}
	return n
}

func (m *CellMetrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.InstSpecEffi != 0 {
		n += 5
	}
	return n
}

func (m *MapLayout) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Center != nil {
		l = m.Center.Size()
		n += 1 + l + sovTypes(uint64(l))
	}
	if m.Zoom != 0 {
		n += 5
	}
	if m.Fade {
		n += 2
	}
	if m.ShowRoutes {
		n += 2
	}
	if m.ShowPower {
		n += 2
	}
	if m.MinUes != 0 {
		n += 1 + sovTypes(uint64(m.MinUes))
	}
	if m.MaxUes != 0 {
		n += 1 + sovTypes(uint64(m.MaxUes))
	}
	if m.CurrentRoutes != 0 {
		n += 1 + sovTypes(uint64(m.CurrentRoutes))
	}
	if m.LocationsScale != 0 {
		n += 5
	}
	if m.PathlossModel != 0 {
		n += 1 + sovTypes(uint64(m.PathlossModel))
	}
	if m.MeanUeSpeed != 0 {
		n += 5
	}
	return n
}

func sovTypes(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTypes(x uint64) (n int) {
	return sovTypes(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Point) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Point: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Point: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lat", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lat = float64(math.Float64frombits(v))
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lng", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lng = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Sector) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Sector: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Sector: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Azimuth", wireType)
			}
			m.Azimuth = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Azimuth |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Arc", wireType)
			}
			m.Arc = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Arc |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Centroid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Centroid == nil {
				m.Centroid = &Point{}
			}
			if err := m.Centroid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Route) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Route: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Route: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RouteID", wireType)
			}
			m.RouteID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RouteID |= Imsi(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Waypoints", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Waypoints = append(m.Waypoints, &Point{})
			if err := m.Waypoints[len(m.Waypoints)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Color = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Ue) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Ue: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Ue: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Imsi", wireType)
			}
			m.Imsi = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Imsi |= Imsi(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Type = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Position == nil {
				m.Position = &Point{}
			}
			if err := m.Position.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rotation", wireType)
			}
			m.Rotation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Rotation |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServingTower", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ServingTower == nil {
				m.ServingTower = &ECGI{}
			}
			if err := m.ServingTower.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServingTowerStrength", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.ServingTowerStrength = float64(math.Float64frombits(v))
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tower1", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tower1 == nil {
				m.Tower1 = &ECGI{}
			}
			if err := m.Tower1.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tower1Strength", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Tower1Strength = float64(math.Float64frombits(v))
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tower2", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tower2 == nil {
				m.Tower2 = &ECGI{}
			}
			if err := m.Tower2.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 12:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tower2Strength", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Tower2Strength = float64(math.Float64frombits(v))
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tower3", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tower3 == nil {
				m.Tower3 = &ECGI{}
			}
			if err := m.Tower3.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tower3Strength", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Tower3Strength = float64(math.Float64frombits(v))
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Crnti", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Crnti = Crnti(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Admitted", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Admitted = bool(v != 0)
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metrics == nil {
				m.Metrics = &UeMetrics{}
			}
			if err := m.Metrics.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UeMetrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UeMetrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UeMetrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HoLatency", wireType)
			}
			m.HoLatency = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HoLatency |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HoReportTimestamp", wireType)
			}
			m.HoReportTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HoReportTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsFirst", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsFirst = bool(v != 0)
		case 4:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServingSinrDl", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.ServingSinrDl = float32(math.Float32frombits(v))
		case 5:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field PdcpThroughputDl", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.PdcpThroughputDl = float32(math.Float32frombits(v))
		case 6:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServingSinrUl", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.ServingSinrUl = float32(math.Float32frombits(v))
		case 7:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field PdcpThroughputUl", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.PdcpThroughputUl = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ECGI) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ECGI: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ECGI: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EcID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EcID = EcID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PlmnID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PlmnID = PlmnID(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Cell) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Cell: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Cell: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ecgi", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Ecgi == nil {
				m.Ecgi = &ECGI{}
			}
			if err := m.Ecgi.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Location", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Location == nil {
				m.Location = &Point{}
			}
			if err := m.Location.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sector", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Sector == nil {
				m.Sector = &Sector{}
			}
			if err := m.Sector.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Color = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxUEs", wireType)
			}
			m.MaxUEs = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxUEs |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Neighbors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Neighbors = append(m.Neighbors, &ECGI{})
			if err := m.Neighbors[len(m.Neighbors)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field TxPowerdB", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.TxPowerdB = float64(math.Float64frombits(v))
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrntiMap", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CrntiMap == nil {
				m.CrntiMap = make(map[Crnti]Imsi)
			}
			var mapkey Crnti
			var mapvalue uint64
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowTypes
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthTypes
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = Crnti(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowTypes
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipTypes(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthTypes
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.CrntiMap[Crnti(mapkey)] = ((Imsi)(mapvalue))
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CrntiIndex", wireType)
			}
			m.CrntiIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CrntiIndex |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metrics == nil {
				m.Metrics = &CellMetrics{}
			}
			if err := m.Metrics.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 13:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Height", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Height = float64(math.Float64frombits(v))
		case 14:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Frequency", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Frequency = float64(math.Float64frombits(v))
		case 15:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Thetadegree", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Thetadegree = float64(math.Float64frombits(v))
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pci", wireType)
			}
			m.Pci = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Pci |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field E2Taddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.E2Taddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CellMetrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CellMetrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CellMetrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field InstSpecEffi", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.InstSpecEffi = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MapLayout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MapLayout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MapLayout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Center", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTypes
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTypes
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Center == nil {
				m.Center = &Point{}
			}
			if err := m.Center.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field Zoom", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.Zoom = float32(math.Float32frombits(v))
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fade", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Fade = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowRoutes", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowRoutes = bool(v != 0)
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShowPower", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ShowPower = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MinUes", wireType)
			}
			m.MinUes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MinUes |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxUes", wireType)
			}
			m.MaxUes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxUes |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentRoutes", wireType)
			}
			m.CurrentRoutes = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentRoutes |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocationsScale", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.LocationsScale = float32(math.Float32frombits(v))
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PathlossModel", wireType)
			}
			m.PathlossModel = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PathlossModel |= PathlossModelType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 5 {
				return fmt.Errorf("proto: wrong wireType = %d for field MeanUeSpeed", wireType)
			}
			var v uint32
			if (iNdEx + 4) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint32(encoding_binary.LittleEndian.Uint32(dAtA[iNdEx:]))
			iNdEx += 4
			m.MeanUeSpeed = float32(math.Float32frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipTypes(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTypes
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTypes(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTypes
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTypes
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTypes
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTypes
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTypes
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTypes        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTypes          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTypes = fmt.Errorf("proto: unexpected end of group")
)
