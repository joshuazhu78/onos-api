// Code generated by MockGen. DO NOT EDIT.
// Source: go/onos/ransim/metrics/metrics.pb.go

// Package metrics is a generated GoMock package.
package metrics

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockMetricsServiceClient is a mock of MetricsServiceClient interface.
type MockMetricsServiceClient struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsServiceClientMockRecorder
}

// MockMetricsServiceClientMockRecorder is the mock recorder for MockMetricsServiceClient.
type MockMetricsServiceClientMockRecorder struct {
	mock *MockMetricsServiceClient
}

// NewMockMetricsServiceClient creates a new mock instance.
func NewMockMetricsServiceClient(ctrl *gomock.Controller) *MockMetricsServiceClient {
	mock := &MockMetricsServiceClient{ctrl: ctrl}
	mock.recorder = &MockMetricsServiceClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsServiceClient) EXPECT() *MockMetricsServiceClientMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockMetricsServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "List", varargs...)
	ret0, _ := ret[0].(*ListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockMetricsServiceClientMockRecorder) List(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMetricsServiceClient)(nil).List), varargs...)
}

// Set mocks base method.
func (m *MockMetricsServiceClient) Set(ctx context.Context, in *SetRequest, opts ...grpc.CallOption) (*SetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Set", varargs...)
	ret0, _ := ret[0].(*SetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set.
func (mr *MockMetricsServiceClientMockRecorder) Set(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockMetricsServiceClient)(nil).Set), varargs...)
}

// Get mocks base method.
func (m *MockMetricsServiceClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Get", varargs...)
	ret0, _ := ret[0].(*GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMetricsServiceClientMockRecorder) Get(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMetricsServiceClient)(nil).Get), varargs...)
}

// Delete mocks base method.
func (m *MockMetricsServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Delete", varargs...)
	ret0, _ := ret[0].(*DeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockMetricsServiceClientMockRecorder) Delete(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMetricsServiceClient)(nil).Delete), varargs...)
}

// DeleteAll mocks base method.
func (m *MockMetricsServiceClient) DeleteAll(ctx context.Context, in *DeleteAllRequest, opts ...grpc.CallOption) (*DeleteAllResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAll", varargs...)
	ret0, _ := ret[0].(*DeleteAllResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockMetricsServiceClientMockRecorder) DeleteAll(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockMetricsServiceClient)(nil).DeleteAll), varargs...)
}

// Watch mocks base method.
func (m *MockMetricsServiceClient) Watch(ctx context.Context, in *WatchRequest, opts ...grpc.CallOption) (MetricsService_WatchClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Watch", varargs...)
	ret0, _ := ret[0].(MetricsService_WatchClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Watch indicates an expected call of Watch.
func (mr *MockMetricsServiceClientMockRecorder) Watch(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockMetricsServiceClient)(nil).Watch), varargs...)
}

// MockMetricsService_WatchClient is a mock of MetricsService_WatchClient interface.
type MockMetricsService_WatchClient struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsService_WatchClientMockRecorder
}

// MockMetricsService_WatchClientMockRecorder is the mock recorder for MockMetricsService_WatchClient.
type MockMetricsService_WatchClientMockRecorder struct {
	mock *MockMetricsService_WatchClient
}

// NewMockMetricsService_WatchClient creates a new mock instance.
func NewMockMetricsService_WatchClient(ctrl *gomock.Controller) *MockMetricsService_WatchClient {
	mock := &MockMetricsService_WatchClient{ctrl: ctrl}
	mock.recorder = &MockMetricsService_WatchClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsService_WatchClient) EXPECT() *MockMetricsService_WatchClientMockRecorder {
	return m.recorder
}

// Recv mocks base method.
func (m *MockMetricsService_WatchClient) Recv() (*WatchResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*WatchResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockMetricsService_WatchClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockMetricsService_WatchClient)(nil).Recv))
}

// Header mocks base method.
func (m *MockMetricsService_WatchClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockMetricsService_WatchClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockMetricsService_WatchClient)(nil).Header))
}

// Trailer mocks base method.
func (m *MockMetricsService_WatchClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockMetricsService_WatchClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockMetricsService_WatchClient)(nil).Trailer))
}

// CloseSend mocks base method.
func (m *MockMetricsService_WatchClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockMetricsService_WatchClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockMetricsService_WatchClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockMetricsService_WatchClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockMetricsService_WatchClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockMetricsService_WatchClient)(nil).Context))
}

// SendMsg mocks base method.
func (m_2 *MockMetricsService_WatchClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockMetricsService_WatchClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockMetricsService_WatchClient)(nil).SendMsg), m)
}

// RecvMsg mocks base method.
func (m_2 *MockMetricsService_WatchClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockMetricsService_WatchClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockMetricsService_WatchClient)(nil).RecvMsg), m)
}

// MockMetricsServiceServer is a mock of MetricsServiceServer interface.
type MockMetricsServiceServer struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsServiceServerMockRecorder
}

// MockMetricsServiceServerMockRecorder is the mock recorder for MockMetricsServiceServer.
type MockMetricsServiceServerMockRecorder struct {
	mock *MockMetricsServiceServer
}

// NewMockMetricsServiceServer creates a new mock instance.
func NewMockMetricsServiceServer(ctrl *gomock.Controller) *MockMetricsServiceServer {
	mock := &MockMetricsServiceServer{ctrl: ctrl}
	mock.recorder = &MockMetricsServiceServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsServiceServer) EXPECT() *MockMetricsServiceServerMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockMetricsServiceServer) List(arg0 context.Context, arg1 *ListRequest) (*ListResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].(*ListResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockMetricsServiceServerMockRecorder) List(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockMetricsServiceServer)(nil).List), arg0, arg1)
}

// Set mocks base method.
func (m *MockMetricsServiceServer) Set(arg0 context.Context, arg1 *SetRequest) (*SetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1)
	ret0, _ := ret[0].(*SetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Set indicates an expected call of Set.
func (mr *MockMetricsServiceServerMockRecorder) Set(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockMetricsServiceServer)(nil).Set), arg0, arg1)
}

// Get mocks base method.
func (m *MockMetricsServiceServer) Get(arg0 context.Context, arg1 *GetRequest) (*GetResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*GetResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockMetricsServiceServerMockRecorder) Get(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockMetricsServiceServer)(nil).Get), arg0, arg1)
}

// Delete mocks base method.
func (m *MockMetricsServiceServer) Delete(arg0 context.Context, arg1 *DeleteRequest) (*DeleteResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(*DeleteResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete.
func (mr *MockMetricsServiceServerMockRecorder) Delete(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockMetricsServiceServer)(nil).Delete), arg0, arg1)
}

// DeleteAll mocks base method.
func (m *MockMetricsServiceServer) DeleteAll(arg0 context.Context, arg1 *DeleteAllRequest) (*DeleteAllResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", arg0, arg1)
	ret0, _ := ret[0].(*DeleteAllResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockMetricsServiceServerMockRecorder) DeleteAll(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockMetricsServiceServer)(nil).DeleteAll), arg0, arg1)
}

// Watch mocks base method.
func (m *MockMetricsServiceServer) Watch(arg0 *WatchRequest, arg1 MetricsService_WatchServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Watch", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Watch indicates an expected call of Watch.
func (mr *MockMetricsServiceServerMockRecorder) Watch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Watch", reflect.TypeOf((*MockMetricsServiceServer)(nil).Watch), arg0, arg1)
}

// MockMetricsService_WatchServer is a mock of MetricsService_WatchServer interface.
type MockMetricsService_WatchServer struct {
	ctrl     *gomock.Controller
	recorder *MockMetricsService_WatchServerMockRecorder
}

// MockMetricsService_WatchServerMockRecorder is the mock recorder for MockMetricsService_WatchServer.
type MockMetricsService_WatchServerMockRecorder struct {
	mock *MockMetricsService_WatchServer
}

// NewMockMetricsService_WatchServer creates a new mock instance.
func NewMockMetricsService_WatchServer(ctrl *gomock.Controller) *MockMetricsService_WatchServer {
	mock := &MockMetricsService_WatchServer{ctrl: ctrl}
	mock.recorder = &MockMetricsService_WatchServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMetricsService_WatchServer) EXPECT() *MockMetricsService_WatchServerMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockMetricsService_WatchServer) Send(arg0 *WatchResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockMetricsService_WatchServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockMetricsService_WatchServer)(nil).Send), arg0)
}

// SetHeader mocks base method.
func (m *MockMetricsService_WatchServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockMetricsService_WatchServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockMetricsService_WatchServer)(nil).SetHeader), arg0)
}

// SendHeader mocks base method.
func (m *MockMetricsService_WatchServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockMetricsService_WatchServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockMetricsService_WatchServer)(nil).SendHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockMetricsService_WatchServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockMetricsService_WatchServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockMetricsService_WatchServer)(nil).SetTrailer), arg0)
}

// Context mocks base method.
func (m *MockMetricsService_WatchServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockMetricsService_WatchServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockMetricsService_WatchServer)(nil).Context))
}

// SendMsg mocks base method.
func (m_2 *MockMetricsService_WatchServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockMetricsService_WatchServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockMetricsService_WatchServer)(nil).SendMsg), m)
}

// RecvMsg mocks base method.
func (m_2 *MockMetricsService_WatchServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockMetricsService_WatchServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockMetricsService_WatchServer)(nil).RecvMsg), m)
}
