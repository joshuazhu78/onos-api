// Code generated by MockGen. DO NOT EDIT.
// Source: go/onos/ransim/model/model.pb.go

// Package model is a generated GoMock package.
package model

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockNodeModelClient is a mock of NodeModelClient interface.
type MockNodeModelClient struct {
	ctrl     *gomock.Controller
	recorder *MockNodeModelClientMockRecorder
}

// MockNodeModelClientMockRecorder is the mock recorder for MockNodeModelClient.
type MockNodeModelClientMockRecorder struct {
	mock *MockNodeModelClient
}

// NewMockNodeModelClient creates a new mock instance.
func NewMockNodeModelClient(ctrl *gomock.Controller) *MockNodeModelClient {
	mock := &MockNodeModelClient{ctrl: ctrl}
	mock.recorder = &MockNodeModelClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeModelClient) EXPECT() *MockNodeModelClientMockRecorder {
	return m.recorder
}

// GetPlmnID mocks base method.
func (m *MockNodeModelClient) GetPlmnID(ctx context.Context, in *PlmnIDRequest, opts ...grpc.CallOption) (*PlmnIDResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetPlmnID", varargs...)
	ret0, _ := ret[0].(*PlmnIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlmnID indicates an expected call of GetPlmnID.
func (mr *MockNodeModelClientMockRecorder) GetPlmnID(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlmnID", reflect.TypeOf((*MockNodeModelClient)(nil).GetPlmnID), varargs...)
}

// CreateNode mocks base method.
func (m *MockNodeModelClient) CreateNode(ctx context.Context, in *CreateNodeRequest, opts ...grpc.CallOption) (*CreateNodeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateNode", varargs...)
	ret0, _ := ret[0].(*CreateNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNode indicates an expected call of CreateNode.
func (mr *MockNodeModelClientMockRecorder) CreateNode(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNode", reflect.TypeOf((*MockNodeModelClient)(nil).CreateNode), varargs...)
}

// GetNode mocks base method.
func (m *MockNodeModelClient) GetNode(ctx context.Context, in *GetNodeRequest, opts ...grpc.CallOption) (*GetNodeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNode", varargs...)
	ret0, _ := ret[0].(*GetNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNode indicates an expected call of GetNode.
func (mr *MockNodeModelClientMockRecorder) GetNode(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNode", reflect.TypeOf((*MockNodeModelClient)(nil).GetNode), varargs...)
}

// UpdateNode mocks base method.
func (m *MockNodeModelClient) UpdateNode(ctx context.Context, in *UpdateNodeRequest, opts ...grpc.CallOption) (*UpdateNodeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateNode", varargs...)
	ret0, _ := ret[0].(*UpdateNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNode indicates an expected call of UpdateNode.
func (mr *MockNodeModelClientMockRecorder) UpdateNode(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNode", reflect.TypeOf((*MockNodeModelClient)(nil).UpdateNode), varargs...)
}

// DeleteNode mocks base method.
func (m *MockNodeModelClient) DeleteNode(ctx context.Context, in *DeleteNodeRequest, opts ...grpc.CallOption) (*DeleteNodeResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteNode", varargs...)
	ret0, _ := ret[0].(*DeleteNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNode indicates an expected call of DeleteNode.
func (mr *MockNodeModelClientMockRecorder) DeleteNode(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNode", reflect.TypeOf((*MockNodeModelClient)(nil).DeleteNode), varargs...)
}

// WatchNodes mocks base method.
func (m *MockNodeModelClient) WatchNodes(ctx context.Context, in *WatchNodesRequest, opts ...grpc.CallOption) (NodeModel_WatchNodesClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WatchNodes", varargs...)
	ret0, _ := ret[0].(NodeModel_WatchNodesClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchNodes indicates an expected call of WatchNodes.
func (mr *MockNodeModelClientMockRecorder) WatchNodes(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchNodes", reflect.TypeOf((*MockNodeModelClient)(nil).WatchNodes), varargs...)
}

// ListNodes mocks base method.
func (m *MockNodeModelClient) ListNodes(ctx context.Context, in *ListNodesRequest, opts ...grpc.CallOption) (NodeModel_ListNodesClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListNodes", varargs...)
	ret0, _ := ret[0].(NodeModel_ListNodesClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListNodes indicates an expected call of ListNodes.
func (mr *MockNodeModelClientMockRecorder) ListNodes(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodes", reflect.TypeOf((*MockNodeModelClient)(nil).ListNodes), varargs...)
}

// AgentControl mocks base method.
func (m *MockNodeModelClient) AgentControl(ctx context.Context, in *AgentControlRequest, opts ...grpc.CallOption) (*AgentControlResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AgentControl", varargs...)
	ret0, _ := ret[0].(*AgentControlResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentControl indicates an expected call of AgentControl.
func (mr *MockNodeModelClientMockRecorder) AgentControl(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentControl", reflect.TypeOf((*MockNodeModelClient)(nil).AgentControl), varargs...)
}

// MockNodeModel_WatchNodesClient is a mock of NodeModel_WatchNodesClient interface.
type MockNodeModel_WatchNodesClient struct {
	ctrl     *gomock.Controller
	recorder *MockNodeModel_WatchNodesClientMockRecorder
}

// MockNodeModel_WatchNodesClientMockRecorder is the mock recorder for MockNodeModel_WatchNodesClient.
type MockNodeModel_WatchNodesClientMockRecorder struct {
	mock *MockNodeModel_WatchNodesClient
}

// NewMockNodeModel_WatchNodesClient creates a new mock instance.
func NewMockNodeModel_WatchNodesClient(ctrl *gomock.Controller) *MockNodeModel_WatchNodesClient {
	mock := &MockNodeModel_WatchNodesClient{ctrl: ctrl}
	mock.recorder = &MockNodeModel_WatchNodesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeModel_WatchNodesClient) EXPECT() *MockNodeModel_WatchNodesClientMockRecorder {
	return m.recorder
}

// Recv mocks base method.
func (m *MockNodeModel_WatchNodesClient) Recv() (*WatchNodesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*WatchNodesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockNodeModel_WatchNodesClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockNodeModel_WatchNodesClient)(nil).Recv))
}

// Header mocks base method.
func (m *MockNodeModel_WatchNodesClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockNodeModel_WatchNodesClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockNodeModel_WatchNodesClient)(nil).Header))
}

// Trailer mocks base method.
func (m *MockNodeModel_WatchNodesClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockNodeModel_WatchNodesClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockNodeModel_WatchNodesClient)(nil).Trailer))
}

// CloseSend mocks base method.
func (m *MockNodeModel_WatchNodesClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockNodeModel_WatchNodesClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockNodeModel_WatchNodesClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockNodeModel_WatchNodesClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockNodeModel_WatchNodesClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockNodeModel_WatchNodesClient)(nil).Context))
}

// SendMsg mocks base method.
func (m_2 *MockNodeModel_WatchNodesClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockNodeModel_WatchNodesClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockNodeModel_WatchNodesClient)(nil).SendMsg), m)
}

// RecvMsg mocks base method.
func (m_2 *MockNodeModel_WatchNodesClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockNodeModel_WatchNodesClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockNodeModel_WatchNodesClient)(nil).RecvMsg), m)
}

// MockNodeModel_ListNodesClient is a mock of NodeModel_ListNodesClient interface.
type MockNodeModel_ListNodesClient struct {
	ctrl     *gomock.Controller
	recorder *MockNodeModel_ListNodesClientMockRecorder
}

// MockNodeModel_ListNodesClientMockRecorder is the mock recorder for MockNodeModel_ListNodesClient.
type MockNodeModel_ListNodesClientMockRecorder struct {
	mock *MockNodeModel_ListNodesClient
}

// NewMockNodeModel_ListNodesClient creates a new mock instance.
func NewMockNodeModel_ListNodesClient(ctrl *gomock.Controller) *MockNodeModel_ListNodesClient {
	mock := &MockNodeModel_ListNodesClient{ctrl: ctrl}
	mock.recorder = &MockNodeModel_ListNodesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeModel_ListNodesClient) EXPECT() *MockNodeModel_ListNodesClientMockRecorder {
	return m.recorder
}

// Recv mocks base method.
func (m *MockNodeModel_ListNodesClient) Recv() (*ListNodesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*ListNodesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockNodeModel_ListNodesClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockNodeModel_ListNodesClient)(nil).Recv))
}

// Header mocks base method.
func (m *MockNodeModel_ListNodesClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockNodeModel_ListNodesClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockNodeModel_ListNodesClient)(nil).Header))
}

// Trailer mocks base method.
func (m *MockNodeModel_ListNodesClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockNodeModel_ListNodesClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockNodeModel_ListNodesClient)(nil).Trailer))
}

// CloseSend mocks base method.
func (m *MockNodeModel_ListNodesClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockNodeModel_ListNodesClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockNodeModel_ListNodesClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockNodeModel_ListNodesClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockNodeModel_ListNodesClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockNodeModel_ListNodesClient)(nil).Context))
}

// SendMsg mocks base method.
func (m_2 *MockNodeModel_ListNodesClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockNodeModel_ListNodesClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockNodeModel_ListNodesClient)(nil).SendMsg), m)
}

// RecvMsg mocks base method.
func (m_2 *MockNodeModel_ListNodesClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockNodeModel_ListNodesClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockNodeModel_ListNodesClient)(nil).RecvMsg), m)
}

// MockNodeModelServer is a mock of NodeModelServer interface.
type MockNodeModelServer struct {
	ctrl     *gomock.Controller
	recorder *MockNodeModelServerMockRecorder
}

// MockNodeModelServerMockRecorder is the mock recorder for MockNodeModelServer.
type MockNodeModelServerMockRecorder struct {
	mock *MockNodeModelServer
}

// NewMockNodeModelServer creates a new mock instance.
func NewMockNodeModelServer(ctrl *gomock.Controller) *MockNodeModelServer {
	mock := &MockNodeModelServer{ctrl: ctrl}
	mock.recorder = &MockNodeModelServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeModelServer) EXPECT() *MockNodeModelServerMockRecorder {
	return m.recorder
}

// GetPlmnID mocks base method.
func (m *MockNodeModelServer) GetPlmnID(arg0 context.Context, arg1 *PlmnIDRequest) (*PlmnIDResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlmnID", arg0, arg1)
	ret0, _ := ret[0].(*PlmnIDResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPlmnID indicates an expected call of GetPlmnID.
func (mr *MockNodeModelServerMockRecorder) GetPlmnID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlmnID", reflect.TypeOf((*MockNodeModelServer)(nil).GetPlmnID), arg0, arg1)
}

// CreateNode mocks base method.
func (m *MockNodeModelServer) CreateNode(arg0 context.Context, arg1 *CreateNodeRequest) (*CreateNodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNode", arg0, arg1)
	ret0, _ := ret[0].(*CreateNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNode indicates an expected call of CreateNode.
func (mr *MockNodeModelServerMockRecorder) CreateNode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNode", reflect.TypeOf((*MockNodeModelServer)(nil).CreateNode), arg0, arg1)
}

// GetNode mocks base method.
func (m *MockNodeModelServer) GetNode(arg0 context.Context, arg1 *GetNodeRequest) (*GetNodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNode", arg0, arg1)
	ret0, _ := ret[0].(*GetNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNode indicates an expected call of GetNode.
func (mr *MockNodeModelServerMockRecorder) GetNode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNode", reflect.TypeOf((*MockNodeModelServer)(nil).GetNode), arg0, arg1)
}

// UpdateNode mocks base method.
func (m *MockNodeModelServer) UpdateNode(arg0 context.Context, arg1 *UpdateNodeRequest) (*UpdateNodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNode", arg0, arg1)
	ret0, _ := ret[0].(*UpdateNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateNode indicates an expected call of UpdateNode.
func (mr *MockNodeModelServerMockRecorder) UpdateNode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNode", reflect.TypeOf((*MockNodeModelServer)(nil).UpdateNode), arg0, arg1)
}

// DeleteNode mocks base method.
func (m *MockNodeModelServer) DeleteNode(arg0 context.Context, arg1 *DeleteNodeRequest) (*DeleteNodeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNode", arg0, arg1)
	ret0, _ := ret[0].(*DeleteNodeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNode indicates an expected call of DeleteNode.
func (mr *MockNodeModelServerMockRecorder) DeleteNode(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNode", reflect.TypeOf((*MockNodeModelServer)(nil).DeleteNode), arg0, arg1)
}

// WatchNodes mocks base method.
func (m *MockNodeModelServer) WatchNodes(arg0 *WatchNodesRequest, arg1 NodeModel_WatchNodesServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchNodes", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WatchNodes indicates an expected call of WatchNodes.
func (mr *MockNodeModelServerMockRecorder) WatchNodes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchNodes", reflect.TypeOf((*MockNodeModelServer)(nil).WatchNodes), arg0, arg1)
}

// ListNodes mocks base method.
func (m *MockNodeModelServer) ListNodes(arg0 *ListNodesRequest, arg1 NodeModel_ListNodesServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListNodes", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListNodes indicates an expected call of ListNodes.
func (mr *MockNodeModelServerMockRecorder) ListNodes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListNodes", reflect.TypeOf((*MockNodeModelServer)(nil).ListNodes), arg0, arg1)
}

// AgentControl mocks base method.
func (m *MockNodeModelServer) AgentControl(arg0 context.Context, arg1 *AgentControlRequest) (*AgentControlResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AgentControl", arg0, arg1)
	ret0, _ := ret[0].(*AgentControlResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AgentControl indicates an expected call of AgentControl.
func (mr *MockNodeModelServerMockRecorder) AgentControl(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AgentControl", reflect.TypeOf((*MockNodeModelServer)(nil).AgentControl), arg0, arg1)
}

// MockNodeModel_WatchNodesServer is a mock of NodeModel_WatchNodesServer interface.
type MockNodeModel_WatchNodesServer struct {
	ctrl     *gomock.Controller
	recorder *MockNodeModel_WatchNodesServerMockRecorder
}

// MockNodeModel_WatchNodesServerMockRecorder is the mock recorder for MockNodeModel_WatchNodesServer.
type MockNodeModel_WatchNodesServerMockRecorder struct {
	mock *MockNodeModel_WatchNodesServer
}

// NewMockNodeModel_WatchNodesServer creates a new mock instance.
func NewMockNodeModel_WatchNodesServer(ctrl *gomock.Controller) *MockNodeModel_WatchNodesServer {
	mock := &MockNodeModel_WatchNodesServer{ctrl: ctrl}
	mock.recorder = &MockNodeModel_WatchNodesServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeModel_WatchNodesServer) EXPECT() *MockNodeModel_WatchNodesServerMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockNodeModel_WatchNodesServer) Send(arg0 *WatchNodesResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockNodeModel_WatchNodesServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockNodeModel_WatchNodesServer)(nil).Send), arg0)
}

// SetHeader mocks base method.
func (m *MockNodeModel_WatchNodesServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockNodeModel_WatchNodesServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockNodeModel_WatchNodesServer)(nil).SetHeader), arg0)
}

// SendHeader mocks base method.
func (m *MockNodeModel_WatchNodesServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockNodeModel_WatchNodesServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockNodeModel_WatchNodesServer)(nil).SendHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockNodeModel_WatchNodesServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockNodeModel_WatchNodesServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockNodeModel_WatchNodesServer)(nil).SetTrailer), arg0)
}

// Context mocks base method.
func (m *MockNodeModel_WatchNodesServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockNodeModel_WatchNodesServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockNodeModel_WatchNodesServer)(nil).Context))
}

// SendMsg mocks base method.
func (m_2 *MockNodeModel_WatchNodesServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockNodeModel_WatchNodesServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockNodeModel_WatchNodesServer)(nil).SendMsg), m)
}

// RecvMsg mocks base method.
func (m_2 *MockNodeModel_WatchNodesServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockNodeModel_WatchNodesServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockNodeModel_WatchNodesServer)(nil).RecvMsg), m)
}

// MockNodeModel_ListNodesServer is a mock of NodeModel_ListNodesServer interface.
type MockNodeModel_ListNodesServer struct {
	ctrl     *gomock.Controller
	recorder *MockNodeModel_ListNodesServerMockRecorder
}

// MockNodeModel_ListNodesServerMockRecorder is the mock recorder for MockNodeModel_ListNodesServer.
type MockNodeModel_ListNodesServerMockRecorder struct {
	mock *MockNodeModel_ListNodesServer
}

// NewMockNodeModel_ListNodesServer creates a new mock instance.
func NewMockNodeModel_ListNodesServer(ctrl *gomock.Controller) *MockNodeModel_ListNodesServer {
	mock := &MockNodeModel_ListNodesServer{ctrl: ctrl}
	mock.recorder = &MockNodeModel_ListNodesServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNodeModel_ListNodesServer) EXPECT() *MockNodeModel_ListNodesServerMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockNodeModel_ListNodesServer) Send(arg0 *ListNodesResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockNodeModel_ListNodesServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockNodeModel_ListNodesServer)(nil).Send), arg0)
}

// SetHeader mocks base method.
func (m *MockNodeModel_ListNodesServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockNodeModel_ListNodesServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockNodeModel_ListNodesServer)(nil).SetHeader), arg0)
}

// SendHeader mocks base method.
func (m *MockNodeModel_ListNodesServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockNodeModel_ListNodesServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockNodeModel_ListNodesServer)(nil).SendHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockNodeModel_ListNodesServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockNodeModel_ListNodesServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockNodeModel_ListNodesServer)(nil).SetTrailer), arg0)
}

// Context mocks base method.
func (m *MockNodeModel_ListNodesServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockNodeModel_ListNodesServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockNodeModel_ListNodesServer)(nil).Context))
}

// SendMsg mocks base method.
func (m_2 *MockNodeModel_ListNodesServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockNodeModel_ListNodesServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockNodeModel_ListNodesServer)(nil).SendMsg), m)
}

// RecvMsg mocks base method.
func (m_2 *MockNodeModel_ListNodesServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockNodeModel_ListNodesServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockNodeModel_ListNodesServer)(nil).RecvMsg), m)
}

// MockCellModelClient is a mock of CellModelClient interface.
type MockCellModelClient struct {
	ctrl     *gomock.Controller
	recorder *MockCellModelClientMockRecorder
}

// MockCellModelClientMockRecorder is the mock recorder for MockCellModelClient.
type MockCellModelClientMockRecorder struct {
	mock *MockCellModelClient
}

// NewMockCellModelClient creates a new mock instance.
func NewMockCellModelClient(ctrl *gomock.Controller) *MockCellModelClient {
	mock := &MockCellModelClient{ctrl: ctrl}
	mock.recorder = &MockCellModelClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCellModelClient) EXPECT() *MockCellModelClientMockRecorder {
	return m.recorder
}

// CreateCell mocks base method.
func (m *MockCellModelClient) CreateCell(ctx context.Context, in *CreateCellRequest, opts ...grpc.CallOption) (*CreateCellResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateCell", varargs...)
	ret0, _ := ret[0].(*CreateCellResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCell indicates an expected call of CreateCell.
func (mr *MockCellModelClientMockRecorder) CreateCell(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCell", reflect.TypeOf((*MockCellModelClient)(nil).CreateCell), varargs...)
}

// DeleteCell mocks base method.
func (m *MockCellModelClient) DeleteCell(ctx context.Context, in *DeleteCellRequest, opts ...grpc.CallOption) (*DeleteCellResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteCell", varargs...)
	ret0, _ := ret[0].(*DeleteCellResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCell indicates an expected call of DeleteCell.
func (mr *MockCellModelClientMockRecorder) DeleteCell(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCell", reflect.TypeOf((*MockCellModelClient)(nil).DeleteCell), varargs...)
}

// UpdateCell mocks base method.
func (m *MockCellModelClient) UpdateCell(ctx context.Context, in *UpdateCellRequest, opts ...grpc.CallOption) (*UpdateCellResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateCell", varargs...)
	ret0, _ := ret[0].(*UpdateCellResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCell indicates an expected call of UpdateCell.
func (mr *MockCellModelClientMockRecorder) UpdateCell(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCell", reflect.TypeOf((*MockCellModelClient)(nil).UpdateCell), varargs...)
}

// GetCell mocks base method.
func (m *MockCellModelClient) GetCell(ctx context.Context, in *GetCellRequest, opts ...grpc.CallOption) (*GetCellResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCell", varargs...)
	ret0, _ := ret[0].(*GetCellResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCell indicates an expected call of GetCell.
func (mr *MockCellModelClientMockRecorder) GetCell(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCell", reflect.TypeOf((*MockCellModelClient)(nil).GetCell), varargs...)
}

// WatchCells mocks base method.
func (m *MockCellModelClient) WatchCells(ctx context.Context, in *WatchCellsRequest, opts ...grpc.CallOption) (CellModel_WatchCellsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WatchCells", varargs...)
	ret0, _ := ret[0].(CellModel_WatchCellsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchCells indicates an expected call of WatchCells.
func (mr *MockCellModelClientMockRecorder) WatchCells(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchCells", reflect.TypeOf((*MockCellModelClient)(nil).WatchCells), varargs...)
}

// ListCells mocks base method.
func (m *MockCellModelClient) ListCells(ctx context.Context, in *ListCellsRequest, opts ...grpc.CallOption) (CellModel_ListCellsClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListCells", varargs...)
	ret0, _ := ret[0].(CellModel_ListCellsClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCells indicates an expected call of ListCells.
func (mr *MockCellModelClientMockRecorder) ListCells(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCells", reflect.TypeOf((*MockCellModelClient)(nil).ListCells), varargs...)
}

// MockCellModel_WatchCellsClient is a mock of CellModel_WatchCellsClient interface.
type MockCellModel_WatchCellsClient struct {
	ctrl     *gomock.Controller
	recorder *MockCellModel_WatchCellsClientMockRecorder
}

// MockCellModel_WatchCellsClientMockRecorder is the mock recorder for MockCellModel_WatchCellsClient.
type MockCellModel_WatchCellsClientMockRecorder struct {
	mock *MockCellModel_WatchCellsClient
}

// NewMockCellModel_WatchCellsClient creates a new mock instance.
func NewMockCellModel_WatchCellsClient(ctrl *gomock.Controller) *MockCellModel_WatchCellsClient {
	mock := &MockCellModel_WatchCellsClient{ctrl: ctrl}
	mock.recorder = &MockCellModel_WatchCellsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCellModel_WatchCellsClient) EXPECT() *MockCellModel_WatchCellsClientMockRecorder {
	return m.recorder
}

// Recv mocks base method.
func (m *MockCellModel_WatchCellsClient) Recv() (*WatchCellsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*WatchCellsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockCellModel_WatchCellsClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockCellModel_WatchCellsClient)(nil).Recv))
}

// Header mocks base method.
func (m *MockCellModel_WatchCellsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockCellModel_WatchCellsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockCellModel_WatchCellsClient)(nil).Header))
}

// Trailer mocks base method.
func (m *MockCellModel_WatchCellsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockCellModel_WatchCellsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockCellModel_WatchCellsClient)(nil).Trailer))
}

// CloseSend mocks base method.
func (m *MockCellModel_WatchCellsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockCellModel_WatchCellsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockCellModel_WatchCellsClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockCellModel_WatchCellsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockCellModel_WatchCellsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockCellModel_WatchCellsClient)(nil).Context))
}

// SendMsg mocks base method.
func (m_2 *MockCellModel_WatchCellsClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockCellModel_WatchCellsClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockCellModel_WatchCellsClient)(nil).SendMsg), m)
}

// RecvMsg mocks base method.
func (m_2 *MockCellModel_WatchCellsClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockCellModel_WatchCellsClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockCellModel_WatchCellsClient)(nil).RecvMsg), m)
}

// MockCellModel_ListCellsClient is a mock of CellModel_ListCellsClient interface.
type MockCellModel_ListCellsClient struct {
	ctrl     *gomock.Controller
	recorder *MockCellModel_ListCellsClientMockRecorder
}

// MockCellModel_ListCellsClientMockRecorder is the mock recorder for MockCellModel_ListCellsClient.
type MockCellModel_ListCellsClientMockRecorder struct {
	mock *MockCellModel_ListCellsClient
}

// NewMockCellModel_ListCellsClient creates a new mock instance.
func NewMockCellModel_ListCellsClient(ctrl *gomock.Controller) *MockCellModel_ListCellsClient {
	mock := &MockCellModel_ListCellsClient{ctrl: ctrl}
	mock.recorder = &MockCellModel_ListCellsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCellModel_ListCellsClient) EXPECT() *MockCellModel_ListCellsClientMockRecorder {
	return m.recorder
}

// Recv mocks base method.
func (m *MockCellModel_ListCellsClient) Recv() (*ListCellsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*ListCellsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockCellModel_ListCellsClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockCellModel_ListCellsClient)(nil).Recv))
}

// Header mocks base method.
func (m *MockCellModel_ListCellsClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockCellModel_ListCellsClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockCellModel_ListCellsClient)(nil).Header))
}

// Trailer mocks base method.
func (m *MockCellModel_ListCellsClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockCellModel_ListCellsClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockCellModel_ListCellsClient)(nil).Trailer))
}

// CloseSend mocks base method.
func (m *MockCellModel_ListCellsClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockCellModel_ListCellsClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockCellModel_ListCellsClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockCellModel_ListCellsClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockCellModel_ListCellsClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockCellModel_ListCellsClient)(nil).Context))
}

// SendMsg mocks base method.
func (m_2 *MockCellModel_ListCellsClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockCellModel_ListCellsClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockCellModel_ListCellsClient)(nil).SendMsg), m)
}

// RecvMsg mocks base method.
func (m_2 *MockCellModel_ListCellsClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockCellModel_ListCellsClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockCellModel_ListCellsClient)(nil).RecvMsg), m)
}

// MockCellModelServer is a mock of CellModelServer interface.
type MockCellModelServer struct {
	ctrl     *gomock.Controller
	recorder *MockCellModelServerMockRecorder
}

// MockCellModelServerMockRecorder is the mock recorder for MockCellModelServer.
type MockCellModelServerMockRecorder struct {
	mock *MockCellModelServer
}

// NewMockCellModelServer creates a new mock instance.
func NewMockCellModelServer(ctrl *gomock.Controller) *MockCellModelServer {
	mock := &MockCellModelServer{ctrl: ctrl}
	mock.recorder = &MockCellModelServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCellModelServer) EXPECT() *MockCellModelServerMockRecorder {
	return m.recorder
}

// CreateCell mocks base method.
func (m *MockCellModelServer) CreateCell(arg0 context.Context, arg1 *CreateCellRequest) (*CreateCellResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCell", arg0, arg1)
	ret0, _ := ret[0].(*CreateCellResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCell indicates an expected call of CreateCell.
func (mr *MockCellModelServerMockRecorder) CreateCell(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCell", reflect.TypeOf((*MockCellModelServer)(nil).CreateCell), arg0, arg1)
}

// DeleteCell mocks base method.
func (m *MockCellModelServer) DeleteCell(arg0 context.Context, arg1 *DeleteCellRequest) (*DeleteCellResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCell", arg0, arg1)
	ret0, _ := ret[0].(*DeleteCellResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteCell indicates an expected call of DeleteCell.
func (mr *MockCellModelServerMockRecorder) DeleteCell(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCell", reflect.TypeOf((*MockCellModelServer)(nil).DeleteCell), arg0, arg1)
}

// UpdateCell mocks base method.
func (m *MockCellModelServer) UpdateCell(arg0 context.Context, arg1 *UpdateCellRequest) (*UpdateCellResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCell", arg0, arg1)
	ret0, _ := ret[0].(*UpdateCellResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCell indicates an expected call of UpdateCell.
func (mr *MockCellModelServerMockRecorder) UpdateCell(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCell", reflect.TypeOf((*MockCellModelServer)(nil).UpdateCell), arg0, arg1)
}

// GetCell mocks base method.
func (m *MockCellModelServer) GetCell(arg0 context.Context, arg1 *GetCellRequest) (*GetCellResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCell", arg0, arg1)
	ret0, _ := ret[0].(*GetCellResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCell indicates an expected call of GetCell.
func (mr *MockCellModelServerMockRecorder) GetCell(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCell", reflect.TypeOf((*MockCellModelServer)(nil).GetCell), arg0, arg1)
}

// WatchCells mocks base method.
func (m *MockCellModelServer) WatchCells(arg0 *WatchCellsRequest, arg1 CellModel_WatchCellsServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchCells", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WatchCells indicates an expected call of WatchCells.
func (mr *MockCellModelServerMockRecorder) WatchCells(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchCells", reflect.TypeOf((*MockCellModelServer)(nil).WatchCells), arg0, arg1)
}

// ListCells mocks base method.
func (m *MockCellModelServer) ListCells(arg0 *ListCellsRequest, arg1 CellModel_ListCellsServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCells", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListCells indicates an expected call of ListCells.
func (mr *MockCellModelServerMockRecorder) ListCells(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCells", reflect.TypeOf((*MockCellModelServer)(nil).ListCells), arg0, arg1)
}

// MockCellModel_WatchCellsServer is a mock of CellModel_WatchCellsServer interface.
type MockCellModel_WatchCellsServer struct {
	ctrl     *gomock.Controller
	recorder *MockCellModel_WatchCellsServerMockRecorder
}

// MockCellModel_WatchCellsServerMockRecorder is the mock recorder for MockCellModel_WatchCellsServer.
type MockCellModel_WatchCellsServerMockRecorder struct {
	mock *MockCellModel_WatchCellsServer
}

// NewMockCellModel_WatchCellsServer creates a new mock instance.
func NewMockCellModel_WatchCellsServer(ctrl *gomock.Controller) *MockCellModel_WatchCellsServer {
	mock := &MockCellModel_WatchCellsServer{ctrl: ctrl}
	mock.recorder = &MockCellModel_WatchCellsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCellModel_WatchCellsServer) EXPECT() *MockCellModel_WatchCellsServerMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockCellModel_WatchCellsServer) Send(arg0 *WatchCellsResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockCellModel_WatchCellsServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockCellModel_WatchCellsServer)(nil).Send), arg0)
}

// SetHeader mocks base method.
func (m *MockCellModel_WatchCellsServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockCellModel_WatchCellsServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockCellModel_WatchCellsServer)(nil).SetHeader), arg0)
}

// SendHeader mocks base method.
func (m *MockCellModel_WatchCellsServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockCellModel_WatchCellsServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockCellModel_WatchCellsServer)(nil).SendHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockCellModel_WatchCellsServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockCellModel_WatchCellsServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockCellModel_WatchCellsServer)(nil).SetTrailer), arg0)
}

// Context mocks base method.
func (m *MockCellModel_WatchCellsServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockCellModel_WatchCellsServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockCellModel_WatchCellsServer)(nil).Context))
}

// SendMsg mocks base method.
func (m_2 *MockCellModel_WatchCellsServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockCellModel_WatchCellsServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockCellModel_WatchCellsServer)(nil).SendMsg), m)
}

// RecvMsg mocks base method.
func (m_2 *MockCellModel_WatchCellsServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockCellModel_WatchCellsServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockCellModel_WatchCellsServer)(nil).RecvMsg), m)
}

// MockCellModel_ListCellsServer is a mock of CellModel_ListCellsServer interface.
type MockCellModel_ListCellsServer struct {
	ctrl     *gomock.Controller
	recorder *MockCellModel_ListCellsServerMockRecorder
}

// MockCellModel_ListCellsServerMockRecorder is the mock recorder for MockCellModel_ListCellsServer.
type MockCellModel_ListCellsServerMockRecorder struct {
	mock *MockCellModel_ListCellsServer
}

// NewMockCellModel_ListCellsServer creates a new mock instance.
func NewMockCellModel_ListCellsServer(ctrl *gomock.Controller) *MockCellModel_ListCellsServer {
	mock := &MockCellModel_ListCellsServer{ctrl: ctrl}
	mock.recorder = &MockCellModel_ListCellsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCellModel_ListCellsServer) EXPECT() *MockCellModel_ListCellsServerMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockCellModel_ListCellsServer) Send(arg0 *ListCellsResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockCellModel_ListCellsServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockCellModel_ListCellsServer)(nil).Send), arg0)
}

// SetHeader mocks base method.
func (m *MockCellModel_ListCellsServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockCellModel_ListCellsServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockCellModel_ListCellsServer)(nil).SetHeader), arg0)
}

// SendHeader mocks base method.
func (m *MockCellModel_ListCellsServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockCellModel_ListCellsServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockCellModel_ListCellsServer)(nil).SendHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockCellModel_ListCellsServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockCellModel_ListCellsServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockCellModel_ListCellsServer)(nil).SetTrailer), arg0)
}

// Context mocks base method.
func (m *MockCellModel_ListCellsServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockCellModel_ListCellsServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockCellModel_ListCellsServer)(nil).Context))
}

// SendMsg mocks base method.
func (m_2 *MockCellModel_ListCellsServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockCellModel_ListCellsServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockCellModel_ListCellsServer)(nil).SendMsg), m)
}

// RecvMsg mocks base method.
func (m_2 *MockCellModel_ListCellsServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockCellModel_ListCellsServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockCellModel_ListCellsServer)(nil).RecvMsg), m)
}
