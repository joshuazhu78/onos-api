// Code generated by MockGen. DO NOT EDIT.
// Source: go/onos/ransim/trafficsim/trafficsim.pb.go

// Package trafficsim is a generated GoMock package.
package trafficsim

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	types "gitlab.devtools.intel.com/ngs-syseng/onosproject/onos-api/go/onos/ransim/types"
	grpc "google.golang.org/grpc"
	metadata "google.golang.org/grpc/metadata"
)

// MockTrafficClient is a mock of TrafficClient interface.
type MockTrafficClient struct {
	ctrl     *gomock.Controller
	recorder *MockTrafficClientMockRecorder
}

// MockTrafficClientMockRecorder is the mock recorder for MockTrafficClient.
type MockTrafficClientMockRecorder struct {
	mock *MockTrafficClient
}

// NewMockTrafficClient creates a new mock instance.
func NewMockTrafficClient(ctrl *gomock.Controller) *MockTrafficClient {
	mock := &MockTrafficClient{ctrl: ctrl}
	mock.recorder = &MockTrafficClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrafficClient) EXPECT() *MockTrafficClientMockRecorder {
	return m.recorder
}

// GetMapLayout mocks base method.
func (m *MockTrafficClient) GetMapLayout(ctx context.Context, in *MapLayoutRequest, opts ...grpc.CallOption) (*types.MapLayout, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetMapLayout", varargs...)
	ret0, _ := ret[0].(*types.MapLayout)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMapLayout indicates an expected call of GetMapLayout.
func (mr *MockTrafficClientMockRecorder) GetMapLayout(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapLayout", reflect.TypeOf((*MockTrafficClient)(nil).GetMapLayout), varargs...)
}

// ListRoutes mocks base method.
func (m *MockTrafficClient) ListRoutes(ctx context.Context, in *ListRoutesRequest, opts ...grpc.CallOption) (Traffic_ListRoutesClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListRoutes", varargs...)
	ret0, _ := ret[0].(Traffic_ListRoutesClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRoutes indicates an expected call of ListRoutes.
func (mr *MockTrafficClientMockRecorder) ListRoutes(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoutes", reflect.TypeOf((*MockTrafficClient)(nil).ListRoutes), varargs...)
}

// ListUes mocks base method.
func (m *MockTrafficClient) ListUes(ctx context.Context, in *ListUesRequest, opts ...grpc.CallOption) (Traffic_ListUesClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListUes", varargs...)
	ret0, _ := ret[0].(Traffic_ListUesClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUes indicates an expected call of ListUes.
func (mr *MockTrafficClientMockRecorder) ListUes(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUes", reflect.TypeOf((*MockTrafficClient)(nil).ListUes), varargs...)
}

// WatchUes mocks base method.
func (m *MockTrafficClient) WatchUes(ctx context.Context, in *WatchUesRequest, opts ...grpc.CallOption) (Traffic_WatchUesClient, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "WatchUes", varargs...)
	ret0, _ := ret[0].(Traffic_WatchUesClient)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WatchUes indicates an expected call of WatchUes.
func (mr *MockTrafficClientMockRecorder) WatchUes(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchUes", reflect.TypeOf((*MockTrafficClient)(nil).WatchUes), varargs...)
}

// SetNumberUEs mocks base method.
func (m *MockTrafficClient) SetNumberUEs(ctx context.Context, in *SetNumberUEsRequest, opts ...grpc.CallOption) (*SetNumberUEsResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SetNumberUEs", varargs...)
	ret0, _ := ret[0].(*SetNumberUEsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetNumberUEs indicates an expected call of SetNumberUEs.
func (mr *MockTrafficClientMockRecorder) SetNumberUEs(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNumberUEs", reflect.TypeOf((*MockTrafficClient)(nil).SetNumberUEs), varargs...)
}

// ResetMetrics mocks base method.
func (m *MockTrafficClient) ResetMetrics(ctx context.Context, in *ResetMetricsMsg, opts ...grpc.CallOption) (*ResetMetricsMsg, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ResetMetrics", varargs...)
	ret0, _ := ret[0].(*ResetMetricsMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetMetrics indicates an expected call of ResetMetrics.
func (mr *MockTrafficClientMockRecorder) ResetMetrics(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetMetrics", reflect.TypeOf((*MockTrafficClient)(nil).ResetMetrics), varargs...)
}

// MockTraffic_ListRoutesClient is a mock of Traffic_ListRoutesClient interface.
type MockTraffic_ListRoutesClient struct {
	ctrl     *gomock.Controller
	recorder *MockTraffic_ListRoutesClientMockRecorder
}

// MockTraffic_ListRoutesClientMockRecorder is the mock recorder for MockTraffic_ListRoutesClient.
type MockTraffic_ListRoutesClientMockRecorder struct {
	mock *MockTraffic_ListRoutesClient
}

// NewMockTraffic_ListRoutesClient creates a new mock instance.
func NewMockTraffic_ListRoutesClient(ctrl *gomock.Controller) *MockTraffic_ListRoutesClient {
	mock := &MockTraffic_ListRoutesClient{ctrl: ctrl}
	mock.recorder = &MockTraffic_ListRoutesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTraffic_ListRoutesClient) EXPECT() *MockTraffic_ListRoutesClientMockRecorder {
	return m.recorder
}

// Recv mocks base method.
func (m *MockTraffic_ListRoutesClient) Recv() (*ListRoutesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*ListRoutesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockTraffic_ListRoutesClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockTraffic_ListRoutesClient)(nil).Recv))
}

// Header mocks base method.
func (m *MockTraffic_ListRoutesClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockTraffic_ListRoutesClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockTraffic_ListRoutesClient)(nil).Header))
}

// Trailer mocks base method.
func (m *MockTraffic_ListRoutesClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockTraffic_ListRoutesClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockTraffic_ListRoutesClient)(nil).Trailer))
}

// CloseSend mocks base method.
func (m *MockTraffic_ListRoutesClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockTraffic_ListRoutesClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockTraffic_ListRoutesClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockTraffic_ListRoutesClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockTraffic_ListRoutesClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockTraffic_ListRoutesClient)(nil).Context))
}

// SendMsg mocks base method.
func (m_2 *MockTraffic_ListRoutesClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockTraffic_ListRoutesClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockTraffic_ListRoutesClient)(nil).SendMsg), m)
}

// RecvMsg mocks base method.
func (m_2 *MockTraffic_ListRoutesClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockTraffic_ListRoutesClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockTraffic_ListRoutesClient)(nil).RecvMsg), m)
}

// MockTraffic_ListUesClient is a mock of Traffic_ListUesClient interface.
type MockTraffic_ListUesClient struct {
	ctrl     *gomock.Controller
	recorder *MockTraffic_ListUesClientMockRecorder
}

// MockTraffic_ListUesClientMockRecorder is the mock recorder for MockTraffic_ListUesClient.
type MockTraffic_ListUesClientMockRecorder struct {
	mock *MockTraffic_ListUesClient
}

// NewMockTraffic_ListUesClient creates a new mock instance.
func NewMockTraffic_ListUesClient(ctrl *gomock.Controller) *MockTraffic_ListUesClient {
	mock := &MockTraffic_ListUesClient{ctrl: ctrl}
	mock.recorder = &MockTraffic_ListUesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTraffic_ListUesClient) EXPECT() *MockTraffic_ListUesClientMockRecorder {
	return m.recorder
}

// Recv mocks base method.
func (m *MockTraffic_ListUesClient) Recv() (*ListUesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*ListUesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockTraffic_ListUesClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockTraffic_ListUesClient)(nil).Recv))
}

// Header mocks base method.
func (m *MockTraffic_ListUesClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockTraffic_ListUesClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockTraffic_ListUesClient)(nil).Header))
}

// Trailer mocks base method.
func (m *MockTraffic_ListUesClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockTraffic_ListUesClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockTraffic_ListUesClient)(nil).Trailer))
}

// CloseSend mocks base method.
func (m *MockTraffic_ListUesClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockTraffic_ListUesClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockTraffic_ListUesClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockTraffic_ListUesClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockTraffic_ListUesClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockTraffic_ListUesClient)(nil).Context))
}

// SendMsg mocks base method.
func (m_2 *MockTraffic_ListUesClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockTraffic_ListUesClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockTraffic_ListUesClient)(nil).SendMsg), m)
}

// RecvMsg mocks base method.
func (m_2 *MockTraffic_ListUesClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockTraffic_ListUesClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockTraffic_ListUesClient)(nil).RecvMsg), m)
}

// MockTraffic_WatchUesClient is a mock of Traffic_WatchUesClient interface.
type MockTraffic_WatchUesClient struct {
	ctrl     *gomock.Controller
	recorder *MockTraffic_WatchUesClientMockRecorder
}

// MockTraffic_WatchUesClientMockRecorder is the mock recorder for MockTraffic_WatchUesClient.
type MockTraffic_WatchUesClientMockRecorder struct {
	mock *MockTraffic_WatchUesClient
}

// NewMockTraffic_WatchUesClient creates a new mock instance.
func NewMockTraffic_WatchUesClient(ctrl *gomock.Controller) *MockTraffic_WatchUesClient {
	mock := &MockTraffic_WatchUesClient{ctrl: ctrl}
	mock.recorder = &MockTraffic_WatchUesClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTraffic_WatchUesClient) EXPECT() *MockTraffic_WatchUesClientMockRecorder {
	return m.recorder
}

// Recv mocks base method.
func (m *MockTraffic_WatchUesClient) Recv() (*WatchUesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Recv")
	ret0, _ := ret[0].(*WatchUesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Recv indicates an expected call of Recv.
func (mr *MockTraffic_WatchUesClientMockRecorder) Recv() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Recv", reflect.TypeOf((*MockTraffic_WatchUesClient)(nil).Recv))
}

// Header mocks base method.
func (m *MockTraffic_WatchUesClient) Header() (metadata.MD, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Header")
	ret0, _ := ret[0].(metadata.MD)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Header indicates an expected call of Header.
func (mr *MockTraffic_WatchUesClientMockRecorder) Header() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Header", reflect.TypeOf((*MockTraffic_WatchUesClient)(nil).Header))
}

// Trailer mocks base method.
func (m *MockTraffic_WatchUesClient) Trailer() metadata.MD {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Trailer")
	ret0, _ := ret[0].(metadata.MD)
	return ret0
}

// Trailer indicates an expected call of Trailer.
func (mr *MockTraffic_WatchUesClientMockRecorder) Trailer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Trailer", reflect.TypeOf((*MockTraffic_WatchUesClient)(nil).Trailer))
}

// CloseSend mocks base method.
func (m *MockTraffic_WatchUesClient) CloseSend() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloseSend")
	ret0, _ := ret[0].(error)
	return ret0
}

// CloseSend indicates an expected call of CloseSend.
func (mr *MockTraffic_WatchUesClientMockRecorder) CloseSend() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloseSend", reflect.TypeOf((*MockTraffic_WatchUesClient)(nil).CloseSend))
}

// Context mocks base method.
func (m *MockTraffic_WatchUesClient) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockTraffic_WatchUesClientMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockTraffic_WatchUesClient)(nil).Context))
}

// SendMsg mocks base method.
func (m_2 *MockTraffic_WatchUesClient) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockTraffic_WatchUesClientMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockTraffic_WatchUesClient)(nil).SendMsg), m)
}

// RecvMsg mocks base method.
func (m_2 *MockTraffic_WatchUesClient) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockTraffic_WatchUesClientMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockTraffic_WatchUesClient)(nil).RecvMsg), m)
}

// MockTrafficServer is a mock of TrafficServer interface.
type MockTrafficServer struct {
	ctrl     *gomock.Controller
	recorder *MockTrafficServerMockRecorder
}

// MockTrafficServerMockRecorder is the mock recorder for MockTrafficServer.
type MockTrafficServerMockRecorder struct {
	mock *MockTrafficServer
}

// NewMockTrafficServer creates a new mock instance.
func NewMockTrafficServer(ctrl *gomock.Controller) *MockTrafficServer {
	mock := &MockTrafficServer{ctrl: ctrl}
	mock.recorder = &MockTrafficServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTrafficServer) EXPECT() *MockTrafficServerMockRecorder {
	return m.recorder
}

// GetMapLayout mocks base method.
func (m *MockTrafficServer) GetMapLayout(arg0 context.Context, arg1 *MapLayoutRequest) (*types.MapLayout, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMapLayout", arg0, arg1)
	ret0, _ := ret[0].(*types.MapLayout)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMapLayout indicates an expected call of GetMapLayout.
func (mr *MockTrafficServerMockRecorder) GetMapLayout(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMapLayout", reflect.TypeOf((*MockTrafficServer)(nil).GetMapLayout), arg0, arg1)
}

// ListRoutes mocks base method.
func (m *MockTrafficServer) ListRoutes(arg0 *ListRoutesRequest, arg1 Traffic_ListRoutesServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRoutes", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListRoutes indicates an expected call of ListRoutes.
func (mr *MockTrafficServerMockRecorder) ListRoutes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRoutes", reflect.TypeOf((*MockTrafficServer)(nil).ListRoutes), arg0, arg1)
}

// ListUes mocks base method.
func (m *MockTrafficServer) ListUes(arg0 *ListUesRequest, arg1 Traffic_ListUesServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUes", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ListUes indicates an expected call of ListUes.
func (mr *MockTrafficServerMockRecorder) ListUes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUes", reflect.TypeOf((*MockTrafficServer)(nil).ListUes), arg0, arg1)
}

// WatchUes mocks base method.
func (m *MockTrafficServer) WatchUes(arg0 *WatchUesRequest, arg1 Traffic_WatchUesServer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WatchUes", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// WatchUes indicates an expected call of WatchUes.
func (mr *MockTrafficServerMockRecorder) WatchUes(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WatchUes", reflect.TypeOf((*MockTrafficServer)(nil).WatchUes), arg0, arg1)
}

// SetNumberUEs mocks base method.
func (m *MockTrafficServer) SetNumberUEs(arg0 context.Context, arg1 *SetNumberUEsRequest) (*SetNumberUEsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNumberUEs", arg0, arg1)
	ret0, _ := ret[0].(*SetNumberUEsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetNumberUEs indicates an expected call of SetNumberUEs.
func (mr *MockTrafficServerMockRecorder) SetNumberUEs(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNumberUEs", reflect.TypeOf((*MockTrafficServer)(nil).SetNumberUEs), arg0, arg1)
}

// ResetMetrics mocks base method.
func (m *MockTrafficServer) ResetMetrics(arg0 context.Context, arg1 *ResetMetricsMsg) (*ResetMetricsMsg, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResetMetrics", arg0, arg1)
	ret0, _ := ret[0].(*ResetMetricsMsg)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResetMetrics indicates an expected call of ResetMetrics.
func (mr *MockTrafficServerMockRecorder) ResetMetrics(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResetMetrics", reflect.TypeOf((*MockTrafficServer)(nil).ResetMetrics), arg0, arg1)
}

// MockTraffic_ListRoutesServer is a mock of Traffic_ListRoutesServer interface.
type MockTraffic_ListRoutesServer struct {
	ctrl     *gomock.Controller
	recorder *MockTraffic_ListRoutesServerMockRecorder
}

// MockTraffic_ListRoutesServerMockRecorder is the mock recorder for MockTraffic_ListRoutesServer.
type MockTraffic_ListRoutesServerMockRecorder struct {
	mock *MockTraffic_ListRoutesServer
}

// NewMockTraffic_ListRoutesServer creates a new mock instance.
func NewMockTraffic_ListRoutesServer(ctrl *gomock.Controller) *MockTraffic_ListRoutesServer {
	mock := &MockTraffic_ListRoutesServer{ctrl: ctrl}
	mock.recorder = &MockTraffic_ListRoutesServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTraffic_ListRoutesServer) EXPECT() *MockTraffic_ListRoutesServerMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockTraffic_ListRoutesServer) Send(arg0 *ListRoutesResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockTraffic_ListRoutesServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockTraffic_ListRoutesServer)(nil).Send), arg0)
}

// SetHeader mocks base method.
func (m *MockTraffic_ListRoutesServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockTraffic_ListRoutesServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockTraffic_ListRoutesServer)(nil).SetHeader), arg0)
}

// SendHeader mocks base method.
func (m *MockTraffic_ListRoutesServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockTraffic_ListRoutesServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockTraffic_ListRoutesServer)(nil).SendHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockTraffic_ListRoutesServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockTraffic_ListRoutesServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockTraffic_ListRoutesServer)(nil).SetTrailer), arg0)
}

// Context mocks base method.
func (m *MockTraffic_ListRoutesServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockTraffic_ListRoutesServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockTraffic_ListRoutesServer)(nil).Context))
}

// SendMsg mocks base method.
func (m_2 *MockTraffic_ListRoutesServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockTraffic_ListRoutesServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockTraffic_ListRoutesServer)(nil).SendMsg), m)
}

// RecvMsg mocks base method.
func (m_2 *MockTraffic_ListRoutesServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockTraffic_ListRoutesServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockTraffic_ListRoutesServer)(nil).RecvMsg), m)
}

// MockTraffic_ListUesServer is a mock of Traffic_ListUesServer interface.
type MockTraffic_ListUesServer struct {
	ctrl     *gomock.Controller
	recorder *MockTraffic_ListUesServerMockRecorder
}

// MockTraffic_ListUesServerMockRecorder is the mock recorder for MockTraffic_ListUesServer.
type MockTraffic_ListUesServerMockRecorder struct {
	mock *MockTraffic_ListUesServer
}

// NewMockTraffic_ListUesServer creates a new mock instance.
func NewMockTraffic_ListUesServer(ctrl *gomock.Controller) *MockTraffic_ListUesServer {
	mock := &MockTraffic_ListUesServer{ctrl: ctrl}
	mock.recorder = &MockTraffic_ListUesServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTraffic_ListUesServer) EXPECT() *MockTraffic_ListUesServerMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockTraffic_ListUesServer) Send(arg0 *ListUesResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockTraffic_ListUesServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockTraffic_ListUesServer)(nil).Send), arg0)
}

// SetHeader mocks base method.
func (m *MockTraffic_ListUesServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockTraffic_ListUesServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockTraffic_ListUesServer)(nil).SetHeader), arg0)
}

// SendHeader mocks base method.
func (m *MockTraffic_ListUesServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockTraffic_ListUesServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockTraffic_ListUesServer)(nil).SendHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockTraffic_ListUesServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockTraffic_ListUesServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockTraffic_ListUesServer)(nil).SetTrailer), arg0)
}

// Context mocks base method.
func (m *MockTraffic_ListUesServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockTraffic_ListUesServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockTraffic_ListUesServer)(nil).Context))
}

// SendMsg mocks base method.
func (m_2 *MockTraffic_ListUesServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockTraffic_ListUesServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockTraffic_ListUesServer)(nil).SendMsg), m)
}

// RecvMsg mocks base method.
func (m_2 *MockTraffic_ListUesServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockTraffic_ListUesServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockTraffic_ListUesServer)(nil).RecvMsg), m)
}

// MockTraffic_WatchUesServer is a mock of Traffic_WatchUesServer interface.
type MockTraffic_WatchUesServer struct {
	ctrl     *gomock.Controller
	recorder *MockTraffic_WatchUesServerMockRecorder
}

// MockTraffic_WatchUesServerMockRecorder is the mock recorder for MockTraffic_WatchUesServer.
type MockTraffic_WatchUesServerMockRecorder struct {
	mock *MockTraffic_WatchUesServer
}

// NewMockTraffic_WatchUesServer creates a new mock instance.
func NewMockTraffic_WatchUesServer(ctrl *gomock.Controller) *MockTraffic_WatchUesServer {
	mock := &MockTraffic_WatchUesServer{ctrl: ctrl}
	mock.recorder = &MockTraffic_WatchUesServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTraffic_WatchUesServer) EXPECT() *MockTraffic_WatchUesServerMockRecorder {
	return m.recorder
}

// Send mocks base method.
func (m *MockTraffic_WatchUesServer) Send(arg0 *WatchUesResponse) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Send", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Send indicates an expected call of Send.
func (mr *MockTraffic_WatchUesServerMockRecorder) Send(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Send", reflect.TypeOf((*MockTraffic_WatchUesServer)(nil).Send), arg0)
}

// SetHeader mocks base method.
func (m *MockTraffic_WatchUesServer) SetHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetHeader indicates an expected call of SetHeader.
func (mr *MockTraffic_WatchUesServerMockRecorder) SetHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetHeader", reflect.TypeOf((*MockTraffic_WatchUesServer)(nil).SetHeader), arg0)
}

// SendHeader mocks base method.
func (m *MockTraffic_WatchUesServer) SendHeader(arg0 metadata.MD) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendHeader", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendHeader indicates an expected call of SendHeader.
func (mr *MockTraffic_WatchUesServerMockRecorder) SendHeader(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendHeader", reflect.TypeOf((*MockTraffic_WatchUesServer)(nil).SendHeader), arg0)
}

// SetTrailer mocks base method.
func (m *MockTraffic_WatchUesServer) SetTrailer(arg0 metadata.MD) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetTrailer", arg0)
}

// SetTrailer indicates an expected call of SetTrailer.
func (mr *MockTraffic_WatchUesServerMockRecorder) SetTrailer(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTrailer", reflect.TypeOf((*MockTraffic_WatchUesServer)(nil).SetTrailer), arg0)
}

// Context mocks base method.
func (m *MockTraffic_WatchUesServer) Context() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Context")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Context indicates an expected call of Context.
func (mr *MockTraffic_WatchUesServerMockRecorder) Context() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Context", reflect.TypeOf((*MockTraffic_WatchUesServer)(nil).Context))
}

// SendMsg mocks base method.
func (m_2 *MockTraffic_WatchUesServer) SendMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "SendMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMsg indicates an expected call of SendMsg.
func (mr *MockTraffic_WatchUesServerMockRecorder) SendMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMsg", reflect.TypeOf((*MockTraffic_WatchUesServer)(nil).SendMsg), m)
}

// RecvMsg mocks base method.
func (m_2 *MockTraffic_WatchUesServer) RecvMsg(m interface{}) error {
	m_2.ctrl.T.Helper()
	ret := m_2.ctrl.Call(m_2, "RecvMsg", m)
	ret0, _ := ret[0].(error)
	return ret0
}

// RecvMsg indicates an expected call of RecvMsg.
func (mr *MockTraffic_WatchUesServerMockRecorder) RecvMsg(m interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecvMsg", reflect.TypeOf((*MockTraffic_WatchUesServer)(nil).RecvMsg), m)
}
