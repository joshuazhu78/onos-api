# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: onos/onos-ric/nb/apps/onos-ric-son.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import AsyncIterator, Optional

import betterproto
import grpclib


class DrlCmdType(betterproto.Enum):
    """Change DRL Command type"""

    # NONE indicates no DRL command is generated
    CMDNONE = 0
    # TOWER maps DRL commands to tower power adjustment
    CMDTOWER = 1
    # HOPARAM maps DRL commands to handover parameter adjustment
    CMDHOPARAM = 2
    # HO maps DRL commands to handover command
    CMDHO = 3
    # TOWERHOPARAM maps DRL commands to tower power adj and handover parameters
    CMDTOWERHOPARAM = 4
    # TOWERHO maps DRL commands to tower power adj and handover
    CMDTOWERHO = 5


@dataclass(eq=False, repr=False)
class SetDrlCmdTypeRequest(betterproto.Message):
    type: "DrlCmdType" = betterproto.enum_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class SetDrlCmdTypeResponse(betterproto.Message):
    type: "DrlCmdType" = betterproto.enum_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class RicSonConfigRequest(betterproto.Message):
    pass

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class RicSonConfig(betterproto.Message):
    # DRL command type
    drl_cmd_type: "DrlCmdType" = betterproto.enum_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ListCellParamsRequest(betterproto.Message):
    # subscribe indicates whether to subscribe to events (e.g. ADD, UPDATE, and
    # REMOVE) that occur after all cells have been streamed to the client
    subscribe: bool = betterproto.bool_field(1)
    # option to request only changes that happen after the call
    without_replay: bool = betterproto.bool_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class ListCellParamsResponse(betterproto.Message):
    # cell is the cell change on which the event occurred
    cell_param: "_types__.HoParams" = betterproto.message_field(1)
    # type is a qualification of the type of change being made
    type: "_types__.Type" = betterproto.enum_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


class RicSonStub(betterproto.ServiceStub):
    """RicSon - provides a RIC-SON control interface to GUI"""

    async def get_ric_son_config(self) -> "RicSonConfig":

        request = RicSonConfigRequest()

        return await self._unary_unary(
            "/ricapps.son.RicSon/GetRicSonConfig", request, RicSonConfig
        )

    async def set_drl_cmd_type(
        self, *, type: "DrlCmdType" = None
    ) -> "SetDrlCmdTypeResponse":

        request = SetDrlCmdTypeRequest()
        request.type = type

        return await self._unary_unary(
            "/ricapps.son.RicSon/SetDrlCmdType", request, SetDrlCmdTypeResponse
        )

    async def list_cell_params(
        self, *, subscribe: bool = False, without_replay: bool = False
    ) -> AsyncIterator["ListCellParamsResponse"]:

        request = ListCellParamsRequest()
        request.subscribe = subscribe
        request.without_replay = without_replay

        async for response in self._unary_stream(
            "/ricapps.son.RicSon/ListCellParams",
            request,
            ListCellParamsResponse,
        ):
            yield response


from .. import types as _types__
