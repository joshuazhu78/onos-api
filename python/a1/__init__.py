# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: onos/onos-ric/nb/a1/a1.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import AsyncIterable, AsyncIterator, Iterable, List, Optional, Union

import betterproto
import grpclib


@dataclass(eq=False, repr=False)
class ProblemDetails(betterproto.Message):
    """ProblemDetails"""

    title: str = betterproto.string_field(1)
    detail: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class PolicyStatement(betterproto.Message):
    """
    PolicyStatement         Expression of a directive in an A1 policy that is
    related to policy objectives and/or policy resources and are to be applied
    to/for the entities identified by the scope identifier.
    """

    type: "_types__.PolicyType" = betterproto.enum_field(1)
    # QosObjectives
    qos_objectives: "qos.QosObjectives" = betterproto.message_field(
        2, group="statement"
    )
    # TspResources Traffic steering optimization
    tsp_resources: "tsp.TspResources" = betterproto.message_field(3, group="statement")

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Policy(betterproto.Message):
    """
    Policy an A1 policy which contains a scope identifier and one or more
    policy statements
    """

    scope_id: "_types__.ScopeIdentifier" = betterproto.message_field(1)
    policy_statement: List["PolicyStatement"] = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class CreateOrUpdateRequest(betterproto.Message):
    """CreateOrUpdateRequest a request to create or update a policy"""

    policy_id: "_types__.PolicyId" = betterproto.message_field(1)
    policy: "Policy" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class CreateOrUpdateResponse(betterproto.Message):
    """CreateOrUpdateResponse response to a CreateOrUpdateRequest"""

    policy: "Policy" = betterproto.message_field(1)
    status: "_types__.OperationStatus" = betterproto.enum_field(2)
    problem_details: "ProblemDetails" = betterproto.message_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class SinglePolicyResponse(betterproto.Message):
    """SinglePolicyResponse representation of a A1 single policy response"""

    policy: "Policy" = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class AllPolicyResponse(betterproto.Message):
    """
    AllPolicyResponse representation of a A1 All policy response which contains
    list of all policy IDs
    """

    policy_id: List["_types__.PolicyId"] = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class PolicyStatus(betterproto.Message):
    """
    PolicyStatus representation of a A1  policy enforcement status and reasons
    """

    enforce_status: "_types__.EnforcementStatusType" = betterproto.enum_field(1)
    enforce_reason: "_types__.EnforcementReasonType" = betterproto.enum_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class PolicyStatusResponse(betterproto.Message):
    """PolicyStatusResponse"""

    policy_status: "PolicyStatus" = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class QueryRequest(betterproto.Message):
    """QueryRequest a request to query about one or more than one policy"""

    # Policy Type
    type: "_types__.PolicyQueryType" = betterproto.enum_field(1)
    # PolicyID
    policy_id: "_types__.PolicyId" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class QueryResponse(betterproto.Message):
    """QueryResponse a response to a query request"""

    single_policy_response: "SinglePolicyResponse" = betterproto.message_field(
        1, group="response"
    )
    all_policy_response: "AllPolicyResponse" = betterproto.message_field(
        2, group="response"
    )
    policy_status_response: "PolicyStatusResponse" = betterproto.message_field(
        3, group="response"
    )
    status: "_types__.OperationStatus" = betterproto.enum_field(4)
    problem_details: "ProblemDetails" = betterproto.message_field(5)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class DeleteRequest(betterproto.Message):
    """DeleteRequest a request to delete a policy"""

    policy_id: "_types__.PolicyId" = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class DeleteResponse(betterproto.Message):
    """DeleteResponse a response to a DeleteRequest"""

    status: "_types__.OperationStatus" = betterproto.enum_field(1)
    problem_details: "ProblemDetails" = betterproto.message_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class NotifyRequest(betterproto.Message):
    """
    NotifyRequest a request to get updates about changes in the policy
    enforcement status for an A1 policy;
    """

    pass

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class NotifyResponse(betterproto.Message):
    """
    NotifyResponse a notification response contains the information about
    changes and causes
    """

    policy_status: "PolicyStatus" = betterproto.message_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


class A1Stub(betterproto.ServiceStub):
    """a1 A1 policy based service"""

    async def create_or_update(
        self, *, policy_id: "_types__.PolicyId" = None, policy: "Policy" = None
    ) -> "CreateOrUpdateResponse":
        """CreateOrUpdate creates an A1 policy"""

        request = CreateOrUpdateRequest()
        if policy_id is not None:
            request.policy_id = policy_id
        if policy is not None:
            request.policy = policy

        return await self._unary_unary(
            "/a1.a1/CreateOrUpdate", request, CreateOrUpdateResponse
        )

    async def query(
        self,
        *,
        type: "_types__.PolicyQueryType" = None,
        policy_id: "_types__.PolicyId" = None,
    ) -> AsyncIterator["QueryResponse"]:
        """Query queries about one or more than one A1 policies"""

        request = QueryRequest()
        request.type = type
        if policy_id is not None:
            request.policy_id = policy_id

        async for response in self._unary_stream(
            "/a1.a1/Query",
            request,
            QueryResponse,
        ):
            yield response

    async def delete(
        self, *, policy_id: "_types__.PolicyId" = None
    ) -> "DeleteResponse":
        """Delete deletes an A1 policy"""

        request = DeleteRequest()
        if policy_id is not None:
            request.policy_id = policy_id

        return await self._unary_unary("/a1.a1/Delete", request, DeleteResponse)

    async def notify(
        self,
        request_iterator: Union[
            AsyncIterable["NotifyRequest"], Iterable["NotifyRequest"]
        ],
    ) -> AsyncIterator["NotifyResponse"]:
        """
        Notify notify about an enforcement status change of a policy between
        'enforced' and 'not enforced'.
        """

        async for response in self._stream_stream(
            "/a1.a1/Notify",
            request_iterator,
            NotifyRequest,
            NotifyResponse,
        ):
            yield response


from . import qos
from . import tsp
from .. import types as _types__
