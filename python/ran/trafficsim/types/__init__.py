# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: onos/ran-simulator/types/types.proto
# plugin: python-betterproto
from dataclasses import dataclass
from typing import Dict, List

import betterproto


class PathlossModelType(betterproto.Enum):
    """Pathloss model type"""

    DEFAULT = 0
    GPPUMALOS = 1
    GPPUMANLOS = 2
    GPPINHLOS = 3
    GPPINHNLOS = 4
    GPPUMILOS = 5
    GPPUMINLOS = 6
    GPPUMA = 7
    GPPINH = 8
    GPPUMI = 9


@dataclass(eq=False, repr=False)
class Point(betterproto.Message):
    lat: float = betterproto.double_field(1)
    lng: float = betterproto.double_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Sector(betterproto.Message):
    azimuth: int = betterproto.int32_field(1)
    arc: int = betterproto.int32_field(2)
    centroid: "Point" = betterproto.message_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Route(betterproto.Message):
    name: int = betterproto.uint64_field(1)
    waypoints: List["Point"] = betterproto.message_field(2)
    color: str = betterproto.string_field(3)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Ue(betterproto.Message):
    imsi: int = betterproto.uint64_field(1)
    type: str = betterproto.string_field(2)
    position: "Point" = betterproto.message_field(4)
    rotation: int = betterproto.uint32_field(5)
    serving_tower: "Ecgi" = betterproto.message_field(7)
    serving_tower_strength: float = betterproto.double_field(8)
    tower1: "Ecgi" = betterproto.message_field(9)
    tower1_strength: float = betterproto.double_field(10)
    tower2: "Ecgi" = betterproto.message_field(11)
    tower2_strength: float = betterproto.double_field(12)
    tower3: "Ecgi" = betterproto.message_field(13)
    tower3_strength: float = betterproto.double_field(14)
    crnti: str = betterproto.string_field(15)
    admitted: bool = betterproto.bool_field(16)
    metrics: "UeMetrics" = betterproto.message_field(17)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class UeMetrics(betterproto.Message):
    # Latency (in nanoseconds) of the most recent hand-over
    ho_latency: int = betterproto.int64_field(1)
    # Handover report timestamp (in nanoseconds since epoch)
    ho_report_timestamp: int = betterproto.int64_field(2)
    # flag to indicate the first measurement
    is_first: bool = betterproto.bool_field(3)
    # Serving cell SINR in dB
    serving_sinr: float = betterproto.float_field(4)
    # PDCP throughput
    pdcp_throughput: float = betterproto.float_field(5)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Ecgi(betterproto.Message):
    """station's unique ID"""

    ec_id: str = betterproto.string_field(1)
    plmn_id: str = betterproto.string_field(2)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class Cell(betterproto.Message):
    ecgi: "Ecgi" = betterproto.message_field(1)
    location: "Point" = betterproto.message_field(3)
    sector: "Sector" = betterproto.message_field(4)
    color: str = betterproto.string_field(5)
    max_u_es: int = betterproto.uint32_field(6)
    neighbors: List["Ecgi"] = betterproto.message_field(7)
    # The cell transmit power in decibels
    tx_powerd_b: float = betterproto.double_field(8)
    # crntis maps a ue's name to its crnti
    crnti_map: Dict[str, int] = betterproto.map_field(
        9, betterproto.TYPE_STRING, betterproto.TYPE_UINT64
    )
    crnti_index: int = betterproto.uint32_field(10)
    port: int = betterproto.uint32_field(11)
    metrics: "CellMetrics" = betterproto.message_field(12)
    height: float = betterproto.double_field(13)
    frequency: float = betterproto.double_field(14)
    thetadegree: float = betterproto.double_field(15)
    pci: int = betterproto.uint32_field(16)
    # address is the host:port of the topo.device
    address: str = betterproto.string_field(17)
    # e2taddress is the host:port of ric platform
    e2_taddress: str = betterproto.string_field(18)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class CellMetrics(betterproto.Message):
    # Instant cell spectrum efficiency in bps/Hz
    inst_spec_effi: float = betterproto.float_field(1)

    def __post_init__(self) -> None:
        super().__post_init__()


@dataclass(eq=False, repr=False)
class MapLayout(betterproto.Message):
    # Map center latitude and longitude
    center: "Point" = betterproto.message_field(1)
    # The starting Zoom level
    zoom: float = betterproto.float_field(2)
    # Show map as faded on start
    fade: bool = betterproto.bool_field(3)
    # Show routes on start
    show_routes: bool = betterproto.bool_field(4)
    # Show power as circle on start
    show_power: bool = betterproto.bool_field(5)
    # Max number of UEs for complete simulation
    min_ues: int = betterproto.uint32_field(6)
    # Max number of UEs for complete simulation
    max_ues: int = betterproto.uint32_field(7)
    # the current number of routes
    current_routes: int = betterproto.uint32_field(8)
    # Ratio of random locations diameter to tower grid width
    locations_scale: float = betterproto.float_field(9)
    # Pathloss model type
    pathloss_model: "PathlossModelType" = betterproto.enum_field(10)
    # mean UE move speed in km/h
    mean_ue_speed: float = betterproto.float_field(11)

    def __post_init__(self) -> None:
        super().__post_init__()
