// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onos/mho/mho.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_onos_2fmho_2fmho_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_onos_2fmho_2fmho_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_onos_2fmho_2fmho_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_onos_2fmho_2fmho_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_onos_2fmho_2fmho_2eproto;
namespace onos {
namespace mho {
class Cell;
struct CellDefaultTypeInternal;
extern CellDefaultTypeInternal _Cell_default_instance_;
class CellList;
struct CellListDefaultTypeInternal;
extern CellListDefaultTypeInternal _CellList_default_instance_;
class GetMhoParamRequest;
struct GetMhoParamRequestDefaultTypeInternal;
extern GetMhoParamRequestDefaultTypeInternal _GetMhoParamRequest_default_instance_;
class GetMhoParamResponse;
struct GetMhoParamResponseDefaultTypeInternal;
extern GetMhoParamResponseDefaultTypeInternal _GetMhoParamResponse_default_instance_;
class GetRequest;
struct GetRequestDefaultTypeInternal;
extern GetRequestDefaultTypeInternal _GetRequest_default_instance_;
class SetMhoParamRequest;
struct SetMhoParamRequestDefaultTypeInternal;
extern SetMhoParamRequestDefaultTypeInternal _SetMhoParamRequest_default_instance_;
class SetMhoParamResponse;
struct SetMhoParamResponseDefaultTypeInternal;
extern SetMhoParamResponseDefaultTypeInternal _SetMhoParamResponse_default_instance_;
class UE;
struct UEDefaultTypeInternal;
extern UEDefaultTypeInternal _UE_default_instance_;
class UeList;
struct UeListDefaultTypeInternal;
extern UeListDefaultTypeInternal _UeList_default_instance_;
}  // namespace mho
}  // namespace onos
PROTOBUF_NAMESPACE_OPEN
template<> ::onos::mho::Cell* Arena::CreateMaybeMessage<::onos::mho::Cell>(Arena*);
template<> ::onos::mho::CellList* Arena::CreateMaybeMessage<::onos::mho::CellList>(Arena*);
template<> ::onos::mho::GetMhoParamRequest* Arena::CreateMaybeMessage<::onos::mho::GetMhoParamRequest>(Arena*);
template<> ::onos::mho::GetMhoParamResponse* Arena::CreateMaybeMessage<::onos::mho::GetMhoParamResponse>(Arena*);
template<> ::onos::mho::GetRequest* Arena::CreateMaybeMessage<::onos::mho::GetRequest>(Arena*);
template<> ::onos::mho::SetMhoParamRequest* Arena::CreateMaybeMessage<::onos::mho::SetMhoParamRequest>(Arena*);
template<> ::onos::mho::SetMhoParamResponse* Arena::CreateMaybeMessage<::onos::mho::SetMhoParamResponse>(Arena*);
template<> ::onos::mho::UE* Arena::CreateMaybeMessage<::onos::mho::UE>(Arena*);
template<> ::onos::mho::UeList* Arena::CreateMaybeMessage<::onos::mho::UeList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace onos {
namespace mho {

enum MhoParamType : int {
  ALL = 0,
  A3OFFSET = 1,
  HYSTERESIS = 2,
  TIMETOTRIGGER = 3,
  MhoParamType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MhoParamType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MhoParamType_IsValid(int value);
constexpr MhoParamType MhoParamType_MIN = ALL;
constexpr MhoParamType MhoParamType_MAX = TIMETOTRIGGER;
constexpr int MhoParamType_ARRAYSIZE = MhoParamType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MhoParamType_descriptor();
template<typename T>
inline const std::string& MhoParamType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MhoParamType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MhoParamType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MhoParamType_descriptor(), enum_t_value);
}
inline bool MhoParamType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MhoParamType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MhoParamType>(
    MhoParamType_descriptor(), name, value);
}
// ===================================================================

class GetMhoParamRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.mho.GetMhoParamRequest) */ {
 public:
  inline GetMhoParamRequest() : GetMhoParamRequest(nullptr) {}
  ~GetMhoParamRequest() override;
  explicit constexpr GetMhoParamRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMhoParamRequest(const GetMhoParamRequest& from);
  GetMhoParamRequest(GetMhoParamRequest&& from) noexcept
    : GetMhoParamRequest() {
    *this = ::std::move(from);
  }

  inline GetMhoParamRequest& operator=(const GetMhoParamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMhoParamRequest& operator=(GetMhoParamRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMhoParamRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMhoParamRequest* internal_default_instance() {
    return reinterpret_cast<const GetMhoParamRequest*>(
               &_GetMhoParamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetMhoParamRequest& a, GetMhoParamRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMhoParamRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMhoParamRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMhoParamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMhoParamRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetMhoParamRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetMhoParamRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMhoParamRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.mho.GetMhoParamRequest";
  }
  protected:
  explicit GetMhoParamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHoParamTypeFieldNumber = 1,
  };
  // .onos.mho.MhoParamType hoParamType = 1;
  void clear_hoparamtype();
  ::onos::mho::MhoParamType hoparamtype() const;
  void set_hoparamtype(::onos::mho::MhoParamType value);
  private:
  ::onos::mho::MhoParamType _internal_hoparamtype() const;
  void _internal_set_hoparamtype(::onos::mho::MhoParamType value);
  public:

  // @@protoc_insertion_point(class_scope:onos.mho.GetMhoParamRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int hoparamtype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fmho_2fmho_2eproto;
};
// -------------------------------------------------------------------

class GetMhoParamResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.mho.GetMhoParamResponse) */ {
 public:
  inline GetMhoParamResponse() : GetMhoParamResponse(nullptr) {}
  ~GetMhoParamResponse() override;
  explicit constexpr GetMhoParamResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetMhoParamResponse(const GetMhoParamResponse& from);
  GetMhoParamResponse(GetMhoParamResponse&& from) noexcept
    : GetMhoParamResponse() {
    *this = ::std::move(from);
  }

  inline GetMhoParamResponse& operator=(const GetMhoParamResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMhoParamResponse& operator=(GetMhoParamResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMhoParamResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMhoParamResponse* internal_default_instance() {
    return reinterpret_cast<const GetMhoParamResponse*>(
               &_GetMhoParamResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetMhoParamResponse& a, GetMhoParamResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetMhoParamResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMhoParamResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMhoParamResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetMhoParamResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetMhoParamResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetMhoParamResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetMhoParamResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.mho.GetMhoParamResponse";
  }
  protected:
  explicit GetMhoParamResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHoParamTypeFieldNumber = 1,
    kA3OffsetFieldNumber = 2,
    kHysteresisFieldNumber = 3,
    kTimeToTriggerFieldNumber = 4,
  };
  // .onos.mho.MhoParamType hoParamType = 1;
  void clear_hoparamtype();
  ::onos::mho::MhoParamType hoparamtype() const;
  void set_hoparamtype(::onos::mho::MhoParamType value);
  private:
  ::onos::mho::MhoParamType _internal_hoparamtype() const;
  void _internal_set_hoparamtype(::onos::mho::MhoParamType value);
  public:

  // int32 a3Offset = 2;
  void clear_a3offset();
  int32_t a3offset() const;
  void set_a3offset(int32_t value);
  private:
  int32_t _internal_a3offset() const;
  void _internal_set_a3offset(int32_t value);
  public:

  // int32 hysteresis = 3;
  void clear_hysteresis();
  int32_t hysteresis() const;
  void set_hysteresis(int32_t value);
  private:
  int32_t _internal_hysteresis() const;
  void _internal_set_hysteresis(int32_t value);
  public:

  // int32 timeToTrigger = 4;
  void clear_timetotrigger();
  int32_t timetotrigger() const;
  void set_timetotrigger(int32_t value);
  private:
  int32_t _internal_timetotrigger() const;
  void _internal_set_timetotrigger(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.mho.GetMhoParamResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int hoparamtype_;
  int32_t a3offset_;
  int32_t hysteresis_;
  int32_t timetotrigger_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fmho_2fmho_2eproto;
};
// -------------------------------------------------------------------

class SetMhoParamRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.mho.SetMhoParamRequest) */ {
 public:
  inline SetMhoParamRequest() : SetMhoParamRequest(nullptr) {}
  ~SetMhoParamRequest() override;
  explicit constexpr SetMhoParamRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetMhoParamRequest(const SetMhoParamRequest& from);
  SetMhoParamRequest(SetMhoParamRequest&& from) noexcept
    : SetMhoParamRequest() {
    *this = ::std::move(from);
  }

  inline SetMhoParamRequest& operator=(const SetMhoParamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetMhoParamRequest& operator=(SetMhoParamRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetMhoParamRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetMhoParamRequest* internal_default_instance() {
    return reinterpret_cast<const SetMhoParamRequest*>(
               &_SetMhoParamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SetMhoParamRequest& a, SetMhoParamRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetMhoParamRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetMhoParamRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetMhoParamRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetMhoParamRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetMhoParamRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetMhoParamRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetMhoParamRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.mho.SetMhoParamRequest";
  }
  protected:
  explicit SetMhoParamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHoParamTypeFieldNumber = 1,
    kA3OffsetFieldNumber = 2,
    kHysteresisFieldNumber = 3,
    kTimeToTriggerFieldNumber = 4,
  };
  // .onos.mho.MhoParamType hoParamType = 1;
  void clear_hoparamtype();
  ::onos::mho::MhoParamType hoparamtype() const;
  void set_hoparamtype(::onos::mho::MhoParamType value);
  private:
  ::onos::mho::MhoParamType _internal_hoparamtype() const;
  void _internal_set_hoparamtype(::onos::mho::MhoParamType value);
  public:

  // int32 a3Offset = 2;
  void clear_a3offset();
  int32_t a3offset() const;
  void set_a3offset(int32_t value);
  private:
  int32_t _internal_a3offset() const;
  void _internal_set_a3offset(int32_t value);
  public:

  // int32 hysteresis = 3;
  void clear_hysteresis();
  int32_t hysteresis() const;
  void set_hysteresis(int32_t value);
  private:
  int32_t _internal_hysteresis() const;
  void _internal_set_hysteresis(int32_t value);
  public:

  // int32 timeToTrigger = 4;
  void clear_timetotrigger();
  int32_t timetotrigger() const;
  void set_timetotrigger(int32_t value);
  private:
  int32_t _internal_timetotrigger() const;
  void _internal_set_timetotrigger(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.mho.SetMhoParamRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int hoparamtype_;
  int32_t a3offset_;
  int32_t hysteresis_;
  int32_t timetotrigger_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fmho_2fmho_2eproto;
};
// -------------------------------------------------------------------

class SetMhoParamResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.mho.SetMhoParamResponse) */ {
 public:
  inline SetMhoParamResponse() : SetMhoParamResponse(nullptr) {}
  ~SetMhoParamResponse() override;
  explicit constexpr SetMhoParamResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetMhoParamResponse(const SetMhoParamResponse& from);
  SetMhoParamResponse(SetMhoParamResponse&& from) noexcept
    : SetMhoParamResponse() {
    *this = ::std::move(from);
  }

  inline SetMhoParamResponse& operator=(const SetMhoParamResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetMhoParamResponse& operator=(SetMhoParamResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetMhoParamResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetMhoParamResponse* internal_default_instance() {
    return reinterpret_cast<const SetMhoParamResponse*>(
               &_SetMhoParamResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SetMhoParamResponse& a, SetMhoParamResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetMhoParamResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetMhoParamResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetMhoParamResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetMhoParamResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetMhoParamResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetMhoParamResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetMhoParamResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.mho.SetMhoParamResponse";
  }
  protected:
  explicit SetMhoParamResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:onos.mho.SetMhoParamResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fmho_2fmho_2eproto;
};
// -------------------------------------------------------------------

class GetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:onos.mho.GetRequest) */ {
 public:
  inline GetRequest() : GetRequest(nullptr) {}
  explicit constexpr GetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRequest(const GetRequest& from);
  GetRequest(GetRequest&& from) noexcept
    : GetRequest() {
    *this = ::std::move(from);
  }

  inline GetRequest& operator=(const GetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRequest& operator=(GetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRequest* internal_default_instance() {
    return reinterpret_cast<const GetRequest*>(
               &_GetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetRequest& a, GetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.mho.GetRequest";
  }
  protected:
  explicit GetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onos.mho.GetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fmho_2fmho_2eproto;
};
// -------------------------------------------------------------------

class UeList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.mho.UeList) */ {
 public:
  inline UeList() : UeList(nullptr) {}
  ~UeList() override;
  explicit constexpr UeList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UeList(const UeList& from);
  UeList(UeList&& from) noexcept
    : UeList() {
    *this = ::std::move(from);
  }

  inline UeList& operator=(const UeList& from) {
    CopyFrom(from);
    return *this;
  }
  inline UeList& operator=(UeList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UeList& default_instance() {
    return *internal_default_instance();
  }
  static inline const UeList* internal_default_instance() {
    return reinterpret_cast<const UeList*>(
               &_UeList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UeList& a, UeList& b) {
    a.Swap(&b);
  }
  inline void Swap(UeList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UeList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UeList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UeList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UeList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UeList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UeList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.mho.UeList";
  }
  protected:
  explicit UeList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUesFieldNumber = 1,
  };
  // repeated .onos.mho.UE ues = 1;
  int ues_size() const;
  private:
  int _internal_ues_size() const;
  public:
  void clear_ues();
  ::onos::mho::UE* mutable_ues(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::mho::UE >*
      mutable_ues();
  private:
  const ::onos::mho::UE& _internal_ues(int index) const;
  ::onos::mho::UE* _internal_add_ues();
  public:
  const ::onos::mho::UE& ues(int index) const;
  ::onos::mho::UE* add_ues();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::mho::UE >&
      ues() const;

  // @@protoc_insertion_point(class_scope:onos.mho.UeList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::mho::UE > ues_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fmho_2fmho_2eproto;
};
// -------------------------------------------------------------------

class CellList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.mho.CellList) */ {
 public:
  inline CellList() : CellList(nullptr) {}
  ~CellList() override;
  explicit constexpr CellList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CellList(const CellList& from);
  CellList(CellList&& from) noexcept
    : CellList() {
    *this = ::std::move(from);
  }

  inline CellList& operator=(const CellList& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellList& operator=(CellList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellList& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellList* internal_default_instance() {
    return reinterpret_cast<const CellList*>(
               &_CellList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(CellList& a, CellList& b) {
    a.Swap(&b);
  }
  inline void Swap(CellList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CellList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CellList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CellList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CellList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.mho.CellList";
  }
  protected:
  explicit CellList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellsFieldNumber = 1,
  };
  // repeated .onos.mho.Cell cells = 1;
  int cells_size() const;
  private:
  int _internal_cells_size() const;
  public:
  void clear_cells();
  ::onos::mho::Cell* mutable_cells(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::mho::Cell >*
      mutable_cells();
  private:
  const ::onos::mho::Cell& _internal_cells(int index) const;
  ::onos::mho::Cell* _internal_add_cells();
  public:
  const ::onos::mho::Cell& cells(int index) const;
  ::onos::mho::Cell* add_cells();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::mho::Cell >&
      cells() const;

  // @@protoc_insertion_point(class_scope:onos.mho.CellList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::mho::Cell > cells_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fmho_2fmho_2eproto;
};
// -------------------------------------------------------------------

class UE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.mho.UE) */ {
 public:
  inline UE() : UE(nullptr) {}
  ~UE() override;
  explicit constexpr UE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UE(const UE& from);
  UE(UE&& from) noexcept
    : UE() {
    *this = ::std::move(from);
  }

  inline UE& operator=(const UE& from) {
    CopyFrom(from);
    return *this;
  }
  inline UE& operator=(UE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UE& default_instance() {
    return *internal_default_instance();
  }
  static inline const UE* internal_default_instance() {
    return reinterpret_cast<const UE*>(
               &_UE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(UE& a, UE& b) {
    a.Swap(&b);
  }
  inline void Swap(UE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UE& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.mho.UE";
  }
  protected:
  explicit UE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUeIdFieldNumber = 1,
    kRrcStateFieldNumber = 2,
    kCgiFieldNumber = 3,
  };
  // string ue_id = 1;
  void clear_ue_id();
  const std::string& ue_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ue_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ue_id();
  PROTOBUF_NODISCARD std::string* release_ue_id();
  void set_allocated_ue_id(std::string* ue_id);
  private:
  const std::string& _internal_ue_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ue_id(const std::string& value);
  std::string* _internal_mutable_ue_id();
  public:

  // string rrc_state = 2;
  void clear_rrc_state();
  const std::string& rrc_state() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_rrc_state(ArgT0&& arg0, ArgT... args);
  std::string* mutable_rrc_state();
  PROTOBUF_NODISCARD std::string* release_rrc_state();
  void set_allocated_rrc_state(std::string* rrc_state);
  private:
  const std::string& _internal_rrc_state() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_rrc_state(const std::string& value);
  std::string* _internal_mutable_rrc_state();
  public:

  // string cgi = 3;
  void clear_cgi();
  const std::string& cgi() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cgi(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cgi();
  PROTOBUF_NODISCARD std::string* release_cgi();
  void set_allocated_cgi(std::string* cgi);
  private:
  const std::string& _internal_cgi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cgi(const std::string& value);
  std::string* _internal_mutable_cgi();
  public:

  // @@protoc_insertion_point(class_scope:onos.mho.UE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ue_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr rrc_state_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cgi_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fmho_2fmho_2eproto;
};
// -------------------------------------------------------------------

class Cell final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.mho.Cell) */ {
 public:
  inline Cell() : Cell(nullptr) {}
  ~Cell() override;
  explicit constexpr Cell(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Cell(const Cell& from);
  Cell(Cell&& from) noexcept
    : Cell() {
    *this = ::std::move(from);
  }

  inline Cell& operator=(const Cell& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cell& operator=(Cell&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Cell& default_instance() {
    return *internal_default_instance();
  }
  static inline const Cell* internal_default_instance() {
    return reinterpret_cast<const Cell*>(
               &_Cell_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Cell& a, Cell& b) {
    a.Swap(&b);
  }
  inline void Swap(Cell* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cell* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Cell* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Cell>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Cell& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Cell& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cell* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.mho.Cell";
  }
  protected:
  explicit Cell(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCgiFieldNumber = 1,
    kNumUesFieldNumber = 2,
    kCumulativeHandoversInFieldNumber = 4,
    kCumulativeHandoversOutFieldNumber = 5,
  };
  // string cgi = 1;
  void clear_cgi();
  const std::string& cgi() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cgi(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cgi();
  PROTOBUF_NODISCARD std::string* release_cgi();
  void set_allocated_cgi(std::string* cgi);
  private:
  const std::string& _internal_cgi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cgi(const std::string& value);
  std::string* _internal_mutable_cgi();
  public:

  // int64 num_ues = 2;
  void clear_num_ues();
  int64_t num_ues() const;
  void set_num_ues(int64_t value);
  private:
  int64_t _internal_num_ues() const;
  void _internal_set_num_ues(int64_t value);
  public:

  // int64 cumulative_handovers_in = 4;
  void clear_cumulative_handovers_in();
  int64_t cumulative_handovers_in() const;
  void set_cumulative_handovers_in(int64_t value);
  private:
  int64_t _internal_cumulative_handovers_in() const;
  void _internal_set_cumulative_handovers_in(int64_t value);
  public:

  // int64 cumulative_handovers_out = 5;
  void clear_cumulative_handovers_out();
  int64_t cumulative_handovers_out() const;
  void set_cumulative_handovers_out(int64_t value);
  private:
  int64_t _internal_cumulative_handovers_out() const;
  void _internal_set_cumulative_handovers_out(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.mho.Cell)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cgi_;
  int64_t num_ues_;
  int64_t cumulative_handovers_in_;
  int64_t cumulative_handovers_out_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fmho_2fmho_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetMhoParamRequest

// .onos.mho.MhoParamType hoParamType = 1;
inline void GetMhoParamRequest::clear_hoparamtype() {
  hoparamtype_ = 0;
}
inline ::onos::mho::MhoParamType GetMhoParamRequest::_internal_hoparamtype() const {
  return static_cast< ::onos::mho::MhoParamType >(hoparamtype_);
}
inline ::onos::mho::MhoParamType GetMhoParamRequest::hoparamtype() const {
  // @@protoc_insertion_point(field_get:onos.mho.GetMhoParamRequest.hoParamType)
  return _internal_hoparamtype();
}
inline void GetMhoParamRequest::_internal_set_hoparamtype(::onos::mho::MhoParamType value) {
  
  hoparamtype_ = value;
}
inline void GetMhoParamRequest::set_hoparamtype(::onos::mho::MhoParamType value) {
  _internal_set_hoparamtype(value);
  // @@protoc_insertion_point(field_set:onos.mho.GetMhoParamRequest.hoParamType)
}

// -------------------------------------------------------------------

// GetMhoParamResponse

// .onos.mho.MhoParamType hoParamType = 1;
inline void GetMhoParamResponse::clear_hoparamtype() {
  hoparamtype_ = 0;
}
inline ::onos::mho::MhoParamType GetMhoParamResponse::_internal_hoparamtype() const {
  return static_cast< ::onos::mho::MhoParamType >(hoparamtype_);
}
inline ::onos::mho::MhoParamType GetMhoParamResponse::hoparamtype() const {
  // @@protoc_insertion_point(field_get:onos.mho.GetMhoParamResponse.hoParamType)
  return _internal_hoparamtype();
}
inline void GetMhoParamResponse::_internal_set_hoparamtype(::onos::mho::MhoParamType value) {
  
  hoparamtype_ = value;
}
inline void GetMhoParamResponse::set_hoparamtype(::onos::mho::MhoParamType value) {
  _internal_set_hoparamtype(value);
  // @@protoc_insertion_point(field_set:onos.mho.GetMhoParamResponse.hoParamType)
}

// int32 a3Offset = 2;
inline void GetMhoParamResponse::clear_a3offset() {
  a3offset_ = 0;
}
inline int32_t GetMhoParamResponse::_internal_a3offset() const {
  return a3offset_;
}
inline int32_t GetMhoParamResponse::a3offset() const {
  // @@protoc_insertion_point(field_get:onos.mho.GetMhoParamResponse.a3Offset)
  return _internal_a3offset();
}
inline void GetMhoParamResponse::_internal_set_a3offset(int32_t value) {
  
  a3offset_ = value;
}
inline void GetMhoParamResponse::set_a3offset(int32_t value) {
  _internal_set_a3offset(value);
  // @@protoc_insertion_point(field_set:onos.mho.GetMhoParamResponse.a3Offset)
}

// int32 hysteresis = 3;
inline void GetMhoParamResponse::clear_hysteresis() {
  hysteresis_ = 0;
}
inline int32_t GetMhoParamResponse::_internal_hysteresis() const {
  return hysteresis_;
}
inline int32_t GetMhoParamResponse::hysteresis() const {
  // @@protoc_insertion_point(field_get:onos.mho.GetMhoParamResponse.hysteresis)
  return _internal_hysteresis();
}
inline void GetMhoParamResponse::_internal_set_hysteresis(int32_t value) {
  
  hysteresis_ = value;
}
inline void GetMhoParamResponse::set_hysteresis(int32_t value) {
  _internal_set_hysteresis(value);
  // @@protoc_insertion_point(field_set:onos.mho.GetMhoParamResponse.hysteresis)
}

// int32 timeToTrigger = 4;
inline void GetMhoParamResponse::clear_timetotrigger() {
  timetotrigger_ = 0;
}
inline int32_t GetMhoParamResponse::_internal_timetotrigger() const {
  return timetotrigger_;
}
inline int32_t GetMhoParamResponse::timetotrigger() const {
  // @@protoc_insertion_point(field_get:onos.mho.GetMhoParamResponse.timeToTrigger)
  return _internal_timetotrigger();
}
inline void GetMhoParamResponse::_internal_set_timetotrigger(int32_t value) {
  
  timetotrigger_ = value;
}
inline void GetMhoParamResponse::set_timetotrigger(int32_t value) {
  _internal_set_timetotrigger(value);
  // @@protoc_insertion_point(field_set:onos.mho.GetMhoParamResponse.timeToTrigger)
}

// -------------------------------------------------------------------

// SetMhoParamRequest

// .onos.mho.MhoParamType hoParamType = 1;
inline void SetMhoParamRequest::clear_hoparamtype() {
  hoparamtype_ = 0;
}
inline ::onos::mho::MhoParamType SetMhoParamRequest::_internal_hoparamtype() const {
  return static_cast< ::onos::mho::MhoParamType >(hoparamtype_);
}
inline ::onos::mho::MhoParamType SetMhoParamRequest::hoparamtype() const {
  // @@protoc_insertion_point(field_get:onos.mho.SetMhoParamRequest.hoParamType)
  return _internal_hoparamtype();
}
inline void SetMhoParamRequest::_internal_set_hoparamtype(::onos::mho::MhoParamType value) {
  
  hoparamtype_ = value;
}
inline void SetMhoParamRequest::set_hoparamtype(::onos::mho::MhoParamType value) {
  _internal_set_hoparamtype(value);
  // @@protoc_insertion_point(field_set:onos.mho.SetMhoParamRequest.hoParamType)
}

// int32 a3Offset = 2;
inline void SetMhoParamRequest::clear_a3offset() {
  a3offset_ = 0;
}
inline int32_t SetMhoParamRequest::_internal_a3offset() const {
  return a3offset_;
}
inline int32_t SetMhoParamRequest::a3offset() const {
  // @@protoc_insertion_point(field_get:onos.mho.SetMhoParamRequest.a3Offset)
  return _internal_a3offset();
}
inline void SetMhoParamRequest::_internal_set_a3offset(int32_t value) {
  
  a3offset_ = value;
}
inline void SetMhoParamRequest::set_a3offset(int32_t value) {
  _internal_set_a3offset(value);
  // @@protoc_insertion_point(field_set:onos.mho.SetMhoParamRequest.a3Offset)
}

// int32 hysteresis = 3;
inline void SetMhoParamRequest::clear_hysteresis() {
  hysteresis_ = 0;
}
inline int32_t SetMhoParamRequest::_internal_hysteresis() const {
  return hysteresis_;
}
inline int32_t SetMhoParamRequest::hysteresis() const {
  // @@protoc_insertion_point(field_get:onos.mho.SetMhoParamRequest.hysteresis)
  return _internal_hysteresis();
}
inline void SetMhoParamRequest::_internal_set_hysteresis(int32_t value) {
  
  hysteresis_ = value;
}
inline void SetMhoParamRequest::set_hysteresis(int32_t value) {
  _internal_set_hysteresis(value);
  // @@protoc_insertion_point(field_set:onos.mho.SetMhoParamRequest.hysteresis)
}

// int32 timeToTrigger = 4;
inline void SetMhoParamRequest::clear_timetotrigger() {
  timetotrigger_ = 0;
}
inline int32_t SetMhoParamRequest::_internal_timetotrigger() const {
  return timetotrigger_;
}
inline int32_t SetMhoParamRequest::timetotrigger() const {
  // @@protoc_insertion_point(field_get:onos.mho.SetMhoParamRequest.timeToTrigger)
  return _internal_timetotrigger();
}
inline void SetMhoParamRequest::_internal_set_timetotrigger(int32_t value) {
  
  timetotrigger_ = value;
}
inline void SetMhoParamRequest::set_timetotrigger(int32_t value) {
  _internal_set_timetotrigger(value);
  // @@protoc_insertion_point(field_set:onos.mho.SetMhoParamRequest.timeToTrigger)
}

// -------------------------------------------------------------------

// SetMhoParamResponse

// bool success = 1;
inline void SetMhoParamResponse::clear_success() {
  success_ = false;
}
inline bool SetMhoParamResponse::_internal_success() const {
  return success_;
}
inline bool SetMhoParamResponse::success() const {
  // @@protoc_insertion_point(field_get:onos.mho.SetMhoParamResponse.success)
  return _internal_success();
}
inline void SetMhoParamResponse::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void SetMhoParamResponse::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:onos.mho.SetMhoParamResponse.success)
}

// -------------------------------------------------------------------

// GetRequest

// -------------------------------------------------------------------

// UeList

// repeated .onos.mho.UE ues = 1;
inline int UeList::_internal_ues_size() const {
  return ues_.size();
}
inline int UeList::ues_size() const {
  return _internal_ues_size();
}
inline void UeList::clear_ues() {
  ues_.Clear();
}
inline ::onos::mho::UE* UeList::mutable_ues(int index) {
  // @@protoc_insertion_point(field_mutable:onos.mho.UeList.ues)
  return ues_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::mho::UE >*
UeList::mutable_ues() {
  // @@protoc_insertion_point(field_mutable_list:onos.mho.UeList.ues)
  return &ues_;
}
inline const ::onos::mho::UE& UeList::_internal_ues(int index) const {
  return ues_.Get(index);
}
inline const ::onos::mho::UE& UeList::ues(int index) const {
  // @@protoc_insertion_point(field_get:onos.mho.UeList.ues)
  return _internal_ues(index);
}
inline ::onos::mho::UE* UeList::_internal_add_ues() {
  return ues_.Add();
}
inline ::onos::mho::UE* UeList::add_ues() {
  ::onos::mho::UE* _add = _internal_add_ues();
  // @@protoc_insertion_point(field_add:onos.mho.UeList.ues)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::mho::UE >&
UeList::ues() const {
  // @@protoc_insertion_point(field_list:onos.mho.UeList.ues)
  return ues_;
}

// -------------------------------------------------------------------

// CellList

// repeated .onos.mho.Cell cells = 1;
inline int CellList::_internal_cells_size() const {
  return cells_.size();
}
inline int CellList::cells_size() const {
  return _internal_cells_size();
}
inline void CellList::clear_cells() {
  cells_.Clear();
}
inline ::onos::mho::Cell* CellList::mutable_cells(int index) {
  // @@protoc_insertion_point(field_mutable:onos.mho.CellList.cells)
  return cells_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::mho::Cell >*
CellList::mutable_cells() {
  // @@protoc_insertion_point(field_mutable_list:onos.mho.CellList.cells)
  return &cells_;
}
inline const ::onos::mho::Cell& CellList::_internal_cells(int index) const {
  return cells_.Get(index);
}
inline const ::onos::mho::Cell& CellList::cells(int index) const {
  // @@protoc_insertion_point(field_get:onos.mho.CellList.cells)
  return _internal_cells(index);
}
inline ::onos::mho::Cell* CellList::_internal_add_cells() {
  return cells_.Add();
}
inline ::onos::mho::Cell* CellList::add_cells() {
  ::onos::mho::Cell* _add = _internal_add_cells();
  // @@protoc_insertion_point(field_add:onos.mho.CellList.cells)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::mho::Cell >&
CellList::cells() const {
  // @@protoc_insertion_point(field_list:onos.mho.CellList.cells)
  return cells_;
}

// -------------------------------------------------------------------

// UE

// string ue_id = 1;
inline void UE::clear_ue_id() {
  ue_id_.ClearToEmpty();
}
inline const std::string& UE::ue_id() const {
  // @@protoc_insertion_point(field_get:onos.mho.UE.ue_id)
  return _internal_ue_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UE::set_ue_id(ArgT0&& arg0, ArgT... args) {
 
 ue_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.mho.UE.ue_id)
}
inline std::string* UE::mutable_ue_id() {
  std::string* _s = _internal_mutable_ue_id();
  // @@protoc_insertion_point(field_mutable:onos.mho.UE.ue_id)
  return _s;
}
inline const std::string& UE::_internal_ue_id() const {
  return ue_id_.Get();
}
inline void UE::_internal_set_ue_id(const std::string& value) {
  
  ue_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UE::_internal_mutable_ue_id() {
  
  return ue_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UE::release_ue_id() {
  // @@protoc_insertion_point(field_release:onos.mho.UE.ue_id)
  return ue_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UE::set_allocated_ue_id(std::string* ue_id) {
  if (ue_id != nullptr) {
    
  } else {
    
  }
  ue_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ue_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ue_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ue_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.mho.UE.ue_id)
}

// string rrc_state = 2;
inline void UE::clear_rrc_state() {
  rrc_state_.ClearToEmpty();
}
inline const std::string& UE::rrc_state() const {
  // @@protoc_insertion_point(field_get:onos.mho.UE.rrc_state)
  return _internal_rrc_state();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UE::set_rrc_state(ArgT0&& arg0, ArgT... args) {
 
 rrc_state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.mho.UE.rrc_state)
}
inline std::string* UE::mutable_rrc_state() {
  std::string* _s = _internal_mutable_rrc_state();
  // @@protoc_insertion_point(field_mutable:onos.mho.UE.rrc_state)
  return _s;
}
inline const std::string& UE::_internal_rrc_state() const {
  return rrc_state_.Get();
}
inline void UE::_internal_set_rrc_state(const std::string& value) {
  
  rrc_state_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UE::_internal_mutable_rrc_state() {
  
  return rrc_state_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UE::release_rrc_state() {
  // @@protoc_insertion_point(field_release:onos.mho.UE.rrc_state)
  return rrc_state_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UE::set_allocated_rrc_state(std::string* rrc_state) {
  if (rrc_state != nullptr) {
    
  } else {
    
  }
  rrc_state_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), rrc_state,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (rrc_state_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    rrc_state_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.mho.UE.rrc_state)
}

// string cgi = 3;
inline void UE::clear_cgi() {
  cgi_.ClearToEmpty();
}
inline const std::string& UE::cgi() const {
  // @@protoc_insertion_point(field_get:onos.mho.UE.cgi)
  return _internal_cgi();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UE::set_cgi(ArgT0&& arg0, ArgT... args) {
 
 cgi_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.mho.UE.cgi)
}
inline std::string* UE::mutable_cgi() {
  std::string* _s = _internal_mutable_cgi();
  // @@protoc_insertion_point(field_mutable:onos.mho.UE.cgi)
  return _s;
}
inline const std::string& UE::_internal_cgi() const {
  return cgi_.Get();
}
inline void UE::_internal_set_cgi(const std::string& value) {
  
  cgi_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UE::_internal_mutable_cgi() {
  
  return cgi_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UE::release_cgi() {
  // @@protoc_insertion_point(field_release:onos.mho.UE.cgi)
  return cgi_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UE::set_allocated_cgi(std::string* cgi) {
  if (cgi != nullptr) {
    
  } else {
    
  }
  cgi_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cgi,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cgi_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    cgi_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.mho.UE.cgi)
}

// -------------------------------------------------------------------

// Cell

// string cgi = 1;
inline void Cell::clear_cgi() {
  cgi_.ClearToEmpty();
}
inline const std::string& Cell::cgi() const {
  // @@protoc_insertion_point(field_get:onos.mho.Cell.cgi)
  return _internal_cgi();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Cell::set_cgi(ArgT0&& arg0, ArgT... args) {
 
 cgi_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.mho.Cell.cgi)
}
inline std::string* Cell::mutable_cgi() {
  std::string* _s = _internal_mutable_cgi();
  // @@protoc_insertion_point(field_mutable:onos.mho.Cell.cgi)
  return _s;
}
inline const std::string& Cell::_internal_cgi() const {
  return cgi_.Get();
}
inline void Cell::_internal_set_cgi(const std::string& value) {
  
  cgi_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Cell::_internal_mutable_cgi() {
  
  return cgi_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Cell::release_cgi() {
  // @@protoc_insertion_point(field_release:onos.mho.Cell.cgi)
  return cgi_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Cell::set_allocated_cgi(std::string* cgi) {
  if (cgi != nullptr) {
    
  } else {
    
  }
  cgi_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cgi,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cgi_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    cgi_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.mho.Cell.cgi)
}

// int64 num_ues = 2;
inline void Cell::clear_num_ues() {
  num_ues_ = int64_t{0};
}
inline int64_t Cell::_internal_num_ues() const {
  return num_ues_;
}
inline int64_t Cell::num_ues() const {
  // @@protoc_insertion_point(field_get:onos.mho.Cell.num_ues)
  return _internal_num_ues();
}
inline void Cell::_internal_set_num_ues(int64_t value) {
  
  num_ues_ = value;
}
inline void Cell::set_num_ues(int64_t value) {
  _internal_set_num_ues(value);
  // @@protoc_insertion_point(field_set:onos.mho.Cell.num_ues)
}

// int64 cumulative_handovers_in = 4;
inline void Cell::clear_cumulative_handovers_in() {
  cumulative_handovers_in_ = int64_t{0};
}
inline int64_t Cell::_internal_cumulative_handovers_in() const {
  return cumulative_handovers_in_;
}
inline int64_t Cell::cumulative_handovers_in() const {
  // @@protoc_insertion_point(field_get:onos.mho.Cell.cumulative_handovers_in)
  return _internal_cumulative_handovers_in();
}
inline void Cell::_internal_set_cumulative_handovers_in(int64_t value) {
  
  cumulative_handovers_in_ = value;
}
inline void Cell::set_cumulative_handovers_in(int64_t value) {
  _internal_set_cumulative_handovers_in(value);
  // @@protoc_insertion_point(field_set:onos.mho.Cell.cumulative_handovers_in)
}

// int64 cumulative_handovers_out = 5;
inline void Cell::clear_cumulative_handovers_out() {
  cumulative_handovers_out_ = int64_t{0};
}
inline int64_t Cell::_internal_cumulative_handovers_out() const {
  return cumulative_handovers_out_;
}
inline int64_t Cell::cumulative_handovers_out() const {
  // @@protoc_insertion_point(field_get:onos.mho.Cell.cumulative_handovers_out)
  return _internal_cumulative_handovers_out();
}
inline void Cell::_internal_set_cumulative_handovers_out(int64_t value) {
  
  cumulative_handovers_out_ = value;
}
inline void Cell::set_cumulative_handovers_out(int64_t value) {
  _internal_set_cumulative_handovers_out(value);
  // @@protoc_insertion_point(field_set:onos.mho.Cell.cumulative_handovers_out)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace mho
}  // namespace onos

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::onos::mho::MhoParamType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::onos::mho::MhoParamType>() {
  return ::onos::mho::MhoParamType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_onos_2fmho_2fmho_2eproto
