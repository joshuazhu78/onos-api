// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onos/a1t/a1/policy.proto

#include "onos/a1t/a1/policy.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace onos {
namespace a1t {
namespace a1 {
constexpr PolicyType::PolicyType(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PolicyTypeDefaultTypeInternal {
  constexpr PolicyTypeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PolicyTypeDefaultTypeInternal() {}
  union {
    PolicyType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PolicyTypeDefaultTypeInternal _PolicyType_default_instance_;
constexpr PolicyRequestMessage::PolicyRequestMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : policy_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , notification_destination_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , policy_type_(nullptr)
  , message_(nullptr){}
struct PolicyRequestMessageDefaultTypeInternal {
  constexpr PolicyRequestMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PolicyRequestMessageDefaultTypeInternal() {}
  union {
    PolicyRequestMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PolicyRequestMessageDefaultTypeInternal _PolicyRequestMessage_default_instance_;
constexpr PolicyResultMessage::PolicyResultMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : policy_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , notification_destination_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , policy_type_(nullptr)
  , message_(nullptr){}
struct PolicyResultMessageDefaultTypeInternal {
  constexpr PolicyResultMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PolicyResultMessageDefaultTypeInternal() {}
  union {
    PolicyResultMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PolicyResultMessageDefaultTypeInternal _PolicyResultMessage_default_instance_;
constexpr PolicyStatusMessage::PolicyStatusMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : policy_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , notification_destination_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , policy_type_(nullptr)
  , message_(nullptr){}
struct PolicyStatusMessageDefaultTypeInternal {
  constexpr PolicyStatusMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PolicyStatusMessageDefaultTypeInternal() {}
  union {
    PolicyStatusMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PolicyStatusMessageDefaultTypeInternal _PolicyStatusMessage_default_instance_;
constexpr PolicyAckMessage::PolicyAckMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : policy_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , notification_destination_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , policy_type_(nullptr)
  , message_(nullptr){}
struct PolicyAckMessageDefaultTypeInternal {
  constexpr PolicyAckMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PolicyAckMessageDefaultTypeInternal() {}
  union {
    PolicyAckMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PolicyAckMessageDefaultTypeInternal _PolicyAckMessage_default_instance_;
}  // namespace a1
}  // namespace a1t
}  // namespace onos
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_onos_2fa1t_2fa1_2fpolicy_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_onos_2fa1t_2fa1_2fpolicy_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_onos_2fa1t_2fa1_2fpolicy_2eproto = nullptr;

const uint32_t TableStruct_onos_2fa1t_2fa1_2fpolicy_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::a1t::a1::PolicyType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::a1t::a1::PolicyType, id_),
  PROTOBUF_FIELD_OFFSET(::onos::a1t::a1::PolicyType, name_),
  PROTOBUF_FIELD_OFFSET(::onos::a1t::a1::PolicyType, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::a1t::a1::PolicyRequestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::a1t::a1::PolicyRequestMessage, policy_id_),
  PROTOBUF_FIELD_OFFSET(::onos::a1t::a1::PolicyRequestMessage, policy_type_),
  PROTOBUF_FIELD_OFFSET(::onos::a1t::a1::PolicyRequestMessage, message_),
  PROTOBUF_FIELD_OFFSET(::onos::a1t::a1::PolicyRequestMessage, notification_destination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::a1t::a1::PolicyResultMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::a1t::a1::PolicyResultMessage, policy_id_),
  PROTOBUF_FIELD_OFFSET(::onos::a1t::a1::PolicyResultMessage, policy_type_),
  PROTOBUF_FIELD_OFFSET(::onos::a1t::a1::PolicyResultMessage, message_),
  PROTOBUF_FIELD_OFFSET(::onos::a1t::a1::PolicyResultMessage, notification_destination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::a1t::a1::PolicyStatusMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::a1t::a1::PolicyStatusMessage, policy_id_),
  PROTOBUF_FIELD_OFFSET(::onos::a1t::a1::PolicyStatusMessage, policy_type_),
  PROTOBUF_FIELD_OFFSET(::onos::a1t::a1::PolicyStatusMessage, message_),
  PROTOBUF_FIELD_OFFSET(::onos::a1t::a1::PolicyStatusMessage, notification_destination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::a1t::a1::PolicyAckMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::a1t::a1::PolicyAckMessage, policy_id_),
  PROTOBUF_FIELD_OFFSET(::onos::a1t::a1::PolicyAckMessage, policy_type_),
  PROTOBUF_FIELD_OFFSET(::onos::a1t::a1::PolicyAckMessage, message_),
  PROTOBUF_FIELD_OFFSET(::onos::a1t::a1::PolicyAckMessage, notification_destination_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::onos::a1t::a1::PolicyType)},
  { 9, -1, -1, sizeof(::onos::a1t::a1::PolicyRequestMessage)},
  { 19, -1, -1, sizeof(::onos::a1t::a1::PolicyResultMessage)},
  { 29, -1, -1, sizeof(::onos::a1t::a1::PolicyStatusMessage)},
  { 39, -1, -1, sizeof(::onos::a1t::a1::PolicyAckMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::a1t::a1::_PolicyType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::a1t::a1::_PolicyRequestMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::a1t::a1::_PolicyResultMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::a1t::a1::_PolicyStatusMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::a1t::a1::_PolicyAckMessage_default_instance_),
};

const char descriptor_table_protodef_onos_2fa1t_2fa1_2fpolicy_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\030onos/a1t/a1/policy.proto\022\013onos.a1t.a1\032"
  "\024gogoproto/gogo.proto\032\024onos/a1t/a1/a1.pr"
  "oto\"7\n\nPolicyType\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 "
  "\001(\t\022\017\n\007version\030\003 \001(\t\"\247\001\n\024PolicyRequestMe"
  "ssage\022\021\n\tpolicy_id\030\001 \001(\t\022,\n\013policy_type\030"
  "\002 \001(\0132\027.onos.a1t.a1.PolicyType\022,\n\007messag"
  "e\030\003 \001(\0132\033.onos.a1t.a1.RequestMessage\022 \n\030"
  "notification_destination\030\004 \001(\t\"\245\001\n\023Polic"
  "yResultMessage\022\021\n\tpolicy_id\030\001 \001(\t\022,\n\013pol"
  "icy_type\030\002 \001(\0132\027.onos.a1t.a1.PolicyType\022"
  "+\n\007message\030\003 \001(\0132\032.onos.a1t.a1.ResultMes"
  "sage\022 \n\030notification_destination\030\004 \001(\t\"\245"
  "\001\n\023PolicyStatusMessage\022\021\n\tpolicy_id\030\001 \001("
  "\t\022,\n\013policy_type\030\002 \001(\0132\027.onos.a1t.a1.Pol"
  "icyType\022+\n\007message\030\003 \001(\0132\032.onos.a1t.a1.S"
  "tatusMessage\022 \n\030notification_destination"
  "\030\004 \001(\t\"\237\001\n\020PolicyAckMessage\022\021\n\tpolicy_id"
  "\030\001 \001(\t\022,\n\013policy_type\030\002 \001(\0132\027.onos.a1t.a"
  "1.PolicyType\022(\n\007message\030\003 \001(\0132\027.onos.a1t"
  ".a1.AckMessage\022 \n\030notification_destinati"
  "on\030\004 \001(\t2\266\003\n\rPolicyService\022R\n\013PolicySetu"
  "p\022!.onos.a1t.a1.PolicyRequestMessage\032 .o"
  "nos.a1t.a1.PolicyResultMessage\022S\n\014Policy"
  "Update\022!.onos.a1t.a1.PolicyRequestMessag"
  "e\032 .onos.a1t.a1.PolicyResultMessage\022S\n\014P"
  "olicyDelete\022!.onos.a1t.a1.PolicyRequestM"
  "essage\032 .onos.a1t.a1.PolicyResultMessage"
  "\022R\n\013PolicyQuery\022!.onos.a1t.a1.PolicyRequ"
  "estMessage\032 .onos.a1t.a1.PolicyResultMes"
  "sage\022S\n\014PolicyStatus\022\035.onos.a1t.a1.Polic"
  "yAckMessage\032 .onos.a1t.a1.PolicyStatusMe"
  "ssage(\0010\001B\004\300\343\036\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_onos_2fa1t_2fa1_2fpolicy_2eproto_deps[2] = {
  &::descriptor_table_gogoproto_2fgogo_2eproto,
  &::descriptor_table_onos_2fa1t_2fa1_2fa1_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_onos_2fa1t_2fa1_2fpolicy_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_onos_2fa1t_2fa1_2fpolicy_2eproto = {
  false, false, 1263, descriptor_table_protodef_onos_2fa1t_2fa1_2fpolicy_2eproto, "onos/a1t/a1/policy.proto", 
  &descriptor_table_onos_2fa1t_2fa1_2fpolicy_2eproto_once, descriptor_table_onos_2fa1t_2fa1_2fpolicy_2eproto_deps, 2, 5,
  schemas, file_default_instances, TableStruct_onos_2fa1t_2fa1_2fpolicy_2eproto::offsets,
  file_level_metadata_onos_2fa1t_2fa1_2fpolicy_2eproto, file_level_enum_descriptors_onos_2fa1t_2fa1_2fpolicy_2eproto, file_level_service_descriptors_onos_2fa1t_2fa1_2fpolicy_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_onos_2fa1t_2fa1_2fpolicy_2eproto_getter() {
  return &descriptor_table_onos_2fa1t_2fa1_2fpolicy_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_onos_2fa1t_2fa1_2fpolicy_2eproto(&descriptor_table_onos_2fa1t_2fa1_2fpolicy_2eproto);
namespace onos {
namespace a1t {
namespace a1 {

// ===================================================================

class PolicyType::_Internal {
 public:
};

PolicyType::PolicyType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.a1t.a1.PolicyType)
}
PolicyType::PolicyType(const PolicyType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:onos.a1t.a1.PolicyType)
}

inline void PolicyType::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

PolicyType::~PolicyType() {
  // @@protoc_insertion_point(destructor:onos.a1t.a1.PolicyType)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PolicyType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PolicyType::ArenaDtor(void* object) {
  PolicyType* _this = reinterpret_cast< PolicyType* >(object);
  (void)_this;
}
void PolicyType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PolicyType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PolicyType::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.a1t.a1.PolicyType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  name_.ClearToEmpty();
  version_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PolicyType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.a1t.a1.PolicyType.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.a1t.a1.PolicyType.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string version = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.a1t.a1.PolicyType.version"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PolicyType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.a1t.a1.PolicyType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.a1t.a1.PolicyType.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.a1t.a1.PolicyType.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string version = 3;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.a1t.a1.PolicyType.version");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.a1t.a1.PolicyType)
  return target;
}

size_t PolicyType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.a1t.a1.PolicyType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1;
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string version = 3;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PolicyType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PolicyType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PolicyType::GetClassData() const { return &_class_data_; }

void PolicyType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PolicyType *>(to)->MergeFrom(
      static_cast<const PolicyType &>(from));
}


void PolicyType::MergeFrom(const PolicyType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.a1t.a1.PolicyType)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_version().empty()) {
    _internal_set_version(from._internal_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PolicyType::CopyFrom(const PolicyType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.a1t.a1.PolicyType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolicyType::IsInitialized() const {
  return true;
}

void PolicyType::InternalSwap(PolicyType* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_, lhs_arena,
      &other->version_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PolicyType::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fa1t_2fa1_2fpolicy_2eproto_getter, &descriptor_table_onos_2fa1t_2fa1_2fpolicy_2eproto_once,
      file_level_metadata_onos_2fa1t_2fa1_2fpolicy_2eproto[0]);
}

// ===================================================================

class PolicyRequestMessage::_Internal {
 public:
  static const ::onos::a1t::a1::PolicyType& policy_type(const PolicyRequestMessage* msg);
  static const ::onos::a1t::a1::RequestMessage& message(const PolicyRequestMessage* msg);
};

const ::onos::a1t::a1::PolicyType&
PolicyRequestMessage::_Internal::policy_type(const PolicyRequestMessage* msg) {
  return *msg->policy_type_;
}
const ::onos::a1t::a1::RequestMessage&
PolicyRequestMessage::_Internal::message(const PolicyRequestMessage* msg) {
  return *msg->message_;
}
void PolicyRequestMessage::clear_message() {
  if (GetArenaForAllocation() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
}
PolicyRequestMessage::PolicyRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.a1t.a1.PolicyRequestMessage)
}
PolicyRequestMessage::PolicyRequestMessage(const PolicyRequestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  policy_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    policy_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_policy_id().empty()) {
    policy_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_policy_id(), 
      GetArenaForAllocation());
  }
  notification_destination_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    notification_destination_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_notification_destination().empty()) {
    notification_destination_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_notification_destination(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_policy_type()) {
    policy_type_ = new ::onos::a1t::a1::PolicyType(*from.policy_type_);
  } else {
    policy_type_ = nullptr;
  }
  if (from._internal_has_message()) {
    message_ = new ::onos::a1t::a1::RequestMessage(*from.message_);
  } else {
    message_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:onos.a1t.a1.PolicyRequestMessage)
}

inline void PolicyRequestMessage::SharedCtor() {
policy_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  policy_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
notification_destination_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  notification_destination_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&policy_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&message_) -
    reinterpret_cast<char*>(&policy_type_)) + sizeof(message_));
}

PolicyRequestMessage::~PolicyRequestMessage() {
  // @@protoc_insertion_point(destructor:onos.a1t.a1.PolicyRequestMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PolicyRequestMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  policy_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notification_destination_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete policy_type_;
  if (this != internal_default_instance()) delete message_;
}

void PolicyRequestMessage::ArenaDtor(void* object) {
  PolicyRequestMessage* _this = reinterpret_cast< PolicyRequestMessage* >(object);
  (void)_this;
}
void PolicyRequestMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PolicyRequestMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PolicyRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.a1t.a1.PolicyRequestMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  policy_id_.ClearToEmpty();
  notification_destination_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && policy_type_ != nullptr) {
    delete policy_type_;
  }
  policy_type_ = nullptr;
  if (GetArenaForAllocation() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PolicyRequestMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string policy_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_policy_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.a1t.a1.PolicyRequestMessage.policy_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.a1t.a1.PolicyType policy_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_policy_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.a1t.a1.RequestMessage message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string notification_destination = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_notification_destination();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.a1t.a1.PolicyRequestMessage.notification_destination"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PolicyRequestMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.a1t.a1.PolicyRequestMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string policy_id = 1;
  if (!this->_internal_policy_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_policy_id().data(), static_cast<int>(this->_internal_policy_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.a1t.a1.PolicyRequestMessage.policy_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_policy_id(), target);
  }

  // .onos.a1t.a1.PolicyType policy_type = 2;
  if (this->_internal_has_policy_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::policy_type(this), target, stream);
  }

  // .onos.a1t.a1.RequestMessage message = 3;
  if (this->_internal_has_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::message(this), target, stream);
  }

  // string notification_destination = 4;
  if (!this->_internal_notification_destination().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notification_destination().data(), static_cast<int>(this->_internal_notification_destination().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.a1t.a1.PolicyRequestMessage.notification_destination");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_notification_destination(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.a1t.a1.PolicyRequestMessage)
  return target;
}

size_t PolicyRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.a1t.a1.PolicyRequestMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string policy_id = 1;
  if (!this->_internal_policy_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_policy_id());
  }

  // string notification_destination = 4;
  if (!this->_internal_notification_destination().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notification_destination());
  }

  // .onos.a1t.a1.PolicyType policy_type = 2;
  if (this->_internal_has_policy_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *policy_type_);
  }

  // .onos.a1t.a1.RequestMessage message = 3;
  if (this->_internal_has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PolicyRequestMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PolicyRequestMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PolicyRequestMessage::GetClassData() const { return &_class_data_; }

void PolicyRequestMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PolicyRequestMessage *>(to)->MergeFrom(
      static_cast<const PolicyRequestMessage &>(from));
}


void PolicyRequestMessage::MergeFrom(const PolicyRequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.a1t.a1.PolicyRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_policy_id().empty()) {
    _internal_set_policy_id(from._internal_policy_id());
  }
  if (!from._internal_notification_destination().empty()) {
    _internal_set_notification_destination(from._internal_notification_destination());
  }
  if (from._internal_has_policy_type()) {
    _internal_mutable_policy_type()->::onos::a1t::a1::PolicyType::MergeFrom(from._internal_policy_type());
  }
  if (from._internal_has_message()) {
    _internal_mutable_message()->::onos::a1t::a1::RequestMessage::MergeFrom(from._internal_message());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PolicyRequestMessage::CopyFrom(const PolicyRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.a1t.a1.PolicyRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolicyRequestMessage::IsInitialized() const {
  return true;
}

void PolicyRequestMessage::InternalSwap(PolicyRequestMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &policy_id_, lhs_arena,
      &other->policy_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &notification_destination_, lhs_arena,
      &other->notification_destination_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PolicyRequestMessage, message_)
      + sizeof(PolicyRequestMessage::message_)
      - PROTOBUF_FIELD_OFFSET(PolicyRequestMessage, policy_type_)>(
          reinterpret_cast<char*>(&policy_type_),
          reinterpret_cast<char*>(&other->policy_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PolicyRequestMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fa1t_2fa1_2fpolicy_2eproto_getter, &descriptor_table_onos_2fa1t_2fa1_2fpolicy_2eproto_once,
      file_level_metadata_onos_2fa1t_2fa1_2fpolicy_2eproto[1]);
}

// ===================================================================

class PolicyResultMessage::_Internal {
 public:
  static const ::onos::a1t::a1::PolicyType& policy_type(const PolicyResultMessage* msg);
  static const ::onos::a1t::a1::ResultMessage& message(const PolicyResultMessage* msg);
};

const ::onos::a1t::a1::PolicyType&
PolicyResultMessage::_Internal::policy_type(const PolicyResultMessage* msg) {
  return *msg->policy_type_;
}
const ::onos::a1t::a1::ResultMessage&
PolicyResultMessage::_Internal::message(const PolicyResultMessage* msg) {
  return *msg->message_;
}
void PolicyResultMessage::clear_message() {
  if (GetArenaForAllocation() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
}
PolicyResultMessage::PolicyResultMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.a1t.a1.PolicyResultMessage)
}
PolicyResultMessage::PolicyResultMessage(const PolicyResultMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  policy_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    policy_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_policy_id().empty()) {
    policy_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_policy_id(), 
      GetArenaForAllocation());
  }
  notification_destination_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    notification_destination_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_notification_destination().empty()) {
    notification_destination_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_notification_destination(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_policy_type()) {
    policy_type_ = new ::onos::a1t::a1::PolicyType(*from.policy_type_);
  } else {
    policy_type_ = nullptr;
  }
  if (from._internal_has_message()) {
    message_ = new ::onos::a1t::a1::ResultMessage(*from.message_);
  } else {
    message_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:onos.a1t.a1.PolicyResultMessage)
}

inline void PolicyResultMessage::SharedCtor() {
policy_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  policy_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
notification_destination_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  notification_destination_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&policy_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&message_) -
    reinterpret_cast<char*>(&policy_type_)) + sizeof(message_));
}

PolicyResultMessage::~PolicyResultMessage() {
  // @@protoc_insertion_point(destructor:onos.a1t.a1.PolicyResultMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PolicyResultMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  policy_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notification_destination_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete policy_type_;
  if (this != internal_default_instance()) delete message_;
}

void PolicyResultMessage::ArenaDtor(void* object) {
  PolicyResultMessage* _this = reinterpret_cast< PolicyResultMessage* >(object);
  (void)_this;
}
void PolicyResultMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PolicyResultMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PolicyResultMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.a1t.a1.PolicyResultMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  policy_id_.ClearToEmpty();
  notification_destination_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && policy_type_ != nullptr) {
    delete policy_type_;
  }
  policy_type_ = nullptr;
  if (GetArenaForAllocation() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PolicyResultMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string policy_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_policy_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.a1t.a1.PolicyResultMessage.policy_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.a1t.a1.PolicyType policy_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_policy_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.a1t.a1.ResultMessage message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string notification_destination = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_notification_destination();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.a1t.a1.PolicyResultMessage.notification_destination"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PolicyResultMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.a1t.a1.PolicyResultMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string policy_id = 1;
  if (!this->_internal_policy_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_policy_id().data(), static_cast<int>(this->_internal_policy_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.a1t.a1.PolicyResultMessage.policy_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_policy_id(), target);
  }

  // .onos.a1t.a1.PolicyType policy_type = 2;
  if (this->_internal_has_policy_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::policy_type(this), target, stream);
  }

  // .onos.a1t.a1.ResultMessage message = 3;
  if (this->_internal_has_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::message(this), target, stream);
  }

  // string notification_destination = 4;
  if (!this->_internal_notification_destination().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notification_destination().data(), static_cast<int>(this->_internal_notification_destination().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.a1t.a1.PolicyResultMessage.notification_destination");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_notification_destination(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.a1t.a1.PolicyResultMessage)
  return target;
}

size_t PolicyResultMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.a1t.a1.PolicyResultMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string policy_id = 1;
  if (!this->_internal_policy_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_policy_id());
  }

  // string notification_destination = 4;
  if (!this->_internal_notification_destination().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notification_destination());
  }

  // .onos.a1t.a1.PolicyType policy_type = 2;
  if (this->_internal_has_policy_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *policy_type_);
  }

  // .onos.a1t.a1.ResultMessage message = 3;
  if (this->_internal_has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PolicyResultMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PolicyResultMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PolicyResultMessage::GetClassData() const { return &_class_data_; }

void PolicyResultMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PolicyResultMessage *>(to)->MergeFrom(
      static_cast<const PolicyResultMessage &>(from));
}


void PolicyResultMessage::MergeFrom(const PolicyResultMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.a1t.a1.PolicyResultMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_policy_id().empty()) {
    _internal_set_policy_id(from._internal_policy_id());
  }
  if (!from._internal_notification_destination().empty()) {
    _internal_set_notification_destination(from._internal_notification_destination());
  }
  if (from._internal_has_policy_type()) {
    _internal_mutable_policy_type()->::onos::a1t::a1::PolicyType::MergeFrom(from._internal_policy_type());
  }
  if (from._internal_has_message()) {
    _internal_mutable_message()->::onos::a1t::a1::ResultMessage::MergeFrom(from._internal_message());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PolicyResultMessage::CopyFrom(const PolicyResultMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.a1t.a1.PolicyResultMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolicyResultMessage::IsInitialized() const {
  return true;
}

void PolicyResultMessage::InternalSwap(PolicyResultMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &policy_id_, lhs_arena,
      &other->policy_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &notification_destination_, lhs_arena,
      &other->notification_destination_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PolicyResultMessage, message_)
      + sizeof(PolicyResultMessage::message_)
      - PROTOBUF_FIELD_OFFSET(PolicyResultMessage, policy_type_)>(
          reinterpret_cast<char*>(&policy_type_),
          reinterpret_cast<char*>(&other->policy_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PolicyResultMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fa1t_2fa1_2fpolicy_2eproto_getter, &descriptor_table_onos_2fa1t_2fa1_2fpolicy_2eproto_once,
      file_level_metadata_onos_2fa1t_2fa1_2fpolicy_2eproto[2]);
}

// ===================================================================

class PolicyStatusMessage::_Internal {
 public:
  static const ::onos::a1t::a1::PolicyType& policy_type(const PolicyStatusMessage* msg);
  static const ::onos::a1t::a1::StatusMessage& message(const PolicyStatusMessage* msg);
};

const ::onos::a1t::a1::PolicyType&
PolicyStatusMessage::_Internal::policy_type(const PolicyStatusMessage* msg) {
  return *msg->policy_type_;
}
const ::onos::a1t::a1::StatusMessage&
PolicyStatusMessage::_Internal::message(const PolicyStatusMessage* msg) {
  return *msg->message_;
}
void PolicyStatusMessage::clear_message() {
  if (GetArenaForAllocation() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
}
PolicyStatusMessage::PolicyStatusMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.a1t.a1.PolicyStatusMessage)
}
PolicyStatusMessage::PolicyStatusMessage(const PolicyStatusMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  policy_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    policy_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_policy_id().empty()) {
    policy_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_policy_id(), 
      GetArenaForAllocation());
  }
  notification_destination_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    notification_destination_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_notification_destination().empty()) {
    notification_destination_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_notification_destination(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_policy_type()) {
    policy_type_ = new ::onos::a1t::a1::PolicyType(*from.policy_type_);
  } else {
    policy_type_ = nullptr;
  }
  if (from._internal_has_message()) {
    message_ = new ::onos::a1t::a1::StatusMessage(*from.message_);
  } else {
    message_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:onos.a1t.a1.PolicyStatusMessage)
}

inline void PolicyStatusMessage::SharedCtor() {
policy_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  policy_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
notification_destination_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  notification_destination_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&policy_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&message_) -
    reinterpret_cast<char*>(&policy_type_)) + sizeof(message_));
}

PolicyStatusMessage::~PolicyStatusMessage() {
  // @@protoc_insertion_point(destructor:onos.a1t.a1.PolicyStatusMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PolicyStatusMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  policy_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notification_destination_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete policy_type_;
  if (this != internal_default_instance()) delete message_;
}

void PolicyStatusMessage::ArenaDtor(void* object) {
  PolicyStatusMessage* _this = reinterpret_cast< PolicyStatusMessage* >(object);
  (void)_this;
}
void PolicyStatusMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PolicyStatusMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PolicyStatusMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.a1t.a1.PolicyStatusMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  policy_id_.ClearToEmpty();
  notification_destination_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && policy_type_ != nullptr) {
    delete policy_type_;
  }
  policy_type_ = nullptr;
  if (GetArenaForAllocation() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PolicyStatusMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string policy_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_policy_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.a1t.a1.PolicyStatusMessage.policy_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.a1t.a1.PolicyType policy_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_policy_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.a1t.a1.StatusMessage message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string notification_destination = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_notification_destination();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.a1t.a1.PolicyStatusMessage.notification_destination"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PolicyStatusMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.a1t.a1.PolicyStatusMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string policy_id = 1;
  if (!this->_internal_policy_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_policy_id().data(), static_cast<int>(this->_internal_policy_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.a1t.a1.PolicyStatusMessage.policy_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_policy_id(), target);
  }

  // .onos.a1t.a1.PolicyType policy_type = 2;
  if (this->_internal_has_policy_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::policy_type(this), target, stream);
  }

  // .onos.a1t.a1.StatusMessage message = 3;
  if (this->_internal_has_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::message(this), target, stream);
  }

  // string notification_destination = 4;
  if (!this->_internal_notification_destination().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notification_destination().data(), static_cast<int>(this->_internal_notification_destination().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.a1t.a1.PolicyStatusMessage.notification_destination");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_notification_destination(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.a1t.a1.PolicyStatusMessage)
  return target;
}

size_t PolicyStatusMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.a1t.a1.PolicyStatusMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string policy_id = 1;
  if (!this->_internal_policy_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_policy_id());
  }

  // string notification_destination = 4;
  if (!this->_internal_notification_destination().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notification_destination());
  }

  // .onos.a1t.a1.PolicyType policy_type = 2;
  if (this->_internal_has_policy_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *policy_type_);
  }

  // .onos.a1t.a1.StatusMessage message = 3;
  if (this->_internal_has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PolicyStatusMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PolicyStatusMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PolicyStatusMessage::GetClassData() const { return &_class_data_; }

void PolicyStatusMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PolicyStatusMessage *>(to)->MergeFrom(
      static_cast<const PolicyStatusMessage &>(from));
}


void PolicyStatusMessage::MergeFrom(const PolicyStatusMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.a1t.a1.PolicyStatusMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_policy_id().empty()) {
    _internal_set_policy_id(from._internal_policy_id());
  }
  if (!from._internal_notification_destination().empty()) {
    _internal_set_notification_destination(from._internal_notification_destination());
  }
  if (from._internal_has_policy_type()) {
    _internal_mutable_policy_type()->::onos::a1t::a1::PolicyType::MergeFrom(from._internal_policy_type());
  }
  if (from._internal_has_message()) {
    _internal_mutable_message()->::onos::a1t::a1::StatusMessage::MergeFrom(from._internal_message());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PolicyStatusMessage::CopyFrom(const PolicyStatusMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.a1t.a1.PolicyStatusMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolicyStatusMessage::IsInitialized() const {
  return true;
}

void PolicyStatusMessage::InternalSwap(PolicyStatusMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &policy_id_, lhs_arena,
      &other->policy_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &notification_destination_, lhs_arena,
      &other->notification_destination_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PolicyStatusMessage, message_)
      + sizeof(PolicyStatusMessage::message_)
      - PROTOBUF_FIELD_OFFSET(PolicyStatusMessage, policy_type_)>(
          reinterpret_cast<char*>(&policy_type_),
          reinterpret_cast<char*>(&other->policy_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PolicyStatusMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fa1t_2fa1_2fpolicy_2eproto_getter, &descriptor_table_onos_2fa1t_2fa1_2fpolicy_2eproto_once,
      file_level_metadata_onos_2fa1t_2fa1_2fpolicy_2eproto[3]);
}

// ===================================================================

class PolicyAckMessage::_Internal {
 public:
  static const ::onos::a1t::a1::PolicyType& policy_type(const PolicyAckMessage* msg);
  static const ::onos::a1t::a1::AckMessage& message(const PolicyAckMessage* msg);
};

const ::onos::a1t::a1::PolicyType&
PolicyAckMessage::_Internal::policy_type(const PolicyAckMessage* msg) {
  return *msg->policy_type_;
}
const ::onos::a1t::a1::AckMessage&
PolicyAckMessage::_Internal::message(const PolicyAckMessage* msg) {
  return *msg->message_;
}
void PolicyAckMessage::clear_message() {
  if (GetArenaForAllocation() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
}
PolicyAckMessage::PolicyAckMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.a1t.a1.PolicyAckMessage)
}
PolicyAckMessage::PolicyAckMessage(const PolicyAckMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  policy_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    policy_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_policy_id().empty()) {
    policy_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_policy_id(), 
      GetArenaForAllocation());
  }
  notification_destination_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    notification_destination_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_notification_destination().empty()) {
    notification_destination_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_notification_destination(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_policy_type()) {
    policy_type_ = new ::onos::a1t::a1::PolicyType(*from.policy_type_);
  } else {
    policy_type_ = nullptr;
  }
  if (from._internal_has_message()) {
    message_ = new ::onos::a1t::a1::AckMessage(*from.message_);
  } else {
    message_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:onos.a1t.a1.PolicyAckMessage)
}

inline void PolicyAckMessage::SharedCtor() {
policy_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  policy_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
notification_destination_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  notification_destination_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&policy_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&message_) -
    reinterpret_cast<char*>(&policy_type_)) + sizeof(message_));
}

PolicyAckMessage::~PolicyAckMessage() {
  // @@protoc_insertion_point(destructor:onos.a1t.a1.PolicyAckMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PolicyAckMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  policy_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  notification_destination_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete policy_type_;
  if (this != internal_default_instance()) delete message_;
}

void PolicyAckMessage::ArenaDtor(void* object) {
  PolicyAckMessage* _this = reinterpret_cast< PolicyAckMessage* >(object);
  (void)_this;
}
void PolicyAckMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PolicyAckMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PolicyAckMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.a1t.a1.PolicyAckMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  policy_id_.ClearToEmpty();
  notification_destination_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && policy_type_ != nullptr) {
    delete policy_type_;
  }
  policy_type_ = nullptr;
  if (GetArenaForAllocation() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PolicyAckMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string policy_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_policy_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.a1t.a1.PolicyAckMessage.policy_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.a1t.a1.PolicyType policy_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_policy_type(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.a1t.a1.AckMessage message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string notification_destination = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_notification_destination();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.a1t.a1.PolicyAckMessage.notification_destination"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PolicyAckMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.a1t.a1.PolicyAckMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string policy_id = 1;
  if (!this->_internal_policy_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_policy_id().data(), static_cast<int>(this->_internal_policy_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.a1t.a1.PolicyAckMessage.policy_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_policy_id(), target);
  }

  // .onos.a1t.a1.PolicyType policy_type = 2;
  if (this->_internal_has_policy_type()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::policy_type(this), target, stream);
  }

  // .onos.a1t.a1.AckMessage message = 3;
  if (this->_internal_has_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::message(this), target, stream);
  }

  // string notification_destination = 4;
  if (!this->_internal_notification_destination().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_notification_destination().data(), static_cast<int>(this->_internal_notification_destination().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.a1t.a1.PolicyAckMessage.notification_destination");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_notification_destination(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.a1t.a1.PolicyAckMessage)
  return target;
}

size_t PolicyAckMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.a1t.a1.PolicyAckMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string policy_id = 1;
  if (!this->_internal_policy_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_policy_id());
  }

  // string notification_destination = 4;
  if (!this->_internal_notification_destination().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_notification_destination());
  }

  // .onos.a1t.a1.PolicyType policy_type = 2;
  if (this->_internal_has_policy_type()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *policy_type_);
  }

  // .onos.a1t.a1.AckMessage message = 3;
  if (this->_internal_has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PolicyAckMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PolicyAckMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PolicyAckMessage::GetClassData() const { return &_class_data_; }

void PolicyAckMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PolicyAckMessage *>(to)->MergeFrom(
      static_cast<const PolicyAckMessage &>(from));
}


void PolicyAckMessage::MergeFrom(const PolicyAckMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.a1t.a1.PolicyAckMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_policy_id().empty()) {
    _internal_set_policy_id(from._internal_policy_id());
  }
  if (!from._internal_notification_destination().empty()) {
    _internal_set_notification_destination(from._internal_notification_destination());
  }
  if (from._internal_has_policy_type()) {
    _internal_mutable_policy_type()->::onos::a1t::a1::PolicyType::MergeFrom(from._internal_policy_type());
  }
  if (from._internal_has_message()) {
    _internal_mutable_message()->::onos::a1t::a1::AckMessage::MergeFrom(from._internal_message());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PolicyAckMessage::CopyFrom(const PolicyAckMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.a1t.a1.PolicyAckMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PolicyAckMessage::IsInitialized() const {
  return true;
}

void PolicyAckMessage::InternalSwap(PolicyAckMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &policy_id_, lhs_arena,
      &other->policy_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &notification_destination_, lhs_arena,
      &other->notification_destination_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PolicyAckMessage, message_)
      + sizeof(PolicyAckMessage::message_)
      - PROTOBUF_FIELD_OFFSET(PolicyAckMessage, policy_type_)>(
          reinterpret_cast<char*>(&policy_type_),
          reinterpret_cast<char*>(&other->policy_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PolicyAckMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fa1t_2fa1_2fpolicy_2eproto_getter, &descriptor_table_onos_2fa1t_2fa1_2fpolicy_2eproto_once,
      file_level_metadata_onos_2fa1t_2fa1_2fpolicy_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace a1
}  // namespace a1t
}  // namespace onos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::onos::a1t::a1::PolicyType* Arena::CreateMaybeMessage< ::onos::a1t::a1::PolicyType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::a1t::a1::PolicyType >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::a1t::a1::PolicyRequestMessage* Arena::CreateMaybeMessage< ::onos::a1t::a1::PolicyRequestMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::a1t::a1::PolicyRequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::a1t::a1::PolicyResultMessage* Arena::CreateMaybeMessage< ::onos::a1t::a1::PolicyResultMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::a1t::a1::PolicyResultMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::a1t::a1::PolicyStatusMessage* Arena::CreateMaybeMessage< ::onos::a1t::a1::PolicyStatusMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::a1t::a1::PolicyStatusMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::a1t::a1::PolicyAckMessage* Arena::CreateMaybeMessage< ::onos::a1t::a1::PolicyAckMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::a1t::a1::PolicyAckMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
