// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onos/a1t/a1/ei.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_onos_2fa1t_2fa1_2fei_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_onos_2fa1t_2fa1_2fei_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gogoproto/gogo.pb.h"
#include "onos/a1t/a1/a1.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_onos_2fa1t_2fa1_2fei_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_onos_2fa1t_2fa1_2fei_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_onos_2fa1t_2fa1_2fei_2eproto;
namespace onos {
namespace a1t {
namespace a1 {
class EIAckMessage;
struct EIAckMessageDefaultTypeInternal;
extern EIAckMessageDefaultTypeInternal _EIAckMessage_default_instance_;
class EIRequestMessage;
struct EIRequestMessageDefaultTypeInternal;
extern EIRequestMessageDefaultTypeInternal _EIRequestMessage_default_instance_;
class EIResultMessage;
struct EIResultMessageDefaultTypeInternal;
extern EIResultMessageDefaultTypeInternal _EIResultMessage_default_instance_;
class EIStatusMessage;
struct EIStatusMessageDefaultTypeInternal;
extern EIStatusMessageDefaultTypeInternal _EIStatusMessage_default_instance_;
}  // namespace a1
}  // namespace a1t
}  // namespace onos
PROTOBUF_NAMESPACE_OPEN
template<> ::onos::a1t::a1::EIAckMessage* Arena::CreateMaybeMessage<::onos::a1t::a1::EIAckMessage>(Arena*);
template<> ::onos::a1t::a1::EIRequestMessage* Arena::CreateMaybeMessage<::onos::a1t::a1::EIRequestMessage>(Arena*);
template<> ::onos::a1t::a1::EIResultMessage* Arena::CreateMaybeMessage<::onos::a1t::a1::EIResultMessage>(Arena*);
template<> ::onos::a1t::a1::EIStatusMessage* Arena::CreateMaybeMessage<::onos::a1t::a1::EIStatusMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace onos {
namespace a1t {
namespace a1 {

// ===================================================================

class EIRequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.a1t.a1.EIRequestMessage) */ {
 public:
  inline EIRequestMessage() : EIRequestMessage(nullptr) {}
  ~EIRequestMessage() override;
  explicit constexpr EIRequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EIRequestMessage(const EIRequestMessage& from);
  EIRequestMessage(EIRequestMessage&& from) noexcept
    : EIRequestMessage() {
    *this = ::std::move(from);
  }

  inline EIRequestMessage& operator=(const EIRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline EIRequestMessage& operator=(EIRequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EIRequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const EIRequestMessage* internal_default_instance() {
    return reinterpret_cast<const EIRequestMessage*>(
               &_EIRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(EIRequestMessage& a, EIRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(EIRequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EIRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EIRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EIRequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EIRequestMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EIRequestMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EIRequestMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.a1t.a1.EIRequestMessage";
  }
  protected:
  explicit EIRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEiJobIdFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // string ei_job_id = 1;
  void clear_ei_job_id();
  const std::string& ei_job_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ei_job_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ei_job_id();
  PROTOBUF_NODISCARD std::string* release_ei_job_id();
  void set_allocated_ei_job_id(std::string* ei_job_id);
  private:
  const std::string& _internal_ei_job_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ei_job_id(const std::string& value);
  std::string* _internal_mutable_ei_job_id();
  public:

  // .onos.a1t.a1.RequestMessage message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::onos::a1t::a1::RequestMessage& message() const;
  PROTOBUF_NODISCARD ::onos::a1t::a1::RequestMessage* release_message();
  ::onos::a1t::a1::RequestMessage* mutable_message();
  void set_allocated_message(::onos::a1t::a1::RequestMessage* message);
  private:
  const ::onos::a1t::a1::RequestMessage& _internal_message() const;
  ::onos::a1t::a1::RequestMessage* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::onos::a1t::a1::RequestMessage* message);
  ::onos::a1t::a1::RequestMessage* unsafe_arena_release_message();

  // @@protoc_insertion_point(class_scope:onos.a1t.a1.EIRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ei_job_id_;
  ::onos::a1t::a1::RequestMessage* message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fa1t_2fa1_2fei_2eproto;
};
// -------------------------------------------------------------------

class EIResultMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.a1t.a1.EIResultMessage) */ {
 public:
  inline EIResultMessage() : EIResultMessage(nullptr) {}
  ~EIResultMessage() override;
  explicit constexpr EIResultMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EIResultMessage(const EIResultMessage& from);
  EIResultMessage(EIResultMessage&& from) noexcept
    : EIResultMessage() {
    *this = ::std::move(from);
  }

  inline EIResultMessage& operator=(const EIResultMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline EIResultMessage& operator=(EIResultMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EIResultMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const EIResultMessage* internal_default_instance() {
    return reinterpret_cast<const EIResultMessage*>(
               &_EIResultMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(EIResultMessage& a, EIResultMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(EIResultMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EIResultMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EIResultMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EIResultMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EIResultMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EIResultMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EIResultMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.a1t.a1.EIResultMessage";
  }
  protected:
  explicit EIResultMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEiJobIdFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // string ei_job_id = 1;
  void clear_ei_job_id();
  const std::string& ei_job_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ei_job_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ei_job_id();
  PROTOBUF_NODISCARD std::string* release_ei_job_id();
  void set_allocated_ei_job_id(std::string* ei_job_id);
  private:
  const std::string& _internal_ei_job_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ei_job_id(const std::string& value);
  std::string* _internal_mutable_ei_job_id();
  public:

  // .onos.a1t.a1.ResultMessage message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::onos::a1t::a1::ResultMessage& message() const;
  PROTOBUF_NODISCARD ::onos::a1t::a1::ResultMessage* release_message();
  ::onos::a1t::a1::ResultMessage* mutable_message();
  void set_allocated_message(::onos::a1t::a1::ResultMessage* message);
  private:
  const ::onos::a1t::a1::ResultMessage& _internal_message() const;
  ::onos::a1t::a1::ResultMessage* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::onos::a1t::a1::ResultMessage* message);
  ::onos::a1t::a1::ResultMessage* unsafe_arena_release_message();

  // @@protoc_insertion_point(class_scope:onos.a1t.a1.EIResultMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ei_job_id_;
  ::onos::a1t::a1::ResultMessage* message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fa1t_2fa1_2fei_2eproto;
};
// -------------------------------------------------------------------

class EIStatusMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.a1t.a1.EIStatusMessage) */ {
 public:
  inline EIStatusMessage() : EIStatusMessage(nullptr) {}
  ~EIStatusMessage() override;
  explicit constexpr EIStatusMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EIStatusMessage(const EIStatusMessage& from);
  EIStatusMessage(EIStatusMessage&& from) noexcept
    : EIStatusMessage() {
    *this = ::std::move(from);
  }

  inline EIStatusMessage& operator=(const EIStatusMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline EIStatusMessage& operator=(EIStatusMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EIStatusMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const EIStatusMessage* internal_default_instance() {
    return reinterpret_cast<const EIStatusMessage*>(
               &_EIStatusMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(EIStatusMessage& a, EIStatusMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(EIStatusMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EIStatusMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EIStatusMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EIStatusMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EIStatusMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EIStatusMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EIStatusMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.a1t.a1.EIStatusMessage";
  }
  protected:
  explicit EIStatusMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEiJobIdFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // string ei_job_id = 1;
  void clear_ei_job_id();
  const std::string& ei_job_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ei_job_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ei_job_id();
  PROTOBUF_NODISCARD std::string* release_ei_job_id();
  void set_allocated_ei_job_id(std::string* ei_job_id);
  private:
  const std::string& _internal_ei_job_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ei_job_id(const std::string& value);
  std::string* _internal_mutable_ei_job_id();
  public:

  // .onos.a1t.a1.StatusMessage message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::onos::a1t::a1::StatusMessage& message() const;
  PROTOBUF_NODISCARD ::onos::a1t::a1::StatusMessage* release_message();
  ::onos::a1t::a1::StatusMessage* mutable_message();
  void set_allocated_message(::onos::a1t::a1::StatusMessage* message);
  private:
  const ::onos::a1t::a1::StatusMessage& _internal_message() const;
  ::onos::a1t::a1::StatusMessage* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::onos::a1t::a1::StatusMessage* message);
  ::onos::a1t::a1::StatusMessage* unsafe_arena_release_message();

  // @@protoc_insertion_point(class_scope:onos.a1t.a1.EIStatusMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ei_job_id_;
  ::onos::a1t::a1::StatusMessage* message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fa1t_2fa1_2fei_2eproto;
};
// -------------------------------------------------------------------

class EIAckMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.a1t.a1.EIAckMessage) */ {
 public:
  inline EIAckMessage() : EIAckMessage(nullptr) {}
  ~EIAckMessage() override;
  explicit constexpr EIAckMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EIAckMessage(const EIAckMessage& from);
  EIAckMessage(EIAckMessage&& from) noexcept
    : EIAckMessage() {
    *this = ::std::move(from);
  }

  inline EIAckMessage& operator=(const EIAckMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline EIAckMessage& operator=(EIAckMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EIAckMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const EIAckMessage* internal_default_instance() {
    return reinterpret_cast<const EIAckMessage*>(
               &_EIAckMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(EIAckMessage& a, EIAckMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(EIAckMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EIAckMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EIAckMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EIAckMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EIAckMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EIAckMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EIAckMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.a1t.a1.EIAckMessage";
  }
  protected:
  explicit EIAckMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEiJobIdFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // string ei_job_id = 1;
  void clear_ei_job_id();
  const std::string& ei_job_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ei_job_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ei_job_id();
  PROTOBUF_NODISCARD std::string* release_ei_job_id();
  void set_allocated_ei_job_id(std::string* ei_job_id);
  private:
  const std::string& _internal_ei_job_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ei_job_id(const std::string& value);
  std::string* _internal_mutable_ei_job_id();
  public:

  // .onos.a1t.a1.AckMessage message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::onos::a1t::a1::AckMessage& message() const;
  PROTOBUF_NODISCARD ::onos::a1t::a1::AckMessage* release_message();
  ::onos::a1t::a1::AckMessage* mutable_message();
  void set_allocated_message(::onos::a1t::a1::AckMessage* message);
  private:
  const ::onos::a1t::a1::AckMessage& _internal_message() const;
  ::onos::a1t::a1::AckMessage* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::onos::a1t::a1::AckMessage* message);
  ::onos::a1t::a1::AckMessage* unsafe_arena_release_message();

  // @@protoc_insertion_point(class_scope:onos.a1t.a1.EIAckMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ei_job_id_;
  ::onos::a1t::a1::AckMessage* message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fa1t_2fa1_2fei_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EIRequestMessage

// string ei_job_id = 1;
inline void EIRequestMessage::clear_ei_job_id() {
  ei_job_id_.ClearToEmpty();
}
inline const std::string& EIRequestMessage::ei_job_id() const {
  // @@protoc_insertion_point(field_get:onos.a1t.a1.EIRequestMessage.ei_job_id)
  return _internal_ei_job_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EIRequestMessage::set_ei_job_id(ArgT0&& arg0, ArgT... args) {
 
 ei_job_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.a1t.a1.EIRequestMessage.ei_job_id)
}
inline std::string* EIRequestMessage::mutable_ei_job_id() {
  std::string* _s = _internal_mutable_ei_job_id();
  // @@protoc_insertion_point(field_mutable:onos.a1t.a1.EIRequestMessage.ei_job_id)
  return _s;
}
inline const std::string& EIRequestMessage::_internal_ei_job_id() const {
  return ei_job_id_.Get();
}
inline void EIRequestMessage::_internal_set_ei_job_id(const std::string& value) {
  
  ei_job_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EIRequestMessage::_internal_mutable_ei_job_id() {
  
  return ei_job_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EIRequestMessage::release_ei_job_id() {
  // @@protoc_insertion_point(field_release:onos.a1t.a1.EIRequestMessage.ei_job_id)
  return ei_job_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EIRequestMessage::set_allocated_ei_job_id(std::string* ei_job_id) {
  if (ei_job_id != nullptr) {
    
  } else {
    
  }
  ei_job_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ei_job_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ei_job_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ei_job_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.a1.EIRequestMessage.ei_job_id)
}

// .onos.a1t.a1.RequestMessage message = 2;
inline bool EIRequestMessage::_internal_has_message() const {
  return this != internal_default_instance() && message_ != nullptr;
}
inline bool EIRequestMessage::has_message() const {
  return _internal_has_message();
}
inline const ::onos::a1t::a1::RequestMessage& EIRequestMessage::_internal_message() const {
  const ::onos::a1t::a1::RequestMessage* p = message_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::a1t::a1::RequestMessage&>(
      ::onos::a1t::a1::_RequestMessage_default_instance_);
}
inline const ::onos::a1t::a1::RequestMessage& EIRequestMessage::message() const {
  // @@protoc_insertion_point(field_get:onos.a1t.a1.EIRequestMessage.message)
  return _internal_message();
}
inline void EIRequestMessage::unsafe_arena_set_allocated_message(
    ::onos::a1t::a1::RequestMessage* message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.a1t.a1.EIRequestMessage.message)
}
inline ::onos::a1t::a1::RequestMessage* EIRequestMessage::release_message() {
  
  ::onos::a1t::a1::RequestMessage* temp = message_;
  message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::a1t::a1::RequestMessage* EIRequestMessage::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:onos.a1t.a1.EIRequestMessage.message)
  
  ::onos::a1t::a1::RequestMessage* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::onos::a1t::a1::RequestMessage* EIRequestMessage::_internal_mutable_message() {
  
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::a1t::a1::RequestMessage>(GetArenaForAllocation());
    message_ = p;
  }
  return message_;
}
inline ::onos::a1t::a1::RequestMessage* EIRequestMessage::mutable_message() {
  ::onos::a1t::a1::RequestMessage* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:onos.a1t.a1.EIRequestMessage.message)
  return _msg;
}
inline void EIRequestMessage::set_allocated_message(::onos::a1t::a1::RequestMessage* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message));
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.a1.EIRequestMessage.message)
}

// -------------------------------------------------------------------

// EIResultMessage

// string ei_job_id = 1;
inline void EIResultMessage::clear_ei_job_id() {
  ei_job_id_.ClearToEmpty();
}
inline const std::string& EIResultMessage::ei_job_id() const {
  // @@protoc_insertion_point(field_get:onos.a1t.a1.EIResultMessage.ei_job_id)
  return _internal_ei_job_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EIResultMessage::set_ei_job_id(ArgT0&& arg0, ArgT... args) {
 
 ei_job_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.a1t.a1.EIResultMessage.ei_job_id)
}
inline std::string* EIResultMessage::mutable_ei_job_id() {
  std::string* _s = _internal_mutable_ei_job_id();
  // @@protoc_insertion_point(field_mutable:onos.a1t.a1.EIResultMessage.ei_job_id)
  return _s;
}
inline const std::string& EIResultMessage::_internal_ei_job_id() const {
  return ei_job_id_.Get();
}
inline void EIResultMessage::_internal_set_ei_job_id(const std::string& value) {
  
  ei_job_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EIResultMessage::_internal_mutable_ei_job_id() {
  
  return ei_job_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EIResultMessage::release_ei_job_id() {
  // @@protoc_insertion_point(field_release:onos.a1t.a1.EIResultMessage.ei_job_id)
  return ei_job_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EIResultMessage::set_allocated_ei_job_id(std::string* ei_job_id) {
  if (ei_job_id != nullptr) {
    
  } else {
    
  }
  ei_job_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ei_job_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ei_job_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ei_job_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.a1.EIResultMessage.ei_job_id)
}

// .onos.a1t.a1.ResultMessage message = 2;
inline bool EIResultMessage::_internal_has_message() const {
  return this != internal_default_instance() && message_ != nullptr;
}
inline bool EIResultMessage::has_message() const {
  return _internal_has_message();
}
inline const ::onos::a1t::a1::ResultMessage& EIResultMessage::_internal_message() const {
  const ::onos::a1t::a1::ResultMessage* p = message_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::a1t::a1::ResultMessage&>(
      ::onos::a1t::a1::_ResultMessage_default_instance_);
}
inline const ::onos::a1t::a1::ResultMessage& EIResultMessage::message() const {
  // @@protoc_insertion_point(field_get:onos.a1t.a1.EIResultMessage.message)
  return _internal_message();
}
inline void EIResultMessage::unsafe_arena_set_allocated_message(
    ::onos::a1t::a1::ResultMessage* message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.a1t.a1.EIResultMessage.message)
}
inline ::onos::a1t::a1::ResultMessage* EIResultMessage::release_message() {
  
  ::onos::a1t::a1::ResultMessage* temp = message_;
  message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::a1t::a1::ResultMessage* EIResultMessage::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:onos.a1t.a1.EIResultMessage.message)
  
  ::onos::a1t::a1::ResultMessage* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::onos::a1t::a1::ResultMessage* EIResultMessage::_internal_mutable_message() {
  
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::a1t::a1::ResultMessage>(GetArenaForAllocation());
    message_ = p;
  }
  return message_;
}
inline ::onos::a1t::a1::ResultMessage* EIResultMessage::mutable_message() {
  ::onos::a1t::a1::ResultMessage* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:onos.a1t.a1.EIResultMessage.message)
  return _msg;
}
inline void EIResultMessage::set_allocated_message(::onos::a1t::a1::ResultMessage* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message));
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.a1.EIResultMessage.message)
}

// -------------------------------------------------------------------

// EIStatusMessage

// string ei_job_id = 1;
inline void EIStatusMessage::clear_ei_job_id() {
  ei_job_id_.ClearToEmpty();
}
inline const std::string& EIStatusMessage::ei_job_id() const {
  // @@protoc_insertion_point(field_get:onos.a1t.a1.EIStatusMessage.ei_job_id)
  return _internal_ei_job_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EIStatusMessage::set_ei_job_id(ArgT0&& arg0, ArgT... args) {
 
 ei_job_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.a1t.a1.EIStatusMessage.ei_job_id)
}
inline std::string* EIStatusMessage::mutable_ei_job_id() {
  std::string* _s = _internal_mutable_ei_job_id();
  // @@protoc_insertion_point(field_mutable:onos.a1t.a1.EIStatusMessage.ei_job_id)
  return _s;
}
inline const std::string& EIStatusMessage::_internal_ei_job_id() const {
  return ei_job_id_.Get();
}
inline void EIStatusMessage::_internal_set_ei_job_id(const std::string& value) {
  
  ei_job_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EIStatusMessage::_internal_mutable_ei_job_id() {
  
  return ei_job_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EIStatusMessage::release_ei_job_id() {
  // @@protoc_insertion_point(field_release:onos.a1t.a1.EIStatusMessage.ei_job_id)
  return ei_job_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EIStatusMessage::set_allocated_ei_job_id(std::string* ei_job_id) {
  if (ei_job_id != nullptr) {
    
  } else {
    
  }
  ei_job_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ei_job_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ei_job_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ei_job_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.a1.EIStatusMessage.ei_job_id)
}

// .onos.a1t.a1.StatusMessage message = 2;
inline bool EIStatusMessage::_internal_has_message() const {
  return this != internal_default_instance() && message_ != nullptr;
}
inline bool EIStatusMessage::has_message() const {
  return _internal_has_message();
}
inline const ::onos::a1t::a1::StatusMessage& EIStatusMessage::_internal_message() const {
  const ::onos::a1t::a1::StatusMessage* p = message_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::a1t::a1::StatusMessage&>(
      ::onos::a1t::a1::_StatusMessage_default_instance_);
}
inline const ::onos::a1t::a1::StatusMessage& EIStatusMessage::message() const {
  // @@protoc_insertion_point(field_get:onos.a1t.a1.EIStatusMessage.message)
  return _internal_message();
}
inline void EIStatusMessage::unsafe_arena_set_allocated_message(
    ::onos::a1t::a1::StatusMessage* message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.a1t.a1.EIStatusMessage.message)
}
inline ::onos::a1t::a1::StatusMessage* EIStatusMessage::release_message() {
  
  ::onos::a1t::a1::StatusMessage* temp = message_;
  message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::a1t::a1::StatusMessage* EIStatusMessage::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:onos.a1t.a1.EIStatusMessage.message)
  
  ::onos::a1t::a1::StatusMessage* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::onos::a1t::a1::StatusMessage* EIStatusMessage::_internal_mutable_message() {
  
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::a1t::a1::StatusMessage>(GetArenaForAllocation());
    message_ = p;
  }
  return message_;
}
inline ::onos::a1t::a1::StatusMessage* EIStatusMessage::mutable_message() {
  ::onos::a1t::a1::StatusMessage* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:onos.a1t.a1.EIStatusMessage.message)
  return _msg;
}
inline void EIStatusMessage::set_allocated_message(::onos::a1t::a1::StatusMessage* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message));
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.a1.EIStatusMessage.message)
}

// -------------------------------------------------------------------

// EIAckMessage

// string ei_job_id = 1;
inline void EIAckMessage::clear_ei_job_id() {
  ei_job_id_.ClearToEmpty();
}
inline const std::string& EIAckMessage::ei_job_id() const {
  // @@protoc_insertion_point(field_get:onos.a1t.a1.EIAckMessage.ei_job_id)
  return _internal_ei_job_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void EIAckMessage::set_ei_job_id(ArgT0&& arg0, ArgT... args) {
 
 ei_job_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.a1t.a1.EIAckMessage.ei_job_id)
}
inline std::string* EIAckMessage::mutable_ei_job_id() {
  std::string* _s = _internal_mutable_ei_job_id();
  // @@protoc_insertion_point(field_mutable:onos.a1t.a1.EIAckMessage.ei_job_id)
  return _s;
}
inline const std::string& EIAckMessage::_internal_ei_job_id() const {
  return ei_job_id_.Get();
}
inline void EIAckMessage::_internal_set_ei_job_id(const std::string& value) {
  
  ei_job_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* EIAckMessage::_internal_mutable_ei_job_id() {
  
  return ei_job_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* EIAckMessage::release_ei_job_id() {
  // @@protoc_insertion_point(field_release:onos.a1t.a1.EIAckMessage.ei_job_id)
  return ei_job_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void EIAckMessage::set_allocated_ei_job_id(std::string* ei_job_id) {
  if (ei_job_id != nullptr) {
    
  } else {
    
  }
  ei_job_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ei_job_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ei_job_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ei_job_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.a1.EIAckMessage.ei_job_id)
}

// .onos.a1t.a1.AckMessage message = 2;
inline bool EIAckMessage::_internal_has_message() const {
  return this != internal_default_instance() && message_ != nullptr;
}
inline bool EIAckMessage::has_message() const {
  return _internal_has_message();
}
inline const ::onos::a1t::a1::AckMessage& EIAckMessage::_internal_message() const {
  const ::onos::a1t::a1::AckMessage* p = message_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::a1t::a1::AckMessage&>(
      ::onos::a1t::a1::_AckMessage_default_instance_);
}
inline const ::onos::a1t::a1::AckMessage& EIAckMessage::message() const {
  // @@protoc_insertion_point(field_get:onos.a1t.a1.EIAckMessage.message)
  return _internal_message();
}
inline void EIAckMessage::unsafe_arena_set_allocated_message(
    ::onos::a1t::a1::AckMessage* message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.a1t.a1.EIAckMessage.message)
}
inline ::onos::a1t::a1::AckMessage* EIAckMessage::release_message() {
  
  ::onos::a1t::a1::AckMessage* temp = message_;
  message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::a1t::a1::AckMessage* EIAckMessage::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:onos.a1t.a1.EIAckMessage.message)
  
  ::onos::a1t::a1::AckMessage* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::onos::a1t::a1::AckMessage* EIAckMessage::_internal_mutable_message() {
  
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::a1t::a1::AckMessage>(GetArenaForAllocation());
    message_ = p;
  }
  return message_;
}
inline ::onos::a1t::a1::AckMessage* EIAckMessage::mutable_message() {
  ::onos::a1t::a1::AckMessage* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:onos.a1t.a1.EIAckMessage.message)
  return _msg;
}
inline void EIAckMessage::set_allocated_message(::onos::a1t::a1::AckMessage* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message));
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.a1.EIAckMessage.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace a1
}  // namespace a1t
}  // namespace onos

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_onos_2fa1t_2fa1_2fei_2eproto
