// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onos/a1t/a1/policy.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_onos_2fa1t_2fa1_2fpolicy_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_onos_2fa1t_2fa1_2fpolicy_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gogoproto/gogo.pb.h"
#include "onos/a1t/a1/a1.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_onos_2fa1t_2fa1_2fpolicy_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_onos_2fa1t_2fa1_2fpolicy_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_onos_2fa1t_2fa1_2fpolicy_2eproto;
namespace onos {
namespace a1t {
namespace a1 {
class PolicyAckMessage;
struct PolicyAckMessageDefaultTypeInternal;
extern PolicyAckMessageDefaultTypeInternal _PolicyAckMessage_default_instance_;
class PolicyRequestMessage;
struct PolicyRequestMessageDefaultTypeInternal;
extern PolicyRequestMessageDefaultTypeInternal _PolicyRequestMessage_default_instance_;
class PolicyResultMessage;
struct PolicyResultMessageDefaultTypeInternal;
extern PolicyResultMessageDefaultTypeInternal _PolicyResultMessage_default_instance_;
class PolicyStatusMessage;
struct PolicyStatusMessageDefaultTypeInternal;
extern PolicyStatusMessageDefaultTypeInternal _PolicyStatusMessage_default_instance_;
class PolicyType;
struct PolicyTypeDefaultTypeInternal;
extern PolicyTypeDefaultTypeInternal _PolicyType_default_instance_;
}  // namespace a1
}  // namespace a1t
}  // namespace onos
PROTOBUF_NAMESPACE_OPEN
template<> ::onos::a1t::a1::PolicyAckMessage* Arena::CreateMaybeMessage<::onos::a1t::a1::PolicyAckMessage>(Arena*);
template<> ::onos::a1t::a1::PolicyRequestMessage* Arena::CreateMaybeMessage<::onos::a1t::a1::PolicyRequestMessage>(Arena*);
template<> ::onos::a1t::a1::PolicyResultMessage* Arena::CreateMaybeMessage<::onos::a1t::a1::PolicyResultMessage>(Arena*);
template<> ::onos::a1t::a1::PolicyStatusMessage* Arena::CreateMaybeMessage<::onos::a1t::a1::PolicyStatusMessage>(Arena*);
template<> ::onos::a1t::a1::PolicyType* Arena::CreateMaybeMessage<::onos::a1t::a1::PolicyType>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace onos {
namespace a1t {
namespace a1 {

// ===================================================================

class PolicyType final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.a1t.a1.PolicyType) */ {
 public:
  inline PolicyType() : PolicyType(nullptr) {}
  ~PolicyType() override;
  explicit constexpr PolicyType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PolicyType(const PolicyType& from);
  PolicyType(PolicyType&& from) noexcept
    : PolicyType() {
    *this = ::std::move(from);
  }

  inline PolicyType& operator=(const PolicyType& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyType& operator=(PolicyType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PolicyType& default_instance() {
    return *internal_default_instance();
  }
  static inline const PolicyType* internal_default_instance() {
    return reinterpret_cast<const PolicyType*>(
               &_PolicyType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PolicyType& a, PolicyType& b) {
    a.Swap(&b);
  }
  inline void Swap(PolicyType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolicyType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PolicyType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PolicyType>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PolicyType& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PolicyType& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PolicyType* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.a1t.a1.PolicyType";
  }
  protected:
  explicit PolicyType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kVersionFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string version = 3;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:onos.a1t.a1.PolicyType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fa1t_2fa1_2fpolicy_2eproto;
};
// -------------------------------------------------------------------

class PolicyRequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.a1t.a1.PolicyRequestMessage) */ {
 public:
  inline PolicyRequestMessage() : PolicyRequestMessage(nullptr) {}
  ~PolicyRequestMessage() override;
  explicit constexpr PolicyRequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PolicyRequestMessage(const PolicyRequestMessage& from);
  PolicyRequestMessage(PolicyRequestMessage&& from) noexcept
    : PolicyRequestMessage() {
    *this = ::std::move(from);
  }

  inline PolicyRequestMessage& operator=(const PolicyRequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyRequestMessage& operator=(PolicyRequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PolicyRequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const PolicyRequestMessage* internal_default_instance() {
    return reinterpret_cast<const PolicyRequestMessage*>(
               &_PolicyRequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PolicyRequestMessage& a, PolicyRequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(PolicyRequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolicyRequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PolicyRequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PolicyRequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PolicyRequestMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PolicyRequestMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PolicyRequestMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.a1t.a1.PolicyRequestMessage";
  }
  protected:
  explicit PolicyRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPolicyIdFieldNumber = 1,
    kNotificationDestinationFieldNumber = 4,
    kPolicyTypeFieldNumber = 2,
    kMessageFieldNumber = 3,
  };
  // string policy_id = 1;
  void clear_policy_id();
  const std::string& policy_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_policy_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_policy_id();
  PROTOBUF_NODISCARD std::string* release_policy_id();
  void set_allocated_policy_id(std::string* policy_id);
  private:
  const std::string& _internal_policy_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_policy_id(const std::string& value);
  std::string* _internal_mutable_policy_id();
  public:

  // string notification_destination = 4;
  void clear_notification_destination();
  const std::string& notification_destination() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_notification_destination(ArgT0&& arg0, ArgT... args);
  std::string* mutable_notification_destination();
  PROTOBUF_NODISCARD std::string* release_notification_destination();
  void set_allocated_notification_destination(std::string* notification_destination);
  private:
  const std::string& _internal_notification_destination() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_notification_destination(const std::string& value);
  std::string* _internal_mutable_notification_destination();
  public:

  // .onos.a1t.a1.PolicyType policy_type = 2;
  bool has_policy_type() const;
  private:
  bool _internal_has_policy_type() const;
  public:
  void clear_policy_type();
  const ::onos::a1t::a1::PolicyType& policy_type() const;
  PROTOBUF_NODISCARD ::onos::a1t::a1::PolicyType* release_policy_type();
  ::onos::a1t::a1::PolicyType* mutable_policy_type();
  void set_allocated_policy_type(::onos::a1t::a1::PolicyType* policy_type);
  private:
  const ::onos::a1t::a1::PolicyType& _internal_policy_type() const;
  ::onos::a1t::a1::PolicyType* _internal_mutable_policy_type();
  public:
  void unsafe_arena_set_allocated_policy_type(
      ::onos::a1t::a1::PolicyType* policy_type);
  ::onos::a1t::a1::PolicyType* unsafe_arena_release_policy_type();

  // .onos.a1t.a1.RequestMessage message = 3;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::onos::a1t::a1::RequestMessage& message() const;
  PROTOBUF_NODISCARD ::onos::a1t::a1::RequestMessage* release_message();
  ::onos::a1t::a1::RequestMessage* mutable_message();
  void set_allocated_message(::onos::a1t::a1::RequestMessage* message);
  private:
  const ::onos::a1t::a1::RequestMessage& _internal_message() const;
  ::onos::a1t::a1::RequestMessage* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::onos::a1t::a1::RequestMessage* message);
  ::onos::a1t::a1::RequestMessage* unsafe_arena_release_message();

  // @@protoc_insertion_point(class_scope:onos.a1t.a1.PolicyRequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr policy_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notification_destination_;
  ::onos::a1t::a1::PolicyType* policy_type_;
  ::onos::a1t::a1::RequestMessage* message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fa1t_2fa1_2fpolicy_2eproto;
};
// -------------------------------------------------------------------

class PolicyResultMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.a1t.a1.PolicyResultMessage) */ {
 public:
  inline PolicyResultMessage() : PolicyResultMessage(nullptr) {}
  ~PolicyResultMessage() override;
  explicit constexpr PolicyResultMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PolicyResultMessage(const PolicyResultMessage& from);
  PolicyResultMessage(PolicyResultMessage&& from) noexcept
    : PolicyResultMessage() {
    *this = ::std::move(from);
  }

  inline PolicyResultMessage& operator=(const PolicyResultMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyResultMessage& operator=(PolicyResultMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PolicyResultMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const PolicyResultMessage* internal_default_instance() {
    return reinterpret_cast<const PolicyResultMessage*>(
               &_PolicyResultMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(PolicyResultMessage& a, PolicyResultMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(PolicyResultMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolicyResultMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PolicyResultMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PolicyResultMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PolicyResultMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PolicyResultMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PolicyResultMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.a1t.a1.PolicyResultMessage";
  }
  protected:
  explicit PolicyResultMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPolicyIdFieldNumber = 1,
    kNotificationDestinationFieldNumber = 4,
    kPolicyTypeFieldNumber = 2,
    kMessageFieldNumber = 3,
  };
  // string policy_id = 1;
  void clear_policy_id();
  const std::string& policy_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_policy_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_policy_id();
  PROTOBUF_NODISCARD std::string* release_policy_id();
  void set_allocated_policy_id(std::string* policy_id);
  private:
  const std::string& _internal_policy_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_policy_id(const std::string& value);
  std::string* _internal_mutable_policy_id();
  public:

  // string notification_destination = 4;
  void clear_notification_destination();
  const std::string& notification_destination() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_notification_destination(ArgT0&& arg0, ArgT... args);
  std::string* mutable_notification_destination();
  PROTOBUF_NODISCARD std::string* release_notification_destination();
  void set_allocated_notification_destination(std::string* notification_destination);
  private:
  const std::string& _internal_notification_destination() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_notification_destination(const std::string& value);
  std::string* _internal_mutable_notification_destination();
  public:

  // .onos.a1t.a1.PolicyType policy_type = 2;
  bool has_policy_type() const;
  private:
  bool _internal_has_policy_type() const;
  public:
  void clear_policy_type();
  const ::onos::a1t::a1::PolicyType& policy_type() const;
  PROTOBUF_NODISCARD ::onos::a1t::a1::PolicyType* release_policy_type();
  ::onos::a1t::a1::PolicyType* mutable_policy_type();
  void set_allocated_policy_type(::onos::a1t::a1::PolicyType* policy_type);
  private:
  const ::onos::a1t::a1::PolicyType& _internal_policy_type() const;
  ::onos::a1t::a1::PolicyType* _internal_mutable_policy_type();
  public:
  void unsafe_arena_set_allocated_policy_type(
      ::onos::a1t::a1::PolicyType* policy_type);
  ::onos::a1t::a1::PolicyType* unsafe_arena_release_policy_type();

  // .onos.a1t.a1.ResultMessage message = 3;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::onos::a1t::a1::ResultMessage& message() const;
  PROTOBUF_NODISCARD ::onos::a1t::a1::ResultMessage* release_message();
  ::onos::a1t::a1::ResultMessage* mutable_message();
  void set_allocated_message(::onos::a1t::a1::ResultMessage* message);
  private:
  const ::onos::a1t::a1::ResultMessage& _internal_message() const;
  ::onos::a1t::a1::ResultMessage* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::onos::a1t::a1::ResultMessage* message);
  ::onos::a1t::a1::ResultMessage* unsafe_arena_release_message();

  // @@protoc_insertion_point(class_scope:onos.a1t.a1.PolicyResultMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr policy_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notification_destination_;
  ::onos::a1t::a1::PolicyType* policy_type_;
  ::onos::a1t::a1::ResultMessage* message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fa1t_2fa1_2fpolicy_2eproto;
};
// -------------------------------------------------------------------

class PolicyStatusMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.a1t.a1.PolicyStatusMessage) */ {
 public:
  inline PolicyStatusMessage() : PolicyStatusMessage(nullptr) {}
  ~PolicyStatusMessage() override;
  explicit constexpr PolicyStatusMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PolicyStatusMessage(const PolicyStatusMessage& from);
  PolicyStatusMessage(PolicyStatusMessage&& from) noexcept
    : PolicyStatusMessage() {
    *this = ::std::move(from);
  }

  inline PolicyStatusMessage& operator=(const PolicyStatusMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyStatusMessage& operator=(PolicyStatusMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PolicyStatusMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const PolicyStatusMessage* internal_default_instance() {
    return reinterpret_cast<const PolicyStatusMessage*>(
               &_PolicyStatusMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PolicyStatusMessage& a, PolicyStatusMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(PolicyStatusMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolicyStatusMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PolicyStatusMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PolicyStatusMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PolicyStatusMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PolicyStatusMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PolicyStatusMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.a1t.a1.PolicyStatusMessage";
  }
  protected:
  explicit PolicyStatusMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPolicyIdFieldNumber = 1,
    kNotificationDestinationFieldNumber = 4,
    kPolicyTypeFieldNumber = 2,
    kMessageFieldNumber = 3,
  };
  // string policy_id = 1;
  void clear_policy_id();
  const std::string& policy_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_policy_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_policy_id();
  PROTOBUF_NODISCARD std::string* release_policy_id();
  void set_allocated_policy_id(std::string* policy_id);
  private:
  const std::string& _internal_policy_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_policy_id(const std::string& value);
  std::string* _internal_mutable_policy_id();
  public:

  // string notification_destination = 4;
  void clear_notification_destination();
  const std::string& notification_destination() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_notification_destination(ArgT0&& arg0, ArgT... args);
  std::string* mutable_notification_destination();
  PROTOBUF_NODISCARD std::string* release_notification_destination();
  void set_allocated_notification_destination(std::string* notification_destination);
  private:
  const std::string& _internal_notification_destination() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_notification_destination(const std::string& value);
  std::string* _internal_mutable_notification_destination();
  public:

  // .onos.a1t.a1.PolicyType policy_type = 2;
  bool has_policy_type() const;
  private:
  bool _internal_has_policy_type() const;
  public:
  void clear_policy_type();
  const ::onos::a1t::a1::PolicyType& policy_type() const;
  PROTOBUF_NODISCARD ::onos::a1t::a1::PolicyType* release_policy_type();
  ::onos::a1t::a1::PolicyType* mutable_policy_type();
  void set_allocated_policy_type(::onos::a1t::a1::PolicyType* policy_type);
  private:
  const ::onos::a1t::a1::PolicyType& _internal_policy_type() const;
  ::onos::a1t::a1::PolicyType* _internal_mutable_policy_type();
  public:
  void unsafe_arena_set_allocated_policy_type(
      ::onos::a1t::a1::PolicyType* policy_type);
  ::onos::a1t::a1::PolicyType* unsafe_arena_release_policy_type();

  // .onos.a1t.a1.StatusMessage message = 3;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::onos::a1t::a1::StatusMessage& message() const;
  PROTOBUF_NODISCARD ::onos::a1t::a1::StatusMessage* release_message();
  ::onos::a1t::a1::StatusMessage* mutable_message();
  void set_allocated_message(::onos::a1t::a1::StatusMessage* message);
  private:
  const ::onos::a1t::a1::StatusMessage& _internal_message() const;
  ::onos::a1t::a1::StatusMessage* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::onos::a1t::a1::StatusMessage* message);
  ::onos::a1t::a1::StatusMessage* unsafe_arena_release_message();

  // @@protoc_insertion_point(class_scope:onos.a1t.a1.PolicyStatusMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr policy_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notification_destination_;
  ::onos::a1t::a1::PolicyType* policy_type_;
  ::onos::a1t::a1::StatusMessage* message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fa1t_2fa1_2fpolicy_2eproto;
};
// -------------------------------------------------------------------

class PolicyAckMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.a1t.a1.PolicyAckMessage) */ {
 public:
  inline PolicyAckMessage() : PolicyAckMessage(nullptr) {}
  ~PolicyAckMessage() override;
  explicit constexpr PolicyAckMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PolicyAckMessage(const PolicyAckMessage& from);
  PolicyAckMessage(PolicyAckMessage&& from) noexcept
    : PolicyAckMessage() {
    *this = ::std::move(from);
  }

  inline PolicyAckMessage& operator=(const PolicyAckMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline PolicyAckMessage& operator=(PolicyAckMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PolicyAckMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const PolicyAckMessage* internal_default_instance() {
    return reinterpret_cast<const PolicyAckMessage*>(
               &_PolicyAckMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PolicyAckMessage& a, PolicyAckMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(PolicyAckMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PolicyAckMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PolicyAckMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PolicyAckMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PolicyAckMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PolicyAckMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PolicyAckMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.a1t.a1.PolicyAckMessage";
  }
  protected:
  explicit PolicyAckMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPolicyIdFieldNumber = 1,
    kNotificationDestinationFieldNumber = 4,
    kPolicyTypeFieldNumber = 2,
    kMessageFieldNumber = 3,
  };
  // string policy_id = 1;
  void clear_policy_id();
  const std::string& policy_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_policy_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_policy_id();
  PROTOBUF_NODISCARD std::string* release_policy_id();
  void set_allocated_policy_id(std::string* policy_id);
  private:
  const std::string& _internal_policy_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_policy_id(const std::string& value);
  std::string* _internal_mutable_policy_id();
  public:

  // string notification_destination = 4;
  void clear_notification_destination();
  const std::string& notification_destination() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_notification_destination(ArgT0&& arg0, ArgT... args);
  std::string* mutable_notification_destination();
  PROTOBUF_NODISCARD std::string* release_notification_destination();
  void set_allocated_notification_destination(std::string* notification_destination);
  private:
  const std::string& _internal_notification_destination() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_notification_destination(const std::string& value);
  std::string* _internal_mutable_notification_destination();
  public:

  // .onos.a1t.a1.PolicyType policy_type = 2;
  bool has_policy_type() const;
  private:
  bool _internal_has_policy_type() const;
  public:
  void clear_policy_type();
  const ::onos::a1t::a1::PolicyType& policy_type() const;
  PROTOBUF_NODISCARD ::onos::a1t::a1::PolicyType* release_policy_type();
  ::onos::a1t::a1::PolicyType* mutable_policy_type();
  void set_allocated_policy_type(::onos::a1t::a1::PolicyType* policy_type);
  private:
  const ::onos::a1t::a1::PolicyType& _internal_policy_type() const;
  ::onos::a1t::a1::PolicyType* _internal_mutable_policy_type();
  public:
  void unsafe_arena_set_allocated_policy_type(
      ::onos::a1t::a1::PolicyType* policy_type);
  ::onos::a1t::a1::PolicyType* unsafe_arena_release_policy_type();

  // .onos.a1t.a1.AckMessage message = 3;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::onos::a1t::a1::AckMessage& message() const;
  PROTOBUF_NODISCARD ::onos::a1t::a1::AckMessage* release_message();
  ::onos::a1t::a1::AckMessage* mutable_message();
  void set_allocated_message(::onos::a1t::a1::AckMessage* message);
  private:
  const ::onos::a1t::a1::AckMessage& _internal_message() const;
  ::onos::a1t::a1::AckMessage* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::onos::a1t::a1::AckMessage* message);
  ::onos::a1t::a1::AckMessage* unsafe_arena_release_message();

  // @@protoc_insertion_point(class_scope:onos.a1t.a1.PolicyAckMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr policy_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr notification_destination_;
  ::onos::a1t::a1::PolicyType* policy_type_;
  ::onos::a1t::a1::AckMessage* message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fa1t_2fa1_2fpolicy_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PolicyType

// string id = 1;
inline void PolicyType::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& PolicyType::id() const {
  // @@protoc_insertion_point(field_get:onos.a1t.a1.PolicyType.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PolicyType::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.a1t.a1.PolicyType.id)
}
inline std::string* PolicyType::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:onos.a1t.a1.PolicyType.id)
  return _s;
}
inline const std::string& PolicyType::_internal_id() const {
  return id_.Get();
}
inline void PolicyType::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PolicyType::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PolicyType::release_id() {
  // @@protoc_insertion_point(field_release:onos.a1t.a1.PolicyType.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PolicyType::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.a1.PolicyType.id)
}

// string name = 2;
inline void PolicyType::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& PolicyType::name() const {
  // @@protoc_insertion_point(field_get:onos.a1t.a1.PolicyType.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PolicyType::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.a1t.a1.PolicyType.name)
}
inline std::string* PolicyType::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:onos.a1t.a1.PolicyType.name)
  return _s;
}
inline const std::string& PolicyType::_internal_name() const {
  return name_.Get();
}
inline void PolicyType::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PolicyType::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PolicyType::release_name() {
  // @@protoc_insertion_point(field_release:onos.a1t.a1.PolicyType.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PolicyType::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.a1.PolicyType.name)
}

// string version = 3;
inline void PolicyType::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& PolicyType::version() const {
  // @@protoc_insertion_point(field_get:onos.a1t.a1.PolicyType.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PolicyType::set_version(ArgT0&& arg0, ArgT... args) {
 
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.a1t.a1.PolicyType.version)
}
inline std::string* PolicyType::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:onos.a1t.a1.PolicyType.version)
  return _s;
}
inline const std::string& PolicyType::_internal_version() const {
  return version_.Get();
}
inline void PolicyType::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PolicyType::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PolicyType::release_version() {
  // @@protoc_insertion_point(field_release:onos.a1t.a1.PolicyType.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PolicyType::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.a1.PolicyType.version)
}

// -------------------------------------------------------------------

// PolicyRequestMessage

// string policy_id = 1;
inline void PolicyRequestMessage::clear_policy_id() {
  policy_id_.ClearToEmpty();
}
inline const std::string& PolicyRequestMessage::policy_id() const {
  // @@protoc_insertion_point(field_get:onos.a1t.a1.PolicyRequestMessage.policy_id)
  return _internal_policy_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PolicyRequestMessage::set_policy_id(ArgT0&& arg0, ArgT... args) {
 
 policy_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.a1t.a1.PolicyRequestMessage.policy_id)
}
inline std::string* PolicyRequestMessage::mutable_policy_id() {
  std::string* _s = _internal_mutable_policy_id();
  // @@protoc_insertion_point(field_mutable:onos.a1t.a1.PolicyRequestMessage.policy_id)
  return _s;
}
inline const std::string& PolicyRequestMessage::_internal_policy_id() const {
  return policy_id_.Get();
}
inline void PolicyRequestMessage::_internal_set_policy_id(const std::string& value) {
  
  policy_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PolicyRequestMessage::_internal_mutable_policy_id() {
  
  return policy_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PolicyRequestMessage::release_policy_id() {
  // @@protoc_insertion_point(field_release:onos.a1t.a1.PolicyRequestMessage.policy_id)
  return policy_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PolicyRequestMessage::set_allocated_policy_id(std::string* policy_id) {
  if (policy_id != nullptr) {
    
  } else {
    
  }
  policy_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), policy_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (policy_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    policy_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.a1.PolicyRequestMessage.policy_id)
}

// .onos.a1t.a1.PolicyType policy_type = 2;
inline bool PolicyRequestMessage::_internal_has_policy_type() const {
  return this != internal_default_instance() && policy_type_ != nullptr;
}
inline bool PolicyRequestMessage::has_policy_type() const {
  return _internal_has_policy_type();
}
inline void PolicyRequestMessage::clear_policy_type() {
  if (GetArenaForAllocation() == nullptr && policy_type_ != nullptr) {
    delete policy_type_;
  }
  policy_type_ = nullptr;
}
inline const ::onos::a1t::a1::PolicyType& PolicyRequestMessage::_internal_policy_type() const {
  const ::onos::a1t::a1::PolicyType* p = policy_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::a1t::a1::PolicyType&>(
      ::onos::a1t::a1::_PolicyType_default_instance_);
}
inline const ::onos::a1t::a1::PolicyType& PolicyRequestMessage::policy_type() const {
  // @@protoc_insertion_point(field_get:onos.a1t.a1.PolicyRequestMessage.policy_type)
  return _internal_policy_type();
}
inline void PolicyRequestMessage::unsafe_arena_set_allocated_policy_type(
    ::onos::a1t::a1::PolicyType* policy_type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(policy_type_);
  }
  policy_type_ = policy_type;
  if (policy_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.a1t.a1.PolicyRequestMessage.policy_type)
}
inline ::onos::a1t::a1::PolicyType* PolicyRequestMessage::release_policy_type() {
  
  ::onos::a1t::a1::PolicyType* temp = policy_type_;
  policy_type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::a1t::a1::PolicyType* PolicyRequestMessage::unsafe_arena_release_policy_type() {
  // @@protoc_insertion_point(field_release:onos.a1t.a1.PolicyRequestMessage.policy_type)
  
  ::onos::a1t::a1::PolicyType* temp = policy_type_;
  policy_type_ = nullptr;
  return temp;
}
inline ::onos::a1t::a1::PolicyType* PolicyRequestMessage::_internal_mutable_policy_type() {
  
  if (policy_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::a1t::a1::PolicyType>(GetArenaForAllocation());
    policy_type_ = p;
  }
  return policy_type_;
}
inline ::onos::a1t::a1::PolicyType* PolicyRequestMessage::mutable_policy_type() {
  ::onos::a1t::a1::PolicyType* _msg = _internal_mutable_policy_type();
  // @@protoc_insertion_point(field_mutable:onos.a1t.a1.PolicyRequestMessage.policy_type)
  return _msg;
}
inline void PolicyRequestMessage::set_allocated_policy_type(::onos::a1t::a1::PolicyType* policy_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete policy_type_;
  }
  if (policy_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::a1t::a1::PolicyType>::GetOwningArena(policy_type);
    if (message_arena != submessage_arena) {
      policy_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, policy_type, submessage_arena);
    }
    
  } else {
    
  }
  policy_type_ = policy_type;
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.a1.PolicyRequestMessage.policy_type)
}

// .onos.a1t.a1.RequestMessage message = 3;
inline bool PolicyRequestMessage::_internal_has_message() const {
  return this != internal_default_instance() && message_ != nullptr;
}
inline bool PolicyRequestMessage::has_message() const {
  return _internal_has_message();
}
inline const ::onos::a1t::a1::RequestMessage& PolicyRequestMessage::_internal_message() const {
  const ::onos::a1t::a1::RequestMessage* p = message_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::a1t::a1::RequestMessage&>(
      ::onos::a1t::a1::_RequestMessage_default_instance_);
}
inline const ::onos::a1t::a1::RequestMessage& PolicyRequestMessage::message() const {
  // @@protoc_insertion_point(field_get:onos.a1t.a1.PolicyRequestMessage.message)
  return _internal_message();
}
inline void PolicyRequestMessage::unsafe_arena_set_allocated_message(
    ::onos::a1t::a1::RequestMessage* message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.a1t.a1.PolicyRequestMessage.message)
}
inline ::onos::a1t::a1::RequestMessage* PolicyRequestMessage::release_message() {
  
  ::onos::a1t::a1::RequestMessage* temp = message_;
  message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::a1t::a1::RequestMessage* PolicyRequestMessage::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:onos.a1t.a1.PolicyRequestMessage.message)
  
  ::onos::a1t::a1::RequestMessage* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::onos::a1t::a1::RequestMessage* PolicyRequestMessage::_internal_mutable_message() {
  
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::a1t::a1::RequestMessage>(GetArenaForAllocation());
    message_ = p;
  }
  return message_;
}
inline ::onos::a1t::a1::RequestMessage* PolicyRequestMessage::mutable_message() {
  ::onos::a1t::a1::RequestMessage* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:onos.a1t.a1.PolicyRequestMessage.message)
  return _msg;
}
inline void PolicyRequestMessage::set_allocated_message(::onos::a1t::a1::RequestMessage* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message));
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.a1.PolicyRequestMessage.message)
}

// string notification_destination = 4;
inline void PolicyRequestMessage::clear_notification_destination() {
  notification_destination_.ClearToEmpty();
}
inline const std::string& PolicyRequestMessage::notification_destination() const {
  // @@protoc_insertion_point(field_get:onos.a1t.a1.PolicyRequestMessage.notification_destination)
  return _internal_notification_destination();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PolicyRequestMessage::set_notification_destination(ArgT0&& arg0, ArgT... args) {
 
 notification_destination_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.a1t.a1.PolicyRequestMessage.notification_destination)
}
inline std::string* PolicyRequestMessage::mutable_notification_destination() {
  std::string* _s = _internal_mutable_notification_destination();
  // @@protoc_insertion_point(field_mutable:onos.a1t.a1.PolicyRequestMessage.notification_destination)
  return _s;
}
inline const std::string& PolicyRequestMessage::_internal_notification_destination() const {
  return notification_destination_.Get();
}
inline void PolicyRequestMessage::_internal_set_notification_destination(const std::string& value) {
  
  notification_destination_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PolicyRequestMessage::_internal_mutable_notification_destination() {
  
  return notification_destination_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PolicyRequestMessage::release_notification_destination() {
  // @@protoc_insertion_point(field_release:onos.a1t.a1.PolicyRequestMessage.notification_destination)
  return notification_destination_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PolicyRequestMessage::set_allocated_notification_destination(std::string* notification_destination) {
  if (notification_destination != nullptr) {
    
  } else {
    
  }
  notification_destination_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notification_destination,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (notification_destination_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    notification_destination_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.a1.PolicyRequestMessage.notification_destination)
}

// -------------------------------------------------------------------

// PolicyResultMessage

// string policy_id = 1;
inline void PolicyResultMessage::clear_policy_id() {
  policy_id_.ClearToEmpty();
}
inline const std::string& PolicyResultMessage::policy_id() const {
  // @@protoc_insertion_point(field_get:onos.a1t.a1.PolicyResultMessage.policy_id)
  return _internal_policy_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PolicyResultMessage::set_policy_id(ArgT0&& arg0, ArgT... args) {
 
 policy_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.a1t.a1.PolicyResultMessage.policy_id)
}
inline std::string* PolicyResultMessage::mutable_policy_id() {
  std::string* _s = _internal_mutable_policy_id();
  // @@protoc_insertion_point(field_mutable:onos.a1t.a1.PolicyResultMessage.policy_id)
  return _s;
}
inline const std::string& PolicyResultMessage::_internal_policy_id() const {
  return policy_id_.Get();
}
inline void PolicyResultMessage::_internal_set_policy_id(const std::string& value) {
  
  policy_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PolicyResultMessage::_internal_mutable_policy_id() {
  
  return policy_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PolicyResultMessage::release_policy_id() {
  // @@protoc_insertion_point(field_release:onos.a1t.a1.PolicyResultMessage.policy_id)
  return policy_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PolicyResultMessage::set_allocated_policy_id(std::string* policy_id) {
  if (policy_id != nullptr) {
    
  } else {
    
  }
  policy_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), policy_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (policy_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    policy_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.a1.PolicyResultMessage.policy_id)
}

// .onos.a1t.a1.PolicyType policy_type = 2;
inline bool PolicyResultMessage::_internal_has_policy_type() const {
  return this != internal_default_instance() && policy_type_ != nullptr;
}
inline bool PolicyResultMessage::has_policy_type() const {
  return _internal_has_policy_type();
}
inline void PolicyResultMessage::clear_policy_type() {
  if (GetArenaForAllocation() == nullptr && policy_type_ != nullptr) {
    delete policy_type_;
  }
  policy_type_ = nullptr;
}
inline const ::onos::a1t::a1::PolicyType& PolicyResultMessage::_internal_policy_type() const {
  const ::onos::a1t::a1::PolicyType* p = policy_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::a1t::a1::PolicyType&>(
      ::onos::a1t::a1::_PolicyType_default_instance_);
}
inline const ::onos::a1t::a1::PolicyType& PolicyResultMessage::policy_type() const {
  // @@protoc_insertion_point(field_get:onos.a1t.a1.PolicyResultMessage.policy_type)
  return _internal_policy_type();
}
inline void PolicyResultMessage::unsafe_arena_set_allocated_policy_type(
    ::onos::a1t::a1::PolicyType* policy_type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(policy_type_);
  }
  policy_type_ = policy_type;
  if (policy_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.a1t.a1.PolicyResultMessage.policy_type)
}
inline ::onos::a1t::a1::PolicyType* PolicyResultMessage::release_policy_type() {
  
  ::onos::a1t::a1::PolicyType* temp = policy_type_;
  policy_type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::a1t::a1::PolicyType* PolicyResultMessage::unsafe_arena_release_policy_type() {
  // @@protoc_insertion_point(field_release:onos.a1t.a1.PolicyResultMessage.policy_type)
  
  ::onos::a1t::a1::PolicyType* temp = policy_type_;
  policy_type_ = nullptr;
  return temp;
}
inline ::onos::a1t::a1::PolicyType* PolicyResultMessage::_internal_mutable_policy_type() {
  
  if (policy_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::a1t::a1::PolicyType>(GetArenaForAllocation());
    policy_type_ = p;
  }
  return policy_type_;
}
inline ::onos::a1t::a1::PolicyType* PolicyResultMessage::mutable_policy_type() {
  ::onos::a1t::a1::PolicyType* _msg = _internal_mutable_policy_type();
  // @@protoc_insertion_point(field_mutable:onos.a1t.a1.PolicyResultMessage.policy_type)
  return _msg;
}
inline void PolicyResultMessage::set_allocated_policy_type(::onos::a1t::a1::PolicyType* policy_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete policy_type_;
  }
  if (policy_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::a1t::a1::PolicyType>::GetOwningArena(policy_type);
    if (message_arena != submessage_arena) {
      policy_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, policy_type, submessage_arena);
    }
    
  } else {
    
  }
  policy_type_ = policy_type;
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.a1.PolicyResultMessage.policy_type)
}

// .onos.a1t.a1.ResultMessage message = 3;
inline bool PolicyResultMessage::_internal_has_message() const {
  return this != internal_default_instance() && message_ != nullptr;
}
inline bool PolicyResultMessage::has_message() const {
  return _internal_has_message();
}
inline const ::onos::a1t::a1::ResultMessage& PolicyResultMessage::_internal_message() const {
  const ::onos::a1t::a1::ResultMessage* p = message_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::a1t::a1::ResultMessage&>(
      ::onos::a1t::a1::_ResultMessage_default_instance_);
}
inline const ::onos::a1t::a1::ResultMessage& PolicyResultMessage::message() const {
  // @@protoc_insertion_point(field_get:onos.a1t.a1.PolicyResultMessage.message)
  return _internal_message();
}
inline void PolicyResultMessage::unsafe_arena_set_allocated_message(
    ::onos::a1t::a1::ResultMessage* message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.a1t.a1.PolicyResultMessage.message)
}
inline ::onos::a1t::a1::ResultMessage* PolicyResultMessage::release_message() {
  
  ::onos::a1t::a1::ResultMessage* temp = message_;
  message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::a1t::a1::ResultMessage* PolicyResultMessage::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:onos.a1t.a1.PolicyResultMessage.message)
  
  ::onos::a1t::a1::ResultMessage* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::onos::a1t::a1::ResultMessage* PolicyResultMessage::_internal_mutable_message() {
  
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::a1t::a1::ResultMessage>(GetArenaForAllocation());
    message_ = p;
  }
  return message_;
}
inline ::onos::a1t::a1::ResultMessage* PolicyResultMessage::mutable_message() {
  ::onos::a1t::a1::ResultMessage* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:onos.a1t.a1.PolicyResultMessage.message)
  return _msg;
}
inline void PolicyResultMessage::set_allocated_message(::onos::a1t::a1::ResultMessage* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message));
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.a1.PolicyResultMessage.message)
}

// string notification_destination = 4;
inline void PolicyResultMessage::clear_notification_destination() {
  notification_destination_.ClearToEmpty();
}
inline const std::string& PolicyResultMessage::notification_destination() const {
  // @@protoc_insertion_point(field_get:onos.a1t.a1.PolicyResultMessage.notification_destination)
  return _internal_notification_destination();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PolicyResultMessage::set_notification_destination(ArgT0&& arg0, ArgT... args) {
 
 notification_destination_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.a1t.a1.PolicyResultMessage.notification_destination)
}
inline std::string* PolicyResultMessage::mutable_notification_destination() {
  std::string* _s = _internal_mutable_notification_destination();
  // @@protoc_insertion_point(field_mutable:onos.a1t.a1.PolicyResultMessage.notification_destination)
  return _s;
}
inline const std::string& PolicyResultMessage::_internal_notification_destination() const {
  return notification_destination_.Get();
}
inline void PolicyResultMessage::_internal_set_notification_destination(const std::string& value) {
  
  notification_destination_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PolicyResultMessage::_internal_mutable_notification_destination() {
  
  return notification_destination_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PolicyResultMessage::release_notification_destination() {
  // @@protoc_insertion_point(field_release:onos.a1t.a1.PolicyResultMessage.notification_destination)
  return notification_destination_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PolicyResultMessage::set_allocated_notification_destination(std::string* notification_destination) {
  if (notification_destination != nullptr) {
    
  } else {
    
  }
  notification_destination_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notification_destination,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (notification_destination_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    notification_destination_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.a1.PolicyResultMessage.notification_destination)
}

// -------------------------------------------------------------------

// PolicyStatusMessage

// string policy_id = 1;
inline void PolicyStatusMessage::clear_policy_id() {
  policy_id_.ClearToEmpty();
}
inline const std::string& PolicyStatusMessage::policy_id() const {
  // @@protoc_insertion_point(field_get:onos.a1t.a1.PolicyStatusMessage.policy_id)
  return _internal_policy_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PolicyStatusMessage::set_policy_id(ArgT0&& arg0, ArgT... args) {
 
 policy_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.a1t.a1.PolicyStatusMessage.policy_id)
}
inline std::string* PolicyStatusMessage::mutable_policy_id() {
  std::string* _s = _internal_mutable_policy_id();
  // @@protoc_insertion_point(field_mutable:onos.a1t.a1.PolicyStatusMessage.policy_id)
  return _s;
}
inline const std::string& PolicyStatusMessage::_internal_policy_id() const {
  return policy_id_.Get();
}
inline void PolicyStatusMessage::_internal_set_policy_id(const std::string& value) {
  
  policy_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PolicyStatusMessage::_internal_mutable_policy_id() {
  
  return policy_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PolicyStatusMessage::release_policy_id() {
  // @@protoc_insertion_point(field_release:onos.a1t.a1.PolicyStatusMessage.policy_id)
  return policy_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PolicyStatusMessage::set_allocated_policy_id(std::string* policy_id) {
  if (policy_id != nullptr) {
    
  } else {
    
  }
  policy_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), policy_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (policy_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    policy_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.a1.PolicyStatusMessage.policy_id)
}

// .onos.a1t.a1.PolicyType policy_type = 2;
inline bool PolicyStatusMessage::_internal_has_policy_type() const {
  return this != internal_default_instance() && policy_type_ != nullptr;
}
inline bool PolicyStatusMessage::has_policy_type() const {
  return _internal_has_policy_type();
}
inline void PolicyStatusMessage::clear_policy_type() {
  if (GetArenaForAllocation() == nullptr && policy_type_ != nullptr) {
    delete policy_type_;
  }
  policy_type_ = nullptr;
}
inline const ::onos::a1t::a1::PolicyType& PolicyStatusMessage::_internal_policy_type() const {
  const ::onos::a1t::a1::PolicyType* p = policy_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::a1t::a1::PolicyType&>(
      ::onos::a1t::a1::_PolicyType_default_instance_);
}
inline const ::onos::a1t::a1::PolicyType& PolicyStatusMessage::policy_type() const {
  // @@protoc_insertion_point(field_get:onos.a1t.a1.PolicyStatusMessage.policy_type)
  return _internal_policy_type();
}
inline void PolicyStatusMessage::unsafe_arena_set_allocated_policy_type(
    ::onos::a1t::a1::PolicyType* policy_type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(policy_type_);
  }
  policy_type_ = policy_type;
  if (policy_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.a1t.a1.PolicyStatusMessage.policy_type)
}
inline ::onos::a1t::a1::PolicyType* PolicyStatusMessage::release_policy_type() {
  
  ::onos::a1t::a1::PolicyType* temp = policy_type_;
  policy_type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::a1t::a1::PolicyType* PolicyStatusMessage::unsafe_arena_release_policy_type() {
  // @@protoc_insertion_point(field_release:onos.a1t.a1.PolicyStatusMessage.policy_type)
  
  ::onos::a1t::a1::PolicyType* temp = policy_type_;
  policy_type_ = nullptr;
  return temp;
}
inline ::onos::a1t::a1::PolicyType* PolicyStatusMessage::_internal_mutable_policy_type() {
  
  if (policy_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::a1t::a1::PolicyType>(GetArenaForAllocation());
    policy_type_ = p;
  }
  return policy_type_;
}
inline ::onos::a1t::a1::PolicyType* PolicyStatusMessage::mutable_policy_type() {
  ::onos::a1t::a1::PolicyType* _msg = _internal_mutable_policy_type();
  // @@protoc_insertion_point(field_mutable:onos.a1t.a1.PolicyStatusMessage.policy_type)
  return _msg;
}
inline void PolicyStatusMessage::set_allocated_policy_type(::onos::a1t::a1::PolicyType* policy_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete policy_type_;
  }
  if (policy_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::a1t::a1::PolicyType>::GetOwningArena(policy_type);
    if (message_arena != submessage_arena) {
      policy_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, policy_type, submessage_arena);
    }
    
  } else {
    
  }
  policy_type_ = policy_type;
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.a1.PolicyStatusMessage.policy_type)
}

// .onos.a1t.a1.StatusMessage message = 3;
inline bool PolicyStatusMessage::_internal_has_message() const {
  return this != internal_default_instance() && message_ != nullptr;
}
inline bool PolicyStatusMessage::has_message() const {
  return _internal_has_message();
}
inline const ::onos::a1t::a1::StatusMessage& PolicyStatusMessage::_internal_message() const {
  const ::onos::a1t::a1::StatusMessage* p = message_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::a1t::a1::StatusMessage&>(
      ::onos::a1t::a1::_StatusMessage_default_instance_);
}
inline const ::onos::a1t::a1::StatusMessage& PolicyStatusMessage::message() const {
  // @@protoc_insertion_point(field_get:onos.a1t.a1.PolicyStatusMessage.message)
  return _internal_message();
}
inline void PolicyStatusMessage::unsafe_arena_set_allocated_message(
    ::onos::a1t::a1::StatusMessage* message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.a1t.a1.PolicyStatusMessage.message)
}
inline ::onos::a1t::a1::StatusMessage* PolicyStatusMessage::release_message() {
  
  ::onos::a1t::a1::StatusMessage* temp = message_;
  message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::a1t::a1::StatusMessage* PolicyStatusMessage::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:onos.a1t.a1.PolicyStatusMessage.message)
  
  ::onos::a1t::a1::StatusMessage* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::onos::a1t::a1::StatusMessage* PolicyStatusMessage::_internal_mutable_message() {
  
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::a1t::a1::StatusMessage>(GetArenaForAllocation());
    message_ = p;
  }
  return message_;
}
inline ::onos::a1t::a1::StatusMessage* PolicyStatusMessage::mutable_message() {
  ::onos::a1t::a1::StatusMessage* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:onos.a1t.a1.PolicyStatusMessage.message)
  return _msg;
}
inline void PolicyStatusMessage::set_allocated_message(::onos::a1t::a1::StatusMessage* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message));
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.a1.PolicyStatusMessage.message)
}

// string notification_destination = 4;
inline void PolicyStatusMessage::clear_notification_destination() {
  notification_destination_.ClearToEmpty();
}
inline const std::string& PolicyStatusMessage::notification_destination() const {
  // @@protoc_insertion_point(field_get:onos.a1t.a1.PolicyStatusMessage.notification_destination)
  return _internal_notification_destination();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PolicyStatusMessage::set_notification_destination(ArgT0&& arg0, ArgT... args) {
 
 notification_destination_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.a1t.a1.PolicyStatusMessage.notification_destination)
}
inline std::string* PolicyStatusMessage::mutable_notification_destination() {
  std::string* _s = _internal_mutable_notification_destination();
  // @@protoc_insertion_point(field_mutable:onos.a1t.a1.PolicyStatusMessage.notification_destination)
  return _s;
}
inline const std::string& PolicyStatusMessage::_internal_notification_destination() const {
  return notification_destination_.Get();
}
inline void PolicyStatusMessage::_internal_set_notification_destination(const std::string& value) {
  
  notification_destination_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PolicyStatusMessage::_internal_mutable_notification_destination() {
  
  return notification_destination_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PolicyStatusMessage::release_notification_destination() {
  // @@protoc_insertion_point(field_release:onos.a1t.a1.PolicyStatusMessage.notification_destination)
  return notification_destination_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PolicyStatusMessage::set_allocated_notification_destination(std::string* notification_destination) {
  if (notification_destination != nullptr) {
    
  } else {
    
  }
  notification_destination_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notification_destination,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (notification_destination_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    notification_destination_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.a1.PolicyStatusMessage.notification_destination)
}

// -------------------------------------------------------------------

// PolicyAckMessage

// string policy_id = 1;
inline void PolicyAckMessage::clear_policy_id() {
  policy_id_.ClearToEmpty();
}
inline const std::string& PolicyAckMessage::policy_id() const {
  // @@protoc_insertion_point(field_get:onos.a1t.a1.PolicyAckMessage.policy_id)
  return _internal_policy_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PolicyAckMessage::set_policy_id(ArgT0&& arg0, ArgT... args) {
 
 policy_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.a1t.a1.PolicyAckMessage.policy_id)
}
inline std::string* PolicyAckMessage::mutable_policy_id() {
  std::string* _s = _internal_mutable_policy_id();
  // @@protoc_insertion_point(field_mutable:onos.a1t.a1.PolicyAckMessage.policy_id)
  return _s;
}
inline const std::string& PolicyAckMessage::_internal_policy_id() const {
  return policy_id_.Get();
}
inline void PolicyAckMessage::_internal_set_policy_id(const std::string& value) {
  
  policy_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PolicyAckMessage::_internal_mutable_policy_id() {
  
  return policy_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PolicyAckMessage::release_policy_id() {
  // @@protoc_insertion_point(field_release:onos.a1t.a1.PolicyAckMessage.policy_id)
  return policy_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PolicyAckMessage::set_allocated_policy_id(std::string* policy_id) {
  if (policy_id != nullptr) {
    
  } else {
    
  }
  policy_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), policy_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (policy_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    policy_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.a1.PolicyAckMessage.policy_id)
}

// .onos.a1t.a1.PolicyType policy_type = 2;
inline bool PolicyAckMessage::_internal_has_policy_type() const {
  return this != internal_default_instance() && policy_type_ != nullptr;
}
inline bool PolicyAckMessage::has_policy_type() const {
  return _internal_has_policy_type();
}
inline void PolicyAckMessage::clear_policy_type() {
  if (GetArenaForAllocation() == nullptr && policy_type_ != nullptr) {
    delete policy_type_;
  }
  policy_type_ = nullptr;
}
inline const ::onos::a1t::a1::PolicyType& PolicyAckMessage::_internal_policy_type() const {
  const ::onos::a1t::a1::PolicyType* p = policy_type_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::a1t::a1::PolicyType&>(
      ::onos::a1t::a1::_PolicyType_default_instance_);
}
inline const ::onos::a1t::a1::PolicyType& PolicyAckMessage::policy_type() const {
  // @@protoc_insertion_point(field_get:onos.a1t.a1.PolicyAckMessage.policy_type)
  return _internal_policy_type();
}
inline void PolicyAckMessage::unsafe_arena_set_allocated_policy_type(
    ::onos::a1t::a1::PolicyType* policy_type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(policy_type_);
  }
  policy_type_ = policy_type;
  if (policy_type) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.a1t.a1.PolicyAckMessage.policy_type)
}
inline ::onos::a1t::a1::PolicyType* PolicyAckMessage::release_policy_type() {
  
  ::onos::a1t::a1::PolicyType* temp = policy_type_;
  policy_type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::a1t::a1::PolicyType* PolicyAckMessage::unsafe_arena_release_policy_type() {
  // @@protoc_insertion_point(field_release:onos.a1t.a1.PolicyAckMessage.policy_type)
  
  ::onos::a1t::a1::PolicyType* temp = policy_type_;
  policy_type_ = nullptr;
  return temp;
}
inline ::onos::a1t::a1::PolicyType* PolicyAckMessage::_internal_mutable_policy_type() {
  
  if (policy_type_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::a1t::a1::PolicyType>(GetArenaForAllocation());
    policy_type_ = p;
  }
  return policy_type_;
}
inline ::onos::a1t::a1::PolicyType* PolicyAckMessage::mutable_policy_type() {
  ::onos::a1t::a1::PolicyType* _msg = _internal_mutable_policy_type();
  // @@protoc_insertion_point(field_mutable:onos.a1t.a1.PolicyAckMessage.policy_type)
  return _msg;
}
inline void PolicyAckMessage::set_allocated_policy_type(::onos::a1t::a1::PolicyType* policy_type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete policy_type_;
  }
  if (policy_type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::a1t::a1::PolicyType>::GetOwningArena(policy_type);
    if (message_arena != submessage_arena) {
      policy_type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, policy_type, submessage_arena);
    }
    
  } else {
    
  }
  policy_type_ = policy_type;
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.a1.PolicyAckMessage.policy_type)
}

// .onos.a1t.a1.AckMessage message = 3;
inline bool PolicyAckMessage::_internal_has_message() const {
  return this != internal_default_instance() && message_ != nullptr;
}
inline bool PolicyAckMessage::has_message() const {
  return _internal_has_message();
}
inline const ::onos::a1t::a1::AckMessage& PolicyAckMessage::_internal_message() const {
  const ::onos::a1t::a1::AckMessage* p = message_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::a1t::a1::AckMessage&>(
      ::onos::a1t::a1::_AckMessage_default_instance_);
}
inline const ::onos::a1t::a1::AckMessage& PolicyAckMessage::message() const {
  // @@protoc_insertion_point(field_get:onos.a1t.a1.PolicyAckMessage.message)
  return _internal_message();
}
inline void PolicyAckMessage::unsafe_arena_set_allocated_message(
    ::onos::a1t::a1::AckMessage* message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.a1t.a1.PolicyAckMessage.message)
}
inline ::onos::a1t::a1::AckMessage* PolicyAckMessage::release_message() {
  
  ::onos::a1t::a1::AckMessage* temp = message_;
  message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::a1t::a1::AckMessage* PolicyAckMessage::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:onos.a1t.a1.PolicyAckMessage.message)
  
  ::onos::a1t::a1::AckMessage* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::onos::a1t::a1::AckMessage* PolicyAckMessage::_internal_mutable_message() {
  
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::a1t::a1::AckMessage>(GetArenaForAllocation());
    message_ = p;
  }
  return message_;
}
inline ::onos::a1t::a1::AckMessage* PolicyAckMessage::mutable_message() {
  ::onos::a1t::a1::AckMessage* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:onos.a1t.a1.PolicyAckMessage.message)
  return _msg;
}
inline void PolicyAckMessage::set_allocated_message(::onos::a1t::a1::AckMessage* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message));
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.a1.PolicyAckMessage.message)
}

// string notification_destination = 4;
inline void PolicyAckMessage::clear_notification_destination() {
  notification_destination_.ClearToEmpty();
}
inline const std::string& PolicyAckMessage::notification_destination() const {
  // @@protoc_insertion_point(field_get:onos.a1t.a1.PolicyAckMessage.notification_destination)
  return _internal_notification_destination();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PolicyAckMessage::set_notification_destination(ArgT0&& arg0, ArgT... args) {
 
 notification_destination_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.a1t.a1.PolicyAckMessage.notification_destination)
}
inline std::string* PolicyAckMessage::mutable_notification_destination() {
  std::string* _s = _internal_mutable_notification_destination();
  // @@protoc_insertion_point(field_mutable:onos.a1t.a1.PolicyAckMessage.notification_destination)
  return _s;
}
inline const std::string& PolicyAckMessage::_internal_notification_destination() const {
  return notification_destination_.Get();
}
inline void PolicyAckMessage::_internal_set_notification_destination(const std::string& value) {
  
  notification_destination_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PolicyAckMessage::_internal_mutable_notification_destination() {
  
  return notification_destination_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PolicyAckMessage::release_notification_destination() {
  // @@protoc_insertion_point(field_release:onos.a1t.a1.PolicyAckMessage.notification_destination)
  return notification_destination_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PolicyAckMessage::set_allocated_notification_destination(std::string* notification_destination) {
  if (notification_destination != nullptr) {
    
  } else {
    
  }
  notification_destination_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), notification_destination,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (notification_destination_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    notification_destination_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.a1.PolicyAckMessage.notification_destination)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace a1
}  // namespace a1t
}  // namespace onos

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_onos_2fa1t_2fa1_2fpolicy_2eproto
