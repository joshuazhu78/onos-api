// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onos/a1t/a1/ei.proto

#include "onos/a1t/a1/ei.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace onos {
namespace a1t {
namespace a1 {
constexpr EIRequestMessage::EIRequestMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ei_job_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , message_(nullptr){}
struct EIRequestMessageDefaultTypeInternal {
  constexpr EIRequestMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EIRequestMessageDefaultTypeInternal() {}
  union {
    EIRequestMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EIRequestMessageDefaultTypeInternal _EIRequestMessage_default_instance_;
constexpr EIResultMessage::EIResultMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ei_job_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , message_(nullptr){}
struct EIResultMessageDefaultTypeInternal {
  constexpr EIResultMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EIResultMessageDefaultTypeInternal() {}
  union {
    EIResultMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EIResultMessageDefaultTypeInternal _EIResultMessage_default_instance_;
constexpr EIStatusMessage::EIStatusMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ei_job_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , message_(nullptr){}
struct EIStatusMessageDefaultTypeInternal {
  constexpr EIStatusMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EIStatusMessageDefaultTypeInternal() {}
  union {
    EIStatusMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EIStatusMessageDefaultTypeInternal _EIStatusMessage_default_instance_;
constexpr EIAckMessage::EIAckMessage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ei_job_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , message_(nullptr){}
struct EIAckMessageDefaultTypeInternal {
  constexpr EIAckMessageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EIAckMessageDefaultTypeInternal() {}
  union {
    EIAckMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EIAckMessageDefaultTypeInternal _EIAckMessage_default_instance_;
}  // namespace a1
}  // namespace a1t
}  // namespace onos
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_onos_2fa1t_2fa1_2fei_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_onos_2fa1t_2fa1_2fei_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_onos_2fa1t_2fa1_2fei_2eproto = nullptr;

const uint32_t TableStruct_onos_2fa1t_2fa1_2fei_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::a1t::a1::EIRequestMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::a1t::a1::EIRequestMessage, ei_job_id_),
  PROTOBUF_FIELD_OFFSET(::onos::a1t::a1::EIRequestMessage, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::a1t::a1::EIResultMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::a1t::a1::EIResultMessage, ei_job_id_),
  PROTOBUF_FIELD_OFFSET(::onos::a1t::a1::EIResultMessage, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::a1t::a1::EIStatusMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::a1t::a1::EIStatusMessage, ei_job_id_),
  PROTOBUF_FIELD_OFFSET(::onos::a1t::a1::EIStatusMessage, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::a1t::a1::EIAckMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::a1t::a1::EIAckMessage, ei_job_id_),
  PROTOBUF_FIELD_OFFSET(::onos::a1t::a1::EIAckMessage, message_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::onos::a1t::a1::EIRequestMessage)},
  { 8, -1, -1, sizeof(::onos::a1t::a1::EIResultMessage)},
  { 16, -1, -1, sizeof(::onos::a1t::a1::EIStatusMessage)},
  { 24, -1, -1, sizeof(::onos::a1t::a1::EIAckMessage)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::a1t::a1::_EIRequestMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::a1t::a1::_EIResultMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::a1t::a1::_EIStatusMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::a1t::a1::_EIAckMessage_default_instance_),
};

const char descriptor_table_protodef_onos_2fa1t_2fa1_2fei_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024onos/a1t/a1/ei.proto\022\013onos.a1t.a1\032\024gog"
  "oproto/gogo.proto\032\024onos/a1t/a1/a1.proto\""
  "S\n\020EIRequestMessage\022\021\n\tei_job_id\030\001 \001(\t\022,"
  "\n\007message\030\002 \001(\0132\033.onos.a1t.a1.RequestMes"
  "sage\"Q\n\017EIResultMessage\022\021\n\tei_job_id\030\001 \001"
  "(\t\022+\n\007message\030\002 \001(\0132\032.onos.a1t.a1.Result"
  "Message\"Q\n\017EIStatusMessage\022\021\n\tei_job_id\030"
  "\001 \001(\t\022+\n\007message\030\002 \001(\0132\032.onos.a1t.a1.Sta"
  "tusMessage\"K\n\014EIAckMessage\022\021\n\tei_job_id\030"
  "\001 \001(\t\022(\n\007message\030\002 \001(\0132\027.onos.a1t.a1.Ack"
  "Message2\271\004\n\tEIService\022J\n\007EIQuery\022\034.onos."
  "a1t.a1.EIResultMessage\032\035.onos.a1t.a1.EIR"
  "equestMessage(\0010\001\022M\n\nEIJobSetup\022\034.onos.a"
  "1t.a1.EIResultMessage\032\035.onos.a1t.a1.EIRe"
  "questMessage(\0010\001\022N\n\013EIJobUpdate\022\034.onos.a"
  "1t.a1.EIResultMessage\032\035.onos.a1t.a1.EIRe"
  "questMessage(\0010\001\022N\n\013EIJobDelete\022\034.onos.a"
  "1t.a1.EIResultMessage\032\035.onos.a1t.a1.EIRe"
  "questMessage(\0010\001\022S\n\020EIJobStatusQuery\022\034.o"
  "nos.a1t.a1.EIResultMessage\032\035.onos.a1t.a1"
  ".EIRequestMessage(\0010\001\022L\n\021EIJobStatusNoti"
  "fy\022\034.onos.a1t.a1.EIStatusMessage\032\031.onos."
  "a1t.a1.EIAckMessage\022N\n\023EIJobResultDelive"
  "ry\022\034.onos.a1t.a1.EIResultMessage\032\031.onos."
  "a1t.a1.EIAckMessageB\004\300\343\036\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_onos_2fa1t_2fa1_2fei_2eproto_deps[2] = {
  &::descriptor_table_gogoproto_2fgogo_2eproto,
  &::descriptor_table_onos_2fa1t_2fa1_2fa1_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_onos_2fa1t_2fa1_2fei_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_onos_2fa1t_2fa1_2fei_2eproto = {
  false, false, 993, descriptor_table_protodef_onos_2fa1t_2fa1_2fei_2eproto, "onos/a1t/a1/ei.proto", 
  &descriptor_table_onos_2fa1t_2fa1_2fei_2eproto_once, descriptor_table_onos_2fa1t_2fa1_2fei_2eproto_deps, 2, 4,
  schemas, file_default_instances, TableStruct_onos_2fa1t_2fa1_2fei_2eproto::offsets,
  file_level_metadata_onos_2fa1t_2fa1_2fei_2eproto, file_level_enum_descriptors_onos_2fa1t_2fa1_2fei_2eproto, file_level_service_descriptors_onos_2fa1t_2fa1_2fei_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_onos_2fa1t_2fa1_2fei_2eproto_getter() {
  return &descriptor_table_onos_2fa1t_2fa1_2fei_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_onos_2fa1t_2fa1_2fei_2eproto(&descriptor_table_onos_2fa1t_2fa1_2fei_2eproto);
namespace onos {
namespace a1t {
namespace a1 {

// ===================================================================

class EIRequestMessage::_Internal {
 public:
  static const ::onos::a1t::a1::RequestMessage& message(const EIRequestMessage* msg);
};

const ::onos::a1t::a1::RequestMessage&
EIRequestMessage::_Internal::message(const EIRequestMessage* msg) {
  return *msg->message_;
}
void EIRequestMessage::clear_message() {
  if (GetArenaForAllocation() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
}
EIRequestMessage::EIRequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.a1t.a1.EIRequestMessage)
}
EIRequestMessage::EIRequestMessage(const EIRequestMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ei_job_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ei_job_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ei_job_id().empty()) {
    ei_job_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ei_job_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_message()) {
    message_ = new ::onos::a1t::a1::RequestMessage(*from.message_);
  } else {
    message_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:onos.a1t.a1.EIRequestMessage)
}

inline void EIRequestMessage::SharedCtor() {
ei_job_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ei_job_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
message_ = nullptr;
}

EIRequestMessage::~EIRequestMessage() {
  // @@protoc_insertion_point(destructor:onos.a1t.a1.EIRequestMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EIRequestMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ei_job_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete message_;
}

void EIRequestMessage::ArenaDtor(void* object) {
  EIRequestMessage* _this = reinterpret_cast< EIRequestMessage* >(object);
  (void)_this;
}
void EIRequestMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EIRequestMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EIRequestMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.a1t.a1.EIRequestMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ei_job_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EIRequestMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ei_job_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ei_job_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.a1t.a1.EIRequestMessage.ei_job_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.a1t.a1.RequestMessage message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EIRequestMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.a1t.a1.EIRequestMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ei_job_id = 1;
  if (!this->_internal_ei_job_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ei_job_id().data(), static_cast<int>(this->_internal_ei_job_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.a1t.a1.EIRequestMessage.ei_job_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ei_job_id(), target);
  }

  // .onos.a1t.a1.RequestMessage message = 2;
  if (this->_internal_has_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::message(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.a1t.a1.EIRequestMessage)
  return target;
}

size_t EIRequestMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.a1t.a1.EIRequestMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ei_job_id = 1;
  if (!this->_internal_ei_job_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ei_job_id());
  }

  // .onos.a1t.a1.RequestMessage message = 2;
  if (this->_internal_has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EIRequestMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EIRequestMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EIRequestMessage::GetClassData() const { return &_class_data_; }

void EIRequestMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EIRequestMessage *>(to)->MergeFrom(
      static_cast<const EIRequestMessage &>(from));
}


void EIRequestMessage::MergeFrom(const EIRequestMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.a1t.a1.EIRequestMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ei_job_id().empty()) {
    _internal_set_ei_job_id(from._internal_ei_job_id());
  }
  if (from._internal_has_message()) {
    _internal_mutable_message()->::onos::a1t::a1::RequestMessage::MergeFrom(from._internal_message());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EIRequestMessage::CopyFrom(const EIRequestMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.a1t.a1.EIRequestMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EIRequestMessage::IsInitialized() const {
  return true;
}

void EIRequestMessage::InternalSwap(EIRequestMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ei_job_id_, lhs_arena,
      &other->ei_job_id_, rhs_arena
  );
  swap(message_, other->message_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EIRequestMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fa1t_2fa1_2fei_2eproto_getter, &descriptor_table_onos_2fa1t_2fa1_2fei_2eproto_once,
      file_level_metadata_onos_2fa1t_2fa1_2fei_2eproto[0]);
}

// ===================================================================

class EIResultMessage::_Internal {
 public:
  static const ::onos::a1t::a1::ResultMessage& message(const EIResultMessage* msg);
};

const ::onos::a1t::a1::ResultMessage&
EIResultMessage::_Internal::message(const EIResultMessage* msg) {
  return *msg->message_;
}
void EIResultMessage::clear_message() {
  if (GetArenaForAllocation() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
}
EIResultMessage::EIResultMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.a1t.a1.EIResultMessage)
}
EIResultMessage::EIResultMessage(const EIResultMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ei_job_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ei_job_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ei_job_id().empty()) {
    ei_job_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ei_job_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_message()) {
    message_ = new ::onos::a1t::a1::ResultMessage(*from.message_);
  } else {
    message_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:onos.a1t.a1.EIResultMessage)
}

inline void EIResultMessage::SharedCtor() {
ei_job_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ei_job_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
message_ = nullptr;
}

EIResultMessage::~EIResultMessage() {
  // @@protoc_insertion_point(destructor:onos.a1t.a1.EIResultMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EIResultMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ei_job_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete message_;
}

void EIResultMessage::ArenaDtor(void* object) {
  EIResultMessage* _this = reinterpret_cast< EIResultMessage* >(object);
  (void)_this;
}
void EIResultMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EIResultMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EIResultMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.a1t.a1.EIResultMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ei_job_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EIResultMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ei_job_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ei_job_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.a1t.a1.EIResultMessage.ei_job_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.a1t.a1.ResultMessage message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EIResultMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.a1t.a1.EIResultMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ei_job_id = 1;
  if (!this->_internal_ei_job_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ei_job_id().data(), static_cast<int>(this->_internal_ei_job_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.a1t.a1.EIResultMessage.ei_job_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ei_job_id(), target);
  }

  // .onos.a1t.a1.ResultMessage message = 2;
  if (this->_internal_has_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::message(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.a1t.a1.EIResultMessage)
  return target;
}

size_t EIResultMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.a1t.a1.EIResultMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ei_job_id = 1;
  if (!this->_internal_ei_job_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ei_job_id());
  }

  // .onos.a1t.a1.ResultMessage message = 2;
  if (this->_internal_has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EIResultMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EIResultMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EIResultMessage::GetClassData() const { return &_class_data_; }

void EIResultMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EIResultMessage *>(to)->MergeFrom(
      static_cast<const EIResultMessage &>(from));
}


void EIResultMessage::MergeFrom(const EIResultMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.a1t.a1.EIResultMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ei_job_id().empty()) {
    _internal_set_ei_job_id(from._internal_ei_job_id());
  }
  if (from._internal_has_message()) {
    _internal_mutable_message()->::onos::a1t::a1::ResultMessage::MergeFrom(from._internal_message());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EIResultMessage::CopyFrom(const EIResultMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.a1t.a1.EIResultMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EIResultMessage::IsInitialized() const {
  return true;
}

void EIResultMessage::InternalSwap(EIResultMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ei_job_id_, lhs_arena,
      &other->ei_job_id_, rhs_arena
  );
  swap(message_, other->message_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EIResultMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fa1t_2fa1_2fei_2eproto_getter, &descriptor_table_onos_2fa1t_2fa1_2fei_2eproto_once,
      file_level_metadata_onos_2fa1t_2fa1_2fei_2eproto[1]);
}

// ===================================================================

class EIStatusMessage::_Internal {
 public:
  static const ::onos::a1t::a1::StatusMessage& message(const EIStatusMessage* msg);
};

const ::onos::a1t::a1::StatusMessage&
EIStatusMessage::_Internal::message(const EIStatusMessage* msg) {
  return *msg->message_;
}
void EIStatusMessage::clear_message() {
  if (GetArenaForAllocation() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
}
EIStatusMessage::EIStatusMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.a1t.a1.EIStatusMessage)
}
EIStatusMessage::EIStatusMessage(const EIStatusMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ei_job_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ei_job_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ei_job_id().empty()) {
    ei_job_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ei_job_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_message()) {
    message_ = new ::onos::a1t::a1::StatusMessage(*from.message_);
  } else {
    message_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:onos.a1t.a1.EIStatusMessage)
}

inline void EIStatusMessage::SharedCtor() {
ei_job_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ei_job_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
message_ = nullptr;
}

EIStatusMessage::~EIStatusMessage() {
  // @@protoc_insertion_point(destructor:onos.a1t.a1.EIStatusMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EIStatusMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ei_job_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete message_;
}

void EIStatusMessage::ArenaDtor(void* object) {
  EIStatusMessage* _this = reinterpret_cast< EIStatusMessage* >(object);
  (void)_this;
}
void EIStatusMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EIStatusMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EIStatusMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.a1t.a1.EIStatusMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ei_job_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EIStatusMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ei_job_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ei_job_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.a1t.a1.EIStatusMessage.ei_job_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.a1t.a1.StatusMessage message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EIStatusMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.a1t.a1.EIStatusMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ei_job_id = 1;
  if (!this->_internal_ei_job_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ei_job_id().data(), static_cast<int>(this->_internal_ei_job_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.a1t.a1.EIStatusMessage.ei_job_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ei_job_id(), target);
  }

  // .onos.a1t.a1.StatusMessage message = 2;
  if (this->_internal_has_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::message(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.a1t.a1.EIStatusMessage)
  return target;
}

size_t EIStatusMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.a1t.a1.EIStatusMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ei_job_id = 1;
  if (!this->_internal_ei_job_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ei_job_id());
  }

  // .onos.a1t.a1.StatusMessage message = 2;
  if (this->_internal_has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EIStatusMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EIStatusMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EIStatusMessage::GetClassData() const { return &_class_data_; }

void EIStatusMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EIStatusMessage *>(to)->MergeFrom(
      static_cast<const EIStatusMessage &>(from));
}


void EIStatusMessage::MergeFrom(const EIStatusMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.a1t.a1.EIStatusMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ei_job_id().empty()) {
    _internal_set_ei_job_id(from._internal_ei_job_id());
  }
  if (from._internal_has_message()) {
    _internal_mutable_message()->::onos::a1t::a1::StatusMessage::MergeFrom(from._internal_message());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EIStatusMessage::CopyFrom(const EIStatusMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.a1t.a1.EIStatusMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EIStatusMessage::IsInitialized() const {
  return true;
}

void EIStatusMessage::InternalSwap(EIStatusMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ei_job_id_, lhs_arena,
      &other->ei_job_id_, rhs_arena
  );
  swap(message_, other->message_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EIStatusMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fa1t_2fa1_2fei_2eproto_getter, &descriptor_table_onos_2fa1t_2fa1_2fei_2eproto_once,
      file_level_metadata_onos_2fa1t_2fa1_2fei_2eproto[2]);
}

// ===================================================================

class EIAckMessage::_Internal {
 public:
  static const ::onos::a1t::a1::AckMessage& message(const EIAckMessage* msg);
};

const ::onos::a1t::a1::AckMessage&
EIAckMessage::_Internal::message(const EIAckMessage* msg) {
  return *msg->message_;
}
void EIAckMessage::clear_message() {
  if (GetArenaForAllocation() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
}
EIAckMessage::EIAckMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.a1t.a1.EIAckMessage)
}
EIAckMessage::EIAckMessage(const EIAckMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ei_job_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ei_job_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ei_job_id().empty()) {
    ei_job_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ei_job_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_message()) {
    message_ = new ::onos::a1t::a1::AckMessage(*from.message_);
  } else {
    message_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:onos.a1t.a1.EIAckMessage)
}

inline void EIAckMessage::SharedCtor() {
ei_job_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ei_job_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
message_ = nullptr;
}

EIAckMessage::~EIAckMessage() {
  // @@protoc_insertion_point(destructor:onos.a1t.a1.EIAckMessage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EIAckMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ei_job_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete message_;
}

void EIAckMessage::ArenaDtor(void* object) {
  EIAckMessage* _this = reinterpret_cast< EIAckMessage* >(object);
  (void)_this;
}
void EIAckMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EIAckMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EIAckMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.a1t.a1.EIAckMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ei_job_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EIAckMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ei_job_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ei_job_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.a1t.a1.EIAckMessage.ei_job_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.a1t.a1.AckMessage message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EIAckMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.a1t.a1.EIAckMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ei_job_id = 1;
  if (!this->_internal_ei_job_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ei_job_id().data(), static_cast<int>(this->_internal_ei_job_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.a1t.a1.EIAckMessage.ei_job_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ei_job_id(), target);
  }

  // .onos.a1t.a1.AckMessage message = 2;
  if (this->_internal_has_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::message(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.a1t.a1.EIAckMessage)
  return target;
}

size_t EIAckMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.a1t.a1.EIAckMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ei_job_id = 1;
  if (!this->_internal_ei_job_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ei_job_id());
  }

  // .onos.a1t.a1.AckMessage message = 2;
  if (this->_internal_has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EIAckMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EIAckMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EIAckMessage::GetClassData() const { return &_class_data_; }

void EIAckMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EIAckMessage *>(to)->MergeFrom(
      static_cast<const EIAckMessage &>(from));
}


void EIAckMessage::MergeFrom(const EIAckMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.a1t.a1.EIAckMessage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ei_job_id().empty()) {
    _internal_set_ei_job_id(from._internal_ei_job_id());
  }
  if (from._internal_has_message()) {
    _internal_mutable_message()->::onos::a1t::a1::AckMessage::MergeFrom(from._internal_message());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EIAckMessage::CopyFrom(const EIAckMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.a1t.a1.EIAckMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EIAckMessage::IsInitialized() const {
  return true;
}

void EIAckMessage::InternalSwap(EIAckMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ei_job_id_, lhs_arena,
      &other->ei_job_id_, rhs_arena
  );
  swap(message_, other->message_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EIAckMessage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fa1t_2fa1_2fei_2eproto_getter, &descriptor_table_onos_2fa1t_2fa1_2fei_2eproto_once,
      file_level_metadata_onos_2fa1t_2fa1_2fei_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace a1
}  // namespace a1t
}  // namespace onos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::onos::a1t::a1::EIRequestMessage* Arena::CreateMaybeMessage< ::onos::a1t::a1::EIRequestMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::a1t::a1::EIRequestMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::a1t::a1::EIResultMessage* Arena::CreateMaybeMessage< ::onos::a1t::a1::EIResultMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::a1t::a1::EIResultMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::a1t::a1::EIStatusMessage* Arena::CreateMaybeMessage< ::onos::a1t::a1::EIStatusMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::a1t::a1::EIStatusMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::a1t::a1::EIAckMessage* Arena::CreateMaybeMessage< ::onos::a1t::a1::EIAckMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::a1t::a1::EIAckMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
