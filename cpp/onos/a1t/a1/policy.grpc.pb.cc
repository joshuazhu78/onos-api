// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: onos/a1t/a1/policy.proto

#include "onos/a1t/a1/policy.pb.h"
#include "onos/a1t/a1/policy.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace onos {
namespace a1t {
namespace a1 {

static const char* PolicyService_method_names[] = {
  "/onos.a1t.a1.PolicyService/PolicySetup",
  "/onos.a1t.a1.PolicyService/PolicyUpdate",
  "/onos.a1t.a1.PolicyService/PolicyDelete",
  "/onos.a1t.a1.PolicyService/PolicyQuery",
  "/onos.a1t.a1.PolicyService/PolicyStatus",
};

std::unique_ptr< PolicyService::Stub> PolicyService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< PolicyService::Stub> stub(new PolicyService::Stub(channel, options));
  return stub;
}

PolicyService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_PolicySetup_(PolicyService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PolicyUpdate_(PolicyService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PolicyDelete_(PolicyService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PolicyQuery_(PolicyService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_PolicyStatus_(PolicyService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status PolicyService::Stub::PolicySetup(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage& request, ::onos::a1t::a1::PolicyResultMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::a1t::a1::PolicyRequestMessage, ::onos::a1t::a1::PolicyResultMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PolicySetup_, context, request, response);
}

void PolicyService::Stub::async::PolicySetup(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage* request, ::onos::a1t::a1::PolicyResultMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::a1t::a1::PolicyRequestMessage, ::onos::a1t::a1::PolicyResultMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PolicySetup_, context, request, response, std::move(f));
}

void PolicyService::Stub::async::PolicySetup(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage* request, ::onos::a1t::a1::PolicyResultMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PolicySetup_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::a1t::a1::PolicyResultMessage>* PolicyService::Stub::PrepareAsyncPolicySetupRaw(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::a1t::a1::PolicyResultMessage, ::onos::a1t::a1::PolicyRequestMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PolicySetup_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::a1t::a1::PolicyResultMessage>* PolicyService::Stub::AsyncPolicySetupRaw(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPolicySetupRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PolicyService::Stub::PolicyUpdate(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage& request, ::onos::a1t::a1::PolicyResultMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::a1t::a1::PolicyRequestMessage, ::onos::a1t::a1::PolicyResultMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PolicyUpdate_, context, request, response);
}

void PolicyService::Stub::async::PolicyUpdate(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage* request, ::onos::a1t::a1::PolicyResultMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::a1t::a1::PolicyRequestMessage, ::onos::a1t::a1::PolicyResultMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PolicyUpdate_, context, request, response, std::move(f));
}

void PolicyService::Stub::async::PolicyUpdate(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage* request, ::onos::a1t::a1::PolicyResultMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PolicyUpdate_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::a1t::a1::PolicyResultMessage>* PolicyService::Stub::PrepareAsyncPolicyUpdateRaw(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::a1t::a1::PolicyResultMessage, ::onos::a1t::a1::PolicyRequestMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PolicyUpdate_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::a1t::a1::PolicyResultMessage>* PolicyService::Stub::AsyncPolicyUpdateRaw(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPolicyUpdateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PolicyService::Stub::PolicyDelete(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage& request, ::onos::a1t::a1::PolicyResultMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::a1t::a1::PolicyRequestMessage, ::onos::a1t::a1::PolicyResultMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PolicyDelete_, context, request, response);
}

void PolicyService::Stub::async::PolicyDelete(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage* request, ::onos::a1t::a1::PolicyResultMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::a1t::a1::PolicyRequestMessage, ::onos::a1t::a1::PolicyResultMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PolicyDelete_, context, request, response, std::move(f));
}

void PolicyService::Stub::async::PolicyDelete(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage* request, ::onos::a1t::a1::PolicyResultMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PolicyDelete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::a1t::a1::PolicyResultMessage>* PolicyService::Stub::PrepareAsyncPolicyDeleteRaw(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::a1t::a1::PolicyResultMessage, ::onos::a1t::a1::PolicyRequestMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PolicyDelete_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::a1t::a1::PolicyResultMessage>* PolicyService::Stub::AsyncPolicyDeleteRaw(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPolicyDeleteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status PolicyService::Stub::PolicyQuery(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage& request, ::onos::a1t::a1::PolicyResultMessage* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::a1t::a1::PolicyRequestMessage, ::onos::a1t::a1::PolicyResultMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_PolicyQuery_, context, request, response);
}

void PolicyService::Stub::async::PolicyQuery(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage* request, ::onos::a1t::a1::PolicyResultMessage* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::a1t::a1::PolicyRequestMessage, ::onos::a1t::a1::PolicyResultMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PolicyQuery_, context, request, response, std::move(f));
}

void PolicyService::Stub::async::PolicyQuery(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage* request, ::onos::a1t::a1::PolicyResultMessage* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_PolicyQuery_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::a1t::a1::PolicyResultMessage>* PolicyService::Stub::PrepareAsyncPolicyQueryRaw(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::a1t::a1::PolicyResultMessage, ::onos::a1t::a1::PolicyRequestMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_PolicyQuery_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::a1t::a1::PolicyResultMessage>* PolicyService::Stub::AsyncPolicyQueryRaw(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncPolicyQueryRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReaderWriter< ::onos::a1t::a1::PolicyAckMessage, ::onos::a1t::a1::PolicyStatusMessage>* PolicyService::Stub::PolicyStatusRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::onos::a1t::a1::PolicyAckMessage, ::onos::a1t::a1::PolicyStatusMessage>::Create(channel_.get(), rpcmethod_PolicyStatus_, context);
}

void PolicyService::Stub::async::PolicyStatus(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::onos::a1t::a1::PolicyAckMessage,::onos::a1t::a1::PolicyStatusMessage>* reactor) {
  ::grpc::internal::ClientCallbackReaderWriterFactory< ::onos::a1t::a1::PolicyAckMessage,::onos::a1t::a1::PolicyStatusMessage>::Create(stub_->channel_.get(), stub_->rpcmethod_PolicyStatus_, context, reactor);
}

::grpc::ClientAsyncReaderWriter< ::onos::a1t::a1::PolicyAckMessage, ::onos::a1t::a1::PolicyStatusMessage>* PolicyService::Stub::AsyncPolicyStatusRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::onos::a1t::a1::PolicyAckMessage, ::onos::a1t::a1::PolicyStatusMessage>::Create(channel_.get(), cq, rpcmethod_PolicyStatus_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::onos::a1t::a1::PolicyAckMessage, ::onos::a1t::a1::PolicyStatusMessage>* PolicyService::Stub::PrepareAsyncPolicyStatusRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::onos::a1t::a1::PolicyAckMessage, ::onos::a1t::a1::PolicyStatusMessage>::Create(channel_.get(), cq, rpcmethod_PolicyStatus_, context, false, nullptr);
}

PolicyService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PolicyService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PolicyService::Service, ::onos::a1t::a1::PolicyRequestMessage, ::onos::a1t::a1::PolicyResultMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PolicyService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::a1t::a1::PolicyRequestMessage* req,
             ::onos::a1t::a1::PolicyResultMessage* resp) {
               return service->PolicySetup(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PolicyService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PolicyService::Service, ::onos::a1t::a1::PolicyRequestMessage, ::onos::a1t::a1::PolicyResultMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PolicyService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::a1t::a1::PolicyRequestMessage* req,
             ::onos::a1t::a1::PolicyResultMessage* resp) {
               return service->PolicyUpdate(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PolicyService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PolicyService::Service, ::onos::a1t::a1::PolicyRequestMessage, ::onos::a1t::a1::PolicyResultMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PolicyService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::a1t::a1::PolicyRequestMessage* req,
             ::onos::a1t::a1::PolicyResultMessage* resp) {
               return service->PolicyDelete(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PolicyService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< PolicyService::Service, ::onos::a1t::a1::PolicyRequestMessage, ::onos::a1t::a1::PolicyResultMessage, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](PolicyService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::a1t::a1::PolicyRequestMessage* req,
             ::onos::a1t::a1::PolicyResultMessage* resp) {
               return service->PolicyQuery(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      PolicyService_method_names[4],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< PolicyService::Service, ::onos::a1t::a1::PolicyAckMessage, ::onos::a1t::a1::PolicyStatusMessage>(
          [](PolicyService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReaderWriter<::onos::a1t::a1::PolicyStatusMessage,
             ::onos::a1t::a1::PolicyAckMessage>* stream) {
               return service->PolicyStatus(ctx, stream);
             }, this)));
}

PolicyService::Service::~Service() {
}

::grpc::Status PolicyService::Service::PolicySetup(::grpc::ServerContext* context, const ::onos::a1t::a1::PolicyRequestMessage* request, ::onos::a1t::a1::PolicyResultMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PolicyService::Service::PolicyUpdate(::grpc::ServerContext* context, const ::onos::a1t::a1::PolicyRequestMessage* request, ::onos::a1t::a1::PolicyResultMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PolicyService::Service::PolicyDelete(::grpc::ServerContext* context, const ::onos::a1t::a1::PolicyRequestMessage* request, ::onos::a1t::a1::PolicyResultMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PolicyService::Service::PolicyQuery(::grpc::ServerContext* context, const ::onos::a1t::a1::PolicyRequestMessage* request, ::onos::a1t::a1::PolicyResultMessage* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status PolicyService::Service::PolicyStatus(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::onos::a1t::a1::PolicyStatusMessage, ::onos::a1t::a1::PolicyAckMessage>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace onos
}  // namespace a1t
}  // namespace a1

