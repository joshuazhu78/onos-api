// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: onos/a1t/a1/policy.proto
// Original file comments:
// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0
//
#ifndef GRPC_onos_2fa1t_2fa1_2fpolicy_2eproto__INCLUDED
#define GRPC_onos_2fa1t_2fa1_2fpolicy_2eproto__INCLUDED

#include "onos/a1t/a1/policy.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace onos {
namespace a1t {
namespace a1 {

class PolicyService final {
 public:
  static constexpr char const* service_full_name() {
    return "onos.a1t.a1.PolicyService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status PolicySetup(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage& request, ::onos::a1t::a1::PolicyResultMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::a1t::a1::PolicyResultMessage>> AsyncPolicySetup(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::a1t::a1::PolicyResultMessage>>(AsyncPolicySetupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::a1t::a1::PolicyResultMessage>> PrepareAsyncPolicySetup(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::a1t::a1::PolicyResultMessage>>(PrepareAsyncPolicySetupRaw(context, request, cq));
    }
    virtual ::grpc::Status PolicyUpdate(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage& request, ::onos::a1t::a1::PolicyResultMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::a1t::a1::PolicyResultMessage>> AsyncPolicyUpdate(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::a1t::a1::PolicyResultMessage>>(AsyncPolicyUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::a1t::a1::PolicyResultMessage>> PrepareAsyncPolicyUpdate(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::a1t::a1::PolicyResultMessage>>(PrepareAsyncPolicyUpdateRaw(context, request, cq));
    }
    virtual ::grpc::Status PolicyDelete(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage& request, ::onos::a1t::a1::PolicyResultMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::a1t::a1::PolicyResultMessage>> AsyncPolicyDelete(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::a1t::a1::PolicyResultMessage>>(AsyncPolicyDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::a1t::a1::PolicyResultMessage>> PrepareAsyncPolicyDelete(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::a1t::a1::PolicyResultMessage>>(PrepareAsyncPolicyDeleteRaw(context, request, cq));
    }
    virtual ::grpc::Status PolicyQuery(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage& request, ::onos::a1t::a1::PolicyResultMessage* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::a1t::a1::PolicyResultMessage>> AsyncPolicyQuery(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::a1t::a1::PolicyResultMessage>>(AsyncPolicyQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::a1t::a1::PolicyResultMessage>> PrepareAsyncPolicyQuery(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::a1t::a1::PolicyResultMessage>>(PrepareAsyncPolicyQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::onos::a1t::a1::PolicyAckMessage, ::onos::a1t::a1::PolicyStatusMessage>> PolicyStatus(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::onos::a1t::a1::PolicyAckMessage, ::onos::a1t::a1::PolicyStatusMessage>>(PolicyStatusRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::onos::a1t::a1::PolicyAckMessage, ::onos::a1t::a1::PolicyStatusMessage>> AsyncPolicyStatus(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::onos::a1t::a1::PolicyAckMessage, ::onos::a1t::a1::PolicyStatusMessage>>(AsyncPolicyStatusRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::onos::a1t::a1::PolicyAckMessage, ::onos::a1t::a1::PolicyStatusMessage>> PrepareAsyncPolicyStatus(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::onos::a1t::a1::PolicyAckMessage, ::onos::a1t::a1::PolicyStatusMessage>>(PrepareAsyncPolicyStatusRaw(context, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void PolicySetup(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage* request, ::onos::a1t::a1::PolicyResultMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PolicySetup(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage* request, ::onos::a1t::a1::PolicyResultMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void PolicyUpdate(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage* request, ::onos::a1t::a1::PolicyResultMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PolicyUpdate(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage* request, ::onos::a1t::a1::PolicyResultMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void PolicyDelete(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage* request, ::onos::a1t::a1::PolicyResultMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PolicyDelete(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage* request, ::onos::a1t::a1::PolicyResultMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void PolicyQuery(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage* request, ::onos::a1t::a1::PolicyResultMessage* response, std::function<void(::grpc::Status)>) = 0;
      virtual void PolicyQuery(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage* request, ::onos::a1t::a1::PolicyResultMessage* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void PolicyStatus(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::onos::a1t::a1::PolicyAckMessage,::onos::a1t::a1::PolicyStatusMessage>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::onos::a1t::a1::PolicyResultMessage>* AsyncPolicySetupRaw(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::onos::a1t::a1::PolicyResultMessage>* PrepareAsyncPolicySetupRaw(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::onos::a1t::a1::PolicyResultMessage>* AsyncPolicyUpdateRaw(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::onos::a1t::a1::PolicyResultMessage>* PrepareAsyncPolicyUpdateRaw(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::onos::a1t::a1::PolicyResultMessage>* AsyncPolicyDeleteRaw(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::onos::a1t::a1::PolicyResultMessage>* PrepareAsyncPolicyDeleteRaw(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::onos::a1t::a1::PolicyResultMessage>* AsyncPolicyQueryRaw(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::onos::a1t::a1::PolicyResultMessage>* PrepareAsyncPolicyQueryRaw(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderWriterInterface< ::onos::a1t::a1::PolicyAckMessage, ::onos::a1t::a1::PolicyStatusMessage>* PolicyStatusRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::onos::a1t::a1::PolicyAckMessage, ::onos::a1t::a1::PolicyStatusMessage>* AsyncPolicyStatusRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::onos::a1t::a1::PolicyAckMessage, ::onos::a1t::a1::PolicyStatusMessage>* PrepareAsyncPolicyStatusRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status PolicySetup(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage& request, ::onos::a1t::a1::PolicyResultMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::a1t::a1::PolicyResultMessage>> AsyncPolicySetup(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::a1t::a1::PolicyResultMessage>>(AsyncPolicySetupRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::a1t::a1::PolicyResultMessage>> PrepareAsyncPolicySetup(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::a1t::a1::PolicyResultMessage>>(PrepareAsyncPolicySetupRaw(context, request, cq));
    }
    ::grpc::Status PolicyUpdate(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage& request, ::onos::a1t::a1::PolicyResultMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::a1t::a1::PolicyResultMessage>> AsyncPolicyUpdate(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::a1t::a1::PolicyResultMessage>>(AsyncPolicyUpdateRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::a1t::a1::PolicyResultMessage>> PrepareAsyncPolicyUpdate(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::a1t::a1::PolicyResultMessage>>(PrepareAsyncPolicyUpdateRaw(context, request, cq));
    }
    ::grpc::Status PolicyDelete(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage& request, ::onos::a1t::a1::PolicyResultMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::a1t::a1::PolicyResultMessage>> AsyncPolicyDelete(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::a1t::a1::PolicyResultMessage>>(AsyncPolicyDeleteRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::a1t::a1::PolicyResultMessage>> PrepareAsyncPolicyDelete(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::a1t::a1::PolicyResultMessage>>(PrepareAsyncPolicyDeleteRaw(context, request, cq));
    }
    ::grpc::Status PolicyQuery(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage& request, ::onos::a1t::a1::PolicyResultMessage* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::a1t::a1::PolicyResultMessage>> AsyncPolicyQuery(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::a1t::a1::PolicyResultMessage>>(AsyncPolicyQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::a1t::a1::PolicyResultMessage>> PrepareAsyncPolicyQuery(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::a1t::a1::PolicyResultMessage>>(PrepareAsyncPolicyQueryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderWriter< ::onos::a1t::a1::PolicyAckMessage, ::onos::a1t::a1::PolicyStatusMessage>> PolicyStatus(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::onos::a1t::a1::PolicyAckMessage, ::onos::a1t::a1::PolicyStatusMessage>>(PolicyStatusRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::onos::a1t::a1::PolicyAckMessage, ::onos::a1t::a1::PolicyStatusMessage>> AsyncPolicyStatus(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::onos::a1t::a1::PolicyAckMessage, ::onos::a1t::a1::PolicyStatusMessage>>(AsyncPolicyStatusRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::onos::a1t::a1::PolicyAckMessage, ::onos::a1t::a1::PolicyStatusMessage>> PrepareAsyncPolicyStatus(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::onos::a1t::a1::PolicyAckMessage, ::onos::a1t::a1::PolicyStatusMessage>>(PrepareAsyncPolicyStatusRaw(context, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void PolicySetup(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage* request, ::onos::a1t::a1::PolicyResultMessage* response, std::function<void(::grpc::Status)>) override;
      void PolicySetup(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage* request, ::onos::a1t::a1::PolicyResultMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PolicyUpdate(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage* request, ::onos::a1t::a1::PolicyResultMessage* response, std::function<void(::grpc::Status)>) override;
      void PolicyUpdate(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage* request, ::onos::a1t::a1::PolicyResultMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PolicyDelete(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage* request, ::onos::a1t::a1::PolicyResultMessage* response, std::function<void(::grpc::Status)>) override;
      void PolicyDelete(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage* request, ::onos::a1t::a1::PolicyResultMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PolicyQuery(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage* request, ::onos::a1t::a1::PolicyResultMessage* response, std::function<void(::grpc::Status)>) override;
      void PolicyQuery(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage* request, ::onos::a1t::a1::PolicyResultMessage* response, ::grpc::ClientUnaryReactor* reactor) override;
      void PolicyStatus(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::onos::a1t::a1::PolicyAckMessage,::onos::a1t::a1::PolicyStatusMessage>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::onos::a1t::a1::PolicyResultMessage>* AsyncPolicySetupRaw(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::onos::a1t::a1::PolicyResultMessage>* PrepareAsyncPolicySetupRaw(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::onos::a1t::a1::PolicyResultMessage>* AsyncPolicyUpdateRaw(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::onos::a1t::a1::PolicyResultMessage>* PrepareAsyncPolicyUpdateRaw(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::onos::a1t::a1::PolicyResultMessage>* AsyncPolicyDeleteRaw(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::onos::a1t::a1::PolicyResultMessage>* PrepareAsyncPolicyDeleteRaw(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::onos::a1t::a1::PolicyResultMessage>* AsyncPolicyQueryRaw(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::onos::a1t::a1::PolicyResultMessage>* PrepareAsyncPolicyQueryRaw(::grpc::ClientContext* context, const ::onos::a1t::a1::PolicyRequestMessage& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReaderWriter< ::onos::a1t::a1::PolicyAckMessage, ::onos::a1t::a1::PolicyStatusMessage>* PolicyStatusRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::onos::a1t::a1::PolicyAckMessage, ::onos::a1t::a1::PolicyStatusMessage>* AsyncPolicyStatusRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::onos::a1t::a1::PolicyAckMessage, ::onos::a1t::a1::PolicyStatusMessage>* PrepareAsyncPolicyStatusRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_PolicySetup_;
    const ::grpc::internal::RpcMethod rpcmethod_PolicyUpdate_;
    const ::grpc::internal::RpcMethod rpcmethod_PolicyDelete_;
    const ::grpc::internal::RpcMethod rpcmethod_PolicyQuery_;
    const ::grpc::internal::RpcMethod rpcmethod_PolicyStatus_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status PolicySetup(::grpc::ServerContext* context, const ::onos::a1t::a1::PolicyRequestMessage* request, ::onos::a1t::a1::PolicyResultMessage* response);
    virtual ::grpc::Status PolicyUpdate(::grpc::ServerContext* context, const ::onos::a1t::a1::PolicyRequestMessage* request, ::onos::a1t::a1::PolicyResultMessage* response);
    virtual ::grpc::Status PolicyDelete(::grpc::ServerContext* context, const ::onos::a1t::a1::PolicyRequestMessage* request, ::onos::a1t::a1::PolicyResultMessage* response);
    virtual ::grpc::Status PolicyQuery(::grpc::ServerContext* context, const ::onos::a1t::a1::PolicyRequestMessage* request, ::onos::a1t::a1::PolicyResultMessage* response);
    virtual ::grpc::Status PolicyStatus(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::onos::a1t::a1::PolicyStatusMessage, ::onos::a1t::a1::PolicyAckMessage>* stream);
  };
  template <class BaseClass>
  class WithAsyncMethod_PolicySetup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PolicySetup() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_PolicySetup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PolicySetup(::grpc::ServerContext* /*context*/, const ::onos::a1t::a1::PolicyRequestMessage* /*request*/, ::onos::a1t::a1::PolicyResultMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPolicySetup(::grpc::ServerContext* context, ::onos::a1t::a1::PolicyRequestMessage* request, ::grpc::ServerAsyncResponseWriter< ::onos::a1t::a1::PolicyResultMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PolicyUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PolicyUpdate() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_PolicyUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PolicyUpdate(::grpc::ServerContext* /*context*/, const ::onos::a1t::a1::PolicyRequestMessage* /*request*/, ::onos::a1t::a1::PolicyResultMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPolicyUpdate(::grpc::ServerContext* context, ::onos::a1t::a1::PolicyRequestMessage* request, ::grpc::ServerAsyncResponseWriter< ::onos::a1t::a1::PolicyResultMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PolicyDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PolicyDelete() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_PolicyDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PolicyDelete(::grpc::ServerContext* /*context*/, const ::onos::a1t::a1::PolicyRequestMessage* /*request*/, ::onos::a1t::a1::PolicyResultMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPolicyDelete(::grpc::ServerContext* context, ::onos::a1t::a1::PolicyRequestMessage* request, ::grpc::ServerAsyncResponseWriter< ::onos::a1t::a1::PolicyResultMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PolicyQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PolicyQuery() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_PolicyQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PolicyQuery(::grpc::ServerContext* /*context*/, const ::onos::a1t::a1::PolicyRequestMessage* /*request*/, ::onos::a1t::a1::PolicyResultMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPolicyQuery(::grpc::ServerContext* context, ::onos::a1t::a1::PolicyRequestMessage* request, ::grpc::ServerAsyncResponseWriter< ::onos::a1t::a1::PolicyResultMessage>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_PolicyStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_PolicyStatus() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_PolicyStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PolicyStatus(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::onos::a1t::a1::PolicyStatusMessage, ::onos::a1t::a1::PolicyAckMessage>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPolicyStatus(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::onos::a1t::a1::PolicyStatusMessage, ::onos::a1t::a1::PolicyAckMessage>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(4, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_PolicySetup<WithAsyncMethod_PolicyUpdate<WithAsyncMethod_PolicyDelete<WithAsyncMethod_PolicyQuery<WithAsyncMethod_PolicyStatus<Service > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_PolicySetup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PolicySetup() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::onos::a1t::a1::PolicyRequestMessage, ::onos::a1t::a1::PolicyResultMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::onos::a1t::a1::PolicyRequestMessage* request, ::onos::a1t::a1::PolicyResultMessage* response) { return this->PolicySetup(context, request, response); }));}
    void SetMessageAllocatorFor_PolicySetup(
        ::grpc::MessageAllocator< ::onos::a1t::a1::PolicyRequestMessage, ::onos::a1t::a1::PolicyResultMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::onos::a1t::a1::PolicyRequestMessage, ::onos::a1t::a1::PolicyResultMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PolicySetup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PolicySetup(::grpc::ServerContext* /*context*/, const ::onos::a1t::a1::PolicyRequestMessage* /*request*/, ::onos::a1t::a1::PolicyResultMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PolicySetup(
      ::grpc::CallbackServerContext* /*context*/, const ::onos::a1t::a1::PolicyRequestMessage* /*request*/, ::onos::a1t::a1::PolicyResultMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PolicyUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PolicyUpdate() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::onos::a1t::a1::PolicyRequestMessage, ::onos::a1t::a1::PolicyResultMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::onos::a1t::a1::PolicyRequestMessage* request, ::onos::a1t::a1::PolicyResultMessage* response) { return this->PolicyUpdate(context, request, response); }));}
    void SetMessageAllocatorFor_PolicyUpdate(
        ::grpc::MessageAllocator< ::onos::a1t::a1::PolicyRequestMessage, ::onos::a1t::a1::PolicyResultMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::onos::a1t::a1::PolicyRequestMessage, ::onos::a1t::a1::PolicyResultMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PolicyUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PolicyUpdate(::grpc::ServerContext* /*context*/, const ::onos::a1t::a1::PolicyRequestMessage* /*request*/, ::onos::a1t::a1::PolicyResultMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PolicyUpdate(
      ::grpc::CallbackServerContext* /*context*/, const ::onos::a1t::a1::PolicyRequestMessage* /*request*/, ::onos::a1t::a1::PolicyResultMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PolicyDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PolicyDelete() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::onos::a1t::a1::PolicyRequestMessage, ::onos::a1t::a1::PolicyResultMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::onos::a1t::a1::PolicyRequestMessage* request, ::onos::a1t::a1::PolicyResultMessage* response) { return this->PolicyDelete(context, request, response); }));}
    void SetMessageAllocatorFor_PolicyDelete(
        ::grpc::MessageAllocator< ::onos::a1t::a1::PolicyRequestMessage, ::onos::a1t::a1::PolicyResultMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::onos::a1t::a1::PolicyRequestMessage, ::onos::a1t::a1::PolicyResultMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PolicyDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PolicyDelete(::grpc::ServerContext* /*context*/, const ::onos::a1t::a1::PolicyRequestMessage* /*request*/, ::onos::a1t::a1::PolicyResultMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PolicyDelete(
      ::grpc::CallbackServerContext* /*context*/, const ::onos::a1t::a1::PolicyRequestMessage* /*request*/, ::onos::a1t::a1::PolicyResultMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PolicyQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PolicyQuery() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::onos::a1t::a1::PolicyRequestMessage, ::onos::a1t::a1::PolicyResultMessage>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::onos::a1t::a1::PolicyRequestMessage* request, ::onos::a1t::a1::PolicyResultMessage* response) { return this->PolicyQuery(context, request, response); }));}
    void SetMessageAllocatorFor_PolicyQuery(
        ::grpc::MessageAllocator< ::onos::a1t::a1::PolicyRequestMessage, ::onos::a1t::a1::PolicyResultMessage>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::onos::a1t::a1::PolicyRequestMessage, ::onos::a1t::a1::PolicyResultMessage>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_PolicyQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PolicyQuery(::grpc::ServerContext* /*context*/, const ::onos::a1t::a1::PolicyRequestMessage* /*request*/, ::onos::a1t::a1::PolicyResultMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PolicyQuery(
      ::grpc::CallbackServerContext* /*context*/, const ::onos::a1t::a1::PolicyRequestMessage* /*request*/, ::onos::a1t::a1::PolicyResultMessage* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_PolicyStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_PolicyStatus() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackBidiHandler< ::onos::a1t::a1::PolicyAckMessage, ::onos::a1t::a1::PolicyStatusMessage>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->PolicyStatus(context); }));
    }
    ~WithCallbackMethod_PolicyStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PolicyStatus(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::onos::a1t::a1::PolicyStatusMessage, ::onos::a1t::a1::PolicyAckMessage>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::onos::a1t::a1::PolicyAckMessage, ::onos::a1t::a1::PolicyStatusMessage>* PolicyStatus(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  typedef WithCallbackMethod_PolicySetup<WithCallbackMethod_PolicyUpdate<WithCallbackMethod_PolicyDelete<WithCallbackMethod_PolicyQuery<WithCallbackMethod_PolicyStatus<Service > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_PolicySetup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PolicySetup() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_PolicySetup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PolicySetup(::grpc::ServerContext* /*context*/, const ::onos::a1t::a1::PolicyRequestMessage* /*request*/, ::onos::a1t::a1::PolicyResultMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PolicyUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PolicyUpdate() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_PolicyUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PolicyUpdate(::grpc::ServerContext* /*context*/, const ::onos::a1t::a1::PolicyRequestMessage* /*request*/, ::onos::a1t::a1::PolicyResultMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PolicyDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PolicyDelete() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_PolicyDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PolicyDelete(::grpc::ServerContext* /*context*/, const ::onos::a1t::a1::PolicyRequestMessage* /*request*/, ::onos::a1t::a1::PolicyResultMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PolicyQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PolicyQuery() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_PolicyQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PolicyQuery(::grpc::ServerContext* /*context*/, const ::onos::a1t::a1::PolicyRequestMessage* /*request*/, ::onos::a1t::a1::PolicyResultMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_PolicyStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_PolicyStatus() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_PolicyStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PolicyStatus(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::onos::a1t::a1::PolicyStatusMessage, ::onos::a1t::a1::PolicyAckMessage>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_PolicySetup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PolicySetup() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_PolicySetup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PolicySetup(::grpc::ServerContext* /*context*/, const ::onos::a1t::a1::PolicyRequestMessage* /*request*/, ::onos::a1t::a1::PolicyResultMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPolicySetup(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PolicyUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PolicyUpdate() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_PolicyUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PolicyUpdate(::grpc::ServerContext* /*context*/, const ::onos::a1t::a1::PolicyRequestMessage* /*request*/, ::onos::a1t::a1::PolicyResultMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPolicyUpdate(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PolicyDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PolicyDelete() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_PolicyDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PolicyDelete(::grpc::ServerContext* /*context*/, const ::onos::a1t::a1::PolicyRequestMessage* /*request*/, ::onos::a1t::a1::PolicyResultMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPolicyDelete(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PolicyQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PolicyQuery() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_PolicyQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PolicyQuery(::grpc::ServerContext* /*context*/, const ::onos::a1t::a1::PolicyRequestMessage* /*request*/, ::onos::a1t::a1::PolicyResultMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPolicyQuery(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_PolicyStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_PolicyStatus() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_PolicyStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PolicyStatus(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::onos::a1t::a1::PolicyStatusMessage, ::onos::a1t::a1::PolicyAckMessage>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestPolicyStatus(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(4, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PolicySetup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PolicySetup() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PolicySetup(context, request, response); }));
    }
    ~WithRawCallbackMethod_PolicySetup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PolicySetup(::grpc::ServerContext* /*context*/, const ::onos::a1t::a1::PolicyRequestMessage* /*request*/, ::onos::a1t::a1::PolicyResultMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PolicySetup(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PolicyUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PolicyUpdate() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PolicyUpdate(context, request, response); }));
    }
    ~WithRawCallbackMethod_PolicyUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PolicyUpdate(::grpc::ServerContext* /*context*/, const ::onos::a1t::a1::PolicyRequestMessage* /*request*/, ::onos::a1t::a1::PolicyResultMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PolicyUpdate(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PolicyDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PolicyDelete() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PolicyDelete(context, request, response); }));
    }
    ~WithRawCallbackMethod_PolicyDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PolicyDelete(::grpc::ServerContext* /*context*/, const ::onos::a1t::a1::PolicyRequestMessage* /*request*/, ::onos::a1t::a1::PolicyResultMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PolicyDelete(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PolicyQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PolicyQuery() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->PolicyQuery(context, request, response); }));
    }
    ~WithRawCallbackMethod_PolicyQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PolicyQuery(::grpc::ServerContext* /*context*/, const ::onos::a1t::a1::PolicyRequestMessage* /*request*/, ::onos::a1t::a1::PolicyResultMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* PolicyQuery(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_PolicyStatus : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_PolicyStatus() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->PolicyStatus(context); }));
    }
    ~WithRawCallbackMethod_PolicyStatus() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status PolicyStatus(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::onos::a1t::a1::PolicyStatusMessage, ::onos::a1t::a1::PolicyAckMessage>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* PolicyStatus(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PolicySetup : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PolicySetup() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::onos::a1t::a1::PolicyRequestMessage, ::onos::a1t::a1::PolicyResultMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::onos::a1t::a1::PolicyRequestMessage, ::onos::a1t::a1::PolicyResultMessage>* streamer) {
                       return this->StreamedPolicySetup(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PolicySetup() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PolicySetup(::grpc::ServerContext* /*context*/, const ::onos::a1t::a1::PolicyRequestMessage* /*request*/, ::onos::a1t::a1::PolicyResultMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPolicySetup(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::onos::a1t::a1::PolicyRequestMessage,::onos::a1t::a1::PolicyResultMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PolicyUpdate : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PolicyUpdate() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::onos::a1t::a1::PolicyRequestMessage, ::onos::a1t::a1::PolicyResultMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::onos::a1t::a1::PolicyRequestMessage, ::onos::a1t::a1::PolicyResultMessage>* streamer) {
                       return this->StreamedPolicyUpdate(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PolicyUpdate() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PolicyUpdate(::grpc::ServerContext* /*context*/, const ::onos::a1t::a1::PolicyRequestMessage* /*request*/, ::onos::a1t::a1::PolicyResultMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPolicyUpdate(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::onos::a1t::a1::PolicyRequestMessage,::onos::a1t::a1::PolicyResultMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PolicyDelete : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PolicyDelete() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::onos::a1t::a1::PolicyRequestMessage, ::onos::a1t::a1::PolicyResultMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::onos::a1t::a1::PolicyRequestMessage, ::onos::a1t::a1::PolicyResultMessage>* streamer) {
                       return this->StreamedPolicyDelete(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PolicyDelete() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PolicyDelete(::grpc::ServerContext* /*context*/, const ::onos::a1t::a1::PolicyRequestMessage* /*request*/, ::onos::a1t::a1::PolicyResultMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPolicyDelete(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::onos::a1t::a1::PolicyRequestMessage,::onos::a1t::a1::PolicyResultMessage>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_PolicyQuery : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_PolicyQuery() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::onos::a1t::a1::PolicyRequestMessage, ::onos::a1t::a1::PolicyResultMessage>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::onos::a1t::a1::PolicyRequestMessage, ::onos::a1t::a1::PolicyResultMessage>* streamer) {
                       return this->StreamedPolicyQuery(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_PolicyQuery() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status PolicyQuery(::grpc::ServerContext* /*context*/, const ::onos::a1t::a1::PolicyRequestMessage* /*request*/, ::onos::a1t::a1::PolicyResultMessage* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedPolicyQuery(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::onos::a1t::a1::PolicyRequestMessage,::onos::a1t::a1::PolicyResultMessage>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_PolicySetup<WithStreamedUnaryMethod_PolicyUpdate<WithStreamedUnaryMethod_PolicyDelete<WithStreamedUnaryMethod_PolicyQuery<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_PolicySetup<WithStreamedUnaryMethod_PolicyUpdate<WithStreamedUnaryMethod_PolicyDelete<WithStreamedUnaryMethod_PolicyQuery<Service > > > > StreamedService;
};

}  // namespace a1
}  // namespace a1t
}  // namespace onos


#endif  // GRPC_onos_2fa1t_2fa1_2fpolicy_2eproto__INCLUDED
