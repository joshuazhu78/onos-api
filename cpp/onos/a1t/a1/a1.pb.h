// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onos/a1t/a1/a1.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_onos_2fa1t_2fa1_2fa1_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_onos_2fa1t_2fa1_2fa1_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_onos_2fa1t_2fa1_2fa1_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_onos_2fa1t_2fa1_2fa1_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_onos_2fa1t_2fa1_2fa1_2eproto;
namespace onos {
namespace a1t {
namespace a1 {
class AckMessage;
struct AckMessageDefaultTypeInternal;
extern AckMessageDefaultTypeInternal _AckMessage_default_instance_;
class Header;
struct HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class RequestMessage;
struct RequestMessageDefaultTypeInternal;
extern RequestMessageDefaultTypeInternal _RequestMessage_default_instance_;
class Result;
struct ResultDefaultTypeInternal;
extern ResultDefaultTypeInternal _Result_default_instance_;
class ResultMessage;
struct ResultMessageDefaultTypeInternal;
extern ResultMessageDefaultTypeInternal _ResultMessage_default_instance_;
class StatusMessage;
struct StatusMessageDefaultTypeInternal;
extern StatusMessageDefaultTypeInternal _StatusMessage_default_instance_;
}  // namespace a1
}  // namespace a1t
}  // namespace onos
PROTOBUF_NAMESPACE_OPEN
template<> ::onos::a1t::a1::AckMessage* Arena::CreateMaybeMessage<::onos::a1t::a1::AckMessage>(Arena*);
template<> ::onos::a1t::a1::Header* Arena::CreateMaybeMessage<::onos::a1t::a1::Header>(Arena*);
template<> ::onos::a1t::a1::RequestMessage* Arena::CreateMaybeMessage<::onos::a1t::a1::RequestMessage>(Arena*);
template<> ::onos::a1t::a1::Result* Arena::CreateMaybeMessage<::onos::a1t::a1::Result>(Arena*);
template<> ::onos::a1t::a1::ResultMessage* Arena::CreateMaybeMessage<::onos::a1t::a1::ResultMessage>(Arena*);
template<> ::onos::a1t::a1::StatusMessage* Arena::CreateMaybeMessage<::onos::a1t::a1::StatusMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace onos {
namespace a1t {
namespace a1 {

enum Encoding : int {
  PROTO = 0,
  JSON = 1,
  Encoding_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Encoding_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Encoding_IsValid(int value);
constexpr Encoding Encoding_MIN = PROTO;
constexpr Encoding Encoding_MAX = JSON;
constexpr int Encoding_ARRAYSIZE = Encoding_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Encoding_descriptor();
template<typename T>
inline const std::string& Encoding_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Encoding>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Encoding_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Encoding_descriptor(), enum_t_value);
}
inline bool Encoding_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Encoding* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Encoding>(
    Encoding_descriptor(), name, value);
}
enum PayloadType : int {
  POLICY = 0,
  STATUS = 1,
  PayloadType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  PayloadType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool PayloadType_IsValid(int value);
constexpr PayloadType PayloadType_MIN = POLICY;
constexpr PayloadType PayloadType_MAX = STATUS;
constexpr int PayloadType_ARRAYSIZE = PayloadType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PayloadType_descriptor();
template<typename T>
inline const std::string& PayloadType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PayloadType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PayloadType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PayloadType_descriptor(), enum_t_value);
}
inline bool PayloadType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PayloadType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PayloadType>(
    PayloadType_descriptor(), name, value);
}
// ===================================================================

class Header final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.a1t.a1.Header) */ {
 public:
  inline Header() : Header(nullptr) {}
  ~Header() override;
  explicit constexpr Header(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Header(const Header& from);
  Header(Header&& from) noexcept
    : Header() {
    *this = ::std::move(from);
  }

  inline Header& operator=(const Header& from) {
    CopyFrom(from);
    return *this;
  }
  inline Header& operator=(Header&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Header& default_instance() {
    return *internal_default_instance();
  }
  static inline const Header* internal_default_instance() {
    return reinterpret_cast<const Header*>(
               &_Header_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Header& a, Header& b) {
    a.Swap(&b);
  }
  inline void Swap(Header* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Header* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Header* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Header>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Header& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Header& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Header* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.a1t.a1.Header";
  }
  protected:
  explicit Header(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestIdFieldNumber = 1,
    kAppIdFieldNumber = 2,
    kAppInstanceIdFieldNumber = 3,
    kA1NodeIdFieldNumber = 4,
    kEncodingFieldNumber = 5,
    kPayloadTypeFieldNumber = 6,
  };
  // string request_id = 1;
  void clear_request_id();
  const std::string& request_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_request_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_request_id();
  PROTOBUF_NODISCARD std::string* release_request_id();
  void set_allocated_request_id(std::string* request_id);
  private:
  const std::string& _internal_request_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_request_id(const std::string& value);
  std::string* _internal_mutable_request_id();
  public:

  // string app_id = 2;
  void clear_app_id();
  const std::string& app_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_id();
  PROTOBUF_NODISCARD std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);
  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(const std::string& value);
  std::string* _internal_mutable_app_id();
  public:

  // string app_instance_id = 3;
  void clear_app_instance_id();
  const std::string& app_instance_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_instance_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_instance_id();
  PROTOBUF_NODISCARD std::string* release_app_instance_id();
  void set_allocated_app_instance_id(std::string* app_instance_id);
  private:
  const std::string& _internal_app_instance_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_instance_id(const std::string& value);
  std::string* _internal_mutable_app_instance_id();
  public:

  // string a1_node_id = 4;
  void clear_a1_node_id();
  const std::string& a1_node_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_a1_node_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_a1_node_id();
  PROTOBUF_NODISCARD std::string* release_a1_node_id();
  void set_allocated_a1_node_id(std::string* a1_node_id);
  private:
  const std::string& _internal_a1_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_a1_node_id(const std::string& value);
  std::string* _internal_mutable_a1_node_id();
  public:

  // .onos.a1t.a1.Encoding encoding = 5;
  void clear_encoding();
  ::onos::a1t::a1::Encoding encoding() const;
  void set_encoding(::onos::a1t::a1::Encoding value);
  private:
  ::onos::a1t::a1::Encoding _internal_encoding() const;
  void _internal_set_encoding(::onos::a1t::a1::Encoding value);
  public:

  // .onos.a1t.a1.PayloadType payload_type = 6;
  void clear_payload_type();
  ::onos::a1t::a1::PayloadType payload_type() const;
  void set_payload_type(::onos::a1t::a1::PayloadType value);
  private:
  ::onos::a1t::a1::PayloadType _internal_payload_type() const;
  void _internal_set_payload_type(::onos::a1t::a1::PayloadType value);
  public:

  // @@protoc_insertion_point(class_scope:onos.a1t.a1.Header)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr request_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_instance_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr a1_node_id_;
  int encoding_;
  int payload_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fa1t_2fa1_2fa1_2eproto;
};
// -------------------------------------------------------------------

class Result final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.a1t.a1.Result) */ {
 public:
  inline Result() : Result(nullptr) {}
  ~Result() override;
  explicit constexpr Result(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Result(const Result& from);
  Result(Result&& from) noexcept
    : Result() {
    *this = ::std::move(from);
  }

  inline Result& operator=(const Result& from) {
    CopyFrom(from);
    return *this;
  }
  inline Result& operator=(Result&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Result& default_instance() {
    return *internal_default_instance();
  }
  static inline const Result* internal_default_instance() {
    return reinterpret_cast<const Result*>(
               &_Result_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Result& a, Result& b) {
    a.Swap(&b);
  }
  inline void Swap(Result* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Result* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Result* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Result>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Result& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Result& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Result* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.a1t.a1.Result";
  }
  protected:
  explicit Result(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReasonFieldNumber = 2,
    kSuccessFieldNumber = 1,
  };
  // string reason = 2;
  void clear_reason();
  const std::string& reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reason();
  PROTOBUF_NODISCARD std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // bool success = 1;
  void clear_success();
  bool success() const;
  void set_success(bool value);
  private:
  bool _internal_success() const;
  void _internal_set_success(bool value);
  public:

  // @@protoc_insertion_point(class_scope:onos.a1t.a1.Result)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  bool success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fa1t_2fa1_2fa1_2eproto;
};
// -------------------------------------------------------------------

class RequestMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.a1t.a1.RequestMessage) */ {
 public:
  inline RequestMessage() : RequestMessage(nullptr) {}
  ~RequestMessage() override;
  explicit constexpr RequestMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestMessage(const RequestMessage& from);
  RequestMessage(RequestMessage&& from) noexcept
    : RequestMessage() {
    *this = ::std::move(from);
  }

  inline RequestMessage& operator=(const RequestMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestMessage& operator=(RequestMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestMessage* internal_default_instance() {
    return reinterpret_cast<const RequestMessage*>(
               &_RequestMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RequestMessage& a, RequestMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.a1t.a1.RequestMessage";
  }
  protected:
  explicit RequestMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // bytes payload = 2;
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // .onos.a1t.a1.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::onos::a1t::a1::Header& header() const;
  PROTOBUF_NODISCARD ::onos::a1t::a1::Header* release_header();
  ::onos::a1t::a1::Header* mutable_header();
  void set_allocated_header(::onos::a1t::a1::Header* header);
  private:
  const ::onos::a1t::a1::Header& _internal_header() const;
  ::onos::a1t::a1::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::onos::a1t::a1::Header* header);
  ::onos::a1t::a1::Header* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:onos.a1t.a1.RequestMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::onos::a1t::a1::Header* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fa1t_2fa1_2fa1_2eproto;
};
// -------------------------------------------------------------------

class ResultMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.a1t.a1.ResultMessage) */ {
 public:
  inline ResultMessage() : ResultMessage(nullptr) {}
  ~ResultMessage() override;
  explicit constexpr ResultMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResultMessage(const ResultMessage& from);
  ResultMessage(ResultMessage&& from) noexcept
    : ResultMessage() {
    *this = ::std::move(from);
  }

  inline ResultMessage& operator=(const ResultMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResultMessage& operator=(ResultMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResultMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResultMessage* internal_default_instance() {
    return reinterpret_cast<const ResultMessage*>(
               &_ResultMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ResultMessage& a, ResultMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ResultMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResultMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResultMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResultMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResultMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResultMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResultMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.a1t.a1.ResultMessage";
  }
  protected:
  explicit ResultMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kResultFieldNumber = 3,
  };
  // bytes payload = 2;
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // .onos.a1t.a1.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::onos::a1t::a1::Header& header() const;
  PROTOBUF_NODISCARD ::onos::a1t::a1::Header* release_header();
  ::onos::a1t::a1::Header* mutable_header();
  void set_allocated_header(::onos::a1t::a1::Header* header);
  private:
  const ::onos::a1t::a1::Header& _internal_header() const;
  ::onos::a1t::a1::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::onos::a1t::a1::Header* header);
  ::onos::a1t::a1::Header* unsafe_arena_release_header();

  // .onos.a1t.a1.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::onos::a1t::a1::Result& result() const;
  PROTOBUF_NODISCARD ::onos::a1t::a1::Result* release_result();
  ::onos::a1t::a1::Result* mutable_result();
  void set_allocated_result(::onos::a1t::a1::Result* result);
  private:
  const ::onos::a1t::a1::Result& _internal_result() const;
  ::onos::a1t::a1::Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::onos::a1t::a1::Result* result);
  ::onos::a1t::a1::Result* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:onos.a1t.a1.ResultMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::onos::a1t::a1::Header* header_;
  ::onos::a1t::a1::Result* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fa1t_2fa1_2fa1_2eproto;
};
// -------------------------------------------------------------------

class StatusMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.a1t.a1.StatusMessage) */ {
 public:
  inline StatusMessage() : StatusMessage(nullptr) {}
  ~StatusMessage() override;
  explicit constexpr StatusMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StatusMessage(const StatusMessage& from);
  StatusMessage(StatusMessage&& from) noexcept
    : StatusMessage() {
    *this = ::std::move(from);
  }

  inline StatusMessage& operator=(const StatusMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline StatusMessage& operator=(StatusMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StatusMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const StatusMessage* internal_default_instance() {
    return reinterpret_cast<const StatusMessage*>(
               &_StatusMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(StatusMessage& a, StatusMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(StatusMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StatusMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StatusMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StatusMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StatusMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const StatusMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.a1t.a1.StatusMessage";
  }
  protected:
  explicit StatusMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 2,
    kHeaderFieldNumber = 1,
  };
  // bytes payload = 2;
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // .onos.a1t.a1.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::onos::a1t::a1::Header& header() const;
  PROTOBUF_NODISCARD ::onos::a1t::a1::Header* release_header();
  ::onos::a1t::a1::Header* mutable_header();
  void set_allocated_header(::onos::a1t::a1::Header* header);
  private:
  const ::onos::a1t::a1::Header& _internal_header() const;
  ::onos::a1t::a1::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::onos::a1t::a1::Header* header);
  ::onos::a1t::a1::Header* unsafe_arena_release_header();

  // @@protoc_insertion_point(class_scope:onos.a1t.a1.StatusMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::onos::a1t::a1::Header* header_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fa1t_2fa1_2fa1_2eproto;
};
// -------------------------------------------------------------------

class AckMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.a1t.a1.AckMessage) */ {
 public:
  inline AckMessage() : AckMessage(nullptr) {}
  ~AckMessage() override;
  explicit constexpr AckMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckMessage(const AckMessage& from);
  AckMessage(AckMessage&& from) noexcept
    : AckMessage() {
    *this = ::std::move(from);
  }

  inline AckMessage& operator=(const AckMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckMessage& operator=(AckMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckMessage* internal_default_instance() {
    return reinterpret_cast<const AckMessage*>(
               &_AckMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AckMessage& a, AckMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(AckMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AckMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AckMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AckMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AckMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.a1t.a1.AckMessage";
  }
  protected:
  explicit AckMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 2,
    kHeaderFieldNumber = 1,
    kResultFieldNumber = 3,
  };
  // bytes payload = 2;
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // .onos.a1t.a1.Header header = 1;
  bool has_header() const;
  private:
  bool _internal_has_header() const;
  public:
  void clear_header();
  const ::onos::a1t::a1::Header& header() const;
  PROTOBUF_NODISCARD ::onos::a1t::a1::Header* release_header();
  ::onos::a1t::a1::Header* mutable_header();
  void set_allocated_header(::onos::a1t::a1::Header* header);
  private:
  const ::onos::a1t::a1::Header& _internal_header() const;
  ::onos::a1t::a1::Header* _internal_mutable_header();
  public:
  void unsafe_arena_set_allocated_header(
      ::onos::a1t::a1::Header* header);
  ::onos::a1t::a1::Header* unsafe_arena_release_header();

  // .onos.a1t.a1.Result result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::onos::a1t::a1::Result& result() const;
  PROTOBUF_NODISCARD ::onos::a1t::a1::Result* release_result();
  ::onos::a1t::a1::Result* mutable_result();
  void set_allocated_result(::onos::a1t::a1::Result* result);
  private:
  const ::onos::a1t::a1::Result& _internal_result() const;
  ::onos::a1t::a1::Result* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::onos::a1t::a1::Result* result);
  ::onos::a1t::a1::Result* unsafe_arena_release_result();

  // @@protoc_insertion_point(class_scope:onos.a1t.a1.AckMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::onos::a1t::a1::Header* header_;
  ::onos::a1t::a1::Result* result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fa1t_2fa1_2fa1_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Header

// string request_id = 1;
inline void Header::clear_request_id() {
  request_id_.ClearToEmpty();
}
inline const std::string& Header::request_id() const {
  // @@protoc_insertion_point(field_get:onos.a1t.a1.Header.request_id)
  return _internal_request_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Header::set_request_id(ArgT0&& arg0, ArgT... args) {
 
 request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.a1t.a1.Header.request_id)
}
inline std::string* Header::mutable_request_id() {
  std::string* _s = _internal_mutable_request_id();
  // @@protoc_insertion_point(field_mutable:onos.a1t.a1.Header.request_id)
  return _s;
}
inline const std::string& Header::_internal_request_id() const {
  return request_id_.Get();
}
inline void Header::_internal_set_request_id(const std::string& value) {
  
  request_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_request_id() {
  
  return request_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Header::release_request_id() {
  // @@protoc_insertion_point(field_release:onos.a1t.a1.Header.request_id)
  return request_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Header::set_allocated_request_id(std::string* request_id) {
  if (request_id != nullptr) {
    
  } else {
    
  }
  request_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), request_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (request_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    request_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.a1.Header.request_id)
}

// string app_id = 2;
inline void Header::clear_app_id() {
  app_id_.ClearToEmpty();
}
inline const std::string& Header::app_id() const {
  // @@protoc_insertion_point(field_get:onos.a1t.a1.Header.app_id)
  return _internal_app_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Header::set_app_id(ArgT0&& arg0, ArgT... args) {
 
 app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.a1t.a1.Header.app_id)
}
inline std::string* Header::mutable_app_id() {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:onos.a1t.a1.Header.app_id)
  return _s;
}
inline const std::string& Header::_internal_app_id() const {
  return app_id_.Get();
}
inline void Header::_internal_set_app_id(const std::string& value) {
  
  app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_app_id() {
  
  return app_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Header::release_app_id() {
  // @@protoc_insertion_point(field_release:onos.a1t.a1.Header.app_id)
  return app_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Header::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    
  } else {
    
  }
  app_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (app_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.a1.Header.app_id)
}

// string app_instance_id = 3;
inline void Header::clear_app_instance_id() {
  app_instance_id_.ClearToEmpty();
}
inline const std::string& Header::app_instance_id() const {
  // @@protoc_insertion_point(field_get:onos.a1t.a1.Header.app_instance_id)
  return _internal_app_instance_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Header::set_app_instance_id(ArgT0&& arg0, ArgT... args) {
 
 app_instance_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.a1t.a1.Header.app_instance_id)
}
inline std::string* Header::mutable_app_instance_id() {
  std::string* _s = _internal_mutable_app_instance_id();
  // @@protoc_insertion_point(field_mutable:onos.a1t.a1.Header.app_instance_id)
  return _s;
}
inline const std::string& Header::_internal_app_instance_id() const {
  return app_instance_id_.Get();
}
inline void Header::_internal_set_app_instance_id(const std::string& value) {
  
  app_instance_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_app_instance_id() {
  
  return app_instance_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Header::release_app_instance_id() {
  // @@protoc_insertion_point(field_release:onos.a1t.a1.Header.app_instance_id)
  return app_instance_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Header::set_allocated_app_instance_id(std::string* app_instance_id) {
  if (app_instance_id != nullptr) {
    
  } else {
    
  }
  app_instance_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_instance_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (app_instance_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    app_instance_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.a1.Header.app_instance_id)
}

// string a1_node_id = 4;
inline void Header::clear_a1_node_id() {
  a1_node_id_.ClearToEmpty();
}
inline const std::string& Header::a1_node_id() const {
  // @@protoc_insertion_point(field_get:onos.a1t.a1.Header.a1_node_id)
  return _internal_a1_node_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Header::set_a1_node_id(ArgT0&& arg0, ArgT... args) {
 
 a1_node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.a1t.a1.Header.a1_node_id)
}
inline std::string* Header::mutable_a1_node_id() {
  std::string* _s = _internal_mutable_a1_node_id();
  // @@protoc_insertion_point(field_mutable:onos.a1t.a1.Header.a1_node_id)
  return _s;
}
inline const std::string& Header::_internal_a1_node_id() const {
  return a1_node_id_.Get();
}
inline void Header::_internal_set_a1_node_id(const std::string& value) {
  
  a1_node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Header::_internal_mutable_a1_node_id() {
  
  return a1_node_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Header::release_a1_node_id() {
  // @@protoc_insertion_point(field_release:onos.a1t.a1.Header.a1_node_id)
  return a1_node_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Header::set_allocated_a1_node_id(std::string* a1_node_id) {
  if (a1_node_id != nullptr) {
    
  } else {
    
  }
  a1_node_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), a1_node_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (a1_node_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    a1_node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.a1.Header.a1_node_id)
}

// .onos.a1t.a1.Encoding encoding = 5;
inline void Header::clear_encoding() {
  encoding_ = 0;
}
inline ::onos::a1t::a1::Encoding Header::_internal_encoding() const {
  return static_cast< ::onos::a1t::a1::Encoding >(encoding_);
}
inline ::onos::a1t::a1::Encoding Header::encoding() const {
  // @@protoc_insertion_point(field_get:onos.a1t.a1.Header.encoding)
  return _internal_encoding();
}
inline void Header::_internal_set_encoding(::onos::a1t::a1::Encoding value) {
  
  encoding_ = value;
}
inline void Header::set_encoding(::onos::a1t::a1::Encoding value) {
  _internal_set_encoding(value);
  // @@protoc_insertion_point(field_set:onos.a1t.a1.Header.encoding)
}

// .onos.a1t.a1.PayloadType payload_type = 6;
inline void Header::clear_payload_type() {
  payload_type_ = 0;
}
inline ::onos::a1t::a1::PayloadType Header::_internal_payload_type() const {
  return static_cast< ::onos::a1t::a1::PayloadType >(payload_type_);
}
inline ::onos::a1t::a1::PayloadType Header::payload_type() const {
  // @@protoc_insertion_point(field_get:onos.a1t.a1.Header.payload_type)
  return _internal_payload_type();
}
inline void Header::_internal_set_payload_type(::onos::a1t::a1::PayloadType value) {
  
  payload_type_ = value;
}
inline void Header::set_payload_type(::onos::a1t::a1::PayloadType value) {
  _internal_set_payload_type(value);
  // @@protoc_insertion_point(field_set:onos.a1t.a1.Header.payload_type)
}

// -------------------------------------------------------------------

// Result

// bool success = 1;
inline void Result::clear_success() {
  success_ = false;
}
inline bool Result::_internal_success() const {
  return success_;
}
inline bool Result::success() const {
  // @@protoc_insertion_point(field_get:onos.a1t.a1.Result.success)
  return _internal_success();
}
inline void Result::_internal_set_success(bool value) {
  
  success_ = value;
}
inline void Result::set_success(bool value) {
  _internal_set_success(value);
  // @@protoc_insertion_point(field_set:onos.a1t.a1.Result.success)
}

// string reason = 2;
inline void Result::clear_reason() {
  reason_.ClearToEmpty();
}
inline const std::string& Result::reason() const {
  // @@protoc_insertion_point(field_get:onos.a1t.a1.Result.reason)
  return _internal_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Result::set_reason(ArgT0&& arg0, ArgT... args) {
 
 reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.a1t.a1.Result.reason)
}
inline std::string* Result::mutable_reason() {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:onos.a1t.a1.Result.reason)
  return _s;
}
inline const std::string& Result::_internal_reason() const {
  return reason_.Get();
}
inline void Result::_internal_set_reason(const std::string& value) {
  
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Result::_internal_mutable_reason() {
  
  return reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Result::release_reason() {
  // @@protoc_insertion_point(field_release:onos.a1t.a1.Result.reason)
  return reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Result::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (reason_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    reason_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.a1.Result.reason)
}

// -------------------------------------------------------------------

// RequestMessage

// .onos.a1t.a1.Header header = 1;
inline bool RequestMessage::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool RequestMessage::has_header() const {
  return _internal_has_header();
}
inline void RequestMessage::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::onos::a1t::a1::Header& RequestMessage::_internal_header() const {
  const ::onos::a1t::a1::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::a1t::a1::Header&>(
      ::onos::a1t::a1::_Header_default_instance_);
}
inline const ::onos::a1t::a1::Header& RequestMessage::header() const {
  // @@protoc_insertion_point(field_get:onos.a1t.a1.RequestMessage.header)
  return _internal_header();
}
inline void RequestMessage::unsafe_arena_set_allocated_header(
    ::onos::a1t::a1::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.a1t.a1.RequestMessage.header)
}
inline ::onos::a1t::a1::Header* RequestMessage::release_header() {
  
  ::onos::a1t::a1::Header* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::a1t::a1::Header* RequestMessage::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:onos.a1t.a1.RequestMessage.header)
  
  ::onos::a1t::a1::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::onos::a1t::a1::Header* RequestMessage::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::a1t::a1::Header>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::onos::a1t::a1::Header* RequestMessage::mutable_header() {
  ::onos::a1t::a1::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:onos.a1t.a1.RequestMessage.header)
  return _msg;
}
inline void RequestMessage::set_allocated_header(::onos::a1t::a1::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::a1t::a1::Header>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.a1.RequestMessage.header)
}

// bytes payload = 2;
inline void RequestMessage::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& RequestMessage::payload() const {
  // @@protoc_insertion_point(field_get:onos.a1t.a1.RequestMessage.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestMessage::set_payload(ArgT0&& arg0, ArgT... args) {
 
 payload_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.a1t.a1.RequestMessage.payload)
}
inline std::string* RequestMessage::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:onos.a1t.a1.RequestMessage.payload)
  return _s;
}
inline const std::string& RequestMessage::_internal_payload() const {
  return payload_.Get();
}
inline void RequestMessage::_internal_set_payload(const std::string& value) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RequestMessage::_internal_mutable_payload() {
  
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RequestMessage::release_payload() {
  // @@protoc_insertion_point(field_release:onos.a1t.a1.RequestMessage.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RequestMessage::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (payload_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.a1.RequestMessage.payload)
}

// -------------------------------------------------------------------

// ResultMessage

// .onos.a1t.a1.Header header = 1;
inline bool ResultMessage::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool ResultMessage::has_header() const {
  return _internal_has_header();
}
inline void ResultMessage::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::onos::a1t::a1::Header& ResultMessage::_internal_header() const {
  const ::onos::a1t::a1::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::a1t::a1::Header&>(
      ::onos::a1t::a1::_Header_default_instance_);
}
inline const ::onos::a1t::a1::Header& ResultMessage::header() const {
  // @@protoc_insertion_point(field_get:onos.a1t.a1.ResultMessage.header)
  return _internal_header();
}
inline void ResultMessage::unsafe_arena_set_allocated_header(
    ::onos::a1t::a1::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.a1t.a1.ResultMessage.header)
}
inline ::onos::a1t::a1::Header* ResultMessage::release_header() {
  
  ::onos::a1t::a1::Header* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::a1t::a1::Header* ResultMessage::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:onos.a1t.a1.ResultMessage.header)
  
  ::onos::a1t::a1::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::onos::a1t::a1::Header* ResultMessage::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::a1t::a1::Header>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::onos::a1t::a1::Header* ResultMessage::mutable_header() {
  ::onos::a1t::a1::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:onos.a1t.a1.ResultMessage.header)
  return _msg;
}
inline void ResultMessage::set_allocated_header(::onos::a1t::a1::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::a1t::a1::Header>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.a1.ResultMessage.header)
}

// bytes payload = 2;
inline void ResultMessage::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& ResultMessage::payload() const {
  // @@protoc_insertion_point(field_get:onos.a1t.a1.ResultMessage.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResultMessage::set_payload(ArgT0&& arg0, ArgT... args) {
 
 payload_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.a1t.a1.ResultMessage.payload)
}
inline std::string* ResultMessage::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:onos.a1t.a1.ResultMessage.payload)
  return _s;
}
inline const std::string& ResultMessage::_internal_payload() const {
  return payload_.Get();
}
inline void ResultMessage::_internal_set_payload(const std::string& value) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResultMessage::_internal_mutable_payload() {
  
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResultMessage::release_payload() {
  // @@protoc_insertion_point(field_release:onos.a1t.a1.ResultMessage.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResultMessage::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (payload_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.a1.ResultMessage.payload)
}

// .onos.a1t.a1.Result result = 3;
inline bool ResultMessage::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool ResultMessage::has_result() const {
  return _internal_has_result();
}
inline void ResultMessage::clear_result() {
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::onos::a1t::a1::Result& ResultMessage::_internal_result() const {
  const ::onos::a1t::a1::Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::a1t::a1::Result&>(
      ::onos::a1t::a1::_Result_default_instance_);
}
inline const ::onos::a1t::a1::Result& ResultMessage::result() const {
  // @@protoc_insertion_point(field_get:onos.a1t.a1.ResultMessage.result)
  return _internal_result();
}
inline void ResultMessage::unsafe_arena_set_allocated_result(
    ::onos::a1t::a1::Result* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.a1t.a1.ResultMessage.result)
}
inline ::onos::a1t::a1::Result* ResultMessage::release_result() {
  
  ::onos::a1t::a1::Result* temp = result_;
  result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::a1t::a1::Result* ResultMessage::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:onos.a1t.a1.ResultMessage.result)
  
  ::onos::a1t::a1::Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::onos::a1t::a1::Result* ResultMessage::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::a1t::a1::Result>(GetArenaForAllocation());
    result_ = p;
  }
  return result_;
}
inline ::onos::a1t::a1::Result* ResultMessage::mutable_result() {
  ::onos::a1t::a1::Result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:onos.a1t.a1.ResultMessage.result)
  return _msg;
}
inline void ResultMessage::set_allocated_result(::onos::a1t::a1::Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::a1t::a1::Result>::GetOwningArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.a1.ResultMessage.result)
}

// -------------------------------------------------------------------

// StatusMessage

// .onos.a1t.a1.Header header = 1;
inline bool StatusMessage::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool StatusMessage::has_header() const {
  return _internal_has_header();
}
inline void StatusMessage::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::onos::a1t::a1::Header& StatusMessage::_internal_header() const {
  const ::onos::a1t::a1::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::a1t::a1::Header&>(
      ::onos::a1t::a1::_Header_default_instance_);
}
inline const ::onos::a1t::a1::Header& StatusMessage::header() const {
  // @@protoc_insertion_point(field_get:onos.a1t.a1.StatusMessage.header)
  return _internal_header();
}
inline void StatusMessage::unsafe_arena_set_allocated_header(
    ::onos::a1t::a1::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.a1t.a1.StatusMessage.header)
}
inline ::onos::a1t::a1::Header* StatusMessage::release_header() {
  
  ::onos::a1t::a1::Header* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::a1t::a1::Header* StatusMessage::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:onos.a1t.a1.StatusMessage.header)
  
  ::onos::a1t::a1::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::onos::a1t::a1::Header* StatusMessage::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::a1t::a1::Header>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::onos::a1t::a1::Header* StatusMessage::mutable_header() {
  ::onos::a1t::a1::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:onos.a1t.a1.StatusMessage.header)
  return _msg;
}
inline void StatusMessage::set_allocated_header(::onos::a1t::a1::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::a1t::a1::Header>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.a1.StatusMessage.header)
}

// bytes payload = 2;
inline void StatusMessage::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& StatusMessage::payload() const {
  // @@protoc_insertion_point(field_get:onos.a1t.a1.StatusMessage.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StatusMessage::set_payload(ArgT0&& arg0, ArgT... args) {
 
 payload_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.a1t.a1.StatusMessage.payload)
}
inline std::string* StatusMessage::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:onos.a1t.a1.StatusMessage.payload)
  return _s;
}
inline const std::string& StatusMessage::_internal_payload() const {
  return payload_.Get();
}
inline void StatusMessage::_internal_set_payload(const std::string& value) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* StatusMessage::_internal_mutable_payload() {
  
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* StatusMessage::release_payload() {
  // @@protoc_insertion_point(field_release:onos.a1t.a1.StatusMessage.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void StatusMessage::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (payload_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.a1.StatusMessage.payload)
}

// -------------------------------------------------------------------

// AckMessage

// .onos.a1t.a1.Header header = 1;
inline bool AckMessage::_internal_has_header() const {
  return this != internal_default_instance() && header_ != nullptr;
}
inline bool AckMessage::has_header() const {
  return _internal_has_header();
}
inline void AckMessage::clear_header() {
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
}
inline const ::onos::a1t::a1::Header& AckMessage::_internal_header() const {
  const ::onos::a1t::a1::Header* p = header_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::a1t::a1::Header&>(
      ::onos::a1t::a1::_Header_default_instance_);
}
inline const ::onos::a1t::a1::Header& AckMessage::header() const {
  // @@protoc_insertion_point(field_get:onos.a1t.a1.AckMessage.header)
  return _internal_header();
}
inline void AckMessage::unsafe_arena_set_allocated_header(
    ::onos::a1t::a1::Header* header) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(header_);
  }
  header_ = header;
  if (header) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.a1t.a1.AckMessage.header)
}
inline ::onos::a1t::a1::Header* AckMessage::release_header() {
  
  ::onos::a1t::a1::Header* temp = header_;
  header_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::a1t::a1::Header* AckMessage::unsafe_arena_release_header() {
  // @@protoc_insertion_point(field_release:onos.a1t.a1.AckMessage.header)
  
  ::onos::a1t::a1::Header* temp = header_;
  header_ = nullptr;
  return temp;
}
inline ::onos::a1t::a1::Header* AckMessage::_internal_mutable_header() {
  
  if (header_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::a1t::a1::Header>(GetArenaForAllocation());
    header_ = p;
  }
  return header_;
}
inline ::onos::a1t::a1::Header* AckMessage::mutable_header() {
  ::onos::a1t::a1::Header* _msg = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:onos.a1t.a1.AckMessage.header)
  return _msg;
}
inline void AckMessage::set_allocated_header(::onos::a1t::a1::Header* header) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete header_;
  }
  if (header) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::a1t::a1::Header>::GetOwningArena(header);
    if (message_arena != submessage_arena) {
      header = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, header, submessage_arena);
    }
    
  } else {
    
  }
  header_ = header;
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.a1.AckMessage.header)
}

// bytes payload = 2;
inline void AckMessage::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& AckMessage::payload() const {
  // @@protoc_insertion_point(field_get:onos.a1t.a1.AckMessage.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckMessage::set_payload(ArgT0&& arg0, ArgT... args) {
 
 payload_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.a1t.a1.AckMessage.payload)
}
inline std::string* AckMessage::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:onos.a1t.a1.AckMessage.payload)
  return _s;
}
inline const std::string& AckMessage::_internal_payload() const {
  return payload_.Get();
}
inline void AckMessage::_internal_set_payload(const std::string& value) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckMessage::_internal_mutable_payload() {
  
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckMessage::release_payload() {
  // @@protoc_insertion_point(field_release:onos.a1t.a1.AckMessage.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckMessage::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (payload_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.a1.AckMessage.payload)
}

// .onos.a1t.a1.Result result = 3;
inline bool AckMessage::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool AckMessage::has_result() const {
  return _internal_has_result();
}
inline void AckMessage::clear_result() {
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::onos::a1t::a1::Result& AckMessage::_internal_result() const {
  const ::onos::a1t::a1::Result* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::a1t::a1::Result&>(
      ::onos::a1t::a1::_Result_default_instance_);
}
inline const ::onos::a1t::a1::Result& AckMessage::result() const {
  // @@protoc_insertion_point(field_get:onos.a1t.a1.AckMessage.result)
  return _internal_result();
}
inline void AckMessage::unsafe_arena_set_allocated_result(
    ::onos::a1t::a1::Result* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.a1t.a1.AckMessage.result)
}
inline ::onos::a1t::a1::Result* AckMessage::release_result() {
  
  ::onos::a1t::a1::Result* temp = result_;
  result_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::a1t::a1::Result* AckMessage::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:onos.a1t.a1.AckMessage.result)
  
  ::onos::a1t::a1::Result* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::onos::a1t::a1::Result* AckMessage::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::a1t::a1::Result>(GetArenaForAllocation());
    result_ = p;
  }
  return result_;
}
inline ::onos::a1t::a1::Result* AckMessage::mutable_result() {
  ::onos::a1t::a1::Result* _msg = _internal_mutable_result();
  // @@protoc_insertion_point(field_mutable:onos.a1t.a1.AckMessage.result)
  return _msg;
}
inline void AckMessage::set_allocated_result(::onos::a1t::a1::Result* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::a1t::a1::Result>::GetOwningArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.a1.AckMessage.result)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace a1
}  // namespace a1t
}  // namespace onos

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::onos::a1t::a1::Encoding> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::onos::a1t::a1::Encoding>() {
  return ::onos::a1t::a1::Encoding_descriptor();
}
template <> struct is_proto_enum< ::onos::a1t::a1::PayloadType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::onos::a1t::a1::PayloadType>() {
  return ::onos::a1t::a1::PayloadType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_onos_2fa1t_2fa1_2fa1_2eproto
