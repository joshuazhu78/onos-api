// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onos/a1t/admin/admin.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_onos_2fa1t_2fadmin_2fadmin_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_onos_2fa1t_2fadmin_2fadmin_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_onos_2fa1t_2fadmin_2fadmin_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_onos_2fa1t_2fadmin_2fadmin_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_onos_2fa1t_2fadmin_2fadmin_2eproto;
namespace onos {
namespace a1t {
namespace admin {
class GetPolicyObjectRequest;
struct GetPolicyObjectRequestDefaultTypeInternal;
extern GetPolicyObjectRequestDefaultTypeInternal _GetPolicyObjectRequest_default_instance_;
class GetPolicyObjectResponse;
struct GetPolicyObjectResponseDefaultTypeInternal;
extern GetPolicyObjectResponseDefaultTypeInternal _GetPolicyObjectResponse_default_instance_;
class GetPolicyObjectStatusRequest;
struct GetPolicyObjectStatusRequestDefaultTypeInternal;
extern GetPolicyObjectStatusRequestDefaultTypeInternal _GetPolicyObjectStatusRequest_default_instance_;
class GetPolicyObjectStatusResponse;
struct GetPolicyObjectStatusResponseDefaultTypeInternal;
extern GetPolicyObjectStatusResponseDefaultTypeInternal _GetPolicyObjectStatusResponse_default_instance_;
class GetPolicyTypeObjectRequest;
struct GetPolicyTypeObjectRequestDefaultTypeInternal;
extern GetPolicyTypeObjectRequestDefaultTypeInternal _GetPolicyTypeObjectRequest_default_instance_;
class GetPolicyTypeObjectResponse;
struct GetPolicyTypeObjectResponseDefaultTypeInternal;
extern GetPolicyTypeObjectResponseDefaultTypeInternal _GetPolicyTypeObjectResponse_default_instance_;
class GetXAppConnectionResponse;
struct GetXAppConnectionResponseDefaultTypeInternal;
extern GetXAppConnectionResponseDefaultTypeInternal _GetXAppConnectionResponse_default_instance_;
class GetXAppConnectionsRequest;
struct GetXAppConnectionsRequestDefaultTypeInternal;
extern GetXAppConnectionsRequestDefaultTypeInternal _GetXAppConnectionsRequest_default_instance_;
}  // namespace admin
}  // namespace a1t
}  // namespace onos
PROTOBUF_NAMESPACE_OPEN
template<> ::onos::a1t::admin::GetPolicyObjectRequest* Arena::CreateMaybeMessage<::onos::a1t::admin::GetPolicyObjectRequest>(Arena*);
template<> ::onos::a1t::admin::GetPolicyObjectResponse* Arena::CreateMaybeMessage<::onos::a1t::admin::GetPolicyObjectResponse>(Arena*);
template<> ::onos::a1t::admin::GetPolicyObjectStatusRequest* Arena::CreateMaybeMessage<::onos::a1t::admin::GetPolicyObjectStatusRequest>(Arena*);
template<> ::onos::a1t::admin::GetPolicyObjectStatusResponse* Arena::CreateMaybeMessage<::onos::a1t::admin::GetPolicyObjectStatusResponse>(Arena*);
template<> ::onos::a1t::admin::GetPolicyTypeObjectRequest* Arena::CreateMaybeMessage<::onos::a1t::admin::GetPolicyTypeObjectRequest>(Arena*);
template<> ::onos::a1t::admin::GetPolicyTypeObjectResponse* Arena::CreateMaybeMessage<::onos::a1t::admin::GetPolicyTypeObjectResponse>(Arena*);
template<> ::onos::a1t::admin::GetXAppConnectionResponse* Arena::CreateMaybeMessage<::onos::a1t::admin::GetXAppConnectionResponse>(Arena*);
template<> ::onos::a1t::admin::GetXAppConnectionsRequest* Arena::CreateMaybeMessage<::onos::a1t::admin::GetXAppConnectionsRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace onos {
namespace a1t {
namespace admin {

// ===================================================================

class GetXAppConnectionsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.a1t.admin.GetXAppConnectionsRequest) */ {
 public:
  inline GetXAppConnectionsRequest() : GetXAppConnectionsRequest(nullptr) {}
  ~GetXAppConnectionsRequest() override;
  explicit constexpr GetXAppConnectionsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetXAppConnectionsRequest(const GetXAppConnectionsRequest& from);
  GetXAppConnectionsRequest(GetXAppConnectionsRequest&& from) noexcept
    : GetXAppConnectionsRequest() {
    *this = ::std::move(from);
  }

  inline GetXAppConnectionsRequest& operator=(const GetXAppConnectionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetXAppConnectionsRequest& operator=(GetXAppConnectionsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetXAppConnectionsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetXAppConnectionsRequest* internal_default_instance() {
    return reinterpret_cast<const GetXAppConnectionsRequest*>(
               &_GetXAppConnectionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetXAppConnectionsRequest& a, GetXAppConnectionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetXAppConnectionsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetXAppConnectionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetXAppConnectionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetXAppConnectionsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetXAppConnectionsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetXAppConnectionsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetXAppConnectionsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.a1t.admin.GetXAppConnectionsRequest";
  }
  protected:
  explicit GetXAppConnectionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXappIdFieldNumber = 1,
  };
  // string xapp_id = 1;
  void clear_xapp_id();
  const std::string& xapp_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_xapp_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_xapp_id();
  PROTOBUF_NODISCARD std::string* release_xapp_id();
  void set_allocated_xapp_id(std::string* xapp_id);
  private:
  const std::string& _internal_xapp_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_xapp_id(const std::string& value);
  std::string* _internal_mutable_xapp_id();
  public:

  // @@protoc_insertion_point(class_scope:onos.a1t.admin.GetXAppConnectionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xapp_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fa1t_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetXAppConnectionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.a1t.admin.GetXAppConnectionResponse) */ {
 public:
  inline GetXAppConnectionResponse() : GetXAppConnectionResponse(nullptr) {}
  ~GetXAppConnectionResponse() override;
  explicit constexpr GetXAppConnectionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetXAppConnectionResponse(const GetXAppConnectionResponse& from);
  GetXAppConnectionResponse(GetXAppConnectionResponse&& from) noexcept
    : GetXAppConnectionResponse() {
    *this = ::std::move(from);
  }

  inline GetXAppConnectionResponse& operator=(const GetXAppConnectionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetXAppConnectionResponse& operator=(GetXAppConnectionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetXAppConnectionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetXAppConnectionResponse* internal_default_instance() {
    return reinterpret_cast<const GetXAppConnectionResponse*>(
               &_GetXAppConnectionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetXAppConnectionResponse& a, GetXAppConnectionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetXAppConnectionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetXAppConnectionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetXAppConnectionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetXAppConnectionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetXAppConnectionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetXAppConnectionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetXAppConnectionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.a1t.admin.GetXAppConnectionResponse";
  }
  protected:
  explicit GetXAppConnectionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXappIdFieldNumber = 1,
    kSupportedA1ServiceFieldNumber = 2,
    kSupportedA1ServiceTypeIdFieldNumber = 3,
    kXappA1EndpointFieldNumber = 4,
  };
  // string xapp_id = 1;
  void clear_xapp_id();
  const std::string& xapp_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_xapp_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_xapp_id();
  PROTOBUF_NODISCARD std::string* release_xapp_id();
  void set_allocated_xapp_id(std::string* xapp_id);
  private:
  const std::string& _internal_xapp_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_xapp_id(const std::string& value);
  std::string* _internal_mutable_xapp_id();
  public:

  // string supported_a1_service = 2;
  void clear_supported_a1_service();
  const std::string& supported_a1_service() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_supported_a1_service(ArgT0&& arg0, ArgT... args);
  std::string* mutable_supported_a1_service();
  PROTOBUF_NODISCARD std::string* release_supported_a1_service();
  void set_allocated_supported_a1_service(std::string* supported_a1_service);
  private:
  const std::string& _internal_supported_a1_service() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_supported_a1_service(const std::string& value);
  std::string* _internal_mutable_supported_a1_service();
  public:

  // string supported_a1_service_type_id = 3;
  void clear_supported_a1_service_type_id();
  const std::string& supported_a1_service_type_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_supported_a1_service_type_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_supported_a1_service_type_id();
  PROTOBUF_NODISCARD std::string* release_supported_a1_service_type_id();
  void set_allocated_supported_a1_service_type_id(std::string* supported_a1_service_type_id);
  private:
  const std::string& _internal_supported_a1_service_type_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_supported_a1_service_type_id(const std::string& value);
  std::string* _internal_mutable_supported_a1_service_type_id();
  public:

  // string xapp_a1_endpoint = 4;
  void clear_xapp_a1_endpoint();
  const std::string& xapp_a1_endpoint() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_xapp_a1_endpoint(ArgT0&& arg0, ArgT... args);
  std::string* mutable_xapp_a1_endpoint();
  PROTOBUF_NODISCARD std::string* release_xapp_a1_endpoint();
  void set_allocated_xapp_a1_endpoint(std::string* xapp_a1_endpoint);
  private:
  const std::string& _internal_xapp_a1_endpoint() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_xapp_a1_endpoint(const std::string& value);
  std::string* _internal_mutable_xapp_a1_endpoint();
  public:

  // @@protoc_insertion_point(class_scope:onos.a1t.admin.GetXAppConnectionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xapp_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr supported_a1_service_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr supported_a1_service_type_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr xapp_a1_endpoint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fa1t_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetPolicyTypeObjectRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.a1t.admin.GetPolicyTypeObjectRequest) */ {
 public:
  inline GetPolicyTypeObjectRequest() : GetPolicyTypeObjectRequest(nullptr) {}
  ~GetPolicyTypeObjectRequest() override;
  explicit constexpr GetPolicyTypeObjectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPolicyTypeObjectRequest(const GetPolicyTypeObjectRequest& from);
  GetPolicyTypeObjectRequest(GetPolicyTypeObjectRequest&& from) noexcept
    : GetPolicyTypeObjectRequest() {
    *this = ::std::move(from);
  }

  inline GetPolicyTypeObjectRequest& operator=(const GetPolicyTypeObjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPolicyTypeObjectRequest& operator=(GetPolicyTypeObjectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPolicyTypeObjectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPolicyTypeObjectRequest* internal_default_instance() {
    return reinterpret_cast<const GetPolicyTypeObjectRequest*>(
               &_GetPolicyTypeObjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetPolicyTypeObjectRequest& a, GetPolicyTypeObjectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPolicyTypeObjectRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPolicyTypeObjectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPolicyTypeObjectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPolicyTypeObjectRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPolicyTypeObjectRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetPolicyTypeObjectRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPolicyTypeObjectRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.a1t.admin.GetPolicyTypeObjectRequest";
  }
  protected:
  explicit GetPolicyTypeObjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPolicyTypeIdFieldNumber = 1,
  };
  // string policy_type_id = 1;
  void clear_policy_type_id();
  const std::string& policy_type_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_policy_type_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_policy_type_id();
  PROTOBUF_NODISCARD std::string* release_policy_type_id();
  void set_allocated_policy_type_id(std::string* policy_type_id);
  private:
  const std::string& _internal_policy_type_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_policy_type_id(const std::string& value);
  std::string* _internal_mutable_policy_type_id();
  public:

  // @@protoc_insertion_point(class_scope:onos.a1t.admin.GetPolicyTypeObjectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr policy_type_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fa1t_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetPolicyTypeObjectResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.a1t.admin.GetPolicyTypeObjectResponse) */ {
 public:
  inline GetPolicyTypeObjectResponse() : GetPolicyTypeObjectResponse(nullptr) {}
  ~GetPolicyTypeObjectResponse() override;
  explicit constexpr GetPolicyTypeObjectResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPolicyTypeObjectResponse(const GetPolicyTypeObjectResponse& from);
  GetPolicyTypeObjectResponse(GetPolicyTypeObjectResponse&& from) noexcept
    : GetPolicyTypeObjectResponse() {
    *this = ::std::move(from);
  }

  inline GetPolicyTypeObjectResponse& operator=(const GetPolicyTypeObjectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPolicyTypeObjectResponse& operator=(GetPolicyTypeObjectResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPolicyTypeObjectResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPolicyTypeObjectResponse* internal_default_instance() {
    return reinterpret_cast<const GetPolicyTypeObjectResponse*>(
               &_GetPolicyTypeObjectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetPolicyTypeObjectResponse& a, GetPolicyTypeObjectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPolicyTypeObjectResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPolicyTypeObjectResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPolicyTypeObjectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPolicyTypeObjectResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPolicyTypeObjectResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetPolicyTypeObjectResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPolicyTypeObjectResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.a1t.admin.GetPolicyTypeObjectResponse";
  }
  protected:
  explicit GetPolicyTypeObjectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPolicyIdsFieldNumber = 2,
    kPolicyTypeIdFieldNumber = 1,
    kPolicyTypeObjectFieldNumber = 3,
  };
  // repeated string policy_ids = 2;
  int policy_ids_size() const;
  private:
  int _internal_policy_ids_size() const;
  public:
  void clear_policy_ids();
  const std::string& policy_ids(int index) const;
  std::string* mutable_policy_ids(int index);
  void set_policy_ids(int index, const std::string& value);
  void set_policy_ids(int index, std::string&& value);
  void set_policy_ids(int index, const char* value);
  void set_policy_ids(int index, const char* value, size_t size);
  std::string* add_policy_ids();
  void add_policy_ids(const std::string& value);
  void add_policy_ids(std::string&& value);
  void add_policy_ids(const char* value);
  void add_policy_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& policy_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_policy_ids();
  private:
  const std::string& _internal_policy_ids(int index) const;
  std::string* _internal_add_policy_ids();
  public:

  // string policy_type_id = 1;
  void clear_policy_type_id();
  const std::string& policy_type_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_policy_type_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_policy_type_id();
  PROTOBUF_NODISCARD std::string* release_policy_type_id();
  void set_allocated_policy_type_id(std::string* policy_type_id);
  private:
  const std::string& _internal_policy_type_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_policy_type_id(const std::string& value);
  std::string* _internal_mutable_policy_type_id();
  public:

  // string policy_type_object = 3;
  void clear_policy_type_object();
  const std::string& policy_type_object() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_policy_type_object(ArgT0&& arg0, ArgT... args);
  std::string* mutable_policy_type_object();
  PROTOBUF_NODISCARD std::string* release_policy_type_object();
  void set_allocated_policy_type_object(std::string* policy_type_object);
  private:
  const std::string& _internal_policy_type_object() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_policy_type_object(const std::string& value);
  std::string* _internal_mutable_policy_type_object();
  public:

  // @@protoc_insertion_point(class_scope:onos.a1t.admin.GetPolicyTypeObjectResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> policy_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr policy_type_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr policy_type_object_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fa1t_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetPolicyObjectRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.a1t.admin.GetPolicyObjectRequest) */ {
 public:
  inline GetPolicyObjectRequest() : GetPolicyObjectRequest(nullptr) {}
  ~GetPolicyObjectRequest() override;
  explicit constexpr GetPolicyObjectRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPolicyObjectRequest(const GetPolicyObjectRequest& from);
  GetPolicyObjectRequest(GetPolicyObjectRequest&& from) noexcept
    : GetPolicyObjectRequest() {
    *this = ::std::move(from);
  }

  inline GetPolicyObjectRequest& operator=(const GetPolicyObjectRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPolicyObjectRequest& operator=(GetPolicyObjectRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPolicyObjectRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPolicyObjectRequest* internal_default_instance() {
    return reinterpret_cast<const GetPolicyObjectRequest*>(
               &_GetPolicyObjectRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetPolicyObjectRequest& a, GetPolicyObjectRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPolicyObjectRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPolicyObjectRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPolicyObjectRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPolicyObjectRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPolicyObjectRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetPolicyObjectRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPolicyObjectRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.a1t.admin.GetPolicyObjectRequest";
  }
  protected:
  explicit GetPolicyObjectRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPolicyTypeIdFieldNumber = 1,
    kPolicyObjectIdFieldNumber = 2,
  };
  // string policy_type_id = 1;
  void clear_policy_type_id();
  const std::string& policy_type_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_policy_type_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_policy_type_id();
  PROTOBUF_NODISCARD std::string* release_policy_type_id();
  void set_allocated_policy_type_id(std::string* policy_type_id);
  private:
  const std::string& _internal_policy_type_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_policy_type_id(const std::string& value);
  std::string* _internal_mutable_policy_type_id();
  public:

  // string policy_object_id = 2;
  void clear_policy_object_id();
  const std::string& policy_object_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_policy_object_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_policy_object_id();
  PROTOBUF_NODISCARD std::string* release_policy_object_id();
  void set_allocated_policy_object_id(std::string* policy_object_id);
  private:
  const std::string& _internal_policy_object_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_policy_object_id(const std::string& value);
  std::string* _internal_mutable_policy_object_id();
  public:

  // @@protoc_insertion_point(class_scope:onos.a1t.admin.GetPolicyObjectRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr policy_type_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr policy_object_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fa1t_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetPolicyObjectResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.a1t.admin.GetPolicyObjectResponse) */ {
 public:
  inline GetPolicyObjectResponse() : GetPolicyObjectResponse(nullptr) {}
  ~GetPolicyObjectResponse() override;
  explicit constexpr GetPolicyObjectResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPolicyObjectResponse(const GetPolicyObjectResponse& from);
  GetPolicyObjectResponse(GetPolicyObjectResponse&& from) noexcept
    : GetPolicyObjectResponse() {
    *this = ::std::move(from);
  }

  inline GetPolicyObjectResponse& operator=(const GetPolicyObjectResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPolicyObjectResponse& operator=(GetPolicyObjectResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPolicyObjectResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPolicyObjectResponse* internal_default_instance() {
    return reinterpret_cast<const GetPolicyObjectResponse*>(
               &_GetPolicyObjectResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetPolicyObjectResponse& a, GetPolicyObjectResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPolicyObjectResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPolicyObjectResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPolicyObjectResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPolicyObjectResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPolicyObjectResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetPolicyObjectResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPolicyObjectResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.a1t.admin.GetPolicyObjectResponse";
  }
  protected:
  explicit GetPolicyObjectResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPolicyTypeIdFieldNumber = 1,
    kPolicyObjectIdFieldNumber = 2,
    kPolicyObjectFieldNumber = 3,
  };
  // string policy_type_id = 1;
  void clear_policy_type_id();
  const std::string& policy_type_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_policy_type_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_policy_type_id();
  PROTOBUF_NODISCARD std::string* release_policy_type_id();
  void set_allocated_policy_type_id(std::string* policy_type_id);
  private:
  const std::string& _internal_policy_type_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_policy_type_id(const std::string& value);
  std::string* _internal_mutable_policy_type_id();
  public:

  // string policy_object_id = 2;
  void clear_policy_object_id();
  const std::string& policy_object_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_policy_object_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_policy_object_id();
  PROTOBUF_NODISCARD std::string* release_policy_object_id();
  void set_allocated_policy_object_id(std::string* policy_object_id);
  private:
  const std::string& _internal_policy_object_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_policy_object_id(const std::string& value);
  std::string* _internal_mutable_policy_object_id();
  public:

  // string policy_object = 3;
  void clear_policy_object();
  const std::string& policy_object() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_policy_object(ArgT0&& arg0, ArgT... args);
  std::string* mutable_policy_object();
  PROTOBUF_NODISCARD std::string* release_policy_object();
  void set_allocated_policy_object(std::string* policy_object);
  private:
  const std::string& _internal_policy_object() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_policy_object(const std::string& value);
  std::string* _internal_mutable_policy_object();
  public:

  // @@protoc_insertion_point(class_scope:onos.a1t.admin.GetPolicyObjectResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr policy_type_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr policy_object_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr policy_object_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fa1t_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetPolicyObjectStatusRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.a1t.admin.GetPolicyObjectStatusRequest) */ {
 public:
  inline GetPolicyObjectStatusRequest() : GetPolicyObjectStatusRequest(nullptr) {}
  ~GetPolicyObjectStatusRequest() override;
  explicit constexpr GetPolicyObjectStatusRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPolicyObjectStatusRequest(const GetPolicyObjectStatusRequest& from);
  GetPolicyObjectStatusRequest(GetPolicyObjectStatusRequest&& from) noexcept
    : GetPolicyObjectStatusRequest() {
    *this = ::std::move(from);
  }

  inline GetPolicyObjectStatusRequest& operator=(const GetPolicyObjectStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPolicyObjectStatusRequest& operator=(GetPolicyObjectStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPolicyObjectStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPolicyObjectStatusRequest* internal_default_instance() {
    return reinterpret_cast<const GetPolicyObjectStatusRequest*>(
               &_GetPolicyObjectStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetPolicyObjectStatusRequest& a, GetPolicyObjectStatusRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPolicyObjectStatusRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPolicyObjectStatusRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPolicyObjectStatusRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPolicyObjectStatusRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPolicyObjectStatusRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetPolicyObjectStatusRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPolicyObjectStatusRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.a1t.admin.GetPolicyObjectStatusRequest";
  }
  protected:
  explicit GetPolicyObjectStatusRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPolicyTypeIdFieldNumber = 1,
    kPolicyObjectIdFieldNumber = 2,
  };
  // string policy_type_id = 1;
  void clear_policy_type_id();
  const std::string& policy_type_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_policy_type_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_policy_type_id();
  PROTOBUF_NODISCARD std::string* release_policy_type_id();
  void set_allocated_policy_type_id(std::string* policy_type_id);
  private:
  const std::string& _internal_policy_type_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_policy_type_id(const std::string& value);
  std::string* _internal_mutable_policy_type_id();
  public:

  // string policy_object_id = 2;
  void clear_policy_object_id();
  const std::string& policy_object_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_policy_object_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_policy_object_id();
  PROTOBUF_NODISCARD std::string* release_policy_object_id();
  void set_allocated_policy_object_id(std::string* policy_object_id);
  private:
  const std::string& _internal_policy_object_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_policy_object_id(const std::string& value);
  std::string* _internal_mutable_policy_object_id();
  public:

  // @@protoc_insertion_point(class_scope:onos.a1t.admin.GetPolicyObjectStatusRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr policy_type_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr policy_object_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fa1t_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetPolicyObjectStatusResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.a1t.admin.GetPolicyObjectStatusResponse) */ {
 public:
  inline GetPolicyObjectStatusResponse() : GetPolicyObjectStatusResponse(nullptr) {}
  ~GetPolicyObjectStatusResponse() override;
  explicit constexpr GetPolicyObjectStatusResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetPolicyObjectStatusResponse(const GetPolicyObjectStatusResponse& from);
  GetPolicyObjectStatusResponse(GetPolicyObjectStatusResponse&& from) noexcept
    : GetPolicyObjectStatusResponse() {
    *this = ::std::move(from);
  }

  inline GetPolicyObjectStatusResponse& operator=(const GetPolicyObjectStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetPolicyObjectStatusResponse& operator=(GetPolicyObjectStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetPolicyObjectStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetPolicyObjectStatusResponse* internal_default_instance() {
    return reinterpret_cast<const GetPolicyObjectStatusResponse*>(
               &_GetPolicyObjectStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetPolicyObjectStatusResponse& a, GetPolicyObjectStatusResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetPolicyObjectStatusResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetPolicyObjectStatusResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetPolicyObjectStatusResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetPolicyObjectStatusResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetPolicyObjectStatusResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetPolicyObjectStatusResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetPolicyObjectStatusResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.a1t.admin.GetPolicyObjectStatusResponse";
  }
  protected:
  explicit GetPolicyObjectStatusResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPolicyTypeIdFieldNumber = 1,
    kPolicyObjectIdFieldNumber = 2,
    kPolicyObjectStatusFieldNumber = 3,
  };
  // string policy_type_id = 1;
  void clear_policy_type_id();
  const std::string& policy_type_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_policy_type_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_policy_type_id();
  PROTOBUF_NODISCARD std::string* release_policy_type_id();
  void set_allocated_policy_type_id(std::string* policy_type_id);
  private:
  const std::string& _internal_policy_type_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_policy_type_id(const std::string& value);
  std::string* _internal_mutable_policy_type_id();
  public:

  // string policy_object_id = 2;
  void clear_policy_object_id();
  const std::string& policy_object_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_policy_object_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_policy_object_id();
  PROTOBUF_NODISCARD std::string* release_policy_object_id();
  void set_allocated_policy_object_id(std::string* policy_object_id);
  private:
  const std::string& _internal_policy_object_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_policy_object_id(const std::string& value);
  std::string* _internal_mutable_policy_object_id();
  public:

  // string policy_object_status = 3;
  void clear_policy_object_status();
  const std::string& policy_object_status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_policy_object_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_policy_object_status();
  PROTOBUF_NODISCARD std::string* release_policy_object_status();
  void set_allocated_policy_object_status(std::string* policy_object_status);
  private:
  const std::string& _internal_policy_object_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_policy_object_status(const std::string& value);
  std::string* _internal_mutable_policy_object_status();
  public:

  // @@protoc_insertion_point(class_scope:onos.a1t.admin.GetPolicyObjectStatusResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr policy_type_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr policy_object_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr policy_object_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fa1t_2fadmin_2fadmin_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetXAppConnectionsRequest

// string xapp_id = 1;
inline void GetXAppConnectionsRequest::clear_xapp_id() {
  xapp_id_.ClearToEmpty();
}
inline const std::string& GetXAppConnectionsRequest::xapp_id() const {
  // @@protoc_insertion_point(field_get:onos.a1t.admin.GetXAppConnectionsRequest.xapp_id)
  return _internal_xapp_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetXAppConnectionsRequest::set_xapp_id(ArgT0&& arg0, ArgT... args) {
 
 xapp_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.a1t.admin.GetXAppConnectionsRequest.xapp_id)
}
inline std::string* GetXAppConnectionsRequest::mutable_xapp_id() {
  std::string* _s = _internal_mutable_xapp_id();
  // @@protoc_insertion_point(field_mutable:onos.a1t.admin.GetXAppConnectionsRequest.xapp_id)
  return _s;
}
inline const std::string& GetXAppConnectionsRequest::_internal_xapp_id() const {
  return xapp_id_.Get();
}
inline void GetXAppConnectionsRequest::_internal_set_xapp_id(const std::string& value) {
  
  xapp_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetXAppConnectionsRequest::_internal_mutable_xapp_id() {
  
  return xapp_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetXAppConnectionsRequest::release_xapp_id() {
  // @@protoc_insertion_point(field_release:onos.a1t.admin.GetXAppConnectionsRequest.xapp_id)
  return xapp_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetXAppConnectionsRequest::set_allocated_xapp_id(std::string* xapp_id) {
  if (xapp_id != nullptr) {
    
  } else {
    
  }
  xapp_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xapp_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (xapp_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    xapp_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.admin.GetXAppConnectionsRequest.xapp_id)
}

// -------------------------------------------------------------------

// GetXAppConnectionResponse

// string xapp_id = 1;
inline void GetXAppConnectionResponse::clear_xapp_id() {
  xapp_id_.ClearToEmpty();
}
inline const std::string& GetXAppConnectionResponse::xapp_id() const {
  // @@protoc_insertion_point(field_get:onos.a1t.admin.GetXAppConnectionResponse.xapp_id)
  return _internal_xapp_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetXAppConnectionResponse::set_xapp_id(ArgT0&& arg0, ArgT... args) {
 
 xapp_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.a1t.admin.GetXAppConnectionResponse.xapp_id)
}
inline std::string* GetXAppConnectionResponse::mutable_xapp_id() {
  std::string* _s = _internal_mutable_xapp_id();
  // @@protoc_insertion_point(field_mutable:onos.a1t.admin.GetXAppConnectionResponse.xapp_id)
  return _s;
}
inline const std::string& GetXAppConnectionResponse::_internal_xapp_id() const {
  return xapp_id_.Get();
}
inline void GetXAppConnectionResponse::_internal_set_xapp_id(const std::string& value) {
  
  xapp_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetXAppConnectionResponse::_internal_mutable_xapp_id() {
  
  return xapp_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetXAppConnectionResponse::release_xapp_id() {
  // @@protoc_insertion_point(field_release:onos.a1t.admin.GetXAppConnectionResponse.xapp_id)
  return xapp_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetXAppConnectionResponse::set_allocated_xapp_id(std::string* xapp_id) {
  if (xapp_id != nullptr) {
    
  } else {
    
  }
  xapp_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xapp_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (xapp_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    xapp_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.admin.GetXAppConnectionResponse.xapp_id)
}

// string supported_a1_service = 2;
inline void GetXAppConnectionResponse::clear_supported_a1_service() {
  supported_a1_service_.ClearToEmpty();
}
inline const std::string& GetXAppConnectionResponse::supported_a1_service() const {
  // @@protoc_insertion_point(field_get:onos.a1t.admin.GetXAppConnectionResponse.supported_a1_service)
  return _internal_supported_a1_service();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetXAppConnectionResponse::set_supported_a1_service(ArgT0&& arg0, ArgT... args) {
 
 supported_a1_service_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.a1t.admin.GetXAppConnectionResponse.supported_a1_service)
}
inline std::string* GetXAppConnectionResponse::mutable_supported_a1_service() {
  std::string* _s = _internal_mutable_supported_a1_service();
  // @@protoc_insertion_point(field_mutable:onos.a1t.admin.GetXAppConnectionResponse.supported_a1_service)
  return _s;
}
inline const std::string& GetXAppConnectionResponse::_internal_supported_a1_service() const {
  return supported_a1_service_.Get();
}
inline void GetXAppConnectionResponse::_internal_set_supported_a1_service(const std::string& value) {
  
  supported_a1_service_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetXAppConnectionResponse::_internal_mutable_supported_a1_service() {
  
  return supported_a1_service_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetXAppConnectionResponse::release_supported_a1_service() {
  // @@protoc_insertion_point(field_release:onos.a1t.admin.GetXAppConnectionResponse.supported_a1_service)
  return supported_a1_service_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetXAppConnectionResponse::set_allocated_supported_a1_service(std::string* supported_a1_service) {
  if (supported_a1_service != nullptr) {
    
  } else {
    
  }
  supported_a1_service_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), supported_a1_service,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (supported_a1_service_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    supported_a1_service_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.admin.GetXAppConnectionResponse.supported_a1_service)
}

// string supported_a1_service_type_id = 3;
inline void GetXAppConnectionResponse::clear_supported_a1_service_type_id() {
  supported_a1_service_type_id_.ClearToEmpty();
}
inline const std::string& GetXAppConnectionResponse::supported_a1_service_type_id() const {
  // @@protoc_insertion_point(field_get:onos.a1t.admin.GetXAppConnectionResponse.supported_a1_service_type_id)
  return _internal_supported_a1_service_type_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetXAppConnectionResponse::set_supported_a1_service_type_id(ArgT0&& arg0, ArgT... args) {
 
 supported_a1_service_type_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.a1t.admin.GetXAppConnectionResponse.supported_a1_service_type_id)
}
inline std::string* GetXAppConnectionResponse::mutable_supported_a1_service_type_id() {
  std::string* _s = _internal_mutable_supported_a1_service_type_id();
  // @@protoc_insertion_point(field_mutable:onos.a1t.admin.GetXAppConnectionResponse.supported_a1_service_type_id)
  return _s;
}
inline const std::string& GetXAppConnectionResponse::_internal_supported_a1_service_type_id() const {
  return supported_a1_service_type_id_.Get();
}
inline void GetXAppConnectionResponse::_internal_set_supported_a1_service_type_id(const std::string& value) {
  
  supported_a1_service_type_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetXAppConnectionResponse::_internal_mutable_supported_a1_service_type_id() {
  
  return supported_a1_service_type_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetXAppConnectionResponse::release_supported_a1_service_type_id() {
  // @@protoc_insertion_point(field_release:onos.a1t.admin.GetXAppConnectionResponse.supported_a1_service_type_id)
  return supported_a1_service_type_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetXAppConnectionResponse::set_allocated_supported_a1_service_type_id(std::string* supported_a1_service_type_id) {
  if (supported_a1_service_type_id != nullptr) {
    
  } else {
    
  }
  supported_a1_service_type_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), supported_a1_service_type_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (supported_a1_service_type_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    supported_a1_service_type_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.admin.GetXAppConnectionResponse.supported_a1_service_type_id)
}

// string xapp_a1_endpoint = 4;
inline void GetXAppConnectionResponse::clear_xapp_a1_endpoint() {
  xapp_a1_endpoint_.ClearToEmpty();
}
inline const std::string& GetXAppConnectionResponse::xapp_a1_endpoint() const {
  // @@protoc_insertion_point(field_get:onos.a1t.admin.GetXAppConnectionResponse.xapp_a1_endpoint)
  return _internal_xapp_a1_endpoint();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetXAppConnectionResponse::set_xapp_a1_endpoint(ArgT0&& arg0, ArgT... args) {
 
 xapp_a1_endpoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.a1t.admin.GetXAppConnectionResponse.xapp_a1_endpoint)
}
inline std::string* GetXAppConnectionResponse::mutable_xapp_a1_endpoint() {
  std::string* _s = _internal_mutable_xapp_a1_endpoint();
  // @@protoc_insertion_point(field_mutable:onos.a1t.admin.GetXAppConnectionResponse.xapp_a1_endpoint)
  return _s;
}
inline const std::string& GetXAppConnectionResponse::_internal_xapp_a1_endpoint() const {
  return xapp_a1_endpoint_.Get();
}
inline void GetXAppConnectionResponse::_internal_set_xapp_a1_endpoint(const std::string& value) {
  
  xapp_a1_endpoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetXAppConnectionResponse::_internal_mutable_xapp_a1_endpoint() {
  
  return xapp_a1_endpoint_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetXAppConnectionResponse::release_xapp_a1_endpoint() {
  // @@protoc_insertion_point(field_release:onos.a1t.admin.GetXAppConnectionResponse.xapp_a1_endpoint)
  return xapp_a1_endpoint_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetXAppConnectionResponse::set_allocated_xapp_a1_endpoint(std::string* xapp_a1_endpoint) {
  if (xapp_a1_endpoint != nullptr) {
    
  } else {
    
  }
  xapp_a1_endpoint_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), xapp_a1_endpoint,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (xapp_a1_endpoint_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    xapp_a1_endpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.admin.GetXAppConnectionResponse.xapp_a1_endpoint)
}

// -------------------------------------------------------------------

// GetPolicyTypeObjectRequest

// string policy_type_id = 1;
inline void GetPolicyTypeObjectRequest::clear_policy_type_id() {
  policy_type_id_.ClearToEmpty();
}
inline const std::string& GetPolicyTypeObjectRequest::policy_type_id() const {
  // @@protoc_insertion_point(field_get:onos.a1t.admin.GetPolicyTypeObjectRequest.policy_type_id)
  return _internal_policy_type_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPolicyTypeObjectRequest::set_policy_type_id(ArgT0&& arg0, ArgT... args) {
 
 policy_type_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.a1t.admin.GetPolicyTypeObjectRequest.policy_type_id)
}
inline std::string* GetPolicyTypeObjectRequest::mutable_policy_type_id() {
  std::string* _s = _internal_mutable_policy_type_id();
  // @@protoc_insertion_point(field_mutable:onos.a1t.admin.GetPolicyTypeObjectRequest.policy_type_id)
  return _s;
}
inline const std::string& GetPolicyTypeObjectRequest::_internal_policy_type_id() const {
  return policy_type_id_.Get();
}
inline void GetPolicyTypeObjectRequest::_internal_set_policy_type_id(const std::string& value) {
  
  policy_type_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetPolicyTypeObjectRequest::_internal_mutable_policy_type_id() {
  
  return policy_type_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetPolicyTypeObjectRequest::release_policy_type_id() {
  // @@protoc_insertion_point(field_release:onos.a1t.admin.GetPolicyTypeObjectRequest.policy_type_id)
  return policy_type_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetPolicyTypeObjectRequest::set_allocated_policy_type_id(std::string* policy_type_id) {
  if (policy_type_id != nullptr) {
    
  } else {
    
  }
  policy_type_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), policy_type_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (policy_type_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    policy_type_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.admin.GetPolicyTypeObjectRequest.policy_type_id)
}

// -------------------------------------------------------------------

// GetPolicyTypeObjectResponse

// string policy_type_id = 1;
inline void GetPolicyTypeObjectResponse::clear_policy_type_id() {
  policy_type_id_.ClearToEmpty();
}
inline const std::string& GetPolicyTypeObjectResponse::policy_type_id() const {
  // @@protoc_insertion_point(field_get:onos.a1t.admin.GetPolicyTypeObjectResponse.policy_type_id)
  return _internal_policy_type_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPolicyTypeObjectResponse::set_policy_type_id(ArgT0&& arg0, ArgT... args) {
 
 policy_type_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.a1t.admin.GetPolicyTypeObjectResponse.policy_type_id)
}
inline std::string* GetPolicyTypeObjectResponse::mutable_policy_type_id() {
  std::string* _s = _internal_mutable_policy_type_id();
  // @@protoc_insertion_point(field_mutable:onos.a1t.admin.GetPolicyTypeObjectResponse.policy_type_id)
  return _s;
}
inline const std::string& GetPolicyTypeObjectResponse::_internal_policy_type_id() const {
  return policy_type_id_.Get();
}
inline void GetPolicyTypeObjectResponse::_internal_set_policy_type_id(const std::string& value) {
  
  policy_type_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetPolicyTypeObjectResponse::_internal_mutable_policy_type_id() {
  
  return policy_type_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetPolicyTypeObjectResponse::release_policy_type_id() {
  // @@protoc_insertion_point(field_release:onos.a1t.admin.GetPolicyTypeObjectResponse.policy_type_id)
  return policy_type_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetPolicyTypeObjectResponse::set_allocated_policy_type_id(std::string* policy_type_id) {
  if (policy_type_id != nullptr) {
    
  } else {
    
  }
  policy_type_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), policy_type_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (policy_type_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    policy_type_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.admin.GetPolicyTypeObjectResponse.policy_type_id)
}

// repeated string policy_ids = 2;
inline int GetPolicyTypeObjectResponse::_internal_policy_ids_size() const {
  return policy_ids_.size();
}
inline int GetPolicyTypeObjectResponse::policy_ids_size() const {
  return _internal_policy_ids_size();
}
inline void GetPolicyTypeObjectResponse::clear_policy_ids() {
  policy_ids_.Clear();
}
inline std::string* GetPolicyTypeObjectResponse::add_policy_ids() {
  std::string* _s = _internal_add_policy_ids();
  // @@protoc_insertion_point(field_add_mutable:onos.a1t.admin.GetPolicyTypeObjectResponse.policy_ids)
  return _s;
}
inline const std::string& GetPolicyTypeObjectResponse::_internal_policy_ids(int index) const {
  return policy_ids_.Get(index);
}
inline const std::string& GetPolicyTypeObjectResponse::policy_ids(int index) const {
  // @@protoc_insertion_point(field_get:onos.a1t.admin.GetPolicyTypeObjectResponse.policy_ids)
  return _internal_policy_ids(index);
}
inline std::string* GetPolicyTypeObjectResponse::mutable_policy_ids(int index) {
  // @@protoc_insertion_point(field_mutable:onos.a1t.admin.GetPolicyTypeObjectResponse.policy_ids)
  return policy_ids_.Mutable(index);
}
inline void GetPolicyTypeObjectResponse::set_policy_ids(int index, const std::string& value) {
  policy_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:onos.a1t.admin.GetPolicyTypeObjectResponse.policy_ids)
}
inline void GetPolicyTypeObjectResponse::set_policy_ids(int index, std::string&& value) {
  policy_ids_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:onos.a1t.admin.GetPolicyTypeObjectResponse.policy_ids)
}
inline void GetPolicyTypeObjectResponse::set_policy_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  policy_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:onos.a1t.admin.GetPolicyTypeObjectResponse.policy_ids)
}
inline void GetPolicyTypeObjectResponse::set_policy_ids(int index, const char* value, size_t size) {
  policy_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onos.a1t.admin.GetPolicyTypeObjectResponse.policy_ids)
}
inline std::string* GetPolicyTypeObjectResponse::_internal_add_policy_ids() {
  return policy_ids_.Add();
}
inline void GetPolicyTypeObjectResponse::add_policy_ids(const std::string& value) {
  policy_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:onos.a1t.admin.GetPolicyTypeObjectResponse.policy_ids)
}
inline void GetPolicyTypeObjectResponse::add_policy_ids(std::string&& value) {
  policy_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:onos.a1t.admin.GetPolicyTypeObjectResponse.policy_ids)
}
inline void GetPolicyTypeObjectResponse::add_policy_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  policy_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:onos.a1t.admin.GetPolicyTypeObjectResponse.policy_ids)
}
inline void GetPolicyTypeObjectResponse::add_policy_ids(const char* value, size_t size) {
  policy_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:onos.a1t.admin.GetPolicyTypeObjectResponse.policy_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetPolicyTypeObjectResponse::policy_ids() const {
  // @@protoc_insertion_point(field_list:onos.a1t.admin.GetPolicyTypeObjectResponse.policy_ids)
  return policy_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetPolicyTypeObjectResponse::mutable_policy_ids() {
  // @@protoc_insertion_point(field_mutable_list:onos.a1t.admin.GetPolicyTypeObjectResponse.policy_ids)
  return &policy_ids_;
}

// string policy_type_object = 3;
inline void GetPolicyTypeObjectResponse::clear_policy_type_object() {
  policy_type_object_.ClearToEmpty();
}
inline const std::string& GetPolicyTypeObjectResponse::policy_type_object() const {
  // @@protoc_insertion_point(field_get:onos.a1t.admin.GetPolicyTypeObjectResponse.policy_type_object)
  return _internal_policy_type_object();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPolicyTypeObjectResponse::set_policy_type_object(ArgT0&& arg0, ArgT... args) {
 
 policy_type_object_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.a1t.admin.GetPolicyTypeObjectResponse.policy_type_object)
}
inline std::string* GetPolicyTypeObjectResponse::mutable_policy_type_object() {
  std::string* _s = _internal_mutable_policy_type_object();
  // @@protoc_insertion_point(field_mutable:onos.a1t.admin.GetPolicyTypeObjectResponse.policy_type_object)
  return _s;
}
inline const std::string& GetPolicyTypeObjectResponse::_internal_policy_type_object() const {
  return policy_type_object_.Get();
}
inline void GetPolicyTypeObjectResponse::_internal_set_policy_type_object(const std::string& value) {
  
  policy_type_object_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetPolicyTypeObjectResponse::_internal_mutable_policy_type_object() {
  
  return policy_type_object_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetPolicyTypeObjectResponse::release_policy_type_object() {
  // @@protoc_insertion_point(field_release:onos.a1t.admin.GetPolicyTypeObjectResponse.policy_type_object)
  return policy_type_object_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetPolicyTypeObjectResponse::set_allocated_policy_type_object(std::string* policy_type_object) {
  if (policy_type_object != nullptr) {
    
  } else {
    
  }
  policy_type_object_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), policy_type_object,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (policy_type_object_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    policy_type_object_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.admin.GetPolicyTypeObjectResponse.policy_type_object)
}

// -------------------------------------------------------------------

// GetPolicyObjectRequest

// string policy_type_id = 1;
inline void GetPolicyObjectRequest::clear_policy_type_id() {
  policy_type_id_.ClearToEmpty();
}
inline const std::string& GetPolicyObjectRequest::policy_type_id() const {
  // @@protoc_insertion_point(field_get:onos.a1t.admin.GetPolicyObjectRequest.policy_type_id)
  return _internal_policy_type_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPolicyObjectRequest::set_policy_type_id(ArgT0&& arg0, ArgT... args) {
 
 policy_type_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.a1t.admin.GetPolicyObjectRequest.policy_type_id)
}
inline std::string* GetPolicyObjectRequest::mutable_policy_type_id() {
  std::string* _s = _internal_mutable_policy_type_id();
  // @@protoc_insertion_point(field_mutable:onos.a1t.admin.GetPolicyObjectRequest.policy_type_id)
  return _s;
}
inline const std::string& GetPolicyObjectRequest::_internal_policy_type_id() const {
  return policy_type_id_.Get();
}
inline void GetPolicyObjectRequest::_internal_set_policy_type_id(const std::string& value) {
  
  policy_type_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetPolicyObjectRequest::_internal_mutable_policy_type_id() {
  
  return policy_type_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetPolicyObjectRequest::release_policy_type_id() {
  // @@protoc_insertion_point(field_release:onos.a1t.admin.GetPolicyObjectRequest.policy_type_id)
  return policy_type_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetPolicyObjectRequest::set_allocated_policy_type_id(std::string* policy_type_id) {
  if (policy_type_id != nullptr) {
    
  } else {
    
  }
  policy_type_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), policy_type_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (policy_type_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    policy_type_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.admin.GetPolicyObjectRequest.policy_type_id)
}

// string policy_object_id = 2;
inline void GetPolicyObjectRequest::clear_policy_object_id() {
  policy_object_id_.ClearToEmpty();
}
inline const std::string& GetPolicyObjectRequest::policy_object_id() const {
  // @@protoc_insertion_point(field_get:onos.a1t.admin.GetPolicyObjectRequest.policy_object_id)
  return _internal_policy_object_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPolicyObjectRequest::set_policy_object_id(ArgT0&& arg0, ArgT... args) {
 
 policy_object_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.a1t.admin.GetPolicyObjectRequest.policy_object_id)
}
inline std::string* GetPolicyObjectRequest::mutable_policy_object_id() {
  std::string* _s = _internal_mutable_policy_object_id();
  // @@protoc_insertion_point(field_mutable:onos.a1t.admin.GetPolicyObjectRequest.policy_object_id)
  return _s;
}
inline const std::string& GetPolicyObjectRequest::_internal_policy_object_id() const {
  return policy_object_id_.Get();
}
inline void GetPolicyObjectRequest::_internal_set_policy_object_id(const std::string& value) {
  
  policy_object_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetPolicyObjectRequest::_internal_mutable_policy_object_id() {
  
  return policy_object_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetPolicyObjectRequest::release_policy_object_id() {
  // @@protoc_insertion_point(field_release:onos.a1t.admin.GetPolicyObjectRequest.policy_object_id)
  return policy_object_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetPolicyObjectRequest::set_allocated_policy_object_id(std::string* policy_object_id) {
  if (policy_object_id != nullptr) {
    
  } else {
    
  }
  policy_object_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), policy_object_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (policy_object_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    policy_object_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.admin.GetPolicyObjectRequest.policy_object_id)
}

// -------------------------------------------------------------------

// GetPolicyObjectResponse

// string policy_type_id = 1;
inline void GetPolicyObjectResponse::clear_policy_type_id() {
  policy_type_id_.ClearToEmpty();
}
inline const std::string& GetPolicyObjectResponse::policy_type_id() const {
  // @@protoc_insertion_point(field_get:onos.a1t.admin.GetPolicyObjectResponse.policy_type_id)
  return _internal_policy_type_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPolicyObjectResponse::set_policy_type_id(ArgT0&& arg0, ArgT... args) {
 
 policy_type_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.a1t.admin.GetPolicyObjectResponse.policy_type_id)
}
inline std::string* GetPolicyObjectResponse::mutable_policy_type_id() {
  std::string* _s = _internal_mutable_policy_type_id();
  // @@protoc_insertion_point(field_mutable:onos.a1t.admin.GetPolicyObjectResponse.policy_type_id)
  return _s;
}
inline const std::string& GetPolicyObjectResponse::_internal_policy_type_id() const {
  return policy_type_id_.Get();
}
inline void GetPolicyObjectResponse::_internal_set_policy_type_id(const std::string& value) {
  
  policy_type_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetPolicyObjectResponse::_internal_mutable_policy_type_id() {
  
  return policy_type_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetPolicyObjectResponse::release_policy_type_id() {
  // @@protoc_insertion_point(field_release:onos.a1t.admin.GetPolicyObjectResponse.policy_type_id)
  return policy_type_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetPolicyObjectResponse::set_allocated_policy_type_id(std::string* policy_type_id) {
  if (policy_type_id != nullptr) {
    
  } else {
    
  }
  policy_type_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), policy_type_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (policy_type_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    policy_type_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.admin.GetPolicyObjectResponse.policy_type_id)
}

// string policy_object_id = 2;
inline void GetPolicyObjectResponse::clear_policy_object_id() {
  policy_object_id_.ClearToEmpty();
}
inline const std::string& GetPolicyObjectResponse::policy_object_id() const {
  // @@protoc_insertion_point(field_get:onos.a1t.admin.GetPolicyObjectResponse.policy_object_id)
  return _internal_policy_object_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPolicyObjectResponse::set_policy_object_id(ArgT0&& arg0, ArgT... args) {
 
 policy_object_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.a1t.admin.GetPolicyObjectResponse.policy_object_id)
}
inline std::string* GetPolicyObjectResponse::mutable_policy_object_id() {
  std::string* _s = _internal_mutable_policy_object_id();
  // @@protoc_insertion_point(field_mutable:onos.a1t.admin.GetPolicyObjectResponse.policy_object_id)
  return _s;
}
inline const std::string& GetPolicyObjectResponse::_internal_policy_object_id() const {
  return policy_object_id_.Get();
}
inline void GetPolicyObjectResponse::_internal_set_policy_object_id(const std::string& value) {
  
  policy_object_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetPolicyObjectResponse::_internal_mutable_policy_object_id() {
  
  return policy_object_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetPolicyObjectResponse::release_policy_object_id() {
  // @@protoc_insertion_point(field_release:onos.a1t.admin.GetPolicyObjectResponse.policy_object_id)
  return policy_object_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetPolicyObjectResponse::set_allocated_policy_object_id(std::string* policy_object_id) {
  if (policy_object_id != nullptr) {
    
  } else {
    
  }
  policy_object_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), policy_object_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (policy_object_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    policy_object_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.admin.GetPolicyObjectResponse.policy_object_id)
}

// string policy_object = 3;
inline void GetPolicyObjectResponse::clear_policy_object() {
  policy_object_.ClearToEmpty();
}
inline const std::string& GetPolicyObjectResponse::policy_object() const {
  // @@protoc_insertion_point(field_get:onos.a1t.admin.GetPolicyObjectResponse.policy_object)
  return _internal_policy_object();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPolicyObjectResponse::set_policy_object(ArgT0&& arg0, ArgT... args) {
 
 policy_object_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.a1t.admin.GetPolicyObjectResponse.policy_object)
}
inline std::string* GetPolicyObjectResponse::mutable_policy_object() {
  std::string* _s = _internal_mutable_policy_object();
  // @@protoc_insertion_point(field_mutable:onos.a1t.admin.GetPolicyObjectResponse.policy_object)
  return _s;
}
inline const std::string& GetPolicyObjectResponse::_internal_policy_object() const {
  return policy_object_.Get();
}
inline void GetPolicyObjectResponse::_internal_set_policy_object(const std::string& value) {
  
  policy_object_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetPolicyObjectResponse::_internal_mutable_policy_object() {
  
  return policy_object_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetPolicyObjectResponse::release_policy_object() {
  // @@protoc_insertion_point(field_release:onos.a1t.admin.GetPolicyObjectResponse.policy_object)
  return policy_object_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetPolicyObjectResponse::set_allocated_policy_object(std::string* policy_object) {
  if (policy_object != nullptr) {
    
  } else {
    
  }
  policy_object_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), policy_object,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (policy_object_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    policy_object_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.admin.GetPolicyObjectResponse.policy_object)
}

// -------------------------------------------------------------------

// GetPolicyObjectStatusRequest

// string policy_type_id = 1;
inline void GetPolicyObjectStatusRequest::clear_policy_type_id() {
  policy_type_id_.ClearToEmpty();
}
inline const std::string& GetPolicyObjectStatusRequest::policy_type_id() const {
  // @@protoc_insertion_point(field_get:onos.a1t.admin.GetPolicyObjectStatusRequest.policy_type_id)
  return _internal_policy_type_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPolicyObjectStatusRequest::set_policy_type_id(ArgT0&& arg0, ArgT... args) {
 
 policy_type_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.a1t.admin.GetPolicyObjectStatusRequest.policy_type_id)
}
inline std::string* GetPolicyObjectStatusRequest::mutable_policy_type_id() {
  std::string* _s = _internal_mutable_policy_type_id();
  // @@protoc_insertion_point(field_mutable:onos.a1t.admin.GetPolicyObjectStatusRequest.policy_type_id)
  return _s;
}
inline const std::string& GetPolicyObjectStatusRequest::_internal_policy_type_id() const {
  return policy_type_id_.Get();
}
inline void GetPolicyObjectStatusRequest::_internal_set_policy_type_id(const std::string& value) {
  
  policy_type_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetPolicyObjectStatusRequest::_internal_mutable_policy_type_id() {
  
  return policy_type_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetPolicyObjectStatusRequest::release_policy_type_id() {
  // @@protoc_insertion_point(field_release:onos.a1t.admin.GetPolicyObjectStatusRequest.policy_type_id)
  return policy_type_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetPolicyObjectStatusRequest::set_allocated_policy_type_id(std::string* policy_type_id) {
  if (policy_type_id != nullptr) {
    
  } else {
    
  }
  policy_type_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), policy_type_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (policy_type_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    policy_type_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.admin.GetPolicyObjectStatusRequest.policy_type_id)
}

// string policy_object_id = 2;
inline void GetPolicyObjectStatusRequest::clear_policy_object_id() {
  policy_object_id_.ClearToEmpty();
}
inline const std::string& GetPolicyObjectStatusRequest::policy_object_id() const {
  // @@protoc_insertion_point(field_get:onos.a1t.admin.GetPolicyObjectStatusRequest.policy_object_id)
  return _internal_policy_object_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPolicyObjectStatusRequest::set_policy_object_id(ArgT0&& arg0, ArgT... args) {
 
 policy_object_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.a1t.admin.GetPolicyObjectStatusRequest.policy_object_id)
}
inline std::string* GetPolicyObjectStatusRequest::mutable_policy_object_id() {
  std::string* _s = _internal_mutable_policy_object_id();
  // @@protoc_insertion_point(field_mutable:onos.a1t.admin.GetPolicyObjectStatusRequest.policy_object_id)
  return _s;
}
inline const std::string& GetPolicyObjectStatusRequest::_internal_policy_object_id() const {
  return policy_object_id_.Get();
}
inline void GetPolicyObjectStatusRequest::_internal_set_policy_object_id(const std::string& value) {
  
  policy_object_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetPolicyObjectStatusRequest::_internal_mutable_policy_object_id() {
  
  return policy_object_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetPolicyObjectStatusRequest::release_policy_object_id() {
  // @@protoc_insertion_point(field_release:onos.a1t.admin.GetPolicyObjectStatusRequest.policy_object_id)
  return policy_object_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetPolicyObjectStatusRequest::set_allocated_policy_object_id(std::string* policy_object_id) {
  if (policy_object_id != nullptr) {
    
  } else {
    
  }
  policy_object_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), policy_object_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (policy_object_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    policy_object_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.admin.GetPolicyObjectStatusRequest.policy_object_id)
}

// -------------------------------------------------------------------

// GetPolicyObjectStatusResponse

// string policy_type_id = 1;
inline void GetPolicyObjectStatusResponse::clear_policy_type_id() {
  policy_type_id_.ClearToEmpty();
}
inline const std::string& GetPolicyObjectStatusResponse::policy_type_id() const {
  // @@protoc_insertion_point(field_get:onos.a1t.admin.GetPolicyObjectStatusResponse.policy_type_id)
  return _internal_policy_type_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPolicyObjectStatusResponse::set_policy_type_id(ArgT0&& arg0, ArgT... args) {
 
 policy_type_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.a1t.admin.GetPolicyObjectStatusResponse.policy_type_id)
}
inline std::string* GetPolicyObjectStatusResponse::mutable_policy_type_id() {
  std::string* _s = _internal_mutable_policy_type_id();
  // @@protoc_insertion_point(field_mutable:onos.a1t.admin.GetPolicyObjectStatusResponse.policy_type_id)
  return _s;
}
inline const std::string& GetPolicyObjectStatusResponse::_internal_policy_type_id() const {
  return policy_type_id_.Get();
}
inline void GetPolicyObjectStatusResponse::_internal_set_policy_type_id(const std::string& value) {
  
  policy_type_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetPolicyObjectStatusResponse::_internal_mutable_policy_type_id() {
  
  return policy_type_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetPolicyObjectStatusResponse::release_policy_type_id() {
  // @@protoc_insertion_point(field_release:onos.a1t.admin.GetPolicyObjectStatusResponse.policy_type_id)
  return policy_type_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetPolicyObjectStatusResponse::set_allocated_policy_type_id(std::string* policy_type_id) {
  if (policy_type_id != nullptr) {
    
  } else {
    
  }
  policy_type_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), policy_type_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (policy_type_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    policy_type_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.admin.GetPolicyObjectStatusResponse.policy_type_id)
}

// string policy_object_id = 2;
inline void GetPolicyObjectStatusResponse::clear_policy_object_id() {
  policy_object_id_.ClearToEmpty();
}
inline const std::string& GetPolicyObjectStatusResponse::policy_object_id() const {
  // @@protoc_insertion_point(field_get:onos.a1t.admin.GetPolicyObjectStatusResponse.policy_object_id)
  return _internal_policy_object_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPolicyObjectStatusResponse::set_policy_object_id(ArgT0&& arg0, ArgT... args) {
 
 policy_object_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.a1t.admin.GetPolicyObjectStatusResponse.policy_object_id)
}
inline std::string* GetPolicyObjectStatusResponse::mutable_policy_object_id() {
  std::string* _s = _internal_mutable_policy_object_id();
  // @@protoc_insertion_point(field_mutable:onos.a1t.admin.GetPolicyObjectStatusResponse.policy_object_id)
  return _s;
}
inline const std::string& GetPolicyObjectStatusResponse::_internal_policy_object_id() const {
  return policy_object_id_.Get();
}
inline void GetPolicyObjectStatusResponse::_internal_set_policy_object_id(const std::string& value) {
  
  policy_object_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetPolicyObjectStatusResponse::_internal_mutable_policy_object_id() {
  
  return policy_object_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetPolicyObjectStatusResponse::release_policy_object_id() {
  // @@protoc_insertion_point(field_release:onos.a1t.admin.GetPolicyObjectStatusResponse.policy_object_id)
  return policy_object_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetPolicyObjectStatusResponse::set_allocated_policy_object_id(std::string* policy_object_id) {
  if (policy_object_id != nullptr) {
    
  } else {
    
  }
  policy_object_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), policy_object_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (policy_object_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    policy_object_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.admin.GetPolicyObjectStatusResponse.policy_object_id)
}

// string policy_object_status = 3;
inline void GetPolicyObjectStatusResponse::clear_policy_object_status() {
  policy_object_status_.ClearToEmpty();
}
inline const std::string& GetPolicyObjectStatusResponse::policy_object_status() const {
  // @@protoc_insertion_point(field_get:onos.a1t.admin.GetPolicyObjectStatusResponse.policy_object_status)
  return _internal_policy_object_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetPolicyObjectStatusResponse::set_policy_object_status(ArgT0&& arg0, ArgT... args) {
 
 policy_object_status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.a1t.admin.GetPolicyObjectStatusResponse.policy_object_status)
}
inline std::string* GetPolicyObjectStatusResponse::mutable_policy_object_status() {
  std::string* _s = _internal_mutable_policy_object_status();
  // @@protoc_insertion_point(field_mutable:onos.a1t.admin.GetPolicyObjectStatusResponse.policy_object_status)
  return _s;
}
inline const std::string& GetPolicyObjectStatusResponse::_internal_policy_object_status() const {
  return policy_object_status_.Get();
}
inline void GetPolicyObjectStatusResponse::_internal_set_policy_object_status(const std::string& value) {
  
  policy_object_status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetPolicyObjectStatusResponse::_internal_mutable_policy_object_status() {
  
  return policy_object_status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetPolicyObjectStatusResponse::release_policy_object_status() {
  // @@protoc_insertion_point(field_release:onos.a1t.admin.GetPolicyObjectStatusResponse.policy_object_status)
  return policy_object_status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetPolicyObjectStatusResponse::set_allocated_policy_object_status(std::string* policy_object_status) {
  if (policy_object_status != nullptr) {
    
  } else {
    
  }
  policy_object_status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), policy_object_status,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (policy_object_status_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    policy_object_status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.a1t.admin.GetPolicyObjectStatusResponse.policy_object_status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace admin
}  // namespace a1t
}  // namespace onos

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_onos_2fa1t_2fadmin_2fadmin_2eproto
