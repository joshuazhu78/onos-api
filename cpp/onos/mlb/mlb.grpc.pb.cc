// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: onos/mlb/mlb.proto

#include "onos/mlb/mlb.pb.h"
#include "onos/mlb/mlb.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace onos {
namespace mlb {

static const char* Mlb_method_names[] = {
  "/onos.mlb.Mlb/GetMlbParams",
  "/onos.mlb.Mlb/SetMlbParams",
  "/onos.mlb.Mlb/GetOcn",
};

std::unique_ptr< Mlb::Stub> Mlb::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Mlb::Stub> stub(new Mlb::Stub(channel, options));
  return stub;
}

Mlb::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetMlbParams_(Mlb_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetMlbParams_(Mlb_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOcn_(Mlb_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Mlb::Stub::GetMlbParams(::grpc::ClientContext* context, const ::onos::mlb::GetMlbParamRequest& request, ::onos::mlb::GetMlbParamResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::mlb::GetMlbParamRequest, ::onos::mlb::GetMlbParamResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetMlbParams_, context, request, response);
}

void Mlb::Stub::async::GetMlbParams(::grpc::ClientContext* context, const ::onos::mlb::GetMlbParamRequest* request, ::onos::mlb::GetMlbParamResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::mlb::GetMlbParamRequest, ::onos::mlb::GetMlbParamResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMlbParams_, context, request, response, std::move(f));
}

void Mlb::Stub::async::GetMlbParams(::grpc::ClientContext* context, const ::onos::mlb::GetMlbParamRequest* request, ::onos::mlb::GetMlbParamResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetMlbParams_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::mlb::GetMlbParamResponse>* Mlb::Stub::PrepareAsyncGetMlbParamsRaw(::grpc::ClientContext* context, const ::onos::mlb::GetMlbParamRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::mlb::GetMlbParamResponse, ::onos::mlb::GetMlbParamRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetMlbParams_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::mlb::GetMlbParamResponse>* Mlb::Stub::AsyncGetMlbParamsRaw(::grpc::ClientContext* context, const ::onos::mlb::GetMlbParamRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetMlbParamsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Mlb::Stub::SetMlbParams(::grpc::ClientContext* context, const ::onos::mlb::SetMlbParamRequest& request, ::onos::mlb::SetMlbParamResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::mlb::SetMlbParamRequest, ::onos::mlb::SetMlbParamResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetMlbParams_, context, request, response);
}

void Mlb::Stub::async::SetMlbParams(::grpc::ClientContext* context, const ::onos::mlb::SetMlbParamRequest* request, ::onos::mlb::SetMlbParamResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::mlb::SetMlbParamRequest, ::onos::mlb::SetMlbParamResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetMlbParams_, context, request, response, std::move(f));
}

void Mlb::Stub::async::SetMlbParams(::grpc::ClientContext* context, const ::onos::mlb::SetMlbParamRequest* request, ::onos::mlb::SetMlbParamResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetMlbParams_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::mlb::SetMlbParamResponse>* Mlb::Stub::PrepareAsyncSetMlbParamsRaw(::grpc::ClientContext* context, const ::onos::mlb::SetMlbParamRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::mlb::SetMlbParamResponse, ::onos::mlb::SetMlbParamRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetMlbParams_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::mlb::SetMlbParamResponse>* Mlb::Stub::AsyncSetMlbParamsRaw(::grpc::ClientContext* context, const ::onos::mlb::SetMlbParamRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetMlbParamsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Mlb::Stub::GetOcn(::grpc::ClientContext* context, const ::onos::mlb::GetOcnRequest& request, ::onos::mlb::GetOcnResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::mlb::GetOcnRequest, ::onos::mlb::GetOcnResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetOcn_, context, request, response);
}

void Mlb::Stub::async::GetOcn(::grpc::ClientContext* context, const ::onos::mlb::GetOcnRequest* request, ::onos::mlb::GetOcnResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::mlb::GetOcnRequest, ::onos::mlb::GetOcnResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOcn_, context, request, response, std::move(f));
}

void Mlb::Stub::async::GetOcn(::grpc::ClientContext* context, const ::onos::mlb::GetOcnRequest* request, ::onos::mlb::GetOcnResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOcn_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::mlb::GetOcnResponse>* Mlb::Stub::PrepareAsyncGetOcnRaw(::grpc::ClientContext* context, const ::onos::mlb::GetOcnRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::mlb::GetOcnResponse, ::onos::mlb::GetOcnRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetOcn_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::mlb::GetOcnResponse>* Mlb::Stub::AsyncGetOcnRaw(::grpc::ClientContext* context, const ::onos::mlb::GetOcnRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetOcnRaw(context, request, cq);
  result->StartCall();
  return result;
}

Mlb::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Mlb_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Mlb::Service, ::onos::mlb::GetMlbParamRequest, ::onos::mlb::GetMlbParamResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Mlb::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::mlb::GetMlbParamRequest* req,
             ::onos::mlb::GetMlbParamResponse* resp) {
               return service->GetMlbParams(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Mlb_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Mlb::Service, ::onos::mlb::SetMlbParamRequest, ::onos::mlb::SetMlbParamResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Mlb::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::mlb::SetMlbParamRequest* req,
             ::onos::mlb::SetMlbParamResponse* resp) {
               return service->SetMlbParams(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Mlb_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Mlb::Service, ::onos::mlb::GetOcnRequest, ::onos::mlb::GetOcnResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Mlb::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::mlb::GetOcnRequest* req,
             ::onos::mlb::GetOcnResponse* resp) {
               return service->GetOcn(ctx, req, resp);
             }, this)));
}

Mlb::Service::~Service() {
}

::grpc::Status Mlb::Service::GetMlbParams(::grpc::ServerContext* context, const ::onos::mlb::GetMlbParamRequest* request, ::onos::mlb::GetMlbParamResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Mlb::Service::SetMlbParams(::grpc::ServerContext* context, const ::onos::mlb::SetMlbParamRequest* request, ::onos::mlb::SetMlbParamResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Mlb::Service::GetOcn(::grpc::ServerContext* context, const ::onos::mlb::GetOcnRequest* request, ::onos::mlb::GetOcnResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace onos
}  // namespace mlb

