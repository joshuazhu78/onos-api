// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onos/ransim/types/types.proto

#include "onos/ransim/types/types.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace onos {
namespace ransim {
namespace types {
constexpr Point::Point(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lat_(0)
  , lng_(0){}
struct PointDefaultTypeInternal {
  constexpr PointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PointDefaultTypeInternal() {}
  union {
    Point _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PointDefaultTypeInternal _Point_default_instance_;
constexpr Sector::Sector(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : centroid_(nullptr)
  , azimuth_(0)
  , arc_(0)
  , height_(0)
  , tilt_(0){}
struct SectorDefaultTypeInternal {
  constexpr SectorDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SectorDefaultTypeInternal() {}
  union {
    Sector _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SectorDefaultTypeInternal _Sector_default_instance_;
constexpr Route::Route(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : waypoints_()
  , color_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(uint64_t{0u})
  , speed_avg_(0u)
  , speed_stdev_(0u)
  , reverse_(false)
  , next_point_(0u){}
struct RouteDefaultTypeInternal {
  constexpr RouteDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RouteDefaultTypeInternal() {}
  union {
    Route _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RouteDefaultTypeInternal _Route_default_instance_;
constexpr Ue::Ue(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , position_(nullptr)
  , metrics_(nullptr)
  , ueid_(nullptr)
  , imsi_(uint64_t{0u})
  , serving_tower_(uint64_t{0u})
  , serving_tower_strength_(0)
  , tower1_(uint64_t{0u})
  , tower1_strength_(0)
  , rotation_(0u)
  , crnti_(0u)
  , tower2_(uint64_t{0u})
  , tower2_strength_(0)
  , tower3_(uint64_t{0u})
  , tower3_strength_(0)
  , admitted_(false)
  , rrc_state_(0u)
  , five_qi_(0)
  , serving_tower_geometry_(0){}
struct UeDefaultTypeInternal {
  constexpr UeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UeDefaultTypeInternal() {}
  union {
    Ue _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UeDefaultTypeInternal _Ue_default_instance_;
constexpr UeIdentity::UeIdentity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : guami_(nullptr)
  , amf_ue_ngap_id_(uint64_t{0u}){}
struct UeIdentityDefaultTypeInternal {
  constexpr UeIdentityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UeIdentityDefaultTypeInternal() {}
  union {
    UeIdentity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UeIdentityDefaultTypeInternal _UeIdentity_default_instance_;
constexpr Guami::Guami(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : plmnid_(0u)
  , amf_region_id_(0u)
  , amf_set_id_(0u)
  , amf_pointer_(0u){}
struct GuamiDefaultTypeInternal {
  constexpr GuamiDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GuamiDefaultTypeInternal() {}
  union {
    Guami _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GuamiDefaultTypeInternal _Guami_default_instance_;
constexpr UeMetrics::UeMetrics(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ho_latency_(int64_t{0})
  , ho_report_timestamp_(int64_t{0})
  , is_first_(false){}
struct UeMetricsDefaultTypeInternal {
  constexpr UeMetricsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UeMetricsDefaultTypeInternal() {}
  union {
    UeMetrics _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UeMetricsDefaultTypeInternal _UeMetrics_default_instance_;
constexpr Cell_CrntiMapEntry_DoNotUse::Cell_CrntiMapEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Cell_CrntiMapEntry_DoNotUseDefaultTypeInternal {
  constexpr Cell_CrntiMapEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Cell_CrntiMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Cell_CrntiMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Cell_CrntiMapEntry_DoNotUseDefaultTypeInternal _Cell_CrntiMapEntry_DoNotUse_default_instance_;
constexpr Cell::Cell(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : neighbors_()
  , _neighbors_cached_byte_size_(0)
  , crnti_map_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , color_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , location_(nullptr)
  , sector_(nullptr)
  , measurement_params_(nullptr)
  , ecgi_(uint64_t{0u})
  , tx_power_db_(0)
  , max_ues_(0u)
  , crnti_index_(0u)
  , port_(0u)
  , pci_(0u)
  , earfcn_(0u)
  , cell_type_(0)

  , rrc_idle_count_(0u)
  , rrc_connected_count_(0u){}
struct CellDefaultTypeInternal {
  constexpr CellDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CellDefaultTypeInternal() {}
  union {
    Cell _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CellDefaultTypeInternal _Cell_default_instance_;
constexpr MeasurementParams_NcellIndividualOffsetsEntry_DoNotUse::MeasurementParams_NcellIndividualOffsetsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct MeasurementParams_NcellIndividualOffsetsEntry_DoNotUseDefaultTypeInternal {
  constexpr MeasurementParams_NcellIndividualOffsetsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MeasurementParams_NcellIndividualOffsetsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    MeasurementParams_NcellIndividualOffsetsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MeasurementParams_NcellIndividualOffsetsEntry_DoNotUseDefaultTypeInternal _MeasurementParams_NcellIndividualOffsetsEntry_DoNotUse_default_instance_;
constexpr MeasurementParams::MeasurementParams(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ncell_individual_offsets_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , event_a3_params_(nullptr)
  , time_to_trigger_(0)
  , frequency_offset_(0)
  , pcell_individual_offset_(0)
  , hysteresis_(0){}
struct MeasurementParamsDefaultTypeInternal {
  constexpr MeasurementParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MeasurementParamsDefaultTypeInternal() {}
  union {
    MeasurementParams _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MeasurementParamsDefaultTypeInternal _MeasurementParams_default_instance_;
constexpr EventA3Params::EventA3Params(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : a3_offset_(0)
  , report_on_leave_(false){}
struct EventA3ParamsDefaultTypeInternal {
  constexpr EventA3ParamsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EventA3ParamsDefaultTypeInternal() {}
  union {
    EventA3Params _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EventA3ParamsDefaultTypeInternal _EventA3Params_default_instance_;
constexpr Node::Node(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : controllers_()
  , service_models_()
  , cell_ecgis_()
  , _cell_ecgis_cached_byte_size_(0)
  , status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , enbid_(0u){}
struct NodeDefaultTypeInternal {
  constexpr NodeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NodeDefaultTypeInternal() {}
  union {
    Node _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NodeDefaultTypeInternal _Node_default_instance_;
constexpr MapLayout::MapLayout(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : center_(nullptr)
  , zoom_(0)
  , fade_(false)
  , show_routes_(false)
  , show_power_(false)
  , min_ues_(0u)
  , max_ues_(0u)
  , current_routes_(0u)
  , locations_scale_(0){}
struct MapLayoutDefaultTypeInternal {
  constexpr MapLayoutDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MapLayoutDefaultTypeInternal() {}
  union {
    MapLayout _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MapLayoutDefaultTypeInternal _MapLayout_default_instance_;
}  // namespace types
}  // namespace ransim
}  // namespace onos
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_onos_2fransim_2ftypes_2ftypes_2eproto[14];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_onos_2fransim_2ftypes_2ftypes_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_onos_2fransim_2ftypes_2ftypes_2eproto = nullptr;

const uint32_t TableStruct_onos_2fransim_2ftypes_2ftypes_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Point, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Point, lat_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Point, lng_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Sector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Sector, azimuth_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Sector, arc_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Sector, centroid_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Sector, height_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Sector, tilt_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Route, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Route, name_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Route, waypoints_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Route, color_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Route, speed_avg_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Route, speed_stdev_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Route, reverse_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Route, next_point_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Ue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Ue, imsi_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Ue, type_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Ue, position_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Ue, rotation_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Ue, serving_tower_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Ue, serving_tower_strength_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Ue, tower1_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Ue, tower1_strength_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Ue, tower2_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Ue, tower2_strength_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Ue, tower3_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Ue, tower3_strength_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Ue, crnti_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Ue, admitted_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Ue, metrics_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Ue, rrc_state_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Ue, five_qi_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Ue, ueid_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Ue, serving_tower_geometry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::UeIdentity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::UeIdentity, guami_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::UeIdentity, amf_ue_ngap_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Guami, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Guami, plmnid_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Guami, amf_region_id_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Guami, amf_set_id_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Guami, amf_pointer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::UeMetrics, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::UeMetrics, ho_latency_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::UeMetrics, ho_report_timestamp_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::UeMetrics, is_first_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Cell_CrntiMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Cell_CrntiMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Cell_CrntiMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Cell_CrntiMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Cell, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Cell, ecgi_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Cell, location_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Cell, sector_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Cell, color_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Cell, max_ues_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Cell, neighbors_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Cell, tx_power_db_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Cell, measurement_params_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Cell, crnti_map_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Cell, crnti_index_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Cell, port_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Cell, pci_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Cell, earfcn_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Cell, cell_type_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Cell, rrc_idle_count_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Cell, rrc_connected_count_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::MeasurementParams_NcellIndividualOffsetsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::MeasurementParams_NcellIndividualOffsetsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::MeasurementParams_NcellIndividualOffsetsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::MeasurementParams_NcellIndividualOffsetsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::MeasurementParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::MeasurementParams, time_to_trigger_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::MeasurementParams, frequency_offset_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::MeasurementParams, pcell_individual_offset_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::MeasurementParams, ncell_individual_offsets_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::MeasurementParams, hysteresis_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::MeasurementParams, event_a3_params_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::EventA3Params, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::EventA3Params, a3_offset_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::EventA3Params, report_on_leave_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Node, enbid_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Node, controllers_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Node, service_models_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Node, cell_ecgis_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::Node, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::MapLayout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::MapLayout, center_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::MapLayout, zoom_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::MapLayout, fade_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::MapLayout, show_routes_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::MapLayout, show_power_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::MapLayout, locations_scale_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::MapLayout, min_ues_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::MapLayout, max_ues_),
  PROTOBUF_FIELD_OFFSET(::onos::ransim::types::MapLayout, current_routes_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::onos::ransim::types::Point)},
  { 8, -1, -1, sizeof(::onos::ransim::types::Sector)},
  { 19, -1, -1, sizeof(::onos::ransim::types::Route)},
  { 32, -1, -1, sizeof(::onos::ransim::types::Ue)},
  { 57, -1, -1, sizeof(::onos::ransim::types::UeIdentity)},
  { 65, -1, -1, sizeof(::onos::ransim::types::Guami)},
  { 75, -1, -1, sizeof(::onos::ransim::types::UeMetrics)},
  { 84, 92, -1, sizeof(::onos::ransim::types::Cell_CrntiMapEntry_DoNotUse)},
  { 94, -1, -1, sizeof(::onos::ransim::types::Cell)},
  { 116, 124, -1, sizeof(::onos::ransim::types::MeasurementParams_NcellIndividualOffsetsEntry_DoNotUse)},
  { 126, -1, -1, sizeof(::onos::ransim::types::MeasurementParams)},
  { 138, -1, -1, sizeof(::onos::ransim::types::EventA3Params)},
  { 146, -1, -1, sizeof(::onos::ransim::types::Node)},
  { 157, -1, -1, sizeof(::onos::ransim::types::MapLayout)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::ransim::types::_Point_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::ransim::types::_Sector_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::ransim::types::_Route_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::ransim::types::_Ue_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::ransim::types::_UeIdentity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::ransim::types::_Guami_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::ransim::types::_UeMetrics_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::ransim::types::_Cell_CrntiMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::ransim::types::_Cell_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::ransim::types::_MeasurementParams_NcellIndividualOffsetsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::ransim::types::_MeasurementParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::ransim::types::_EventA3Params_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::ransim::types::_Node_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::ransim::types::_MapLayout_default_instance_),
};

const char descriptor_table_protodef_onos_2fransim_2ftypes_2ftypes_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\035onos/ransim/types/types.proto\022\021onos.ra"
  "nsim.types\032\024gogoproto/gogo.proto\"!\n\005Poin"
  "t\022\013\n\003lat\030\001 \001(\001\022\013\n\003lng\030\002 \001(\001\"p\n\006Sector\022\017\n"
  "\007azimuth\030\001 \001(\005\022\013\n\003arc\030\002 \001(\005\022*\n\010centroid\030"
  "\003 \001(\0132\030.onos.ransim.types.Point\022\016\n\006heigh"
  "t\030\004 \001(\005\022\014\n\004tilt\030\005 \001(\005\"\263\001\n\005Route\022!\n\004name\030"
  "\001 \001(\004B\023\342\336\037\007RouteID\372\336\037\004IMSI\022+\n\twaypoints\030"
  "\002 \003(\0132\030.onos.ransim.types.Point\022\r\n\005color"
  "\030\003 \001(\t\022\021\n\tspeed_avg\030\004 \001(\r\022\023\n\013speed_stdev"
  "\030\005 \001(\r\022\017\n\007reverse\030\006 \001(\010\022\022\n\nnext_point\030\007 "
  "\001(\r\"\237\004\n\002Ue\022\036\n\004imsi\030\001 \001(\004B\020\342\336\037\004IMSI\372\336\037\004IM"
  "SI\022\014\n\004type\030\002 \001(\t\022*\n\010position\030\004 \001(\0132\030.ono"
  "s.ransim.types.Point\022\020\n\010rotation\030\005 \001(\r\022\037"
  "\n\rserving_tower\030\007 \001(\004B\010\372\336\037\004NCGI\022\036\n\026servi"
  "ng_tower_strength\030\010 \001(\001\022\030\n\006tower1\030\t \001(\004B"
  "\010\372\336\037\004NCGI\022\027\n\017tower1_strength\030\n \001(\001\022\030\n\006to"
  "wer2\030\013 \001(\004B\010\372\336\037\004NCGI\022\027\n\017tower2_strength\030"
  "\014 \001(\001\022\030\n\006tower3\030\r \001(\004B\010\372\336\037\004NCGI\022\027\n\017tower"
  "3_strength\030\016 \001(\001\022!\n\005crnti\030\017 \001(\rB\022\342\336\037\005CRN"
  "TI\372\336\037\005CRNTI\022\020\n\010admitted\030\020 \001(\010\022-\n\007metrics"
  "\030\021 \001(\0132\034.onos.ransim.types.UeMetrics\022\021\n\t"
  "rrc_state\030\022 \001(\r\022\017\n\007five_qi\030\023 \001(\005\022+\n\004ueid"
  "\030\024 \001(\0132\035.onos.ransim.types.UeIdentity\022\036\n"
  "\026serving_tower_geometry\030\025 \001(\001\"^\n\nUeIdent"
  "ity\022\'\n\005guami\030\001 \001(\0132\030.onos.ransim.types.G"
  "uami\022\'\n\016amf_ue_ngap_id\030\002 \001(\004B\017\372\336\037\013AmfUEN"
  "gapID\"W\n\005Guami\022\016\n\006plmnid\030\001 \001(\r\022\025\n\ramf_re"
  "gion_id\030\002 \001(\r\022\022\n\namf_set_id\030\003 \001(\r\022\023\n\013amf"
  "_pointer\030\004 \001(\r\"N\n\tUeMetrics\022\022\n\nho_latenc"
  "y\030\001 \001(\003\022\033\n\023ho_report_timestamp\030\002 \001(\003\022\020\n\010"
  "is_first\030\003 \001(\010\"\317\004\n\004Cell\022\036\n\004ecgi\030\001 \001(\004B\020\342"
  "\336\037\004NCGI\372\336\037\004NCGI\022*\n\010location\030\003 \001(\0132\030.onos"
  ".ransim.types.Point\022)\n\006sector\030\004 \001(\0132\031.on"
  "os.ransim.types.Sector\022\r\n\005color\030\005 \001(\t\022\033\n"
  "\007max_ues\030\006 \001(\rB\n\342\336\037\006MaxUEs\022\033\n\tneighbors\030"
  "\007 \003(\004B\010\372\336\037\004NCGI\022\"\n\013tx_power_db\030\010 \001(\001B\r\342\336"
  "\037\tTxPowerdB\022@\n\022measurement_params\030\t \001(\0132"
  "$.onos.ransim.types.MeasurementParams\022K\n"
  "\tcrnti_map\030\n \003(\0132%.onos.ransim.types.Cel"
  "l.CrntiMapEntryB\021\202\337\037\005CRNTI\212\337\037\004IMSI\022\023\n\013cr"
  "nti_index\030\013 \001(\r\022\014\n\004port\030\014 \001(\r\022\013\n\003pci\030\r \001"
  "(\r\022\016\n\006earfcn\030\016 \001(\r\022.\n\tcell_type\030\017 \001(\0162\033."
  "onos.ransim.types.CellType\022\026\n\016rrc_idle_c"
  "ount\030\020 \001(\r\022\033\n\023rrc_connected_count\030\021 \001(\r\032"
  "/\n\rCrntiMapEntry\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002"
  " \001(\004:\0028\001\"\343\002\n\021MeasurementParams\022\027\n\017time_t"
  "o_trigger\030\001 \001(\005\022\030\n\020frequency_offset\030\002 \001("
  "\005\022\037\n\027pcell_individual_offset\030\003 \001(\005\022l\n\030nc"
  "ell_individual_offsets\030\004 \003(\0132@.onos.rans"
  "im.types.MeasurementParams.NcellIndividu"
  "alOffsetsEntryB\010\202\337\037\004NCGI\022\022\n\nhysteresis\030\005"
  " \001(\005\0229\n\017event_a3_params\030\006 \001(\0132 .onos.ran"
  "sim.types.EventA3Params\032=\n\033NcellIndividu"
  "alOffsetsEntry\022\013\n\003key\030\001 \001(\004\022\r\n\005value\030\002 \001"
  "(\005:\0028\001\";\n\rEventA3Params\022\021\n\ta3_offset\030\001 \001"
  "(\005\022\027\n\017report_on_leave\030\002 \001(\010\"\221\001\n\004Node\022!\n\005"
  "enbid\030\001 \001(\rB\022\342\336\037\005GnbID\372\336\037\005GnbID\022\023\n\013contr"
  "ollers\030\002 \003(\t\022\026\n\016service_models\030\003 \003(\t\022)\n\n"
  "cell_ecgis\030\004 \003(\004B\025\342\336\037\tCellNCGIs\372\336\037\004NCGI\022"
  "\016\n\006status\030\005 \001(\t\"\315\001\n\tMapLayout\022(\n\006center\030"
  "\001 \001(\0132\030.onos.ransim.types.Point\022\014\n\004zoom\030"
  "\002 \001(\002\022\014\n\004fade\030\003 \001(\010\022\023\n\013show_routes\030\004 \001(\010"
  "\022\022\n\nshow_power\030\005 \001(\010\022\027\n\017locations_scale\030"
  "\t \001(\002\022\017\n\007min_ues\030\006 \001(\r\022\017\n\007max_ues\030\007 \001(\r\022"
  "\026\n\016current_routes\030\010 \001(\r*C\n\010CellType\022\t\n\005F"
  "EMTO\020\000\022\016\n\nENTERPRISE\020\001\022\021\n\rOUTDOOR_SMALL\020"
  "\002\022\t\n\005MACRO\020\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_onos_2fransim_2ftypes_2ftypes_2eproto_deps[1] = {
  &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_onos_2fransim_2ftypes_2ftypes_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_onos_2fransim_2ftypes_2ftypes_2eproto = {
  false, false, 2660, descriptor_table_protodef_onos_2fransim_2ftypes_2ftypes_2eproto, "onos/ransim/types/types.proto", 
  &descriptor_table_onos_2fransim_2ftypes_2ftypes_2eproto_once, descriptor_table_onos_2fransim_2ftypes_2ftypes_2eproto_deps, 1, 14,
  schemas, file_default_instances, TableStruct_onos_2fransim_2ftypes_2ftypes_2eproto::offsets,
  file_level_metadata_onos_2fransim_2ftypes_2ftypes_2eproto, file_level_enum_descriptors_onos_2fransim_2ftypes_2ftypes_2eproto, file_level_service_descriptors_onos_2fransim_2ftypes_2ftypes_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_onos_2fransim_2ftypes_2ftypes_2eproto_getter() {
  return &descriptor_table_onos_2fransim_2ftypes_2ftypes_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_onos_2fransim_2ftypes_2ftypes_2eproto(&descriptor_table_onos_2fransim_2ftypes_2ftypes_2eproto);
namespace onos {
namespace ransim {
namespace types {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CellType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_onos_2fransim_2ftypes_2ftypes_2eproto);
  return file_level_enum_descriptors_onos_2fransim_2ftypes_2ftypes_2eproto[0];
}
bool CellType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Point::_Internal {
 public:
};

Point::Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.ransim.types.Point)
}
Point::Point(const Point& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lat_, &from.lat_,
    static_cast<size_t>(reinterpret_cast<char*>(&lng_) -
    reinterpret_cast<char*>(&lat_)) + sizeof(lng_));
  // @@protoc_insertion_point(copy_constructor:onos.ransim.types.Point)
}

inline void Point::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lat_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lng_) -
    reinterpret_cast<char*>(&lat_)) + sizeof(lng_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:onos.ransim.types.Point)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Point::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Point::ArenaDtor(void* object) {
  Point* _this = reinterpret_cast< Point* >(object);
  (void)_this;
}
void Point::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Point::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.ransim.types.Point)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lng_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(lng_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Point::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double lat = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double lng = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          lng_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Point::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.ransim.types.Point)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double lat = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lat = this->_internal_lat();
  uint64_t raw_lat;
  memcpy(&raw_lat, &tmp_lat, sizeof(tmp_lat));
  if (raw_lat != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_lat(), target);
  }

  // double lng = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lng = this->_internal_lng();
  uint64_t raw_lng;
  memcpy(&raw_lng, &tmp_lng, sizeof(tmp_lng));
  if (raw_lng != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_lng(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.ransim.types.Point)
  return target;
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.ransim.types.Point)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double lat = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lat = this->_internal_lat();
  uint64_t raw_lat;
  memcpy(&raw_lat, &tmp_lat, sizeof(tmp_lat));
  if (raw_lat != 0) {
    total_size += 1 + 8;
  }

  // double lng = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lng = this->_internal_lng();
  uint64_t raw_lng;
  memcpy(&raw_lng, &tmp_lng, sizeof(tmp_lng));
  if (raw_lng != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Point::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Point::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Point::GetClassData() const { return &_class_data_; }

void Point::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Point *>(to)->MergeFrom(
      static_cast<const Point &>(from));
}


void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.ransim.types.Point)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lat = from._internal_lat();
  uint64_t raw_lat;
  memcpy(&raw_lat, &tmp_lat, sizeof(tmp_lat));
  if (raw_lat != 0) {
    _internal_set_lat(from._internal_lat());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lng = from._internal_lng();
  uint64_t raw_lng;
  memcpy(&raw_lng, &tmp_lng, sizeof(tmp_lng));
  if (raw_lng != 0) {
    _internal_set_lng(from._internal_lng());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.ransim.types.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::InternalSwap(Point* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Point, lng_)
      + sizeof(Point::lng_)
      - PROTOBUF_FIELD_OFFSET(Point, lat_)>(
          reinterpret_cast<char*>(&lat_),
          reinterpret_cast<char*>(&other->lat_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Point::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fransim_2ftypes_2ftypes_2eproto_getter, &descriptor_table_onos_2fransim_2ftypes_2ftypes_2eproto_once,
      file_level_metadata_onos_2fransim_2ftypes_2ftypes_2eproto[0]);
}

// ===================================================================

class Sector::_Internal {
 public:
  static const ::onos::ransim::types::Point& centroid(const Sector* msg);
};

const ::onos::ransim::types::Point&
Sector::_Internal::centroid(const Sector* msg) {
  return *msg->centroid_;
}
Sector::Sector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.ransim.types.Sector)
}
Sector::Sector(const Sector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_centroid()) {
    centroid_ = new ::onos::ransim::types::Point(*from.centroid_);
  } else {
    centroid_ = nullptr;
  }
  ::memcpy(&azimuth_, &from.azimuth_,
    static_cast<size_t>(reinterpret_cast<char*>(&tilt_) -
    reinterpret_cast<char*>(&azimuth_)) + sizeof(tilt_));
  // @@protoc_insertion_point(copy_constructor:onos.ransim.types.Sector)
}

inline void Sector::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&centroid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tilt_) -
    reinterpret_cast<char*>(&centroid_)) + sizeof(tilt_));
}

Sector::~Sector() {
  // @@protoc_insertion_point(destructor:onos.ransim.types.Sector)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Sector::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete centroid_;
}

void Sector::ArenaDtor(void* object) {
  Sector* _this = reinterpret_cast< Sector* >(object);
  (void)_this;
}
void Sector::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Sector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Sector::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.ransim.types.Sector)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && centroid_ != nullptr) {
    delete centroid_;
  }
  centroid_ = nullptr;
  ::memset(&azimuth_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tilt_) -
      reinterpret_cast<char*>(&azimuth_)) + sizeof(tilt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Sector::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 azimuth = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          azimuth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 arc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          arc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.ransim.types.Point centroid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_centroid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 height = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 tilt = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          tilt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Sector::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.ransim.types.Sector)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 azimuth = 1;
  if (this->_internal_azimuth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_azimuth(), target);
  }

  // int32 arc = 2;
  if (this->_internal_arc() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_arc(), target);
  }

  // .onos.ransim.types.Point centroid = 3;
  if (this->_internal_has_centroid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::centroid(this), target, stream);
  }

  // int32 height = 4;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_height(), target);
  }

  // int32 tilt = 5;
  if (this->_internal_tilt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_tilt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.ransim.types.Sector)
  return target;
}

size_t Sector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.ransim.types.Sector)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .onos.ransim.types.Point centroid = 3;
  if (this->_internal_has_centroid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *centroid_);
  }

  // int32 azimuth = 1;
  if (this->_internal_azimuth() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_azimuth());
  }

  // int32 arc = 2;
  if (this->_internal_arc() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_arc());
  }

  // int32 height = 4;
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_height());
  }

  // int32 tilt = 5;
  if (this->_internal_tilt() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_tilt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Sector::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Sector::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Sector::GetClassData() const { return &_class_data_; }

void Sector::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Sector *>(to)->MergeFrom(
      static_cast<const Sector &>(from));
}


void Sector::MergeFrom(const Sector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.ransim.types.Sector)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_centroid()) {
    _internal_mutable_centroid()->::onos::ransim::types::Point::MergeFrom(from._internal_centroid());
  }
  if (from._internal_azimuth() != 0) {
    _internal_set_azimuth(from._internal_azimuth());
  }
  if (from._internal_arc() != 0) {
    _internal_set_arc(from._internal_arc());
  }
  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_tilt() != 0) {
    _internal_set_tilt(from._internal_tilt());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Sector::CopyFrom(const Sector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.ransim.types.Sector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sector::IsInitialized() const {
  return true;
}

void Sector::InternalSwap(Sector* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Sector, tilt_)
      + sizeof(Sector::tilt_)
      - PROTOBUF_FIELD_OFFSET(Sector, centroid_)>(
          reinterpret_cast<char*>(&centroid_),
          reinterpret_cast<char*>(&other->centroid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Sector::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fransim_2ftypes_2ftypes_2eproto_getter, &descriptor_table_onos_2fransim_2ftypes_2ftypes_2eproto_once,
      file_level_metadata_onos_2fransim_2ftypes_2ftypes_2eproto[1]);
}

// ===================================================================

class Route::_Internal {
 public:
};

Route::Route(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  waypoints_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.ransim.types.Route)
}
Route::Route(const Route& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      waypoints_(from.waypoints_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_color().empty()) {
    color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_color(), 
      GetArenaForAllocation());
  }
  ::memcpy(&name_, &from.name_,
    static_cast<size_t>(reinterpret_cast<char*>(&next_point_) -
    reinterpret_cast<char*>(&name_)) + sizeof(next_point_));
  // @@protoc_insertion_point(copy_constructor:onos.ransim.types.Route)
}

inline void Route::SharedCtor() {
color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&name_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&next_point_) -
    reinterpret_cast<char*>(&name_)) + sizeof(next_point_));
}

Route::~Route() {
  // @@protoc_insertion_point(destructor:onos.ransim.types.Route)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Route::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Route::ArenaDtor(void* object) {
  Route* _this = reinterpret_cast< Route* >(object);
  (void)_this;
}
void Route::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Route::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Route::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.ransim.types.Route)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  waypoints_.Clear();
  color_.ClearToEmpty();
  ::memset(&name_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&next_point_) -
      reinterpret_cast<char*>(&name_)) + sizeof(next_point_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Route::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 name = 1 [(.gogoproto.customname) = "RouteID", (.gogoproto.casttype) = "IMSI"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .onos.ransim.types.Point waypoints = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_waypoints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string color = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.ransim.types.Route.color"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 speed_avg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          speed_avg_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 speed_stdev = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          speed_stdev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool reverse = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          reverse_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 next_point = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          next_point_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Route::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.ransim.types.Route)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 name = 1 [(.gogoproto.customname) = "RouteID", (.gogoproto.casttype) = "IMSI"];
  if (this->_internal_name() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_name(), target);
  }

  // repeated .onos.ransim.types.Point waypoints = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_waypoints_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_waypoints(i), target, stream);
  }

  // string color = 3;
  if (!this->_internal_color().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_color().data(), static_cast<int>(this->_internal_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.ransim.types.Route.color");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_color(), target);
  }

  // uint32 speed_avg = 4;
  if (this->_internal_speed_avg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_speed_avg(), target);
  }

  // uint32 speed_stdev = 5;
  if (this->_internal_speed_stdev() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_speed_stdev(), target);
  }

  // bool reverse = 6;
  if (this->_internal_reverse() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_reverse(), target);
  }

  // uint32 next_point = 7;
  if (this->_internal_next_point() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_next_point(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.ransim.types.Route)
  return target;
}

size_t Route::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.ransim.types.Route)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .onos.ransim.types.Point waypoints = 2;
  total_size += 1UL * this->_internal_waypoints_size();
  for (const auto& msg : this->waypoints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string color = 3;
  if (!this->_internal_color().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_color());
  }

  // uint64 name = 1 [(.gogoproto.customname) = "RouteID", (.gogoproto.casttype) = "IMSI"];
  if (this->_internal_name() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_name());
  }

  // uint32 speed_avg = 4;
  if (this->_internal_speed_avg() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_speed_avg());
  }

  // uint32 speed_stdev = 5;
  if (this->_internal_speed_stdev() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_speed_stdev());
  }

  // bool reverse = 6;
  if (this->_internal_reverse() != 0) {
    total_size += 1 + 1;
  }

  // uint32 next_point = 7;
  if (this->_internal_next_point() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_next_point());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Route::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Route::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Route::GetClassData() const { return &_class_data_; }

void Route::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Route *>(to)->MergeFrom(
      static_cast<const Route &>(from));
}


void Route::MergeFrom(const Route& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.ransim.types.Route)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  waypoints_.MergeFrom(from.waypoints_);
  if (!from._internal_color().empty()) {
    _internal_set_color(from._internal_color());
  }
  if (from._internal_name() != 0) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_speed_avg() != 0) {
    _internal_set_speed_avg(from._internal_speed_avg());
  }
  if (from._internal_speed_stdev() != 0) {
    _internal_set_speed_stdev(from._internal_speed_stdev());
  }
  if (from._internal_reverse() != 0) {
    _internal_set_reverse(from._internal_reverse());
  }
  if (from._internal_next_point() != 0) {
    _internal_set_next_point(from._internal_next_point());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Route::CopyFrom(const Route& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.ransim.types.Route)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Route::IsInitialized() const {
  return true;
}

void Route::InternalSwap(Route* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  waypoints_.InternalSwap(&other->waypoints_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &color_, lhs_arena,
      &other->color_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Route, next_point_)
      + sizeof(Route::next_point_)
      - PROTOBUF_FIELD_OFFSET(Route, name_)>(
          reinterpret_cast<char*>(&name_),
          reinterpret_cast<char*>(&other->name_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Route::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fransim_2ftypes_2ftypes_2eproto_getter, &descriptor_table_onos_2fransim_2ftypes_2ftypes_2eproto_once,
      file_level_metadata_onos_2fransim_2ftypes_2ftypes_2eproto[2]);
}

// ===================================================================

class Ue::_Internal {
 public:
  static const ::onos::ransim::types::Point& position(const Ue* msg);
  static const ::onos::ransim::types::UeMetrics& metrics(const Ue* msg);
  static const ::onos::ransim::types::UeIdentity& ueid(const Ue* msg);
};

const ::onos::ransim::types::Point&
Ue::_Internal::position(const Ue* msg) {
  return *msg->position_;
}
const ::onos::ransim::types::UeMetrics&
Ue::_Internal::metrics(const Ue* msg) {
  return *msg->metrics_;
}
const ::onos::ransim::types::UeIdentity&
Ue::_Internal::ueid(const Ue* msg) {
  return *msg->ueid_;
}
Ue::Ue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.ransim.types.Ue)
}
Ue::Ue(const Ue& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_position()) {
    position_ = new ::onos::ransim::types::Point(*from.position_);
  } else {
    position_ = nullptr;
  }
  if (from._internal_has_metrics()) {
    metrics_ = new ::onos::ransim::types::UeMetrics(*from.metrics_);
  } else {
    metrics_ = nullptr;
  }
  if (from._internal_has_ueid()) {
    ueid_ = new ::onos::ransim::types::UeIdentity(*from.ueid_);
  } else {
    ueid_ = nullptr;
  }
  ::memcpy(&imsi_, &from.imsi_,
    static_cast<size_t>(reinterpret_cast<char*>(&serving_tower_geometry_) -
    reinterpret_cast<char*>(&imsi_)) + sizeof(serving_tower_geometry_));
  // @@protoc_insertion_point(copy_constructor:onos.ransim.types.Ue)
}

inline void Ue::SharedCtor() {
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&position_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&serving_tower_geometry_) -
    reinterpret_cast<char*>(&position_)) + sizeof(serving_tower_geometry_));
}

Ue::~Ue() {
  // @@protoc_insertion_point(destructor:onos.ransim.types.Ue)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Ue::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete position_;
  if (this != internal_default_instance()) delete metrics_;
  if (this != internal_default_instance()) delete ueid_;
}

void Ue::ArenaDtor(void* object) {
  Ue* _this = reinterpret_cast< Ue* >(object);
  (void)_this;
}
void Ue::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Ue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Ue::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.ransim.types.Ue)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  if (GetArenaForAllocation() == nullptr && metrics_ != nullptr) {
    delete metrics_;
  }
  metrics_ = nullptr;
  if (GetArenaForAllocation() == nullptr && ueid_ != nullptr) {
    delete ueid_;
  }
  ueid_ = nullptr;
  ::memset(&imsi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&serving_tower_geometry_) -
      reinterpret_cast<char*>(&imsi_)) + sizeof(serving_tower_geometry_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ue::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 imsi = 1 [(.gogoproto.customname) = "IMSI", (.gogoproto.casttype) = "IMSI"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          imsi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.ransim.types.Ue.type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.ransim.types.Point position = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rotation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          rotation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 serving_tower = 7 [(.gogoproto.casttype) = "NCGI"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          serving_tower_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double serving_tower_strength = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          serving_tower_strength_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint64 tower1 = 9 [(.gogoproto.casttype) = "NCGI"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          tower1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double tower1_strength = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 81)) {
          tower1_strength_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint64 tower2 = 11 [(.gogoproto.casttype) = "NCGI"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          tower2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double tower2_strength = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 97)) {
          tower2_strength_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint64 tower3 = 13 [(.gogoproto.casttype) = "NCGI"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          tower3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double tower3_strength = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 113)) {
          tower3_strength_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // uint32 crnti = 15 [(.gogoproto.customname) = "CRNTI", (.gogoproto.casttype) = "CRNTI"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          crnti_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool admitted = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          admitted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.ransim.types.UeMetrics metrics = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_metrics(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rrc_state = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          rrc_state_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 five_qi = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          five_qi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.ransim.types.UeIdentity ueid = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_ueid(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double serving_tower_geometry = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 169)) {
          serving_tower_geometry_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Ue::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.ransim.types.Ue)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 imsi = 1 [(.gogoproto.customname) = "IMSI", (.gogoproto.casttype) = "IMSI"];
  if (this->_internal_imsi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_imsi(), target);
  }

  // string type = 2;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.ransim.types.Ue.type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_type(), target);
  }

  // .onos.ransim.types.Point position = 4;
  if (this->_internal_has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::position(this), target, stream);
  }

  // uint32 rotation = 5;
  if (this->_internal_rotation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_rotation(), target);
  }

  // uint64 serving_tower = 7 [(.gogoproto.casttype) = "NCGI"];
  if (this->_internal_serving_tower() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(7, this->_internal_serving_tower(), target);
  }

  // double serving_tower_strength = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_serving_tower_strength = this->_internal_serving_tower_strength();
  uint64_t raw_serving_tower_strength;
  memcpy(&raw_serving_tower_strength, &tmp_serving_tower_strength, sizeof(tmp_serving_tower_strength));
  if (raw_serving_tower_strength != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_serving_tower_strength(), target);
  }

  // uint64 tower1 = 9 [(.gogoproto.casttype) = "NCGI"];
  if (this->_internal_tower1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(9, this->_internal_tower1(), target);
  }

  // double tower1_strength = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_tower1_strength = this->_internal_tower1_strength();
  uint64_t raw_tower1_strength;
  memcpy(&raw_tower1_strength, &tmp_tower1_strength, sizeof(tmp_tower1_strength));
  if (raw_tower1_strength != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_tower1_strength(), target);
  }

  // uint64 tower2 = 11 [(.gogoproto.casttype) = "NCGI"];
  if (this->_internal_tower2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_tower2(), target);
  }

  // double tower2_strength = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_tower2_strength = this->_internal_tower2_strength();
  uint64_t raw_tower2_strength;
  memcpy(&raw_tower2_strength, &tmp_tower2_strength, sizeof(tmp_tower2_strength));
  if (raw_tower2_strength != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_tower2_strength(), target);
  }

  // uint64 tower3 = 13 [(.gogoproto.casttype) = "NCGI"];
  if (this->_internal_tower3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(13, this->_internal_tower3(), target);
  }

  // double tower3_strength = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_tower3_strength = this->_internal_tower3_strength();
  uint64_t raw_tower3_strength;
  memcpy(&raw_tower3_strength, &tmp_tower3_strength, sizeof(tmp_tower3_strength));
  if (raw_tower3_strength != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_tower3_strength(), target);
  }

  // uint32 crnti = 15 [(.gogoproto.customname) = "CRNTI", (.gogoproto.casttype) = "CRNTI"];
  if (this->_internal_crnti() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_crnti(), target);
  }

  // bool admitted = 16;
  if (this->_internal_admitted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(16, this->_internal_admitted(), target);
  }

  // .onos.ransim.types.UeMetrics metrics = 17;
  if (this->_internal_has_metrics()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::metrics(this), target, stream);
  }

  // uint32 rrc_state = 18;
  if (this->_internal_rrc_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_rrc_state(), target);
  }

  // int32 five_qi = 19;
  if (this->_internal_five_qi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(19, this->_internal_five_qi(), target);
  }

  // .onos.ransim.types.UeIdentity ueid = 20;
  if (this->_internal_has_ueid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::ueid(this), target, stream);
  }

  // double serving_tower_geometry = 21;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_serving_tower_geometry = this->_internal_serving_tower_geometry();
  uint64_t raw_serving_tower_geometry;
  memcpy(&raw_serving_tower_geometry, &tmp_serving_tower_geometry, sizeof(tmp_serving_tower_geometry));
  if (raw_serving_tower_geometry != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_serving_tower_geometry(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.ransim.types.Ue)
  return target;
}

size_t Ue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.ransim.types.Ue)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 2;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // .onos.ransim.types.Point position = 4;
  if (this->_internal_has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  // .onos.ransim.types.UeMetrics metrics = 17;
  if (this->_internal_has_metrics()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *metrics_);
  }

  // .onos.ransim.types.UeIdentity ueid = 20;
  if (this->_internal_has_ueid()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ueid_);
  }

  // uint64 imsi = 1 [(.gogoproto.customname) = "IMSI", (.gogoproto.casttype) = "IMSI"];
  if (this->_internal_imsi() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_imsi());
  }

  // uint64 serving_tower = 7 [(.gogoproto.casttype) = "NCGI"];
  if (this->_internal_serving_tower() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_serving_tower());
  }

  // double serving_tower_strength = 8;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_serving_tower_strength = this->_internal_serving_tower_strength();
  uint64_t raw_serving_tower_strength;
  memcpy(&raw_serving_tower_strength, &tmp_serving_tower_strength, sizeof(tmp_serving_tower_strength));
  if (raw_serving_tower_strength != 0) {
    total_size += 1 + 8;
  }

  // uint64 tower1 = 9 [(.gogoproto.casttype) = "NCGI"];
  if (this->_internal_tower1() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_tower1());
  }

  // double tower1_strength = 10;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_tower1_strength = this->_internal_tower1_strength();
  uint64_t raw_tower1_strength;
  memcpy(&raw_tower1_strength, &tmp_tower1_strength, sizeof(tmp_tower1_strength));
  if (raw_tower1_strength != 0) {
    total_size += 1 + 8;
  }

  // uint32 rotation = 5;
  if (this->_internal_rotation() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_rotation());
  }

  // uint32 crnti = 15 [(.gogoproto.customname) = "CRNTI", (.gogoproto.casttype) = "CRNTI"];
  if (this->_internal_crnti() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_crnti());
  }

  // uint64 tower2 = 11 [(.gogoproto.casttype) = "NCGI"];
  if (this->_internal_tower2() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_tower2());
  }

  // double tower2_strength = 12;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_tower2_strength = this->_internal_tower2_strength();
  uint64_t raw_tower2_strength;
  memcpy(&raw_tower2_strength, &tmp_tower2_strength, sizeof(tmp_tower2_strength));
  if (raw_tower2_strength != 0) {
    total_size += 1 + 8;
  }

  // uint64 tower3 = 13 [(.gogoproto.casttype) = "NCGI"];
  if (this->_internal_tower3() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_tower3());
  }

  // double tower3_strength = 14;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_tower3_strength = this->_internal_tower3_strength();
  uint64_t raw_tower3_strength;
  memcpy(&raw_tower3_strength, &tmp_tower3_strength, sizeof(tmp_tower3_strength));
  if (raw_tower3_strength != 0) {
    total_size += 1 + 8;
  }

  // bool admitted = 16;
  if (this->_internal_admitted() != 0) {
    total_size += 2 + 1;
  }

  // uint32 rrc_state = 18;
  if (this->_internal_rrc_state() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rrc_state());
  }

  // int32 five_qi = 19;
  if (this->_internal_five_qi() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_five_qi());
  }

  // double serving_tower_geometry = 21;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_serving_tower_geometry = this->_internal_serving_tower_geometry();
  uint64_t raw_serving_tower_geometry;
  memcpy(&raw_serving_tower_geometry, &tmp_serving_tower_geometry, sizeof(tmp_serving_tower_geometry));
  if (raw_serving_tower_geometry != 0) {
    total_size += 2 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ue::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Ue::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ue::GetClassData() const { return &_class_data_; }

void Ue::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Ue *>(to)->MergeFrom(
      static_cast<const Ue &>(from));
}


void Ue::MergeFrom(const Ue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.ransim.types.Ue)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type().empty()) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_has_position()) {
    _internal_mutable_position()->::onos::ransim::types::Point::MergeFrom(from._internal_position());
  }
  if (from._internal_has_metrics()) {
    _internal_mutable_metrics()->::onos::ransim::types::UeMetrics::MergeFrom(from._internal_metrics());
  }
  if (from._internal_has_ueid()) {
    _internal_mutable_ueid()->::onos::ransim::types::UeIdentity::MergeFrom(from._internal_ueid());
  }
  if (from._internal_imsi() != 0) {
    _internal_set_imsi(from._internal_imsi());
  }
  if (from._internal_serving_tower() != 0) {
    _internal_set_serving_tower(from._internal_serving_tower());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_serving_tower_strength = from._internal_serving_tower_strength();
  uint64_t raw_serving_tower_strength;
  memcpy(&raw_serving_tower_strength, &tmp_serving_tower_strength, sizeof(tmp_serving_tower_strength));
  if (raw_serving_tower_strength != 0) {
    _internal_set_serving_tower_strength(from._internal_serving_tower_strength());
  }
  if (from._internal_tower1() != 0) {
    _internal_set_tower1(from._internal_tower1());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_tower1_strength = from._internal_tower1_strength();
  uint64_t raw_tower1_strength;
  memcpy(&raw_tower1_strength, &tmp_tower1_strength, sizeof(tmp_tower1_strength));
  if (raw_tower1_strength != 0) {
    _internal_set_tower1_strength(from._internal_tower1_strength());
  }
  if (from._internal_rotation() != 0) {
    _internal_set_rotation(from._internal_rotation());
  }
  if (from._internal_crnti() != 0) {
    _internal_set_crnti(from._internal_crnti());
  }
  if (from._internal_tower2() != 0) {
    _internal_set_tower2(from._internal_tower2());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_tower2_strength = from._internal_tower2_strength();
  uint64_t raw_tower2_strength;
  memcpy(&raw_tower2_strength, &tmp_tower2_strength, sizeof(tmp_tower2_strength));
  if (raw_tower2_strength != 0) {
    _internal_set_tower2_strength(from._internal_tower2_strength());
  }
  if (from._internal_tower3() != 0) {
    _internal_set_tower3(from._internal_tower3());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_tower3_strength = from._internal_tower3_strength();
  uint64_t raw_tower3_strength;
  memcpy(&raw_tower3_strength, &tmp_tower3_strength, sizeof(tmp_tower3_strength));
  if (raw_tower3_strength != 0) {
    _internal_set_tower3_strength(from._internal_tower3_strength());
  }
  if (from._internal_admitted() != 0) {
    _internal_set_admitted(from._internal_admitted());
  }
  if (from._internal_rrc_state() != 0) {
    _internal_set_rrc_state(from._internal_rrc_state());
  }
  if (from._internal_five_qi() != 0) {
    _internal_set_five_qi(from._internal_five_qi());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_serving_tower_geometry = from._internal_serving_tower_geometry();
  uint64_t raw_serving_tower_geometry;
  memcpy(&raw_serving_tower_geometry, &tmp_serving_tower_geometry, sizeof(tmp_serving_tower_geometry));
  if (raw_serving_tower_geometry != 0) {
    _internal_set_serving_tower_geometry(from._internal_serving_tower_geometry());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Ue::CopyFrom(const Ue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.ransim.types.Ue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ue::IsInitialized() const {
  return true;
}

void Ue::InternalSwap(Ue* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_, lhs_arena,
      &other->type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ue, serving_tower_geometry_)
      + sizeof(Ue::serving_tower_geometry_)
      - PROTOBUF_FIELD_OFFSET(Ue, position_)>(
          reinterpret_cast<char*>(&position_),
          reinterpret_cast<char*>(&other->position_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Ue::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fransim_2ftypes_2ftypes_2eproto_getter, &descriptor_table_onos_2fransim_2ftypes_2ftypes_2eproto_once,
      file_level_metadata_onos_2fransim_2ftypes_2ftypes_2eproto[3]);
}

// ===================================================================

class UeIdentity::_Internal {
 public:
  static const ::onos::ransim::types::Guami& guami(const UeIdentity* msg);
};

const ::onos::ransim::types::Guami&
UeIdentity::_Internal::guami(const UeIdentity* msg) {
  return *msg->guami_;
}
UeIdentity::UeIdentity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.ransim.types.UeIdentity)
}
UeIdentity::UeIdentity(const UeIdentity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_guami()) {
    guami_ = new ::onos::ransim::types::Guami(*from.guami_);
  } else {
    guami_ = nullptr;
  }
  amf_ue_ngap_id_ = from.amf_ue_ngap_id_;
  // @@protoc_insertion_point(copy_constructor:onos.ransim.types.UeIdentity)
}

inline void UeIdentity::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&guami_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&amf_ue_ngap_id_) -
    reinterpret_cast<char*>(&guami_)) + sizeof(amf_ue_ngap_id_));
}

UeIdentity::~UeIdentity() {
  // @@protoc_insertion_point(destructor:onos.ransim.types.UeIdentity)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UeIdentity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete guami_;
}

void UeIdentity::ArenaDtor(void* object) {
  UeIdentity* _this = reinterpret_cast< UeIdentity* >(object);
  (void)_this;
}
void UeIdentity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UeIdentity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UeIdentity::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.ransim.types.UeIdentity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && guami_ != nullptr) {
    delete guami_;
  }
  guami_ = nullptr;
  amf_ue_ngap_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UeIdentity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .onos.ransim.types.Guami guami = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_guami(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 amf_ue_ngap_id = 2 [(.gogoproto.casttype) = "AmfUENgapID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          amf_ue_ngap_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UeIdentity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.ransim.types.UeIdentity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .onos.ransim.types.Guami guami = 1;
  if (this->_internal_has_guami()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::guami(this), target, stream);
  }

  // uint64 amf_ue_ngap_id = 2 [(.gogoproto.casttype) = "AmfUENgapID"];
  if (this->_internal_amf_ue_ngap_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_amf_ue_ngap_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.ransim.types.UeIdentity)
  return target;
}

size_t UeIdentity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.ransim.types.UeIdentity)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .onos.ransim.types.Guami guami = 1;
  if (this->_internal_has_guami()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *guami_);
  }

  // uint64 amf_ue_ngap_id = 2 [(.gogoproto.casttype) = "AmfUENgapID"];
  if (this->_internal_amf_ue_ngap_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_amf_ue_ngap_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UeIdentity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UeIdentity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UeIdentity::GetClassData() const { return &_class_data_; }

void UeIdentity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UeIdentity *>(to)->MergeFrom(
      static_cast<const UeIdentity &>(from));
}


void UeIdentity::MergeFrom(const UeIdentity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.ransim.types.UeIdentity)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_guami()) {
    _internal_mutable_guami()->::onos::ransim::types::Guami::MergeFrom(from._internal_guami());
  }
  if (from._internal_amf_ue_ngap_id() != 0) {
    _internal_set_amf_ue_ngap_id(from._internal_amf_ue_ngap_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UeIdentity::CopyFrom(const UeIdentity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.ransim.types.UeIdentity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UeIdentity::IsInitialized() const {
  return true;
}

void UeIdentity::InternalSwap(UeIdentity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UeIdentity, amf_ue_ngap_id_)
      + sizeof(UeIdentity::amf_ue_ngap_id_)
      - PROTOBUF_FIELD_OFFSET(UeIdentity, guami_)>(
          reinterpret_cast<char*>(&guami_),
          reinterpret_cast<char*>(&other->guami_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UeIdentity::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fransim_2ftypes_2ftypes_2eproto_getter, &descriptor_table_onos_2fransim_2ftypes_2ftypes_2eproto_once,
      file_level_metadata_onos_2fransim_2ftypes_2ftypes_2eproto[4]);
}

// ===================================================================

class Guami::_Internal {
 public:
};

Guami::Guami(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.ransim.types.Guami)
}
Guami::Guami(const Guami& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&plmnid_, &from.plmnid_,
    static_cast<size_t>(reinterpret_cast<char*>(&amf_pointer_) -
    reinterpret_cast<char*>(&plmnid_)) + sizeof(amf_pointer_));
  // @@protoc_insertion_point(copy_constructor:onos.ransim.types.Guami)
}

inline void Guami::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&plmnid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&amf_pointer_) -
    reinterpret_cast<char*>(&plmnid_)) + sizeof(amf_pointer_));
}

Guami::~Guami() {
  // @@protoc_insertion_point(destructor:onos.ransim.types.Guami)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Guami::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Guami::ArenaDtor(void* object) {
  Guami* _this = reinterpret_cast< Guami* >(object);
  (void)_this;
}
void Guami::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Guami::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Guami::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.ransim.types.Guami)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&plmnid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&amf_pointer_) -
      reinterpret_cast<char*>(&plmnid_)) + sizeof(amf_pointer_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Guami::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 plmnid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          plmnid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 amf_region_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          amf_region_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 amf_set_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          amf_set_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 amf_pointer = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          amf_pointer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Guami::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.ransim.types.Guami)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 plmnid = 1;
  if (this->_internal_plmnid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_plmnid(), target);
  }

  // uint32 amf_region_id = 2;
  if (this->_internal_amf_region_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_amf_region_id(), target);
  }

  // uint32 amf_set_id = 3;
  if (this->_internal_amf_set_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_amf_set_id(), target);
  }

  // uint32 amf_pointer = 4;
  if (this->_internal_amf_pointer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_amf_pointer(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.ransim.types.Guami)
  return target;
}

size_t Guami::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.ransim.types.Guami)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 plmnid = 1;
  if (this->_internal_plmnid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_plmnid());
  }

  // uint32 amf_region_id = 2;
  if (this->_internal_amf_region_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_amf_region_id());
  }

  // uint32 amf_set_id = 3;
  if (this->_internal_amf_set_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_amf_set_id());
  }

  // uint32 amf_pointer = 4;
  if (this->_internal_amf_pointer() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_amf_pointer());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Guami::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Guami::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Guami::GetClassData() const { return &_class_data_; }

void Guami::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Guami *>(to)->MergeFrom(
      static_cast<const Guami &>(from));
}


void Guami::MergeFrom(const Guami& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.ransim.types.Guami)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_plmnid() != 0) {
    _internal_set_plmnid(from._internal_plmnid());
  }
  if (from._internal_amf_region_id() != 0) {
    _internal_set_amf_region_id(from._internal_amf_region_id());
  }
  if (from._internal_amf_set_id() != 0) {
    _internal_set_amf_set_id(from._internal_amf_set_id());
  }
  if (from._internal_amf_pointer() != 0) {
    _internal_set_amf_pointer(from._internal_amf_pointer());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Guami::CopyFrom(const Guami& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.ransim.types.Guami)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Guami::IsInitialized() const {
  return true;
}

void Guami::InternalSwap(Guami* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Guami, amf_pointer_)
      + sizeof(Guami::amf_pointer_)
      - PROTOBUF_FIELD_OFFSET(Guami, plmnid_)>(
          reinterpret_cast<char*>(&plmnid_),
          reinterpret_cast<char*>(&other->plmnid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Guami::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fransim_2ftypes_2ftypes_2eproto_getter, &descriptor_table_onos_2fransim_2ftypes_2ftypes_2eproto_once,
      file_level_metadata_onos_2fransim_2ftypes_2ftypes_2eproto[5]);
}

// ===================================================================

class UeMetrics::_Internal {
 public:
};

UeMetrics::UeMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.ransim.types.UeMetrics)
}
UeMetrics::UeMetrics(const UeMetrics& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ho_latency_, &from.ho_latency_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_first_) -
    reinterpret_cast<char*>(&ho_latency_)) + sizeof(is_first_));
  // @@protoc_insertion_point(copy_constructor:onos.ransim.types.UeMetrics)
}

inline void UeMetrics::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&ho_latency_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_first_) -
    reinterpret_cast<char*>(&ho_latency_)) + sizeof(is_first_));
}

UeMetrics::~UeMetrics() {
  // @@protoc_insertion_point(destructor:onos.ransim.types.UeMetrics)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UeMetrics::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void UeMetrics::ArenaDtor(void* object) {
  UeMetrics* _this = reinterpret_cast< UeMetrics* >(object);
  (void)_this;
}
void UeMetrics::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UeMetrics::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UeMetrics::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.ransim.types.UeMetrics)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&ho_latency_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_first_) -
      reinterpret_cast<char*>(&ho_latency_)) + sizeof(is_first_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UeMetrics::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 ho_latency = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ho_latency_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int64 ho_report_timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ho_report_timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool is_first = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          is_first_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UeMetrics::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.ransim.types.UeMetrics)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 ho_latency = 1;
  if (this->_internal_ho_latency() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_ho_latency(), target);
  }

  // int64 ho_report_timestamp = 2;
  if (this->_internal_ho_report_timestamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_ho_report_timestamp(), target);
  }

  // bool is_first = 3;
  if (this->_internal_is_first() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_is_first(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.ransim.types.UeMetrics)
  return target;
}

size_t UeMetrics::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.ransim.types.UeMetrics)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 ho_latency = 1;
  if (this->_internal_ho_latency() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_ho_latency());
  }

  // int64 ho_report_timestamp = 2;
  if (this->_internal_ho_report_timestamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_ho_report_timestamp());
  }

  // bool is_first = 3;
  if (this->_internal_is_first() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UeMetrics::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UeMetrics::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UeMetrics::GetClassData() const { return &_class_data_; }

void UeMetrics::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UeMetrics *>(to)->MergeFrom(
      static_cast<const UeMetrics &>(from));
}


void UeMetrics::MergeFrom(const UeMetrics& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.ransim.types.UeMetrics)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_ho_latency() != 0) {
    _internal_set_ho_latency(from._internal_ho_latency());
  }
  if (from._internal_ho_report_timestamp() != 0) {
    _internal_set_ho_report_timestamp(from._internal_ho_report_timestamp());
  }
  if (from._internal_is_first() != 0) {
    _internal_set_is_first(from._internal_is_first());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UeMetrics::CopyFrom(const UeMetrics& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.ransim.types.UeMetrics)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UeMetrics::IsInitialized() const {
  return true;
}

void UeMetrics::InternalSwap(UeMetrics* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UeMetrics, is_first_)
      + sizeof(UeMetrics::is_first_)
      - PROTOBUF_FIELD_OFFSET(UeMetrics, ho_latency_)>(
          reinterpret_cast<char*>(&ho_latency_),
          reinterpret_cast<char*>(&other->ho_latency_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UeMetrics::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fransim_2ftypes_2ftypes_2eproto_getter, &descriptor_table_onos_2fransim_2ftypes_2ftypes_2eproto_once,
      file_level_metadata_onos_2fransim_2ftypes_2ftypes_2eproto[6]);
}

// ===================================================================

Cell_CrntiMapEntry_DoNotUse::Cell_CrntiMapEntry_DoNotUse() {}
Cell_CrntiMapEntry_DoNotUse::Cell_CrntiMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Cell_CrntiMapEntry_DoNotUse::MergeFrom(const Cell_CrntiMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Cell_CrntiMapEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fransim_2ftypes_2ftypes_2eproto_getter, &descriptor_table_onos_2fransim_2ftypes_2ftypes_2eproto_once,
      file_level_metadata_onos_2fransim_2ftypes_2ftypes_2eproto[7]);
}

// ===================================================================

class Cell::_Internal {
 public:
  static const ::onos::ransim::types::Point& location(const Cell* msg);
  static const ::onos::ransim::types::Sector& sector(const Cell* msg);
  static const ::onos::ransim::types::MeasurementParams& measurement_params(const Cell* msg);
};

const ::onos::ransim::types::Point&
Cell::_Internal::location(const Cell* msg) {
  return *msg->location_;
}
const ::onos::ransim::types::Sector&
Cell::_Internal::sector(const Cell* msg) {
  return *msg->sector_;
}
const ::onos::ransim::types::MeasurementParams&
Cell::_Internal::measurement_params(const Cell* msg) {
  return *msg->measurement_params_;
}
Cell::Cell(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  neighbors_(arena),
  crnti_map_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.ransim.types.Cell)
}
Cell::Cell(const Cell& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      neighbors_(from.neighbors_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  crnti_map_.MergeFrom(from.crnti_map_);
  color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_color().empty()) {
    color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_color(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_location()) {
    location_ = new ::onos::ransim::types::Point(*from.location_);
  } else {
    location_ = nullptr;
  }
  if (from._internal_has_sector()) {
    sector_ = new ::onos::ransim::types::Sector(*from.sector_);
  } else {
    sector_ = nullptr;
  }
  if (from._internal_has_measurement_params()) {
    measurement_params_ = new ::onos::ransim::types::MeasurementParams(*from.measurement_params_);
  } else {
    measurement_params_ = nullptr;
  }
  ::memcpy(&ecgi_, &from.ecgi_,
    static_cast<size_t>(reinterpret_cast<char*>(&rrc_connected_count_) -
    reinterpret_cast<char*>(&ecgi_)) + sizeof(rrc_connected_count_));
  // @@protoc_insertion_point(copy_constructor:onos.ransim.types.Cell)
}

inline void Cell::SharedCtor() {
color_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&location_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rrc_connected_count_) -
    reinterpret_cast<char*>(&location_)) + sizeof(rrc_connected_count_));
}

Cell::~Cell() {
  // @@protoc_insertion_point(destructor:onos.ransim.types.Cell)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Cell::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  color_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete location_;
  if (this != internal_default_instance()) delete sector_;
  if (this != internal_default_instance()) delete measurement_params_;
}

void Cell::ArenaDtor(void* object) {
  Cell* _this = reinterpret_cast< Cell* >(object);
  (void)_this;
  _this->crnti_map_. ~MapField();
}
inline void Cell::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &Cell::ArenaDtor);
  }
}
void Cell::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Cell::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.ransim.types.Cell)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  neighbors_.Clear();
  crnti_map_.Clear();
  color_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
  if (GetArenaForAllocation() == nullptr && sector_ != nullptr) {
    delete sector_;
  }
  sector_ = nullptr;
  if (GetArenaForAllocation() == nullptr && measurement_params_ != nullptr) {
    delete measurement_params_;
  }
  measurement_params_ = nullptr;
  ::memset(&ecgi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rrc_connected_count_) -
      reinterpret_cast<char*>(&ecgi_)) + sizeof(rrc_connected_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Cell::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 ecgi = 1 [(.gogoproto.customname) = "NCGI", (.gogoproto.casttype) = "NCGI"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          ecgi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.ransim.types.Point location = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.ransim.types.Sector sector = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_sector(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string color = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_color();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.ransim.types.Cell.color"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 max_ues = 6 [(.gogoproto.customname) = "MaxUEs"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          max_ues_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 neighbors = 7 [(.gogoproto.casttype) = "NCGI"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_neighbors(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_neighbors(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double tx_power_db = 8 [(.gogoproto.customname) = "TxPowerdB"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 65)) {
          tx_power_db_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .onos.ransim.types.MeasurementParams measurement_params = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_measurement_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint32, uint64> crnti_map = 10 [(.gogoproto.castkey) = "CRNTI", (.gogoproto.castvalue) = "IMSI"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&crnti_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint32 crnti_index = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          crnti_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 port = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pci = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          pci_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 earfcn = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          earfcn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.ransim.types.CellType cell_type = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cell_type(static_cast<::onos::ransim::types::CellType>(val));
        } else
          goto handle_unusual;
        continue;
      // uint32 rrc_idle_count = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          rrc_idle_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 rrc_connected_count = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          rrc_connected_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Cell::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.ransim.types.Cell)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 ecgi = 1 [(.gogoproto.customname) = "NCGI", (.gogoproto.casttype) = "NCGI"];
  if (this->_internal_ecgi() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_ecgi(), target);
  }

  // .onos.ransim.types.Point location = 3;
  if (this->_internal_has_location()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::location(this), target, stream);
  }

  // .onos.ransim.types.Sector sector = 4;
  if (this->_internal_has_sector()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::sector(this), target, stream);
  }

  // string color = 5;
  if (!this->_internal_color().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_color().data(), static_cast<int>(this->_internal_color().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.ransim.types.Cell.color");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_color(), target);
  }

  // uint32 max_ues = 6 [(.gogoproto.customname) = "MaxUEs"];
  if (this->_internal_max_ues() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_max_ues(), target);
  }

  // repeated uint64 neighbors = 7 [(.gogoproto.casttype) = "NCGI"];
  {
    int byte_size = _neighbors_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          7, _internal_neighbors(), byte_size, target);
    }
  }

  // double tx_power_db = 8 [(.gogoproto.customname) = "TxPowerdB"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_tx_power_db = this->_internal_tx_power_db();
  uint64_t raw_tx_power_db;
  memcpy(&raw_tx_power_db, &tmp_tx_power_db, sizeof(tmp_tx_power_db));
  if (raw_tx_power_db != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_tx_power_db(), target);
  }

  // .onos.ransim.types.MeasurementParams measurement_params = 9;
  if (this->_internal_has_measurement_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::measurement_params(this), target, stream);
  }

  // map<uint32, uint64> crnti_map = 10 [(.gogoproto.castkey) = "CRNTI", (.gogoproto.castvalue) = "IMSI"];
  if (!this->_internal_crnti_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint64_t >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< uint32_t, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_crnti_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_crnti_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint64_t >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint64_t >::const_iterator
          it = this->_internal_crnti_map().begin();
          it != this->_internal_crnti_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Cell_CrntiMapEntry_DoNotUse::Funcs::InternalSerialize(10, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint64_t >::const_iterator
          it = this->_internal_crnti_map().begin();
          it != this->_internal_crnti_map().end(); ++it) {
        target = Cell_CrntiMapEntry_DoNotUse::Funcs::InternalSerialize(10, it->first, it->second, target, stream);
      }
    }
  }

  // uint32 crnti_index = 11;
  if (this->_internal_crnti_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_crnti_index(), target);
  }

  // uint32 port = 12;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_port(), target);
  }

  // uint32 pci = 13;
  if (this->_internal_pci() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_pci(), target);
  }

  // uint32 earfcn = 14;
  if (this->_internal_earfcn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_earfcn(), target);
  }

  // .onos.ransim.types.CellType cell_type = 15;
  if (this->_internal_cell_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      15, this->_internal_cell_type(), target);
  }

  // uint32 rrc_idle_count = 16;
  if (this->_internal_rrc_idle_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_rrc_idle_count(), target);
  }

  // uint32 rrc_connected_count = 17;
  if (this->_internal_rrc_connected_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_rrc_connected_count(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.ransim.types.Cell)
  return target;
}

size_t Cell::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.ransim.types.Cell)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint64 neighbors = 7 [(.gogoproto.casttype) = "NCGI"];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->neighbors_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _neighbors_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<uint32, uint64> crnti_map = 10 [(.gogoproto.castkey) = "CRNTI", (.gogoproto.castvalue) = "IMSI"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_crnti_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint64_t >::const_iterator
      it = this->_internal_crnti_map().begin();
      it != this->_internal_crnti_map().end(); ++it) {
    total_size += Cell_CrntiMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string color = 5;
  if (!this->_internal_color().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_color());
  }

  // .onos.ransim.types.Point location = 3;
  if (this->_internal_has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  // .onos.ransim.types.Sector sector = 4;
  if (this->_internal_has_sector()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sector_);
  }

  // .onos.ransim.types.MeasurementParams measurement_params = 9;
  if (this->_internal_has_measurement_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *measurement_params_);
  }

  // uint64 ecgi = 1 [(.gogoproto.customname) = "NCGI", (.gogoproto.casttype) = "NCGI"];
  if (this->_internal_ecgi() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_ecgi());
  }

  // double tx_power_db = 8 [(.gogoproto.customname) = "TxPowerdB"];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_tx_power_db = this->_internal_tx_power_db();
  uint64_t raw_tx_power_db;
  memcpy(&raw_tx_power_db, &tmp_tx_power_db, sizeof(tmp_tx_power_db));
  if (raw_tx_power_db != 0) {
    total_size += 1 + 8;
  }

  // uint32 max_ues = 6 [(.gogoproto.customname) = "MaxUEs"];
  if (this->_internal_max_ues() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_max_ues());
  }

  // uint32 crnti_index = 11;
  if (this->_internal_crnti_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_crnti_index());
  }

  // uint32 port = 12;
  if (this->_internal_port() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
  }

  // uint32 pci = 13;
  if (this->_internal_pci() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_pci());
  }

  // uint32 earfcn = 14;
  if (this->_internal_earfcn() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_earfcn());
  }

  // .onos.ransim.types.CellType cell_type = 15;
  if (this->_internal_cell_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cell_type());
  }

  // uint32 rrc_idle_count = 16;
  if (this->_internal_rrc_idle_count() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rrc_idle_count());
  }

  // uint32 rrc_connected_count = 17;
  if (this->_internal_rrc_connected_count() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rrc_connected_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Cell::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Cell::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Cell::GetClassData() const { return &_class_data_; }

void Cell::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Cell *>(to)->MergeFrom(
      static_cast<const Cell &>(from));
}


void Cell::MergeFrom(const Cell& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.ransim.types.Cell)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  neighbors_.MergeFrom(from.neighbors_);
  crnti_map_.MergeFrom(from.crnti_map_);
  if (!from._internal_color().empty()) {
    _internal_set_color(from._internal_color());
  }
  if (from._internal_has_location()) {
    _internal_mutable_location()->::onos::ransim::types::Point::MergeFrom(from._internal_location());
  }
  if (from._internal_has_sector()) {
    _internal_mutable_sector()->::onos::ransim::types::Sector::MergeFrom(from._internal_sector());
  }
  if (from._internal_has_measurement_params()) {
    _internal_mutable_measurement_params()->::onos::ransim::types::MeasurementParams::MergeFrom(from._internal_measurement_params());
  }
  if (from._internal_ecgi() != 0) {
    _internal_set_ecgi(from._internal_ecgi());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_tx_power_db = from._internal_tx_power_db();
  uint64_t raw_tx_power_db;
  memcpy(&raw_tx_power_db, &tmp_tx_power_db, sizeof(tmp_tx_power_db));
  if (raw_tx_power_db != 0) {
    _internal_set_tx_power_db(from._internal_tx_power_db());
  }
  if (from._internal_max_ues() != 0) {
    _internal_set_max_ues(from._internal_max_ues());
  }
  if (from._internal_crnti_index() != 0) {
    _internal_set_crnti_index(from._internal_crnti_index());
  }
  if (from._internal_port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from._internal_pci() != 0) {
    _internal_set_pci(from._internal_pci());
  }
  if (from._internal_earfcn() != 0) {
    _internal_set_earfcn(from._internal_earfcn());
  }
  if (from._internal_cell_type() != 0) {
    _internal_set_cell_type(from._internal_cell_type());
  }
  if (from._internal_rrc_idle_count() != 0) {
    _internal_set_rrc_idle_count(from._internal_rrc_idle_count());
  }
  if (from._internal_rrc_connected_count() != 0) {
    _internal_set_rrc_connected_count(from._internal_rrc_connected_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Cell::CopyFrom(const Cell& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.ransim.types.Cell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Cell::IsInitialized() const {
  return true;
}

void Cell::InternalSwap(Cell* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  neighbors_.InternalSwap(&other->neighbors_);
  crnti_map_.InternalSwap(&other->crnti_map_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &color_, lhs_arena,
      &other->color_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Cell, rrc_connected_count_)
      + sizeof(Cell::rrc_connected_count_)
      - PROTOBUF_FIELD_OFFSET(Cell, location_)>(
          reinterpret_cast<char*>(&location_),
          reinterpret_cast<char*>(&other->location_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Cell::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fransim_2ftypes_2ftypes_2eproto_getter, &descriptor_table_onos_2fransim_2ftypes_2ftypes_2eproto_once,
      file_level_metadata_onos_2fransim_2ftypes_2ftypes_2eproto[8]);
}

// ===================================================================

MeasurementParams_NcellIndividualOffsetsEntry_DoNotUse::MeasurementParams_NcellIndividualOffsetsEntry_DoNotUse() {}
MeasurementParams_NcellIndividualOffsetsEntry_DoNotUse::MeasurementParams_NcellIndividualOffsetsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void MeasurementParams_NcellIndividualOffsetsEntry_DoNotUse::MergeFrom(const MeasurementParams_NcellIndividualOffsetsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata MeasurementParams_NcellIndividualOffsetsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fransim_2ftypes_2ftypes_2eproto_getter, &descriptor_table_onos_2fransim_2ftypes_2ftypes_2eproto_once,
      file_level_metadata_onos_2fransim_2ftypes_2ftypes_2eproto[9]);
}

// ===================================================================

class MeasurementParams::_Internal {
 public:
  static const ::onos::ransim::types::EventA3Params& event_a3_params(const MeasurementParams* msg);
};

const ::onos::ransim::types::EventA3Params&
MeasurementParams::_Internal::event_a3_params(const MeasurementParams* msg) {
  return *msg->event_a3_params_;
}
MeasurementParams::MeasurementParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ncell_individual_offsets_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.ransim.types.MeasurementParams)
}
MeasurementParams::MeasurementParams(const MeasurementParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ncell_individual_offsets_.MergeFrom(from.ncell_individual_offsets_);
  if (from._internal_has_event_a3_params()) {
    event_a3_params_ = new ::onos::ransim::types::EventA3Params(*from.event_a3_params_);
  } else {
    event_a3_params_ = nullptr;
  }
  ::memcpy(&time_to_trigger_, &from.time_to_trigger_,
    static_cast<size_t>(reinterpret_cast<char*>(&hysteresis_) -
    reinterpret_cast<char*>(&time_to_trigger_)) + sizeof(hysteresis_));
  // @@protoc_insertion_point(copy_constructor:onos.ransim.types.MeasurementParams)
}

inline void MeasurementParams::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_a3_params_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hysteresis_) -
    reinterpret_cast<char*>(&event_a3_params_)) + sizeof(hysteresis_));
}

MeasurementParams::~MeasurementParams() {
  // @@protoc_insertion_point(destructor:onos.ransim.types.MeasurementParams)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MeasurementParams::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete event_a3_params_;
}

void MeasurementParams::ArenaDtor(void* object) {
  MeasurementParams* _this = reinterpret_cast< MeasurementParams* >(object);
  (void)_this;
  _this->ncell_individual_offsets_. ~MapField();
}
inline void MeasurementParams::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &MeasurementParams::ArenaDtor);
  }
}
void MeasurementParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MeasurementParams::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.ransim.types.MeasurementParams)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ncell_individual_offsets_.Clear();
  if (GetArenaForAllocation() == nullptr && event_a3_params_ != nullptr) {
    delete event_a3_params_;
  }
  event_a3_params_ = nullptr;
  ::memset(&time_to_trigger_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&hysteresis_) -
      reinterpret_cast<char*>(&time_to_trigger_)) + sizeof(hysteresis_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MeasurementParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 time_to_trigger = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          time_to_trigger_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 frequency_offset = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          frequency_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 pcell_individual_offset = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          pcell_individual_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint64, int32> ncell_individual_offsets = 4 [(.gogoproto.castkey) = "NCGI"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&ncell_individual_offsets_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 hysteresis = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          hysteresis_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.ransim.types.EventA3Params event_a3_params = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_event_a3_params(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MeasurementParams::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.ransim.types.MeasurementParams)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 time_to_trigger = 1;
  if (this->_internal_time_to_trigger() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_time_to_trigger(), target);
  }

  // int32 frequency_offset = 2;
  if (this->_internal_frequency_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_frequency_offset(), target);
  }

  // int32 pcell_individual_offset = 3;
  if (this->_internal_pcell_individual_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_pcell_individual_offset(), target);
  }

  // map<uint64, int32> ncell_individual_offsets = 4 [(.gogoproto.castkey) = "NCGI"];
  if (!this->_internal_ncell_individual_offsets().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, int32_t >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< uint64_t, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_ncell_individual_offsets().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_ncell_individual_offsets().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, int32_t >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, int32_t >::const_iterator
          it = this->_internal_ncell_individual_offsets().begin();
          it != this->_internal_ncell_individual_offsets().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = MeasurementParams_NcellIndividualOffsetsEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, int32_t >::const_iterator
          it = this->_internal_ncell_individual_offsets().begin();
          it != this->_internal_ncell_individual_offsets().end(); ++it) {
        target = MeasurementParams_NcellIndividualOffsetsEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
      }
    }
  }

  // int32 hysteresis = 5;
  if (this->_internal_hysteresis() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_hysteresis(), target);
  }

  // .onos.ransim.types.EventA3Params event_a3_params = 6;
  if (this->_internal_has_event_a3_params()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::event_a3_params(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.ransim.types.MeasurementParams)
  return target;
}

size_t MeasurementParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.ransim.types.MeasurementParams)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint64, int32> ncell_individual_offsets = 4 [(.gogoproto.castkey) = "NCGI"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_ncell_individual_offsets_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, int32_t >::const_iterator
      it = this->_internal_ncell_individual_offsets().begin();
      it != this->_internal_ncell_individual_offsets().end(); ++it) {
    total_size += MeasurementParams_NcellIndividualOffsetsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // .onos.ransim.types.EventA3Params event_a3_params = 6;
  if (this->_internal_has_event_a3_params()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *event_a3_params_);
  }

  // int32 time_to_trigger = 1;
  if (this->_internal_time_to_trigger() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_time_to_trigger());
  }

  // int32 frequency_offset = 2;
  if (this->_internal_frequency_offset() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_frequency_offset());
  }

  // int32 pcell_individual_offset = 3;
  if (this->_internal_pcell_individual_offset() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_pcell_individual_offset());
  }

  // int32 hysteresis = 5;
  if (this->_internal_hysteresis() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_hysteresis());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MeasurementParams::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MeasurementParams::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MeasurementParams::GetClassData() const { return &_class_data_; }

void MeasurementParams::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MeasurementParams *>(to)->MergeFrom(
      static_cast<const MeasurementParams &>(from));
}


void MeasurementParams::MergeFrom(const MeasurementParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.ransim.types.MeasurementParams)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ncell_individual_offsets_.MergeFrom(from.ncell_individual_offsets_);
  if (from._internal_has_event_a3_params()) {
    _internal_mutable_event_a3_params()->::onos::ransim::types::EventA3Params::MergeFrom(from._internal_event_a3_params());
  }
  if (from._internal_time_to_trigger() != 0) {
    _internal_set_time_to_trigger(from._internal_time_to_trigger());
  }
  if (from._internal_frequency_offset() != 0) {
    _internal_set_frequency_offset(from._internal_frequency_offset());
  }
  if (from._internal_pcell_individual_offset() != 0) {
    _internal_set_pcell_individual_offset(from._internal_pcell_individual_offset());
  }
  if (from._internal_hysteresis() != 0) {
    _internal_set_hysteresis(from._internal_hysteresis());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MeasurementParams::CopyFrom(const MeasurementParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.ransim.types.MeasurementParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeasurementParams::IsInitialized() const {
  return true;
}

void MeasurementParams::InternalSwap(MeasurementParams* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ncell_individual_offsets_.InternalSwap(&other->ncell_individual_offsets_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MeasurementParams, hysteresis_)
      + sizeof(MeasurementParams::hysteresis_)
      - PROTOBUF_FIELD_OFFSET(MeasurementParams, event_a3_params_)>(
          reinterpret_cast<char*>(&event_a3_params_),
          reinterpret_cast<char*>(&other->event_a3_params_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MeasurementParams::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fransim_2ftypes_2ftypes_2eproto_getter, &descriptor_table_onos_2fransim_2ftypes_2ftypes_2eproto_once,
      file_level_metadata_onos_2fransim_2ftypes_2ftypes_2eproto[10]);
}

// ===================================================================

class EventA3Params::_Internal {
 public:
};

EventA3Params::EventA3Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.ransim.types.EventA3Params)
}
EventA3Params::EventA3Params(const EventA3Params& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&a3_offset_, &from.a3_offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&report_on_leave_) -
    reinterpret_cast<char*>(&a3_offset_)) + sizeof(report_on_leave_));
  // @@protoc_insertion_point(copy_constructor:onos.ransim.types.EventA3Params)
}

inline void EventA3Params::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&a3_offset_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&report_on_leave_) -
    reinterpret_cast<char*>(&a3_offset_)) + sizeof(report_on_leave_));
}

EventA3Params::~EventA3Params() {
  // @@protoc_insertion_point(destructor:onos.ransim.types.EventA3Params)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EventA3Params::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EventA3Params::ArenaDtor(void* object) {
  EventA3Params* _this = reinterpret_cast< EventA3Params* >(object);
  (void)_this;
}
void EventA3Params::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventA3Params::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EventA3Params::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.ransim.types.EventA3Params)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&a3_offset_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&report_on_leave_) -
      reinterpret_cast<char*>(&a3_offset_)) + sizeof(report_on_leave_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventA3Params::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 a3_offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          a3_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool report_on_leave = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          report_on_leave_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EventA3Params::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.ransim.types.EventA3Params)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 a3_offset = 1;
  if (this->_internal_a3_offset() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_a3_offset(), target);
  }

  // bool report_on_leave = 2;
  if (this->_internal_report_on_leave() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_report_on_leave(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.ransim.types.EventA3Params)
  return target;
}

size_t EventA3Params::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.ransim.types.EventA3Params)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 a3_offset = 1;
  if (this->_internal_a3_offset() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_a3_offset());
  }

  // bool report_on_leave = 2;
  if (this->_internal_report_on_leave() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventA3Params::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EventA3Params::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventA3Params::GetClassData() const { return &_class_data_; }

void EventA3Params::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EventA3Params *>(to)->MergeFrom(
      static_cast<const EventA3Params &>(from));
}


void EventA3Params::MergeFrom(const EventA3Params& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.ransim.types.EventA3Params)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_a3_offset() != 0) {
    _internal_set_a3_offset(from._internal_a3_offset());
  }
  if (from._internal_report_on_leave() != 0) {
    _internal_set_report_on_leave(from._internal_report_on_leave());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventA3Params::CopyFrom(const EventA3Params& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.ransim.types.EventA3Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventA3Params::IsInitialized() const {
  return true;
}

void EventA3Params::InternalSwap(EventA3Params* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EventA3Params, report_on_leave_)
      + sizeof(EventA3Params::report_on_leave_)
      - PROTOBUF_FIELD_OFFSET(EventA3Params, a3_offset_)>(
          reinterpret_cast<char*>(&a3_offset_),
          reinterpret_cast<char*>(&other->a3_offset_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EventA3Params::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fransim_2ftypes_2ftypes_2eproto_getter, &descriptor_table_onos_2fransim_2ftypes_2ftypes_2eproto_once,
      file_level_metadata_onos_2fransim_2ftypes_2ftypes_2eproto[11]);
}

// ===================================================================

class Node::_Internal {
 public:
};

Node::Node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  controllers_(arena),
  service_models_(arena),
  cell_ecgis_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.ransim.types.Node)
}
Node::Node(const Node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      controllers_(from.controllers_),
      service_models_(from.service_models_),
      cell_ecgis_(from.cell_ecgis_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArenaForAllocation());
  }
  enbid_ = from.enbid_;
  // @@protoc_insertion_point(copy_constructor:onos.ransim.types.Node)
}

inline void Node::SharedCtor() {
status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
enbid_ = 0u;
}

Node::~Node() {
  // @@protoc_insertion_point(destructor:onos.ransim.types.Node)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Node::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Node::ArenaDtor(void* object) {
  Node* _this = reinterpret_cast< Node* >(object);
  (void)_this;
}
void Node::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Node::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.ransim.types.Node)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  controllers_.Clear();
  service_models_.Clear();
  cell_ecgis_.Clear();
  status_.ClearToEmpty();
  enbid_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Node::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 enbid = 1 [(.gogoproto.customname) = "GnbID", (.gogoproto.casttype) = "GnbID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          enbid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string controllers = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_controllers();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.ransim.types.Node.controllers"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string service_models = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_service_models();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.ransim.types.Node.service_models"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 cell_ecgis = 4 [(.gogoproto.customname) = "CellNCGIs", (.gogoproto.casttype) = "NCGI"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_cell_ecgis(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_cell_ecgis(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.ransim.types.Node.status"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Node::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.ransim.types.Node)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 enbid = 1 [(.gogoproto.customname) = "GnbID", (.gogoproto.casttype) = "GnbID"];
  if (this->_internal_enbid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_enbid(), target);
  }

  // repeated string controllers = 2;
  for (int i = 0, n = this->_internal_controllers_size(); i < n; i++) {
    const auto& s = this->_internal_controllers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.ransim.types.Node.controllers");
    target = stream->WriteString(2, s, target);
  }

  // repeated string service_models = 3;
  for (int i = 0, n = this->_internal_service_models_size(); i < n; i++) {
    const auto& s = this->_internal_service_models(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.ransim.types.Node.service_models");
    target = stream->WriteString(3, s, target);
  }

  // repeated uint64 cell_ecgis = 4 [(.gogoproto.customname) = "CellNCGIs", (.gogoproto.casttype) = "NCGI"];
  {
    int byte_size = _cell_ecgis_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          4, _internal_cell_ecgis(), byte_size, target);
    }
  }

  // string status = 5;
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.ransim.types.Node.status");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.ransim.types.Node)
  return target;
}

size_t Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.ransim.types.Node)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string controllers = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(controllers_.size());
  for (int i = 0, n = controllers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      controllers_.Get(i));
  }

  // repeated string service_models = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(service_models_.size());
  for (int i = 0, n = service_models_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      service_models_.Get(i));
  }

  // repeated uint64 cell_ecgis = 4 [(.gogoproto.customname) = "CellNCGIs", (.gogoproto.casttype) = "NCGI"];
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->cell_ecgis_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _cell_ecgis_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string status = 5;
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // uint32 enbid = 1 [(.gogoproto.customname) = "GnbID", (.gogoproto.casttype) = "GnbID"];
  if (this->_internal_enbid() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_enbid());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Node::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Node::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Node::GetClassData() const { return &_class_data_; }

void Node::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Node *>(to)->MergeFrom(
      static_cast<const Node &>(from));
}


void Node::MergeFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.ransim.types.Node)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  controllers_.MergeFrom(from.controllers_);
  service_models_.MergeFrom(from.service_models_);
  cell_ecgis_.MergeFrom(from.cell_ecgis_);
  if (!from._internal_status().empty()) {
    _internal_set_status(from._internal_status());
  }
  if (from._internal_enbid() != 0) {
    _internal_set_enbid(from._internal_enbid());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Node::CopyFrom(const Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.ransim.types.Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Node::IsInitialized() const {
  return true;
}

void Node::InternalSwap(Node* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  controllers_.InternalSwap(&other->controllers_);
  service_models_.InternalSwap(&other->service_models_);
  cell_ecgis_.InternalSwap(&other->cell_ecgis_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &status_, lhs_arena,
      &other->status_, rhs_arena
  );
  swap(enbid_, other->enbid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Node::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fransim_2ftypes_2ftypes_2eproto_getter, &descriptor_table_onos_2fransim_2ftypes_2ftypes_2eproto_once,
      file_level_metadata_onos_2fransim_2ftypes_2ftypes_2eproto[12]);
}

// ===================================================================

class MapLayout::_Internal {
 public:
  static const ::onos::ransim::types::Point& center(const MapLayout* msg);
};

const ::onos::ransim::types::Point&
MapLayout::_Internal::center(const MapLayout* msg) {
  return *msg->center_;
}
MapLayout::MapLayout(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.ransim.types.MapLayout)
}
MapLayout::MapLayout(const MapLayout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_center()) {
    center_ = new ::onos::ransim::types::Point(*from.center_);
  } else {
    center_ = nullptr;
  }
  ::memcpy(&zoom_, &from.zoom_,
    static_cast<size_t>(reinterpret_cast<char*>(&locations_scale_) -
    reinterpret_cast<char*>(&zoom_)) + sizeof(locations_scale_));
  // @@protoc_insertion_point(copy_constructor:onos.ransim.types.MapLayout)
}

inline void MapLayout::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&center_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&locations_scale_) -
    reinterpret_cast<char*>(&center_)) + sizeof(locations_scale_));
}

MapLayout::~MapLayout() {
  // @@protoc_insertion_point(destructor:onos.ransim.types.MapLayout)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MapLayout::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete center_;
}

void MapLayout::ArenaDtor(void* object) {
  MapLayout* _this = reinterpret_cast< MapLayout* >(object);
  (void)_this;
}
void MapLayout::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MapLayout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MapLayout::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.ransim.types.MapLayout)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
  ::memset(&zoom_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&locations_scale_) -
      reinterpret_cast<char*>(&zoom_)) + sizeof(locations_scale_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MapLayout::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .onos.ransim.types.Point center = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_center(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float zoom = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 21)) {
          zoom_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool fade = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          fade_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool show_routes = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          show_routes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool show_power = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          show_power_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 min_ues = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          min_ues_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 max_ues = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          max_ues_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 current_routes = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          current_routes_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float locations_scale = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 77)) {
          locations_scale_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MapLayout::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.ransim.types.MapLayout)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .onos.ransim.types.Point center = 1;
  if (this->_internal_has_center()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::center(this), target, stream);
  }

  // float zoom = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_zoom = this->_internal_zoom();
  uint32_t raw_zoom;
  memcpy(&raw_zoom, &tmp_zoom, sizeof(tmp_zoom));
  if (raw_zoom != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_zoom(), target);
  }

  // bool fade = 3;
  if (this->_internal_fade() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_fade(), target);
  }

  // bool show_routes = 4;
  if (this->_internal_show_routes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_show_routes(), target);
  }

  // bool show_power = 5;
  if (this->_internal_show_power() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_show_power(), target);
  }

  // uint32 min_ues = 6;
  if (this->_internal_min_ues() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_min_ues(), target);
  }

  // uint32 max_ues = 7;
  if (this->_internal_max_ues() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_max_ues(), target);
  }

  // uint32 current_routes = 8;
  if (this->_internal_current_routes() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_current_routes(), target);
  }

  // float locations_scale = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_locations_scale = this->_internal_locations_scale();
  uint32_t raw_locations_scale;
  memcpy(&raw_locations_scale, &tmp_locations_scale, sizeof(tmp_locations_scale));
  if (raw_locations_scale != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_locations_scale(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.ransim.types.MapLayout)
  return target;
}

size_t MapLayout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.ransim.types.MapLayout)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .onos.ransim.types.Point center = 1;
  if (this->_internal_has_center()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *center_);
  }

  // float zoom = 2;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_zoom = this->_internal_zoom();
  uint32_t raw_zoom;
  memcpy(&raw_zoom, &tmp_zoom, sizeof(tmp_zoom));
  if (raw_zoom != 0) {
    total_size += 1 + 4;
  }

  // bool fade = 3;
  if (this->_internal_fade() != 0) {
    total_size += 1 + 1;
  }

  // bool show_routes = 4;
  if (this->_internal_show_routes() != 0) {
    total_size += 1 + 1;
  }

  // bool show_power = 5;
  if (this->_internal_show_power() != 0) {
    total_size += 1 + 1;
  }

  // uint32 min_ues = 6;
  if (this->_internal_min_ues() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_min_ues());
  }

  // uint32 max_ues = 7;
  if (this->_internal_max_ues() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_max_ues());
  }

  // uint32 current_routes = 8;
  if (this->_internal_current_routes() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_current_routes());
  }

  // float locations_scale = 9;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_locations_scale = this->_internal_locations_scale();
  uint32_t raw_locations_scale;
  memcpy(&raw_locations_scale, &tmp_locations_scale, sizeof(tmp_locations_scale));
  if (raw_locations_scale != 0) {
    total_size += 1 + 4;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MapLayout::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MapLayout::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MapLayout::GetClassData() const { return &_class_data_; }

void MapLayout::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MapLayout *>(to)->MergeFrom(
      static_cast<const MapLayout &>(from));
}


void MapLayout::MergeFrom(const MapLayout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.ransim.types.MapLayout)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_center()) {
    _internal_mutable_center()->::onos::ransim::types::Point::MergeFrom(from._internal_center());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_zoom = from._internal_zoom();
  uint32_t raw_zoom;
  memcpy(&raw_zoom, &tmp_zoom, sizeof(tmp_zoom));
  if (raw_zoom != 0) {
    _internal_set_zoom(from._internal_zoom());
  }
  if (from._internal_fade() != 0) {
    _internal_set_fade(from._internal_fade());
  }
  if (from._internal_show_routes() != 0) {
    _internal_set_show_routes(from._internal_show_routes());
  }
  if (from._internal_show_power() != 0) {
    _internal_set_show_power(from._internal_show_power());
  }
  if (from._internal_min_ues() != 0) {
    _internal_set_min_ues(from._internal_min_ues());
  }
  if (from._internal_max_ues() != 0) {
    _internal_set_max_ues(from._internal_max_ues());
  }
  if (from._internal_current_routes() != 0) {
    _internal_set_current_routes(from._internal_current_routes());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_locations_scale = from._internal_locations_scale();
  uint32_t raw_locations_scale;
  memcpy(&raw_locations_scale, &tmp_locations_scale, sizeof(tmp_locations_scale));
  if (raw_locations_scale != 0) {
    _internal_set_locations_scale(from._internal_locations_scale());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MapLayout::CopyFrom(const MapLayout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.ransim.types.MapLayout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapLayout::IsInitialized() const {
  return true;
}

void MapLayout::InternalSwap(MapLayout* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MapLayout, locations_scale_)
      + sizeof(MapLayout::locations_scale_)
      - PROTOBUF_FIELD_OFFSET(MapLayout, center_)>(
          reinterpret_cast<char*>(&center_),
          reinterpret_cast<char*>(&other->center_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MapLayout::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fransim_2ftypes_2ftypes_2eproto_getter, &descriptor_table_onos_2fransim_2ftypes_2ftypes_2eproto_once,
      file_level_metadata_onos_2fransim_2ftypes_2ftypes_2eproto[13]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace types
}  // namespace ransim
}  // namespace onos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::onos::ransim::types::Point* Arena::CreateMaybeMessage< ::onos::ransim::types::Point >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::ransim::types::Point >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::ransim::types::Sector* Arena::CreateMaybeMessage< ::onos::ransim::types::Sector >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::ransim::types::Sector >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::ransim::types::Route* Arena::CreateMaybeMessage< ::onos::ransim::types::Route >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::ransim::types::Route >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::ransim::types::Ue* Arena::CreateMaybeMessage< ::onos::ransim::types::Ue >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::ransim::types::Ue >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::ransim::types::UeIdentity* Arena::CreateMaybeMessage< ::onos::ransim::types::UeIdentity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::ransim::types::UeIdentity >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::ransim::types::Guami* Arena::CreateMaybeMessage< ::onos::ransim::types::Guami >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::ransim::types::Guami >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::ransim::types::UeMetrics* Arena::CreateMaybeMessage< ::onos::ransim::types::UeMetrics >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::ransim::types::UeMetrics >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::ransim::types::Cell_CrntiMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::onos::ransim::types::Cell_CrntiMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::ransim::types::Cell_CrntiMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::ransim::types::Cell* Arena::CreateMaybeMessage< ::onos::ransim::types::Cell >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::ransim::types::Cell >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::ransim::types::MeasurementParams_NcellIndividualOffsetsEntry_DoNotUse* Arena::CreateMaybeMessage< ::onos::ransim::types::MeasurementParams_NcellIndividualOffsetsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::ransim::types::MeasurementParams_NcellIndividualOffsetsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::ransim::types::MeasurementParams* Arena::CreateMaybeMessage< ::onos::ransim::types::MeasurementParams >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::ransim::types::MeasurementParams >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::ransim::types::EventA3Params* Arena::CreateMaybeMessage< ::onos::ransim::types::EventA3Params >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::ransim::types::EventA3Params >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::ransim::types::Node* Arena::CreateMaybeMessage< ::onos::ransim::types::Node >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::ransim::types::Node >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::ransim::types::MapLayout* Arena::CreateMaybeMessage< ::onos::ransim::types::MapLayout >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::ransim::types::MapLayout >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
