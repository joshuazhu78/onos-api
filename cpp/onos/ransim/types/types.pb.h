// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onos/ransim/types/types.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_onos_2fransim_2ftypes_2ftypes_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_onos_2fransim_2ftypes_2ftypes_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_onos_2fransim_2ftypes_2ftypes_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_onos_2fransim_2ftypes_2ftypes_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_onos_2fransim_2ftypes_2ftypes_2eproto;
namespace onos {
namespace ransim {
namespace types {
class Cell;
struct CellDefaultTypeInternal;
extern CellDefaultTypeInternal _Cell_default_instance_;
class Cell_CrntiMapEntry_DoNotUse;
struct Cell_CrntiMapEntry_DoNotUseDefaultTypeInternal;
extern Cell_CrntiMapEntry_DoNotUseDefaultTypeInternal _Cell_CrntiMapEntry_DoNotUse_default_instance_;
class EventA3Params;
struct EventA3ParamsDefaultTypeInternal;
extern EventA3ParamsDefaultTypeInternal _EventA3Params_default_instance_;
class Guami;
struct GuamiDefaultTypeInternal;
extern GuamiDefaultTypeInternal _Guami_default_instance_;
class MapLayout;
struct MapLayoutDefaultTypeInternal;
extern MapLayoutDefaultTypeInternal _MapLayout_default_instance_;
class MeasurementParams;
struct MeasurementParamsDefaultTypeInternal;
extern MeasurementParamsDefaultTypeInternal _MeasurementParams_default_instance_;
class MeasurementParams_NcellIndividualOffsetsEntry_DoNotUse;
struct MeasurementParams_NcellIndividualOffsetsEntry_DoNotUseDefaultTypeInternal;
extern MeasurementParams_NcellIndividualOffsetsEntry_DoNotUseDefaultTypeInternal _MeasurementParams_NcellIndividualOffsetsEntry_DoNotUse_default_instance_;
class Node;
struct NodeDefaultTypeInternal;
extern NodeDefaultTypeInternal _Node_default_instance_;
class Point;
struct PointDefaultTypeInternal;
extern PointDefaultTypeInternal _Point_default_instance_;
class Route;
struct RouteDefaultTypeInternal;
extern RouteDefaultTypeInternal _Route_default_instance_;
class Sector;
struct SectorDefaultTypeInternal;
extern SectorDefaultTypeInternal _Sector_default_instance_;
class Ue;
struct UeDefaultTypeInternal;
extern UeDefaultTypeInternal _Ue_default_instance_;
class UeIdentity;
struct UeIdentityDefaultTypeInternal;
extern UeIdentityDefaultTypeInternal _UeIdentity_default_instance_;
class UeMetrics;
struct UeMetricsDefaultTypeInternal;
extern UeMetricsDefaultTypeInternal _UeMetrics_default_instance_;
}  // namespace types
}  // namespace ransim
}  // namespace onos
PROTOBUF_NAMESPACE_OPEN
template<> ::onos::ransim::types::Cell* Arena::CreateMaybeMessage<::onos::ransim::types::Cell>(Arena*);
template<> ::onos::ransim::types::Cell_CrntiMapEntry_DoNotUse* Arena::CreateMaybeMessage<::onos::ransim::types::Cell_CrntiMapEntry_DoNotUse>(Arena*);
template<> ::onos::ransim::types::EventA3Params* Arena::CreateMaybeMessage<::onos::ransim::types::EventA3Params>(Arena*);
template<> ::onos::ransim::types::Guami* Arena::CreateMaybeMessage<::onos::ransim::types::Guami>(Arena*);
template<> ::onos::ransim::types::MapLayout* Arena::CreateMaybeMessage<::onos::ransim::types::MapLayout>(Arena*);
template<> ::onos::ransim::types::MeasurementParams* Arena::CreateMaybeMessage<::onos::ransim::types::MeasurementParams>(Arena*);
template<> ::onos::ransim::types::MeasurementParams_NcellIndividualOffsetsEntry_DoNotUse* Arena::CreateMaybeMessage<::onos::ransim::types::MeasurementParams_NcellIndividualOffsetsEntry_DoNotUse>(Arena*);
template<> ::onos::ransim::types::Node* Arena::CreateMaybeMessage<::onos::ransim::types::Node>(Arena*);
template<> ::onos::ransim::types::Point* Arena::CreateMaybeMessage<::onos::ransim::types::Point>(Arena*);
template<> ::onos::ransim::types::Route* Arena::CreateMaybeMessage<::onos::ransim::types::Route>(Arena*);
template<> ::onos::ransim::types::Sector* Arena::CreateMaybeMessage<::onos::ransim::types::Sector>(Arena*);
template<> ::onos::ransim::types::Ue* Arena::CreateMaybeMessage<::onos::ransim::types::Ue>(Arena*);
template<> ::onos::ransim::types::UeIdentity* Arena::CreateMaybeMessage<::onos::ransim::types::UeIdentity>(Arena*);
template<> ::onos::ransim::types::UeMetrics* Arena::CreateMaybeMessage<::onos::ransim::types::UeMetrics>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace onos {
namespace ransim {
namespace types {

enum CellType : int {
  FEMTO = 0,
  ENTERPRISE = 1,
  OUTDOOR_SMALL = 2,
  MACRO = 3,
  CellType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CellType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CellType_IsValid(int value);
constexpr CellType CellType_MIN = FEMTO;
constexpr CellType CellType_MAX = MACRO;
constexpr int CellType_ARRAYSIZE = CellType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CellType_descriptor();
template<typename T>
inline const std::string& CellType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CellType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CellType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CellType_descriptor(), enum_t_value);
}
inline bool CellType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CellType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CellType>(
    CellType_descriptor(), name, value);
}
// ===================================================================

class Point final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.types.Point) */ {
 public:
  inline Point() : Point(nullptr) {}
  ~Point() override;
  explicit constexpr Point(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Point(const Point& from);
  Point(Point&& from) noexcept
    : Point() {
    *this = ::std::move(from);
  }

  inline Point& operator=(const Point& from) {
    CopyFrom(from);
    return *this;
  }
  inline Point& operator=(Point&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Point& default_instance() {
    return *internal_default_instance();
  }
  static inline const Point* internal_default_instance() {
    return reinterpret_cast<const Point*>(
               &_Point_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Point& a, Point& b) {
    a.Swap(&b);
  }
  inline void Swap(Point* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Point* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Point* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Point>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Point& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Point& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Point* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.types.Point";
  }
  protected:
  explicit Point(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatFieldNumber = 1,
    kLngFieldNumber = 2,
  };
  // double lat = 1;
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // double lng = 2;
  void clear_lng();
  double lng() const;
  void set_lng(double value);
  private:
  double _internal_lng() const;
  void _internal_set_lng(double value);
  public:

  // @@protoc_insertion_point(class_scope:onos.ransim.types.Point)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double lat_;
  double lng_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2ftypes_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class Sector final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.types.Sector) */ {
 public:
  inline Sector() : Sector(nullptr) {}
  ~Sector() override;
  explicit constexpr Sector(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Sector(const Sector& from);
  Sector(Sector&& from) noexcept
    : Sector() {
    *this = ::std::move(from);
  }

  inline Sector& operator=(const Sector& from) {
    CopyFrom(from);
    return *this;
  }
  inline Sector& operator=(Sector&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Sector& default_instance() {
    return *internal_default_instance();
  }
  static inline const Sector* internal_default_instance() {
    return reinterpret_cast<const Sector*>(
               &_Sector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Sector& a, Sector& b) {
    a.Swap(&b);
  }
  inline void Swap(Sector* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Sector* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Sector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Sector>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Sector& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Sector& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Sector* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.types.Sector";
  }
  protected:
  explicit Sector(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCentroidFieldNumber = 3,
    kAzimuthFieldNumber = 1,
    kArcFieldNumber = 2,
    kHeightFieldNumber = 4,
    kTiltFieldNumber = 5,
  };
  // .onos.ransim.types.Point centroid = 3;
  bool has_centroid() const;
  private:
  bool _internal_has_centroid() const;
  public:
  void clear_centroid();
  const ::onos::ransim::types::Point& centroid() const;
  PROTOBUF_NODISCARD ::onos::ransim::types::Point* release_centroid();
  ::onos::ransim::types::Point* mutable_centroid();
  void set_allocated_centroid(::onos::ransim::types::Point* centroid);
  private:
  const ::onos::ransim::types::Point& _internal_centroid() const;
  ::onos::ransim::types::Point* _internal_mutable_centroid();
  public:
  void unsafe_arena_set_allocated_centroid(
      ::onos::ransim::types::Point* centroid);
  ::onos::ransim::types::Point* unsafe_arena_release_centroid();

  // int32 azimuth = 1;
  void clear_azimuth();
  int32_t azimuth() const;
  void set_azimuth(int32_t value);
  private:
  int32_t _internal_azimuth() const;
  void _internal_set_azimuth(int32_t value);
  public:

  // int32 arc = 2;
  void clear_arc();
  int32_t arc() const;
  void set_arc(int32_t value);
  private:
  int32_t _internal_arc() const;
  void _internal_set_arc(int32_t value);
  public:

  // int32 height = 4;
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // int32 tilt = 5;
  void clear_tilt();
  int32_t tilt() const;
  void set_tilt(int32_t value);
  private:
  int32_t _internal_tilt() const;
  void _internal_set_tilt(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.ransim.types.Sector)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::ransim::types::Point* centroid_;
  int32_t azimuth_;
  int32_t arc_;
  int32_t height_;
  int32_t tilt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2ftypes_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class Route final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.types.Route) */ {
 public:
  inline Route() : Route(nullptr) {}
  ~Route() override;
  explicit constexpr Route(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Route(const Route& from);
  Route(Route&& from) noexcept
    : Route() {
    *this = ::std::move(from);
  }

  inline Route& operator=(const Route& from) {
    CopyFrom(from);
    return *this;
  }
  inline Route& operator=(Route&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Route& default_instance() {
    return *internal_default_instance();
  }
  static inline const Route* internal_default_instance() {
    return reinterpret_cast<const Route*>(
               &_Route_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Route& a, Route& b) {
    a.Swap(&b);
  }
  inline void Swap(Route* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Route* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Route* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Route>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Route& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Route& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Route* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.types.Route";
  }
  protected:
  explicit Route(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWaypointsFieldNumber = 2,
    kColorFieldNumber = 3,
    kNameFieldNumber = 1,
    kSpeedAvgFieldNumber = 4,
    kSpeedStdevFieldNumber = 5,
    kReverseFieldNumber = 6,
    kNextPointFieldNumber = 7,
  };
  // repeated .onos.ransim.types.Point waypoints = 2;
  int waypoints_size() const;
  private:
  int _internal_waypoints_size() const;
  public:
  void clear_waypoints();
  ::onos::ransim::types::Point* mutable_waypoints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::ransim::types::Point >*
      mutable_waypoints();
  private:
  const ::onos::ransim::types::Point& _internal_waypoints(int index) const;
  ::onos::ransim::types::Point* _internal_add_waypoints();
  public:
  const ::onos::ransim::types::Point& waypoints(int index) const;
  ::onos::ransim::types::Point* add_waypoints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::ransim::types::Point >&
      waypoints() const;

  // string color = 3;
  void clear_color();
  const std::string& color() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_color(ArgT0&& arg0, ArgT... args);
  std::string* mutable_color();
  PROTOBUF_NODISCARD std::string* release_color();
  void set_allocated_color(std::string* color);
  private:
  const std::string& _internal_color() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_color(const std::string& value);
  std::string* _internal_mutable_color();
  public:

  // uint64 name = 1 [(.gogoproto.customname) = "RouteID", (.gogoproto.casttype) = "IMSI"];
  void clear_name();
  uint64_t name() const;
  void set_name(uint64_t value);
  private:
  uint64_t _internal_name() const;
  void _internal_set_name(uint64_t value);
  public:

  // uint32 speed_avg = 4;
  void clear_speed_avg();
  uint32_t speed_avg() const;
  void set_speed_avg(uint32_t value);
  private:
  uint32_t _internal_speed_avg() const;
  void _internal_set_speed_avg(uint32_t value);
  public:

  // uint32 speed_stdev = 5;
  void clear_speed_stdev();
  uint32_t speed_stdev() const;
  void set_speed_stdev(uint32_t value);
  private:
  uint32_t _internal_speed_stdev() const;
  void _internal_set_speed_stdev(uint32_t value);
  public:

  // bool reverse = 6;
  void clear_reverse();
  bool reverse() const;
  void set_reverse(bool value);
  private:
  bool _internal_reverse() const;
  void _internal_set_reverse(bool value);
  public:

  // uint32 next_point = 7;
  void clear_next_point();
  uint32_t next_point() const;
  void set_next_point(uint32_t value);
  private:
  uint32_t _internal_next_point() const;
  void _internal_set_next_point(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.ransim.types.Route)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::ransim::types::Point > waypoints_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr color_;
  uint64_t name_;
  uint32_t speed_avg_;
  uint32_t speed_stdev_;
  bool reverse_;
  uint32_t next_point_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2ftypes_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class Ue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.types.Ue) */ {
 public:
  inline Ue() : Ue(nullptr) {}
  ~Ue() override;
  explicit constexpr Ue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ue(const Ue& from);
  Ue(Ue&& from) noexcept
    : Ue() {
    *this = ::std::move(from);
  }

  inline Ue& operator=(const Ue& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ue& operator=(Ue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ue& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ue* internal_default_instance() {
    return reinterpret_cast<const Ue*>(
               &_Ue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Ue& a, Ue& b) {
    a.Swap(&b);
  }
  inline void Swap(Ue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Ue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Ue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Ue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Ue& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.types.Ue";
  }
  protected:
  explicit Ue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 2,
    kPositionFieldNumber = 4,
    kMetricsFieldNumber = 17,
    kUeidFieldNumber = 20,
    kImsiFieldNumber = 1,
    kServingTowerFieldNumber = 7,
    kServingTowerStrengthFieldNumber = 8,
    kTower1FieldNumber = 9,
    kTower1StrengthFieldNumber = 10,
    kRotationFieldNumber = 5,
    kCrntiFieldNumber = 15,
    kTower2FieldNumber = 11,
    kTower2StrengthFieldNumber = 12,
    kTower3FieldNumber = 13,
    kTower3StrengthFieldNumber = 14,
    kAdmittedFieldNumber = 16,
    kRrcStateFieldNumber = 18,
    kFiveQiFieldNumber = 19,
    kServingTowerGeometryFieldNumber = 21,
  };
  // string type = 2;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // .onos.ransim.types.Point position = 4;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::onos::ransim::types::Point& position() const;
  PROTOBUF_NODISCARD ::onos::ransim::types::Point* release_position();
  ::onos::ransim::types::Point* mutable_position();
  void set_allocated_position(::onos::ransim::types::Point* position);
  private:
  const ::onos::ransim::types::Point& _internal_position() const;
  ::onos::ransim::types::Point* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::onos::ransim::types::Point* position);
  ::onos::ransim::types::Point* unsafe_arena_release_position();

  // .onos.ransim.types.UeMetrics metrics = 17;
  bool has_metrics() const;
  private:
  bool _internal_has_metrics() const;
  public:
  void clear_metrics();
  const ::onos::ransim::types::UeMetrics& metrics() const;
  PROTOBUF_NODISCARD ::onos::ransim::types::UeMetrics* release_metrics();
  ::onos::ransim::types::UeMetrics* mutable_metrics();
  void set_allocated_metrics(::onos::ransim::types::UeMetrics* metrics);
  private:
  const ::onos::ransim::types::UeMetrics& _internal_metrics() const;
  ::onos::ransim::types::UeMetrics* _internal_mutable_metrics();
  public:
  void unsafe_arena_set_allocated_metrics(
      ::onos::ransim::types::UeMetrics* metrics);
  ::onos::ransim::types::UeMetrics* unsafe_arena_release_metrics();

  // .onos.ransim.types.UeIdentity ueid = 20;
  bool has_ueid() const;
  private:
  bool _internal_has_ueid() const;
  public:
  void clear_ueid();
  const ::onos::ransim::types::UeIdentity& ueid() const;
  PROTOBUF_NODISCARD ::onos::ransim::types::UeIdentity* release_ueid();
  ::onos::ransim::types::UeIdentity* mutable_ueid();
  void set_allocated_ueid(::onos::ransim::types::UeIdentity* ueid);
  private:
  const ::onos::ransim::types::UeIdentity& _internal_ueid() const;
  ::onos::ransim::types::UeIdentity* _internal_mutable_ueid();
  public:
  void unsafe_arena_set_allocated_ueid(
      ::onos::ransim::types::UeIdentity* ueid);
  ::onos::ransim::types::UeIdentity* unsafe_arena_release_ueid();

  // uint64 imsi = 1 [(.gogoproto.customname) = "IMSI", (.gogoproto.casttype) = "IMSI"];
  void clear_imsi();
  uint64_t imsi() const;
  void set_imsi(uint64_t value);
  private:
  uint64_t _internal_imsi() const;
  void _internal_set_imsi(uint64_t value);
  public:

  // uint64 serving_tower = 7 [(.gogoproto.casttype) = "NCGI"];
  void clear_serving_tower();
  uint64_t serving_tower() const;
  void set_serving_tower(uint64_t value);
  private:
  uint64_t _internal_serving_tower() const;
  void _internal_set_serving_tower(uint64_t value);
  public:

  // double serving_tower_strength = 8;
  void clear_serving_tower_strength();
  double serving_tower_strength() const;
  void set_serving_tower_strength(double value);
  private:
  double _internal_serving_tower_strength() const;
  void _internal_set_serving_tower_strength(double value);
  public:

  // uint64 tower1 = 9 [(.gogoproto.casttype) = "NCGI"];
  void clear_tower1();
  uint64_t tower1() const;
  void set_tower1(uint64_t value);
  private:
  uint64_t _internal_tower1() const;
  void _internal_set_tower1(uint64_t value);
  public:

  // double tower1_strength = 10;
  void clear_tower1_strength();
  double tower1_strength() const;
  void set_tower1_strength(double value);
  private:
  double _internal_tower1_strength() const;
  void _internal_set_tower1_strength(double value);
  public:

  // uint32 rotation = 5;
  void clear_rotation();
  uint32_t rotation() const;
  void set_rotation(uint32_t value);
  private:
  uint32_t _internal_rotation() const;
  void _internal_set_rotation(uint32_t value);
  public:

  // uint32 crnti = 15 [(.gogoproto.customname) = "CRNTI", (.gogoproto.casttype) = "CRNTI"];
  void clear_crnti();
  uint32_t crnti() const;
  void set_crnti(uint32_t value);
  private:
  uint32_t _internal_crnti() const;
  void _internal_set_crnti(uint32_t value);
  public:

  // uint64 tower2 = 11 [(.gogoproto.casttype) = "NCGI"];
  void clear_tower2();
  uint64_t tower2() const;
  void set_tower2(uint64_t value);
  private:
  uint64_t _internal_tower2() const;
  void _internal_set_tower2(uint64_t value);
  public:

  // double tower2_strength = 12;
  void clear_tower2_strength();
  double tower2_strength() const;
  void set_tower2_strength(double value);
  private:
  double _internal_tower2_strength() const;
  void _internal_set_tower2_strength(double value);
  public:

  // uint64 tower3 = 13 [(.gogoproto.casttype) = "NCGI"];
  void clear_tower3();
  uint64_t tower3() const;
  void set_tower3(uint64_t value);
  private:
  uint64_t _internal_tower3() const;
  void _internal_set_tower3(uint64_t value);
  public:

  // double tower3_strength = 14;
  void clear_tower3_strength();
  double tower3_strength() const;
  void set_tower3_strength(double value);
  private:
  double _internal_tower3_strength() const;
  void _internal_set_tower3_strength(double value);
  public:

  // bool admitted = 16;
  void clear_admitted();
  bool admitted() const;
  void set_admitted(bool value);
  private:
  bool _internal_admitted() const;
  void _internal_set_admitted(bool value);
  public:

  // uint32 rrc_state = 18;
  void clear_rrc_state();
  uint32_t rrc_state() const;
  void set_rrc_state(uint32_t value);
  private:
  uint32_t _internal_rrc_state() const;
  void _internal_set_rrc_state(uint32_t value);
  public:

  // int32 five_qi = 19;
  void clear_five_qi();
  int32_t five_qi() const;
  void set_five_qi(int32_t value);
  private:
  int32_t _internal_five_qi() const;
  void _internal_set_five_qi(int32_t value);
  public:

  // double serving_tower_geometry = 21;
  void clear_serving_tower_geometry();
  double serving_tower_geometry() const;
  void set_serving_tower_geometry(double value);
  private:
  double _internal_serving_tower_geometry() const;
  void _internal_set_serving_tower_geometry(double value);
  public:

  // @@protoc_insertion_point(class_scope:onos.ransim.types.Ue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::onos::ransim::types::Point* position_;
  ::onos::ransim::types::UeMetrics* metrics_;
  ::onos::ransim::types::UeIdentity* ueid_;
  uint64_t imsi_;
  uint64_t serving_tower_;
  double serving_tower_strength_;
  uint64_t tower1_;
  double tower1_strength_;
  uint32_t rotation_;
  uint32_t crnti_;
  uint64_t tower2_;
  double tower2_strength_;
  uint64_t tower3_;
  double tower3_strength_;
  bool admitted_;
  uint32_t rrc_state_;
  int32_t five_qi_;
  double serving_tower_geometry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2ftypes_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class UeIdentity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.types.UeIdentity) */ {
 public:
  inline UeIdentity() : UeIdentity(nullptr) {}
  ~UeIdentity() override;
  explicit constexpr UeIdentity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UeIdentity(const UeIdentity& from);
  UeIdentity(UeIdentity&& from) noexcept
    : UeIdentity() {
    *this = ::std::move(from);
  }

  inline UeIdentity& operator=(const UeIdentity& from) {
    CopyFrom(from);
    return *this;
  }
  inline UeIdentity& operator=(UeIdentity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UeIdentity& default_instance() {
    return *internal_default_instance();
  }
  static inline const UeIdentity* internal_default_instance() {
    return reinterpret_cast<const UeIdentity*>(
               &_UeIdentity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UeIdentity& a, UeIdentity& b) {
    a.Swap(&b);
  }
  inline void Swap(UeIdentity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UeIdentity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UeIdentity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UeIdentity>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UeIdentity& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UeIdentity& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UeIdentity* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.types.UeIdentity";
  }
  protected:
  explicit UeIdentity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuamiFieldNumber = 1,
    kAmfUeNgapIdFieldNumber = 2,
  };
  // .onos.ransim.types.Guami guami = 1;
  bool has_guami() const;
  private:
  bool _internal_has_guami() const;
  public:
  void clear_guami();
  const ::onos::ransim::types::Guami& guami() const;
  PROTOBUF_NODISCARD ::onos::ransim::types::Guami* release_guami();
  ::onos::ransim::types::Guami* mutable_guami();
  void set_allocated_guami(::onos::ransim::types::Guami* guami);
  private:
  const ::onos::ransim::types::Guami& _internal_guami() const;
  ::onos::ransim::types::Guami* _internal_mutable_guami();
  public:
  void unsafe_arena_set_allocated_guami(
      ::onos::ransim::types::Guami* guami);
  ::onos::ransim::types::Guami* unsafe_arena_release_guami();

  // uint64 amf_ue_ngap_id = 2 [(.gogoproto.casttype) = "AmfUENgapID"];
  void clear_amf_ue_ngap_id();
  uint64_t amf_ue_ngap_id() const;
  void set_amf_ue_ngap_id(uint64_t value);
  private:
  uint64_t _internal_amf_ue_ngap_id() const;
  void _internal_set_amf_ue_ngap_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.ransim.types.UeIdentity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::ransim::types::Guami* guami_;
  uint64_t amf_ue_ngap_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2ftypes_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class Guami final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.types.Guami) */ {
 public:
  inline Guami() : Guami(nullptr) {}
  ~Guami() override;
  explicit constexpr Guami(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Guami(const Guami& from);
  Guami(Guami&& from) noexcept
    : Guami() {
    *this = ::std::move(from);
  }

  inline Guami& operator=(const Guami& from) {
    CopyFrom(from);
    return *this;
  }
  inline Guami& operator=(Guami&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Guami& default_instance() {
    return *internal_default_instance();
  }
  static inline const Guami* internal_default_instance() {
    return reinterpret_cast<const Guami*>(
               &_Guami_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Guami& a, Guami& b) {
    a.Swap(&b);
  }
  inline void Swap(Guami* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Guami* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Guami* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Guami>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Guami& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Guami& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Guami* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.types.Guami";
  }
  protected:
  explicit Guami(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlmnidFieldNumber = 1,
    kAmfRegionIdFieldNumber = 2,
    kAmfSetIdFieldNumber = 3,
    kAmfPointerFieldNumber = 4,
  };
  // uint32 plmnid = 1;
  void clear_plmnid();
  uint32_t plmnid() const;
  void set_plmnid(uint32_t value);
  private:
  uint32_t _internal_plmnid() const;
  void _internal_set_plmnid(uint32_t value);
  public:

  // uint32 amf_region_id = 2;
  void clear_amf_region_id();
  uint32_t amf_region_id() const;
  void set_amf_region_id(uint32_t value);
  private:
  uint32_t _internal_amf_region_id() const;
  void _internal_set_amf_region_id(uint32_t value);
  public:

  // uint32 amf_set_id = 3;
  void clear_amf_set_id();
  uint32_t amf_set_id() const;
  void set_amf_set_id(uint32_t value);
  private:
  uint32_t _internal_amf_set_id() const;
  void _internal_set_amf_set_id(uint32_t value);
  public:

  // uint32 amf_pointer = 4;
  void clear_amf_pointer();
  uint32_t amf_pointer() const;
  void set_amf_pointer(uint32_t value);
  private:
  uint32_t _internal_amf_pointer() const;
  void _internal_set_amf_pointer(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.ransim.types.Guami)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t plmnid_;
  uint32_t amf_region_id_;
  uint32_t amf_set_id_;
  uint32_t amf_pointer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2ftypes_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class UeMetrics final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.types.UeMetrics) */ {
 public:
  inline UeMetrics() : UeMetrics(nullptr) {}
  ~UeMetrics() override;
  explicit constexpr UeMetrics(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UeMetrics(const UeMetrics& from);
  UeMetrics(UeMetrics&& from) noexcept
    : UeMetrics() {
    *this = ::std::move(from);
  }

  inline UeMetrics& operator=(const UeMetrics& from) {
    CopyFrom(from);
    return *this;
  }
  inline UeMetrics& operator=(UeMetrics&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UeMetrics& default_instance() {
    return *internal_default_instance();
  }
  static inline const UeMetrics* internal_default_instance() {
    return reinterpret_cast<const UeMetrics*>(
               &_UeMetrics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UeMetrics& a, UeMetrics& b) {
    a.Swap(&b);
  }
  inline void Swap(UeMetrics* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UeMetrics* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UeMetrics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UeMetrics>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UeMetrics& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UeMetrics& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UeMetrics* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.types.UeMetrics";
  }
  protected:
  explicit UeMetrics(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHoLatencyFieldNumber = 1,
    kHoReportTimestampFieldNumber = 2,
    kIsFirstFieldNumber = 3,
  };
  // int64 ho_latency = 1;
  void clear_ho_latency();
  int64_t ho_latency() const;
  void set_ho_latency(int64_t value);
  private:
  int64_t _internal_ho_latency() const;
  void _internal_set_ho_latency(int64_t value);
  public:

  // int64 ho_report_timestamp = 2;
  void clear_ho_report_timestamp();
  int64_t ho_report_timestamp() const;
  void set_ho_report_timestamp(int64_t value);
  private:
  int64_t _internal_ho_report_timestamp() const;
  void _internal_set_ho_report_timestamp(int64_t value);
  public:

  // bool is_first = 3;
  void clear_is_first();
  bool is_first() const;
  void set_is_first(bool value);
  private:
  bool _internal_is_first() const;
  void _internal_set_is_first(bool value);
  public:

  // @@protoc_insertion_point(class_scope:onos.ransim.types.UeMetrics)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t ho_latency_;
  int64_t ho_report_timestamp_;
  bool is_first_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2ftypes_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class Cell_CrntiMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Cell_CrntiMapEntry_DoNotUse, 
    uint32_t, uint64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Cell_CrntiMapEntry_DoNotUse, 
    uint32_t, uint64_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> SuperType;
  Cell_CrntiMapEntry_DoNotUse();
  explicit constexpr Cell_CrntiMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Cell_CrntiMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Cell_CrntiMapEntry_DoNotUse& other);
  static const Cell_CrntiMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Cell_CrntiMapEntry_DoNotUse*>(&_Cell_CrntiMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Cell final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.types.Cell) */ {
 public:
  inline Cell() : Cell(nullptr) {}
  ~Cell() override;
  explicit constexpr Cell(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Cell(const Cell& from);
  Cell(Cell&& from) noexcept
    : Cell() {
    *this = ::std::move(from);
  }

  inline Cell& operator=(const Cell& from) {
    CopyFrom(from);
    return *this;
  }
  inline Cell& operator=(Cell&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Cell& default_instance() {
    return *internal_default_instance();
  }
  static inline const Cell* internal_default_instance() {
    return reinterpret_cast<const Cell*>(
               &_Cell_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Cell& a, Cell& b) {
    a.Swap(&b);
  }
  inline void Swap(Cell* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Cell* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Cell* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Cell>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Cell& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Cell& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cell* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.types.Cell";
  }
  protected:
  explicit Cell(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kNeighborsFieldNumber = 7,
    kCrntiMapFieldNumber = 10,
    kColorFieldNumber = 5,
    kLocationFieldNumber = 3,
    kSectorFieldNumber = 4,
    kMeasurementParamsFieldNumber = 9,
    kEcgiFieldNumber = 1,
    kTxPowerDbFieldNumber = 8,
    kMaxUesFieldNumber = 6,
    kCrntiIndexFieldNumber = 11,
    kPortFieldNumber = 12,
    kPciFieldNumber = 13,
    kEarfcnFieldNumber = 14,
    kCellTypeFieldNumber = 15,
    kRrcIdleCountFieldNumber = 16,
    kRrcConnectedCountFieldNumber = 17,
  };
  // repeated uint64 neighbors = 7 [(.gogoproto.casttype) = "NCGI"];
  int neighbors_size() const;
  private:
  int _internal_neighbors_size() const;
  public:
  void clear_neighbors();
  private:
  uint64_t _internal_neighbors(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_neighbors() const;
  void _internal_add_neighbors(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_neighbors();
  public:
  uint64_t neighbors(int index) const;
  void set_neighbors(int index, uint64_t value);
  void add_neighbors(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      neighbors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_neighbors();

  // map<uint32, uint64> crnti_map = 10 [(.gogoproto.castkey) = "CRNTI", (.gogoproto.castvalue) = "IMSI"];
  int crnti_map_size() const;
  private:
  int _internal_crnti_map_size() const;
  public:
  void clear_crnti_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint64_t >&
      _internal_crnti_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint64_t >*
      _internal_mutable_crnti_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint64_t >&
      crnti_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint64_t >*
      mutable_crnti_map();

  // string color = 5;
  void clear_color();
  const std::string& color() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_color(ArgT0&& arg0, ArgT... args);
  std::string* mutable_color();
  PROTOBUF_NODISCARD std::string* release_color();
  void set_allocated_color(std::string* color);
  private:
  const std::string& _internal_color() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_color(const std::string& value);
  std::string* _internal_mutable_color();
  public:

  // .onos.ransim.types.Point location = 3;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::onos::ransim::types::Point& location() const;
  PROTOBUF_NODISCARD ::onos::ransim::types::Point* release_location();
  ::onos::ransim::types::Point* mutable_location();
  void set_allocated_location(::onos::ransim::types::Point* location);
  private:
  const ::onos::ransim::types::Point& _internal_location() const;
  ::onos::ransim::types::Point* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::onos::ransim::types::Point* location);
  ::onos::ransim::types::Point* unsafe_arena_release_location();

  // .onos.ransim.types.Sector sector = 4;
  bool has_sector() const;
  private:
  bool _internal_has_sector() const;
  public:
  void clear_sector();
  const ::onos::ransim::types::Sector& sector() const;
  PROTOBUF_NODISCARD ::onos::ransim::types::Sector* release_sector();
  ::onos::ransim::types::Sector* mutable_sector();
  void set_allocated_sector(::onos::ransim::types::Sector* sector);
  private:
  const ::onos::ransim::types::Sector& _internal_sector() const;
  ::onos::ransim::types::Sector* _internal_mutable_sector();
  public:
  void unsafe_arena_set_allocated_sector(
      ::onos::ransim::types::Sector* sector);
  ::onos::ransim::types::Sector* unsafe_arena_release_sector();

  // .onos.ransim.types.MeasurementParams measurement_params = 9;
  bool has_measurement_params() const;
  private:
  bool _internal_has_measurement_params() const;
  public:
  void clear_measurement_params();
  const ::onos::ransim::types::MeasurementParams& measurement_params() const;
  PROTOBUF_NODISCARD ::onos::ransim::types::MeasurementParams* release_measurement_params();
  ::onos::ransim::types::MeasurementParams* mutable_measurement_params();
  void set_allocated_measurement_params(::onos::ransim::types::MeasurementParams* measurement_params);
  private:
  const ::onos::ransim::types::MeasurementParams& _internal_measurement_params() const;
  ::onos::ransim::types::MeasurementParams* _internal_mutable_measurement_params();
  public:
  void unsafe_arena_set_allocated_measurement_params(
      ::onos::ransim::types::MeasurementParams* measurement_params);
  ::onos::ransim::types::MeasurementParams* unsafe_arena_release_measurement_params();

  // uint64 ecgi = 1 [(.gogoproto.customname) = "NCGI", (.gogoproto.casttype) = "NCGI"];
  void clear_ecgi();
  uint64_t ecgi() const;
  void set_ecgi(uint64_t value);
  private:
  uint64_t _internal_ecgi() const;
  void _internal_set_ecgi(uint64_t value);
  public:

  // double tx_power_db = 8 [(.gogoproto.customname) = "TxPowerdB"];
  void clear_tx_power_db();
  double tx_power_db() const;
  void set_tx_power_db(double value);
  private:
  double _internal_tx_power_db() const;
  void _internal_set_tx_power_db(double value);
  public:

  // uint32 max_ues = 6 [(.gogoproto.customname) = "MaxUEs"];
  void clear_max_ues();
  uint32_t max_ues() const;
  void set_max_ues(uint32_t value);
  private:
  uint32_t _internal_max_ues() const;
  void _internal_set_max_ues(uint32_t value);
  public:

  // uint32 crnti_index = 11;
  void clear_crnti_index();
  uint32_t crnti_index() const;
  void set_crnti_index(uint32_t value);
  private:
  uint32_t _internal_crnti_index() const;
  void _internal_set_crnti_index(uint32_t value);
  public:

  // uint32 port = 12;
  void clear_port();
  uint32_t port() const;
  void set_port(uint32_t value);
  private:
  uint32_t _internal_port() const;
  void _internal_set_port(uint32_t value);
  public:

  // uint32 pci = 13;
  void clear_pci();
  uint32_t pci() const;
  void set_pci(uint32_t value);
  private:
  uint32_t _internal_pci() const;
  void _internal_set_pci(uint32_t value);
  public:

  // uint32 earfcn = 14;
  void clear_earfcn();
  uint32_t earfcn() const;
  void set_earfcn(uint32_t value);
  private:
  uint32_t _internal_earfcn() const;
  void _internal_set_earfcn(uint32_t value);
  public:

  // .onos.ransim.types.CellType cell_type = 15;
  void clear_cell_type();
  ::onos::ransim::types::CellType cell_type() const;
  void set_cell_type(::onos::ransim::types::CellType value);
  private:
  ::onos::ransim::types::CellType _internal_cell_type() const;
  void _internal_set_cell_type(::onos::ransim::types::CellType value);
  public:

  // uint32 rrc_idle_count = 16;
  void clear_rrc_idle_count();
  uint32_t rrc_idle_count() const;
  void set_rrc_idle_count(uint32_t value);
  private:
  uint32_t _internal_rrc_idle_count() const;
  void _internal_set_rrc_idle_count(uint32_t value);
  public:

  // uint32 rrc_connected_count = 17;
  void clear_rrc_connected_count();
  uint32_t rrc_connected_count() const;
  void set_rrc_connected_count(uint32_t value);
  private:
  uint32_t _internal_rrc_connected_count() const;
  void _internal_set_rrc_connected_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.ransim.types.Cell)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > neighbors_;
  mutable std::atomic<int> _neighbors_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Cell_CrntiMapEntry_DoNotUse,
      uint32_t, uint64_t,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64> crnti_map_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr color_;
  ::onos::ransim::types::Point* location_;
  ::onos::ransim::types::Sector* sector_;
  ::onos::ransim::types::MeasurementParams* measurement_params_;
  uint64_t ecgi_;
  double tx_power_db_;
  uint32_t max_ues_;
  uint32_t crnti_index_;
  uint32_t port_;
  uint32_t pci_;
  uint32_t earfcn_;
  int cell_type_;
  uint32_t rrc_idle_count_;
  uint32_t rrc_connected_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2ftypes_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class MeasurementParams_NcellIndividualOffsetsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MeasurementParams_NcellIndividualOffsetsEntry_DoNotUse, 
    uint64_t, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<MeasurementParams_NcellIndividualOffsetsEntry_DoNotUse, 
    uint64_t, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  MeasurementParams_NcellIndividualOffsetsEntry_DoNotUse();
  explicit constexpr MeasurementParams_NcellIndividualOffsetsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit MeasurementParams_NcellIndividualOffsetsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const MeasurementParams_NcellIndividualOffsetsEntry_DoNotUse& other);
  static const MeasurementParams_NcellIndividualOffsetsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MeasurementParams_NcellIndividualOffsetsEntry_DoNotUse*>(&_MeasurementParams_NcellIndividualOffsetsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class MeasurementParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.types.MeasurementParams) */ {
 public:
  inline MeasurementParams() : MeasurementParams(nullptr) {}
  ~MeasurementParams() override;
  explicit constexpr MeasurementParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MeasurementParams(const MeasurementParams& from);
  MeasurementParams(MeasurementParams&& from) noexcept
    : MeasurementParams() {
    *this = ::std::move(from);
  }

  inline MeasurementParams& operator=(const MeasurementParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeasurementParams& operator=(MeasurementParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MeasurementParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const MeasurementParams* internal_default_instance() {
    return reinterpret_cast<const MeasurementParams*>(
               &_MeasurementParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MeasurementParams& a, MeasurementParams& b) {
    a.Swap(&b);
  }
  inline void Swap(MeasurementParams* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MeasurementParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MeasurementParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MeasurementParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MeasurementParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MeasurementParams& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeasurementParams* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.types.MeasurementParams";
  }
  protected:
  explicit MeasurementParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kNcellIndividualOffsetsFieldNumber = 4,
    kEventA3ParamsFieldNumber = 6,
    kTimeToTriggerFieldNumber = 1,
    kFrequencyOffsetFieldNumber = 2,
    kPcellIndividualOffsetFieldNumber = 3,
    kHysteresisFieldNumber = 5,
  };
  // map<uint64, int32> ncell_individual_offsets = 4 [(.gogoproto.castkey) = "NCGI"];
  int ncell_individual_offsets_size() const;
  private:
  int _internal_ncell_individual_offsets_size() const;
  public:
  void clear_ncell_individual_offsets();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, int32_t >&
      _internal_ncell_individual_offsets() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, int32_t >*
      _internal_mutable_ncell_individual_offsets();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, int32_t >&
      ncell_individual_offsets() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, int32_t >*
      mutable_ncell_individual_offsets();

  // .onos.ransim.types.EventA3Params event_a3_params = 6;
  bool has_event_a3_params() const;
  private:
  bool _internal_has_event_a3_params() const;
  public:
  void clear_event_a3_params();
  const ::onos::ransim::types::EventA3Params& event_a3_params() const;
  PROTOBUF_NODISCARD ::onos::ransim::types::EventA3Params* release_event_a3_params();
  ::onos::ransim::types::EventA3Params* mutable_event_a3_params();
  void set_allocated_event_a3_params(::onos::ransim::types::EventA3Params* event_a3_params);
  private:
  const ::onos::ransim::types::EventA3Params& _internal_event_a3_params() const;
  ::onos::ransim::types::EventA3Params* _internal_mutable_event_a3_params();
  public:
  void unsafe_arena_set_allocated_event_a3_params(
      ::onos::ransim::types::EventA3Params* event_a3_params);
  ::onos::ransim::types::EventA3Params* unsafe_arena_release_event_a3_params();

  // int32 time_to_trigger = 1;
  void clear_time_to_trigger();
  int32_t time_to_trigger() const;
  void set_time_to_trigger(int32_t value);
  private:
  int32_t _internal_time_to_trigger() const;
  void _internal_set_time_to_trigger(int32_t value);
  public:

  // int32 frequency_offset = 2;
  void clear_frequency_offset();
  int32_t frequency_offset() const;
  void set_frequency_offset(int32_t value);
  private:
  int32_t _internal_frequency_offset() const;
  void _internal_set_frequency_offset(int32_t value);
  public:

  // int32 pcell_individual_offset = 3;
  void clear_pcell_individual_offset();
  int32_t pcell_individual_offset() const;
  void set_pcell_individual_offset(int32_t value);
  private:
  int32_t _internal_pcell_individual_offset() const;
  void _internal_set_pcell_individual_offset(int32_t value);
  public:

  // int32 hysteresis = 5;
  void clear_hysteresis();
  int32_t hysteresis() const;
  void set_hysteresis(int32_t value);
  private:
  int32_t _internal_hysteresis() const;
  void _internal_set_hysteresis(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.ransim.types.MeasurementParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      MeasurementParams_NcellIndividualOffsetsEntry_DoNotUse,
      uint64_t, int32_t,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> ncell_individual_offsets_;
  ::onos::ransim::types::EventA3Params* event_a3_params_;
  int32_t time_to_trigger_;
  int32_t frequency_offset_;
  int32_t pcell_individual_offset_;
  int32_t hysteresis_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2ftypes_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class EventA3Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.types.EventA3Params) */ {
 public:
  inline EventA3Params() : EventA3Params(nullptr) {}
  ~EventA3Params() override;
  explicit constexpr EventA3Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EventA3Params(const EventA3Params& from);
  EventA3Params(EventA3Params&& from) noexcept
    : EventA3Params() {
    *this = ::std::move(from);
  }

  inline EventA3Params& operator=(const EventA3Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventA3Params& operator=(EventA3Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EventA3Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const EventA3Params* internal_default_instance() {
    return reinterpret_cast<const EventA3Params*>(
               &_EventA3Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(EventA3Params& a, EventA3Params& b) {
    a.Swap(&b);
  }
  inline void Swap(EventA3Params* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EventA3Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EventA3Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EventA3Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EventA3Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EventA3Params& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventA3Params* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.types.EventA3Params";
  }
  protected:
  explicit EventA3Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kA3OffsetFieldNumber = 1,
    kReportOnLeaveFieldNumber = 2,
  };
  // int32 a3_offset = 1;
  void clear_a3_offset();
  int32_t a3_offset() const;
  void set_a3_offset(int32_t value);
  private:
  int32_t _internal_a3_offset() const;
  void _internal_set_a3_offset(int32_t value);
  public:

  // bool report_on_leave = 2;
  void clear_report_on_leave();
  bool report_on_leave() const;
  void set_report_on_leave(bool value);
  private:
  bool _internal_report_on_leave() const;
  void _internal_set_report_on_leave(bool value);
  public:

  // @@protoc_insertion_point(class_scope:onos.ransim.types.EventA3Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t a3_offset_;
  bool report_on_leave_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2ftypes_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class Node final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.types.Node) */ {
 public:
  inline Node() : Node(nullptr) {}
  ~Node() override;
  explicit constexpr Node(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Node(const Node& from);
  Node(Node&& from) noexcept
    : Node() {
    *this = ::std::move(from);
  }

  inline Node& operator=(const Node& from) {
    CopyFrom(from);
    return *this;
  }
  inline Node& operator=(Node&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Node& default_instance() {
    return *internal_default_instance();
  }
  static inline const Node* internal_default_instance() {
    return reinterpret_cast<const Node*>(
               &_Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Node& a, Node& b) {
    a.Swap(&b);
  }
  inline void Swap(Node* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Node* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Node>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Node& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Node& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Node* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.types.Node";
  }
  protected:
  explicit Node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControllersFieldNumber = 2,
    kServiceModelsFieldNumber = 3,
    kCellEcgisFieldNumber = 4,
    kStatusFieldNumber = 5,
    kEnbidFieldNumber = 1,
  };
  // repeated string controllers = 2;
  int controllers_size() const;
  private:
  int _internal_controllers_size() const;
  public:
  void clear_controllers();
  const std::string& controllers(int index) const;
  std::string* mutable_controllers(int index);
  void set_controllers(int index, const std::string& value);
  void set_controllers(int index, std::string&& value);
  void set_controllers(int index, const char* value);
  void set_controllers(int index, const char* value, size_t size);
  std::string* add_controllers();
  void add_controllers(const std::string& value);
  void add_controllers(std::string&& value);
  void add_controllers(const char* value);
  void add_controllers(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& controllers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_controllers();
  private:
  const std::string& _internal_controllers(int index) const;
  std::string* _internal_add_controllers();
  public:

  // repeated string service_models = 3;
  int service_models_size() const;
  private:
  int _internal_service_models_size() const;
  public:
  void clear_service_models();
  const std::string& service_models(int index) const;
  std::string* mutable_service_models(int index);
  void set_service_models(int index, const std::string& value);
  void set_service_models(int index, std::string&& value);
  void set_service_models(int index, const char* value);
  void set_service_models(int index, const char* value, size_t size);
  std::string* add_service_models();
  void add_service_models(const std::string& value);
  void add_service_models(std::string&& value);
  void add_service_models(const char* value);
  void add_service_models(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& service_models() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_service_models();
  private:
  const std::string& _internal_service_models(int index) const;
  std::string* _internal_add_service_models();
  public:

  // repeated uint64 cell_ecgis = 4 [(.gogoproto.customname) = "CellNCGIs", (.gogoproto.casttype) = "NCGI"];
  int cell_ecgis_size() const;
  private:
  int _internal_cell_ecgis_size() const;
  public:
  void clear_cell_ecgis();
  private:
  uint64_t _internal_cell_ecgis(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_cell_ecgis() const;
  void _internal_add_cell_ecgis(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_cell_ecgis();
  public:
  uint64_t cell_ecgis(int index) const;
  void set_cell_ecgis(int index, uint64_t value);
  void add_cell_ecgis(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      cell_ecgis() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_cell_ecgis();

  // string status = 5;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // uint32 enbid = 1 [(.gogoproto.customname) = "GnbID", (.gogoproto.casttype) = "GnbID"];
  void clear_enbid();
  uint32_t enbid() const;
  void set_enbid(uint32_t value);
  private:
  uint32_t _internal_enbid() const;
  void _internal_set_enbid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.ransim.types.Node)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> controllers_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> service_models_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > cell_ecgis_;
  mutable std::atomic<int> _cell_ecgis_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  uint32_t enbid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2ftypes_2ftypes_2eproto;
};
// -------------------------------------------------------------------

class MapLayout final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.types.MapLayout) */ {
 public:
  inline MapLayout() : MapLayout(nullptr) {}
  ~MapLayout() override;
  explicit constexpr MapLayout(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MapLayout(const MapLayout& from);
  MapLayout(MapLayout&& from) noexcept
    : MapLayout() {
    *this = ::std::move(from);
  }

  inline MapLayout& operator=(const MapLayout& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapLayout& operator=(MapLayout&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapLayout& default_instance() {
    return *internal_default_instance();
  }
  static inline const MapLayout* internal_default_instance() {
    return reinterpret_cast<const MapLayout*>(
               &_MapLayout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(MapLayout& a, MapLayout& b) {
    a.Swap(&b);
  }
  inline void Swap(MapLayout* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapLayout* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapLayout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MapLayout>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MapLayout& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MapLayout& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapLayout* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.types.MapLayout";
  }
  protected:
  explicit MapLayout(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCenterFieldNumber = 1,
    kZoomFieldNumber = 2,
    kFadeFieldNumber = 3,
    kShowRoutesFieldNumber = 4,
    kShowPowerFieldNumber = 5,
    kMinUesFieldNumber = 6,
    kMaxUesFieldNumber = 7,
    kCurrentRoutesFieldNumber = 8,
    kLocationsScaleFieldNumber = 9,
  };
  // .onos.ransim.types.Point center = 1;
  bool has_center() const;
  private:
  bool _internal_has_center() const;
  public:
  void clear_center();
  const ::onos::ransim::types::Point& center() const;
  PROTOBUF_NODISCARD ::onos::ransim::types::Point* release_center();
  ::onos::ransim::types::Point* mutable_center();
  void set_allocated_center(::onos::ransim::types::Point* center);
  private:
  const ::onos::ransim::types::Point& _internal_center() const;
  ::onos::ransim::types::Point* _internal_mutable_center();
  public:
  void unsafe_arena_set_allocated_center(
      ::onos::ransim::types::Point* center);
  ::onos::ransim::types::Point* unsafe_arena_release_center();

  // float zoom = 2;
  void clear_zoom();
  float zoom() const;
  void set_zoom(float value);
  private:
  float _internal_zoom() const;
  void _internal_set_zoom(float value);
  public:

  // bool fade = 3;
  void clear_fade();
  bool fade() const;
  void set_fade(bool value);
  private:
  bool _internal_fade() const;
  void _internal_set_fade(bool value);
  public:

  // bool show_routes = 4;
  void clear_show_routes();
  bool show_routes() const;
  void set_show_routes(bool value);
  private:
  bool _internal_show_routes() const;
  void _internal_set_show_routes(bool value);
  public:

  // bool show_power = 5;
  void clear_show_power();
  bool show_power() const;
  void set_show_power(bool value);
  private:
  bool _internal_show_power() const;
  void _internal_set_show_power(bool value);
  public:

  // uint32 min_ues = 6;
  void clear_min_ues();
  uint32_t min_ues() const;
  void set_min_ues(uint32_t value);
  private:
  uint32_t _internal_min_ues() const;
  void _internal_set_min_ues(uint32_t value);
  public:

  // uint32 max_ues = 7;
  void clear_max_ues();
  uint32_t max_ues() const;
  void set_max_ues(uint32_t value);
  private:
  uint32_t _internal_max_ues() const;
  void _internal_set_max_ues(uint32_t value);
  public:

  // uint32 current_routes = 8;
  void clear_current_routes();
  uint32_t current_routes() const;
  void set_current_routes(uint32_t value);
  private:
  uint32_t _internal_current_routes() const;
  void _internal_set_current_routes(uint32_t value);
  public:

  // float locations_scale = 9;
  void clear_locations_scale();
  float locations_scale() const;
  void set_locations_scale(float value);
  private:
  float _internal_locations_scale() const;
  void _internal_set_locations_scale(float value);
  public:

  // @@protoc_insertion_point(class_scope:onos.ransim.types.MapLayout)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::ransim::types::Point* center_;
  float zoom_;
  bool fade_;
  bool show_routes_;
  bool show_power_;
  uint32_t min_ues_;
  uint32_t max_ues_;
  uint32_t current_routes_;
  float locations_scale_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2ftypes_2ftypes_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Point

// double lat = 1;
inline void Point::clear_lat() {
  lat_ = 0;
}
inline double Point::_internal_lat() const {
  return lat_;
}
inline double Point::lat() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Point.lat)
  return _internal_lat();
}
inline void Point::_internal_set_lat(double value) {
  
  lat_ = value;
}
inline void Point::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.Point.lat)
}

// double lng = 2;
inline void Point::clear_lng() {
  lng_ = 0;
}
inline double Point::_internal_lng() const {
  return lng_;
}
inline double Point::lng() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Point.lng)
  return _internal_lng();
}
inline void Point::_internal_set_lng(double value) {
  
  lng_ = value;
}
inline void Point::set_lng(double value) {
  _internal_set_lng(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.Point.lng)
}

// -------------------------------------------------------------------

// Sector

// int32 azimuth = 1;
inline void Sector::clear_azimuth() {
  azimuth_ = 0;
}
inline int32_t Sector::_internal_azimuth() const {
  return azimuth_;
}
inline int32_t Sector::azimuth() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Sector.azimuth)
  return _internal_azimuth();
}
inline void Sector::_internal_set_azimuth(int32_t value) {
  
  azimuth_ = value;
}
inline void Sector::set_azimuth(int32_t value) {
  _internal_set_azimuth(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.Sector.azimuth)
}

// int32 arc = 2;
inline void Sector::clear_arc() {
  arc_ = 0;
}
inline int32_t Sector::_internal_arc() const {
  return arc_;
}
inline int32_t Sector::arc() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Sector.arc)
  return _internal_arc();
}
inline void Sector::_internal_set_arc(int32_t value) {
  
  arc_ = value;
}
inline void Sector::set_arc(int32_t value) {
  _internal_set_arc(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.Sector.arc)
}

// .onos.ransim.types.Point centroid = 3;
inline bool Sector::_internal_has_centroid() const {
  return this != internal_default_instance() && centroid_ != nullptr;
}
inline bool Sector::has_centroid() const {
  return _internal_has_centroid();
}
inline void Sector::clear_centroid() {
  if (GetArenaForAllocation() == nullptr && centroid_ != nullptr) {
    delete centroid_;
  }
  centroid_ = nullptr;
}
inline const ::onos::ransim::types::Point& Sector::_internal_centroid() const {
  const ::onos::ransim::types::Point* p = centroid_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::ransim::types::Point&>(
      ::onos::ransim::types::_Point_default_instance_);
}
inline const ::onos::ransim::types::Point& Sector::centroid() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Sector.centroid)
  return _internal_centroid();
}
inline void Sector::unsafe_arena_set_allocated_centroid(
    ::onos::ransim::types::Point* centroid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(centroid_);
  }
  centroid_ = centroid;
  if (centroid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.ransim.types.Sector.centroid)
}
inline ::onos::ransim::types::Point* Sector::release_centroid() {
  
  ::onos::ransim::types::Point* temp = centroid_;
  centroid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::ransim::types::Point* Sector::unsafe_arena_release_centroid() {
  // @@protoc_insertion_point(field_release:onos.ransim.types.Sector.centroid)
  
  ::onos::ransim::types::Point* temp = centroid_;
  centroid_ = nullptr;
  return temp;
}
inline ::onos::ransim::types::Point* Sector::_internal_mutable_centroid() {
  
  if (centroid_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::ransim::types::Point>(GetArenaForAllocation());
    centroid_ = p;
  }
  return centroid_;
}
inline ::onos::ransim::types::Point* Sector::mutable_centroid() {
  ::onos::ransim::types::Point* _msg = _internal_mutable_centroid();
  // @@protoc_insertion_point(field_mutable:onos.ransim.types.Sector.centroid)
  return _msg;
}
inline void Sector::set_allocated_centroid(::onos::ransim::types::Point* centroid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete centroid_;
  }
  if (centroid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::ransim::types::Point>::GetOwningArena(centroid);
    if (message_arena != submessage_arena) {
      centroid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, centroid, submessage_arena);
    }
    
  } else {
    
  }
  centroid_ = centroid;
  // @@protoc_insertion_point(field_set_allocated:onos.ransim.types.Sector.centroid)
}

// int32 height = 4;
inline void Sector::clear_height() {
  height_ = 0;
}
inline int32_t Sector::_internal_height() const {
  return height_;
}
inline int32_t Sector::height() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Sector.height)
  return _internal_height();
}
inline void Sector::_internal_set_height(int32_t value) {
  
  height_ = value;
}
inline void Sector::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.Sector.height)
}

// int32 tilt = 5;
inline void Sector::clear_tilt() {
  tilt_ = 0;
}
inline int32_t Sector::_internal_tilt() const {
  return tilt_;
}
inline int32_t Sector::tilt() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Sector.tilt)
  return _internal_tilt();
}
inline void Sector::_internal_set_tilt(int32_t value) {
  
  tilt_ = value;
}
inline void Sector::set_tilt(int32_t value) {
  _internal_set_tilt(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.Sector.tilt)
}

// -------------------------------------------------------------------

// Route

// uint64 name = 1 [(.gogoproto.customname) = "RouteID", (.gogoproto.casttype) = "IMSI"];
inline void Route::clear_name() {
  name_ = uint64_t{0u};
}
inline uint64_t Route::_internal_name() const {
  return name_;
}
inline uint64_t Route::name() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Route.name)
  return _internal_name();
}
inline void Route::_internal_set_name(uint64_t value) {
  
  name_ = value;
}
inline void Route::set_name(uint64_t value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.Route.name)
}

// repeated .onos.ransim.types.Point waypoints = 2;
inline int Route::_internal_waypoints_size() const {
  return waypoints_.size();
}
inline int Route::waypoints_size() const {
  return _internal_waypoints_size();
}
inline void Route::clear_waypoints() {
  waypoints_.Clear();
}
inline ::onos::ransim::types::Point* Route::mutable_waypoints(int index) {
  // @@protoc_insertion_point(field_mutable:onos.ransim.types.Route.waypoints)
  return waypoints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::ransim::types::Point >*
Route::mutable_waypoints() {
  // @@protoc_insertion_point(field_mutable_list:onos.ransim.types.Route.waypoints)
  return &waypoints_;
}
inline const ::onos::ransim::types::Point& Route::_internal_waypoints(int index) const {
  return waypoints_.Get(index);
}
inline const ::onos::ransim::types::Point& Route::waypoints(int index) const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Route.waypoints)
  return _internal_waypoints(index);
}
inline ::onos::ransim::types::Point* Route::_internal_add_waypoints() {
  return waypoints_.Add();
}
inline ::onos::ransim::types::Point* Route::add_waypoints() {
  ::onos::ransim::types::Point* _add = _internal_add_waypoints();
  // @@protoc_insertion_point(field_add:onos.ransim.types.Route.waypoints)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::ransim::types::Point >&
Route::waypoints() const {
  // @@protoc_insertion_point(field_list:onos.ransim.types.Route.waypoints)
  return waypoints_;
}

// string color = 3;
inline void Route::clear_color() {
  color_.ClearToEmpty();
}
inline const std::string& Route::color() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Route.color)
  return _internal_color();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Route::set_color(ArgT0&& arg0, ArgT... args) {
 
 color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.ransim.types.Route.color)
}
inline std::string* Route::mutable_color() {
  std::string* _s = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:onos.ransim.types.Route.color)
  return _s;
}
inline const std::string& Route::_internal_color() const {
  return color_.Get();
}
inline void Route::_internal_set_color(const std::string& value) {
  
  color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Route::_internal_mutable_color() {
  
  return color_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Route::release_color() {
  // @@protoc_insertion_point(field_release:onos.ransim.types.Route.color)
  return color_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Route::set_allocated_color(std::string* color) {
  if (color != nullptr) {
    
  } else {
    
  }
  color_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), color,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (color_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.ransim.types.Route.color)
}

// uint32 speed_avg = 4;
inline void Route::clear_speed_avg() {
  speed_avg_ = 0u;
}
inline uint32_t Route::_internal_speed_avg() const {
  return speed_avg_;
}
inline uint32_t Route::speed_avg() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Route.speed_avg)
  return _internal_speed_avg();
}
inline void Route::_internal_set_speed_avg(uint32_t value) {
  
  speed_avg_ = value;
}
inline void Route::set_speed_avg(uint32_t value) {
  _internal_set_speed_avg(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.Route.speed_avg)
}

// uint32 speed_stdev = 5;
inline void Route::clear_speed_stdev() {
  speed_stdev_ = 0u;
}
inline uint32_t Route::_internal_speed_stdev() const {
  return speed_stdev_;
}
inline uint32_t Route::speed_stdev() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Route.speed_stdev)
  return _internal_speed_stdev();
}
inline void Route::_internal_set_speed_stdev(uint32_t value) {
  
  speed_stdev_ = value;
}
inline void Route::set_speed_stdev(uint32_t value) {
  _internal_set_speed_stdev(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.Route.speed_stdev)
}

// bool reverse = 6;
inline void Route::clear_reverse() {
  reverse_ = false;
}
inline bool Route::_internal_reverse() const {
  return reverse_;
}
inline bool Route::reverse() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Route.reverse)
  return _internal_reverse();
}
inline void Route::_internal_set_reverse(bool value) {
  
  reverse_ = value;
}
inline void Route::set_reverse(bool value) {
  _internal_set_reverse(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.Route.reverse)
}

// uint32 next_point = 7;
inline void Route::clear_next_point() {
  next_point_ = 0u;
}
inline uint32_t Route::_internal_next_point() const {
  return next_point_;
}
inline uint32_t Route::next_point() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Route.next_point)
  return _internal_next_point();
}
inline void Route::_internal_set_next_point(uint32_t value) {
  
  next_point_ = value;
}
inline void Route::set_next_point(uint32_t value) {
  _internal_set_next_point(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.Route.next_point)
}

// -------------------------------------------------------------------

// Ue

// uint64 imsi = 1 [(.gogoproto.customname) = "IMSI", (.gogoproto.casttype) = "IMSI"];
inline void Ue::clear_imsi() {
  imsi_ = uint64_t{0u};
}
inline uint64_t Ue::_internal_imsi() const {
  return imsi_;
}
inline uint64_t Ue::imsi() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Ue.imsi)
  return _internal_imsi();
}
inline void Ue::_internal_set_imsi(uint64_t value) {
  
  imsi_ = value;
}
inline void Ue::set_imsi(uint64_t value) {
  _internal_set_imsi(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.Ue.imsi)
}

// string type = 2;
inline void Ue::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& Ue::type() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Ue.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Ue::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.ransim.types.Ue.type)
}
inline std::string* Ue::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:onos.ransim.types.Ue.type)
  return _s;
}
inline const std::string& Ue::_internal_type() const {
  return type_.Get();
}
inline void Ue::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Ue::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Ue::release_type() {
  // @@protoc_insertion_point(field_release:onos.ransim.types.Ue.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Ue::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.ransim.types.Ue.type)
}

// .onos.ransim.types.Point position = 4;
inline bool Ue::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool Ue::has_position() const {
  return _internal_has_position();
}
inline void Ue::clear_position() {
  if (GetArenaForAllocation() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
inline const ::onos::ransim::types::Point& Ue::_internal_position() const {
  const ::onos::ransim::types::Point* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::ransim::types::Point&>(
      ::onos::ransim::types::_Point_default_instance_);
}
inline const ::onos::ransim::types::Point& Ue::position() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Ue.position)
  return _internal_position();
}
inline void Ue::unsafe_arena_set_allocated_position(
    ::onos::ransim::types::Point* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.ransim.types.Ue.position)
}
inline ::onos::ransim::types::Point* Ue::release_position() {
  
  ::onos::ransim::types::Point* temp = position_;
  position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::ransim::types::Point* Ue::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:onos.ransim.types.Ue.position)
  
  ::onos::ransim::types::Point* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::onos::ransim::types::Point* Ue::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::ransim::types::Point>(GetArenaForAllocation());
    position_ = p;
  }
  return position_;
}
inline ::onos::ransim::types::Point* Ue::mutable_position() {
  ::onos::ransim::types::Point* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:onos.ransim.types.Ue.position)
  return _msg;
}
inline void Ue::set_allocated_position(::onos::ransim::types::Point* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete position_;
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::ransim::types::Point>::GetOwningArena(position);
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:onos.ransim.types.Ue.position)
}

// uint32 rotation = 5;
inline void Ue::clear_rotation() {
  rotation_ = 0u;
}
inline uint32_t Ue::_internal_rotation() const {
  return rotation_;
}
inline uint32_t Ue::rotation() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Ue.rotation)
  return _internal_rotation();
}
inline void Ue::_internal_set_rotation(uint32_t value) {
  
  rotation_ = value;
}
inline void Ue::set_rotation(uint32_t value) {
  _internal_set_rotation(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.Ue.rotation)
}

// uint64 serving_tower = 7 [(.gogoproto.casttype) = "NCGI"];
inline void Ue::clear_serving_tower() {
  serving_tower_ = uint64_t{0u};
}
inline uint64_t Ue::_internal_serving_tower() const {
  return serving_tower_;
}
inline uint64_t Ue::serving_tower() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Ue.serving_tower)
  return _internal_serving_tower();
}
inline void Ue::_internal_set_serving_tower(uint64_t value) {
  
  serving_tower_ = value;
}
inline void Ue::set_serving_tower(uint64_t value) {
  _internal_set_serving_tower(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.Ue.serving_tower)
}

// double serving_tower_strength = 8;
inline void Ue::clear_serving_tower_strength() {
  serving_tower_strength_ = 0;
}
inline double Ue::_internal_serving_tower_strength() const {
  return serving_tower_strength_;
}
inline double Ue::serving_tower_strength() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Ue.serving_tower_strength)
  return _internal_serving_tower_strength();
}
inline void Ue::_internal_set_serving_tower_strength(double value) {
  
  serving_tower_strength_ = value;
}
inline void Ue::set_serving_tower_strength(double value) {
  _internal_set_serving_tower_strength(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.Ue.serving_tower_strength)
}

// uint64 tower1 = 9 [(.gogoproto.casttype) = "NCGI"];
inline void Ue::clear_tower1() {
  tower1_ = uint64_t{0u};
}
inline uint64_t Ue::_internal_tower1() const {
  return tower1_;
}
inline uint64_t Ue::tower1() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Ue.tower1)
  return _internal_tower1();
}
inline void Ue::_internal_set_tower1(uint64_t value) {
  
  tower1_ = value;
}
inline void Ue::set_tower1(uint64_t value) {
  _internal_set_tower1(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.Ue.tower1)
}

// double tower1_strength = 10;
inline void Ue::clear_tower1_strength() {
  tower1_strength_ = 0;
}
inline double Ue::_internal_tower1_strength() const {
  return tower1_strength_;
}
inline double Ue::tower1_strength() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Ue.tower1_strength)
  return _internal_tower1_strength();
}
inline void Ue::_internal_set_tower1_strength(double value) {
  
  tower1_strength_ = value;
}
inline void Ue::set_tower1_strength(double value) {
  _internal_set_tower1_strength(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.Ue.tower1_strength)
}

// uint64 tower2 = 11 [(.gogoproto.casttype) = "NCGI"];
inline void Ue::clear_tower2() {
  tower2_ = uint64_t{0u};
}
inline uint64_t Ue::_internal_tower2() const {
  return tower2_;
}
inline uint64_t Ue::tower2() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Ue.tower2)
  return _internal_tower2();
}
inline void Ue::_internal_set_tower2(uint64_t value) {
  
  tower2_ = value;
}
inline void Ue::set_tower2(uint64_t value) {
  _internal_set_tower2(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.Ue.tower2)
}

// double tower2_strength = 12;
inline void Ue::clear_tower2_strength() {
  tower2_strength_ = 0;
}
inline double Ue::_internal_tower2_strength() const {
  return tower2_strength_;
}
inline double Ue::tower2_strength() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Ue.tower2_strength)
  return _internal_tower2_strength();
}
inline void Ue::_internal_set_tower2_strength(double value) {
  
  tower2_strength_ = value;
}
inline void Ue::set_tower2_strength(double value) {
  _internal_set_tower2_strength(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.Ue.tower2_strength)
}

// uint64 tower3 = 13 [(.gogoproto.casttype) = "NCGI"];
inline void Ue::clear_tower3() {
  tower3_ = uint64_t{0u};
}
inline uint64_t Ue::_internal_tower3() const {
  return tower3_;
}
inline uint64_t Ue::tower3() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Ue.tower3)
  return _internal_tower3();
}
inline void Ue::_internal_set_tower3(uint64_t value) {
  
  tower3_ = value;
}
inline void Ue::set_tower3(uint64_t value) {
  _internal_set_tower3(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.Ue.tower3)
}

// double tower3_strength = 14;
inline void Ue::clear_tower3_strength() {
  tower3_strength_ = 0;
}
inline double Ue::_internal_tower3_strength() const {
  return tower3_strength_;
}
inline double Ue::tower3_strength() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Ue.tower3_strength)
  return _internal_tower3_strength();
}
inline void Ue::_internal_set_tower3_strength(double value) {
  
  tower3_strength_ = value;
}
inline void Ue::set_tower3_strength(double value) {
  _internal_set_tower3_strength(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.Ue.tower3_strength)
}

// uint32 crnti = 15 [(.gogoproto.customname) = "CRNTI", (.gogoproto.casttype) = "CRNTI"];
inline void Ue::clear_crnti() {
  crnti_ = 0u;
}
inline uint32_t Ue::_internal_crnti() const {
  return crnti_;
}
inline uint32_t Ue::crnti() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Ue.crnti)
  return _internal_crnti();
}
inline void Ue::_internal_set_crnti(uint32_t value) {
  
  crnti_ = value;
}
inline void Ue::set_crnti(uint32_t value) {
  _internal_set_crnti(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.Ue.crnti)
}

// bool admitted = 16;
inline void Ue::clear_admitted() {
  admitted_ = false;
}
inline bool Ue::_internal_admitted() const {
  return admitted_;
}
inline bool Ue::admitted() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Ue.admitted)
  return _internal_admitted();
}
inline void Ue::_internal_set_admitted(bool value) {
  
  admitted_ = value;
}
inline void Ue::set_admitted(bool value) {
  _internal_set_admitted(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.Ue.admitted)
}

// .onos.ransim.types.UeMetrics metrics = 17;
inline bool Ue::_internal_has_metrics() const {
  return this != internal_default_instance() && metrics_ != nullptr;
}
inline bool Ue::has_metrics() const {
  return _internal_has_metrics();
}
inline void Ue::clear_metrics() {
  if (GetArenaForAllocation() == nullptr && metrics_ != nullptr) {
    delete metrics_;
  }
  metrics_ = nullptr;
}
inline const ::onos::ransim::types::UeMetrics& Ue::_internal_metrics() const {
  const ::onos::ransim::types::UeMetrics* p = metrics_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::ransim::types::UeMetrics&>(
      ::onos::ransim::types::_UeMetrics_default_instance_);
}
inline const ::onos::ransim::types::UeMetrics& Ue::metrics() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Ue.metrics)
  return _internal_metrics();
}
inline void Ue::unsafe_arena_set_allocated_metrics(
    ::onos::ransim::types::UeMetrics* metrics) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(metrics_);
  }
  metrics_ = metrics;
  if (metrics) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.ransim.types.Ue.metrics)
}
inline ::onos::ransim::types::UeMetrics* Ue::release_metrics() {
  
  ::onos::ransim::types::UeMetrics* temp = metrics_;
  metrics_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::ransim::types::UeMetrics* Ue::unsafe_arena_release_metrics() {
  // @@protoc_insertion_point(field_release:onos.ransim.types.Ue.metrics)
  
  ::onos::ransim::types::UeMetrics* temp = metrics_;
  metrics_ = nullptr;
  return temp;
}
inline ::onos::ransim::types::UeMetrics* Ue::_internal_mutable_metrics() {
  
  if (metrics_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::ransim::types::UeMetrics>(GetArenaForAllocation());
    metrics_ = p;
  }
  return metrics_;
}
inline ::onos::ransim::types::UeMetrics* Ue::mutable_metrics() {
  ::onos::ransim::types::UeMetrics* _msg = _internal_mutable_metrics();
  // @@protoc_insertion_point(field_mutable:onos.ransim.types.Ue.metrics)
  return _msg;
}
inline void Ue::set_allocated_metrics(::onos::ransim::types::UeMetrics* metrics) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete metrics_;
  }
  if (metrics) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::ransim::types::UeMetrics>::GetOwningArena(metrics);
    if (message_arena != submessage_arena) {
      metrics = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, metrics, submessage_arena);
    }
    
  } else {
    
  }
  metrics_ = metrics;
  // @@protoc_insertion_point(field_set_allocated:onos.ransim.types.Ue.metrics)
}

// uint32 rrc_state = 18;
inline void Ue::clear_rrc_state() {
  rrc_state_ = 0u;
}
inline uint32_t Ue::_internal_rrc_state() const {
  return rrc_state_;
}
inline uint32_t Ue::rrc_state() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Ue.rrc_state)
  return _internal_rrc_state();
}
inline void Ue::_internal_set_rrc_state(uint32_t value) {
  
  rrc_state_ = value;
}
inline void Ue::set_rrc_state(uint32_t value) {
  _internal_set_rrc_state(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.Ue.rrc_state)
}

// int32 five_qi = 19;
inline void Ue::clear_five_qi() {
  five_qi_ = 0;
}
inline int32_t Ue::_internal_five_qi() const {
  return five_qi_;
}
inline int32_t Ue::five_qi() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Ue.five_qi)
  return _internal_five_qi();
}
inline void Ue::_internal_set_five_qi(int32_t value) {
  
  five_qi_ = value;
}
inline void Ue::set_five_qi(int32_t value) {
  _internal_set_five_qi(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.Ue.five_qi)
}

// .onos.ransim.types.UeIdentity ueid = 20;
inline bool Ue::_internal_has_ueid() const {
  return this != internal_default_instance() && ueid_ != nullptr;
}
inline bool Ue::has_ueid() const {
  return _internal_has_ueid();
}
inline void Ue::clear_ueid() {
  if (GetArenaForAllocation() == nullptr && ueid_ != nullptr) {
    delete ueid_;
  }
  ueid_ = nullptr;
}
inline const ::onos::ransim::types::UeIdentity& Ue::_internal_ueid() const {
  const ::onos::ransim::types::UeIdentity* p = ueid_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::ransim::types::UeIdentity&>(
      ::onos::ransim::types::_UeIdentity_default_instance_);
}
inline const ::onos::ransim::types::UeIdentity& Ue::ueid() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Ue.ueid)
  return _internal_ueid();
}
inline void Ue::unsafe_arena_set_allocated_ueid(
    ::onos::ransim::types::UeIdentity* ueid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ueid_);
  }
  ueid_ = ueid;
  if (ueid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.ransim.types.Ue.ueid)
}
inline ::onos::ransim::types::UeIdentity* Ue::release_ueid() {
  
  ::onos::ransim::types::UeIdentity* temp = ueid_;
  ueid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::ransim::types::UeIdentity* Ue::unsafe_arena_release_ueid() {
  // @@protoc_insertion_point(field_release:onos.ransim.types.Ue.ueid)
  
  ::onos::ransim::types::UeIdentity* temp = ueid_;
  ueid_ = nullptr;
  return temp;
}
inline ::onos::ransim::types::UeIdentity* Ue::_internal_mutable_ueid() {
  
  if (ueid_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::ransim::types::UeIdentity>(GetArenaForAllocation());
    ueid_ = p;
  }
  return ueid_;
}
inline ::onos::ransim::types::UeIdentity* Ue::mutable_ueid() {
  ::onos::ransim::types::UeIdentity* _msg = _internal_mutable_ueid();
  // @@protoc_insertion_point(field_mutable:onos.ransim.types.Ue.ueid)
  return _msg;
}
inline void Ue::set_allocated_ueid(::onos::ransim::types::UeIdentity* ueid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ueid_;
  }
  if (ueid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::ransim::types::UeIdentity>::GetOwningArena(ueid);
    if (message_arena != submessage_arena) {
      ueid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ueid, submessage_arena);
    }
    
  } else {
    
  }
  ueid_ = ueid;
  // @@protoc_insertion_point(field_set_allocated:onos.ransim.types.Ue.ueid)
}

// double serving_tower_geometry = 21;
inline void Ue::clear_serving_tower_geometry() {
  serving_tower_geometry_ = 0;
}
inline double Ue::_internal_serving_tower_geometry() const {
  return serving_tower_geometry_;
}
inline double Ue::serving_tower_geometry() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Ue.serving_tower_geometry)
  return _internal_serving_tower_geometry();
}
inline void Ue::_internal_set_serving_tower_geometry(double value) {
  
  serving_tower_geometry_ = value;
}
inline void Ue::set_serving_tower_geometry(double value) {
  _internal_set_serving_tower_geometry(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.Ue.serving_tower_geometry)
}

// -------------------------------------------------------------------

// UeIdentity

// .onos.ransim.types.Guami guami = 1;
inline bool UeIdentity::_internal_has_guami() const {
  return this != internal_default_instance() && guami_ != nullptr;
}
inline bool UeIdentity::has_guami() const {
  return _internal_has_guami();
}
inline void UeIdentity::clear_guami() {
  if (GetArenaForAllocation() == nullptr && guami_ != nullptr) {
    delete guami_;
  }
  guami_ = nullptr;
}
inline const ::onos::ransim::types::Guami& UeIdentity::_internal_guami() const {
  const ::onos::ransim::types::Guami* p = guami_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::ransim::types::Guami&>(
      ::onos::ransim::types::_Guami_default_instance_);
}
inline const ::onos::ransim::types::Guami& UeIdentity::guami() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.UeIdentity.guami)
  return _internal_guami();
}
inline void UeIdentity::unsafe_arena_set_allocated_guami(
    ::onos::ransim::types::Guami* guami) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guami_);
  }
  guami_ = guami;
  if (guami) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.ransim.types.UeIdentity.guami)
}
inline ::onos::ransim::types::Guami* UeIdentity::release_guami() {
  
  ::onos::ransim::types::Guami* temp = guami_;
  guami_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::ransim::types::Guami* UeIdentity::unsafe_arena_release_guami() {
  // @@protoc_insertion_point(field_release:onos.ransim.types.UeIdentity.guami)
  
  ::onos::ransim::types::Guami* temp = guami_;
  guami_ = nullptr;
  return temp;
}
inline ::onos::ransim::types::Guami* UeIdentity::_internal_mutable_guami() {
  
  if (guami_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::ransim::types::Guami>(GetArenaForAllocation());
    guami_ = p;
  }
  return guami_;
}
inline ::onos::ransim::types::Guami* UeIdentity::mutable_guami() {
  ::onos::ransim::types::Guami* _msg = _internal_mutable_guami();
  // @@protoc_insertion_point(field_mutable:onos.ransim.types.UeIdentity.guami)
  return _msg;
}
inline void UeIdentity::set_allocated_guami(::onos::ransim::types::Guami* guami) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete guami_;
  }
  if (guami) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::ransim::types::Guami>::GetOwningArena(guami);
    if (message_arena != submessage_arena) {
      guami = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guami, submessage_arena);
    }
    
  } else {
    
  }
  guami_ = guami;
  // @@protoc_insertion_point(field_set_allocated:onos.ransim.types.UeIdentity.guami)
}

// uint64 amf_ue_ngap_id = 2 [(.gogoproto.casttype) = "AmfUENgapID"];
inline void UeIdentity::clear_amf_ue_ngap_id() {
  amf_ue_ngap_id_ = uint64_t{0u};
}
inline uint64_t UeIdentity::_internal_amf_ue_ngap_id() const {
  return amf_ue_ngap_id_;
}
inline uint64_t UeIdentity::amf_ue_ngap_id() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.UeIdentity.amf_ue_ngap_id)
  return _internal_amf_ue_ngap_id();
}
inline void UeIdentity::_internal_set_amf_ue_ngap_id(uint64_t value) {
  
  amf_ue_ngap_id_ = value;
}
inline void UeIdentity::set_amf_ue_ngap_id(uint64_t value) {
  _internal_set_amf_ue_ngap_id(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.UeIdentity.amf_ue_ngap_id)
}

// -------------------------------------------------------------------

// Guami

// uint32 plmnid = 1;
inline void Guami::clear_plmnid() {
  plmnid_ = 0u;
}
inline uint32_t Guami::_internal_plmnid() const {
  return plmnid_;
}
inline uint32_t Guami::plmnid() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Guami.plmnid)
  return _internal_plmnid();
}
inline void Guami::_internal_set_plmnid(uint32_t value) {
  
  plmnid_ = value;
}
inline void Guami::set_plmnid(uint32_t value) {
  _internal_set_plmnid(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.Guami.plmnid)
}

// uint32 amf_region_id = 2;
inline void Guami::clear_amf_region_id() {
  amf_region_id_ = 0u;
}
inline uint32_t Guami::_internal_amf_region_id() const {
  return amf_region_id_;
}
inline uint32_t Guami::amf_region_id() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Guami.amf_region_id)
  return _internal_amf_region_id();
}
inline void Guami::_internal_set_amf_region_id(uint32_t value) {
  
  amf_region_id_ = value;
}
inline void Guami::set_amf_region_id(uint32_t value) {
  _internal_set_amf_region_id(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.Guami.amf_region_id)
}

// uint32 amf_set_id = 3;
inline void Guami::clear_amf_set_id() {
  amf_set_id_ = 0u;
}
inline uint32_t Guami::_internal_amf_set_id() const {
  return amf_set_id_;
}
inline uint32_t Guami::amf_set_id() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Guami.amf_set_id)
  return _internal_amf_set_id();
}
inline void Guami::_internal_set_amf_set_id(uint32_t value) {
  
  amf_set_id_ = value;
}
inline void Guami::set_amf_set_id(uint32_t value) {
  _internal_set_amf_set_id(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.Guami.amf_set_id)
}

// uint32 amf_pointer = 4;
inline void Guami::clear_amf_pointer() {
  amf_pointer_ = 0u;
}
inline uint32_t Guami::_internal_amf_pointer() const {
  return amf_pointer_;
}
inline uint32_t Guami::amf_pointer() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Guami.amf_pointer)
  return _internal_amf_pointer();
}
inline void Guami::_internal_set_amf_pointer(uint32_t value) {
  
  amf_pointer_ = value;
}
inline void Guami::set_amf_pointer(uint32_t value) {
  _internal_set_amf_pointer(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.Guami.amf_pointer)
}

// -------------------------------------------------------------------

// UeMetrics

// int64 ho_latency = 1;
inline void UeMetrics::clear_ho_latency() {
  ho_latency_ = int64_t{0};
}
inline int64_t UeMetrics::_internal_ho_latency() const {
  return ho_latency_;
}
inline int64_t UeMetrics::ho_latency() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.UeMetrics.ho_latency)
  return _internal_ho_latency();
}
inline void UeMetrics::_internal_set_ho_latency(int64_t value) {
  
  ho_latency_ = value;
}
inline void UeMetrics::set_ho_latency(int64_t value) {
  _internal_set_ho_latency(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.UeMetrics.ho_latency)
}

// int64 ho_report_timestamp = 2;
inline void UeMetrics::clear_ho_report_timestamp() {
  ho_report_timestamp_ = int64_t{0};
}
inline int64_t UeMetrics::_internal_ho_report_timestamp() const {
  return ho_report_timestamp_;
}
inline int64_t UeMetrics::ho_report_timestamp() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.UeMetrics.ho_report_timestamp)
  return _internal_ho_report_timestamp();
}
inline void UeMetrics::_internal_set_ho_report_timestamp(int64_t value) {
  
  ho_report_timestamp_ = value;
}
inline void UeMetrics::set_ho_report_timestamp(int64_t value) {
  _internal_set_ho_report_timestamp(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.UeMetrics.ho_report_timestamp)
}

// bool is_first = 3;
inline void UeMetrics::clear_is_first() {
  is_first_ = false;
}
inline bool UeMetrics::_internal_is_first() const {
  return is_first_;
}
inline bool UeMetrics::is_first() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.UeMetrics.is_first)
  return _internal_is_first();
}
inline void UeMetrics::_internal_set_is_first(bool value) {
  
  is_first_ = value;
}
inline void UeMetrics::set_is_first(bool value) {
  _internal_set_is_first(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.UeMetrics.is_first)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Cell

// uint64 ecgi = 1 [(.gogoproto.customname) = "NCGI", (.gogoproto.casttype) = "NCGI"];
inline void Cell::clear_ecgi() {
  ecgi_ = uint64_t{0u};
}
inline uint64_t Cell::_internal_ecgi() const {
  return ecgi_;
}
inline uint64_t Cell::ecgi() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Cell.ecgi)
  return _internal_ecgi();
}
inline void Cell::_internal_set_ecgi(uint64_t value) {
  
  ecgi_ = value;
}
inline void Cell::set_ecgi(uint64_t value) {
  _internal_set_ecgi(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.Cell.ecgi)
}

// .onos.ransim.types.Point location = 3;
inline bool Cell::_internal_has_location() const {
  return this != internal_default_instance() && location_ != nullptr;
}
inline bool Cell::has_location() const {
  return _internal_has_location();
}
inline void Cell::clear_location() {
  if (GetArenaForAllocation() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
}
inline const ::onos::ransim::types::Point& Cell::_internal_location() const {
  const ::onos::ransim::types::Point* p = location_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::ransim::types::Point&>(
      ::onos::ransim::types::_Point_default_instance_);
}
inline const ::onos::ransim::types::Point& Cell::location() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Cell.location)
  return _internal_location();
}
inline void Cell::unsafe_arena_set_allocated_location(
    ::onos::ransim::types::Point* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_);
  }
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.ransim.types.Cell.location)
}
inline ::onos::ransim::types::Point* Cell::release_location() {
  
  ::onos::ransim::types::Point* temp = location_;
  location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::ransim::types::Point* Cell::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:onos.ransim.types.Cell.location)
  
  ::onos::ransim::types::Point* temp = location_;
  location_ = nullptr;
  return temp;
}
inline ::onos::ransim::types::Point* Cell::_internal_mutable_location() {
  
  if (location_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::ransim::types::Point>(GetArenaForAllocation());
    location_ = p;
  }
  return location_;
}
inline ::onos::ransim::types::Point* Cell::mutable_location() {
  ::onos::ransim::types::Point* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:onos.ransim.types.Cell.location)
  return _msg;
}
inline void Cell::set_allocated_location(::onos::ransim::types::Point* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::ransim::types::Point>::GetOwningArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:onos.ransim.types.Cell.location)
}

// .onos.ransim.types.Sector sector = 4;
inline bool Cell::_internal_has_sector() const {
  return this != internal_default_instance() && sector_ != nullptr;
}
inline bool Cell::has_sector() const {
  return _internal_has_sector();
}
inline void Cell::clear_sector() {
  if (GetArenaForAllocation() == nullptr && sector_ != nullptr) {
    delete sector_;
  }
  sector_ = nullptr;
}
inline const ::onos::ransim::types::Sector& Cell::_internal_sector() const {
  const ::onos::ransim::types::Sector* p = sector_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::ransim::types::Sector&>(
      ::onos::ransim::types::_Sector_default_instance_);
}
inline const ::onos::ransim::types::Sector& Cell::sector() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Cell.sector)
  return _internal_sector();
}
inline void Cell::unsafe_arena_set_allocated_sector(
    ::onos::ransim::types::Sector* sector) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sector_);
  }
  sector_ = sector;
  if (sector) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.ransim.types.Cell.sector)
}
inline ::onos::ransim::types::Sector* Cell::release_sector() {
  
  ::onos::ransim::types::Sector* temp = sector_;
  sector_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::ransim::types::Sector* Cell::unsafe_arena_release_sector() {
  // @@protoc_insertion_point(field_release:onos.ransim.types.Cell.sector)
  
  ::onos::ransim::types::Sector* temp = sector_;
  sector_ = nullptr;
  return temp;
}
inline ::onos::ransim::types::Sector* Cell::_internal_mutable_sector() {
  
  if (sector_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::ransim::types::Sector>(GetArenaForAllocation());
    sector_ = p;
  }
  return sector_;
}
inline ::onos::ransim::types::Sector* Cell::mutable_sector() {
  ::onos::ransim::types::Sector* _msg = _internal_mutable_sector();
  // @@protoc_insertion_point(field_mutable:onos.ransim.types.Cell.sector)
  return _msg;
}
inline void Cell::set_allocated_sector(::onos::ransim::types::Sector* sector) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete sector_;
  }
  if (sector) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::ransim::types::Sector>::GetOwningArena(sector);
    if (message_arena != submessage_arena) {
      sector = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sector, submessage_arena);
    }
    
  } else {
    
  }
  sector_ = sector;
  // @@protoc_insertion_point(field_set_allocated:onos.ransim.types.Cell.sector)
}

// string color = 5;
inline void Cell::clear_color() {
  color_.ClearToEmpty();
}
inline const std::string& Cell::color() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Cell.color)
  return _internal_color();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Cell::set_color(ArgT0&& arg0, ArgT... args) {
 
 color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.ransim.types.Cell.color)
}
inline std::string* Cell::mutable_color() {
  std::string* _s = _internal_mutable_color();
  // @@protoc_insertion_point(field_mutable:onos.ransim.types.Cell.color)
  return _s;
}
inline const std::string& Cell::_internal_color() const {
  return color_.Get();
}
inline void Cell::_internal_set_color(const std::string& value) {
  
  color_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Cell::_internal_mutable_color() {
  
  return color_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Cell::release_color() {
  // @@protoc_insertion_point(field_release:onos.ransim.types.Cell.color)
  return color_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Cell::set_allocated_color(std::string* color) {
  if (color != nullptr) {
    
  } else {
    
  }
  color_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), color,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (color_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    color_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.ransim.types.Cell.color)
}

// uint32 max_ues = 6 [(.gogoproto.customname) = "MaxUEs"];
inline void Cell::clear_max_ues() {
  max_ues_ = 0u;
}
inline uint32_t Cell::_internal_max_ues() const {
  return max_ues_;
}
inline uint32_t Cell::max_ues() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Cell.max_ues)
  return _internal_max_ues();
}
inline void Cell::_internal_set_max_ues(uint32_t value) {
  
  max_ues_ = value;
}
inline void Cell::set_max_ues(uint32_t value) {
  _internal_set_max_ues(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.Cell.max_ues)
}

// repeated uint64 neighbors = 7 [(.gogoproto.casttype) = "NCGI"];
inline int Cell::_internal_neighbors_size() const {
  return neighbors_.size();
}
inline int Cell::neighbors_size() const {
  return _internal_neighbors_size();
}
inline void Cell::clear_neighbors() {
  neighbors_.Clear();
}
inline uint64_t Cell::_internal_neighbors(int index) const {
  return neighbors_.Get(index);
}
inline uint64_t Cell::neighbors(int index) const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Cell.neighbors)
  return _internal_neighbors(index);
}
inline void Cell::set_neighbors(int index, uint64_t value) {
  neighbors_.Set(index, value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.Cell.neighbors)
}
inline void Cell::_internal_add_neighbors(uint64_t value) {
  neighbors_.Add(value);
}
inline void Cell::add_neighbors(uint64_t value) {
  _internal_add_neighbors(value);
  // @@protoc_insertion_point(field_add:onos.ransim.types.Cell.neighbors)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
Cell::_internal_neighbors() const {
  return neighbors_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
Cell::neighbors() const {
  // @@protoc_insertion_point(field_list:onos.ransim.types.Cell.neighbors)
  return _internal_neighbors();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
Cell::_internal_mutable_neighbors() {
  return &neighbors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
Cell::mutable_neighbors() {
  // @@protoc_insertion_point(field_mutable_list:onos.ransim.types.Cell.neighbors)
  return _internal_mutable_neighbors();
}

// double tx_power_db = 8 [(.gogoproto.customname) = "TxPowerdB"];
inline void Cell::clear_tx_power_db() {
  tx_power_db_ = 0;
}
inline double Cell::_internal_tx_power_db() const {
  return tx_power_db_;
}
inline double Cell::tx_power_db() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Cell.tx_power_db)
  return _internal_tx_power_db();
}
inline void Cell::_internal_set_tx_power_db(double value) {
  
  tx_power_db_ = value;
}
inline void Cell::set_tx_power_db(double value) {
  _internal_set_tx_power_db(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.Cell.tx_power_db)
}

// .onos.ransim.types.MeasurementParams measurement_params = 9;
inline bool Cell::_internal_has_measurement_params() const {
  return this != internal_default_instance() && measurement_params_ != nullptr;
}
inline bool Cell::has_measurement_params() const {
  return _internal_has_measurement_params();
}
inline void Cell::clear_measurement_params() {
  if (GetArenaForAllocation() == nullptr && measurement_params_ != nullptr) {
    delete measurement_params_;
  }
  measurement_params_ = nullptr;
}
inline const ::onos::ransim::types::MeasurementParams& Cell::_internal_measurement_params() const {
  const ::onos::ransim::types::MeasurementParams* p = measurement_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::ransim::types::MeasurementParams&>(
      ::onos::ransim::types::_MeasurementParams_default_instance_);
}
inline const ::onos::ransim::types::MeasurementParams& Cell::measurement_params() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Cell.measurement_params)
  return _internal_measurement_params();
}
inline void Cell::unsafe_arena_set_allocated_measurement_params(
    ::onos::ransim::types::MeasurementParams* measurement_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(measurement_params_);
  }
  measurement_params_ = measurement_params;
  if (measurement_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.ransim.types.Cell.measurement_params)
}
inline ::onos::ransim::types::MeasurementParams* Cell::release_measurement_params() {
  
  ::onos::ransim::types::MeasurementParams* temp = measurement_params_;
  measurement_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::ransim::types::MeasurementParams* Cell::unsafe_arena_release_measurement_params() {
  // @@protoc_insertion_point(field_release:onos.ransim.types.Cell.measurement_params)
  
  ::onos::ransim::types::MeasurementParams* temp = measurement_params_;
  measurement_params_ = nullptr;
  return temp;
}
inline ::onos::ransim::types::MeasurementParams* Cell::_internal_mutable_measurement_params() {
  
  if (measurement_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::ransim::types::MeasurementParams>(GetArenaForAllocation());
    measurement_params_ = p;
  }
  return measurement_params_;
}
inline ::onos::ransim::types::MeasurementParams* Cell::mutable_measurement_params() {
  ::onos::ransim::types::MeasurementParams* _msg = _internal_mutable_measurement_params();
  // @@protoc_insertion_point(field_mutable:onos.ransim.types.Cell.measurement_params)
  return _msg;
}
inline void Cell::set_allocated_measurement_params(::onos::ransim::types::MeasurementParams* measurement_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete measurement_params_;
  }
  if (measurement_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::ransim::types::MeasurementParams>::GetOwningArena(measurement_params);
    if (message_arena != submessage_arena) {
      measurement_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, measurement_params, submessage_arena);
    }
    
  } else {
    
  }
  measurement_params_ = measurement_params;
  // @@protoc_insertion_point(field_set_allocated:onos.ransim.types.Cell.measurement_params)
}

// map<uint32, uint64> crnti_map = 10 [(.gogoproto.castkey) = "CRNTI", (.gogoproto.castvalue) = "IMSI"];
inline int Cell::_internal_crnti_map_size() const {
  return crnti_map_.size();
}
inline int Cell::crnti_map_size() const {
  return _internal_crnti_map_size();
}
inline void Cell::clear_crnti_map() {
  crnti_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint64_t >&
Cell::_internal_crnti_map() const {
  return crnti_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint64_t >&
Cell::crnti_map() const {
  // @@protoc_insertion_point(field_map:onos.ransim.types.Cell.crnti_map)
  return _internal_crnti_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint64_t >*
Cell::_internal_mutable_crnti_map() {
  return crnti_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, uint64_t >*
Cell::mutable_crnti_map() {
  // @@protoc_insertion_point(field_mutable_map:onos.ransim.types.Cell.crnti_map)
  return _internal_mutable_crnti_map();
}

// uint32 crnti_index = 11;
inline void Cell::clear_crnti_index() {
  crnti_index_ = 0u;
}
inline uint32_t Cell::_internal_crnti_index() const {
  return crnti_index_;
}
inline uint32_t Cell::crnti_index() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Cell.crnti_index)
  return _internal_crnti_index();
}
inline void Cell::_internal_set_crnti_index(uint32_t value) {
  
  crnti_index_ = value;
}
inline void Cell::set_crnti_index(uint32_t value) {
  _internal_set_crnti_index(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.Cell.crnti_index)
}

// uint32 port = 12;
inline void Cell::clear_port() {
  port_ = 0u;
}
inline uint32_t Cell::_internal_port() const {
  return port_;
}
inline uint32_t Cell::port() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Cell.port)
  return _internal_port();
}
inline void Cell::_internal_set_port(uint32_t value) {
  
  port_ = value;
}
inline void Cell::set_port(uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.Cell.port)
}

// uint32 pci = 13;
inline void Cell::clear_pci() {
  pci_ = 0u;
}
inline uint32_t Cell::_internal_pci() const {
  return pci_;
}
inline uint32_t Cell::pci() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Cell.pci)
  return _internal_pci();
}
inline void Cell::_internal_set_pci(uint32_t value) {
  
  pci_ = value;
}
inline void Cell::set_pci(uint32_t value) {
  _internal_set_pci(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.Cell.pci)
}

// uint32 earfcn = 14;
inline void Cell::clear_earfcn() {
  earfcn_ = 0u;
}
inline uint32_t Cell::_internal_earfcn() const {
  return earfcn_;
}
inline uint32_t Cell::earfcn() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Cell.earfcn)
  return _internal_earfcn();
}
inline void Cell::_internal_set_earfcn(uint32_t value) {
  
  earfcn_ = value;
}
inline void Cell::set_earfcn(uint32_t value) {
  _internal_set_earfcn(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.Cell.earfcn)
}

// .onos.ransim.types.CellType cell_type = 15;
inline void Cell::clear_cell_type() {
  cell_type_ = 0;
}
inline ::onos::ransim::types::CellType Cell::_internal_cell_type() const {
  return static_cast< ::onos::ransim::types::CellType >(cell_type_);
}
inline ::onos::ransim::types::CellType Cell::cell_type() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Cell.cell_type)
  return _internal_cell_type();
}
inline void Cell::_internal_set_cell_type(::onos::ransim::types::CellType value) {
  
  cell_type_ = value;
}
inline void Cell::set_cell_type(::onos::ransim::types::CellType value) {
  _internal_set_cell_type(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.Cell.cell_type)
}

// uint32 rrc_idle_count = 16;
inline void Cell::clear_rrc_idle_count() {
  rrc_idle_count_ = 0u;
}
inline uint32_t Cell::_internal_rrc_idle_count() const {
  return rrc_idle_count_;
}
inline uint32_t Cell::rrc_idle_count() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Cell.rrc_idle_count)
  return _internal_rrc_idle_count();
}
inline void Cell::_internal_set_rrc_idle_count(uint32_t value) {
  
  rrc_idle_count_ = value;
}
inline void Cell::set_rrc_idle_count(uint32_t value) {
  _internal_set_rrc_idle_count(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.Cell.rrc_idle_count)
}

// uint32 rrc_connected_count = 17;
inline void Cell::clear_rrc_connected_count() {
  rrc_connected_count_ = 0u;
}
inline uint32_t Cell::_internal_rrc_connected_count() const {
  return rrc_connected_count_;
}
inline uint32_t Cell::rrc_connected_count() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Cell.rrc_connected_count)
  return _internal_rrc_connected_count();
}
inline void Cell::_internal_set_rrc_connected_count(uint32_t value) {
  
  rrc_connected_count_ = value;
}
inline void Cell::set_rrc_connected_count(uint32_t value) {
  _internal_set_rrc_connected_count(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.Cell.rrc_connected_count)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MeasurementParams

// int32 time_to_trigger = 1;
inline void MeasurementParams::clear_time_to_trigger() {
  time_to_trigger_ = 0;
}
inline int32_t MeasurementParams::_internal_time_to_trigger() const {
  return time_to_trigger_;
}
inline int32_t MeasurementParams::time_to_trigger() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.MeasurementParams.time_to_trigger)
  return _internal_time_to_trigger();
}
inline void MeasurementParams::_internal_set_time_to_trigger(int32_t value) {
  
  time_to_trigger_ = value;
}
inline void MeasurementParams::set_time_to_trigger(int32_t value) {
  _internal_set_time_to_trigger(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.MeasurementParams.time_to_trigger)
}

// int32 frequency_offset = 2;
inline void MeasurementParams::clear_frequency_offset() {
  frequency_offset_ = 0;
}
inline int32_t MeasurementParams::_internal_frequency_offset() const {
  return frequency_offset_;
}
inline int32_t MeasurementParams::frequency_offset() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.MeasurementParams.frequency_offset)
  return _internal_frequency_offset();
}
inline void MeasurementParams::_internal_set_frequency_offset(int32_t value) {
  
  frequency_offset_ = value;
}
inline void MeasurementParams::set_frequency_offset(int32_t value) {
  _internal_set_frequency_offset(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.MeasurementParams.frequency_offset)
}

// int32 pcell_individual_offset = 3;
inline void MeasurementParams::clear_pcell_individual_offset() {
  pcell_individual_offset_ = 0;
}
inline int32_t MeasurementParams::_internal_pcell_individual_offset() const {
  return pcell_individual_offset_;
}
inline int32_t MeasurementParams::pcell_individual_offset() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.MeasurementParams.pcell_individual_offset)
  return _internal_pcell_individual_offset();
}
inline void MeasurementParams::_internal_set_pcell_individual_offset(int32_t value) {
  
  pcell_individual_offset_ = value;
}
inline void MeasurementParams::set_pcell_individual_offset(int32_t value) {
  _internal_set_pcell_individual_offset(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.MeasurementParams.pcell_individual_offset)
}

// map<uint64, int32> ncell_individual_offsets = 4 [(.gogoproto.castkey) = "NCGI"];
inline int MeasurementParams::_internal_ncell_individual_offsets_size() const {
  return ncell_individual_offsets_.size();
}
inline int MeasurementParams::ncell_individual_offsets_size() const {
  return _internal_ncell_individual_offsets_size();
}
inline void MeasurementParams::clear_ncell_individual_offsets() {
  ncell_individual_offsets_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, int32_t >&
MeasurementParams::_internal_ncell_individual_offsets() const {
  return ncell_individual_offsets_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, int32_t >&
MeasurementParams::ncell_individual_offsets() const {
  // @@protoc_insertion_point(field_map:onos.ransim.types.MeasurementParams.ncell_individual_offsets)
  return _internal_ncell_individual_offsets();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, int32_t >*
MeasurementParams::_internal_mutable_ncell_individual_offsets() {
  return ncell_individual_offsets_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, int32_t >*
MeasurementParams::mutable_ncell_individual_offsets() {
  // @@protoc_insertion_point(field_mutable_map:onos.ransim.types.MeasurementParams.ncell_individual_offsets)
  return _internal_mutable_ncell_individual_offsets();
}

// int32 hysteresis = 5;
inline void MeasurementParams::clear_hysteresis() {
  hysteresis_ = 0;
}
inline int32_t MeasurementParams::_internal_hysteresis() const {
  return hysteresis_;
}
inline int32_t MeasurementParams::hysteresis() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.MeasurementParams.hysteresis)
  return _internal_hysteresis();
}
inline void MeasurementParams::_internal_set_hysteresis(int32_t value) {
  
  hysteresis_ = value;
}
inline void MeasurementParams::set_hysteresis(int32_t value) {
  _internal_set_hysteresis(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.MeasurementParams.hysteresis)
}

// .onos.ransim.types.EventA3Params event_a3_params = 6;
inline bool MeasurementParams::_internal_has_event_a3_params() const {
  return this != internal_default_instance() && event_a3_params_ != nullptr;
}
inline bool MeasurementParams::has_event_a3_params() const {
  return _internal_has_event_a3_params();
}
inline void MeasurementParams::clear_event_a3_params() {
  if (GetArenaForAllocation() == nullptr && event_a3_params_ != nullptr) {
    delete event_a3_params_;
  }
  event_a3_params_ = nullptr;
}
inline const ::onos::ransim::types::EventA3Params& MeasurementParams::_internal_event_a3_params() const {
  const ::onos::ransim::types::EventA3Params* p = event_a3_params_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::ransim::types::EventA3Params&>(
      ::onos::ransim::types::_EventA3Params_default_instance_);
}
inline const ::onos::ransim::types::EventA3Params& MeasurementParams::event_a3_params() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.MeasurementParams.event_a3_params)
  return _internal_event_a3_params();
}
inline void MeasurementParams::unsafe_arena_set_allocated_event_a3_params(
    ::onos::ransim::types::EventA3Params* event_a3_params) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(event_a3_params_);
  }
  event_a3_params_ = event_a3_params;
  if (event_a3_params) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.ransim.types.MeasurementParams.event_a3_params)
}
inline ::onos::ransim::types::EventA3Params* MeasurementParams::release_event_a3_params() {
  
  ::onos::ransim::types::EventA3Params* temp = event_a3_params_;
  event_a3_params_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::ransim::types::EventA3Params* MeasurementParams::unsafe_arena_release_event_a3_params() {
  // @@protoc_insertion_point(field_release:onos.ransim.types.MeasurementParams.event_a3_params)
  
  ::onos::ransim::types::EventA3Params* temp = event_a3_params_;
  event_a3_params_ = nullptr;
  return temp;
}
inline ::onos::ransim::types::EventA3Params* MeasurementParams::_internal_mutable_event_a3_params() {
  
  if (event_a3_params_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::ransim::types::EventA3Params>(GetArenaForAllocation());
    event_a3_params_ = p;
  }
  return event_a3_params_;
}
inline ::onos::ransim::types::EventA3Params* MeasurementParams::mutable_event_a3_params() {
  ::onos::ransim::types::EventA3Params* _msg = _internal_mutable_event_a3_params();
  // @@protoc_insertion_point(field_mutable:onos.ransim.types.MeasurementParams.event_a3_params)
  return _msg;
}
inline void MeasurementParams::set_allocated_event_a3_params(::onos::ransim::types::EventA3Params* event_a3_params) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete event_a3_params_;
  }
  if (event_a3_params) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::ransim::types::EventA3Params>::GetOwningArena(event_a3_params);
    if (message_arena != submessage_arena) {
      event_a3_params = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event_a3_params, submessage_arena);
    }
    
  } else {
    
  }
  event_a3_params_ = event_a3_params;
  // @@protoc_insertion_point(field_set_allocated:onos.ransim.types.MeasurementParams.event_a3_params)
}

// -------------------------------------------------------------------

// EventA3Params

// int32 a3_offset = 1;
inline void EventA3Params::clear_a3_offset() {
  a3_offset_ = 0;
}
inline int32_t EventA3Params::_internal_a3_offset() const {
  return a3_offset_;
}
inline int32_t EventA3Params::a3_offset() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.EventA3Params.a3_offset)
  return _internal_a3_offset();
}
inline void EventA3Params::_internal_set_a3_offset(int32_t value) {
  
  a3_offset_ = value;
}
inline void EventA3Params::set_a3_offset(int32_t value) {
  _internal_set_a3_offset(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.EventA3Params.a3_offset)
}

// bool report_on_leave = 2;
inline void EventA3Params::clear_report_on_leave() {
  report_on_leave_ = false;
}
inline bool EventA3Params::_internal_report_on_leave() const {
  return report_on_leave_;
}
inline bool EventA3Params::report_on_leave() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.EventA3Params.report_on_leave)
  return _internal_report_on_leave();
}
inline void EventA3Params::_internal_set_report_on_leave(bool value) {
  
  report_on_leave_ = value;
}
inline void EventA3Params::set_report_on_leave(bool value) {
  _internal_set_report_on_leave(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.EventA3Params.report_on_leave)
}

// -------------------------------------------------------------------

// Node

// uint32 enbid = 1 [(.gogoproto.customname) = "GnbID", (.gogoproto.casttype) = "GnbID"];
inline void Node::clear_enbid() {
  enbid_ = 0u;
}
inline uint32_t Node::_internal_enbid() const {
  return enbid_;
}
inline uint32_t Node::enbid() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Node.enbid)
  return _internal_enbid();
}
inline void Node::_internal_set_enbid(uint32_t value) {
  
  enbid_ = value;
}
inline void Node::set_enbid(uint32_t value) {
  _internal_set_enbid(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.Node.enbid)
}

// repeated string controllers = 2;
inline int Node::_internal_controllers_size() const {
  return controllers_.size();
}
inline int Node::controllers_size() const {
  return _internal_controllers_size();
}
inline void Node::clear_controllers() {
  controllers_.Clear();
}
inline std::string* Node::add_controllers() {
  std::string* _s = _internal_add_controllers();
  // @@protoc_insertion_point(field_add_mutable:onos.ransim.types.Node.controllers)
  return _s;
}
inline const std::string& Node::_internal_controllers(int index) const {
  return controllers_.Get(index);
}
inline const std::string& Node::controllers(int index) const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Node.controllers)
  return _internal_controllers(index);
}
inline std::string* Node::mutable_controllers(int index) {
  // @@protoc_insertion_point(field_mutable:onos.ransim.types.Node.controllers)
  return controllers_.Mutable(index);
}
inline void Node::set_controllers(int index, const std::string& value) {
  controllers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.Node.controllers)
}
inline void Node::set_controllers(int index, std::string&& value) {
  controllers_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:onos.ransim.types.Node.controllers)
}
inline void Node::set_controllers(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  controllers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:onos.ransim.types.Node.controllers)
}
inline void Node::set_controllers(int index, const char* value, size_t size) {
  controllers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onos.ransim.types.Node.controllers)
}
inline std::string* Node::_internal_add_controllers() {
  return controllers_.Add();
}
inline void Node::add_controllers(const std::string& value) {
  controllers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:onos.ransim.types.Node.controllers)
}
inline void Node::add_controllers(std::string&& value) {
  controllers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:onos.ransim.types.Node.controllers)
}
inline void Node::add_controllers(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  controllers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:onos.ransim.types.Node.controllers)
}
inline void Node::add_controllers(const char* value, size_t size) {
  controllers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:onos.ransim.types.Node.controllers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Node::controllers() const {
  // @@protoc_insertion_point(field_list:onos.ransim.types.Node.controllers)
  return controllers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Node::mutable_controllers() {
  // @@protoc_insertion_point(field_mutable_list:onos.ransim.types.Node.controllers)
  return &controllers_;
}

// repeated string service_models = 3;
inline int Node::_internal_service_models_size() const {
  return service_models_.size();
}
inline int Node::service_models_size() const {
  return _internal_service_models_size();
}
inline void Node::clear_service_models() {
  service_models_.Clear();
}
inline std::string* Node::add_service_models() {
  std::string* _s = _internal_add_service_models();
  // @@protoc_insertion_point(field_add_mutable:onos.ransim.types.Node.service_models)
  return _s;
}
inline const std::string& Node::_internal_service_models(int index) const {
  return service_models_.Get(index);
}
inline const std::string& Node::service_models(int index) const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Node.service_models)
  return _internal_service_models(index);
}
inline std::string* Node::mutable_service_models(int index) {
  // @@protoc_insertion_point(field_mutable:onos.ransim.types.Node.service_models)
  return service_models_.Mutable(index);
}
inline void Node::set_service_models(int index, const std::string& value) {
  service_models_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.Node.service_models)
}
inline void Node::set_service_models(int index, std::string&& value) {
  service_models_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:onos.ransim.types.Node.service_models)
}
inline void Node::set_service_models(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  service_models_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:onos.ransim.types.Node.service_models)
}
inline void Node::set_service_models(int index, const char* value, size_t size) {
  service_models_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onos.ransim.types.Node.service_models)
}
inline std::string* Node::_internal_add_service_models() {
  return service_models_.Add();
}
inline void Node::add_service_models(const std::string& value) {
  service_models_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:onos.ransim.types.Node.service_models)
}
inline void Node::add_service_models(std::string&& value) {
  service_models_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:onos.ransim.types.Node.service_models)
}
inline void Node::add_service_models(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  service_models_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:onos.ransim.types.Node.service_models)
}
inline void Node::add_service_models(const char* value, size_t size) {
  service_models_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:onos.ransim.types.Node.service_models)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Node::service_models() const {
  // @@protoc_insertion_point(field_list:onos.ransim.types.Node.service_models)
  return service_models_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Node::mutable_service_models() {
  // @@protoc_insertion_point(field_mutable_list:onos.ransim.types.Node.service_models)
  return &service_models_;
}

// repeated uint64 cell_ecgis = 4 [(.gogoproto.customname) = "CellNCGIs", (.gogoproto.casttype) = "NCGI"];
inline int Node::_internal_cell_ecgis_size() const {
  return cell_ecgis_.size();
}
inline int Node::cell_ecgis_size() const {
  return _internal_cell_ecgis_size();
}
inline void Node::clear_cell_ecgis() {
  cell_ecgis_.Clear();
}
inline uint64_t Node::_internal_cell_ecgis(int index) const {
  return cell_ecgis_.Get(index);
}
inline uint64_t Node::cell_ecgis(int index) const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Node.cell_ecgis)
  return _internal_cell_ecgis(index);
}
inline void Node::set_cell_ecgis(int index, uint64_t value) {
  cell_ecgis_.Set(index, value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.Node.cell_ecgis)
}
inline void Node::_internal_add_cell_ecgis(uint64_t value) {
  cell_ecgis_.Add(value);
}
inline void Node::add_cell_ecgis(uint64_t value) {
  _internal_add_cell_ecgis(value);
  // @@protoc_insertion_point(field_add:onos.ransim.types.Node.cell_ecgis)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
Node::_internal_cell_ecgis() const {
  return cell_ecgis_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
Node::cell_ecgis() const {
  // @@protoc_insertion_point(field_list:onos.ransim.types.Node.cell_ecgis)
  return _internal_cell_ecgis();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
Node::_internal_mutable_cell_ecgis() {
  return &cell_ecgis_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
Node::mutable_cell_ecgis() {
  // @@protoc_insertion_point(field_mutable_list:onos.ransim.types.Node.cell_ecgis)
  return _internal_mutable_cell_ecgis();
}

// string status = 5;
inline void Node::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& Node::status() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.Node.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Node::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.ransim.types.Node.status)
}
inline std::string* Node::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:onos.ransim.types.Node.status)
  return _s;
}
inline const std::string& Node::_internal_status() const {
  return status_.Get();
}
inline void Node::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Node::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Node::release_status() {
  // @@protoc_insertion_point(field_release:onos.ransim.types.Node.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Node::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (status_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.ransim.types.Node.status)
}

// -------------------------------------------------------------------

// MapLayout

// .onos.ransim.types.Point center = 1;
inline bool MapLayout::_internal_has_center() const {
  return this != internal_default_instance() && center_ != nullptr;
}
inline bool MapLayout::has_center() const {
  return _internal_has_center();
}
inline void MapLayout::clear_center() {
  if (GetArenaForAllocation() == nullptr && center_ != nullptr) {
    delete center_;
  }
  center_ = nullptr;
}
inline const ::onos::ransim::types::Point& MapLayout::_internal_center() const {
  const ::onos::ransim::types::Point* p = center_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::ransim::types::Point&>(
      ::onos::ransim::types::_Point_default_instance_);
}
inline const ::onos::ransim::types::Point& MapLayout::center() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.MapLayout.center)
  return _internal_center();
}
inline void MapLayout::unsafe_arena_set_allocated_center(
    ::onos::ransim::types::Point* center) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(center_);
  }
  center_ = center;
  if (center) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.ransim.types.MapLayout.center)
}
inline ::onos::ransim::types::Point* MapLayout::release_center() {
  
  ::onos::ransim::types::Point* temp = center_;
  center_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::ransim::types::Point* MapLayout::unsafe_arena_release_center() {
  // @@protoc_insertion_point(field_release:onos.ransim.types.MapLayout.center)
  
  ::onos::ransim::types::Point* temp = center_;
  center_ = nullptr;
  return temp;
}
inline ::onos::ransim::types::Point* MapLayout::_internal_mutable_center() {
  
  if (center_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::ransim::types::Point>(GetArenaForAllocation());
    center_ = p;
  }
  return center_;
}
inline ::onos::ransim::types::Point* MapLayout::mutable_center() {
  ::onos::ransim::types::Point* _msg = _internal_mutable_center();
  // @@protoc_insertion_point(field_mutable:onos.ransim.types.MapLayout.center)
  return _msg;
}
inline void MapLayout::set_allocated_center(::onos::ransim::types::Point* center) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete center_;
  }
  if (center) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::ransim::types::Point>::GetOwningArena(center);
    if (message_arena != submessage_arena) {
      center = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, center, submessage_arena);
    }
    
  } else {
    
  }
  center_ = center;
  // @@protoc_insertion_point(field_set_allocated:onos.ransim.types.MapLayout.center)
}

// float zoom = 2;
inline void MapLayout::clear_zoom() {
  zoom_ = 0;
}
inline float MapLayout::_internal_zoom() const {
  return zoom_;
}
inline float MapLayout::zoom() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.MapLayout.zoom)
  return _internal_zoom();
}
inline void MapLayout::_internal_set_zoom(float value) {
  
  zoom_ = value;
}
inline void MapLayout::set_zoom(float value) {
  _internal_set_zoom(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.MapLayout.zoom)
}

// bool fade = 3;
inline void MapLayout::clear_fade() {
  fade_ = false;
}
inline bool MapLayout::_internal_fade() const {
  return fade_;
}
inline bool MapLayout::fade() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.MapLayout.fade)
  return _internal_fade();
}
inline void MapLayout::_internal_set_fade(bool value) {
  
  fade_ = value;
}
inline void MapLayout::set_fade(bool value) {
  _internal_set_fade(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.MapLayout.fade)
}

// bool show_routes = 4;
inline void MapLayout::clear_show_routes() {
  show_routes_ = false;
}
inline bool MapLayout::_internal_show_routes() const {
  return show_routes_;
}
inline bool MapLayout::show_routes() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.MapLayout.show_routes)
  return _internal_show_routes();
}
inline void MapLayout::_internal_set_show_routes(bool value) {
  
  show_routes_ = value;
}
inline void MapLayout::set_show_routes(bool value) {
  _internal_set_show_routes(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.MapLayout.show_routes)
}

// bool show_power = 5;
inline void MapLayout::clear_show_power() {
  show_power_ = false;
}
inline bool MapLayout::_internal_show_power() const {
  return show_power_;
}
inline bool MapLayout::show_power() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.MapLayout.show_power)
  return _internal_show_power();
}
inline void MapLayout::_internal_set_show_power(bool value) {
  
  show_power_ = value;
}
inline void MapLayout::set_show_power(bool value) {
  _internal_set_show_power(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.MapLayout.show_power)
}

// float locations_scale = 9;
inline void MapLayout::clear_locations_scale() {
  locations_scale_ = 0;
}
inline float MapLayout::_internal_locations_scale() const {
  return locations_scale_;
}
inline float MapLayout::locations_scale() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.MapLayout.locations_scale)
  return _internal_locations_scale();
}
inline void MapLayout::_internal_set_locations_scale(float value) {
  
  locations_scale_ = value;
}
inline void MapLayout::set_locations_scale(float value) {
  _internal_set_locations_scale(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.MapLayout.locations_scale)
}

// uint32 min_ues = 6;
inline void MapLayout::clear_min_ues() {
  min_ues_ = 0u;
}
inline uint32_t MapLayout::_internal_min_ues() const {
  return min_ues_;
}
inline uint32_t MapLayout::min_ues() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.MapLayout.min_ues)
  return _internal_min_ues();
}
inline void MapLayout::_internal_set_min_ues(uint32_t value) {
  
  min_ues_ = value;
}
inline void MapLayout::set_min_ues(uint32_t value) {
  _internal_set_min_ues(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.MapLayout.min_ues)
}

// uint32 max_ues = 7;
inline void MapLayout::clear_max_ues() {
  max_ues_ = 0u;
}
inline uint32_t MapLayout::_internal_max_ues() const {
  return max_ues_;
}
inline uint32_t MapLayout::max_ues() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.MapLayout.max_ues)
  return _internal_max_ues();
}
inline void MapLayout::_internal_set_max_ues(uint32_t value) {
  
  max_ues_ = value;
}
inline void MapLayout::set_max_ues(uint32_t value) {
  _internal_set_max_ues(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.MapLayout.max_ues)
}

// uint32 current_routes = 8;
inline void MapLayout::clear_current_routes() {
  current_routes_ = 0u;
}
inline uint32_t MapLayout::_internal_current_routes() const {
  return current_routes_;
}
inline uint32_t MapLayout::current_routes() const {
  // @@protoc_insertion_point(field_get:onos.ransim.types.MapLayout.current_routes)
  return _internal_current_routes();
}
inline void MapLayout::_internal_set_current_routes(uint32_t value) {
  
  current_routes_ = value;
}
inline void MapLayout::set_current_routes(uint32_t value) {
  _internal_set_current_routes(value);
  // @@protoc_insertion_point(field_set:onos.ransim.types.MapLayout.current_routes)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace types
}  // namespace ransim
}  // namespace onos

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::onos::ransim::types::CellType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::onos::ransim::types::CellType>() {
  return ::onos::ransim::types::CellType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_onos_2fransim_2ftypes_2ftypes_2eproto
