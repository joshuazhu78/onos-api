// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onos/ransim/trafficsim/trafficsim.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_onos_2fransim_2ftrafficsim_2ftrafficsim_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_onos_2fransim_2ftrafficsim_2ftrafficsim_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "onos/ransim/types/types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_onos_2fransim_2ftrafficsim_2ftrafficsim_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_onos_2fransim_2ftrafficsim_2ftrafficsim_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_onos_2fransim_2ftrafficsim_2ftrafficsim_2eproto;
namespace onos {
namespace ransim {
namespace trafficsim {
class ListRoutesRequest;
struct ListRoutesRequestDefaultTypeInternal;
extern ListRoutesRequestDefaultTypeInternal _ListRoutesRequest_default_instance_;
class ListRoutesResponse;
struct ListRoutesResponseDefaultTypeInternal;
extern ListRoutesResponseDefaultTypeInternal _ListRoutesResponse_default_instance_;
class ListUesRequest;
struct ListUesRequestDefaultTypeInternal;
extern ListUesRequestDefaultTypeInternal _ListUesRequest_default_instance_;
class ListUesResponse;
struct ListUesResponseDefaultTypeInternal;
extern ListUesResponseDefaultTypeInternal _ListUesResponse_default_instance_;
class MapLayoutRequest;
struct MapLayoutRequestDefaultTypeInternal;
extern MapLayoutRequestDefaultTypeInternal _MapLayoutRequest_default_instance_;
class ResetMetricsMsg;
struct ResetMetricsMsgDefaultTypeInternal;
extern ResetMetricsMsgDefaultTypeInternal _ResetMetricsMsg_default_instance_;
class SetNumberUEsRequest;
struct SetNumberUEsRequestDefaultTypeInternal;
extern SetNumberUEsRequestDefaultTypeInternal _SetNumberUEsRequest_default_instance_;
class SetNumberUEsResponse;
struct SetNumberUEsResponseDefaultTypeInternal;
extern SetNumberUEsResponseDefaultTypeInternal _SetNumberUEsResponse_default_instance_;
class WatchUesRequest;
struct WatchUesRequestDefaultTypeInternal;
extern WatchUesRequestDefaultTypeInternal _WatchUesRequest_default_instance_;
class WatchUesResponse;
struct WatchUesResponseDefaultTypeInternal;
extern WatchUesResponseDefaultTypeInternal _WatchUesResponse_default_instance_;
}  // namespace trafficsim
}  // namespace ransim
}  // namespace onos
PROTOBUF_NAMESPACE_OPEN
template<> ::onos::ransim::trafficsim::ListRoutesRequest* Arena::CreateMaybeMessage<::onos::ransim::trafficsim::ListRoutesRequest>(Arena*);
template<> ::onos::ransim::trafficsim::ListRoutesResponse* Arena::CreateMaybeMessage<::onos::ransim::trafficsim::ListRoutesResponse>(Arena*);
template<> ::onos::ransim::trafficsim::ListUesRequest* Arena::CreateMaybeMessage<::onos::ransim::trafficsim::ListUesRequest>(Arena*);
template<> ::onos::ransim::trafficsim::ListUesResponse* Arena::CreateMaybeMessage<::onos::ransim::trafficsim::ListUesResponse>(Arena*);
template<> ::onos::ransim::trafficsim::MapLayoutRequest* Arena::CreateMaybeMessage<::onos::ransim::trafficsim::MapLayoutRequest>(Arena*);
template<> ::onos::ransim::trafficsim::ResetMetricsMsg* Arena::CreateMaybeMessage<::onos::ransim::trafficsim::ResetMetricsMsg>(Arena*);
template<> ::onos::ransim::trafficsim::SetNumberUEsRequest* Arena::CreateMaybeMessage<::onos::ransim::trafficsim::SetNumberUEsRequest>(Arena*);
template<> ::onos::ransim::trafficsim::SetNumberUEsResponse* Arena::CreateMaybeMessage<::onos::ransim::trafficsim::SetNumberUEsResponse>(Arena*);
template<> ::onos::ransim::trafficsim::WatchUesRequest* Arena::CreateMaybeMessage<::onos::ransim::trafficsim::WatchUesRequest>(Arena*);
template<> ::onos::ransim::trafficsim::WatchUesResponse* Arena::CreateMaybeMessage<::onos::ransim::trafficsim::WatchUesResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace onos {
namespace ransim {
namespace trafficsim {

enum Type : int {
  NONE = 0,
  ADDED = 1,
  UPDATED = 2,
  REMOVED = 3,
  Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Type_IsValid(int value);
constexpr Type Type_MIN = NONE;
constexpr Type Type_MAX = REMOVED;
constexpr int Type_ARRAYSIZE = Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Type_descriptor();
template<typename T>
inline const std::string& Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Type_descriptor(), enum_t_value);
}
inline bool Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Type>(
    Type_descriptor(), name, value);
}
enum UpdateType : int {
  NOUPDATETYPE = 0,
  POSITION = 1,
  TOWER = 2,
  HANDOVER = 3,
  UpdateType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  UpdateType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool UpdateType_IsValid(int value);
constexpr UpdateType UpdateType_MIN = NOUPDATETYPE;
constexpr UpdateType UpdateType_MAX = HANDOVER;
constexpr int UpdateType_ARRAYSIZE = UpdateType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UpdateType_descriptor();
template<typename T>
inline const std::string& UpdateType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UpdateType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UpdateType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UpdateType_descriptor(), enum_t_value);
}
inline bool UpdateType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UpdateType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UpdateType>(
    UpdateType_descriptor(), name, value);
}
// ===================================================================

class MapLayoutRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:onos.ransim.trafficsim.MapLayoutRequest) */ {
 public:
  inline MapLayoutRequest() : MapLayoutRequest(nullptr) {}
  explicit constexpr MapLayoutRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MapLayoutRequest(const MapLayoutRequest& from);
  MapLayoutRequest(MapLayoutRequest&& from) noexcept
    : MapLayoutRequest() {
    *this = ::std::move(from);
  }

  inline MapLayoutRequest& operator=(const MapLayoutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MapLayoutRequest& operator=(MapLayoutRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MapLayoutRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MapLayoutRequest* internal_default_instance() {
    return reinterpret_cast<const MapLayoutRequest*>(
               &_MapLayoutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MapLayoutRequest& a, MapLayoutRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MapLayoutRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MapLayoutRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MapLayoutRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MapLayoutRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MapLayoutRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MapLayoutRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.trafficsim.MapLayoutRequest";
  }
  protected:
  explicit MapLayoutRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onos.ransim.trafficsim.MapLayoutRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2ftrafficsim_2ftrafficsim_2eproto;
};
// -------------------------------------------------------------------

class ListRoutesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.trafficsim.ListRoutesRequest) */ {
 public:
  inline ListRoutesRequest() : ListRoutesRequest(nullptr) {}
  ~ListRoutesRequest() override;
  explicit constexpr ListRoutesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListRoutesRequest(const ListRoutesRequest& from);
  ListRoutesRequest(ListRoutesRequest&& from) noexcept
    : ListRoutesRequest() {
    *this = ::std::move(from);
  }

  inline ListRoutesRequest& operator=(const ListRoutesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListRoutesRequest& operator=(ListRoutesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListRoutesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListRoutesRequest* internal_default_instance() {
    return reinterpret_cast<const ListRoutesRequest*>(
               &_ListRoutesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ListRoutesRequest& a, ListRoutesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListRoutesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListRoutesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListRoutesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListRoutesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListRoutesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListRoutesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListRoutesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.trafficsim.ListRoutesRequest";
  }
  protected:
  explicit ListRoutesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNoReplayFieldNumber = 1,
    kNoSubscribeFieldNumber = 2,
  };
  // bool no_replay = 1;
  void clear_no_replay();
  bool no_replay() const;
  void set_no_replay(bool value);
  private:
  bool _internal_no_replay() const;
  void _internal_set_no_replay(bool value);
  public:

  // bool no_subscribe = 2;
  void clear_no_subscribe();
  bool no_subscribe() const;
  void set_no_subscribe(bool value);
  private:
  bool _internal_no_subscribe() const;
  void _internal_set_no_subscribe(bool value);
  public:

  // @@protoc_insertion_point(class_scope:onos.ransim.trafficsim.ListRoutesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool no_replay_;
  bool no_subscribe_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2ftrafficsim_2ftrafficsim_2eproto;
};
// -------------------------------------------------------------------

class ListRoutesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.trafficsim.ListRoutesResponse) */ {
 public:
  inline ListRoutesResponse() : ListRoutesResponse(nullptr) {}
  ~ListRoutesResponse() override;
  explicit constexpr ListRoutesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListRoutesResponse(const ListRoutesResponse& from);
  ListRoutesResponse(ListRoutesResponse&& from) noexcept
    : ListRoutesResponse() {
    *this = ::std::move(from);
  }

  inline ListRoutesResponse& operator=(const ListRoutesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListRoutesResponse& operator=(ListRoutesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListRoutesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListRoutesResponse* internal_default_instance() {
    return reinterpret_cast<const ListRoutesResponse*>(
               &_ListRoutesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListRoutesResponse& a, ListRoutesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListRoutesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListRoutesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListRoutesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListRoutesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListRoutesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListRoutesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListRoutesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.trafficsim.ListRoutesResponse";
  }
  protected:
  explicit ListRoutesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRouteFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // .onos.ransim.types.Route route = 1;
  bool has_route() const;
  private:
  bool _internal_has_route() const;
  public:
  void clear_route();
  const ::onos::ransim::types::Route& route() const;
  PROTOBUF_NODISCARD ::onos::ransim::types::Route* release_route();
  ::onos::ransim::types::Route* mutable_route();
  void set_allocated_route(::onos::ransim::types::Route* route);
  private:
  const ::onos::ransim::types::Route& _internal_route() const;
  ::onos::ransim::types::Route* _internal_mutable_route();
  public:
  void unsafe_arena_set_allocated_route(
      ::onos::ransim::types::Route* route);
  ::onos::ransim::types::Route* unsafe_arena_release_route();

  // .onos.ransim.trafficsim.Type type = 2;
  void clear_type();
  ::onos::ransim::trafficsim::Type type() const;
  void set_type(::onos::ransim::trafficsim::Type value);
  private:
  ::onos::ransim::trafficsim::Type _internal_type() const;
  void _internal_set_type(::onos::ransim::trafficsim::Type value);
  public:

  // @@protoc_insertion_point(class_scope:onos.ransim.trafficsim.ListRoutesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::ransim::types::Route* route_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2ftrafficsim_2ftrafficsim_2eproto;
};
// -------------------------------------------------------------------

class ListUesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:onos.ransim.trafficsim.ListUesRequest) */ {
 public:
  inline ListUesRequest() : ListUesRequest(nullptr) {}
  explicit constexpr ListUesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListUesRequest(const ListUesRequest& from);
  ListUesRequest(ListUesRequest&& from) noexcept
    : ListUesRequest() {
    *this = ::std::move(from);
  }

  inline ListUesRequest& operator=(const ListUesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListUesRequest& operator=(ListUesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListUesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListUesRequest* internal_default_instance() {
    return reinterpret_cast<const ListUesRequest*>(
               &_ListUesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListUesRequest& a, ListUesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListUesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListUesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListUesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListUesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ListUesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ListUesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.trafficsim.ListUesRequest";
  }
  protected:
  explicit ListUesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onos.ransim.trafficsim.ListUesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2ftrafficsim_2ftrafficsim_2eproto;
};
// -------------------------------------------------------------------

class ListUesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.trafficsim.ListUesResponse) */ {
 public:
  inline ListUesResponse() : ListUesResponse(nullptr) {}
  ~ListUesResponse() override;
  explicit constexpr ListUesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListUesResponse(const ListUesResponse& from);
  ListUesResponse(ListUesResponse&& from) noexcept
    : ListUesResponse() {
    *this = ::std::move(from);
  }

  inline ListUesResponse& operator=(const ListUesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListUesResponse& operator=(ListUesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListUesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListUesResponse* internal_default_instance() {
    return reinterpret_cast<const ListUesResponse*>(
               &_ListUesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ListUesResponse& a, ListUesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListUesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListUesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListUesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListUesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListUesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListUesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListUesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.trafficsim.ListUesResponse";
  }
  protected:
  explicit ListUesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUeFieldNumber = 1,
  };
  // .onos.ransim.types.Ue ue = 1;
  bool has_ue() const;
  private:
  bool _internal_has_ue() const;
  public:
  void clear_ue();
  const ::onos::ransim::types::Ue& ue() const;
  PROTOBUF_NODISCARD ::onos::ransim::types::Ue* release_ue();
  ::onos::ransim::types::Ue* mutable_ue();
  void set_allocated_ue(::onos::ransim::types::Ue* ue);
  private:
  const ::onos::ransim::types::Ue& _internal_ue() const;
  ::onos::ransim::types::Ue* _internal_mutable_ue();
  public:
  void unsafe_arena_set_allocated_ue(
      ::onos::ransim::types::Ue* ue);
  ::onos::ransim::types::Ue* unsafe_arena_release_ue();

  // @@protoc_insertion_point(class_scope:onos.ransim.trafficsim.ListUesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::ransim::types::Ue* ue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2ftrafficsim_2ftrafficsim_2eproto;
};
// -------------------------------------------------------------------

class WatchUesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.trafficsim.WatchUesRequest) */ {
 public:
  inline WatchUesRequest() : WatchUesRequest(nullptr) {}
  ~WatchUesRequest() override;
  explicit constexpr WatchUesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WatchUesRequest(const WatchUesRequest& from);
  WatchUesRequest(WatchUesRequest&& from) noexcept
    : WatchUesRequest() {
    *this = ::std::move(from);
  }

  inline WatchUesRequest& operator=(const WatchUesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchUesRequest& operator=(WatchUesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WatchUesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WatchUesRequest* internal_default_instance() {
    return reinterpret_cast<const WatchUesRequest*>(
               &_WatchUesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(WatchUesRequest& a, WatchUesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchUesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchUesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WatchUesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WatchUesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WatchUesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WatchUesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchUesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.trafficsim.WatchUesRequest";
  }
  protected:
  explicit WatchUesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNoReplayFieldNumber = 1,
    kNoSubscribeFieldNumber = 2,
  };
  // bool no_replay = 1;
  void clear_no_replay();
  bool no_replay() const;
  void set_no_replay(bool value);
  private:
  bool _internal_no_replay() const;
  void _internal_set_no_replay(bool value);
  public:

  // bool no_subscribe = 2;
  void clear_no_subscribe();
  bool no_subscribe() const;
  void set_no_subscribe(bool value);
  private:
  bool _internal_no_subscribe() const;
  void _internal_set_no_subscribe(bool value);
  public:

  // @@protoc_insertion_point(class_scope:onos.ransim.trafficsim.WatchUesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool no_replay_;
  bool no_subscribe_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2ftrafficsim_2ftrafficsim_2eproto;
};
// -------------------------------------------------------------------

class WatchUesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.trafficsim.WatchUesResponse) */ {
 public:
  inline WatchUesResponse() : WatchUesResponse(nullptr) {}
  ~WatchUesResponse() override;
  explicit constexpr WatchUesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WatchUesResponse(const WatchUesResponse& from);
  WatchUesResponse(WatchUesResponse&& from) noexcept
    : WatchUesResponse() {
    *this = ::std::move(from);
  }

  inline WatchUesResponse& operator=(const WatchUesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchUesResponse& operator=(WatchUesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WatchUesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WatchUesResponse* internal_default_instance() {
    return reinterpret_cast<const WatchUesResponse*>(
               &_WatchUesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(WatchUesResponse& a, WatchUesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchUesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchUesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WatchUesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WatchUesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WatchUesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WatchUesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchUesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.trafficsim.WatchUesResponse";
  }
  protected:
  explicit WatchUesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUeFieldNumber = 1,
    kTypeFieldNumber = 2,
    kUpdateTypeFieldNumber = 3,
  };
  // .onos.ransim.types.Ue ue = 1;
  bool has_ue() const;
  private:
  bool _internal_has_ue() const;
  public:
  void clear_ue();
  const ::onos::ransim::types::Ue& ue() const;
  PROTOBUF_NODISCARD ::onos::ransim::types::Ue* release_ue();
  ::onos::ransim::types::Ue* mutable_ue();
  void set_allocated_ue(::onos::ransim::types::Ue* ue);
  private:
  const ::onos::ransim::types::Ue& _internal_ue() const;
  ::onos::ransim::types::Ue* _internal_mutable_ue();
  public:
  void unsafe_arena_set_allocated_ue(
      ::onos::ransim::types::Ue* ue);
  ::onos::ransim::types::Ue* unsafe_arena_release_ue();

  // .onos.ransim.trafficsim.Type type = 2;
  void clear_type();
  ::onos::ransim::trafficsim::Type type() const;
  void set_type(::onos::ransim::trafficsim::Type value);
  private:
  ::onos::ransim::trafficsim::Type _internal_type() const;
  void _internal_set_type(::onos::ransim::trafficsim::Type value);
  public:

  // .onos.ransim.trafficsim.UpdateType update_type = 3;
  void clear_update_type();
  ::onos::ransim::trafficsim::UpdateType update_type() const;
  void set_update_type(::onos::ransim::trafficsim::UpdateType value);
  private:
  ::onos::ransim::trafficsim::UpdateType _internal_update_type() const;
  void _internal_set_update_type(::onos::ransim::trafficsim::UpdateType value);
  public:

  // @@protoc_insertion_point(class_scope:onos.ransim.trafficsim.WatchUesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::ransim::types::Ue* ue_;
  int type_;
  int update_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2ftrafficsim_2ftrafficsim_2eproto;
};
// -------------------------------------------------------------------

class SetNumberUEsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.trafficsim.SetNumberUEsRequest) */ {
 public:
  inline SetNumberUEsRequest() : SetNumberUEsRequest(nullptr) {}
  ~SetNumberUEsRequest() override;
  explicit constexpr SetNumberUEsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetNumberUEsRequest(const SetNumberUEsRequest& from);
  SetNumberUEsRequest(SetNumberUEsRequest&& from) noexcept
    : SetNumberUEsRequest() {
    *this = ::std::move(from);
  }

  inline SetNumberUEsRequest& operator=(const SetNumberUEsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetNumberUEsRequest& operator=(SetNumberUEsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetNumberUEsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetNumberUEsRequest* internal_default_instance() {
    return reinterpret_cast<const SetNumberUEsRequest*>(
               &_SetNumberUEsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SetNumberUEsRequest& a, SetNumberUEsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetNumberUEsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetNumberUEsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetNumberUEsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetNumberUEsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetNumberUEsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetNumberUEsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetNumberUEsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.trafficsim.SetNumberUEsRequest";
  }
  protected:
  explicit SetNumberUEsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumberFieldNumber = 1,
  };
  // uint32 number = 1;
  void clear_number();
  uint32_t number() const;
  void set_number(uint32_t value);
  private:
  uint32_t _internal_number() const;
  void _internal_set_number(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.ransim.trafficsim.SetNumberUEsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2ftrafficsim_2ftrafficsim_2eproto;
};
// -------------------------------------------------------------------

class SetNumberUEsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.trafficsim.SetNumberUEsResponse) */ {
 public:
  inline SetNumberUEsResponse() : SetNumberUEsResponse(nullptr) {}
  ~SetNumberUEsResponse() override;
  explicit constexpr SetNumberUEsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetNumberUEsResponse(const SetNumberUEsResponse& from);
  SetNumberUEsResponse(SetNumberUEsResponse&& from) noexcept
    : SetNumberUEsResponse() {
    *this = ::std::move(from);
  }

  inline SetNumberUEsResponse& operator=(const SetNumberUEsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetNumberUEsResponse& operator=(SetNumberUEsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetNumberUEsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetNumberUEsResponse* internal_default_instance() {
    return reinterpret_cast<const SetNumberUEsResponse*>(
               &_SetNumberUEsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(SetNumberUEsResponse& a, SetNumberUEsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetNumberUEsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetNumberUEsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetNumberUEsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetNumberUEsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetNumberUEsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetNumberUEsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetNumberUEsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.trafficsim.SetNumberUEsResponse";
  }
  protected:
  explicit SetNumberUEsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNumberFieldNumber = 1,
  };
  // uint32 number = 1;
  void clear_number();
  uint32_t number() const;
  void set_number(uint32_t value);
  private:
  uint32_t _internal_number() const;
  void _internal_set_number(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.ransim.trafficsim.SetNumberUEsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2ftrafficsim_2ftrafficsim_2eproto;
};
// -------------------------------------------------------------------

class ResetMetricsMsg final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:onos.ransim.trafficsim.ResetMetricsMsg) */ {
 public:
  inline ResetMetricsMsg() : ResetMetricsMsg(nullptr) {}
  explicit constexpr ResetMetricsMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResetMetricsMsg(const ResetMetricsMsg& from);
  ResetMetricsMsg(ResetMetricsMsg&& from) noexcept
    : ResetMetricsMsg() {
    *this = ::std::move(from);
  }

  inline ResetMetricsMsg& operator=(const ResetMetricsMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResetMetricsMsg& operator=(ResetMetricsMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResetMetricsMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResetMetricsMsg* internal_default_instance() {
    return reinterpret_cast<const ResetMetricsMsg*>(
               &_ResetMetricsMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ResetMetricsMsg& a, ResetMetricsMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(ResetMetricsMsg* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResetMetricsMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResetMetricsMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResetMetricsMsg>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ResetMetricsMsg& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ResetMetricsMsg& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.trafficsim.ResetMetricsMsg";
  }
  protected:
  explicit ResetMetricsMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onos.ransim.trafficsim.ResetMetricsMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2ftrafficsim_2ftrafficsim_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MapLayoutRequest

// -------------------------------------------------------------------

// ListRoutesRequest

// bool no_replay = 1;
inline void ListRoutesRequest::clear_no_replay() {
  no_replay_ = false;
}
inline bool ListRoutesRequest::_internal_no_replay() const {
  return no_replay_;
}
inline bool ListRoutesRequest::no_replay() const {
  // @@protoc_insertion_point(field_get:onos.ransim.trafficsim.ListRoutesRequest.no_replay)
  return _internal_no_replay();
}
inline void ListRoutesRequest::_internal_set_no_replay(bool value) {
  
  no_replay_ = value;
}
inline void ListRoutesRequest::set_no_replay(bool value) {
  _internal_set_no_replay(value);
  // @@protoc_insertion_point(field_set:onos.ransim.trafficsim.ListRoutesRequest.no_replay)
}

// bool no_subscribe = 2;
inline void ListRoutesRequest::clear_no_subscribe() {
  no_subscribe_ = false;
}
inline bool ListRoutesRequest::_internal_no_subscribe() const {
  return no_subscribe_;
}
inline bool ListRoutesRequest::no_subscribe() const {
  // @@protoc_insertion_point(field_get:onos.ransim.trafficsim.ListRoutesRequest.no_subscribe)
  return _internal_no_subscribe();
}
inline void ListRoutesRequest::_internal_set_no_subscribe(bool value) {
  
  no_subscribe_ = value;
}
inline void ListRoutesRequest::set_no_subscribe(bool value) {
  _internal_set_no_subscribe(value);
  // @@protoc_insertion_point(field_set:onos.ransim.trafficsim.ListRoutesRequest.no_subscribe)
}

// -------------------------------------------------------------------

// ListRoutesResponse

// .onos.ransim.types.Route route = 1;
inline bool ListRoutesResponse::_internal_has_route() const {
  return this != internal_default_instance() && route_ != nullptr;
}
inline bool ListRoutesResponse::has_route() const {
  return _internal_has_route();
}
inline const ::onos::ransim::types::Route& ListRoutesResponse::_internal_route() const {
  const ::onos::ransim::types::Route* p = route_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::ransim::types::Route&>(
      ::onos::ransim::types::_Route_default_instance_);
}
inline const ::onos::ransim::types::Route& ListRoutesResponse::route() const {
  // @@protoc_insertion_point(field_get:onos.ransim.trafficsim.ListRoutesResponse.route)
  return _internal_route();
}
inline void ListRoutesResponse::unsafe_arena_set_allocated_route(
    ::onos::ransim::types::Route* route) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(route_);
  }
  route_ = route;
  if (route) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.ransim.trafficsim.ListRoutesResponse.route)
}
inline ::onos::ransim::types::Route* ListRoutesResponse::release_route() {
  
  ::onos::ransim::types::Route* temp = route_;
  route_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::ransim::types::Route* ListRoutesResponse::unsafe_arena_release_route() {
  // @@protoc_insertion_point(field_release:onos.ransim.trafficsim.ListRoutesResponse.route)
  
  ::onos::ransim::types::Route* temp = route_;
  route_ = nullptr;
  return temp;
}
inline ::onos::ransim::types::Route* ListRoutesResponse::_internal_mutable_route() {
  
  if (route_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::ransim::types::Route>(GetArenaForAllocation());
    route_ = p;
  }
  return route_;
}
inline ::onos::ransim::types::Route* ListRoutesResponse::mutable_route() {
  ::onos::ransim::types::Route* _msg = _internal_mutable_route();
  // @@protoc_insertion_point(field_mutable:onos.ransim.trafficsim.ListRoutesResponse.route)
  return _msg;
}
inline void ListRoutesResponse::set_allocated_route(::onos::ransim::types::Route* route) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(route_);
  }
  if (route) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(route));
    if (message_arena != submessage_arena) {
      route = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, route, submessage_arena);
    }
    
  } else {
    
  }
  route_ = route;
  // @@protoc_insertion_point(field_set_allocated:onos.ransim.trafficsim.ListRoutesResponse.route)
}

// .onos.ransim.trafficsim.Type type = 2;
inline void ListRoutesResponse::clear_type() {
  type_ = 0;
}
inline ::onos::ransim::trafficsim::Type ListRoutesResponse::_internal_type() const {
  return static_cast< ::onos::ransim::trafficsim::Type >(type_);
}
inline ::onos::ransim::trafficsim::Type ListRoutesResponse::type() const {
  // @@protoc_insertion_point(field_get:onos.ransim.trafficsim.ListRoutesResponse.type)
  return _internal_type();
}
inline void ListRoutesResponse::_internal_set_type(::onos::ransim::trafficsim::Type value) {
  
  type_ = value;
}
inline void ListRoutesResponse::set_type(::onos::ransim::trafficsim::Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:onos.ransim.trafficsim.ListRoutesResponse.type)
}

// -------------------------------------------------------------------

// ListUesRequest

// -------------------------------------------------------------------

// ListUesResponse

// .onos.ransim.types.Ue ue = 1;
inline bool ListUesResponse::_internal_has_ue() const {
  return this != internal_default_instance() && ue_ != nullptr;
}
inline bool ListUesResponse::has_ue() const {
  return _internal_has_ue();
}
inline const ::onos::ransim::types::Ue& ListUesResponse::_internal_ue() const {
  const ::onos::ransim::types::Ue* p = ue_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::ransim::types::Ue&>(
      ::onos::ransim::types::_Ue_default_instance_);
}
inline const ::onos::ransim::types::Ue& ListUesResponse::ue() const {
  // @@protoc_insertion_point(field_get:onos.ransim.trafficsim.ListUesResponse.ue)
  return _internal_ue();
}
inline void ListUesResponse::unsafe_arena_set_allocated_ue(
    ::onos::ransim::types::Ue* ue) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ue_);
  }
  ue_ = ue;
  if (ue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.ransim.trafficsim.ListUesResponse.ue)
}
inline ::onos::ransim::types::Ue* ListUesResponse::release_ue() {
  
  ::onos::ransim::types::Ue* temp = ue_;
  ue_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::ransim::types::Ue* ListUesResponse::unsafe_arena_release_ue() {
  // @@protoc_insertion_point(field_release:onos.ransim.trafficsim.ListUesResponse.ue)
  
  ::onos::ransim::types::Ue* temp = ue_;
  ue_ = nullptr;
  return temp;
}
inline ::onos::ransim::types::Ue* ListUesResponse::_internal_mutable_ue() {
  
  if (ue_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::ransim::types::Ue>(GetArenaForAllocation());
    ue_ = p;
  }
  return ue_;
}
inline ::onos::ransim::types::Ue* ListUesResponse::mutable_ue() {
  ::onos::ransim::types::Ue* _msg = _internal_mutable_ue();
  // @@protoc_insertion_point(field_mutable:onos.ransim.trafficsim.ListUesResponse.ue)
  return _msg;
}
inline void ListUesResponse::set_allocated_ue(::onos::ransim::types::Ue* ue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ue_);
  }
  if (ue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ue));
    if (message_arena != submessage_arena) {
      ue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ue, submessage_arena);
    }
    
  } else {
    
  }
  ue_ = ue;
  // @@protoc_insertion_point(field_set_allocated:onos.ransim.trafficsim.ListUesResponse.ue)
}

// -------------------------------------------------------------------

// WatchUesRequest

// bool no_replay = 1;
inline void WatchUesRequest::clear_no_replay() {
  no_replay_ = false;
}
inline bool WatchUesRequest::_internal_no_replay() const {
  return no_replay_;
}
inline bool WatchUesRequest::no_replay() const {
  // @@protoc_insertion_point(field_get:onos.ransim.trafficsim.WatchUesRequest.no_replay)
  return _internal_no_replay();
}
inline void WatchUesRequest::_internal_set_no_replay(bool value) {
  
  no_replay_ = value;
}
inline void WatchUesRequest::set_no_replay(bool value) {
  _internal_set_no_replay(value);
  // @@protoc_insertion_point(field_set:onos.ransim.trafficsim.WatchUesRequest.no_replay)
}

// bool no_subscribe = 2;
inline void WatchUesRequest::clear_no_subscribe() {
  no_subscribe_ = false;
}
inline bool WatchUesRequest::_internal_no_subscribe() const {
  return no_subscribe_;
}
inline bool WatchUesRequest::no_subscribe() const {
  // @@protoc_insertion_point(field_get:onos.ransim.trafficsim.WatchUesRequest.no_subscribe)
  return _internal_no_subscribe();
}
inline void WatchUesRequest::_internal_set_no_subscribe(bool value) {
  
  no_subscribe_ = value;
}
inline void WatchUesRequest::set_no_subscribe(bool value) {
  _internal_set_no_subscribe(value);
  // @@protoc_insertion_point(field_set:onos.ransim.trafficsim.WatchUesRequest.no_subscribe)
}

// -------------------------------------------------------------------

// WatchUesResponse

// .onos.ransim.types.Ue ue = 1;
inline bool WatchUesResponse::_internal_has_ue() const {
  return this != internal_default_instance() && ue_ != nullptr;
}
inline bool WatchUesResponse::has_ue() const {
  return _internal_has_ue();
}
inline const ::onos::ransim::types::Ue& WatchUesResponse::_internal_ue() const {
  const ::onos::ransim::types::Ue* p = ue_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::ransim::types::Ue&>(
      ::onos::ransim::types::_Ue_default_instance_);
}
inline const ::onos::ransim::types::Ue& WatchUesResponse::ue() const {
  // @@protoc_insertion_point(field_get:onos.ransim.trafficsim.WatchUesResponse.ue)
  return _internal_ue();
}
inline void WatchUesResponse::unsafe_arena_set_allocated_ue(
    ::onos::ransim::types::Ue* ue) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ue_);
  }
  ue_ = ue;
  if (ue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.ransim.trafficsim.WatchUesResponse.ue)
}
inline ::onos::ransim::types::Ue* WatchUesResponse::release_ue() {
  
  ::onos::ransim::types::Ue* temp = ue_;
  ue_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::ransim::types::Ue* WatchUesResponse::unsafe_arena_release_ue() {
  // @@protoc_insertion_point(field_release:onos.ransim.trafficsim.WatchUesResponse.ue)
  
  ::onos::ransim::types::Ue* temp = ue_;
  ue_ = nullptr;
  return temp;
}
inline ::onos::ransim::types::Ue* WatchUesResponse::_internal_mutable_ue() {
  
  if (ue_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::ransim::types::Ue>(GetArenaForAllocation());
    ue_ = p;
  }
  return ue_;
}
inline ::onos::ransim::types::Ue* WatchUesResponse::mutable_ue() {
  ::onos::ransim::types::Ue* _msg = _internal_mutable_ue();
  // @@protoc_insertion_point(field_mutable:onos.ransim.trafficsim.WatchUesResponse.ue)
  return _msg;
}
inline void WatchUesResponse::set_allocated_ue(::onos::ransim::types::Ue* ue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ue_);
  }
  if (ue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ue));
    if (message_arena != submessage_arena) {
      ue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ue, submessage_arena);
    }
    
  } else {
    
  }
  ue_ = ue;
  // @@protoc_insertion_point(field_set_allocated:onos.ransim.trafficsim.WatchUesResponse.ue)
}

// .onos.ransim.trafficsim.Type type = 2;
inline void WatchUesResponse::clear_type() {
  type_ = 0;
}
inline ::onos::ransim::trafficsim::Type WatchUesResponse::_internal_type() const {
  return static_cast< ::onos::ransim::trafficsim::Type >(type_);
}
inline ::onos::ransim::trafficsim::Type WatchUesResponse::type() const {
  // @@protoc_insertion_point(field_get:onos.ransim.trafficsim.WatchUesResponse.type)
  return _internal_type();
}
inline void WatchUesResponse::_internal_set_type(::onos::ransim::trafficsim::Type value) {
  
  type_ = value;
}
inline void WatchUesResponse::set_type(::onos::ransim::trafficsim::Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:onos.ransim.trafficsim.WatchUesResponse.type)
}

// .onos.ransim.trafficsim.UpdateType update_type = 3;
inline void WatchUesResponse::clear_update_type() {
  update_type_ = 0;
}
inline ::onos::ransim::trafficsim::UpdateType WatchUesResponse::_internal_update_type() const {
  return static_cast< ::onos::ransim::trafficsim::UpdateType >(update_type_);
}
inline ::onos::ransim::trafficsim::UpdateType WatchUesResponse::update_type() const {
  // @@protoc_insertion_point(field_get:onos.ransim.trafficsim.WatchUesResponse.update_type)
  return _internal_update_type();
}
inline void WatchUesResponse::_internal_set_update_type(::onos::ransim::trafficsim::UpdateType value) {
  
  update_type_ = value;
}
inline void WatchUesResponse::set_update_type(::onos::ransim::trafficsim::UpdateType value) {
  _internal_set_update_type(value);
  // @@protoc_insertion_point(field_set:onos.ransim.trafficsim.WatchUesResponse.update_type)
}

// -------------------------------------------------------------------

// SetNumberUEsRequest

// uint32 number = 1;
inline void SetNumberUEsRequest::clear_number() {
  number_ = 0u;
}
inline uint32_t SetNumberUEsRequest::_internal_number() const {
  return number_;
}
inline uint32_t SetNumberUEsRequest::number() const {
  // @@protoc_insertion_point(field_get:onos.ransim.trafficsim.SetNumberUEsRequest.number)
  return _internal_number();
}
inline void SetNumberUEsRequest::_internal_set_number(uint32_t value) {
  
  number_ = value;
}
inline void SetNumberUEsRequest::set_number(uint32_t value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:onos.ransim.trafficsim.SetNumberUEsRequest.number)
}

// -------------------------------------------------------------------

// SetNumberUEsResponse

// uint32 number = 1;
inline void SetNumberUEsResponse::clear_number() {
  number_ = 0u;
}
inline uint32_t SetNumberUEsResponse::_internal_number() const {
  return number_;
}
inline uint32_t SetNumberUEsResponse::number() const {
  // @@protoc_insertion_point(field_get:onos.ransim.trafficsim.SetNumberUEsResponse.number)
  return _internal_number();
}
inline void SetNumberUEsResponse::_internal_set_number(uint32_t value) {
  
  number_ = value;
}
inline void SetNumberUEsResponse::set_number(uint32_t value) {
  _internal_set_number(value);
  // @@protoc_insertion_point(field_set:onos.ransim.trafficsim.SetNumberUEsResponse.number)
}

// -------------------------------------------------------------------

// ResetMetricsMsg

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace trafficsim
}  // namespace ransim
}  // namespace onos

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::onos::ransim::trafficsim::Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::onos::ransim::trafficsim::Type>() {
  return ::onos::ransim::trafficsim::Type_descriptor();
}
template <> struct is_proto_enum< ::onos::ransim::trafficsim::UpdateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::onos::ransim::trafficsim::UpdateType>() {
  return ::onos::ransim::trafficsim::UpdateType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_onos_2fransim_2ftrafficsim_2ftrafficsim_2eproto
