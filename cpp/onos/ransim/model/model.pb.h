// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onos/ransim/model/model.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_onos_2fransim_2fmodel_2fmodel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_onos_2fransim_2fmodel_2fmodel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "gogoproto/gogo.pb.h"
#include "onos/ransim/types/types.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_onos_2fransim_2fmodel_2fmodel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[59]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_onos_2fransim_2fmodel_2fmodel_2eproto;
namespace onos {
namespace ransim {
namespace model {
class AgentControlRequest;
struct AgentControlRequestDefaultTypeInternal;
extern AgentControlRequestDefaultTypeInternal _AgentControlRequest_default_instance_;
class AgentControlResponse;
struct AgentControlResponseDefaultTypeInternal;
extern AgentControlResponseDefaultTypeInternal _AgentControlResponse_default_instance_;
class ClearRequest;
struct ClearRequestDefaultTypeInternal;
extern ClearRequestDefaultTypeInternal _ClearRequest_default_instance_;
class ClearResponse;
struct ClearResponseDefaultTypeInternal;
extern ClearResponseDefaultTypeInternal _ClearResponse_default_instance_;
class CreateCellRequest;
struct CreateCellRequestDefaultTypeInternal;
extern CreateCellRequestDefaultTypeInternal _CreateCellRequest_default_instance_;
class CreateCellResponse;
struct CreateCellResponseDefaultTypeInternal;
extern CreateCellResponseDefaultTypeInternal _CreateCellResponse_default_instance_;
class CreateNodeRequest;
struct CreateNodeRequestDefaultTypeInternal;
extern CreateNodeRequestDefaultTypeInternal _CreateNodeRequest_default_instance_;
class CreateNodeResponse;
struct CreateNodeResponseDefaultTypeInternal;
extern CreateNodeResponseDefaultTypeInternal _CreateNodeResponse_default_instance_;
class CreateRouteRequest;
struct CreateRouteRequestDefaultTypeInternal;
extern CreateRouteRequestDefaultTypeInternal _CreateRouteRequest_default_instance_;
class CreateRouteResponse;
struct CreateRouteResponseDefaultTypeInternal;
extern CreateRouteResponseDefaultTypeInternal _CreateRouteResponse_default_instance_;
class DataSet;
struct DataSetDefaultTypeInternal;
extern DataSetDefaultTypeInternal _DataSet_default_instance_;
class DeleteCellRequest;
struct DeleteCellRequestDefaultTypeInternal;
extern DeleteCellRequestDefaultTypeInternal _DeleteCellRequest_default_instance_;
class DeleteCellResponse;
struct DeleteCellResponseDefaultTypeInternal;
extern DeleteCellResponseDefaultTypeInternal _DeleteCellResponse_default_instance_;
class DeleteNodeRequest;
struct DeleteNodeRequestDefaultTypeInternal;
extern DeleteNodeRequestDefaultTypeInternal _DeleteNodeRequest_default_instance_;
class DeleteNodeResponse;
struct DeleteNodeResponseDefaultTypeInternal;
extern DeleteNodeResponseDefaultTypeInternal _DeleteNodeResponse_default_instance_;
class DeleteRouteRequest;
struct DeleteRouteRequestDefaultTypeInternal;
extern DeleteRouteRequestDefaultTypeInternal _DeleteRouteRequest_default_instance_;
class DeleteRouteResponse;
struct DeleteRouteResponseDefaultTypeInternal;
extern DeleteRouteResponseDefaultTypeInternal _DeleteRouteResponse_default_instance_;
class DeleteUERequest;
struct DeleteUERequestDefaultTypeInternal;
extern DeleteUERequestDefaultTypeInternal _DeleteUERequest_default_instance_;
class DeleteUEResponse;
struct DeleteUEResponseDefaultTypeInternal;
extern DeleteUEResponseDefaultTypeInternal _DeleteUEResponse_default_instance_;
class GetCellRequest;
struct GetCellRequestDefaultTypeInternal;
extern GetCellRequestDefaultTypeInternal _GetCellRequest_default_instance_;
class GetCellResponse;
struct GetCellResponseDefaultTypeInternal;
extern GetCellResponseDefaultTypeInternal _GetCellResponse_default_instance_;
class GetNodeRequest;
struct GetNodeRequestDefaultTypeInternal;
extern GetNodeRequestDefaultTypeInternal _GetNodeRequest_default_instance_;
class GetNodeResponse;
struct GetNodeResponseDefaultTypeInternal;
extern GetNodeResponseDefaultTypeInternal _GetNodeResponse_default_instance_;
class GetRouteRequest;
struct GetRouteRequestDefaultTypeInternal;
extern GetRouteRequestDefaultTypeInternal _GetRouteRequest_default_instance_;
class GetRouteResponse;
struct GetRouteResponseDefaultTypeInternal;
extern GetRouteResponseDefaultTypeInternal _GetRouteResponse_default_instance_;
class GetUECountRequest;
struct GetUECountRequestDefaultTypeInternal;
extern GetUECountRequestDefaultTypeInternal _GetUECountRequest_default_instance_;
class GetUECountResponse;
struct GetUECountResponseDefaultTypeInternal;
extern GetUECountResponseDefaultTypeInternal _GetUECountResponse_default_instance_;
class GetUERequest;
struct GetUERequestDefaultTypeInternal;
extern GetUERequestDefaultTypeInternal _GetUERequest_default_instance_;
class GetUEResponse;
struct GetUEResponseDefaultTypeInternal;
extern GetUEResponseDefaultTypeInternal _GetUEResponse_default_instance_;
class ListCellsRequest;
struct ListCellsRequestDefaultTypeInternal;
extern ListCellsRequestDefaultTypeInternal _ListCellsRequest_default_instance_;
class ListCellsResponse;
struct ListCellsResponseDefaultTypeInternal;
extern ListCellsResponseDefaultTypeInternal _ListCellsResponse_default_instance_;
class ListNodesRequest;
struct ListNodesRequestDefaultTypeInternal;
extern ListNodesRequestDefaultTypeInternal _ListNodesRequest_default_instance_;
class ListNodesResponse;
struct ListNodesResponseDefaultTypeInternal;
extern ListNodesResponseDefaultTypeInternal _ListNodesResponse_default_instance_;
class ListRoutesRequest;
struct ListRoutesRequestDefaultTypeInternal;
extern ListRoutesRequestDefaultTypeInternal _ListRoutesRequest_default_instance_;
class ListRoutesResponse;
struct ListRoutesResponseDefaultTypeInternal;
extern ListRoutesResponseDefaultTypeInternal _ListRoutesResponse_default_instance_;
class ListUEsRequest;
struct ListUEsRequestDefaultTypeInternal;
extern ListUEsRequestDefaultTypeInternal _ListUEsRequest_default_instance_;
class ListUEsResponse;
struct ListUEsResponseDefaultTypeInternal;
extern ListUEsResponseDefaultTypeInternal _ListUEsResponse_default_instance_;
class LoadRequest;
struct LoadRequestDefaultTypeInternal;
extern LoadRequestDefaultTypeInternal _LoadRequest_default_instance_;
class LoadResponse;
struct LoadResponseDefaultTypeInternal;
extern LoadResponseDefaultTypeInternal _LoadResponse_default_instance_;
class MoveToCellRequest;
struct MoveToCellRequestDefaultTypeInternal;
extern MoveToCellRequestDefaultTypeInternal _MoveToCellRequest_default_instance_;
class MoveToCellResponse;
struct MoveToCellResponseDefaultTypeInternal;
extern MoveToCellResponseDefaultTypeInternal _MoveToCellResponse_default_instance_;
class MoveToLocationRequest;
struct MoveToLocationRequestDefaultTypeInternal;
extern MoveToLocationRequestDefaultTypeInternal _MoveToLocationRequest_default_instance_;
class MoveToLocationResponse;
struct MoveToLocationResponseDefaultTypeInternal;
extern MoveToLocationResponseDefaultTypeInternal _MoveToLocationResponse_default_instance_;
class PlmnIDRequest;
struct PlmnIDRequestDefaultTypeInternal;
extern PlmnIDRequestDefaultTypeInternal _PlmnIDRequest_default_instance_;
class PlmnIDResponse;
struct PlmnIDResponseDefaultTypeInternal;
extern PlmnIDResponseDefaultTypeInternal _PlmnIDResponse_default_instance_;
class SetUECountRequest;
struct SetUECountRequestDefaultTypeInternal;
extern SetUECountRequestDefaultTypeInternal _SetUECountRequest_default_instance_;
class SetUECountResponse;
struct SetUECountResponseDefaultTypeInternal;
extern SetUECountResponseDefaultTypeInternal _SetUECountResponse_default_instance_;
class UpdateCellRequest;
struct UpdateCellRequestDefaultTypeInternal;
extern UpdateCellRequestDefaultTypeInternal _UpdateCellRequest_default_instance_;
class UpdateCellResponse;
struct UpdateCellResponseDefaultTypeInternal;
extern UpdateCellResponseDefaultTypeInternal _UpdateCellResponse_default_instance_;
class UpdateNodeRequest;
struct UpdateNodeRequestDefaultTypeInternal;
extern UpdateNodeRequestDefaultTypeInternal _UpdateNodeRequest_default_instance_;
class UpdateNodeResponse;
struct UpdateNodeResponseDefaultTypeInternal;
extern UpdateNodeResponseDefaultTypeInternal _UpdateNodeResponse_default_instance_;
class WatchCellsRequest;
struct WatchCellsRequestDefaultTypeInternal;
extern WatchCellsRequestDefaultTypeInternal _WatchCellsRequest_default_instance_;
class WatchCellsResponse;
struct WatchCellsResponseDefaultTypeInternal;
extern WatchCellsResponseDefaultTypeInternal _WatchCellsResponse_default_instance_;
class WatchNodesRequest;
struct WatchNodesRequestDefaultTypeInternal;
extern WatchNodesRequestDefaultTypeInternal _WatchNodesRequest_default_instance_;
class WatchNodesResponse;
struct WatchNodesResponseDefaultTypeInternal;
extern WatchNodesResponseDefaultTypeInternal _WatchNodesResponse_default_instance_;
class WatchRoutesRequest;
struct WatchRoutesRequestDefaultTypeInternal;
extern WatchRoutesRequestDefaultTypeInternal _WatchRoutesRequest_default_instance_;
class WatchRoutesResponse;
struct WatchRoutesResponseDefaultTypeInternal;
extern WatchRoutesResponseDefaultTypeInternal _WatchRoutesResponse_default_instance_;
class WatchUEsRequest;
struct WatchUEsRequestDefaultTypeInternal;
extern WatchUEsRequestDefaultTypeInternal _WatchUEsRequest_default_instance_;
class WatchUEsResponse;
struct WatchUEsResponseDefaultTypeInternal;
extern WatchUEsResponseDefaultTypeInternal _WatchUEsResponse_default_instance_;
}  // namespace model
}  // namespace ransim
}  // namespace onos
PROTOBUF_NAMESPACE_OPEN
template<> ::onos::ransim::model::AgentControlRequest* Arena::CreateMaybeMessage<::onos::ransim::model::AgentControlRequest>(Arena*);
template<> ::onos::ransim::model::AgentControlResponse* Arena::CreateMaybeMessage<::onos::ransim::model::AgentControlResponse>(Arena*);
template<> ::onos::ransim::model::ClearRequest* Arena::CreateMaybeMessage<::onos::ransim::model::ClearRequest>(Arena*);
template<> ::onos::ransim::model::ClearResponse* Arena::CreateMaybeMessage<::onos::ransim::model::ClearResponse>(Arena*);
template<> ::onos::ransim::model::CreateCellRequest* Arena::CreateMaybeMessage<::onos::ransim::model::CreateCellRequest>(Arena*);
template<> ::onos::ransim::model::CreateCellResponse* Arena::CreateMaybeMessage<::onos::ransim::model::CreateCellResponse>(Arena*);
template<> ::onos::ransim::model::CreateNodeRequest* Arena::CreateMaybeMessage<::onos::ransim::model::CreateNodeRequest>(Arena*);
template<> ::onos::ransim::model::CreateNodeResponse* Arena::CreateMaybeMessage<::onos::ransim::model::CreateNodeResponse>(Arena*);
template<> ::onos::ransim::model::CreateRouteRequest* Arena::CreateMaybeMessage<::onos::ransim::model::CreateRouteRequest>(Arena*);
template<> ::onos::ransim::model::CreateRouteResponse* Arena::CreateMaybeMessage<::onos::ransim::model::CreateRouteResponse>(Arena*);
template<> ::onos::ransim::model::DataSet* Arena::CreateMaybeMessage<::onos::ransim::model::DataSet>(Arena*);
template<> ::onos::ransim::model::DeleteCellRequest* Arena::CreateMaybeMessage<::onos::ransim::model::DeleteCellRequest>(Arena*);
template<> ::onos::ransim::model::DeleteCellResponse* Arena::CreateMaybeMessage<::onos::ransim::model::DeleteCellResponse>(Arena*);
template<> ::onos::ransim::model::DeleteNodeRequest* Arena::CreateMaybeMessage<::onos::ransim::model::DeleteNodeRequest>(Arena*);
template<> ::onos::ransim::model::DeleteNodeResponse* Arena::CreateMaybeMessage<::onos::ransim::model::DeleteNodeResponse>(Arena*);
template<> ::onos::ransim::model::DeleteRouteRequest* Arena::CreateMaybeMessage<::onos::ransim::model::DeleteRouteRequest>(Arena*);
template<> ::onos::ransim::model::DeleteRouteResponse* Arena::CreateMaybeMessage<::onos::ransim::model::DeleteRouteResponse>(Arena*);
template<> ::onos::ransim::model::DeleteUERequest* Arena::CreateMaybeMessage<::onos::ransim::model::DeleteUERequest>(Arena*);
template<> ::onos::ransim::model::DeleteUEResponse* Arena::CreateMaybeMessage<::onos::ransim::model::DeleteUEResponse>(Arena*);
template<> ::onos::ransim::model::GetCellRequest* Arena::CreateMaybeMessage<::onos::ransim::model::GetCellRequest>(Arena*);
template<> ::onos::ransim::model::GetCellResponse* Arena::CreateMaybeMessage<::onos::ransim::model::GetCellResponse>(Arena*);
template<> ::onos::ransim::model::GetNodeRequest* Arena::CreateMaybeMessage<::onos::ransim::model::GetNodeRequest>(Arena*);
template<> ::onos::ransim::model::GetNodeResponse* Arena::CreateMaybeMessage<::onos::ransim::model::GetNodeResponse>(Arena*);
template<> ::onos::ransim::model::GetRouteRequest* Arena::CreateMaybeMessage<::onos::ransim::model::GetRouteRequest>(Arena*);
template<> ::onos::ransim::model::GetRouteResponse* Arena::CreateMaybeMessage<::onos::ransim::model::GetRouteResponse>(Arena*);
template<> ::onos::ransim::model::GetUECountRequest* Arena::CreateMaybeMessage<::onos::ransim::model::GetUECountRequest>(Arena*);
template<> ::onos::ransim::model::GetUECountResponse* Arena::CreateMaybeMessage<::onos::ransim::model::GetUECountResponse>(Arena*);
template<> ::onos::ransim::model::GetUERequest* Arena::CreateMaybeMessage<::onos::ransim::model::GetUERequest>(Arena*);
template<> ::onos::ransim::model::GetUEResponse* Arena::CreateMaybeMessage<::onos::ransim::model::GetUEResponse>(Arena*);
template<> ::onos::ransim::model::ListCellsRequest* Arena::CreateMaybeMessage<::onos::ransim::model::ListCellsRequest>(Arena*);
template<> ::onos::ransim::model::ListCellsResponse* Arena::CreateMaybeMessage<::onos::ransim::model::ListCellsResponse>(Arena*);
template<> ::onos::ransim::model::ListNodesRequest* Arena::CreateMaybeMessage<::onos::ransim::model::ListNodesRequest>(Arena*);
template<> ::onos::ransim::model::ListNodesResponse* Arena::CreateMaybeMessage<::onos::ransim::model::ListNodesResponse>(Arena*);
template<> ::onos::ransim::model::ListRoutesRequest* Arena::CreateMaybeMessage<::onos::ransim::model::ListRoutesRequest>(Arena*);
template<> ::onos::ransim::model::ListRoutesResponse* Arena::CreateMaybeMessage<::onos::ransim::model::ListRoutesResponse>(Arena*);
template<> ::onos::ransim::model::ListUEsRequest* Arena::CreateMaybeMessage<::onos::ransim::model::ListUEsRequest>(Arena*);
template<> ::onos::ransim::model::ListUEsResponse* Arena::CreateMaybeMessage<::onos::ransim::model::ListUEsResponse>(Arena*);
template<> ::onos::ransim::model::LoadRequest* Arena::CreateMaybeMessage<::onos::ransim::model::LoadRequest>(Arena*);
template<> ::onos::ransim::model::LoadResponse* Arena::CreateMaybeMessage<::onos::ransim::model::LoadResponse>(Arena*);
template<> ::onos::ransim::model::MoveToCellRequest* Arena::CreateMaybeMessage<::onos::ransim::model::MoveToCellRequest>(Arena*);
template<> ::onos::ransim::model::MoveToCellResponse* Arena::CreateMaybeMessage<::onos::ransim::model::MoveToCellResponse>(Arena*);
template<> ::onos::ransim::model::MoveToLocationRequest* Arena::CreateMaybeMessage<::onos::ransim::model::MoveToLocationRequest>(Arena*);
template<> ::onos::ransim::model::MoveToLocationResponse* Arena::CreateMaybeMessage<::onos::ransim::model::MoveToLocationResponse>(Arena*);
template<> ::onos::ransim::model::PlmnIDRequest* Arena::CreateMaybeMessage<::onos::ransim::model::PlmnIDRequest>(Arena*);
template<> ::onos::ransim::model::PlmnIDResponse* Arena::CreateMaybeMessage<::onos::ransim::model::PlmnIDResponse>(Arena*);
template<> ::onos::ransim::model::SetUECountRequest* Arena::CreateMaybeMessage<::onos::ransim::model::SetUECountRequest>(Arena*);
template<> ::onos::ransim::model::SetUECountResponse* Arena::CreateMaybeMessage<::onos::ransim::model::SetUECountResponse>(Arena*);
template<> ::onos::ransim::model::UpdateCellRequest* Arena::CreateMaybeMessage<::onos::ransim::model::UpdateCellRequest>(Arena*);
template<> ::onos::ransim::model::UpdateCellResponse* Arena::CreateMaybeMessage<::onos::ransim::model::UpdateCellResponse>(Arena*);
template<> ::onos::ransim::model::UpdateNodeRequest* Arena::CreateMaybeMessage<::onos::ransim::model::UpdateNodeRequest>(Arena*);
template<> ::onos::ransim::model::UpdateNodeResponse* Arena::CreateMaybeMessage<::onos::ransim::model::UpdateNodeResponse>(Arena*);
template<> ::onos::ransim::model::WatchCellsRequest* Arena::CreateMaybeMessage<::onos::ransim::model::WatchCellsRequest>(Arena*);
template<> ::onos::ransim::model::WatchCellsResponse* Arena::CreateMaybeMessage<::onos::ransim::model::WatchCellsResponse>(Arena*);
template<> ::onos::ransim::model::WatchNodesRequest* Arena::CreateMaybeMessage<::onos::ransim::model::WatchNodesRequest>(Arena*);
template<> ::onos::ransim::model::WatchNodesResponse* Arena::CreateMaybeMessage<::onos::ransim::model::WatchNodesResponse>(Arena*);
template<> ::onos::ransim::model::WatchRoutesRequest* Arena::CreateMaybeMessage<::onos::ransim::model::WatchRoutesRequest>(Arena*);
template<> ::onos::ransim::model::WatchRoutesResponse* Arena::CreateMaybeMessage<::onos::ransim::model::WatchRoutesResponse>(Arena*);
template<> ::onos::ransim::model::WatchUEsRequest* Arena::CreateMaybeMessage<::onos::ransim::model::WatchUEsRequest>(Arena*);
template<> ::onos::ransim::model::WatchUEsResponse* Arena::CreateMaybeMessage<::onos::ransim::model::WatchUEsResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace onos {
namespace ransim {
namespace model {

enum EventType : int {
  NONE = 0,
  CREATED = 1,
  UPDATED = 2,
  DELETED = 3,
  EventType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EventType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EventType_IsValid(int value);
constexpr EventType EventType_MIN = NONE;
constexpr EventType EventType_MAX = DELETED;
constexpr int EventType_ARRAYSIZE = EventType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EventType_descriptor();
template<typename T>
inline const std::string& EventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EventType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EventType_descriptor(), enum_t_value);
}
inline bool EventType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EventType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EventType>(
    EventType_descriptor(), name, value);
}
// ===================================================================

class DataSet final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.model.DataSet) */ {
 public:
  inline DataSet() : DataSet(nullptr) {}
  ~DataSet() override;
  explicit constexpr DataSet(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DataSet(const DataSet& from);
  DataSet(DataSet&& from) noexcept
    : DataSet() {
    *this = ::std::move(from);
  }

  inline DataSet& operator=(const DataSet& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataSet& operator=(DataSet&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DataSet& default_instance() {
    return *internal_default_instance();
  }
  static inline const DataSet* internal_default_instance() {
    return reinterpret_cast<const DataSet*>(
               &_DataSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(DataSet& a, DataSet& b) {
    a.Swap(&b);
  }
  inline void Swap(DataSet* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataSet* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DataSet* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DataSet>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DataSet& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DataSet& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataSet* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.DataSet";
  }
  protected:
  explicit DataSet(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // string type = 1;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_NODISCARD std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:onos.ransim.model.DataSet)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class LoadRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.model.LoadRequest) */ {
 public:
  inline LoadRequest() : LoadRequest(nullptr) {}
  ~LoadRequest() override;
  explicit constexpr LoadRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoadRequest(const LoadRequest& from);
  LoadRequest(LoadRequest&& from) noexcept
    : LoadRequest() {
    *this = ::std::move(from);
  }

  inline LoadRequest& operator=(const LoadRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadRequest& operator=(LoadRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoadRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoadRequest* internal_default_instance() {
    return reinterpret_cast<const LoadRequest*>(
               &_LoadRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LoadRequest& a, LoadRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoadRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoadRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const LoadRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const LoadRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.LoadRequest";
  }
  protected:
  explicit LoadRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataSetFieldNumber = 1,
    kResumeFieldNumber = 2,
  };
  // repeated .onos.ransim.model.DataSet dataSet = 1;
  int dataset_size() const;
  private:
  int _internal_dataset_size() const;
  public:
  void clear_dataset();
  ::onos::ransim::model::DataSet* mutable_dataset(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::ransim::model::DataSet >*
      mutable_dataset();
  private:
  const ::onos::ransim::model::DataSet& _internal_dataset(int index) const;
  ::onos::ransim::model::DataSet* _internal_add_dataset();
  public:
  const ::onos::ransim::model::DataSet& dataset(int index) const;
  ::onos::ransim::model::DataSet* add_dataset();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::ransim::model::DataSet >&
      dataset() const;

  // bool resume = 2;
  void clear_resume();
  bool resume() const;
  void set_resume(bool value);
  private:
  bool _internal_resume() const;
  void _internal_set_resume(bool value);
  public:

  // @@protoc_insertion_point(class_scope:onos.ransim.model.LoadRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::ransim::model::DataSet > dataset_;
  bool resume_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class LoadResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:onos.ransim.model.LoadResponse) */ {
 public:
  inline LoadResponse() : LoadResponse(nullptr) {}
  explicit constexpr LoadResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoadResponse(const LoadResponse& from);
  LoadResponse(LoadResponse&& from) noexcept
    : LoadResponse() {
    *this = ::std::move(from);
  }

  inline LoadResponse& operator=(const LoadResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadResponse& operator=(LoadResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoadResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoadResponse* internal_default_instance() {
    return reinterpret_cast<const LoadResponse*>(
               &_LoadResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LoadResponse& a, LoadResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LoadResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<LoadResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const LoadResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const LoadResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.LoadResponse";
  }
  protected:
  explicit LoadResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onos.ransim.model.LoadResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class ClearRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.model.ClearRequest) */ {
 public:
  inline ClearRequest() : ClearRequest(nullptr) {}
  ~ClearRequest() override;
  explicit constexpr ClearRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClearRequest(const ClearRequest& from);
  ClearRequest(ClearRequest&& from) noexcept
    : ClearRequest() {
    *this = ::std::move(from);
  }

  inline ClearRequest& operator=(const ClearRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearRequest& operator=(ClearRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClearRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClearRequest* internal_default_instance() {
    return reinterpret_cast<const ClearRequest*>(
               &_ClearRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ClearRequest& a, ClearRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClearRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClearRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClearRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ClearRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ClearRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClearRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.ClearRequest";
  }
  protected:
  explicit ClearRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResumeFieldNumber = 1,
  };
  // bool resume = 1;
  void clear_resume();
  bool resume() const;
  void set_resume(bool value);
  private:
  bool _internal_resume() const;
  void _internal_set_resume(bool value);
  public:

  // @@protoc_insertion_point(class_scope:onos.ransim.model.ClearRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool resume_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class ClearResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:onos.ransim.model.ClearResponse) */ {
 public:
  inline ClearResponse() : ClearResponse(nullptr) {}
  explicit constexpr ClearResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ClearResponse(const ClearResponse& from);
  ClearResponse(ClearResponse&& from) noexcept
    : ClearResponse() {
    *this = ::std::move(from);
  }

  inline ClearResponse& operator=(const ClearResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClearResponse& operator=(ClearResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClearResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClearResponse* internal_default_instance() {
    return reinterpret_cast<const ClearResponse*>(
               &_ClearResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ClearResponse& a, ClearResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ClearResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClearResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClearResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClearResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ClearResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ClearResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.ClearResponse";
  }
  protected:
  explicit ClearResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onos.ransim.model.ClearResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class PlmnIDRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:onos.ransim.model.PlmnIDRequest) */ {
 public:
  inline PlmnIDRequest() : PlmnIDRequest(nullptr) {}
  explicit constexpr PlmnIDRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlmnIDRequest(const PlmnIDRequest& from);
  PlmnIDRequest(PlmnIDRequest&& from) noexcept
    : PlmnIDRequest() {
    *this = ::std::move(from);
  }

  inline PlmnIDRequest& operator=(const PlmnIDRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlmnIDRequest& operator=(PlmnIDRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlmnIDRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlmnIDRequest* internal_default_instance() {
    return reinterpret_cast<const PlmnIDRequest*>(
               &_PlmnIDRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PlmnIDRequest& a, PlmnIDRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PlmnIDRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlmnIDRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlmnIDRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlmnIDRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const PlmnIDRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const PlmnIDRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.PlmnIDRequest";
  }
  protected:
  explicit PlmnIDRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onos.ransim.model.PlmnIDRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class PlmnIDResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.model.PlmnIDResponse) */ {
 public:
  inline PlmnIDResponse() : PlmnIDResponse(nullptr) {}
  ~PlmnIDResponse() override;
  explicit constexpr PlmnIDResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlmnIDResponse(const PlmnIDResponse& from);
  PlmnIDResponse(PlmnIDResponse&& from) noexcept
    : PlmnIDResponse() {
    *this = ::std::move(from);
  }

  inline PlmnIDResponse& operator=(const PlmnIDResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlmnIDResponse& operator=(PlmnIDResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlmnIDResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlmnIDResponse* internal_default_instance() {
    return reinterpret_cast<const PlmnIDResponse*>(
               &_PlmnIDResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PlmnIDResponse& a, PlmnIDResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PlmnIDResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlmnIDResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PlmnIDResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PlmnIDResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PlmnIDResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PlmnIDResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlmnIDResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.PlmnIDResponse";
  }
  protected:
  explicit PlmnIDResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlmnidFieldNumber = 1,
  };
  // uint32 plmnid = 1 [(.gogoproto.customname) = "PlmnID", (.gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/ransim/types.PlmnID"];
  void clear_plmnid();
  uint32_t plmnid() const;
  void set_plmnid(uint32_t value);
  private:
  uint32_t _internal_plmnid() const;
  void _internal_set_plmnid(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.ransim.model.PlmnIDResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t plmnid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class CreateNodeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.model.CreateNodeRequest) */ {
 public:
  inline CreateNodeRequest() : CreateNodeRequest(nullptr) {}
  ~CreateNodeRequest() override;
  explicit constexpr CreateNodeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateNodeRequest(const CreateNodeRequest& from);
  CreateNodeRequest(CreateNodeRequest&& from) noexcept
    : CreateNodeRequest() {
    *this = ::std::move(from);
  }

  inline CreateNodeRequest& operator=(const CreateNodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateNodeRequest& operator=(CreateNodeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateNodeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateNodeRequest* internal_default_instance() {
    return reinterpret_cast<const CreateNodeRequest*>(
               &_CreateNodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CreateNodeRequest& a, CreateNodeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateNodeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateNodeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateNodeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateNodeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateNodeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateNodeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateNodeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.CreateNodeRequest";
  }
  protected:
  explicit CreateNodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeFieldNumber = 1,
  };
  // .onos.ransim.types.Node node = 1;
  bool has_node() const;
  private:
  bool _internal_has_node() const;
  public:
  void clear_node();
  const ::onos::ransim::types::Node& node() const;
  PROTOBUF_NODISCARD ::onos::ransim::types::Node* release_node();
  ::onos::ransim::types::Node* mutable_node();
  void set_allocated_node(::onos::ransim::types::Node* node);
  private:
  const ::onos::ransim::types::Node& _internal_node() const;
  ::onos::ransim::types::Node* _internal_mutable_node();
  public:
  void unsafe_arena_set_allocated_node(
      ::onos::ransim::types::Node* node);
  ::onos::ransim::types::Node* unsafe_arena_release_node();

  // @@protoc_insertion_point(class_scope:onos.ransim.model.CreateNodeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::ransim::types::Node* node_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class CreateNodeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:onos.ransim.model.CreateNodeResponse) */ {
 public:
  inline CreateNodeResponse() : CreateNodeResponse(nullptr) {}
  explicit constexpr CreateNodeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateNodeResponse(const CreateNodeResponse& from);
  CreateNodeResponse(CreateNodeResponse&& from) noexcept
    : CreateNodeResponse() {
    *this = ::std::move(from);
  }

  inline CreateNodeResponse& operator=(const CreateNodeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateNodeResponse& operator=(CreateNodeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateNodeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateNodeResponse* internal_default_instance() {
    return reinterpret_cast<const CreateNodeResponse*>(
               &_CreateNodeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CreateNodeResponse& a, CreateNodeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateNodeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateNodeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateNodeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateNodeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CreateNodeResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CreateNodeResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.CreateNodeResponse";
  }
  protected:
  explicit CreateNodeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onos.ransim.model.CreateNodeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class GetNodeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.model.GetNodeRequest) */ {
 public:
  inline GetNodeRequest() : GetNodeRequest(nullptr) {}
  ~GetNodeRequest() override;
  explicit constexpr GetNodeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetNodeRequest(const GetNodeRequest& from);
  GetNodeRequest(GetNodeRequest&& from) noexcept
    : GetNodeRequest() {
    *this = ::std::move(from);
  }

  inline GetNodeRequest& operator=(const GetNodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNodeRequest& operator=(GetNodeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetNodeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetNodeRequest* internal_default_instance() {
    return reinterpret_cast<const GetNodeRequest*>(
               &_GetNodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(GetNodeRequest& a, GetNodeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNodeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNodeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetNodeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetNodeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetNodeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetNodeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNodeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.GetNodeRequest";
  }
  protected:
  explicit GetNodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnbidFieldNumber = 1,
  };
  // uint64 enbid = 1 [(.gogoproto.customname) = "GnbID", (.gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/ransim/types.GnbID"];
  void clear_enbid();
  uint64_t enbid() const;
  void set_enbid(uint64_t value);
  private:
  uint64_t _internal_enbid() const;
  void _internal_set_enbid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.ransim.model.GetNodeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t enbid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class GetNodeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.model.GetNodeResponse) */ {
 public:
  inline GetNodeResponse() : GetNodeResponse(nullptr) {}
  ~GetNodeResponse() override;
  explicit constexpr GetNodeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetNodeResponse(const GetNodeResponse& from);
  GetNodeResponse(GetNodeResponse&& from) noexcept
    : GetNodeResponse() {
    *this = ::std::move(from);
  }

  inline GetNodeResponse& operator=(const GetNodeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetNodeResponse& operator=(GetNodeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetNodeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetNodeResponse* internal_default_instance() {
    return reinterpret_cast<const GetNodeResponse*>(
               &_GetNodeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(GetNodeResponse& a, GetNodeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetNodeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetNodeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetNodeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetNodeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetNodeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetNodeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNodeResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.GetNodeResponse";
  }
  protected:
  explicit GetNodeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeFieldNumber = 1,
  };
  // .onos.ransim.types.Node node = 1;
  bool has_node() const;
  private:
  bool _internal_has_node() const;
  public:
  void clear_node();
  const ::onos::ransim::types::Node& node() const;
  PROTOBUF_NODISCARD ::onos::ransim::types::Node* release_node();
  ::onos::ransim::types::Node* mutable_node();
  void set_allocated_node(::onos::ransim::types::Node* node);
  private:
  const ::onos::ransim::types::Node& _internal_node() const;
  ::onos::ransim::types::Node* _internal_mutable_node();
  public:
  void unsafe_arena_set_allocated_node(
      ::onos::ransim::types::Node* node);
  ::onos::ransim::types::Node* unsafe_arena_release_node();

  // @@protoc_insertion_point(class_scope:onos.ransim.model.GetNodeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::ransim::types::Node* node_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class UpdateNodeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.model.UpdateNodeRequest) */ {
 public:
  inline UpdateNodeRequest() : UpdateNodeRequest(nullptr) {}
  ~UpdateNodeRequest() override;
  explicit constexpr UpdateNodeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateNodeRequest(const UpdateNodeRequest& from);
  UpdateNodeRequest(UpdateNodeRequest&& from) noexcept
    : UpdateNodeRequest() {
    *this = ::std::move(from);
  }

  inline UpdateNodeRequest& operator=(const UpdateNodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateNodeRequest& operator=(UpdateNodeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateNodeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateNodeRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateNodeRequest*>(
               &_UpdateNodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(UpdateNodeRequest& a, UpdateNodeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateNodeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateNodeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateNodeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateNodeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateNodeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateNodeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateNodeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.UpdateNodeRequest";
  }
  protected:
  explicit UpdateNodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeFieldNumber = 1,
  };
  // .onos.ransim.types.Node node = 1;
  bool has_node() const;
  private:
  bool _internal_has_node() const;
  public:
  void clear_node();
  const ::onos::ransim::types::Node& node() const;
  PROTOBUF_NODISCARD ::onos::ransim::types::Node* release_node();
  ::onos::ransim::types::Node* mutable_node();
  void set_allocated_node(::onos::ransim::types::Node* node);
  private:
  const ::onos::ransim::types::Node& _internal_node() const;
  ::onos::ransim::types::Node* _internal_mutable_node();
  public:
  void unsafe_arena_set_allocated_node(
      ::onos::ransim::types::Node* node);
  ::onos::ransim::types::Node* unsafe_arena_release_node();

  // @@protoc_insertion_point(class_scope:onos.ransim.model.UpdateNodeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::ransim::types::Node* node_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class UpdateNodeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:onos.ransim.model.UpdateNodeResponse) */ {
 public:
  inline UpdateNodeResponse() : UpdateNodeResponse(nullptr) {}
  explicit constexpr UpdateNodeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateNodeResponse(const UpdateNodeResponse& from);
  UpdateNodeResponse(UpdateNodeResponse&& from) noexcept
    : UpdateNodeResponse() {
    *this = ::std::move(from);
  }

  inline UpdateNodeResponse& operator=(const UpdateNodeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateNodeResponse& operator=(UpdateNodeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateNodeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateNodeResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateNodeResponse*>(
               &_UpdateNodeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(UpdateNodeResponse& a, UpdateNodeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateNodeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateNodeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateNodeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateNodeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const UpdateNodeResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const UpdateNodeResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.UpdateNodeResponse";
  }
  protected:
  explicit UpdateNodeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onos.ransim.model.UpdateNodeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class DeleteNodeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.model.DeleteNodeRequest) */ {
 public:
  inline DeleteNodeRequest() : DeleteNodeRequest(nullptr) {}
  ~DeleteNodeRequest() override;
  explicit constexpr DeleteNodeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteNodeRequest(const DeleteNodeRequest& from);
  DeleteNodeRequest(DeleteNodeRequest&& from) noexcept
    : DeleteNodeRequest() {
    *this = ::std::move(from);
  }

  inline DeleteNodeRequest& operator=(const DeleteNodeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteNodeRequest& operator=(DeleteNodeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteNodeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteNodeRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteNodeRequest*>(
               &_DeleteNodeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(DeleteNodeRequest& a, DeleteNodeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteNodeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteNodeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteNodeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteNodeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteNodeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteNodeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteNodeRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.DeleteNodeRequest";
  }
  protected:
  explicit DeleteNodeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnbidFieldNumber = 1,
  };
  // uint64 enbid = 1 [(.gogoproto.customname) = "GnbID", (.gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/ransim/types.GnbID"];
  void clear_enbid();
  uint64_t enbid() const;
  void set_enbid(uint64_t value);
  private:
  uint64_t _internal_enbid() const;
  void _internal_set_enbid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.ransim.model.DeleteNodeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t enbid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class DeleteNodeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:onos.ransim.model.DeleteNodeResponse) */ {
 public:
  inline DeleteNodeResponse() : DeleteNodeResponse(nullptr) {}
  explicit constexpr DeleteNodeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteNodeResponse(const DeleteNodeResponse& from);
  DeleteNodeResponse(DeleteNodeResponse&& from) noexcept
    : DeleteNodeResponse() {
    *this = ::std::move(from);
  }

  inline DeleteNodeResponse& operator=(const DeleteNodeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteNodeResponse& operator=(DeleteNodeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteNodeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteNodeResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteNodeResponse*>(
               &_DeleteNodeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(DeleteNodeResponse& a, DeleteNodeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteNodeResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteNodeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteNodeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteNodeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DeleteNodeResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DeleteNodeResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.DeleteNodeResponse";
  }
  protected:
  explicit DeleteNodeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onos.ransim.model.DeleteNodeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class ListNodesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:onos.ransim.model.ListNodesRequest) */ {
 public:
  inline ListNodesRequest() : ListNodesRequest(nullptr) {}
  explicit constexpr ListNodesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListNodesRequest(const ListNodesRequest& from);
  ListNodesRequest(ListNodesRequest&& from) noexcept
    : ListNodesRequest() {
    *this = ::std::move(from);
  }

  inline ListNodesRequest& operator=(const ListNodesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListNodesRequest& operator=(ListNodesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListNodesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListNodesRequest* internal_default_instance() {
    return reinterpret_cast<const ListNodesRequest*>(
               &_ListNodesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ListNodesRequest& a, ListNodesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListNodesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListNodesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListNodesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListNodesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ListNodesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ListNodesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.ListNodesRequest";
  }
  protected:
  explicit ListNodesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onos.ransim.model.ListNodesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class ListNodesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.model.ListNodesResponse) */ {
 public:
  inline ListNodesResponse() : ListNodesResponse(nullptr) {}
  ~ListNodesResponse() override;
  explicit constexpr ListNodesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListNodesResponse(const ListNodesResponse& from);
  ListNodesResponse(ListNodesResponse&& from) noexcept
    : ListNodesResponse() {
    *this = ::std::move(from);
  }

  inline ListNodesResponse& operator=(const ListNodesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListNodesResponse& operator=(ListNodesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListNodesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListNodesResponse* internal_default_instance() {
    return reinterpret_cast<const ListNodesResponse*>(
               &_ListNodesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ListNodesResponse& a, ListNodesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListNodesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListNodesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListNodesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListNodesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListNodesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListNodesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNodesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.ListNodesResponse";
  }
  protected:
  explicit ListNodesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeFieldNumber = 1,
  };
  // .onos.ransim.types.Node node = 1;
  bool has_node() const;
  private:
  bool _internal_has_node() const;
  public:
  void clear_node();
  const ::onos::ransim::types::Node& node() const;
  PROTOBUF_NODISCARD ::onos::ransim::types::Node* release_node();
  ::onos::ransim::types::Node* mutable_node();
  void set_allocated_node(::onos::ransim::types::Node* node);
  private:
  const ::onos::ransim::types::Node& _internal_node() const;
  ::onos::ransim::types::Node* _internal_mutable_node();
  public:
  void unsafe_arena_set_allocated_node(
      ::onos::ransim::types::Node* node);
  ::onos::ransim::types::Node* unsafe_arena_release_node();

  // @@protoc_insertion_point(class_scope:onos.ransim.model.ListNodesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::ransim::types::Node* node_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class WatchNodesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.model.WatchNodesRequest) */ {
 public:
  inline WatchNodesRequest() : WatchNodesRequest(nullptr) {}
  ~WatchNodesRequest() override;
  explicit constexpr WatchNodesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WatchNodesRequest(const WatchNodesRequest& from);
  WatchNodesRequest(WatchNodesRequest&& from) noexcept
    : WatchNodesRequest() {
    *this = ::std::move(from);
  }

  inline WatchNodesRequest& operator=(const WatchNodesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchNodesRequest& operator=(WatchNodesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WatchNodesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WatchNodesRequest* internal_default_instance() {
    return reinterpret_cast<const WatchNodesRequest*>(
               &_WatchNodesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(WatchNodesRequest& a, WatchNodesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchNodesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchNodesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WatchNodesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WatchNodesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WatchNodesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WatchNodesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchNodesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.WatchNodesRequest";
  }
  protected:
  explicit WatchNodesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNoReplayFieldNumber = 1,
    kNoSubscribeFieldNumber = 2,
  };
  // bool no_replay = 1;
  void clear_no_replay();
  bool no_replay() const;
  void set_no_replay(bool value);
  private:
  bool _internal_no_replay() const;
  void _internal_set_no_replay(bool value);
  public:

  // bool no_subscribe = 2;
  void clear_no_subscribe();
  bool no_subscribe() const;
  void set_no_subscribe(bool value);
  private:
  bool _internal_no_subscribe() const;
  void _internal_set_no_subscribe(bool value);
  public:

  // @@protoc_insertion_point(class_scope:onos.ransim.model.WatchNodesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool no_replay_;
  bool no_subscribe_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class WatchNodesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.model.WatchNodesResponse) */ {
 public:
  inline WatchNodesResponse() : WatchNodesResponse(nullptr) {}
  ~WatchNodesResponse() override;
  explicit constexpr WatchNodesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WatchNodesResponse(const WatchNodesResponse& from);
  WatchNodesResponse(WatchNodesResponse&& from) noexcept
    : WatchNodesResponse() {
    *this = ::std::move(from);
  }

  inline WatchNodesResponse& operator=(const WatchNodesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchNodesResponse& operator=(WatchNodesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WatchNodesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WatchNodesResponse* internal_default_instance() {
    return reinterpret_cast<const WatchNodesResponse*>(
               &_WatchNodesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(WatchNodesResponse& a, WatchNodesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchNodesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchNodesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WatchNodesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WatchNodesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WatchNodesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WatchNodesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchNodesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.WatchNodesResponse";
  }
  protected:
  explicit WatchNodesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // .onos.ransim.types.Node node = 1;
  bool has_node() const;
  private:
  bool _internal_has_node() const;
  public:
  void clear_node();
  const ::onos::ransim::types::Node& node() const;
  PROTOBUF_NODISCARD ::onos::ransim::types::Node* release_node();
  ::onos::ransim::types::Node* mutable_node();
  void set_allocated_node(::onos::ransim::types::Node* node);
  private:
  const ::onos::ransim::types::Node& _internal_node() const;
  ::onos::ransim::types::Node* _internal_mutable_node();
  public:
  void unsafe_arena_set_allocated_node(
      ::onos::ransim::types::Node* node);
  ::onos::ransim::types::Node* unsafe_arena_release_node();

  // .onos.ransim.model.EventType type = 2;
  void clear_type();
  ::onos::ransim::model::EventType type() const;
  void set_type(::onos::ransim::model::EventType value);
  private:
  ::onos::ransim::model::EventType _internal_type() const;
  void _internal_set_type(::onos::ransim::model::EventType value);
  public:

  // @@protoc_insertion_point(class_scope:onos.ransim.model.WatchNodesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::ransim::types::Node* node_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class AgentControlRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.model.AgentControlRequest) */ {
 public:
  inline AgentControlRequest() : AgentControlRequest(nullptr) {}
  ~AgentControlRequest() override;
  explicit constexpr AgentControlRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AgentControlRequest(const AgentControlRequest& from);
  AgentControlRequest(AgentControlRequest&& from) noexcept
    : AgentControlRequest() {
    *this = ::std::move(from);
  }

  inline AgentControlRequest& operator=(const AgentControlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgentControlRequest& operator=(AgentControlRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AgentControlRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AgentControlRequest* internal_default_instance() {
    return reinterpret_cast<const AgentControlRequest*>(
               &_AgentControlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(AgentControlRequest& a, AgentControlRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AgentControlRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgentControlRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AgentControlRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AgentControlRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AgentControlRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AgentControlRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgentControlRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.AgentControlRequest";
  }
  protected:
  explicit AgentControlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsFieldNumber = 3,
    kCommandFieldNumber = 2,
    kEnbidFieldNumber = 1,
  };
  // repeated string args = 3;
  int args_size() const;
  private:
  int _internal_args_size() const;
  public:
  void clear_args();
  const std::string& args(int index) const;
  std::string* mutable_args(int index);
  void set_args(int index, const std::string& value);
  void set_args(int index, std::string&& value);
  void set_args(int index, const char* value);
  void set_args(int index, const char* value, size_t size);
  std::string* add_args();
  void add_args(const std::string& value);
  void add_args(std::string&& value);
  void add_args(const char* value);
  void add_args(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& args() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_args();
  private:
  const std::string& _internal_args(int index) const;
  std::string* _internal_add_args();
  public:

  // string command = 2;
  void clear_command();
  const std::string& command() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_command(ArgT0&& arg0, ArgT... args);
  std::string* mutable_command();
  PROTOBUF_NODISCARD std::string* release_command();
  void set_allocated_command(std::string* command);
  private:
  const std::string& _internal_command() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_command(const std::string& value);
  std::string* _internal_mutable_command();
  public:

  // uint64 enbid = 1 [(.gogoproto.customname) = "GnbID", (.gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/ransim/types.GnbID"];
  void clear_enbid();
  uint64_t enbid() const;
  void set_enbid(uint64_t value);
  private:
  uint64_t _internal_enbid() const;
  void _internal_set_enbid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.ransim.model.AgentControlRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> args_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr command_;
  uint64_t enbid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class AgentControlResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.model.AgentControlResponse) */ {
 public:
  inline AgentControlResponse() : AgentControlResponse(nullptr) {}
  ~AgentControlResponse() override;
  explicit constexpr AgentControlResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AgentControlResponse(const AgentControlResponse& from);
  AgentControlResponse(AgentControlResponse&& from) noexcept
    : AgentControlResponse() {
    *this = ::std::move(from);
  }

  inline AgentControlResponse& operator=(const AgentControlResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AgentControlResponse& operator=(AgentControlResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AgentControlResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AgentControlResponse* internal_default_instance() {
    return reinterpret_cast<const AgentControlResponse*>(
               &_AgentControlResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(AgentControlResponse& a, AgentControlResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AgentControlResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AgentControlResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AgentControlResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AgentControlResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AgentControlResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AgentControlResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AgentControlResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.AgentControlResponse";
  }
  protected:
  explicit AgentControlResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeFieldNumber = 1,
  };
  // .onos.ransim.types.Node node = 1;
  bool has_node() const;
  private:
  bool _internal_has_node() const;
  public:
  void clear_node();
  const ::onos::ransim::types::Node& node() const;
  PROTOBUF_NODISCARD ::onos::ransim::types::Node* release_node();
  ::onos::ransim::types::Node* mutable_node();
  void set_allocated_node(::onos::ransim::types::Node* node);
  private:
  const ::onos::ransim::types::Node& _internal_node() const;
  ::onos::ransim::types::Node* _internal_mutable_node();
  public:
  void unsafe_arena_set_allocated_node(
      ::onos::ransim::types::Node* node);
  ::onos::ransim::types::Node* unsafe_arena_release_node();

  // @@protoc_insertion_point(class_scope:onos.ransim.model.AgentControlResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::ransim::types::Node* node_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class CreateCellRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.model.CreateCellRequest) */ {
 public:
  inline CreateCellRequest() : CreateCellRequest(nullptr) {}
  ~CreateCellRequest() override;
  explicit constexpr CreateCellRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateCellRequest(const CreateCellRequest& from);
  CreateCellRequest(CreateCellRequest&& from) noexcept
    : CreateCellRequest() {
    *this = ::std::move(from);
  }

  inline CreateCellRequest& operator=(const CreateCellRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateCellRequest& operator=(CreateCellRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateCellRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateCellRequest* internal_default_instance() {
    return reinterpret_cast<const CreateCellRequest*>(
               &_CreateCellRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(CreateCellRequest& a, CreateCellRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateCellRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateCellRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateCellRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateCellRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateCellRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateCellRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateCellRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.CreateCellRequest";
  }
  protected:
  explicit CreateCellRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellFieldNumber = 1,
  };
  // .onos.ransim.types.Cell cell = 1;
  bool has_cell() const;
  private:
  bool _internal_has_cell() const;
  public:
  void clear_cell();
  const ::onos::ransim::types::Cell& cell() const;
  PROTOBUF_NODISCARD ::onos::ransim::types::Cell* release_cell();
  ::onos::ransim::types::Cell* mutable_cell();
  void set_allocated_cell(::onos::ransim::types::Cell* cell);
  private:
  const ::onos::ransim::types::Cell& _internal_cell() const;
  ::onos::ransim::types::Cell* _internal_mutable_cell();
  public:
  void unsafe_arena_set_allocated_cell(
      ::onos::ransim::types::Cell* cell);
  ::onos::ransim::types::Cell* unsafe_arena_release_cell();

  // @@protoc_insertion_point(class_scope:onos.ransim.model.CreateCellRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::ransim::types::Cell* cell_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class CreateCellResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:onos.ransim.model.CreateCellResponse) */ {
 public:
  inline CreateCellResponse() : CreateCellResponse(nullptr) {}
  explicit constexpr CreateCellResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateCellResponse(const CreateCellResponse& from);
  CreateCellResponse(CreateCellResponse&& from) noexcept
    : CreateCellResponse() {
    *this = ::std::move(from);
  }

  inline CreateCellResponse& operator=(const CreateCellResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateCellResponse& operator=(CreateCellResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateCellResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateCellResponse* internal_default_instance() {
    return reinterpret_cast<const CreateCellResponse*>(
               &_CreateCellResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(CreateCellResponse& a, CreateCellResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateCellResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateCellResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateCellResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateCellResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CreateCellResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CreateCellResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.CreateCellResponse";
  }
  protected:
  explicit CreateCellResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onos.ransim.model.CreateCellResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class GetCellRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.model.GetCellRequest) */ {
 public:
  inline GetCellRequest() : GetCellRequest(nullptr) {}
  ~GetCellRequest() override;
  explicit constexpr GetCellRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCellRequest(const GetCellRequest& from);
  GetCellRequest(GetCellRequest&& from) noexcept
    : GetCellRequest() {
    *this = ::std::move(from);
  }

  inline GetCellRequest& operator=(const GetCellRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCellRequest& operator=(GetCellRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCellRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCellRequest* internal_default_instance() {
    return reinterpret_cast<const GetCellRequest*>(
               &_GetCellRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(GetCellRequest& a, GetCellRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCellRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCellRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCellRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCellRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCellRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetCellRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCellRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.GetCellRequest";
  }
  protected:
  explicit GetCellRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEcgiFieldNumber = 1,
  };
  // uint64 ecgi = 1 [(.gogoproto.customname) = "NCGI", (.gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/ransim/types.NCGI"];
  void clear_ecgi();
  uint64_t ecgi() const;
  void set_ecgi(uint64_t value);
  private:
  uint64_t _internal_ecgi() const;
  void _internal_set_ecgi(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.ransim.model.GetCellRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t ecgi_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class GetCellResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.model.GetCellResponse) */ {
 public:
  inline GetCellResponse() : GetCellResponse(nullptr) {}
  ~GetCellResponse() override;
  explicit constexpr GetCellResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCellResponse(const GetCellResponse& from);
  GetCellResponse(GetCellResponse&& from) noexcept
    : GetCellResponse() {
    *this = ::std::move(from);
  }

  inline GetCellResponse& operator=(const GetCellResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCellResponse& operator=(GetCellResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCellResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCellResponse* internal_default_instance() {
    return reinterpret_cast<const GetCellResponse*>(
               &_GetCellResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(GetCellResponse& a, GetCellResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCellResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCellResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCellResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCellResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCellResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetCellResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCellResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.GetCellResponse";
  }
  protected:
  explicit GetCellResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellFieldNumber = 1,
  };
  // .onos.ransim.types.Cell cell = 1;
  bool has_cell() const;
  private:
  bool _internal_has_cell() const;
  public:
  void clear_cell();
  const ::onos::ransim::types::Cell& cell() const;
  PROTOBUF_NODISCARD ::onos::ransim::types::Cell* release_cell();
  ::onos::ransim::types::Cell* mutable_cell();
  void set_allocated_cell(::onos::ransim::types::Cell* cell);
  private:
  const ::onos::ransim::types::Cell& _internal_cell() const;
  ::onos::ransim::types::Cell* _internal_mutable_cell();
  public:
  void unsafe_arena_set_allocated_cell(
      ::onos::ransim::types::Cell* cell);
  ::onos::ransim::types::Cell* unsafe_arena_release_cell();

  // @@protoc_insertion_point(class_scope:onos.ransim.model.GetCellResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::ransim::types::Cell* cell_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class UpdateCellRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.model.UpdateCellRequest) */ {
 public:
  inline UpdateCellRequest() : UpdateCellRequest(nullptr) {}
  ~UpdateCellRequest() override;
  explicit constexpr UpdateCellRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateCellRequest(const UpdateCellRequest& from);
  UpdateCellRequest(UpdateCellRequest&& from) noexcept
    : UpdateCellRequest() {
    *this = ::std::move(from);
  }

  inline UpdateCellRequest& operator=(const UpdateCellRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateCellRequest& operator=(UpdateCellRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateCellRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateCellRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateCellRequest*>(
               &_UpdateCellRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(UpdateCellRequest& a, UpdateCellRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateCellRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateCellRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateCellRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateCellRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateCellRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateCellRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateCellRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.UpdateCellRequest";
  }
  protected:
  explicit UpdateCellRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellFieldNumber = 1,
  };
  // .onos.ransim.types.Cell cell = 1;
  bool has_cell() const;
  private:
  bool _internal_has_cell() const;
  public:
  void clear_cell();
  const ::onos::ransim::types::Cell& cell() const;
  PROTOBUF_NODISCARD ::onos::ransim::types::Cell* release_cell();
  ::onos::ransim::types::Cell* mutable_cell();
  void set_allocated_cell(::onos::ransim::types::Cell* cell);
  private:
  const ::onos::ransim::types::Cell& _internal_cell() const;
  ::onos::ransim::types::Cell* _internal_mutable_cell();
  public:
  void unsafe_arena_set_allocated_cell(
      ::onos::ransim::types::Cell* cell);
  ::onos::ransim::types::Cell* unsafe_arena_release_cell();

  // @@protoc_insertion_point(class_scope:onos.ransim.model.UpdateCellRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::ransim::types::Cell* cell_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class UpdateCellResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:onos.ransim.model.UpdateCellResponse) */ {
 public:
  inline UpdateCellResponse() : UpdateCellResponse(nullptr) {}
  explicit constexpr UpdateCellResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateCellResponse(const UpdateCellResponse& from);
  UpdateCellResponse(UpdateCellResponse&& from) noexcept
    : UpdateCellResponse() {
    *this = ::std::move(from);
  }

  inline UpdateCellResponse& operator=(const UpdateCellResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateCellResponse& operator=(UpdateCellResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateCellResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateCellResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateCellResponse*>(
               &_UpdateCellResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(UpdateCellResponse& a, UpdateCellResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateCellResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateCellResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateCellResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateCellResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const UpdateCellResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const UpdateCellResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.UpdateCellResponse";
  }
  protected:
  explicit UpdateCellResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onos.ransim.model.UpdateCellResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class DeleteCellRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.model.DeleteCellRequest) */ {
 public:
  inline DeleteCellRequest() : DeleteCellRequest(nullptr) {}
  ~DeleteCellRequest() override;
  explicit constexpr DeleteCellRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteCellRequest(const DeleteCellRequest& from);
  DeleteCellRequest(DeleteCellRequest&& from) noexcept
    : DeleteCellRequest() {
    *this = ::std::move(from);
  }

  inline DeleteCellRequest& operator=(const DeleteCellRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteCellRequest& operator=(DeleteCellRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteCellRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteCellRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteCellRequest*>(
               &_DeleteCellRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(DeleteCellRequest& a, DeleteCellRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteCellRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteCellRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteCellRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteCellRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteCellRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteCellRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteCellRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.DeleteCellRequest";
  }
  protected:
  explicit DeleteCellRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnbidFieldNumber = 1,
  };
  // uint64 enbid = 1 [(.gogoproto.customname) = "NCGI", (.gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/ransim/types.NCGI"];
  void clear_enbid();
  uint64_t enbid() const;
  void set_enbid(uint64_t value);
  private:
  uint64_t _internal_enbid() const;
  void _internal_set_enbid(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.ransim.model.DeleteCellRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t enbid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class DeleteCellResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:onos.ransim.model.DeleteCellResponse) */ {
 public:
  inline DeleteCellResponse() : DeleteCellResponse(nullptr) {}
  explicit constexpr DeleteCellResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteCellResponse(const DeleteCellResponse& from);
  DeleteCellResponse(DeleteCellResponse&& from) noexcept
    : DeleteCellResponse() {
    *this = ::std::move(from);
  }

  inline DeleteCellResponse& operator=(const DeleteCellResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteCellResponse& operator=(DeleteCellResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteCellResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteCellResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteCellResponse*>(
               &_DeleteCellResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(DeleteCellResponse& a, DeleteCellResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteCellResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteCellResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteCellResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteCellResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DeleteCellResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DeleteCellResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.DeleteCellResponse";
  }
  protected:
  explicit DeleteCellResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onos.ransim.model.DeleteCellResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class WatchCellsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.model.WatchCellsRequest) */ {
 public:
  inline WatchCellsRequest() : WatchCellsRequest(nullptr) {}
  ~WatchCellsRequest() override;
  explicit constexpr WatchCellsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WatchCellsRequest(const WatchCellsRequest& from);
  WatchCellsRequest(WatchCellsRequest&& from) noexcept
    : WatchCellsRequest() {
    *this = ::std::move(from);
  }

  inline WatchCellsRequest& operator=(const WatchCellsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchCellsRequest& operator=(WatchCellsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WatchCellsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WatchCellsRequest* internal_default_instance() {
    return reinterpret_cast<const WatchCellsRequest*>(
               &_WatchCellsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(WatchCellsRequest& a, WatchCellsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchCellsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchCellsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WatchCellsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WatchCellsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WatchCellsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WatchCellsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchCellsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.WatchCellsRequest";
  }
  protected:
  explicit WatchCellsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNoReplayFieldNumber = 1,
    kNoSubscribeFieldNumber = 2,
  };
  // bool no_replay = 1;
  void clear_no_replay();
  bool no_replay() const;
  void set_no_replay(bool value);
  private:
  bool _internal_no_replay() const;
  void _internal_set_no_replay(bool value);
  public:

  // bool no_subscribe = 2;
  void clear_no_subscribe();
  bool no_subscribe() const;
  void set_no_subscribe(bool value);
  private:
  bool _internal_no_subscribe() const;
  void _internal_set_no_subscribe(bool value);
  public:

  // @@protoc_insertion_point(class_scope:onos.ransim.model.WatchCellsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool no_replay_;
  bool no_subscribe_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class WatchCellsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.model.WatchCellsResponse) */ {
 public:
  inline WatchCellsResponse() : WatchCellsResponse(nullptr) {}
  ~WatchCellsResponse() override;
  explicit constexpr WatchCellsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WatchCellsResponse(const WatchCellsResponse& from);
  WatchCellsResponse(WatchCellsResponse&& from) noexcept
    : WatchCellsResponse() {
    *this = ::std::move(from);
  }

  inline WatchCellsResponse& operator=(const WatchCellsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchCellsResponse& operator=(WatchCellsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WatchCellsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WatchCellsResponse* internal_default_instance() {
    return reinterpret_cast<const WatchCellsResponse*>(
               &_WatchCellsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(WatchCellsResponse& a, WatchCellsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchCellsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchCellsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WatchCellsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WatchCellsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WatchCellsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WatchCellsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchCellsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.WatchCellsResponse";
  }
  protected:
  explicit WatchCellsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // .onos.ransim.types.Cell cell = 1;
  bool has_cell() const;
  private:
  bool _internal_has_cell() const;
  public:
  void clear_cell();
  const ::onos::ransim::types::Cell& cell() const;
  PROTOBUF_NODISCARD ::onos::ransim::types::Cell* release_cell();
  ::onos::ransim::types::Cell* mutable_cell();
  void set_allocated_cell(::onos::ransim::types::Cell* cell);
  private:
  const ::onos::ransim::types::Cell& _internal_cell() const;
  ::onos::ransim::types::Cell* _internal_mutable_cell();
  public:
  void unsafe_arena_set_allocated_cell(
      ::onos::ransim::types::Cell* cell);
  ::onos::ransim::types::Cell* unsafe_arena_release_cell();

  // .onos.ransim.model.EventType type = 2;
  void clear_type();
  ::onos::ransim::model::EventType type() const;
  void set_type(::onos::ransim::model::EventType value);
  private:
  ::onos::ransim::model::EventType _internal_type() const;
  void _internal_set_type(::onos::ransim::model::EventType value);
  public:

  // @@protoc_insertion_point(class_scope:onos.ransim.model.WatchCellsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::ransim::types::Cell* cell_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class ListCellsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:onos.ransim.model.ListCellsRequest) */ {
 public:
  inline ListCellsRequest() : ListCellsRequest(nullptr) {}
  explicit constexpr ListCellsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListCellsRequest(const ListCellsRequest& from);
  ListCellsRequest(ListCellsRequest&& from) noexcept
    : ListCellsRequest() {
    *this = ::std::move(from);
  }

  inline ListCellsRequest& operator=(const ListCellsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListCellsRequest& operator=(ListCellsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListCellsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListCellsRequest* internal_default_instance() {
    return reinterpret_cast<const ListCellsRequest*>(
               &_ListCellsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(ListCellsRequest& a, ListCellsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListCellsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListCellsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListCellsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListCellsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ListCellsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ListCellsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.ListCellsRequest";
  }
  protected:
  explicit ListCellsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onos.ransim.model.ListCellsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class ListCellsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.model.ListCellsResponse) */ {
 public:
  inline ListCellsResponse() : ListCellsResponse(nullptr) {}
  ~ListCellsResponse() override;
  explicit constexpr ListCellsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListCellsResponse(const ListCellsResponse& from);
  ListCellsResponse(ListCellsResponse&& from) noexcept
    : ListCellsResponse() {
    *this = ::std::move(from);
  }

  inline ListCellsResponse& operator=(const ListCellsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListCellsResponse& operator=(ListCellsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListCellsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListCellsResponse* internal_default_instance() {
    return reinterpret_cast<const ListCellsResponse*>(
               &_ListCellsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(ListCellsResponse& a, ListCellsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListCellsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListCellsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListCellsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListCellsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListCellsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListCellsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListCellsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.ListCellsResponse";
  }
  protected:
  explicit ListCellsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellFieldNumber = 1,
  };
  // .onos.ransim.types.Cell Cell = 1;
  bool has_cell() const;
  private:
  bool _internal_has_cell() const;
  public:
  void clear_cell();
  const ::onos::ransim::types::Cell& cell() const;
  PROTOBUF_NODISCARD ::onos::ransim::types::Cell* release_cell();
  ::onos::ransim::types::Cell* mutable_cell();
  void set_allocated_cell(::onos::ransim::types::Cell* cell);
  private:
  const ::onos::ransim::types::Cell& _internal_cell() const;
  ::onos::ransim::types::Cell* _internal_mutable_cell();
  public:
  void unsafe_arena_set_allocated_cell(
      ::onos::ransim::types::Cell* cell);
  ::onos::ransim::types::Cell* unsafe_arena_release_cell();

  // @@protoc_insertion_point(class_scope:onos.ransim.model.ListCellsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::ransim::types::Cell* cell_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class CreateRouteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.model.CreateRouteRequest) */ {
 public:
  inline CreateRouteRequest() : CreateRouteRequest(nullptr) {}
  ~CreateRouteRequest() override;
  explicit constexpr CreateRouteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateRouteRequest(const CreateRouteRequest& from);
  CreateRouteRequest(CreateRouteRequest&& from) noexcept
    : CreateRouteRequest() {
    *this = ::std::move(from);
  }

  inline CreateRouteRequest& operator=(const CreateRouteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRouteRequest& operator=(CreateRouteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateRouteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateRouteRequest* internal_default_instance() {
    return reinterpret_cast<const CreateRouteRequest*>(
               &_CreateRouteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(CreateRouteRequest& a, CreateRouteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRouteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRouteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateRouteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateRouteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateRouteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateRouteRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRouteRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.CreateRouteRequest";
  }
  protected:
  explicit CreateRouteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRouteFieldNumber = 1,
  };
  // .onos.ransim.types.Route route = 1;
  bool has_route() const;
  private:
  bool _internal_has_route() const;
  public:
  void clear_route();
  const ::onos::ransim::types::Route& route() const;
  PROTOBUF_NODISCARD ::onos::ransim::types::Route* release_route();
  ::onos::ransim::types::Route* mutable_route();
  void set_allocated_route(::onos::ransim::types::Route* route);
  private:
  const ::onos::ransim::types::Route& _internal_route() const;
  ::onos::ransim::types::Route* _internal_mutable_route();
  public:
  void unsafe_arena_set_allocated_route(
      ::onos::ransim::types::Route* route);
  ::onos::ransim::types::Route* unsafe_arena_release_route();

  // @@protoc_insertion_point(class_scope:onos.ransim.model.CreateRouteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::ransim::types::Route* route_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class CreateRouteResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:onos.ransim.model.CreateRouteResponse) */ {
 public:
  inline CreateRouteResponse() : CreateRouteResponse(nullptr) {}
  explicit constexpr CreateRouteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateRouteResponse(const CreateRouteResponse& from);
  CreateRouteResponse(CreateRouteResponse&& from) noexcept
    : CreateRouteResponse() {
    *this = ::std::move(from);
  }

  inline CreateRouteResponse& operator=(const CreateRouteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRouteResponse& operator=(CreateRouteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateRouteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateRouteResponse* internal_default_instance() {
    return reinterpret_cast<const CreateRouteResponse*>(
               &_CreateRouteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(CreateRouteResponse& a, CreateRouteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRouteResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRouteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateRouteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateRouteResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CreateRouteResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CreateRouteResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.CreateRouteResponse";
  }
  protected:
  explicit CreateRouteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onos.ransim.model.CreateRouteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class GetRouteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.model.GetRouteRequest) */ {
 public:
  inline GetRouteRequest() : GetRouteRequest(nullptr) {}
  ~GetRouteRequest() override;
  explicit constexpr GetRouteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRouteRequest(const GetRouteRequest& from);
  GetRouteRequest(GetRouteRequest&& from) noexcept
    : GetRouteRequest() {
    *this = ::std::move(from);
  }

  inline GetRouteRequest& operator=(const GetRouteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRouteRequest& operator=(GetRouteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRouteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRouteRequest* internal_default_instance() {
    return reinterpret_cast<const GetRouteRequest*>(
               &_GetRouteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(GetRouteRequest& a, GetRouteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRouteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRouteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRouteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRouteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRouteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetRouteRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRouteRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.GetRouteRequest";
  }
  protected:
  explicit GetRouteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImsiFieldNumber = 1,
  };
  // uint32 imsi = 1;
  void clear_imsi();
  uint32_t imsi() const;
  void set_imsi(uint32_t value);
  private:
  uint32_t _internal_imsi() const;
  void _internal_set_imsi(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.ransim.model.GetRouteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t imsi_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class GetRouteResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.model.GetRouteResponse) */ {
 public:
  inline GetRouteResponse() : GetRouteResponse(nullptr) {}
  ~GetRouteResponse() override;
  explicit constexpr GetRouteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRouteResponse(const GetRouteResponse& from);
  GetRouteResponse(GetRouteResponse&& from) noexcept
    : GetRouteResponse() {
    *this = ::std::move(from);
  }

  inline GetRouteResponse& operator=(const GetRouteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRouteResponse& operator=(GetRouteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRouteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRouteResponse* internal_default_instance() {
    return reinterpret_cast<const GetRouteResponse*>(
               &_GetRouteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(GetRouteResponse& a, GetRouteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRouteResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRouteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRouteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRouteResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRouteResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetRouteResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRouteResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.GetRouteResponse";
  }
  protected:
  explicit GetRouteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRouteFieldNumber = 1,
  };
  // .onos.ransim.types.Route route = 1;
  bool has_route() const;
  private:
  bool _internal_has_route() const;
  public:
  void clear_route();
  const ::onos::ransim::types::Route& route() const;
  PROTOBUF_NODISCARD ::onos::ransim::types::Route* release_route();
  ::onos::ransim::types::Route* mutable_route();
  void set_allocated_route(::onos::ransim::types::Route* route);
  private:
  const ::onos::ransim::types::Route& _internal_route() const;
  ::onos::ransim::types::Route* _internal_mutable_route();
  public:
  void unsafe_arena_set_allocated_route(
      ::onos::ransim::types::Route* route);
  ::onos::ransim::types::Route* unsafe_arena_release_route();

  // @@protoc_insertion_point(class_scope:onos.ransim.model.GetRouteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::ransim::types::Route* route_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class DeleteRouteRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.model.DeleteRouteRequest) */ {
 public:
  inline DeleteRouteRequest() : DeleteRouteRequest(nullptr) {}
  ~DeleteRouteRequest() override;
  explicit constexpr DeleteRouteRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteRouteRequest(const DeleteRouteRequest& from);
  DeleteRouteRequest(DeleteRouteRequest&& from) noexcept
    : DeleteRouteRequest() {
    *this = ::std::move(from);
  }

  inline DeleteRouteRequest& operator=(const DeleteRouteRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRouteRequest& operator=(DeleteRouteRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteRouteRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteRouteRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteRouteRequest*>(
               &_DeleteRouteRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(DeleteRouteRequest& a, DeleteRouteRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRouteRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRouteRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteRouteRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteRouteRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteRouteRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteRouteRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRouteRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.DeleteRouteRequest";
  }
  protected:
  explicit DeleteRouteRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImsiFieldNumber = 1,
  };
  // uint64 imsi = 1;
  void clear_imsi();
  uint64_t imsi() const;
  void set_imsi(uint64_t value);
  private:
  uint64_t _internal_imsi() const;
  void _internal_set_imsi(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.ransim.model.DeleteRouteRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t imsi_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class DeleteRouteResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:onos.ransim.model.DeleteRouteResponse) */ {
 public:
  inline DeleteRouteResponse() : DeleteRouteResponse(nullptr) {}
  explicit constexpr DeleteRouteResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteRouteResponse(const DeleteRouteResponse& from);
  DeleteRouteResponse(DeleteRouteResponse&& from) noexcept
    : DeleteRouteResponse() {
    *this = ::std::move(from);
  }

  inline DeleteRouteResponse& operator=(const DeleteRouteResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRouteResponse& operator=(DeleteRouteResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteRouteResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteRouteResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteRouteResponse*>(
               &_DeleteRouteResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(DeleteRouteResponse& a, DeleteRouteResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRouteResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRouteResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteRouteResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteRouteResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DeleteRouteResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DeleteRouteResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.DeleteRouteResponse";
  }
  protected:
  explicit DeleteRouteResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onos.ransim.model.DeleteRouteResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class WatchRoutesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.model.WatchRoutesRequest) */ {
 public:
  inline WatchRoutesRequest() : WatchRoutesRequest(nullptr) {}
  ~WatchRoutesRequest() override;
  explicit constexpr WatchRoutesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WatchRoutesRequest(const WatchRoutesRequest& from);
  WatchRoutesRequest(WatchRoutesRequest&& from) noexcept
    : WatchRoutesRequest() {
    *this = ::std::move(from);
  }

  inline WatchRoutesRequest& operator=(const WatchRoutesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchRoutesRequest& operator=(WatchRoutesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WatchRoutesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WatchRoutesRequest* internal_default_instance() {
    return reinterpret_cast<const WatchRoutesRequest*>(
               &_WatchRoutesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(WatchRoutesRequest& a, WatchRoutesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchRoutesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchRoutesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WatchRoutesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WatchRoutesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WatchRoutesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WatchRoutesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchRoutesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.WatchRoutesRequest";
  }
  protected:
  explicit WatchRoutesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNoReplayFieldNumber = 1,
    kNoSubscribeFieldNumber = 2,
  };
  // bool no_replay = 1;
  void clear_no_replay();
  bool no_replay() const;
  void set_no_replay(bool value);
  private:
  bool _internal_no_replay() const;
  void _internal_set_no_replay(bool value);
  public:

  // bool no_subscribe = 2;
  void clear_no_subscribe();
  bool no_subscribe() const;
  void set_no_subscribe(bool value);
  private:
  bool _internal_no_subscribe() const;
  void _internal_set_no_subscribe(bool value);
  public:

  // @@protoc_insertion_point(class_scope:onos.ransim.model.WatchRoutesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool no_replay_;
  bool no_subscribe_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class WatchRoutesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.model.WatchRoutesResponse) */ {
 public:
  inline WatchRoutesResponse() : WatchRoutesResponse(nullptr) {}
  ~WatchRoutesResponse() override;
  explicit constexpr WatchRoutesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WatchRoutesResponse(const WatchRoutesResponse& from);
  WatchRoutesResponse(WatchRoutesResponse&& from) noexcept
    : WatchRoutesResponse() {
    *this = ::std::move(from);
  }

  inline WatchRoutesResponse& operator=(const WatchRoutesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchRoutesResponse& operator=(WatchRoutesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WatchRoutesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WatchRoutesResponse* internal_default_instance() {
    return reinterpret_cast<const WatchRoutesResponse*>(
               &_WatchRoutesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(WatchRoutesResponse& a, WatchRoutesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchRoutesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchRoutesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WatchRoutesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WatchRoutesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WatchRoutesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WatchRoutesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchRoutesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.WatchRoutesResponse";
  }
  protected:
  explicit WatchRoutesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRouteFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // .onos.ransim.types.Route route = 1;
  bool has_route() const;
  private:
  bool _internal_has_route() const;
  public:
  void clear_route();
  const ::onos::ransim::types::Route& route() const;
  PROTOBUF_NODISCARD ::onos::ransim::types::Route* release_route();
  ::onos::ransim::types::Route* mutable_route();
  void set_allocated_route(::onos::ransim::types::Route* route);
  private:
  const ::onos::ransim::types::Route& _internal_route() const;
  ::onos::ransim::types::Route* _internal_mutable_route();
  public:
  void unsafe_arena_set_allocated_route(
      ::onos::ransim::types::Route* route);
  ::onos::ransim::types::Route* unsafe_arena_release_route();

  // .onos.ransim.model.EventType type = 2;
  void clear_type();
  ::onos::ransim::model::EventType type() const;
  void set_type(::onos::ransim::model::EventType value);
  private:
  ::onos::ransim::model::EventType _internal_type() const;
  void _internal_set_type(::onos::ransim::model::EventType value);
  public:

  // @@protoc_insertion_point(class_scope:onos.ransim.model.WatchRoutesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::ransim::types::Route* route_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class ListRoutesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:onos.ransim.model.ListRoutesRequest) */ {
 public:
  inline ListRoutesRequest() : ListRoutesRequest(nullptr) {}
  explicit constexpr ListRoutesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListRoutesRequest(const ListRoutesRequest& from);
  ListRoutesRequest(ListRoutesRequest&& from) noexcept
    : ListRoutesRequest() {
    *this = ::std::move(from);
  }

  inline ListRoutesRequest& operator=(const ListRoutesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListRoutesRequest& operator=(ListRoutesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListRoutesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListRoutesRequest* internal_default_instance() {
    return reinterpret_cast<const ListRoutesRequest*>(
               &_ListRoutesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(ListRoutesRequest& a, ListRoutesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListRoutesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListRoutesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListRoutesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListRoutesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ListRoutesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ListRoutesRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.ListRoutesRequest";
  }
  protected:
  explicit ListRoutesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onos.ransim.model.ListRoutesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class ListRoutesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.model.ListRoutesResponse) */ {
 public:
  inline ListRoutesResponse() : ListRoutesResponse(nullptr) {}
  ~ListRoutesResponse() override;
  explicit constexpr ListRoutesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListRoutesResponse(const ListRoutesResponse& from);
  ListRoutesResponse(ListRoutesResponse&& from) noexcept
    : ListRoutesResponse() {
    *this = ::std::move(from);
  }

  inline ListRoutesResponse& operator=(const ListRoutesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListRoutesResponse& operator=(ListRoutesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListRoutesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListRoutesResponse* internal_default_instance() {
    return reinterpret_cast<const ListRoutesResponse*>(
               &_ListRoutesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(ListRoutesResponse& a, ListRoutesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListRoutesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListRoutesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListRoutesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListRoutesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListRoutesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListRoutesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListRoutesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.ListRoutesResponse";
  }
  protected:
  explicit ListRoutesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRouteFieldNumber = 1,
  };
  // .onos.ransim.types.Route route = 1;
  bool has_route() const;
  private:
  bool _internal_has_route() const;
  public:
  void clear_route();
  const ::onos::ransim::types::Route& route() const;
  PROTOBUF_NODISCARD ::onos::ransim::types::Route* release_route();
  ::onos::ransim::types::Route* mutable_route();
  void set_allocated_route(::onos::ransim::types::Route* route);
  private:
  const ::onos::ransim::types::Route& _internal_route() const;
  ::onos::ransim::types::Route* _internal_mutable_route();
  public:
  void unsafe_arena_set_allocated_route(
      ::onos::ransim::types::Route* route);
  ::onos::ransim::types::Route* unsafe_arena_release_route();

  // @@protoc_insertion_point(class_scope:onos.ransim.model.ListRoutesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::ransim::types::Route* route_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class GetUERequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.model.GetUERequest) */ {
 public:
  inline GetUERequest() : GetUERequest(nullptr) {}
  ~GetUERequest() override;
  explicit constexpr GetUERequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUERequest(const GetUERequest& from);
  GetUERequest(GetUERequest&& from) noexcept
    : GetUERequest() {
    *this = ::std::move(from);
  }

  inline GetUERequest& operator=(const GetUERequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUERequest& operator=(GetUERequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUERequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUERequest* internal_default_instance() {
    return reinterpret_cast<const GetUERequest*>(
               &_GetUERequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(GetUERequest& a, GetUERequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUERequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUERequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetUERequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetUERequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetUERequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetUERequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUERequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.GetUERequest";
  }
  protected:
  explicit GetUERequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImsiFieldNumber = 1,
  };
  // uint32 imsi = 1;
  void clear_imsi();
  uint32_t imsi() const;
  void set_imsi(uint32_t value);
  private:
  uint32_t _internal_imsi() const;
  void _internal_set_imsi(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.ransim.model.GetUERequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t imsi_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class GetUEResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.model.GetUEResponse) */ {
 public:
  inline GetUEResponse() : GetUEResponse(nullptr) {}
  ~GetUEResponse() override;
  explicit constexpr GetUEResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUEResponse(const GetUEResponse& from);
  GetUEResponse(GetUEResponse&& from) noexcept
    : GetUEResponse() {
    *this = ::std::move(from);
  }

  inline GetUEResponse& operator=(const GetUEResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUEResponse& operator=(GetUEResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUEResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUEResponse* internal_default_instance() {
    return reinterpret_cast<const GetUEResponse*>(
               &_GetUEResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(GetUEResponse& a, GetUEResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUEResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUEResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetUEResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetUEResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetUEResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetUEResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUEResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.GetUEResponse";
  }
  protected:
  explicit GetUEResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUeFieldNumber = 1,
  };
  // .onos.ransim.types.Ue ue = 1;
  bool has_ue() const;
  private:
  bool _internal_has_ue() const;
  public:
  void clear_ue();
  const ::onos::ransim::types::Ue& ue() const;
  PROTOBUF_NODISCARD ::onos::ransim::types::Ue* release_ue();
  ::onos::ransim::types::Ue* mutable_ue();
  void set_allocated_ue(::onos::ransim::types::Ue* ue);
  private:
  const ::onos::ransim::types::Ue& _internal_ue() const;
  ::onos::ransim::types::Ue* _internal_mutable_ue();
  public:
  void unsafe_arena_set_allocated_ue(
      ::onos::ransim::types::Ue* ue);
  ::onos::ransim::types::Ue* unsafe_arena_release_ue();

  // @@protoc_insertion_point(class_scope:onos.ransim.model.GetUEResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::ransim::types::Ue* ue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class MoveToCellRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.model.MoveToCellRequest) */ {
 public:
  inline MoveToCellRequest() : MoveToCellRequest(nullptr) {}
  ~MoveToCellRequest() override;
  explicit constexpr MoveToCellRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveToCellRequest(const MoveToCellRequest& from);
  MoveToCellRequest(MoveToCellRequest&& from) noexcept
    : MoveToCellRequest() {
    *this = ::std::move(from);
  }

  inline MoveToCellRequest& operator=(const MoveToCellRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveToCellRequest& operator=(MoveToCellRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveToCellRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveToCellRequest* internal_default_instance() {
    return reinterpret_cast<const MoveToCellRequest*>(
               &_MoveToCellRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(MoveToCellRequest& a, MoveToCellRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveToCellRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveToCellRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveToCellRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveToCellRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MoveToCellRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MoveToCellRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveToCellRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.MoveToCellRequest";
  }
  protected:
  explicit MoveToCellRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImsiFieldNumber = 1,
    kEcgiFieldNumber = 2,
  };
  // uint32 imsi = 1;
  void clear_imsi();
  uint32_t imsi() const;
  void set_imsi(uint32_t value);
  private:
  uint32_t _internal_imsi() const;
  void _internal_set_imsi(uint32_t value);
  public:

  // uint32 ecgi = 2 [(.gogoproto.customname) = "NCGI", (.gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/ransim/types.NCGI"];
  void clear_ecgi();
  uint32_t ecgi() const;
  void set_ecgi(uint32_t value);
  private:
  uint32_t _internal_ecgi() const;
  void _internal_set_ecgi(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.ransim.model.MoveToCellRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t imsi_;
  uint32_t ecgi_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class MoveToCellResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:onos.ransim.model.MoveToCellResponse) */ {
 public:
  inline MoveToCellResponse() : MoveToCellResponse(nullptr) {}
  explicit constexpr MoveToCellResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveToCellResponse(const MoveToCellResponse& from);
  MoveToCellResponse(MoveToCellResponse&& from) noexcept
    : MoveToCellResponse() {
    *this = ::std::move(from);
  }

  inline MoveToCellResponse& operator=(const MoveToCellResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveToCellResponse& operator=(MoveToCellResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveToCellResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveToCellResponse* internal_default_instance() {
    return reinterpret_cast<const MoveToCellResponse*>(
               &_MoveToCellResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(MoveToCellResponse& a, MoveToCellResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveToCellResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveToCellResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveToCellResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveToCellResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MoveToCellResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MoveToCellResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.MoveToCellResponse";
  }
  protected:
  explicit MoveToCellResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onos.ransim.model.MoveToCellResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class MoveToLocationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.model.MoveToLocationRequest) */ {
 public:
  inline MoveToLocationRequest() : MoveToLocationRequest(nullptr) {}
  ~MoveToLocationRequest() override;
  explicit constexpr MoveToLocationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveToLocationRequest(const MoveToLocationRequest& from);
  MoveToLocationRequest(MoveToLocationRequest&& from) noexcept
    : MoveToLocationRequest() {
    *this = ::std::move(from);
  }

  inline MoveToLocationRequest& operator=(const MoveToLocationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveToLocationRequest& operator=(MoveToLocationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveToLocationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveToLocationRequest* internal_default_instance() {
    return reinterpret_cast<const MoveToLocationRequest*>(
               &_MoveToLocationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(MoveToLocationRequest& a, MoveToLocationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveToLocationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveToLocationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveToLocationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveToLocationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MoveToLocationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MoveToLocationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MoveToLocationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.MoveToLocationRequest";
  }
  protected:
  explicit MoveToLocationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 2,
    kImsiFieldNumber = 1,
    kHeadingFieldNumber = 3,
  };
  // .onos.ransim.types.Point location = 2;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::onos::ransim::types::Point& location() const;
  PROTOBUF_NODISCARD ::onos::ransim::types::Point* release_location();
  ::onos::ransim::types::Point* mutable_location();
  void set_allocated_location(::onos::ransim::types::Point* location);
  private:
  const ::onos::ransim::types::Point& _internal_location() const;
  ::onos::ransim::types::Point* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::onos::ransim::types::Point* location);
  ::onos::ransim::types::Point* unsafe_arena_release_location();

  // uint32 imsi = 1;
  void clear_imsi();
  uint32_t imsi() const;
  void set_imsi(uint32_t value);
  private:
  uint32_t _internal_imsi() const;
  void _internal_set_imsi(uint32_t value);
  public:

  // uint32 heading = 3;
  void clear_heading();
  uint32_t heading() const;
  void set_heading(uint32_t value);
  private:
  uint32_t _internal_heading() const;
  void _internal_set_heading(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.ransim.model.MoveToLocationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::ransim::types::Point* location_;
  uint32_t imsi_;
  uint32_t heading_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class MoveToLocationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:onos.ransim.model.MoveToLocationResponse) */ {
 public:
  inline MoveToLocationResponse() : MoveToLocationResponse(nullptr) {}
  explicit constexpr MoveToLocationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MoveToLocationResponse(const MoveToLocationResponse& from);
  MoveToLocationResponse(MoveToLocationResponse&& from) noexcept
    : MoveToLocationResponse() {
    *this = ::std::move(from);
  }

  inline MoveToLocationResponse& operator=(const MoveToLocationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MoveToLocationResponse& operator=(MoveToLocationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MoveToLocationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MoveToLocationResponse* internal_default_instance() {
    return reinterpret_cast<const MoveToLocationResponse*>(
               &_MoveToLocationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(MoveToLocationResponse& a, MoveToLocationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MoveToLocationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MoveToLocationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MoveToLocationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MoveToLocationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const MoveToLocationResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const MoveToLocationResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.MoveToLocationResponse";
  }
  protected:
  explicit MoveToLocationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onos.ransim.model.MoveToLocationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class DeleteUERequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.model.DeleteUERequest) */ {
 public:
  inline DeleteUERequest() : DeleteUERequest(nullptr) {}
  ~DeleteUERequest() override;
  explicit constexpr DeleteUERequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteUERequest(const DeleteUERequest& from);
  DeleteUERequest(DeleteUERequest&& from) noexcept
    : DeleteUERequest() {
    *this = ::std::move(from);
  }

  inline DeleteUERequest& operator=(const DeleteUERequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteUERequest& operator=(DeleteUERequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteUERequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteUERequest* internal_default_instance() {
    return reinterpret_cast<const DeleteUERequest*>(
               &_DeleteUERequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(DeleteUERequest& a, DeleteUERequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteUERequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteUERequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteUERequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteUERequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteUERequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteUERequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteUERequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.DeleteUERequest";
  }
  protected:
  explicit DeleteUERequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImsiFieldNumber = 1,
  };
  // uint32 imsi = 1;
  void clear_imsi();
  uint32_t imsi() const;
  void set_imsi(uint32_t value);
  private:
  uint32_t _internal_imsi() const;
  void _internal_set_imsi(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.ransim.model.DeleteUERequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t imsi_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class DeleteUEResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:onos.ransim.model.DeleteUEResponse) */ {
 public:
  inline DeleteUEResponse() : DeleteUEResponse(nullptr) {}
  explicit constexpr DeleteUEResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteUEResponse(const DeleteUEResponse& from);
  DeleteUEResponse(DeleteUEResponse&& from) noexcept
    : DeleteUEResponse() {
    *this = ::std::move(from);
  }

  inline DeleteUEResponse& operator=(const DeleteUEResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteUEResponse& operator=(DeleteUEResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteUEResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteUEResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteUEResponse*>(
               &_DeleteUEResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(DeleteUEResponse& a, DeleteUEResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteUEResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteUEResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteUEResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteUEResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DeleteUEResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DeleteUEResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.DeleteUEResponse";
  }
  protected:
  explicit DeleteUEResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onos.ransim.model.DeleteUEResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class WatchUEsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.model.WatchUEsRequest) */ {
 public:
  inline WatchUEsRequest() : WatchUEsRequest(nullptr) {}
  ~WatchUEsRequest() override;
  explicit constexpr WatchUEsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WatchUEsRequest(const WatchUEsRequest& from);
  WatchUEsRequest(WatchUEsRequest&& from) noexcept
    : WatchUEsRequest() {
    *this = ::std::move(from);
  }

  inline WatchUEsRequest& operator=(const WatchUEsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchUEsRequest& operator=(WatchUEsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WatchUEsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WatchUEsRequest* internal_default_instance() {
    return reinterpret_cast<const WatchUEsRequest*>(
               &_WatchUEsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(WatchUEsRequest& a, WatchUEsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchUEsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchUEsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WatchUEsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WatchUEsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WatchUEsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WatchUEsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchUEsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.WatchUEsRequest";
  }
  protected:
  explicit WatchUEsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNoReplayFieldNumber = 1,
    kNoSubscribeFieldNumber = 2,
  };
  // bool no_replay = 1;
  void clear_no_replay();
  bool no_replay() const;
  void set_no_replay(bool value);
  private:
  bool _internal_no_replay() const;
  void _internal_set_no_replay(bool value);
  public:

  // bool no_subscribe = 2;
  void clear_no_subscribe();
  bool no_subscribe() const;
  void set_no_subscribe(bool value);
  private:
  bool _internal_no_subscribe() const;
  void _internal_set_no_subscribe(bool value);
  public:

  // @@protoc_insertion_point(class_scope:onos.ransim.model.WatchUEsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool no_replay_;
  bool no_subscribe_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class WatchUEsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.model.WatchUEsResponse) */ {
 public:
  inline WatchUEsResponse() : WatchUEsResponse(nullptr) {}
  ~WatchUEsResponse() override;
  explicit constexpr WatchUEsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WatchUEsResponse(const WatchUEsResponse& from);
  WatchUEsResponse(WatchUEsResponse&& from) noexcept
    : WatchUEsResponse() {
    *this = ::std::move(from);
  }

  inline WatchUEsResponse& operator=(const WatchUEsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchUEsResponse& operator=(WatchUEsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WatchUEsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WatchUEsResponse* internal_default_instance() {
    return reinterpret_cast<const WatchUEsResponse*>(
               &_WatchUEsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(WatchUEsResponse& a, WatchUEsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchUEsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchUEsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WatchUEsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WatchUEsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WatchUEsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WatchUEsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchUEsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.WatchUEsResponse";
  }
  protected:
  explicit WatchUEsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUeFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // .onos.ransim.types.Ue ue = 1;
  bool has_ue() const;
  private:
  bool _internal_has_ue() const;
  public:
  void clear_ue();
  const ::onos::ransim::types::Ue& ue() const;
  PROTOBUF_NODISCARD ::onos::ransim::types::Ue* release_ue();
  ::onos::ransim::types::Ue* mutable_ue();
  void set_allocated_ue(::onos::ransim::types::Ue* ue);
  private:
  const ::onos::ransim::types::Ue& _internal_ue() const;
  ::onos::ransim::types::Ue* _internal_mutable_ue();
  public:
  void unsafe_arena_set_allocated_ue(
      ::onos::ransim::types::Ue* ue);
  ::onos::ransim::types::Ue* unsafe_arena_release_ue();

  // .onos.ransim.model.EventType type = 2;
  void clear_type();
  ::onos::ransim::model::EventType type() const;
  void set_type(::onos::ransim::model::EventType value);
  private:
  ::onos::ransim::model::EventType _internal_type() const;
  void _internal_set_type(::onos::ransim::model::EventType value);
  public:

  // @@protoc_insertion_point(class_scope:onos.ransim.model.WatchUEsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::ransim::types::Ue* ue_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class ListUEsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:onos.ransim.model.ListUEsRequest) */ {
 public:
  inline ListUEsRequest() : ListUEsRequest(nullptr) {}
  explicit constexpr ListUEsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListUEsRequest(const ListUEsRequest& from);
  ListUEsRequest(ListUEsRequest&& from) noexcept
    : ListUEsRequest() {
    *this = ::std::move(from);
  }

  inline ListUEsRequest& operator=(const ListUEsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListUEsRequest& operator=(ListUEsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListUEsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListUEsRequest* internal_default_instance() {
    return reinterpret_cast<const ListUEsRequest*>(
               &_ListUEsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(ListUEsRequest& a, ListUEsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListUEsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListUEsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListUEsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListUEsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ListUEsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ListUEsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.ListUEsRequest";
  }
  protected:
  explicit ListUEsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onos.ransim.model.ListUEsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class ListUEsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.model.ListUEsResponse) */ {
 public:
  inline ListUEsResponse() : ListUEsResponse(nullptr) {}
  ~ListUEsResponse() override;
  explicit constexpr ListUEsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListUEsResponse(const ListUEsResponse& from);
  ListUEsResponse(ListUEsResponse&& from) noexcept
    : ListUEsResponse() {
    *this = ::std::move(from);
  }

  inline ListUEsResponse& operator=(const ListUEsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListUEsResponse& operator=(ListUEsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListUEsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListUEsResponse* internal_default_instance() {
    return reinterpret_cast<const ListUEsResponse*>(
               &_ListUEsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(ListUEsResponse& a, ListUEsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListUEsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListUEsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListUEsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListUEsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListUEsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListUEsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListUEsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.ListUEsResponse";
  }
  protected:
  explicit ListUEsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUeFieldNumber = 1,
  };
  // .onos.ransim.types.Ue ue = 1;
  bool has_ue() const;
  private:
  bool _internal_has_ue() const;
  public:
  void clear_ue();
  const ::onos::ransim::types::Ue& ue() const;
  PROTOBUF_NODISCARD ::onos::ransim::types::Ue* release_ue();
  ::onos::ransim::types::Ue* mutable_ue();
  void set_allocated_ue(::onos::ransim::types::Ue* ue);
  private:
  const ::onos::ransim::types::Ue& _internal_ue() const;
  ::onos::ransim::types::Ue* _internal_mutable_ue();
  public:
  void unsafe_arena_set_allocated_ue(
      ::onos::ransim::types::Ue* ue);
  ::onos::ransim::types::Ue* unsafe_arena_release_ue();

  // @@protoc_insertion_point(class_scope:onos.ransim.model.ListUEsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::ransim::types::Ue* ue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class GetUECountRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:onos.ransim.model.GetUECountRequest) */ {
 public:
  inline GetUECountRequest() : GetUECountRequest(nullptr) {}
  explicit constexpr GetUECountRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUECountRequest(const GetUECountRequest& from);
  GetUECountRequest(GetUECountRequest&& from) noexcept
    : GetUECountRequest() {
    *this = ::std::move(from);
  }

  inline GetUECountRequest& operator=(const GetUECountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUECountRequest& operator=(GetUECountRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUECountRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUECountRequest* internal_default_instance() {
    return reinterpret_cast<const GetUECountRequest*>(
               &_GetUECountRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(GetUECountRequest& a, GetUECountRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUECountRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUECountRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetUECountRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetUECountRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetUECountRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetUECountRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.GetUECountRequest";
  }
  protected:
  explicit GetUECountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onos.ransim.model.GetUECountRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class GetUECountResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.model.GetUECountResponse) */ {
 public:
  inline GetUECountResponse() : GetUECountResponse(nullptr) {}
  ~GetUECountResponse() override;
  explicit constexpr GetUECountResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUECountResponse(const GetUECountResponse& from);
  GetUECountResponse(GetUECountResponse&& from) noexcept
    : GetUECountResponse() {
    *this = ::std::move(from);
  }

  inline GetUECountResponse& operator=(const GetUECountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUECountResponse& operator=(GetUECountResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUECountResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUECountResponse* internal_default_instance() {
    return reinterpret_cast<const GetUECountResponse*>(
               &_GetUECountResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(GetUECountResponse& a, GetUECountResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUECountResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUECountResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetUECountResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetUECountResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetUECountResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetUECountResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUECountResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.GetUECountResponse";
  }
  protected:
  explicit GetUECountResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountFieldNumber = 1,
  };
  // uint32 count = 1;
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.ransim.model.GetUECountResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class SetUECountRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.ransim.model.SetUECountRequest) */ {
 public:
  inline SetUECountRequest() : SetUECountRequest(nullptr) {}
  ~SetUECountRequest() override;
  explicit constexpr SetUECountRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetUECountRequest(const SetUECountRequest& from);
  SetUECountRequest(SetUECountRequest&& from) noexcept
    : SetUECountRequest() {
    *this = ::std::move(from);
  }

  inline SetUECountRequest& operator=(const SetUECountRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetUECountRequest& operator=(SetUECountRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetUECountRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetUECountRequest* internal_default_instance() {
    return reinterpret_cast<const SetUECountRequest*>(
               &_SetUECountRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(SetUECountRequest& a, SetUECountRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetUECountRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetUECountRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetUECountRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetUECountRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const SetUECountRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const SetUECountRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetUECountRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.SetUECountRequest";
  }
  protected:
  explicit SetUECountRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountFieldNumber = 1,
  };
  // uint32 count = 1;
  void clear_count();
  uint32_t count() const;
  void set_count(uint32_t value);
  private:
  uint32_t _internal_count() const;
  void _internal_set_count(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.ransim.model.SetUECountRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// -------------------------------------------------------------------

class SetUECountResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:onos.ransim.model.SetUECountResponse) */ {
 public:
  inline SetUECountResponse() : SetUECountResponse(nullptr) {}
  explicit constexpr SetUECountResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SetUECountResponse(const SetUECountResponse& from);
  SetUECountResponse(SetUECountResponse&& from) noexcept
    : SetUECountResponse() {
    *this = ::std::move(from);
  }

  inline SetUECountResponse& operator=(const SetUECountResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetUECountResponse& operator=(SetUECountResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SetUECountResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SetUECountResponse* internal_default_instance() {
    return reinterpret_cast<const SetUECountResponse*>(
               &_SetUECountResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(SetUECountResponse& a, SetUECountResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetUECountResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SetUECountResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SetUECountResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<SetUECountResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const SetUECountResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const SetUECountResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.ransim.model.SetUECountResponse";
  }
  protected:
  explicit SetUECountResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onos.ransim.model.SetUECountResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fransim_2fmodel_2fmodel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DataSet

// string type = 1;
inline void DataSet::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& DataSet::type() const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.DataSet.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataSet::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.ransim.model.DataSet.type)
}
inline std::string* DataSet::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:onos.ransim.model.DataSet.type)
  return _s;
}
inline const std::string& DataSet::_internal_type() const {
  return type_.Get();
}
inline void DataSet::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DataSet::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DataSet::release_type() {
  // @@protoc_insertion_point(field_release:onos.ransim.model.DataSet.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DataSet::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.ransim.model.DataSet.type)
}

// bytes data = 2;
inline void DataSet::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& DataSet::data() const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.DataSet.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DataSet::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.ransim.model.DataSet.data)
}
inline std::string* DataSet::mutable_data() {
  std::string* _s = _internal_mutable_data();
  // @@protoc_insertion_point(field_mutable:onos.ransim.model.DataSet.data)
  return _s;
}
inline const std::string& DataSet::_internal_data() const {
  return data_.Get();
}
inline void DataSet::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DataSet::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DataSet::release_data() {
  // @@protoc_insertion_point(field_release:onos.ransim.model.DataSet.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DataSet::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (data_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    data_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.ransim.model.DataSet.data)
}

// -------------------------------------------------------------------

// LoadRequest

// repeated .onos.ransim.model.DataSet dataSet = 1;
inline int LoadRequest::_internal_dataset_size() const {
  return dataset_.size();
}
inline int LoadRequest::dataset_size() const {
  return _internal_dataset_size();
}
inline void LoadRequest::clear_dataset() {
  dataset_.Clear();
}
inline ::onos::ransim::model::DataSet* LoadRequest::mutable_dataset(int index) {
  // @@protoc_insertion_point(field_mutable:onos.ransim.model.LoadRequest.dataSet)
  return dataset_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::ransim::model::DataSet >*
LoadRequest::mutable_dataset() {
  // @@protoc_insertion_point(field_mutable_list:onos.ransim.model.LoadRequest.dataSet)
  return &dataset_;
}
inline const ::onos::ransim::model::DataSet& LoadRequest::_internal_dataset(int index) const {
  return dataset_.Get(index);
}
inline const ::onos::ransim::model::DataSet& LoadRequest::dataset(int index) const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.LoadRequest.dataSet)
  return _internal_dataset(index);
}
inline ::onos::ransim::model::DataSet* LoadRequest::_internal_add_dataset() {
  return dataset_.Add();
}
inline ::onos::ransim::model::DataSet* LoadRequest::add_dataset() {
  ::onos::ransim::model::DataSet* _add = _internal_add_dataset();
  // @@protoc_insertion_point(field_add:onos.ransim.model.LoadRequest.dataSet)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::ransim::model::DataSet >&
LoadRequest::dataset() const {
  // @@protoc_insertion_point(field_list:onos.ransim.model.LoadRequest.dataSet)
  return dataset_;
}

// bool resume = 2;
inline void LoadRequest::clear_resume() {
  resume_ = false;
}
inline bool LoadRequest::_internal_resume() const {
  return resume_;
}
inline bool LoadRequest::resume() const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.LoadRequest.resume)
  return _internal_resume();
}
inline void LoadRequest::_internal_set_resume(bool value) {
  
  resume_ = value;
}
inline void LoadRequest::set_resume(bool value) {
  _internal_set_resume(value);
  // @@protoc_insertion_point(field_set:onos.ransim.model.LoadRequest.resume)
}

// -------------------------------------------------------------------

// LoadResponse

// -------------------------------------------------------------------

// ClearRequest

// bool resume = 1;
inline void ClearRequest::clear_resume() {
  resume_ = false;
}
inline bool ClearRequest::_internal_resume() const {
  return resume_;
}
inline bool ClearRequest::resume() const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.ClearRequest.resume)
  return _internal_resume();
}
inline void ClearRequest::_internal_set_resume(bool value) {
  
  resume_ = value;
}
inline void ClearRequest::set_resume(bool value) {
  _internal_set_resume(value);
  // @@protoc_insertion_point(field_set:onos.ransim.model.ClearRequest.resume)
}

// -------------------------------------------------------------------

// ClearResponse

// -------------------------------------------------------------------

// PlmnIDRequest

// -------------------------------------------------------------------

// PlmnIDResponse

// uint32 plmnid = 1 [(.gogoproto.customname) = "PlmnID", (.gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/ransim/types.PlmnID"];
inline void PlmnIDResponse::clear_plmnid() {
  plmnid_ = 0u;
}
inline uint32_t PlmnIDResponse::_internal_plmnid() const {
  return plmnid_;
}
inline uint32_t PlmnIDResponse::plmnid() const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.PlmnIDResponse.plmnid)
  return _internal_plmnid();
}
inline void PlmnIDResponse::_internal_set_plmnid(uint32_t value) {
  
  plmnid_ = value;
}
inline void PlmnIDResponse::set_plmnid(uint32_t value) {
  _internal_set_plmnid(value);
  // @@protoc_insertion_point(field_set:onos.ransim.model.PlmnIDResponse.plmnid)
}

// -------------------------------------------------------------------

// CreateNodeRequest

// .onos.ransim.types.Node node = 1;
inline bool CreateNodeRequest::_internal_has_node() const {
  return this != internal_default_instance() && node_ != nullptr;
}
inline bool CreateNodeRequest::has_node() const {
  return _internal_has_node();
}
inline const ::onos::ransim::types::Node& CreateNodeRequest::_internal_node() const {
  const ::onos::ransim::types::Node* p = node_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::ransim::types::Node&>(
      ::onos::ransim::types::_Node_default_instance_);
}
inline const ::onos::ransim::types::Node& CreateNodeRequest::node() const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.CreateNodeRequest.node)
  return _internal_node();
}
inline void CreateNodeRequest::unsafe_arena_set_allocated_node(
    ::onos::ransim::types::Node* node) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_);
  }
  node_ = node;
  if (node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.ransim.model.CreateNodeRequest.node)
}
inline ::onos::ransim::types::Node* CreateNodeRequest::release_node() {
  
  ::onos::ransim::types::Node* temp = node_;
  node_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::ransim::types::Node* CreateNodeRequest::unsafe_arena_release_node() {
  // @@protoc_insertion_point(field_release:onos.ransim.model.CreateNodeRequest.node)
  
  ::onos::ransim::types::Node* temp = node_;
  node_ = nullptr;
  return temp;
}
inline ::onos::ransim::types::Node* CreateNodeRequest::_internal_mutable_node() {
  
  if (node_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::ransim::types::Node>(GetArenaForAllocation());
    node_ = p;
  }
  return node_;
}
inline ::onos::ransim::types::Node* CreateNodeRequest::mutable_node() {
  ::onos::ransim::types::Node* _msg = _internal_mutable_node();
  // @@protoc_insertion_point(field_mutable:onos.ransim.model.CreateNodeRequest.node)
  return _msg;
}
inline void CreateNodeRequest::set_allocated_node(::onos::ransim::types::Node* node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_);
  }
  if (node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node));
    if (message_arena != submessage_arena) {
      node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    
  } else {
    
  }
  node_ = node;
  // @@protoc_insertion_point(field_set_allocated:onos.ransim.model.CreateNodeRequest.node)
}

// -------------------------------------------------------------------

// CreateNodeResponse

// -------------------------------------------------------------------

// GetNodeRequest

// uint64 enbid = 1 [(.gogoproto.customname) = "GnbID", (.gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/ransim/types.GnbID"];
inline void GetNodeRequest::clear_enbid() {
  enbid_ = uint64_t{0u};
}
inline uint64_t GetNodeRequest::_internal_enbid() const {
  return enbid_;
}
inline uint64_t GetNodeRequest::enbid() const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.GetNodeRequest.enbid)
  return _internal_enbid();
}
inline void GetNodeRequest::_internal_set_enbid(uint64_t value) {
  
  enbid_ = value;
}
inline void GetNodeRequest::set_enbid(uint64_t value) {
  _internal_set_enbid(value);
  // @@protoc_insertion_point(field_set:onos.ransim.model.GetNodeRequest.enbid)
}

// -------------------------------------------------------------------

// GetNodeResponse

// .onos.ransim.types.Node node = 1;
inline bool GetNodeResponse::_internal_has_node() const {
  return this != internal_default_instance() && node_ != nullptr;
}
inline bool GetNodeResponse::has_node() const {
  return _internal_has_node();
}
inline const ::onos::ransim::types::Node& GetNodeResponse::_internal_node() const {
  const ::onos::ransim::types::Node* p = node_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::ransim::types::Node&>(
      ::onos::ransim::types::_Node_default_instance_);
}
inline const ::onos::ransim::types::Node& GetNodeResponse::node() const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.GetNodeResponse.node)
  return _internal_node();
}
inline void GetNodeResponse::unsafe_arena_set_allocated_node(
    ::onos::ransim::types::Node* node) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_);
  }
  node_ = node;
  if (node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.ransim.model.GetNodeResponse.node)
}
inline ::onos::ransim::types::Node* GetNodeResponse::release_node() {
  
  ::onos::ransim::types::Node* temp = node_;
  node_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::ransim::types::Node* GetNodeResponse::unsafe_arena_release_node() {
  // @@protoc_insertion_point(field_release:onos.ransim.model.GetNodeResponse.node)
  
  ::onos::ransim::types::Node* temp = node_;
  node_ = nullptr;
  return temp;
}
inline ::onos::ransim::types::Node* GetNodeResponse::_internal_mutable_node() {
  
  if (node_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::ransim::types::Node>(GetArenaForAllocation());
    node_ = p;
  }
  return node_;
}
inline ::onos::ransim::types::Node* GetNodeResponse::mutable_node() {
  ::onos::ransim::types::Node* _msg = _internal_mutable_node();
  // @@protoc_insertion_point(field_mutable:onos.ransim.model.GetNodeResponse.node)
  return _msg;
}
inline void GetNodeResponse::set_allocated_node(::onos::ransim::types::Node* node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_);
  }
  if (node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node));
    if (message_arena != submessage_arena) {
      node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    
  } else {
    
  }
  node_ = node;
  // @@protoc_insertion_point(field_set_allocated:onos.ransim.model.GetNodeResponse.node)
}

// -------------------------------------------------------------------

// UpdateNodeRequest

// .onos.ransim.types.Node node = 1;
inline bool UpdateNodeRequest::_internal_has_node() const {
  return this != internal_default_instance() && node_ != nullptr;
}
inline bool UpdateNodeRequest::has_node() const {
  return _internal_has_node();
}
inline const ::onos::ransim::types::Node& UpdateNodeRequest::_internal_node() const {
  const ::onos::ransim::types::Node* p = node_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::ransim::types::Node&>(
      ::onos::ransim::types::_Node_default_instance_);
}
inline const ::onos::ransim::types::Node& UpdateNodeRequest::node() const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.UpdateNodeRequest.node)
  return _internal_node();
}
inline void UpdateNodeRequest::unsafe_arena_set_allocated_node(
    ::onos::ransim::types::Node* node) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_);
  }
  node_ = node;
  if (node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.ransim.model.UpdateNodeRequest.node)
}
inline ::onos::ransim::types::Node* UpdateNodeRequest::release_node() {
  
  ::onos::ransim::types::Node* temp = node_;
  node_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::ransim::types::Node* UpdateNodeRequest::unsafe_arena_release_node() {
  // @@protoc_insertion_point(field_release:onos.ransim.model.UpdateNodeRequest.node)
  
  ::onos::ransim::types::Node* temp = node_;
  node_ = nullptr;
  return temp;
}
inline ::onos::ransim::types::Node* UpdateNodeRequest::_internal_mutable_node() {
  
  if (node_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::ransim::types::Node>(GetArenaForAllocation());
    node_ = p;
  }
  return node_;
}
inline ::onos::ransim::types::Node* UpdateNodeRequest::mutable_node() {
  ::onos::ransim::types::Node* _msg = _internal_mutable_node();
  // @@protoc_insertion_point(field_mutable:onos.ransim.model.UpdateNodeRequest.node)
  return _msg;
}
inline void UpdateNodeRequest::set_allocated_node(::onos::ransim::types::Node* node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_);
  }
  if (node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node));
    if (message_arena != submessage_arena) {
      node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    
  } else {
    
  }
  node_ = node;
  // @@protoc_insertion_point(field_set_allocated:onos.ransim.model.UpdateNodeRequest.node)
}

// -------------------------------------------------------------------

// UpdateNodeResponse

// -------------------------------------------------------------------

// DeleteNodeRequest

// uint64 enbid = 1 [(.gogoproto.customname) = "GnbID", (.gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/ransim/types.GnbID"];
inline void DeleteNodeRequest::clear_enbid() {
  enbid_ = uint64_t{0u};
}
inline uint64_t DeleteNodeRequest::_internal_enbid() const {
  return enbid_;
}
inline uint64_t DeleteNodeRequest::enbid() const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.DeleteNodeRequest.enbid)
  return _internal_enbid();
}
inline void DeleteNodeRequest::_internal_set_enbid(uint64_t value) {
  
  enbid_ = value;
}
inline void DeleteNodeRequest::set_enbid(uint64_t value) {
  _internal_set_enbid(value);
  // @@protoc_insertion_point(field_set:onos.ransim.model.DeleteNodeRequest.enbid)
}

// -------------------------------------------------------------------

// DeleteNodeResponse

// -------------------------------------------------------------------

// ListNodesRequest

// -------------------------------------------------------------------

// ListNodesResponse

// .onos.ransim.types.Node node = 1;
inline bool ListNodesResponse::_internal_has_node() const {
  return this != internal_default_instance() && node_ != nullptr;
}
inline bool ListNodesResponse::has_node() const {
  return _internal_has_node();
}
inline const ::onos::ransim::types::Node& ListNodesResponse::_internal_node() const {
  const ::onos::ransim::types::Node* p = node_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::ransim::types::Node&>(
      ::onos::ransim::types::_Node_default_instance_);
}
inline const ::onos::ransim::types::Node& ListNodesResponse::node() const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.ListNodesResponse.node)
  return _internal_node();
}
inline void ListNodesResponse::unsafe_arena_set_allocated_node(
    ::onos::ransim::types::Node* node) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_);
  }
  node_ = node;
  if (node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.ransim.model.ListNodesResponse.node)
}
inline ::onos::ransim::types::Node* ListNodesResponse::release_node() {
  
  ::onos::ransim::types::Node* temp = node_;
  node_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::ransim::types::Node* ListNodesResponse::unsafe_arena_release_node() {
  // @@protoc_insertion_point(field_release:onos.ransim.model.ListNodesResponse.node)
  
  ::onos::ransim::types::Node* temp = node_;
  node_ = nullptr;
  return temp;
}
inline ::onos::ransim::types::Node* ListNodesResponse::_internal_mutable_node() {
  
  if (node_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::ransim::types::Node>(GetArenaForAllocation());
    node_ = p;
  }
  return node_;
}
inline ::onos::ransim::types::Node* ListNodesResponse::mutable_node() {
  ::onos::ransim::types::Node* _msg = _internal_mutable_node();
  // @@protoc_insertion_point(field_mutable:onos.ransim.model.ListNodesResponse.node)
  return _msg;
}
inline void ListNodesResponse::set_allocated_node(::onos::ransim::types::Node* node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_);
  }
  if (node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node));
    if (message_arena != submessage_arena) {
      node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    
  } else {
    
  }
  node_ = node;
  // @@protoc_insertion_point(field_set_allocated:onos.ransim.model.ListNodesResponse.node)
}

// -------------------------------------------------------------------

// WatchNodesRequest

// bool no_replay = 1;
inline void WatchNodesRequest::clear_no_replay() {
  no_replay_ = false;
}
inline bool WatchNodesRequest::_internal_no_replay() const {
  return no_replay_;
}
inline bool WatchNodesRequest::no_replay() const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.WatchNodesRequest.no_replay)
  return _internal_no_replay();
}
inline void WatchNodesRequest::_internal_set_no_replay(bool value) {
  
  no_replay_ = value;
}
inline void WatchNodesRequest::set_no_replay(bool value) {
  _internal_set_no_replay(value);
  // @@protoc_insertion_point(field_set:onos.ransim.model.WatchNodesRequest.no_replay)
}

// bool no_subscribe = 2;
inline void WatchNodesRequest::clear_no_subscribe() {
  no_subscribe_ = false;
}
inline bool WatchNodesRequest::_internal_no_subscribe() const {
  return no_subscribe_;
}
inline bool WatchNodesRequest::no_subscribe() const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.WatchNodesRequest.no_subscribe)
  return _internal_no_subscribe();
}
inline void WatchNodesRequest::_internal_set_no_subscribe(bool value) {
  
  no_subscribe_ = value;
}
inline void WatchNodesRequest::set_no_subscribe(bool value) {
  _internal_set_no_subscribe(value);
  // @@protoc_insertion_point(field_set:onos.ransim.model.WatchNodesRequest.no_subscribe)
}

// -------------------------------------------------------------------

// WatchNodesResponse

// .onos.ransim.types.Node node = 1;
inline bool WatchNodesResponse::_internal_has_node() const {
  return this != internal_default_instance() && node_ != nullptr;
}
inline bool WatchNodesResponse::has_node() const {
  return _internal_has_node();
}
inline const ::onos::ransim::types::Node& WatchNodesResponse::_internal_node() const {
  const ::onos::ransim::types::Node* p = node_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::ransim::types::Node&>(
      ::onos::ransim::types::_Node_default_instance_);
}
inline const ::onos::ransim::types::Node& WatchNodesResponse::node() const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.WatchNodesResponse.node)
  return _internal_node();
}
inline void WatchNodesResponse::unsafe_arena_set_allocated_node(
    ::onos::ransim::types::Node* node) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_);
  }
  node_ = node;
  if (node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.ransim.model.WatchNodesResponse.node)
}
inline ::onos::ransim::types::Node* WatchNodesResponse::release_node() {
  
  ::onos::ransim::types::Node* temp = node_;
  node_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::ransim::types::Node* WatchNodesResponse::unsafe_arena_release_node() {
  // @@protoc_insertion_point(field_release:onos.ransim.model.WatchNodesResponse.node)
  
  ::onos::ransim::types::Node* temp = node_;
  node_ = nullptr;
  return temp;
}
inline ::onos::ransim::types::Node* WatchNodesResponse::_internal_mutable_node() {
  
  if (node_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::ransim::types::Node>(GetArenaForAllocation());
    node_ = p;
  }
  return node_;
}
inline ::onos::ransim::types::Node* WatchNodesResponse::mutable_node() {
  ::onos::ransim::types::Node* _msg = _internal_mutable_node();
  // @@protoc_insertion_point(field_mutable:onos.ransim.model.WatchNodesResponse.node)
  return _msg;
}
inline void WatchNodesResponse::set_allocated_node(::onos::ransim::types::Node* node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_);
  }
  if (node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node));
    if (message_arena != submessage_arena) {
      node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    
  } else {
    
  }
  node_ = node;
  // @@protoc_insertion_point(field_set_allocated:onos.ransim.model.WatchNodesResponse.node)
}

// .onos.ransim.model.EventType type = 2;
inline void WatchNodesResponse::clear_type() {
  type_ = 0;
}
inline ::onos::ransim::model::EventType WatchNodesResponse::_internal_type() const {
  return static_cast< ::onos::ransim::model::EventType >(type_);
}
inline ::onos::ransim::model::EventType WatchNodesResponse::type() const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.WatchNodesResponse.type)
  return _internal_type();
}
inline void WatchNodesResponse::_internal_set_type(::onos::ransim::model::EventType value) {
  
  type_ = value;
}
inline void WatchNodesResponse::set_type(::onos::ransim::model::EventType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:onos.ransim.model.WatchNodesResponse.type)
}

// -------------------------------------------------------------------

// AgentControlRequest

// uint64 enbid = 1 [(.gogoproto.customname) = "GnbID", (.gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/ransim/types.GnbID"];
inline void AgentControlRequest::clear_enbid() {
  enbid_ = uint64_t{0u};
}
inline uint64_t AgentControlRequest::_internal_enbid() const {
  return enbid_;
}
inline uint64_t AgentControlRequest::enbid() const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.AgentControlRequest.enbid)
  return _internal_enbid();
}
inline void AgentControlRequest::_internal_set_enbid(uint64_t value) {
  
  enbid_ = value;
}
inline void AgentControlRequest::set_enbid(uint64_t value) {
  _internal_set_enbid(value);
  // @@protoc_insertion_point(field_set:onos.ransim.model.AgentControlRequest.enbid)
}

// string command = 2;
inline void AgentControlRequest::clear_command() {
  command_.ClearToEmpty();
}
inline const std::string& AgentControlRequest::command() const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.AgentControlRequest.command)
  return _internal_command();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AgentControlRequest::set_command(ArgT0&& arg0, ArgT... args) {
 
 command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.ransim.model.AgentControlRequest.command)
}
inline std::string* AgentControlRequest::mutable_command() {
  std::string* _s = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:onos.ransim.model.AgentControlRequest.command)
  return _s;
}
inline const std::string& AgentControlRequest::_internal_command() const {
  return command_.Get();
}
inline void AgentControlRequest::_internal_set_command(const std::string& value) {
  
  command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AgentControlRequest::_internal_mutable_command() {
  
  return command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AgentControlRequest::release_command() {
  // @@protoc_insertion_point(field_release:onos.ransim.model.AgentControlRequest.command)
  return command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AgentControlRequest::set_allocated_command(std::string* command) {
  if (command != nullptr) {
    
  } else {
    
  }
  command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), command,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (command_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    command_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.ransim.model.AgentControlRequest.command)
}

// repeated string args = 3;
inline int AgentControlRequest::_internal_args_size() const {
  return args_.size();
}
inline int AgentControlRequest::args_size() const {
  return _internal_args_size();
}
inline void AgentControlRequest::clear_args() {
  args_.Clear();
}
inline std::string* AgentControlRequest::add_args() {
  std::string* _s = _internal_add_args();
  // @@protoc_insertion_point(field_add_mutable:onos.ransim.model.AgentControlRequest.args)
  return _s;
}
inline const std::string& AgentControlRequest::_internal_args(int index) const {
  return args_.Get(index);
}
inline const std::string& AgentControlRequest::args(int index) const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.AgentControlRequest.args)
  return _internal_args(index);
}
inline std::string* AgentControlRequest::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:onos.ransim.model.AgentControlRequest.args)
  return args_.Mutable(index);
}
inline void AgentControlRequest::set_args(int index, const std::string& value) {
  args_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:onos.ransim.model.AgentControlRequest.args)
}
inline void AgentControlRequest::set_args(int index, std::string&& value) {
  args_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:onos.ransim.model.AgentControlRequest.args)
}
inline void AgentControlRequest::set_args(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  args_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:onos.ransim.model.AgentControlRequest.args)
}
inline void AgentControlRequest::set_args(int index, const char* value, size_t size) {
  args_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onos.ransim.model.AgentControlRequest.args)
}
inline std::string* AgentControlRequest::_internal_add_args() {
  return args_.Add();
}
inline void AgentControlRequest::add_args(const std::string& value) {
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:onos.ransim.model.AgentControlRequest.args)
}
inline void AgentControlRequest::add_args(std::string&& value) {
  args_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:onos.ransim.model.AgentControlRequest.args)
}
inline void AgentControlRequest::add_args(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:onos.ransim.model.AgentControlRequest.args)
}
inline void AgentControlRequest::add_args(const char* value, size_t size) {
  args_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:onos.ransim.model.AgentControlRequest.args)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AgentControlRequest::args() const {
  // @@protoc_insertion_point(field_list:onos.ransim.model.AgentControlRequest.args)
  return args_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AgentControlRequest::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:onos.ransim.model.AgentControlRequest.args)
  return &args_;
}

// -------------------------------------------------------------------

// AgentControlResponse

// .onos.ransim.types.Node node = 1;
inline bool AgentControlResponse::_internal_has_node() const {
  return this != internal_default_instance() && node_ != nullptr;
}
inline bool AgentControlResponse::has_node() const {
  return _internal_has_node();
}
inline const ::onos::ransim::types::Node& AgentControlResponse::_internal_node() const {
  const ::onos::ransim::types::Node* p = node_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::ransim::types::Node&>(
      ::onos::ransim::types::_Node_default_instance_);
}
inline const ::onos::ransim::types::Node& AgentControlResponse::node() const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.AgentControlResponse.node)
  return _internal_node();
}
inline void AgentControlResponse::unsafe_arena_set_allocated_node(
    ::onos::ransim::types::Node* node) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_);
  }
  node_ = node;
  if (node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.ransim.model.AgentControlResponse.node)
}
inline ::onos::ransim::types::Node* AgentControlResponse::release_node() {
  
  ::onos::ransim::types::Node* temp = node_;
  node_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::ransim::types::Node* AgentControlResponse::unsafe_arena_release_node() {
  // @@protoc_insertion_point(field_release:onos.ransim.model.AgentControlResponse.node)
  
  ::onos::ransim::types::Node* temp = node_;
  node_ = nullptr;
  return temp;
}
inline ::onos::ransim::types::Node* AgentControlResponse::_internal_mutable_node() {
  
  if (node_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::ransim::types::Node>(GetArenaForAllocation());
    node_ = p;
  }
  return node_;
}
inline ::onos::ransim::types::Node* AgentControlResponse::mutable_node() {
  ::onos::ransim::types::Node* _msg = _internal_mutable_node();
  // @@protoc_insertion_point(field_mutable:onos.ransim.model.AgentControlResponse.node)
  return _msg;
}
inline void AgentControlResponse::set_allocated_node(::onos::ransim::types::Node* node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_);
  }
  if (node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node));
    if (message_arena != submessage_arena) {
      node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    
  } else {
    
  }
  node_ = node;
  // @@protoc_insertion_point(field_set_allocated:onos.ransim.model.AgentControlResponse.node)
}

// -------------------------------------------------------------------

// CreateCellRequest

// .onos.ransim.types.Cell cell = 1;
inline bool CreateCellRequest::_internal_has_cell() const {
  return this != internal_default_instance() && cell_ != nullptr;
}
inline bool CreateCellRequest::has_cell() const {
  return _internal_has_cell();
}
inline const ::onos::ransim::types::Cell& CreateCellRequest::_internal_cell() const {
  const ::onos::ransim::types::Cell* p = cell_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::ransim::types::Cell&>(
      ::onos::ransim::types::_Cell_default_instance_);
}
inline const ::onos::ransim::types::Cell& CreateCellRequest::cell() const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.CreateCellRequest.cell)
  return _internal_cell();
}
inline void CreateCellRequest::unsafe_arena_set_allocated_cell(
    ::onos::ransim::types::Cell* cell) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_);
  }
  cell_ = cell;
  if (cell) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.ransim.model.CreateCellRequest.cell)
}
inline ::onos::ransim::types::Cell* CreateCellRequest::release_cell() {
  
  ::onos::ransim::types::Cell* temp = cell_;
  cell_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::ransim::types::Cell* CreateCellRequest::unsafe_arena_release_cell() {
  // @@protoc_insertion_point(field_release:onos.ransim.model.CreateCellRequest.cell)
  
  ::onos::ransim::types::Cell* temp = cell_;
  cell_ = nullptr;
  return temp;
}
inline ::onos::ransim::types::Cell* CreateCellRequest::_internal_mutable_cell() {
  
  if (cell_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::ransim::types::Cell>(GetArenaForAllocation());
    cell_ = p;
  }
  return cell_;
}
inline ::onos::ransim::types::Cell* CreateCellRequest::mutable_cell() {
  ::onos::ransim::types::Cell* _msg = _internal_mutable_cell();
  // @@protoc_insertion_point(field_mutable:onos.ransim.model.CreateCellRequest.cell)
  return _msg;
}
inline void CreateCellRequest::set_allocated_cell(::onos::ransim::types::Cell* cell) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_);
  }
  if (cell) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell));
    if (message_arena != submessage_arena) {
      cell = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell, submessage_arena);
    }
    
  } else {
    
  }
  cell_ = cell;
  // @@protoc_insertion_point(field_set_allocated:onos.ransim.model.CreateCellRequest.cell)
}

// -------------------------------------------------------------------

// CreateCellResponse

// -------------------------------------------------------------------

// GetCellRequest

// uint64 ecgi = 1 [(.gogoproto.customname) = "NCGI", (.gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/ransim/types.NCGI"];
inline void GetCellRequest::clear_ecgi() {
  ecgi_ = uint64_t{0u};
}
inline uint64_t GetCellRequest::_internal_ecgi() const {
  return ecgi_;
}
inline uint64_t GetCellRequest::ecgi() const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.GetCellRequest.ecgi)
  return _internal_ecgi();
}
inline void GetCellRequest::_internal_set_ecgi(uint64_t value) {
  
  ecgi_ = value;
}
inline void GetCellRequest::set_ecgi(uint64_t value) {
  _internal_set_ecgi(value);
  // @@protoc_insertion_point(field_set:onos.ransim.model.GetCellRequest.ecgi)
}

// -------------------------------------------------------------------

// GetCellResponse

// .onos.ransim.types.Cell cell = 1;
inline bool GetCellResponse::_internal_has_cell() const {
  return this != internal_default_instance() && cell_ != nullptr;
}
inline bool GetCellResponse::has_cell() const {
  return _internal_has_cell();
}
inline const ::onos::ransim::types::Cell& GetCellResponse::_internal_cell() const {
  const ::onos::ransim::types::Cell* p = cell_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::ransim::types::Cell&>(
      ::onos::ransim::types::_Cell_default_instance_);
}
inline const ::onos::ransim::types::Cell& GetCellResponse::cell() const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.GetCellResponse.cell)
  return _internal_cell();
}
inline void GetCellResponse::unsafe_arena_set_allocated_cell(
    ::onos::ransim::types::Cell* cell) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_);
  }
  cell_ = cell;
  if (cell) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.ransim.model.GetCellResponse.cell)
}
inline ::onos::ransim::types::Cell* GetCellResponse::release_cell() {
  
  ::onos::ransim::types::Cell* temp = cell_;
  cell_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::ransim::types::Cell* GetCellResponse::unsafe_arena_release_cell() {
  // @@protoc_insertion_point(field_release:onos.ransim.model.GetCellResponse.cell)
  
  ::onos::ransim::types::Cell* temp = cell_;
  cell_ = nullptr;
  return temp;
}
inline ::onos::ransim::types::Cell* GetCellResponse::_internal_mutable_cell() {
  
  if (cell_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::ransim::types::Cell>(GetArenaForAllocation());
    cell_ = p;
  }
  return cell_;
}
inline ::onos::ransim::types::Cell* GetCellResponse::mutable_cell() {
  ::onos::ransim::types::Cell* _msg = _internal_mutable_cell();
  // @@protoc_insertion_point(field_mutable:onos.ransim.model.GetCellResponse.cell)
  return _msg;
}
inline void GetCellResponse::set_allocated_cell(::onos::ransim::types::Cell* cell) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_);
  }
  if (cell) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell));
    if (message_arena != submessage_arena) {
      cell = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell, submessage_arena);
    }
    
  } else {
    
  }
  cell_ = cell;
  // @@protoc_insertion_point(field_set_allocated:onos.ransim.model.GetCellResponse.cell)
}

// -------------------------------------------------------------------

// UpdateCellRequest

// .onos.ransim.types.Cell cell = 1;
inline bool UpdateCellRequest::_internal_has_cell() const {
  return this != internal_default_instance() && cell_ != nullptr;
}
inline bool UpdateCellRequest::has_cell() const {
  return _internal_has_cell();
}
inline const ::onos::ransim::types::Cell& UpdateCellRequest::_internal_cell() const {
  const ::onos::ransim::types::Cell* p = cell_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::ransim::types::Cell&>(
      ::onos::ransim::types::_Cell_default_instance_);
}
inline const ::onos::ransim::types::Cell& UpdateCellRequest::cell() const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.UpdateCellRequest.cell)
  return _internal_cell();
}
inline void UpdateCellRequest::unsafe_arena_set_allocated_cell(
    ::onos::ransim::types::Cell* cell) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_);
  }
  cell_ = cell;
  if (cell) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.ransim.model.UpdateCellRequest.cell)
}
inline ::onos::ransim::types::Cell* UpdateCellRequest::release_cell() {
  
  ::onos::ransim::types::Cell* temp = cell_;
  cell_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::ransim::types::Cell* UpdateCellRequest::unsafe_arena_release_cell() {
  // @@protoc_insertion_point(field_release:onos.ransim.model.UpdateCellRequest.cell)
  
  ::onos::ransim::types::Cell* temp = cell_;
  cell_ = nullptr;
  return temp;
}
inline ::onos::ransim::types::Cell* UpdateCellRequest::_internal_mutable_cell() {
  
  if (cell_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::ransim::types::Cell>(GetArenaForAllocation());
    cell_ = p;
  }
  return cell_;
}
inline ::onos::ransim::types::Cell* UpdateCellRequest::mutable_cell() {
  ::onos::ransim::types::Cell* _msg = _internal_mutable_cell();
  // @@protoc_insertion_point(field_mutable:onos.ransim.model.UpdateCellRequest.cell)
  return _msg;
}
inline void UpdateCellRequest::set_allocated_cell(::onos::ransim::types::Cell* cell) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_);
  }
  if (cell) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell));
    if (message_arena != submessage_arena) {
      cell = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell, submessage_arena);
    }
    
  } else {
    
  }
  cell_ = cell;
  // @@protoc_insertion_point(field_set_allocated:onos.ransim.model.UpdateCellRequest.cell)
}

// -------------------------------------------------------------------

// UpdateCellResponse

// -------------------------------------------------------------------

// DeleteCellRequest

// uint64 enbid = 1 [(.gogoproto.customname) = "NCGI", (.gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/ransim/types.NCGI"];
inline void DeleteCellRequest::clear_enbid() {
  enbid_ = uint64_t{0u};
}
inline uint64_t DeleteCellRequest::_internal_enbid() const {
  return enbid_;
}
inline uint64_t DeleteCellRequest::enbid() const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.DeleteCellRequest.enbid)
  return _internal_enbid();
}
inline void DeleteCellRequest::_internal_set_enbid(uint64_t value) {
  
  enbid_ = value;
}
inline void DeleteCellRequest::set_enbid(uint64_t value) {
  _internal_set_enbid(value);
  // @@protoc_insertion_point(field_set:onos.ransim.model.DeleteCellRequest.enbid)
}

// -------------------------------------------------------------------

// DeleteCellResponse

// -------------------------------------------------------------------

// WatchCellsRequest

// bool no_replay = 1;
inline void WatchCellsRequest::clear_no_replay() {
  no_replay_ = false;
}
inline bool WatchCellsRequest::_internal_no_replay() const {
  return no_replay_;
}
inline bool WatchCellsRequest::no_replay() const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.WatchCellsRequest.no_replay)
  return _internal_no_replay();
}
inline void WatchCellsRequest::_internal_set_no_replay(bool value) {
  
  no_replay_ = value;
}
inline void WatchCellsRequest::set_no_replay(bool value) {
  _internal_set_no_replay(value);
  // @@protoc_insertion_point(field_set:onos.ransim.model.WatchCellsRequest.no_replay)
}

// bool no_subscribe = 2;
inline void WatchCellsRequest::clear_no_subscribe() {
  no_subscribe_ = false;
}
inline bool WatchCellsRequest::_internal_no_subscribe() const {
  return no_subscribe_;
}
inline bool WatchCellsRequest::no_subscribe() const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.WatchCellsRequest.no_subscribe)
  return _internal_no_subscribe();
}
inline void WatchCellsRequest::_internal_set_no_subscribe(bool value) {
  
  no_subscribe_ = value;
}
inline void WatchCellsRequest::set_no_subscribe(bool value) {
  _internal_set_no_subscribe(value);
  // @@protoc_insertion_point(field_set:onos.ransim.model.WatchCellsRequest.no_subscribe)
}

// -------------------------------------------------------------------

// WatchCellsResponse

// .onos.ransim.types.Cell cell = 1;
inline bool WatchCellsResponse::_internal_has_cell() const {
  return this != internal_default_instance() && cell_ != nullptr;
}
inline bool WatchCellsResponse::has_cell() const {
  return _internal_has_cell();
}
inline const ::onos::ransim::types::Cell& WatchCellsResponse::_internal_cell() const {
  const ::onos::ransim::types::Cell* p = cell_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::ransim::types::Cell&>(
      ::onos::ransim::types::_Cell_default_instance_);
}
inline const ::onos::ransim::types::Cell& WatchCellsResponse::cell() const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.WatchCellsResponse.cell)
  return _internal_cell();
}
inline void WatchCellsResponse::unsafe_arena_set_allocated_cell(
    ::onos::ransim::types::Cell* cell) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_);
  }
  cell_ = cell;
  if (cell) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.ransim.model.WatchCellsResponse.cell)
}
inline ::onos::ransim::types::Cell* WatchCellsResponse::release_cell() {
  
  ::onos::ransim::types::Cell* temp = cell_;
  cell_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::ransim::types::Cell* WatchCellsResponse::unsafe_arena_release_cell() {
  // @@protoc_insertion_point(field_release:onos.ransim.model.WatchCellsResponse.cell)
  
  ::onos::ransim::types::Cell* temp = cell_;
  cell_ = nullptr;
  return temp;
}
inline ::onos::ransim::types::Cell* WatchCellsResponse::_internal_mutable_cell() {
  
  if (cell_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::ransim::types::Cell>(GetArenaForAllocation());
    cell_ = p;
  }
  return cell_;
}
inline ::onos::ransim::types::Cell* WatchCellsResponse::mutable_cell() {
  ::onos::ransim::types::Cell* _msg = _internal_mutable_cell();
  // @@protoc_insertion_point(field_mutable:onos.ransim.model.WatchCellsResponse.cell)
  return _msg;
}
inline void WatchCellsResponse::set_allocated_cell(::onos::ransim::types::Cell* cell) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_);
  }
  if (cell) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell));
    if (message_arena != submessage_arena) {
      cell = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell, submessage_arena);
    }
    
  } else {
    
  }
  cell_ = cell;
  // @@protoc_insertion_point(field_set_allocated:onos.ransim.model.WatchCellsResponse.cell)
}

// .onos.ransim.model.EventType type = 2;
inline void WatchCellsResponse::clear_type() {
  type_ = 0;
}
inline ::onos::ransim::model::EventType WatchCellsResponse::_internal_type() const {
  return static_cast< ::onos::ransim::model::EventType >(type_);
}
inline ::onos::ransim::model::EventType WatchCellsResponse::type() const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.WatchCellsResponse.type)
  return _internal_type();
}
inline void WatchCellsResponse::_internal_set_type(::onos::ransim::model::EventType value) {
  
  type_ = value;
}
inline void WatchCellsResponse::set_type(::onos::ransim::model::EventType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:onos.ransim.model.WatchCellsResponse.type)
}

// -------------------------------------------------------------------

// ListCellsRequest

// -------------------------------------------------------------------

// ListCellsResponse

// .onos.ransim.types.Cell Cell = 1;
inline bool ListCellsResponse::_internal_has_cell() const {
  return this != internal_default_instance() && cell_ != nullptr;
}
inline bool ListCellsResponse::has_cell() const {
  return _internal_has_cell();
}
inline const ::onos::ransim::types::Cell& ListCellsResponse::_internal_cell() const {
  const ::onos::ransim::types::Cell* p = cell_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::ransim::types::Cell&>(
      ::onos::ransim::types::_Cell_default_instance_);
}
inline const ::onos::ransim::types::Cell& ListCellsResponse::cell() const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.ListCellsResponse.Cell)
  return _internal_cell();
}
inline void ListCellsResponse::unsafe_arena_set_allocated_cell(
    ::onos::ransim::types::Cell* cell) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_);
  }
  cell_ = cell;
  if (cell) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.ransim.model.ListCellsResponse.Cell)
}
inline ::onos::ransim::types::Cell* ListCellsResponse::release_cell() {
  
  ::onos::ransim::types::Cell* temp = cell_;
  cell_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::ransim::types::Cell* ListCellsResponse::unsafe_arena_release_cell() {
  // @@protoc_insertion_point(field_release:onos.ransim.model.ListCellsResponse.Cell)
  
  ::onos::ransim::types::Cell* temp = cell_;
  cell_ = nullptr;
  return temp;
}
inline ::onos::ransim::types::Cell* ListCellsResponse::_internal_mutable_cell() {
  
  if (cell_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::ransim::types::Cell>(GetArenaForAllocation());
    cell_ = p;
  }
  return cell_;
}
inline ::onos::ransim::types::Cell* ListCellsResponse::mutable_cell() {
  ::onos::ransim::types::Cell* _msg = _internal_mutable_cell();
  // @@protoc_insertion_point(field_mutable:onos.ransim.model.ListCellsResponse.Cell)
  return _msg;
}
inline void ListCellsResponse::set_allocated_cell(::onos::ransim::types::Cell* cell) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_);
  }
  if (cell) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell));
    if (message_arena != submessage_arena) {
      cell = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell, submessage_arena);
    }
    
  } else {
    
  }
  cell_ = cell;
  // @@protoc_insertion_point(field_set_allocated:onos.ransim.model.ListCellsResponse.Cell)
}

// -------------------------------------------------------------------

// CreateRouteRequest

// .onos.ransim.types.Route route = 1;
inline bool CreateRouteRequest::_internal_has_route() const {
  return this != internal_default_instance() && route_ != nullptr;
}
inline bool CreateRouteRequest::has_route() const {
  return _internal_has_route();
}
inline const ::onos::ransim::types::Route& CreateRouteRequest::_internal_route() const {
  const ::onos::ransim::types::Route* p = route_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::ransim::types::Route&>(
      ::onos::ransim::types::_Route_default_instance_);
}
inline const ::onos::ransim::types::Route& CreateRouteRequest::route() const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.CreateRouteRequest.route)
  return _internal_route();
}
inline void CreateRouteRequest::unsafe_arena_set_allocated_route(
    ::onos::ransim::types::Route* route) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(route_);
  }
  route_ = route;
  if (route) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.ransim.model.CreateRouteRequest.route)
}
inline ::onos::ransim::types::Route* CreateRouteRequest::release_route() {
  
  ::onos::ransim::types::Route* temp = route_;
  route_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::ransim::types::Route* CreateRouteRequest::unsafe_arena_release_route() {
  // @@protoc_insertion_point(field_release:onos.ransim.model.CreateRouteRequest.route)
  
  ::onos::ransim::types::Route* temp = route_;
  route_ = nullptr;
  return temp;
}
inline ::onos::ransim::types::Route* CreateRouteRequest::_internal_mutable_route() {
  
  if (route_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::ransim::types::Route>(GetArenaForAllocation());
    route_ = p;
  }
  return route_;
}
inline ::onos::ransim::types::Route* CreateRouteRequest::mutable_route() {
  ::onos::ransim::types::Route* _msg = _internal_mutable_route();
  // @@protoc_insertion_point(field_mutable:onos.ransim.model.CreateRouteRequest.route)
  return _msg;
}
inline void CreateRouteRequest::set_allocated_route(::onos::ransim::types::Route* route) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(route_);
  }
  if (route) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(route));
    if (message_arena != submessage_arena) {
      route = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, route, submessage_arena);
    }
    
  } else {
    
  }
  route_ = route;
  // @@protoc_insertion_point(field_set_allocated:onos.ransim.model.CreateRouteRequest.route)
}

// -------------------------------------------------------------------

// CreateRouteResponse

// -------------------------------------------------------------------

// GetRouteRequest

// uint32 imsi = 1;
inline void GetRouteRequest::clear_imsi() {
  imsi_ = 0u;
}
inline uint32_t GetRouteRequest::_internal_imsi() const {
  return imsi_;
}
inline uint32_t GetRouteRequest::imsi() const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.GetRouteRequest.imsi)
  return _internal_imsi();
}
inline void GetRouteRequest::_internal_set_imsi(uint32_t value) {
  
  imsi_ = value;
}
inline void GetRouteRequest::set_imsi(uint32_t value) {
  _internal_set_imsi(value);
  // @@protoc_insertion_point(field_set:onos.ransim.model.GetRouteRequest.imsi)
}

// -------------------------------------------------------------------

// GetRouteResponse

// .onos.ransim.types.Route route = 1;
inline bool GetRouteResponse::_internal_has_route() const {
  return this != internal_default_instance() && route_ != nullptr;
}
inline bool GetRouteResponse::has_route() const {
  return _internal_has_route();
}
inline const ::onos::ransim::types::Route& GetRouteResponse::_internal_route() const {
  const ::onos::ransim::types::Route* p = route_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::ransim::types::Route&>(
      ::onos::ransim::types::_Route_default_instance_);
}
inline const ::onos::ransim::types::Route& GetRouteResponse::route() const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.GetRouteResponse.route)
  return _internal_route();
}
inline void GetRouteResponse::unsafe_arena_set_allocated_route(
    ::onos::ransim::types::Route* route) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(route_);
  }
  route_ = route;
  if (route) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.ransim.model.GetRouteResponse.route)
}
inline ::onos::ransim::types::Route* GetRouteResponse::release_route() {
  
  ::onos::ransim::types::Route* temp = route_;
  route_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::ransim::types::Route* GetRouteResponse::unsafe_arena_release_route() {
  // @@protoc_insertion_point(field_release:onos.ransim.model.GetRouteResponse.route)
  
  ::onos::ransim::types::Route* temp = route_;
  route_ = nullptr;
  return temp;
}
inline ::onos::ransim::types::Route* GetRouteResponse::_internal_mutable_route() {
  
  if (route_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::ransim::types::Route>(GetArenaForAllocation());
    route_ = p;
  }
  return route_;
}
inline ::onos::ransim::types::Route* GetRouteResponse::mutable_route() {
  ::onos::ransim::types::Route* _msg = _internal_mutable_route();
  // @@protoc_insertion_point(field_mutable:onos.ransim.model.GetRouteResponse.route)
  return _msg;
}
inline void GetRouteResponse::set_allocated_route(::onos::ransim::types::Route* route) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(route_);
  }
  if (route) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(route));
    if (message_arena != submessage_arena) {
      route = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, route, submessage_arena);
    }
    
  } else {
    
  }
  route_ = route;
  // @@protoc_insertion_point(field_set_allocated:onos.ransim.model.GetRouteResponse.route)
}

// -------------------------------------------------------------------

// DeleteRouteRequest

// uint64 imsi = 1;
inline void DeleteRouteRequest::clear_imsi() {
  imsi_ = uint64_t{0u};
}
inline uint64_t DeleteRouteRequest::_internal_imsi() const {
  return imsi_;
}
inline uint64_t DeleteRouteRequest::imsi() const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.DeleteRouteRequest.imsi)
  return _internal_imsi();
}
inline void DeleteRouteRequest::_internal_set_imsi(uint64_t value) {
  
  imsi_ = value;
}
inline void DeleteRouteRequest::set_imsi(uint64_t value) {
  _internal_set_imsi(value);
  // @@protoc_insertion_point(field_set:onos.ransim.model.DeleteRouteRequest.imsi)
}

// -------------------------------------------------------------------

// DeleteRouteResponse

// -------------------------------------------------------------------

// WatchRoutesRequest

// bool no_replay = 1;
inline void WatchRoutesRequest::clear_no_replay() {
  no_replay_ = false;
}
inline bool WatchRoutesRequest::_internal_no_replay() const {
  return no_replay_;
}
inline bool WatchRoutesRequest::no_replay() const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.WatchRoutesRequest.no_replay)
  return _internal_no_replay();
}
inline void WatchRoutesRequest::_internal_set_no_replay(bool value) {
  
  no_replay_ = value;
}
inline void WatchRoutesRequest::set_no_replay(bool value) {
  _internal_set_no_replay(value);
  // @@protoc_insertion_point(field_set:onos.ransim.model.WatchRoutesRequest.no_replay)
}

// bool no_subscribe = 2;
inline void WatchRoutesRequest::clear_no_subscribe() {
  no_subscribe_ = false;
}
inline bool WatchRoutesRequest::_internal_no_subscribe() const {
  return no_subscribe_;
}
inline bool WatchRoutesRequest::no_subscribe() const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.WatchRoutesRequest.no_subscribe)
  return _internal_no_subscribe();
}
inline void WatchRoutesRequest::_internal_set_no_subscribe(bool value) {
  
  no_subscribe_ = value;
}
inline void WatchRoutesRequest::set_no_subscribe(bool value) {
  _internal_set_no_subscribe(value);
  // @@protoc_insertion_point(field_set:onos.ransim.model.WatchRoutesRequest.no_subscribe)
}

// -------------------------------------------------------------------

// WatchRoutesResponse

// .onos.ransim.types.Route route = 1;
inline bool WatchRoutesResponse::_internal_has_route() const {
  return this != internal_default_instance() && route_ != nullptr;
}
inline bool WatchRoutesResponse::has_route() const {
  return _internal_has_route();
}
inline const ::onos::ransim::types::Route& WatchRoutesResponse::_internal_route() const {
  const ::onos::ransim::types::Route* p = route_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::ransim::types::Route&>(
      ::onos::ransim::types::_Route_default_instance_);
}
inline const ::onos::ransim::types::Route& WatchRoutesResponse::route() const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.WatchRoutesResponse.route)
  return _internal_route();
}
inline void WatchRoutesResponse::unsafe_arena_set_allocated_route(
    ::onos::ransim::types::Route* route) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(route_);
  }
  route_ = route;
  if (route) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.ransim.model.WatchRoutesResponse.route)
}
inline ::onos::ransim::types::Route* WatchRoutesResponse::release_route() {
  
  ::onos::ransim::types::Route* temp = route_;
  route_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::ransim::types::Route* WatchRoutesResponse::unsafe_arena_release_route() {
  // @@protoc_insertion_point(field_release:onos.ransim.model.WatchRoutesResponse.route)
  
  ::onos::ransim::types::Route* temp = route_;
  route_ = nullptr;
  return temp;
}
inline ::onos::ransim::types::Route* WatchRoutesResponse::_internal_mutable_route() {
  
  if (route_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::ransim::types::Route>(GetArenaForAllocation());
    route_ = p;
  }
  return route_;
}
inline ::onos::ransim::types::Route* WatchRoutesResponse::mutable_route() {
  ::onos::ransim::types::Route* _msg = _internal_mutable_route();
  // @@protoc_insertion_point(field_mutable:onos.ransim.model.WatchRoutesResponse.route)
  return _msg;
}
inline void WatchRoutesResponse::set_allocated_route(::onos::ransim::types::Route* route) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(route_);
  }
  if (route) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(route));
    if (message_arena != submessage_arena) {
      route = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, route, submessage_arena);
    }
    
  } else {
    
  }
  route_ = route;
  // @@protoc_insertion_point(field_set_allocated:onos.ransim.model.WatchRoutesResponse.route)
}

// .onos.ransim.model.EventType type = 2;
inline void WatchRoutesResponse::clear_type() {
  type_ = 0;
}
inline ::onos::ransim::model::EventType WatchRoutesResponse::_internal_type() const {
  return static_cast< ::onos::ransim::model::EventType >(type_);
}
inline ::onos::ransim::model::EventType WatchRoutesResponse::type() const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.WatchRoutesResponse.type)
  return _internal_type();
}
inline void WatchRoutesResponse::_internal_set_type(::onos::ransim::model::EventType value) {
  
  type_ = value;
}
inline void WatchRoutesResponse::set_type(::onos::ransim::model::EventType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:onos.ransim.model.WatchRoutesResponse.type)
}

// -------------------------------------------------------------------

// ListRoutesRequest

// -------------------------------------------------------------------

// ListRoutesResponse

// .onos.ransim.types.Route route = 1;
inline bool ListRoutesResponse::_internal_has_route() const {
  return this != internal_default_instance() && route_ != nullptr;
}
inline bool ListRoutesResponse::has_route() const {
  return _internal_has_route();
}
inline const ::onos::ransim::types::Route& ListRoutesResponse::_internal_route() const {
  const ::onos::ransim::types::Route* p = route_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::ransim::types::Route&>(
      ::onos::ransim::types::_Route_default_instance_);
}
inline const ::onos::ransim::types::Route& ListRoutesResponse::route() const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.ListRoutesResponse.route)
  return _internal_route();
}
inline void ListRoutesResponse::unsafe_arena_set_allocated_route(
    ::onos::ransim::types::Route* route) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(route_);
  }
  route_ = route;
  if (route) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.ransim.model.ListRoutesResponse.route)
}
inline ::onos::ransim::types::Route* ListRoutesResponse::release_route() {
  
  ::onos::ransim::types::Route* temp = route_;
  route_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::ransim::types::Route* ListRoutesResponse::unsafe_arena_release_route() {
  // @@protoc_insertion_point(field_release:onos.ransim.model.ListRoutesResponse.route)
  
  ::onos::ransim::types::Route* temp = route_;
  route_ = nullptr;
  return temp;
}
inline ::onos::ransim::types::Route* ListRoutesResponse::_internal_mutable_route() {
  
  if (route_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::ransim::types::Route>(GetArenaForAllocation());
    route_ = p;
  }
  return route_;
}
inline ::onos::ransim::types::Route* ListRoutesResponse::mutable_route() {
  ::onos::ransim::types::Route* _msg = _internal_mutable_route();
  // @@protoc_insertion_point(field_mutable:onos.ransim.model.ListRoutesResponse.route)
  return _msg;
}
inline void ListRoutesResponse::set_allocated_route(::onos::ransim::types::Route* route) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(route_);
  }
  if (route) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(route));
    if (message_arena != submessage_arena) {
      route = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, route, submessage_arena);
    }
    
  } else {
    
  }
  route_ = route;
  // @@protoc_insertion_point(field_set_allocated:onos.ransim.model.ListRoutesResponse.route)
}

// -------------------------------------------------------------------

// GetUERequest

// uint32 imsi = 1;
inline void GetUERequest::clear_imsi() {
  imsi_ = 0u;
}
inline uint32_t GetUERequest::_internal_imsi() const {
  return imsi_;
}
inline uint32_t GetUERequest::imsi() const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.GetUERequest.imsi)
  return _internal_imsi();
}
inline void GetUERequest::_internal_set_imsi(uint32_t value) {
  
  imsi_ = value;
}
inline void GetUERequest::set_imsi(uint32_t value) {
  _internal_set_imsi(value);
  // @@protoc_insertion_point(field_set:onos.ransim.model.GetUERequest.imsi)
}

// -------------------------------------------------------------------

// GetUEResponse

// .onos.ransim.types.Ue ue = 1;
inline bool GetUEResponse::_internal_has_ue() const {
  return this != internal_default_instance() && ue_ != nullptr;
}
inline bool GetUEResponse::has_ue() const {
  return _internal_has_ue();
}
inline const ::onos::ransim::types::Ue& GetUEResponse::_internal_ue() const {
  const ::onos::ransim::types::Ue* p = ue_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::ransim::types::Ue&>(
      ::onos::ransim::types::_Ue_default_instance_);
}
inline const ::onos::ransim::types::Ue& GetUEResponse::ue() const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.GetUEResponse.ue)
  return _internal_ue();
}
inline void GetUEResponse::unsafe_arena_set_allocated_ue(
    ::onos::ransim::types::Ue* ue) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ue_);
  }
  ue_ = ue;
  if (ue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.ransim.model.GetUEResponse.ue)
}
inline ::onos::ransim::types::Ue* GetUEResponse::release_ue() {
  
  ::onos::ransim::types::Ue* temp = ue_;
  ue_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::ransim::types::Ue* GetUEResponse::unsafe_arena_release_ue() {
  // @@protoc_insertion_point(field_release:onos.ransim.model.GetUEResponse.ue)
  
  ::onos::ransim::types::Ue* temp = ue_;
  ue_ = nullptr;
  return temp;
}
inline ::onos::ransim::types::Ue* GetUEResponse::_internal_mutable_ue() {
  
  if (ue_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::ransim::types::Ue>(GetArenaForAllocation());
    ue_ = p;
  }
  return ue_;
}
inline ::onos::ransim::types::Ue* GetUEResponse::mutable_ue() {
  ::onos::ransim::types::Ue* _msg = _internal_mutable_ue();
  // @@protoc_insertion_point(field_mutable:onos.ransim.model.GetUEResponse.ue)
  return _msg;
}
inline void GetUEResponse::set_allocated_ue(::onos::ransim::types::Ue* ue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ue_);
  }
  if (ue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ue));
    if (message_arena != submessage_arena) {
      ue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ue, submessage_arena);
    }
    
  } else {
    
  }
  ue_ = ue;
  // @@protoc_insertion_point(field_set_allocated:onos.ransim.model.GetUEResponse.ue)
}

// -------------------------------------------------------------------

// MoveToCellRequest

// uint32 imsi = 1;
inline void MoveToCellRequest::clear_imsi() {
  imsi_ = 0u;
}
inline uint32_t MoveToCellRequest::_internal_imsi() const {
  return imsi_;
}
inline uint32_t MoveToCellRequest::imsi() const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.MoveToCellRequest.imsi)
  return _internal_imsi();
}
inline void MoveToCellRequest::_internal_set_imsi(uint32_t value) {
  
  imsi_ = value;
}
inline void MoveToCellRequest::set_imsi(uint32_t value) {
  _internal_set_imsi(value);
  // @@protoc_insertion_point(field_set:onos.ransim.model.MoveToCellRequest.imsi)
}

// uint32 ecgi = 2 [(.gogoproto.customname) = "NCGI", (.gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/ransim/types.NCGI"];
inline void MoveToCellRequest::clear_ecgi() {
  ecgi_ = 0u;
}
inline uint32_t MoveToCellRequest::_internal_ecgi() const {
  return ecgi_;
}
inline uint32_t MoveToCellRequest::ecgi() const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.MoveToCellRequest.ecgi)
  return _internal_ecgi();
}
inline void MoveToCellRequest::_internal_set_ecgi(uint32_t value) {
  
  ecgi_ = value;
}
inline void MoveToCellRequest::set_ecgi(uint32_t value) {
  _internal_set_ecgi(value);
  // @@protoc_insertion_point(field_set:onos.ransim.model.MoveToCellRequest.ecgi)
}

// -------------------------------------------------------------------

// MoveToCellResponse

// -------------------------------------------------------------------

// MoveToLocationRequest

// uint32 imsi = 1;
inline void MoveToLocationRequest::clear_imsi() {
  imsi_ = 0u;
}
inline uint32_t MoveToLocationRequest::_internal_imsi() const {
  return imsi_;
}
inline uint32_t MoveToLocationRequest::imsi() const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.MoveToLocationRequest.imsi)
  return _internal_imsi();
}
inline void MoveToLocationRequest::_internal_set_imsi(uint32_t value) {
  
  imsi_ = value;
}
inline void MoveToLocationRequest::set_imsi(uint32_t value) {
  _internal_set_imsi(value);
  // @@protoc_insertion_point(field_set:onos.ransim.model.MoveToLocationRequest.imsi)
}

// .onos.ransim.types.Point location = 2;
inline bool MoveToLocationRequest::_internal_has_location() const {
  return this != internal_default_instance() && location_ != nullptr;
}
inline bool MoveToLocationRequest::has_location() const {
  return _internal_has_location();
}
inline const ::onos::ransim::types::Point& MoveToLocationRequest::_internal_location() const {
  const ::onos::ransim::types::Point* p = location_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::ransim::types::Point&>(
      ::onos::ransim::types::_Point_default_instance_);
}
inline const ::onos::ransim::types::Point& MoveToLocationRequest::location() const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.MoveToLocationRequest.location)
  return _internal_location();
}
inline void MoveToLocationRequest::unsafe_arena_set_allocated_location(
    ::onos::ransim::types::Point* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_);
  }
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.ransim.model.MoveToLocationRequest.location)
}
inline ::onos::ransim::types::Point* MoveToLocationRequest::release_location() {
  
  ::onos::ransim::types::Point* temp = location_;
  location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::ransim::types::Point* MoveToLocationRequest::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:onos.ransim.model.MoveToLocationRequest.location)
  
  ::onos::ransim::types::Point* temp = location_;
  location_ = nullptr;
  return temp;
}
inline ::onos::ransim::types::Point* MoveToLocationRequest::_internal_mutable_location() {
  
  if (location_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::ransim::types::Point>(GetArenaForAllocation());
    location_ = p;
  }
  return location_;
}
inline ::onos::ransim::types::Point* MoveToLocationRequest::mutable_location() {
  ::onos::ransim::types::Point* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:onos.ransim.model.MoveToLocationRequest.location)
  return _msg;
}
inline void MoveToLocationRequest::set_allocated_location(::onos::ransim::types::Point* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_);
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location));
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:onos.ransim.model.MoveToLocationRequest.location)
}

// uint32 heading = 3;
inline void MoveToLocationRequest::clear_heading() {
  heading_ = 0u;
}
inline uint32_t MoveToLocationRequest::_internal_heading() const {
  return heading_;
}
inline uint32_t MoveToLocationRequest::heading() const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.MoveToLocationRequest.heading)
  return _internal_heading();
}
inline void MoveToLocationRequest::_internal_set_heading(uint32_t value) {
  
  heading_ = value;
}
inline void MoveToLocationRequest::set_heading(uint32_t value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:onos.ransim.model.MoveToLocationRequest.heading)
}

// -------------------------------------------------------------------

// MoveToLocationResponse

// -------------------------------------------------------------------

// DeleteUERequest

// uint32 imsi = 1;
inline void DeleteUERequest::clear_imsi() {
  imsi_ = 0u;
}
inline uint32_t DeleteUERequest::_internal_imsi() const {
  return imsi_;
}
inline uint32_t DeleteUERequest::imsi() const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.DeleteUERequest.imsi)
  return _internal_imsi();
}
inline void DeleteUERequest::_internal_set_imsi(uint32_t value) {
  
  imsi_ = value;
}
inline void DeleteUERequest::set_imsi(uint32_t value) {
  _internal_set_imsi(value);
  // @@protoc_insertion_point(field_set:onos.ransim.model.DeleteUERequest.imsi)
}

// -------------------------------------------------------------------

// DeleteUEResponse

// -------------------------------------------------------------------

// WatchUEsRequest

// bool no_replay = 1;
inline void WatchUEsRequest::clear_no_replay() {
  no_replay_ = false;
}
inline bool WatchUEsRequest::_internal_no_replay() const {
  return no_replay_;
}
inline bool WatchUEsRequest::no_replay() const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.WatchUEsRequest.no_replay)
  return _internal_no_replay();
}
inline void WatchUEsRequest::_internal_set_no_replay(bool value) {
  
  no_replay_ = value;
}
inline void WatchUEsRequest::set_no_replay(bool value) {
  _internal_set_no_replay(value);
  // @@protoc_insertion_point(field_set:onos.ransim.model.WatchUEsRequest.no_replay)
}

// bool no_subscribe = 2;
inline void WatchUEsRequest::clear_no_subscribe() {
  no_subscribe_ = false;
}
inline bool WatchUEsRequest::_internal_no_subscribe() const {
  return no_subscribe_;
}
inline bool WatchUEsRequest::no_subscribe() const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.WatchUEsRequest.no_subscribe)
  return _internal_no_subscribe();
}
inline void WatchUEsRequest::_internal_set_no_subscribe(bool value) {
  
  no_subscribe_ = value;
}
inline void WatchUEsRequest::set_no_subscribe(bool value) {
  _internal_set_no_subscribe(value);
  // @@protoc_insertion_point(field_set:onos.ransim.model.WatchUEsRequest.no_subscribe)
}

// -------------------------------------------------------------------

// WatchUEsResponse

// .onos.ransim.types.Ue ue = 1;
inline bool WatchUEsResponse::_internal_has_ue() const {
  return this != internal_default_instance() && ue_ != nullptr;
}
inline bool WatchUEsResponse::has_ue() const {
  return _internal_has_ue();
}
inline const ::onos::ransim::types::Ue& WatchUEsResponse::_internal_ue() const {
  const ::onos::ransim::types::Ue* p = ue_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::ransim::types::Ue&>(
      ::onos::ransim::types::_Ue_default_instance_);
}
inline const ::onos::ransim::types::Ue& WatchUEsResponse::ue() const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.WatchUEsResponse.ue)
  return _internal_ue();
}
inline void WatchUEsResponse::unsafe_arena_set_allocated_ue(
    ::onos::ransim::types::Ue* ue) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ue_);
  }
  ue_ = ue;
  if (ue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.ransim.model.WatchUEsResponse.ue)
}
inline ::onos::ransim::types::Ue* WatchUEsResponse::release_ue() {
  
  ::onos::ransim::types::Ue* temp = ue_;
  ue_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::ransim::types::Ue* WatchUEsResponse::unsafe_arena_release_ue() {
  // @@protoc_insertion_point(field_release:onos.ransim.model.WatchUEsResponse.ue)
  
  ::onos::ransim::types::Ue* temp = ue_;
  ue_ = nullptr;
  return temp;
}
inline ::onos::ransim::types::Ue* WatchUEsResponse::_internal_mutable_ue() {
  
  if (ue_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::ransim::types::Ue>(GetArenaForAllocation());
    ue_ = p;
  }
  return ue_;
}
inline ::onos::ransim::types::Ue* WatchUEsResponse::mutable_ue() {
  ::onos::ransim::types::Ue* _msg = _internal_mutable_ue();
  // @@protoc_insertion_point(field_mutable:onos.ransim.model.WatchUEsResponse.ue)
  return _msg;
}
inline void WatchUEsResponse::set_allocated_ue(::onos::ransim::types::Ue* ue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ue_);
  }
  if (ue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ue));
    if (message_arena != submessage_arena) {
      ue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ue, submessage_arena);
    }
    
  } else {
    
  }
  ue_ = ue;
  // @@protoc_insertion_point(field_set_allocated:onos.ransim.model.WatchUEsResponse.ue)
}

// .onos.ransim.model.EventType type = 2;
inline void WatchUEsResponse::clear_type() {
  type_ = 0;
}
inline ::onos::ransim::model::EventType WatchUEsResponse::_internal_type() const {
  return static_cast< ::onos::ransim::model::EventType >(type_);
}
inline ::onos::ransim::model::EventType WatchUEsResponse::type() const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.WatchUEsResponse.type)
  return _internal_type();
}
inline void WatchUEsResponse::_internal_set_type(::onos::ransim::model::EventType value) {
  
  type_ = value;
}
inline void WatchUEsResponse::set_type(::onos::ransim::model::EventType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:onos.ransim.model.WatchUEsResponse.type)
}

// -------------------------------------------------------------------

// ListUEsRequest

// -------------------------------------------------------------------

// ListUEsResponse

// .onos.ransim.types.Ue ue = 1;
inline bool ListUEsResponse::_internal_has_ue() const {
  return this != internal_default_instance() && ue_ != nullptr;
}
inline bool ListUEsResponse::has_ue() const {
  return _internal_has_ue();
}
inline const ::onos::ransim::types::Ue& ListUEsResponse::_internal_ue() const {
  const ::onos::ransim::types::Ue* p = ue_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::ransim::types::Ue&>(
      ::onos::ransim::types::_Ue_default_instance_);
}
inline const ::onos::ransim::types::Ue& ListUEsResponse::ue() const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.ListUEsResponse.ue)
  return _internal_ue();
}
inline void ListUEsResponse::unsafe_arena_set_allocated_ue(
    ::onos::ransim::types::Ue* ue) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ue_);
  }
  ue_ = ue;
  if (ue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.ransim.model.ListUEsResponse.ue)
}
inline ::onos::ransim::types::Ue* ListUEsResponse::release_ue() {
  
  ::onos::ransim::types::Ue* temp = ue_;
  ue_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::ransim::types::Ue* ListUEsResponse::unsafe_arena_release_ue() {
  // @@protoc_insertion_point(field_release:onos.ransim.model.ListUEsResponse.ue)
  
  ::onos::ransim::types::Ue* temp = ue_;
  ue_ = nullptr;
  return temp;
}
inline ::onos::ransim::types::Ue* ListUEsResponse::_internal_mutable_ue() {
  
  if (ue_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::ransim::types::Ue>(GetArenaForAllocation());
    ue_ = p;
  }
  return ue_;
}
inline ::onos::ransim::types::Ue* ListUEsResponse::mutable_ue() {
  ::onos::ransim::types::Ue* _msg = _internal_mutable_ue();
  // @@protoc_insertion_point(field_mutable:onos.ransim.model.ListUEsResponse.ue)
  return _msg;
}
inline void ListUEsResponse::set_allocated_ue(::onos::ransim::types::Ue* ue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(ue_);
  }
  if (ue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ue));
    if (message_arena != submessage_arena) {
      ue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ue, submessage_arena);
    }
    
  } else {
    
  }
  ue_ = ue;
  // @@protoc_insertion_point(field_set_allocated:onos.ransim.model.ListUEsResponse.ue)
}

// -------------------------------------------------------------------

// GetUECountRequest

// -------------------------------------------------------------------

// GetUECountResponse

// uint32 count = 1;
inline void GetUECountResponse::clear_count() {
  count_ = 0u;
}
inline uint32_t GetUECountResponse::_internal_count() const {
  return count_;
}
inline uint32_t GetUECountResponse::count() const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.GetUECountResponse.count)
  return _internal_count();
}
inline void GetUECountResponse::_internal_set_count(uint32_t value) {
  
  count_ = value;
}
inline void GetUECountResponse::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:onos.ransim.model.GetUECountResponse.count)
}

// -------------------------------------------------------------------

// SetUECountRequest

// uint32 count = 1;
inline void SetUECountRequest::clear_count() {
  count_ = 0u;
}
inline uint32_t SetUECountRequest::_internal_count() const {
  return count_;
}
inline uint32_t SetUECountRequest::count() const {
  // @@protoc_insertion_point(field_get:onos.ransim.model.SetUECountRequest.count)
  return _internal_count();
}
inline void SetUECountRequest::_internal_set_count(uint32_t value) {
  
  count_ = value;
}
inline void SetUECountRequest::set_count(uint32_t value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:onos.ransim.model.SetUECountRequest.count)
}

// -------------------------------------------------------------------

// SetUECountResponse

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace model
}  // namespace ransim
}  // namespace onos

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::onos::ransim::model::EventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::onos::ransim::model::EventType>() {
  return ::onos::ransim::model::EventType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_onos_2fransim_2fmodel_2fmodel_2eproto
