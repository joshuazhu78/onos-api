// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: onos/ransim/model/model.proto

#include "onos/ransim/model/model.pb.h"
#include "onos/ransim/model/model.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace onos {
namespace ransim {
namespace model {

static const char* ModelService_method_names[] = {
  "/onos.ransim.model.ModelService/Load",
  "/onos.ransim.model.ModelService/Clear",
};

std::unique_ptr< ModelService::Stub> ModelService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ModelService::Stub> stub(new ModelService::Stub(channel, options));
  return stub;
}

ModelService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Load_(ModelService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Clear_(ModelService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ModelService::Stub::Load(::grpc::ClientContext* context, const ::onos::ransim::model::LoadRequest& request, ::onos::ransim::model::LoadResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::ransim::model::LoadRequest, ::onos::ransim::model::LoadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Load_, context, request, response);
}

void ModelService::Stub::async::Load(::grpc::ClientContext* context, const ::onos::ransim::model::LoadRequest* request, ::onos::ransim::model::LoadResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::ransim::model::LoadRequest, ::onos::ransim::model::LoadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Load_, context, request, response, std::move(f));
}

void ModelService::Stub::async::Load(::grpc::ClientContext* context, const ::onos::ransim::model::LoadRequest* request, ::onos::ransim::model::LoadResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Load_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::ransim::model::LoadResponse>* ModelService::Stub::PrepareAsyncLoadRaw(::grpc::ClientContext* context, const ::onos::ransim::model::LoadRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::ransim::model::LoadResponse, ::onos::ransim::model::LoadRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Load_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::ransim::model::LoadResponse>* ModelService::Stub::AsyncLoadRaw(::grpc::ClientContext* context, const ::onos::ransim::model::LoadRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncLoadRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ModelService::Stub::Clear(::grpc::ClientContext* context, const ::onos::ransim::model::ClearRequest& request, ::onos::ransim::model::ClearResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::ransim::model::ClearRequest, ::onos::ransim::model::ClearResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Clear_, context, request, response);
}

void ModelService::Stub::async::Clear(::grpc::ClientContext* context, const ::onos::ransim::model::ClearRequest* request, ::onos::ransim::model::ClearResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::ransim::model::ClearRequest, ::onos::ransim::model::ClearResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Clear_, context, request, response, std::move(f));
}

void ModelService::Stub::async::Clear(::grpc::ClientContext* context, const ::onos::ransim::model::ClearRequest* request, ::onos::ransim::model::ClearResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Clear_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::ransim::model::ClearResponse>* ModelService::Stub::PrepareAsyncClearRaw(::grpc::ClientContext* context, const ::onos::ransim::model::ClearRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::ransim::model::ClearResponse, ::onos::ransim::model::ClearRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Clear_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::ransim::model::ClearResponse>* ModelService::Stub::AsyncClearRaw(::grpc::ClientContext* context, const ::onos::ransim::model::ClearRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncClearRaw(context, request, cq);
  result->StartCall();
  return result;
}

ModelService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ModelService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ModelService::Service, ::onos::ransim::model::LoadRequest, ::onos::ransim::model::LoadResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ModelService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::ransim::model::LoadRequest* req,
             ::onos::ransim::model::LoadResponse* resp) {
               return service->Load(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ModelService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ModelService::Service, ::onos::ransim::model::ClearRequest, ::onos::ransim::model::ClearResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ModelService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::ransim::model::ClearRequest* req,
             ::onos::ransim::model::ClearResponse* resp) {
               return service->Clear(ctx, req, resp);
             }, this)));
}

ModelService::Service::~Service() {
}

::grpc::Status ModelService::Service::Load(::grpc::ServerContext* context, const ::onos::ransim::model::LoadRequest* request, ::onos::ransim::model::LoadResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ModelService::Service::Clear(::grpc::ServerContext* context, const ::onos::ransim::model::ClearRequest* request, ::onos::ransim::model::ClearResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* NodeModel_method_names[] = {
  "/onos.ransim.model.NodeModel/GetPlmnID",
  "/onos.ransim.model.NodeModel/CreateNode",
  "/onos.ransim.model.NodeModel/GetNode",
  "/onos.ransim.model.NodeModel/UpdateNode",
  "/onos.ransim.model.NodeModel/DeleteNode",
  "/onos.ransim.model.NodeModel/WatchNodes",
  "/onos.ransim.model.NodeModel/ListNodes",
  "/onos.ransim.model.NodeModel/AgentControl",
};

std::unique_ptr< NodeModel::Stub> NodeModel::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< NodeModel::Stub> stub(new NodeModel::Stub(channel, options));
  return stub;
}

NodeModel::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetPlmnID_(NodeModel_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateNode_(NodeModel_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNode_(NodeModel_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateNode_(NodeModel_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteNode_(NodeModel_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WatchNodes_(NodeModel_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ListNodes_(NodeModel_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_AgentControl_(NodeModel_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status NodeModel::Stub::GetPlmnID(::grpc::ClientContext* context, const ::onos::ransim::model::PlmnIDRequest& request, ::onos::ransim::model::PlmnIDResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::ransim::model::PlmnIDRequest, ::onos::ransim::model::PlmnIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPlmnID_, context, request, response);
}

void NodeModel::Stub::async::GetPlmnID(::grpc::ClientContext* context, const ::onos::ransim::model::PlmnIDRequest* request, ::onos::ransim::model::PlmnIDResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::ransim::model::PlmnIDRequest, ::onos::ransim::model::PlmnIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPlmnID_, context, request, response, std::move(f));
}

void NodeModel::Stub::async::GetPlmnID(::grpc::ClientContext* context, const ::onos::ransim::model::PlmnIDRequest* request, ::onos::ransim::model::PlmnIDResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPlmnID_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::ransim::model::PlmnIDResponse>* NodeModel::Stub::PrepareAsyncGetPlmnIDRaw(::grpc::ClientContext* context, const ::onos::ransim::model::PlmnIDRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::ransim::model::PlmnIDResponse, ::onos::ransim::model::PlmnIDRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPlmnID_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::ransim::model::PlmnIDResponse>* NodeModel::Stub::AsyncGetPlmnIDRaw(::grpc::ClientContext* context, const ::onos::ransim::model::PlmnIDRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPlmnIDRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NodeModel::Stub::CreateNode(::grpc::ClientContext* context, const ::onos::ransim::model::CreateNodeRequest& request, ::onos::ransim::model::CreateNodeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::ransim::model::CreateNodeRequest, ::onos::ransim::model::CreateNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateNode_, context, request, response);
}

void NodeModel::Stub::async::CreateNode(::grpc::ClientContext* context, const ::onos::ransim::model::CreateNodeRequest* request, ::onos::ransim::model::CreateNodeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::ransim::model::CreateNodeRequest, ::onos::ransim::model::CreateNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateNode_, context, request, response, std::move(f));
}

void NodeModel::Stub::async::CreateNode(::grpc::ClientContext* context, const ::onos::ransim::model::CreateNodeRequest* request, ::onos::ransim::model::CreateNodeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateNode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::ransim::model::CreateNodeResponse>* NodeModel::Stub::PrepareAsyncCreateNodeRaw(::grpc::ClientContext* context, const ::onos::ransim::model::CreateNodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::ransim::model::CreateNodeResponse, ::onos::ransim::model::CreateNodeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateNode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::ransim::model::CreateNodeResponse>* NodeModel::Stub::AsyncCreateNodeRaw(::grpc::ClientContext* context, const ::onos::ransim::model::CreateNodeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateNodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NodeModel::Stub::GetNode(::grpc::ClientContext* context, const ::onos::ransim::model::GetNodeRequest& request, ::onos::ransim::model::GetNodeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::ransim::model::GetNodeRequest, ::onos::ransim::model::GetNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNode_, context, request, response);
}

void NodeModel::Stub::async::GetNode(::grpc::ClientContext* context, const ::onos::ransim::model::GetNodeRequest* request, ::onos::ransim::model::GetNodeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::ransim::model::GetNodeRequest, ::onos::ransim::model::GetNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNode_, context, request, response, std::move(f));
}

void NodeModel::Stub::async::GetNode(::grpc::ClientContext* context, const ::onos::ransim::model::GetNodeRequest* request, ::onos::ransim::model::GetNodeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::ransim::model::GetNodeResponse>* NodeModel::Stub::PrepareAsyncGetNodeRaw(::grpc::ClientContext* context, const ::onos::ransim::model::GetNodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::ransim::model::GetNodeResponse, ::onos::ransim::model::GetNodeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::ransim::model::GetNodeResponse>* NodeModel::Stub::AsyncGetNodeRaw(::grpc::ClientContext* context, const ::onos::ransim::model::GetNodeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NodeModel::Stub::UpdateNode(::grpc::ClientContext* context, const ::onos::ransim::model::UpdateNodeRequest& request, ::onos::ransim::model::UpdateNodeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::ransim::model::UpdateNodeRequest, ::onos::ransim::model::UpdateNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateNode_, context, request, response);
}

void NodeModel::Stub::async::UpdateNode(::grpc::ClientContext* context, const ::onos::ransim::model::UpdateNodeRequest* request, ::onos::ransim::model::UpdateNodeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::ransim::model::UpdateNodeRequest, ::onos::ransim::model::UpdateNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateNode_, context, request, response, std::move(f));
}

void NodeModel::Stub::async::UpdateNode(::grpc::ClientContext* context, const ::onos::ransim::model::UpdateNodeRequest* request, ::onos::ransim::model::UpdateNodeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateNode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::ransim::model::UpdateNodeResponse>* NodeModel::Stub::PrepareAsyncUpdateNodeRaw(::grpc::ClientContext* context, const ::onos::ransim::model::UpdateNodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::ransim::model::UpdateNodeResponse, ::onos::ransim::model::UpdateNodeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateNode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::ransim::model::UpdateNodeResponse>* NodeModel::Stub::AsyncUpdateNodeRaw(::grpc::ClientContext* context, const ::onos::ransim::model::UpdateNodeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateNodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status NodeModel::Stub::DeleteNode(::grpc::ClientContext* context, const ::onos::ransim::model::DeleteNodeRequest& request, ::onos::ransim::model::DeleteNodeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::ransim::model::DeleteNodeRequest, ::onos::ransim::model::DeleteNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteNode_, context, request, response);
}

void NodeModel::Stub::async::DeleteNode(::grpc::ClientContext* context, const ::onos::ransim::model::DeleteNodeRequest* request, ::onos::ransim::model::DeleteNodeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::ransim::model::DeleteNodeRequest, ::onos::ransim::model::DeleteNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteNode_, context, request, response, std::move(f));
}

void NodeModel::Stub::async::DeleteNode(::grpc::ClientContext* context, const ::onos::ransim::model::DeleteNodeRequest* request, ::onos::ransim::model::DeleteNodeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteNode_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::ransim::model::DeleteNodeResponse>* NodeModel::Stub::PrepareAsyncDeleteNodeRaw(::grpc::ClientContext* context, const ::onos::ransim::model::DeleteNodeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::ransim::model::DeleteNodeResponse, ::onos::ransim::model::DeleteNodeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteNode_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::ransim::model::DeleteNodeResponse>* NodeModel::Stub::AsyncDeleteNodeRaw(::grpc::ClientContext* context, const ::onos::ransim::model::DeleteNodeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteNodeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::onos::ransim::model::WatchNodesResponse>* NodeModel::Stub::WatchNodesRaw(::grpc::ClientContext* context, const ::onos::ransim::model::WatchNodesRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::onos::ransim::model::WatchNodesResponse>::Create(channel_.get(), rpcmethod_WatchNodes_, context, request);
}

void NodeModel::Stub::async::WatchNodes(::grpc::ClientContext* context, const ::onos::ransim::model::WatchNodesRequest* request, ::grpc::ClientReadReactor< ::onos::ransim::model::WatchNodesResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::onos::ransim::model::WatchNodesResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_WatchNodes_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::onos::ransim::model::WatchNodesResponse>* NodeModel::Stub::AsyncWatchNodesRaw(::grpc::ClientContext* context, const ::onos::ransim::model::WatchNodesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::onos::ransim::model::WatchNodesResponse>::Create(channel_.get(), cq, rpcmethod_WatchNodes_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::onos::ransim::model::WatchNodesResponse>* NodeModel::Stub::PrepareAsyncWatchNodesRaw(::grpc::ClientContext* context, const ::onos::ransim::model::WatchNodesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::onos::ransim::model::WatchNodesResponse>::Create(channel_.get(), cq, rpcmethod_WatchNodes_, context, request, false, nullptr);
}

::grpc::ClientReader< ::onos::ransim::model::ListNodesResponse>* NodeModel::Stub::ListNodesRaw(::grpc::ClientContext* context, const ::onos::ransim::model::ListNodesRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::onos::ransim::model::ListNodesResponse>::Create(channel_.get(), rpcmethod_ListNodes_, context, request);
}

void NodeModel::Stub::async::ListNodes(::grpc::ClientContext* context, const ::onos::ransim::model::ListNodesRequest* request, ::grpc::ClientReadReactor< ::onos::ransim::model::ListNodesResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::onos::ransim::model::ListNodesResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_ListNodes_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::onos::ransim::model::ListNodesResponse>* NodeModel::Stub::AsyncListNodesRaw(::grpc::ClientContext* context, const ::onos::ransim::model::ListNodesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::onos::ransim::model::ListNodesResponse>::Create(channel_.get(), cq, rpcmethod_ListNodes_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::onos::ransim::model::ListNodesResponse>* NodeModel::Stub::PrepareAsyncListNodesRaw(::grpc::ClientContext* context, const ::onos::ransim::model::ListNodesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::onos::ransim::model::ListNodesResponse>::Create(channel_.get(), cq, rpcmethod_ListNodes_, context, request, false, nullptr);
}

::grpc::Status NodeModel::Stub::AgentControl(::grpc::ClientContext* context, const ::onos::ransim::model::AgentControlRequest& request, ::onos::ransim::model::AgentControlResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::ransim::model::AgentControlRequest, ::onos::ransim::model::AgentControlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_AgentControl_, context, request, response);
}

void NodeModel::Stub::async::AgentControl(::grpc::ClientContext* context, const ::onos::ransim::model::AgentControlRequest* request, ::onos::ransim::model::AgentControlResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::ransim::model::AgentControlRequest, ::onos::ransim::model::AgentControlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AgentControl_, context, request, response, std::move(f));
}

void NodeModel::Stub::async::AgentControl(::grpc::ClientContext* context, const ::onos::ransim::model::AgentControlRequest* request, ::onos::ransim::model::AgentControlResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_AgentControl_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::ransim::model::AgentControlResponse>* NodeModel::Stub::PrepareAsyncAgentControlRaw(::grpc::ClientContext* context, const ::onos::ransim::model::AgentControlRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::ransim::model::AgentControlResponse, ::onos::ransim::model::AgentControlRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_AgentControl_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::ransim::model::AgentControlResponse>* NodeModel::Stub::AsyncAgentControlRaw(::grpc::ClientContext* context, const ::onos::ransim::model::AgentControlRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncAgentControlRaw(context, request, cq);
  result->StartCall();
  return result;
}

NodeModel::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NodeModel_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NodeModel::Service, ::onos::ransim::model::PlmnIDRequest, ::onos::ransim::model::PlmnIDResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NodeModel::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::ransim::model::PlmnIDRequest* req,
             ::onos::ransim::model::PlmnIDResponse* resp) {
               return service->GetPlmnID(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NodeModel_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NodeModel::Service, ::onos::ransim::model::CreateNodeRequest, ::onos::ransim::model::CreateNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NodeModel::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::ransim::model::CreateNodeRequest* req,
             ::onos::ransim::model::CreateNodeResponse* resp) {
               return service->CreateNode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NodeModel_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NodeModel::Service, ::onos::ransim::model::GetNodeRequest, ::onos::ransim::model::GetNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NodeModel::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::ransim::model::GetNodeRequest* req,
             ::onos::ransim::model::GetNodeResponse* resp) {
               return service->GetNode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NodeModel_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NodeModel::Service, ::onos::ransim::model::UpdateNodeRequest, ::onos::ransim::model::UpdateNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NodeModel::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::ransim::model::UpdateNodeRequest* req,
             ::onos::ransim::model::UpdateNodeResponse* resp) {
               return service->UpdateNode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NodeModel_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NodeModel::Service, ::onos::ransim::model::DeleteNodeRequest, ::onos::ransim::model::DeleteNodeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NodeModel::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::ransim::model::DeleteNodeRequest* req,
             ::onos::ransim::model::DeleteNodeResponse* resp) {
               return service->DeleteNode(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NodeModel_method_names[5],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< NodeModel::Service, ::onos::ransim::model::WatchNodesRequest, ::onos::ransim::model::WatchNodesResponse>(
          [](NodeModel::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::ransim::model::WatchNodesRequest* req,
             ::grpc::ServerWriter<::onos::ransim::model::WatchNodesResponse>* writer) {
               return service->WatchNodes(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NodeModel_method_names[6],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< NodeModel::Service, ::onos::ransim::model::ListNodesRequest, ::onos::ransim::model::ListNodesResponse>(
          [](NodeModel::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::ransim::model::ListNodesRequest* req,
             ::grpc::ServerWriter<::onos::ransim::model::ListNodesResponse>* writer) {
               return service->ListNodes(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      NodeModel_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< NodeModel::Service, ::onos::ransim::model::AgentControlRequest, ::onos::ransim::model::AgentControlResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](NodeModel::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::ransim::model::AgentControlRequest* req,
             ::onos::ransim::model::AgentControlResponse* resp) {
               return service->AgentControl(ctx, req, resp);
             }, this)));
}

NodeModel::Service::~Service() {
}

::grpc::Status NodeModel::Service::GetPlmnID(::grpc::ServerContext* context, const ::onos::ransim::model::PlmnIDRequest* request, ::onos::ransim::model::PlmnIDResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NodeModel::Service::CreateNode(::grpc::ServerContext* context, const ::onos::ransim::model::CreateNodeRequest* request, ::onos::ransim::model::CreateNodeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NodeModel::Service::GetNode(::grpc::ServerContext* context, const ::onos::ransim::model::GetNodeRequest* request, ::onos::ransim::model::GetNodeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NodeModel::Service::UpdateNode(::grpc::ServerContext* context, const ::onos::ransim::model::UpdateNodeRequest* request, ::onos::ransim::model::UpdateNodeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NodeModel::Service::DeleteNode(::grpc::ServerContext* context, const ::onos::ransim::model::DeleteNodeRequest* request, ::onos::ransim::model::DeleteNodeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NodeModel::Service::WatchNodes(::grpc::ServerContext* context, const ::onos::ransim::model::WatchNodesRequest* request, ::grpc::ServerWriter< ::onos::ransim::model::WatchNodesResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NodeModel::Service::ListNodes(::grpc::ServerContext* context, const ::onos::ransim::model::ListNodesRequest* request, ::grpc::ServerWriter< ::onos::ransim::model::ListNodesResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status NodeModel::Service::AgentControl(::grpc::ServerContext* context, const ::onos::ransim::model::AgentControlRequest* request, ::onos::ransim::model::AgentControlResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* CellModel_method_names[] = {
  "/onos.ransim.model.CellModel/CreateCell",
  "/onos.ransim.model.CellModel/DeleteCell",
  "/onos.ransim.model.CellModel/UpdateCell",
  "/onos.ransim.model.CellModel/GetCell",
  "/onos.ransim.model.CellModel/WatchCells",
  "/onos.ransim.model.CellModel/ListCells",
};

std::unique_ptr< CellModel::Stub> CellModel::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< CellModel::Stub> stub(new CellModel::Stub(channel, options));
  return stub;
}

CellModel::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateCell_(CellModel_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteCell_(CellModel_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateCell_(CellModel_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCell_(CellModel_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WatchCells_(CellModel_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ListCells_(CellModel_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status CellModel::Stub::CreateCell(::grpc::ClientContext* context, const ::onos::ransim::model::CreateCellRequest& request, ::onos::ransim::model::CreateCellResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::ransim::model::CreateCellRequest, ::onos::ransim::model::CreateCellResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateCell_, context, request, response);
}

void CellModel::Stub::async::CreateCell(::grpc::ClientContext* context, const ::onos::ransim::model::CreateCellRequest* request, ::onos::ransim::model::CreateCellResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::ransim::model::CreateCellRequest, ::onos::ransim::model::CreateCellResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateCell_, context, request, response, std::move(f));
}

void CellModel::Stub::async::CreateCell(::grpc::ClientContext* context, const ::onos::ransim::model::CreateCellRequest* request, ::onos::ransim::model::CreateCellResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateCell_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::ransim::model::CreateCellResponse>* CellModel::Stub::PrepareAsyncCreateCellRaw(::grpc::ClientContext* context, const ::onos::ransim::model::CreateCellRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::ransim::model::CreateCellResponse, ::onos::ransim::model::CreateCellRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateCell_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::ransim::model::CreateCellResponse>* CellModel::Stub::AsyncCreateCellRaw(::grpc::ClientContext* context, const ::onos::ransim::model::CreateCellRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateCellRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CellModel::Stub::DeleteCell(::grpc::ClientContext* context, const ::onos::ransim::model::DeleteCellRequest& request, ::onos::ransim::model::DeleteCellResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::ransim::model::DeleteCellRequest, ::onos::ransim::model::DeleteCellResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteCell_, context, request, response);
}

void CellModel::Stub::async::DeleteCell(::grpc::ClientContext* context, const ::onos::ransim::model::DeleteCellRequest* request, ::onos::ransim::model::DeleteCellResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::ransim::model::DeleteCellRequest, ::onos::ransim::model::DeleteCellResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteCell_, context, request, response, std::move(f));
}

void CellModel::Stub::async::DeleteCell(::grpc::ClientContext* context, const ::onos::ransim::model::DeleteCellRequest* request, ::onos::ransim::model::DeleteCellResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteCell_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::ransim::model::DeleteCellResponse>* CellModel::Stub::PrepareAsyncDeleteCellRaw(::grpc::ClientContext* context, const ::onos::ransim::model::DeleteCellRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::ransim::model::DeleteCellResponse, ::onos::ransim::model::DeleteCellRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteCell_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::ransim::model::DeleteCellResponse>* CellModel::Stub::AsyncDeleteCellRaw(::grpc::ClientContext* context, const ::onos::ransim::model::DeleteCellRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteCellRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CellModel::Stub::UpdateCell(::grpc::ClientContext* context, const ::onos::ransim::model::UpdateCellRequest& request, ::onos::ransim::model::UpdateCellResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::ransim::model::UpdateCellRequest, ::onos::ransim::model::UpdateCellResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateCell_, context, request, response);
}

void CellModel::Stub::async::UpdateCell(::grpc::ClientContext* context, const ::onos::ransim::model::UpdateCellRequest* request, ::onos::ransim::model::UpdateCellResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::ransim::model::UpdateCellRequest, ::onos::ransim::model::UpdateCellResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateCell_, context, request, response, std::move(f));
}

void CellModel::Stub::async::UpdateCell(::grpc::ClientContext* context, const ::onos::ransim::model::UpdateCellRequest* request, ::onos::ransim::model::UpdateCellResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateCell_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::ransim::model::UpdateCellResponse>* CellModel::Stub::PrepareAsyncUpdateCellRaw(::grpc::ClientContext* context, const ::onos::ransim::model::UpdateCellRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::ransim::model::UpdateCellResponse, ::onos::ransim::model::UpdateCellRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateCell_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::ransim::model::UpdateCellResponse>* CellModel::Stub::AsyncUpdateCellRaw(::grpc::ClientContext* context, const ::onos::ransim::model::UpdateCellRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateCellRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status CellModel::Stub::GetCell(::grpc::ClientContext* context, const ::onos::ransim::model::GetCellRequest& request, ::onos::ransim::model::GetCellResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::ransim::model::GetCellRequest, ::onos::ransim::model::GetCellResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCell_, context, request, response);
}

void CellModel::Stub::async::GetCell(::grpc::ClientContext* context, const ::onos::ransim::model::GetCellRequest* request, ::onos::ransim::model::GetCellResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::ransim::model::GetCellRequest, ::onos::ransim::model::GetCellResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCell_, context, request, response, std::move(f));
}

void CellModel::Stub::async::GetCell(::grpc::ClientContext* context, const ::onos::ransim::model::GetCellRequest* request, ::onos::ransim::model::GetCellResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCell_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::ransim::model::GetCellResponse>* CellModel::Stub::PrepareAsyncGetCellRaw(::grpc::ClientContext* context, const ::onos::ransim::model::GetCellRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::ransim::model::GetCellResponse, ::onos::ransim::model::GetCellRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCell_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::ransim::model::GetCellResponse>* CellModel::Stub::AsyncGetCellRaw(::grpc::ClientContext* context, const ::onos::ransim::model::GetCellRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCellRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::onos::ransim::model::WatchCellsResponse>* CellModel::Stub::WatchCellsRaw(::grpc::ClientContext* context, const ::onos::ransim::model::WatchCellsRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::onos::ransim::model::WatchCellsResponse>::Create(channel_.get(), rpcmethod_WatchCells_, context, request);
}

void CellModel::Stub::async::WatchCells(::grpc::ClientContext* context, const ::onos::ransim::model::WatchCellsRequest* request, ::grpc::ClientReadReactor< ::onos::ransim::model::WatchCellsResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::onos::ransim::model::WatchCellsResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_WatchCells_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::onos::ransim::model::WatchCellsResponse>* CellModel::Stub::AsyncWatchCellsRaw(::grpc::ClientContext* context, const ::onos::ransim::model::WatchCellsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::onos::ransim::model::WatchCellsResponse>::Create(channel_.get(), cq, rpcmethod_WatchCells_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::onos::ransim::model::WatchCellsResponse>* CellModel::Stub::PrepareAsyncWatchCellsRaw(::grpc::ClientContext* context, const ::onos::ransim::model::WatchCellsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::onos::ransim::model::WatchCellsResponse>::Create(channel_.get(), cq, rpcmethod_WatchCells_, context, request, false, nullptr);
}

::grpc::ClientReader< ::onos::ransim::model::ListCellsResponse>* CellModel::Stub::ListCellsRaw(::grpc::ClientContext* context, const ::onos::ransim::model::ListCellsRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::onos::ransim::model::ListCellsResponse>::Create(channel_.get(), rpcmethod_ListCells_, context, request);
}

void CellModel::Stub::async::ListCells(::grpc::ClientContext* context, const ::onos::ransim::model::ListCellsRequest* request, ::grpc::ClientReadReactor< ::onos::ransim::model::ListCellsResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::onos::ransim::model::ListCellsResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_ListCells_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::onos::ransim::model::ListCellsResponse>* CellModel::Stub::AsyncListCellsRaw(::grpc::ClientContext* context, const ::onos::ransim::model::ListCellsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::onos::ransim::model::ListCellsResponse>::Create(channel_.get(), cq, rpcmethod_ListCells_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::onos::ransim::model::ListCellsResponse>* CellModel::Stub::PrepareAsyncListCellsRaw(::grpc::ClientContext* context, const ::onos::ransim::model::ListCellsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::onos::ransim::model::ListCellsResponse>::Create(channel_.get(), cq, rpcmethod_ListCells_, context, request, false, nullptr);
}

CellModel::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CellModel_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CellModel::Service, ::onos::ransim::model::CreateCellRequest, ::onos::ransim::model::CreateCellResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CellModel::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::ransim::model::CreateCellRequest* req,
             ::onos::ransim::model::CreateCellResponse* resp) {
               return service->CreateCell(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CellModel_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CellModel::Service, ::onos::ransim::model::DeleteCellRequest, ::onos::ransim::model::DeleteCellResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CellModel::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::ransim::model::DeleteCellRequest* req,
             ::onos::ransim::model::DeleteCellResponse* resp) {
               return service->DeleteCell(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CellModel_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CellModel::Service, ::onos::ransim::model::UpdateCellRequest, ::onos::ransim::model::UpdateCellResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CellModel::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::ransim::model::UpdateCellRequest* req,
             ::onos::ransim::model::UpdateCellResponse* resp) {
               return service->UpdateCell(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CellModel_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< CellModel::Service, ::onos::ransim::model::GetCellRequest, ::onos::ransim::model::GetCellResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](CellModel::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::ransim::model::GetCellRequest* req,
             ::onos::ransim::model::GetCellResponse* resp) {
               return service->GetCell(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CellModel_method_names[4],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< CellModel::Service, ::onos::ransim::model::WatchCellsRequest, ::onos::ransim::model::WatchCellsResponse>(
          [](CellModel::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::ransim::model::WatchCellsRequest* req,
             ::grpc::ServerWriter<::onos::ransim::model::WatchCellsResponse>* writer) {
               return service->WatchCells(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      CellModel_method_names[5],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< CellModel::Service, ::onos::ransim::model::ListCellsRequest, ::onos::ransim::model::ListCellsResponse>(
          [](CellModel::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::ransim::model::ListCellsRequest* req,
             ::grpc::ServerWriter<::onos::ransim::model::ListCellsResponse>* writer) {
               return service->ListCells(ctx, req, writer);
             }, this)));
}

CellModel::Service::~Service() {
}

::grpc::Status CellModel::Service::CreateCell(::grpc::ServerContext* context, const ::onos::ransim::model::CreateCellRequest* request, ::onos::ransim::model::CreateCellResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CellModel::Service::DeleteCell(::grpc::ServerContext* context, const ::onos::ransim::model::DeleteCellRequest* request, ::onos::ransim::model::DeleteCellResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CellModel::Service::UpdateCell(::grpc::ServerContext* context, const ::onos::ransim::model::UpdateCellRequest* request, ::onos::ransim::model::UpdateCellResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CellModel::Service::GetCell(::grpc::ServerContext* context, const ::onos::ransim::model::GetCellRequest* request, ::onos::ransim::model::GetCellResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CellModel::Service::WatchCells(::grpc::ServerContext* context, const ::onos::ransim::model::WatchCellsRequest* request, ::grpc::ServerWriter< ::onos::ransim::model::WatchCellsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status CellModel::Service::ListCells(::grpc::ServerContext* context, const ::onos::ransim::model::ListCellsRequest* request, ::grpc::ServerWriter< ::onos::ransim::model::ListCellsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* RouteModel_method_names[] = {
  "/onos.ransim.model.RouteModel/CreateRoute",
  "/onos.ransim.model.RouteModel/DeleteRoute",
  "/onos.ransim.model.RouteModel/GetRoute",
  "/onos.ransim.model.RouteModel/WatchRoutes",
  "/onos.ransim.model.RouteModel/ListRoutes",
};

std::unique_ptr< RouteModel::Stub> RouteModel::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RouteModel::Stub> stub(new RouteModel::Stub(channel, options));
  return stub;
}

RouteModel::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateRoute_(RouteModel_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteRoute_(RouteModel_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetRoute_(RouteModel_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WatchRoutes_(RouteModel_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ListRoutes_(RouteModel_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status RouteModel::Stub::CreateRoute(::grpc::ClientContext* context, const ::onos::ransim::model::CreateRouteRequest& request, ::onos::ransim::model::CreateRouteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::ransim::model::CreateRouteRequest, ::onos::ransim::model::CreateRouteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateRoute_, context, request, response);
}

void RouteModel::Stub::async::CreateRoute(::grpc::ClientContext* context, const ::onos::ransim::model::CreateRouteRequest* request, ::onos::ransim::model::CreateRouteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::ransim::model::CreateRouteRequest, ::onos::ransim::model::CreateRouteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateRoute_, context, request, response, std::move(f));
}

void RouteModel::Stub::async::CreateRoute(::grpc::ClientContext* context, const ::onos::ransim::model::CreateRouteRequest* request, ::onos::ransim::model::CreateRouteResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateRoute_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::ransim::model::CreateRouteResponse>* RouteModel::Stub::PrepareAsyncCreateRouteRaw(::grpc::ClientContext* context, const ::onos::ransim::model::CreateRouteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::ransim::model::CreateRouteResponse, ::onos::ransim::model::CreateRouteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateRoute_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::ransim::model::CreateRouteResponse>* RouteModel::Stub::AsyncCreateRouteRaw(::grpc::ClientContext* context, const ::onos::ransim::model::CreateRouteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateRouteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RouteModel::Stub::DeleteRoute(::grpc::ClientContext* context, const ::onos::ransim::model::DeleteRouteRequest& request, ::onos::ransim::model::DeleteRouteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::ransim::model::DeleteRouteRequest, ::onos::ransim::model::DeleteRouteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteRoute_, context, request, response);
}

void RouteModel::Stub::async::DeleteRoute(::grpc::ClientContext* context, const ::onos::ransim::model::DeleteRouteRequest* request, ::onos::ransim::model::DeleteRouteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::ransim::model::DeleteRouteRequest, ::onos::ransim::model::DeleteRouteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteRoute_, context, request, response, std::move(f));
}

void RouteModel::Stub::async::DeleteRoute(::grpc::ClientContext* context, const ::onos::ransim::model::DeleteRouteRequest* request, ::onos::ransim::model::DeleteRouteResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteRoute_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::ransim::model::DeleteRouteResponse>* RouteModel::Stub::PrepareAsyncDeleteRouteRaw(::grpc::ClientContext* context, const ::onos::ransim::model::DeleteRouteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::ransim::model::DeleteRouteResponse, ::onos::ransim::model::DeleteRouteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteRoute_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::ransim::model::DeleteRouteResponse>* RouteModel::Stub::AsyncDeleteRouteRaw(::grpc::ClientContext* context, const ::onos::ransim::model::DeleteRouteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteRouteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status RouteModel::Stub::GetRoute(::grpc::ClientContext* context, const ::onos::ransim::model::GetRouteRequest& request, ::onos::ransim::model::GetRouteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::ransim::model::GetRouteRequest, ::onos::ransim::model::GetRouteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetRoute_, context, request, response);
}

void RouteModel::Stub::async::GetRoute(::grpc::ClientContext* context, const ::onos::ransim::model::GetRouteRequest* request, ::onos::ransim::model::GetRouteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::ransim::model::GetRouteRequest, ::onos::ransim::model::GetRouteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRoute_, context, request, response, std::move(f));
}

void RouteModel::Stub::async::GetRoute(::grpc::ClientContext* context, const ::onos::ransim::model::GetRouteRequest* request, ::onos::ransim::model::GetRouteResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetRoute_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::ransim::model::GetRouteResponse>* RouteModel::Stub::PrepareAsyncGetRouteRaw(::grpc::ClientContext* context, const ::onos::ransim::model::GetRouteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::ransim::model::GetRouteResponse, ::onos::ransim::model::GetRouteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetRoute_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::ransim::model::GetRouteResponse>* RouteModel::Stub::AsyncGetRouteRaw(::grpc::ClientContext* context, const ::onos::ransim::model::GetRouteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRouteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::onos::ransim::model::WatchRoutesResponse>* RouteModel::Stub::WatchRoutesRaw(::grpc::ClientContext* context, const ::onos::ransim::model::WatchRoutesRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::onos::ransim::model::WatchRoutesResponse>::Create(channel_.get(), rpcmethod_WatchRoutes_, context, request);
}

void RouteModel::Stub::async::WatchRoutes(::grpc::ClientContext* context, const ::onos::ransim::model::WatchRoutesRequest* request, ::grpc::ClientReadReactor< ::onos::ransim::model::WatchRoutesResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::onos::ransim::model::WatchRoutesResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_WatchRoutes_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::onos::ransim::model::WatchRoutesResponse>* RouteModel::Stub::AsyncWatchRoutesRaw(::grpc::ClientContext* context, const ::onos::ransim::model::WatchRoutesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::onos::ransim::model::WatchRoutesResponse>::Create(channel_.get(), cq, rpcmethod_WatchRoutes_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::onos::ransim::model::WatchRoutesResponse>* RouteModel::Stub::PrepareAsyncWatchRoutesRaw(::grpc::ClientContext* context, const ::onos::ransim::model::WatchRoutesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::onos::ransim::model::WatchRoutesResponse>::Create(channel_.get(), cq, rpcmethod_WatchRoutes_, context, request, false, nullptr);
}

::grpc::ClientReader< ::onos::ransim::model::ListRoutesResponse>* RouteModel::Stub::ListRoutesRaw(::grpc::ClientContext* context, const ::onos::ransim::model::ListRoutesRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::onos::ransim::model::ListRoutesResponse>::Create(channel_.get(), rpcmethod_ListRoutes_, context, request);
}

void RouteModel::Stub::async::ListRoutes(::grpc::ClientContext* context, const ::onos::ransim::model::ListRoutesRequest* request, ::grpc::ClientReadReactor< ::onos::ransim::model::ListRoutesResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::onos::ransim::model::ListRoutesResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_ListRoutes_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::onos::ransim::model::ListRoutesResponse>* RouteModel::Stub::AsyncListRoutesRaw(::grpc::ClientContext* context, const ::onos::ransim::model::ListRoutesRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::onos::ransim::model::ListRoutesResponse>::Create(channel_.get(), cq, rpcmethod_ListRoutes_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::onos::ransim::model::ListRoutesResponse>* RouteModel::Stub::PrepareAsyncListRoutesRaw(::grpc::ClientContext* context, const ::onos::ransim::model::ListRoutesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::onos::ransim::model::ListRoutesResponse>::Create(channel_.get(), cq, rpcmethod_ListRoutes_, context, request, false, nullptr);
}

RouteModel::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RouteModel_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RouteModel::Service, ::onos::ransim::model::CreateRouteRequest, ::onos::ransim::model::CreateRouteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RouteModel::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::ransim::model::CreateRouteRequest* req,
             ::onos::ransim::model::CreateRouteResponse* resp) {
               return service->CreateRoute(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RouteModel_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RouteModel::Service, ::onos::ransim::model::DeleteRouteRequest, ::onos::ransim::model::DeleteRouteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RouteModel::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::ransim::model::DeleteRouteRequest* req,
             ::onos::ransim::model::DeleteRouteResponse* resp) {
               return service->DeleteRoute(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RouteModel_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RouteModel::Service, ::onos::ransim::model::GetRouteRequest, ::onos::ransim::model::GetRouteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](RouteModel::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::ransim::model::GetRouteRequest* req,
             ::onos::ransim::model::GetRouteResponse* resp) {
               return service->GetRoute(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RouteModel_method_names[3],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< RouteModel::Service, ::onos::ransim::model::WatchRoutesRequest, ::onos::ransim::model::WatchRoutesResponse>(
          [](RouteModel::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::ransim::model::WatchRoutesRequest* req,
             ::grpc::ServerWriter<::onos::ransim::model::WatchRoutesResponse>* writer) {
               return service->WatchRoutes(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RouteModel_method_names[4],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< RouteModel::Service, ::onos::ransim::model::ListRoutesRequest, ::onos::ransim::model::ListRoutesResponse>(
          [](RouteModel::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::ransim::model::ListRoutesRequest* req,
             ::grpc::ServerWriter<::onos::ransim::model::ListRoutesResponse>* writer) {
               return service->ListRoutes(ctx, req, writer);
             }, this)));
}

RouteModel::Service::~Service() {
}

::grpc::Status RouteModel::Service::CreateRoute(::grpc::ServerContext* context, const ::onos::ransim::model::CreateRouteRequest* request, ::onos::ransim::model::CreateRouteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RouteModel::Service::DeleteRoute(::grpc::ServerContext* context, const ::onos::ransim::model::DeleteRouteRequest* request, ::onos::ransim::model::DeleteRouteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RouteModel::Service::GetRoute(::grpc::ServerContext* context, const ::onos::ransim::model::GetRouteRequest* request, ::onos::ransim::model::GetRouteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RouteModel::Service::WatchRoutes(::grpc::ServerContext* context, const ::onos::ransim::model::WatchRoutesRequest* request, ::grpc::ServerWriter< ::onos::ransim::model::WatchRoutesResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RouteModel::Service::ListRoutes(::grpc::ServerContext* context, const ::onos::ransim::model::ListRoutesRequest* request, ::grpc::ServerWriter< ::onos::ransim::model::ListRoutesResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* UEModel_method_names[] = {
  "/onos.ransim.model.UEModel/GetUE",
  "/onos.ransim.model.UEModel/MoveToCell",
  "/onos.ransim.model.UEModel/MoveToLocation",
  "/onos.ransim.model.UEModel/DeleteUE",
  "/onos.ransim.model.UEModel/WatchUEs",
  "/onos.ransim.model.UEModel/ListUEs",
  "/onos.ransim.model.UEModel/GetUECount",
  "/onos.ransim.model.UEModel/SetUECount",
};

std::unique_ptr< UEModel::Stub> UEModel::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< UEModel::Stub> stub(new UEModel::Stub(channel, options));
  return stub;
}

UEModel::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetUE_(UEModel_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MoveToCell_(UEModel_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MoveToLocation_(UEModel_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteUE_(UEModel_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WatchUEs_(UEModel_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ListUEs_(UEModel_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetUECount_(UEModel_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetUECount_(UEModel_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status UEModel::Stub::GetUE(::grpc::ClientContext* context, const ::onos::ransim::model::GetUERequest& request, ::onos::ransim::model::GetUEResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::ransim::model::GetUERequest, ::onos::ransim::model::GetUEResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetUE_, context, request, response);
}

void UEModel::Stub::async::GetUE(::grpc::ClientContext* context, const ::onos::ransim::model::GetUERequest* request, ::onos::ransim::model::GetUEResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::ransim::model::GetUERequest, ::onos::ransim::model::GetUEResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUE_, context, request, response, std::move(f));
}

void UEModel::Stub::async::GetUE(::grpc::ClientContext* context, const ::onos::ransim::model::GetUERequest* request, ::onos::ransim::model::GetUEResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUE_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::ransim::model::GetUEResponse>* UEModel::Stub::PrepareAsyncGetUERaw(::grpc::ClientContext* context, const ::onos::ransim::model::GetUERequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::ransim::model::GetUEResponse, ::onos::ransim::model::GetUERequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetUE_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::ransim::model::GetUEResponse>* UEModel::Stub::AsyncGetUERaw(::grpc::ClientContext* context, const ::onos::ransim::model::GetUERequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetUERaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UEModel::Stub::MoveToCell(::grpc::ClientContext* context, const ::onos::ransim::model::MoveToCellRequest& request, ::onos::ransim::model::MoveToCellResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::ransim::model::MoveToCellRequest, ::onos::ransim::model::MoveToCellResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MoveToCell_, context, request, response);
}

void UEModel::Stub::async::MoveToCell(::grpc::ClientContext* context, const ::onos::ransim::model::MoveToCellRequest* request, ::onos::ransim::model::MoveToCellResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::ransim::model::MoveToCellRequest, ::onos::ransim::model::MoveToCellResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MoveToCell_, context, request, response, std::move(f));
}

void UEModel::Stub::async::MoveToCell(::grpc::ClientContext* context, const ::onos::ransim::model::MoveToCellRequest* request, ::onos::ransim::model::MoveToCellResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MoveToCell_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::ransim::model::MoveToCellResponse>* UEModel::Stub::PrepareAsyncMoveToCellRaw(::grpc::ClientContext* context, const ::onos::ransim::model::MoveToCellRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::ransim::model::MoveToCellResponse, ::onos::ransim::model::MoveToCellRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MoveToCell_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::ransim::model::MoveToCellResponse>* UEModel::Stub::AsyncMoveToCellRaw(::grpc::ClientContext* context, const ::onos::ransim::model::MoveToCellRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMoveToCellRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UEModel::Stub::MoveToLocation(::grpc::ClientContext* context, const ::onos::ransim::model::MoveToLocationRequest& request, ::onos::ransim::model::MoveToLocationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::ransim::model::MoveToLocationRequest, ::onos::ransim::model::MoveToLocationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_MoveToLocation_, context, request, response);
}

void UEModel::Stub::async::MoveToLocation(::grpc::ClientContext* context, const ::onos::ransim::model::MoveToLocationRequest* request, ::onos::ransim::model::MoveToLocationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::ransim::model::MoveToLocationRequest, ::onos::ransim::model::MoveToLocationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MoveToLocation_, context, request, response, std::move(f));
}

void UEModel::Stub::async::MoveToLocation(::grpc::ClientContext* context, const ::onos::ransim::model::MoveToLocationRequest* request, ::onos::ransim::model::MoveToLocationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_MoveToLocation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::ransim::model::MoveToLocationResponse>* UEModel::Stub::PrepareAsyncMoveToLocationRaw(::grpc::ClientContext* context, const ::onos::ransim::model::MoveToLocationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::ransim::model::MoveToLocationResponse, ::onos::ransim::model::MoveToLocationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_MoveToLocation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::ransim::model::MoveToLocationResponse>* UEModel::Stub::AsyncMoveToLocationRaw(::grpc::ClientContext* context, const ::onos::ransim::model::MoveToLocationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncMoveToLocationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UEModel::Stub::DeleteUE(::grpc::ClientContext* context, const ::onos::ransim::model::DeleteUERequest& request, ::onos::ransim::model::DeleteUEResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::ransim::model::DeleteUERequest, ::onos::ransim::model::DeleteUEResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteUE_, context, request, response);
}

void UEModel::Stub::async::DeleteUE(::grpc::ClientContext* context, const ::onos::ransim::model::DeleteUERequest* request, ::onos::ransim::model::DeleteUEResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::ransim::model::DeleteUERequest, ::onos::ransim::model::DeleteUEResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteUE_, context, request, response, std::move(f));
}

void UEModel::Stub::async::DeleteUE(::grpc::ClientContext* context, const ::onos::ransim::model::DeleteUERequest* request, ::onos::ransim::model::DeleteUEResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteUE_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::ransim::model::DeleteUEResponse>* UEModel::Stub::PrepareAsyncDeleteUERaw(::grpc::ClientContext* context, const ::onos::ransim::model::DeleteUERequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::ransim::model::DeleteUEResponse, ::onos::ransim::model::DeleteUERequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteUE_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::ransim::model::DeleteUEResponse>* UEModel::Stub::AsyncDeleteUERaw(::grpc::ClientContext* context, const ::onos::ransim::model::DeleteUERequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteUERaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::onos::ransim::model::WatchUEsResponse>* UEModel::Stub::WatchUEsRaw(::grpc::ClientContext* context, const ::onos::ransim::model::WatchUEsRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::onos::ransim::model::WatchUEsResponse>::Create(channel_.get(), rpcmethod_WatchUEs_, context, request);
}

void UEModel::Stub::async::WatchUEs(::grpc::ClientContext* context, const ::onos::ransim::model::WatchUEsRequest* request, ::grpc::ClientReadReactor< ::onos::ransim::model::WatchUEsResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::onos::ransim::model::WatchUEsResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_WatchUEs_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::onos::ransim::model::WatchUEsResponse>* UEModel::Stub::AsyncWatchUEsRaw(::grpc::ClientContext* context, const ::onos::ransim::model::WatchUEsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::onos::ransim::model::WatchUEsResponse>::Create(channel_.get(), cq, rpcmethod_WatchUEs_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::onos::ransim::model::WatchUEsResponse>* UEModel::Stub::PrepareAsyncWatchUEsRaw(::grpc::ClientContext* context, const ::onos::ransim::model::WatchUEsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::onos::ransim::model::WatchUEsResponse>::Create(channel_.get(), cq, rpcmethod_WatchUEs_, context, request, false, nullptr);
}

::grpc::ClientReader< ::onos::ransim::model::ListUEsResponse>* UEModel::Stub::ListUEsRaw(::grpc::ClientContext* context, const ::onos::ransim::model::ListUEsRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::onos::ransim::model::ListUEsResponse>::Create(channel_.get(), rpcmethod_ListUEs_, context, request);
}

void UEModel::Stub::async::ListUEs(::grpc::ClientContext* context, const ::onos::ransim::model::ListUEsRequest* request, ::grpc::ClientReadReactor< ::onos::ransim::model::ListUEsResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::onos::ransim::model::ListUEsResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_ListUEs_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::onos::ransim::model::ListUEsResponse>* UEModel::Stub::AsyncListUEsRaw(::grpc::ClientContext* context, const ::onos::ransim::model::ListUEsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::onos::ransim::model::ListUEsResponse>::Create(channel_.get(), cq, rpcmethod_ListUEs_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::onos::ransim::model::ListUEsResponse>* UEModel::Stub::PrepareAsyncListUEsRaw(::grpc::ClientContext* context, const ::onos::ransim::model::ListUEsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::onos::ransim::model::ListUEsResponse>::Create(channel_.get(), cq, rpcmethod_ListUEs_, context, request, false, nullptr);
}

::grpc::Status UEModel::Stub::GetUECount(::grpc::ClientContext* context, const ::onos::ransim::model::GetUECountRequest& request, ::onos::ransim::model::GetUECountResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::ransim::model::GetUECountRequest, ::onos::ransim::model::GetUECountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetUECount_, context, request, response);
}

void UEModel::Stub::async::GetUECount(::grpc::ClientContext* context, const ::onos::ransim::model::GetUECountRequest* request, ::onos::ransim::model::GetUECountResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::ransim::model::GetUECountRequest, ::onos::ransim::model::GetUECountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUECount_, context, request, response, std::move(f));
}

void UEModel::Stub::async::GetUECount(::grpc::ClientContext* context, const ::onos::ransim::model::GetUECountRequest* request, ::onos::ransim::model::GetUECountResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUECount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::ransim::model::GetUECountResponse>* UEModel::Stub::PrepareAsyncGetUECountRaw(::grpc::ClientContext* context, const ::onos::ransim::model::GetUECountRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::ransim::model::GetUECountResponse, ::onos::ransim::model::GetUECountRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetUECount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::ransim::model::GetUECountResponse>* UEModel::Stub::AsyncGetUECountRaw(::grpc::ClientContext* context, const ::onos::ransim::model::GetUECountRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetUECountRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UEModel::Stub::SetUECount(::grpc::ClientContext* context, const ::onos::ransim::model::SetUECountRequest& request, ::onos::ransim::model::SetUECountResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::ransim::model::SetUECountRequest, ::onos::ransim::model::SetUECountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetUECount_, context, request, response);
}

void UEModel::Stub::async::SetUECount(::grpc::ClientContext* context, const ::onos::ransim::model::SetUECountRequest* request, ::onos::ransim::model::SetUECountResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::ransim::model::SetUECountRequest, ::onos::ransim::model::SetUECountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetUECount_, context, request, response, std::move(f));
}

void UEModel::Stub::async::SetUECount(::grpc::ClientContext* context, const ::onos::ransim::model::SetUECountRequest* request, ::onos::ransim::model::SetUECountResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetUECount_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::ransim::model::SetUECountResponse>* UEModel::Stub::PrepareAsyncSetUECountRaw(::grpc::ClientContext* context, const ::onos::ransim::model::SetUECountRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::ransim::model::SetUECountResponse, ::onos::ransim::model::SetUECountRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetUECount_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::ransim::model::SetUECountResponse>* UEModel::Stub::AsyncSetUECountRaw(::grpc::ClientContext* context, const ::onos::ransim::model::SetUECountRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetUECountRaw(context, request, cq);
  result->StartCall();
  return result;
}

UEModel::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UEModel_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UEModel::Service, ::onos::ransim::model::GetUERequest, ::onos::ransim::model::GetUEResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UEModel::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::ransim::model::GetUERequest* req,
             ::onos::ransim::model::GetUEResponse* resp) {
               return service->GetUE(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UEModel_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UEModel::Service, ::onos::ransim::model::MoveToCellRequest, ::onos::ransim::model::MoveToCellResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UEModel::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::ransim::model::MoveToCellRequest* req,
             ::onos::ransim::model::MoveToCellResponse* resp) {
               return service->MoveToCell(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UEModel_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UEModel::Service, ::onos::ransim::model::MoveToLocationRequest, ::onos::ransim::model::MoveToLocationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UEModel::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::ransim::model::MoveToLocationRequest* req,
             ::onos::ransim::model::MoveToLocationResponse* resp) {
               return service->MoveToLocation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UEModel_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UEModel::Service, ::onos::ransim::model::DeleteUERequest, ::onos::ransim::model::DeleteUEResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UEModel::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::ransim::model::DeleteUERequest* req,
             ::onos::ransim::model::DeleteUEResponse* resp) {
               return service->DeleteUE(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UEModel_method_names[4],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< UEModel::Service, ::onos::ransim::model::WatchUEsRequest, ::onos::ransim::model::WatchUEsResponse>(
          [](UEModel::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::ransim::model::WatchUEsRequest* req,
             ::grpc::ServerWriter<::onos::ransim::model::WatchUEsResponse>* writer) {
               return service->WatchUEs(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UEModel_method_names[5],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< UEModel::Service, ::onos::ransim::model::ListUEsRequest, ::onos::ransim::model::ListUEsResponse>(
          [](UEModel::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::ransim::model::ListUEsRequest* req,
             ::grpc::ServerWriter<::onos::ransim::model::ListUEsResponse>* writer) {
               return service->ListUEs(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UEModel_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UEModel::Service, ::onos::ransim::model::GetUECountRequest, ::onos::ransim::model::GetUECountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UEModel::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::ransim::model::GetUECountRequest* req,
             ::onos::ransim::model::GetUECountResponse* resp) {
               return service->GetUECount(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UEModel_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UEModel::Service, ::onos::ransim::model::SetUECountRequest, ::onos::ransim::model::SetUECountResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UEModel::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::ransim::model::SetUECountRequest* req,
             ::onos::ransim::model::SetUECountResponse* resp) {
               return service->SetUECount(ctx, req, resp);
             }, this)));
}

UEModel::Service::~Service() {
}

::grpc::Status UEModel::Service::GetUE(::grpc::ServerContext* context, const ::onos::ransim::model::GetUERequest* request, ::onos::ransim::model::GetUEResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UEModel::Service::MoveToCell(::grpc::ServerContext* context, const ::onos::ransim::model::MoveToCellRequest* request, ::onos::ransim::model::MoveToCellResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UEModel::Service::MoveToLocation(::grpc::ServerContext* context, const ::onos::ransim::model::MoveToLocationRequest* request, ::onos::ransim::model::MoveToLocationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UEModel::Service::DeleteUE(::grpc::ServerContext* context, const ::onos::ransim::model::DeleteUERequest* request, ::onos::ransim::model::DeleteUEResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UEModel::Service::WatchUEs(::grpc::ServerContext* context, const ::onos::ransim::model::WatchUEsRequest* request, ::grpc::ServerWriter< ::onos::ransim::model::WatchUEsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UEModel::Service::ListUEs(::grpc::ServerContext* context, const ::onos::ransim::model::ListUEsRequest* request, ::grpc::ServerWriter< ::onos::ransim::model::ListUEsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UEModel::Service::GetUECount(::grpc::ServerContext* context, const ::onos::ransim::model::GetUECountRequest* request, ::onos::ransim::model::GetUECountResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UEModel::Service::SetUECount(::grpc::ServerContext* context, const ::onos::ransim::model::SetUECountRequest* request, ::onos::ransim::model::SetUECountResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace onos
}  // namespace ransim
}  // namespace model

