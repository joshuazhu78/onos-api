// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: onos/kpimon/kpimon.proto

#include "onos/kpimon/kpimon.pb.h"
#include "onos/kpimon/kpimon.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace onos {
namespace kpimon {

static const char* Kpimon_method_names[] = {
  "/onos.kpimon.Kpimon/ListMeasurements",
  "/onos.kpimon.Kpimon/WatchMeasurements",
};

std::unique_ptr< Kpimon::Stub> Kpimon::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Kpimon::Stub> stub(new Kpimon::Stub(channel, options));
  return stub;
}

Kpimon::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ListMeasurements_(Kpimon_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WatchMeasurements_(Kpimon_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status Kpimon::Stub::ListMeasurements(::grpc::ClientContext* context, const ::onos::kpimon::GetRequest& request, ::onos::kpimon::GetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::kpimon::GetRequest, ::onos::kpimon::GetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListMeasurements_, context, request, response);
}

void Kpimon::Stub::async::ListMeasurements(::grpc::ClientContext* context, const ::onos::kpimon::GetRequest* request, ::onos::kpimon::GetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::kpimon::GetRequest, ::onos::kpimon::GetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListMeasurements_, context, request, response, std::move(f));
}

void Kpimon::Stub::async::ListMeasurements(::grpc::ClientContext* context, const ::onos::kpimon::GetRequest* request, ::onos::kpimon::GetResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListMeasurements_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::kpimon::GetResponse>* Kpimon::Stub::PrepareAsyncListMeasurementsRaw(::grpc::ClientContext* context, const ::onos::kpimon::GetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::kpimon::GetResponse, ::onos::kpimon::GetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListMeasurements_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::kpimon::GetResponse>* Kpimon::Stub::AsyncListMeasurementsRaw(::grpc::ClientContext* context, const ::onos::kpimon::GetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListMeasurementsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::onos::kpimon::GetResponse>* Kpimon::Stub::WatchMeasurementsRaw(::grpc::ClientContext* context, const ::onos::kpimon::GetRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::onos::kpimon::GetResponse>::Create(channel_.get(), rpcmethod_WatchMeasurements_, context, request);
}

void Kpimon::Stub::async::WatchMeasurements(::grpc::ClientContext* context, const ::onos::kpimon::GetRequest* request, ::grpc::ClientReadReactor< ::onos::kpimon::GetResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::onos::kpimon::GetResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_WatchMeasurements_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::onos::kpimon::GetResponse>* Kpimon::Stub::AsyncWatchMeasurementsRaw(::grpc::ClientContext* context, const ::onos::kpimon::GetRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::onos::kpimon::GetResponse>::Create(channel_.get(), cq, rpcmethod_WatchMeasurements_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::onos::kpimon::GetResponse>* Kpimon::Stub::PrepareAsyncWatchMeasurementsRaw(::grpc::ClientContext* context, const ::onos::kpimon::GetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::onos::kpimon::GetResponse>::Create(channel_.get(), cq, rpcmethod_WatchMeasurements_, context, request, false, nullptr);
}

Kpimon::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Kpimon_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Kpimon::Service, ::onos::kpimon::GetRequest, ::onos::kpimon::GetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Kpimon::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::kpimon::GetRequest* req,
             ::onos::kpimon::GetResponse* resp) {
               return service->ListMeasurements(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Kpimon_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Kpimon::Service, ::onos::kpimon::GetRequest, ::onos::kpimon::GetResponse>(
          [](Kpimon::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::kpimon::GetRequest* req,
             ::grpc::ServerWriter<::onos::kpimon::GetResponse>* writer) {
               return service->WatchMeasurements(ctx, req, writer);
             }, this)));
}

Kpimon::Service::~Service() {
}

::grpc::Status Kpimon::Service::ListMeasurements(::grpc::ServerContext* context, const ::onos::kpimon::GetRequest* request, ::onos::kpimon::GetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Kpimon::Service::WatchMeasurements(::grpc::ServerContext* context, const ::onos::kpimon::GetRequest* request, ::grpc::ServerWriter< ::onos::kpimon::GetResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace onos
}  // namespace kpimon

