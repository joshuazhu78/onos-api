// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: onos/kpimon/kpimon.proto
// Original file comments:
// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0
//
#ifndef GRPC_onos_2fkpimon_2fkpimon_2eproto__INCLUDED
#define GRPC_onos_2fkpimon_2fkpimon_2eproto__INCLUDED

#include "onos/kpimon/kpimon.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace onos {
namespace kpimon {

class Kpimon final {
 public:
  static constexpr char const* service_full_name() {
    return "onos.kpimon.Kpimon";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status ListMeasurements(::grpc::ClientContext* context, const ::onos::kpimon::GetRequest& request, ::onos::kpimon::GetResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::kpimon::GetResponse>> AsyncListMeasurements(::grpc::ClientContext* context, const ::onos::kpimon::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::kpimon::GetResponse>>(AsyncListMeasurementsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::kpimon::GetResponse>> PrepareAsyncListMeasurements(::grpc::ClientContext* context, const ::onos::kpimon::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::kpimon::GetResponse>>(PrepareAsyncListMeasurementsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::onos::kpimon::GetResponse>> WatchMeasurements(::grpc::ClientContext* context, const ::onos::kpimon::GetRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::onos::kpimon::GetResponse>>(WatchMeasurementsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::onos::kpimon::GetResponse>> AsyncWatchMeasurements(::grpc::ClientContext* context, const ::onos::kpimon::GetRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::onos::kpimon::GetResponse>>(AsyncWatchMeasurementsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::onos::kpimon::GetResponse>> PrepareAsyncWatchMeasurements(::grpc::ClientContext* context, const ::onos::kpimon::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::onos::kpimon::GetResponse>>(PrepareAsyncWatchMeasurementsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void ListMeasurements(::grpc::ClientContext* context, const ::onos::kpimon::GetRequest* request, ::onos::kpimon::GetResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListMeasurements(::grpc::ClientContext* context, const ::onos::kpimon::GetRequest* request, ::onos::kpimon::GetResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void WatchMeasurements(::grpc::ClientContext* context, const ::onos::kpimon::GetRequest* request, ::grpc::ClientReadReactor< ::onos::kpimon::GetResponse>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::onos::kpimon::GetResponse>* AsyncListMeasurementsRaw(::grpc::ClientContext* context, const ::onos::kpimon::GetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::onos::kpimon::GetResponse>* PrepareAsyncListMeasurementsRaw(::grpc::ClientContext* context, const ::onos::kpimon::GetRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::onos::kpimon::GetResponse>* WatchMeasurementsRaw(::grpc::ClientContext* context, const ::onos::kpimon::GetRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::onos::kpimon::GetResponse>* AsyncWatchMeasurementsRaw(::grpc::ClientContext* context, const ::onos::kpimon::GetRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::onos::kpimon::GetResponse>* PrepareAsyncWatchMeasurementsRaw(::grpc::ClientContext* context, const ::onos::kpimon::GetRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ListMeasurements(::grpc::ClientContext* context, const ::onos::kpimon::GetRequest& request, ::onos::kpimon::GetResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::kpimon::GetResponse>> AsyncListMeasurements(::grpc::ClientContext* context, const ::onos::kpimon::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::kpimon::GetResponse>>(AsyncListMeasurementsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::kpimon::GetResponse>> PrepareAsyncListMeasurements(::grpc::ClientContext* context, const ::onos::kpimon::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::kpimon::GetResponse>>(PrepareAsyncListMeasurementsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::onos::kpimon::GetResponse>> WatchMeasurements(::grpc::ClientContext* context, const ::onos::kpimon::GetRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::onos::kpimon::GetResponse>>(WatchMeasurementsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::onos::kpimon::GetResponse>> AsyncWatchMeasurements(::grpc::ClientContext* context, const ::onos::kpimon::GetRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::onos::kpimon::GetResponse>>(AsyncWatchMeasurementsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::onos::kpimon::GetResponse>> PrepareAsyncWatchMeasurements(::grpc::ClientContext* context, const ::onos::kpimon::GetRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::onos::kpimon::GetResponse>>(PrepareAsyncWatchMeasurementsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ListMeasurements(::grpc::ClientContext* context, const ::onos::kpimon::GetRequest* request, ::onos::kpimon::GetResponse* response, std::function<void(::grpc::Status)>) override;
      void ListMeasurements(::grpc::ClientContext* context, const ::onos::kpimon::GetRequest* request, ::onos::kpimon::GetResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void WatchMeasurements(::grpc::ClientContext* context, const ::onos::kpimon::GetRequest* request, ::grpc::ClientReadReactor< ::onos::kpimon::GetResponse>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::onos::kpimon::GetResponse>* AsyncListMeasurementsRaw(::grpc::ClientContext* context, const ::onos::kpimon::GetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::onos::kpimon::GetResponse>* PrepareAsyncListMeasurementsRaw(::grpc::ClientContext* context, const ::onos::kpimon::GetRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::onos::kpimon::GetResponse>* WatchMeasurementsRaw(::grpc::ClientContext* context, const ::onos::kpimon::GetRequest& request) override;
    ::grpc::ClientAsyncReader< ::onos::kpimon::GetResponse>* AsyncWatchMeasurementsRaw(::grpc::ClientContext* context, const ::onos::kpimon::GetRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::onos::kpimon::GetResponse>* PrepareAsyncWatchMeasurementsRaw(::grpc::ClientContext* context, const ::onos::kpimon::GetRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListMeasurements_;
    const ::grpc::internal::RpcMethod rpcmethod_WatchMeasurements_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ListMeasurements(::grpc::ServerContext* context, const ::onos::kpimon::GetRequest* request, ::onos::kpimon::GetResponse* response);
    virtual ::grpc::Status WatchMeasurements(::grpc::ServerContext* context, const ::onos::kpimon::GetRequest* request, ::grpc::ServerWriter< ::onos::kpimon::GetResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListMeasurements : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListMeasurements() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListMeasurements() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListMeasurements(::grpc::ServerContext* /*context*/, const ::onos::kpimon::GetRequest* /*request*/, ::onos::kpimon::GetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListMeasurements(::grpc::ServerContext* context, ::onos::kpimon::GetRequest* request, ::grpc::ServerAsyncResponseWriter< ::onos::kpimon::GetResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_WatchMeasurements : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_WatchMeasurements() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_WatchMeasurements() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WatchMeasurements(::grpc::ServerContext* /*context*/, const ::onos::kpimon::GetRequest* /*request*/, ::grpc::ServerWriter< ::onos::kpimon::GetResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWatchMeasurements(::grpc::ServerContext* context, ::onos::kpimon::GetRequest* request, ::grpc::ServerAsyncWriter< ::onos::kpimon::GetResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListMeasurements<WithAsyncMethod_WatchMeasurements<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ListMeasurements : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListMeasurements() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::onos::kpimon::GetRequest, ::onos::kpimon::GetResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::onos::kpimon::GetRequest* request, ::onos::kpimon::GetResponse* response) { return this->ListMeasurements(context, request, response); }));}
    void SetMessageAllocatorFor_ListMeasurements(
        ::grpc::MessageAllocator< ::onos::kpimon::GetRequest, ::onos::kpimon::GetResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::onos::kpimon::GetRequest, ::onos::kpimon::GetResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListMeasurements() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListMeasurements(::grpc::ServerContext* /*context*/, const ::onos::kpimon::GetRequest* /*request*/, ::onos::kpimon::GetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListMeasurements(
      ::grpc::CallbackServerContext* /*context*/, const ::onos::kpimon::GetRequest* /*request*/, ::onos::kpimon::GetResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_WatchMeasurements : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_WatchMeasurements() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::onos::kpimon::GetRequest, ::onos::kpimon::GetResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::onos::kpimon::GetRequest* request) { return this->WatchMeasurements(context, request); }));
    }
    ~WithCallbackMethod_WatchMeasurements() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WatchMeasurements(::grpc::ServerContext* /*context*/, const ::onos::kpimon::GetRequest* /*request*/, ::grpc::ServerWriter< ::onos::kpimon::GetResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::onos::kpimon::GetResponse>* WatchMeasurements(
      ::grpc::CallbackServerContext* /*context*/, const ::onos::kpimon::GetRequest* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ListMeasurements<WithCallbackMethod_WatchMeasurements<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ListMeasurements : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListMeasurements() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListMeasurements() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListMeasurements(::grpc::ServerContext* /*context*/, const ::onos::kpimon::GetRequest* /*request*/, ::onos::kpimon::GetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_WatchMeasurements : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_WatchMeasurements() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_WatchMeasurements() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WatchMeasurements(::grpc::ServerContext* /*context*/, const ::onos::kpimon::GetRequest* /*request*/, ::grpc::ServerWriter< ::onos::kpimon::GetResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListMeasurements : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListMeasurements() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ListMeasurements() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListMeasurements(::grpc::ServerContext* /*context*/, const ::onos::kpimon::GetRequest* /*request*/, ::onos::kpimon::GetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListMeasurements(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_WatchMeasurements : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_WatchMeasurements() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_WatchMeasurements() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WatchMeasurements(::grpc::ServerContext* /*context*/, const ::onos::kpimon::GetRequest* /*request*/, ::grpc::ServerWriter< ::onos::kpimon::GetResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWatchMeasurements(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(1, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListMeasurements : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListMeasurements() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListMeasurements(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListMeasurements() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListMeasurements(::grpc::ServerContext* /*context*/, const ::onos::kpimon::GetRequest* /*request*/, ::onos::kpimon::GetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListMeasurements(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_WatchMeasurements : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_WatchMeasurements() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->WatchMeasurements(context, request); }));
    }
    ~WithRawCallbackMethod_WatchMeasurements() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WatchMeasurements(::grpc::ServerContext* /*context*/, const ::onos::kpimon::GetRequest* /*request*/, ::grpc::ServerWriter< ::onos::kpimon::GetResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* WatchMeasurements(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListMeasurements : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListMeasurements() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::onos::kpimon::GetRequest, ::onos::kpimon::GetResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::onos::kpimon::GetRequest, ::onos::kpimon::GetResponse>* streamer) {
                       return this->StreamedListMeasurements(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListMeasurements() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListMeasurements(::grpc::ServerContext* /*context*/, const ::onos::kpimon::GetRequest* /*request*/, ::onos::kpimon::GetResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListMeasurements(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::onos::kpimon::GetRequest,::onos::kpimon::GetResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListMeasurements<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_WatchMeasurements : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_WatchMeasurements() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::onos::kpimon::GetRequest, ::onos::kpimon::GetResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::onos::kpimon::GetRequest, ::onos::kpimon::GetResponse>* streamer) {
                       return this->StreamedWatchMeasurements(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_WatchMeasurements() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status WatchMeasurements(::grpc::ServerContext* /*context*/, const ::onos::kpimon::GetRequest* /*request*/, ::grpc::ServerWriter< ::onos::kpimon::GetResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedWatchMeasurements(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::onos::kpimon::GetRequest,::onos::kpimon::GetResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_WatchMeasurements<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListMeasurements<WithSplitStreamingMethod_WatchMeasurements<Service > > StreamedService;
};

}  // namespace kpimon
}  // namespace onos


#endif  // GRPC_onos_2fkpimon_2fkpimon_2eproto__INCLUDED
