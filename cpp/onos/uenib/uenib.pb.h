// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onos/uenib/uenib.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_onos_2fuenib_2fuenib_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_onos_2fuenib_2fuenib_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_onos_2fuenib_2fuenib_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_onos_2fuenib_2fuenib_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_onos_2fuenib_2fuenib_2eproto;
namespace onos {
namespace uenib {
class CreateUERequest;
struct CreateUERequestDefaultTypeInternal;
extern CreateUERequestDefaultTypeInternal _CreateUERequest_default_instance_;
class CreateUEResponse;
struct CreateUEResponseDefaultTypeInternal;
extern CreateUEResponseDefaultTypeInternal _CreateUEResponse_default_instance_;
class DeleteUERequest;
struct DeleteUERequestDefaultTypeInternal;
extern DeleteUERequestDefaultTypeInternal _DeleteUERequest_default_instance_;
class DeleteUEResponse;
struct DeleteUEResponseDefaultTypeInternal;
extern DeleteUEResponseDefaultTypeInternal _DeleteUEResponse_default_instance_;
class Event;
struct EventDefaultTypeInternal;
extern EventDefaultTypeInternal _Event_default_instance_;
class GetUERequest;
struct GetUERequestDefaultTypeInternal;
extern GetUERequestDefaultTypeInternal _GetUERequest_default_instance_;
class GetUEResponse;
struct GetUEResponseDefaultTypeInternal;
extern GetUEResponseDefaultTypeInternal _GetUEResponse_default_instance_;
class ListUERequest;
struct ListUERequestDefaultTypeInternal;
extern ListUERequestDefaultTypeInternal _ListUERequest_default_instance_;
class ListUEResponse;
struct ListUEResponseDefaultTypeInternal;
extern ListUEResponseDefaultTypeInternal _ListUEResponse_default_instance_;
class UE;
struct UEDefaultTypeInternal;
extern UEDefaultTypeInternal _UE_default_instance_;
class UE_AspectsEntry_DoNotUse;
struct UE_AspectsEntry_DoNotUseDefaultTypeInternal;
extern UE_AspectsEntry_DoNotUseDefaultTypeInternal _UE_AspectsEntry_DoNotUse_default_instance_;
class UpdateUERequest;
struct UpdateUERequestDefaultTypeInternal;
extern UpdateUERequestDefaultTypeInternal _UpdateUERequest_default_instance_;
class UpdateUEResponse;
struct UpdateUEResponseDefaultTypeInternal;
extern UpdateUEResponseDefaultTypeInternal _UpdateUEResponse_default_instance_;
class WatchUERequest;
struct WatchUERequestDefaultTypeInternal;
extern WatchUERequestDefaultTypeInternal _WatchUERequest_default_instance_;
class WatchUEResponse;
struct WatchUEResponseDefaultTypeInternal;
extern WatchUEResponseDefaultTypeInternal _WatchUEResponse_default_instance_;
}  // namespace uenib
}  // namespace onos
PROTOBUF_NAMESPACE_OPEN
template<> ::onos::uenib::CreateUERequest* Arena::CreateMaybeMessage<::onos::uenib::CreateUERequest>(Arena*);
template<> ::onos::uenib::CreateUEResponse* Arena::CreateMaybeMessage<::onos::uenib::CreateUEResponse>(Arena*);
template<> ::onos::uenib::DeleteUERequest* Arena::CreateMaybeMessage<::onos::uenib::DeleteUERequest>(Arena*);
template<> ::onos::uenib::DeleteUEResponse* Arena::CreateMaybeMessage<::onos::uenib::DeleteUEResponse>(Arena*);
template<> ::onos::uenib::Event* Arena::CreateMaybeMessage<::onos::uenib::Event>(Arena*);
template<> ::onos::uenib::GetUERequest* Arena::CreateMaybeMessage<::onos::uenib::GetUERequest>(Arena*);
template<> ::onos::uenib::GetUEResponse* Arena::CreateMaybeMessage<::onos::uenib::GetUEResponse>(Arena*);
template<> ::onos::uenib::ListUERequest* Arena::CreateMaybeMessage<::onos::uenib::ListUERequest>(Arena*);
template<> ::onos::uenib::ListUEResponse* Arena::CreateMaybeMessage<::onos::uenib::ListUEResponse>(Arena*);
template<> ::onos::uenib::UE* Arena::CreateMaybeMessage<::onos::uenib::UE>(Arena*);
template<> ::onos::uenib::UE_AspectsEntry_DoNotUse* Arena::CreateMaybeMessage<::onos::uenib::UE_AspectsEntry_DoNotUse>(Arena*);
template<> ::onos::uenib::UpdateUERequest* Arena::CreateMaybeMessage<::onos::uenib::UpdateUERequest>(Arena*);
template<> ::onos::uenib::UpdateUEResponse* Arena::CreateMaybeMessage<::onos::uenib::UpdateUEResponse>(Arena*);
template<> ::onos::uenib::WatchUERequest* Arena::CreateMaybeMessage<::onos::uenib::WatchUERequest>(Arena*);
template<> ::onos::uenib::WatchUEResponse* Arena::CreateMaybeMessage<::onos::uenib::WatchUEResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace onos {
namespace uenib {

enum EventType : int {
  NONE = 0,
  ADDED = 1,
  UPDATED = 2,
  REMOVED = 3,
  EventType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  EventType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool EventType_IsValid(int value);
constexpr EventType EventType_MIN = NONE;
constexpr EventType EventType_MAX = REMOVED;
constexpr int EventType_ARRAYSIZE = EventType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EventType_descriptor();
template<typename T>
inline const std::string& EventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EventType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EventType_descriptor(), enum_t_value);
}
inline bool EventType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EventType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EventType>(
    EventType_descriptor(), name, value);
}
// ===================================================================

class Event final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.uenib.Event) */ {
 public:
  inline Event() : Event(nullptr) {}
  ~Event() override;
  explicit constexpr Event(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Event(const Event& from);
  Event(Event&& from) noexcept
    : Event() {
    *this = ::std::move(from);
  }

  inline Event& operator=(const Event& from) {
    CopyFrom(from);
    return *this;
  }
  inline Event& operator=(Event&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Event& default_instance() {
    return *internal_default_instance();
  }
  static inline const Event* internal_default_instance() {
    return reinterpret_cast<const Event*>(
               &_Event_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Event& a, Event& b) {
    a.Swap(&b);
  }
  inline void Swap(Event* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Event* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Event* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Event>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Event& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Event& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Event* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.uenib.Event";
  }
  protected:
  explicit Event(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUeFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // .onos.uenib.UE ue = 2 [(.gogoproto.nullable) = false, (.gogoproto.customname) = "UE"];
  bool has_ue() const;
  private:
  bool _internal_has_ue() const;
  public:
  void clear_ue();
  const ::onos::uenib::UE& ue() const;
  PROTOBUF_NODISCARD ::onos::uenib::UE* release_ue();
  ::onos::uenib::UE* mutable_ue();
  void set_allocated_ue(::onos::uenib::UE* ue);
  private:
  const ::onos::uenib::UE& _internal_ue() const;
  ::onos::uenib::UE* _internal_mutable_ue();
  public:
  void unsafe_arena_set_allocated_ue(
      ::onos::uenib::UE* ue);
  ::onos::uenib::UE* unsafe_arena_release_ue();

  // .onos.uenib.EventType type = 1;
  void clear_type();
  ::onos::uenib::EventType type() const;
  void set_type(::onos::uenib::EventType value);
  private:
  ::onos::uenib::EventType _internal_type() const;
  void _internal_set_type(::onos::uenib::EventType value);
  public:

  // @@protoc_insertion_point(class_scope:onos.uenib.Event)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::uenib::UE* ue_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fuenib_2fuenib_2eproto;
};
// -------------------------------------------------------------------

class CreateUERequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.uenib.CreateUERequest) */ {
 public:
  inline CreateUERequest() : CreateUERequest(nullptr) {}
  ~CreateUERequest() override;
  explicit constexpr CreateUERequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateUERequest(const CreateUERequest& from);
  CreateUERequest(CreateUERequest&& from) noexcept
    : CreateUERequest() {
    *this = ::std::move(from);
  }

  inline CreateUERequest& operator=(const CreateUERequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateUERequest& operator=(CreateUERequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateUERequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateUERequest* internal_default_instance() {
    return reinterpret_cast<const CreateUERequest*>(
               &_CreateUERequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateUERequest& a, CreateUERequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateUERequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateUERequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateUERequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateUERequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateUERequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateUERequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateUERequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.uenib.CreateUERequest";
  }
  protected:
  explicit CreateUERequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUeFieldNumber = 1,
  };
  // .onos.uenib.UE ue = 1 [(.gogoproto.nullable) = false, (.gogoproto.customname) = "UE"];
  bool has_ue() const;
  private:
  bool _internal_has_ue() const;
  public:
  void clear_ue();
  const ::onos::uenib::UE& ue() const;
  PROTOBUF_NODISCARD ::onos::uenib::UE* release_ue();
  ::onos::uenib::UE* mutable_ue();
  void set_allocated_ue(::onos::uenib::UE* ue);
  private:
  const ::onos::uenib::UE& _internal_ue() const;
  ::onos::uenib::UE* _internal_mutable_ue();
  public:
  void unsafe_arena_set_allocated_ue(
      ::onos::uenib::UE* ue);
  ::onos::uenib::UE* unsafe_arena_release_ue();

  // @@protoc_insertion_point(class_scope:onos.uenib.CreateUERequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::uenib::UE* ue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fuenib_2fuenib_2eproto;
};
// -------------------------------------------------------------------

class CreateUEResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:onos.uenib.CreateUEResponse) */ {
 public:
  inline CreateUEResponse() : CreateUEResponse(nullptr) {}
  explicit constexpr CreateUEResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateUEResponse(const CreateUEResponse& from);
  CreateUEResponse(CreateUEResponse&& from) noexcept
    : CreateUEResponse() {
    *this = ::std::move(from);
  }

  inline CreateUEResponse& operator=(const CreateUEResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateUEResponse& operator=(CreateUEResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateUEResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateUEResponse* internal_default_instance() {
    return reinterpret_cast<const CreateUEResponse*>(
               &_CreateUEResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CreateUEResponse& a, CreateUEResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateUEResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateUEResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateUEResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateUEResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const CreateUEResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const CreateUEResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.uenib.CreateUEResponse";
  }
  protected:
  explicit CreateUEResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onos.uenib.CreateUEResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fuenib_2fuenib_2eproto;
};
// -------------------------------------------------------------------

class GetUERequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.uenib.GetUERequest) */ {
 public:
  inline GetUERequest() : GetUERequest(nullptr) {}
  ~GetUERequest() override;
  explicit constexpr GetUERequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUERequest(const GetUERequest& from);
  GetUERequest(GetUERequest&& from) noexcept
    : GetUERequest() {
    *this = ::std::move(from);
  }

  inline GetUERequest& operator=(const GetUERequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUERequest& operator=(GetUERequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUERequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUERequest* internal_default_instance() {
    return reinterpret_cast<const GetUERequest*>(
               &_GetUERequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetUERequest& a, GetUERequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUERequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUERequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetUERequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetUERequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetUERequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetUERequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUERequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.uenib.GetUERequest";
  }
  protected:
  explicit GetUERequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAspectTypesFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated string aspect_types = 2;
  int aspect_types_size() const;
  private:
  int _internal_aspect_types_size() const;
  public:
  void clear_aspect_types();
  const std::string& aspect_types(int index) const;
  std::string* mutable_aspect_types(int index);
  void set_aspect_types(int index, const std::string& value);
  void set_aspect_types(int index, std::string&& value);
  void set_aspect_types(int index, const char* value);
  void set_aspect_types(int index, const char* value, size_t size);
  std::string* add_aspect_types();
  void add_aspect_types(const std::string& value);
  void add_aspect_types(std::string&& value);
  void add_aspect_types(const char* value);
  void add_aspect_types(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& aspect_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_aspect_types();
  private:
  const std::string& _internal_aspect_types(int index) const;
  std::string* _internal_add_aspect_types();
  public:

  // string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.casttype) = "ID"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:onos.uenib.GetUERequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> aspect_types_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fuenib_2fuenib_2eproto;
};
// -------------------------------------------------------------------

class GetUEResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.uenib.GetUEResponse) */ {
 public:
  inline GetUEResponse() : GetUEResponse(nullptr) {}
  ~GetUEResponse() override;
  explicit constexpr GetUEResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetUEResponse(const GetUEResponse& from);
  GetUEResponse(GetUEResponse&& from) noexcept
    : GetUEResponse() {
    *this = ::std::move(from);
  }

  inline GetUEResponse& operator=(const GetUEResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetUEResponse& operator=(GetUEResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetUEResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetUEResponse* internal_default_instance() {
    return reinterpret_cast<const GetUEResponse*>(
               &_GetUEResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GetUEResponse& a, GetUEResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetUEResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetUEResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetUEResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetUEResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetUEResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetUEResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetUEResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.uenib.GetUEResponse";
  }
  protected:
  explicit GetUEResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUeFieldNumber = 1,
  };
  // .onos.uenib.UE ue = 1 [(.gogoproto.nullable) = false, (.gogoproto.customname) = "UE"];
  bool has_ue() const;
  private:
  bool _internal_has_ue() const;
  public:
  void clear_ue();
  const ::onos::uenib::UE& ue() const;
  PROTOBUF_NODISCARD ::onos::uenib::UE* release_ue();
  ::onos::uenib::UE* mutable_ue();
  void set_allocated_ue(::onos::uenib::UE* ue);
  private:
  const ::onos::uenib::UE& _internal_ue() const;
  ::onos::uenib::UE* _internal_mutable_ue();
  public:
  void unsafe_arena_set_allocated_ue(
      ::onos::uenib::UE* ue);
  ::onos::uenib::UE* unsafe_arena_release_ue();

  // @@protoc_insertion_point(class_scope:onos.uenib.GetUEResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::uenib::UE* ue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fuenib_2fuenib_2eproto;
};
// -------------------------------------------------------------------

class UpdateUERequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.uenib.UpdateUERequest) */ {
 public:
  inline UpdateUERequest() : UpdateUERequest(nullptr) {}
  ~UpdateUERequest() override;
  explicit constexpr UpdateUERequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateUERequest(const UpdateUERequest& from);
  UpdateUERequest(UpdateUERequest&& from) noexcept
    : UpdateUERequest() {
    *this = ::std::move(from);
  }

  inline UpdateUERequest& operator=(const UpdateUERequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateUERequest& operator=(UpdateUERequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateUERequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateUERequest* internal_default_instance() {
    return reinterpret_cast<const UpdateUERequest*>(
               &_UpdateUERequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UpdateUERequest& a, UpdateUERequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateUERequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateUERequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateUERequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateUERequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateUERequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateUERequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateUERequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.uenib.UpdateUERequest";
  }
  protected:
  explicit UpdateUERequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUeFieldNumber = 1,
  };
  // .onos.uenib.UE ue = 1 [(.gogoproto.nullable) = false, (.gogoproto.customname) = "UE"];
  bool has_ue() const;
  private:
  bool _internal_has_ue() const;
  public:
  void clear_ue();
  const ::onos::uenib::UE& ue() const;
  PROTOBUF_NODISCARD ::onos::uenib::UE* release_ue();
  ::onos::uenib::UE* mutable_ue();
  void set_allocated_ue(::onos::uenib::UE* ue);
  private:
  const ::onos::uenib::UE& _internal_ue() const;
  ::onos::uenib::UE* _internal_mutable_ue();
  public:
  void unsafe_arena_set_allocated_ue(
      ::onos::uenib::UE* ue);
  ::onos::uenib::UE* unsafe_arena_release_ue();

  // @@protoc_insertion_point(class_scope:onos.uenib.UpdateUERequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::uenib::UE* ue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fuenib_2fuenib_2eproto;
};
// -------------------------------------------------------------------

class UpdateUEResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:onos.uenib.UpdateUEResponse) */ {
 public:
  inline UpdateUEResponse() : UpdateUEResponse(nullptr) {}
  explicit constexpr UpdateUEResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateUEResponse(const UpdateUEResponse& from);
  UpdateUEResponse(UpdateUEResponse&& from) noexcept
    : UpdateUEResponse() {
    *this = ::std::move(from);
  }

  inline UpdateUEResponse& operator=(const UpdateUEResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateUEResponse& operator=(UpdateUEResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateUEResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateUEResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateUEResponse*>(
               &_UpdateUEResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(UpdateUEResponse& a, UpdateUEResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateUEResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateUEResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateUEResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateUEResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const UpdateUEResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const UpdateUEResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.uenib.UpdateUEResponse";
  }
  protected:
  explicit UpdateUEResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onos.uenib.UpdateUEResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fuenib_2fuenib_2eproto;
};
// -------------------------------------------------------------------

class DeleteUERequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.uenib.DeleteUERequest) */ {
 public:
  inline DeleteUERequest() : DeleteUERequest(nullptr) {}
  ~DeleteUERequest() override;
  explicit constexpr DeleteUERequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteUERequest(const DeleteUERequest& from);
  DeleteUERequest(DeleteUERequest&& from) noexcept
    : DeleteUERequest() {
    *this = ::std::move(from);
  }

  inline DeleteUERequest& operator=(const DeleteUERequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteUERequest& operator=(DeleteUERequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteUERequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteUERequest* internal_default_instance() {
    return reinterpret_cast<const DeleteUERequest*>(
               &_DeleteUERequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DeleteUERequest& a, DeleteUERequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteUERequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteUERequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteUERequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteUERequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteUERequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteUERequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteUERequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.uenib.DeleteUERequest";
  }
  protected:
  explicit DeleteUERequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAspectTypesFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated string aspect_types = 2;
  int aspect_types_size() const;
  private:
  int _internal_aspect_types_size() const;
  public:
  void clear_aspect_types();
  const std::string& aspect_types(int index) const;
  std::string* mutable_aspect_types(int index);
  void set_aspect_types(int index, const std::string& value);
  void set_aspect_types(int index, std::string&& value);
  void set_aspect_types(int index, const char* value);
  void set_aspect_types(int index, const char* value, size_t size);
  std::string* add_aspect_types();
  void add_aspect_types(const std::string& value);
  void add_aspect_types(std::string&& value);
  void add_aspect_types(const char* value);
  void add_aspect_types(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& aspect_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_aspect_types();
  private:
  const std::string& _internal_aspect_types(int index) const;
  std::string* _internal_add_aspect_types();
  public:

  // string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.casttype) = "ID"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:onos.uenib.DeleteUERequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> aspect_types_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fuenib_2fuenib_2eproto;
};
// -------------------------------------------------------------------

class DeleteUEResponse final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:onos.uenib.DeleteUEResponse) */ {
 public:
  inline DeleteUEResponse() : DeleteUEResponse(nullptr) {}
  explicit constexpr DeleteUEResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteUEResponse(const DeleteUEResponse& from);
  DeleteUEResponse(DeleteUEResponse&& from) noexcept
    : DeleteUEResponse() {
    *this = ::std::move(from);
  }

  inline DeleteUEResponse& operator=(const DeleteUEResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteUEResponse& operator=(DeleteUEResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteUEResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteUEResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteUEResponse*>(
               &_DeleteUEResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DeleteUEResponse& a, DeleteUEResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteUEResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteUEResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DeleteUEResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DeleteUEResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const DeleteUEResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const DeleteUEResponse& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.uenib.DeleteUEResponse";
  }
  protected:
  explicit DeleteUEResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onos.uenib.DeleteUEResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fuenib_2fuenib_2eproto;
};
// -------------------------------------------------------------------

class ListUERequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.uenib.ListUERequest) */ {
 public:
  inline ListUERequest() : ListUERequest(nullptr) {}
  ~ListUERequest() override;
  explicit constexpr ListUERequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListUERequest(const ListUERequest& from);
  ListUERequest(ListUERequest&& from) noexcept
    : ListUERequest() {
    *this = ::std::move(from);
  }

  inline ListUERequest& operator=(const ListUERequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListUERequest& operator=(ListUERequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListUERequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListUERequest* internal_default_instance() {
    return reinterpret_cast<const ListUERequest*>(
               &_ListUERequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ListUERequest& a, ListUERequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListUERequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListUERequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListUERequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListUERequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListUERequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListUERequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListUERequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.uenib.ListUERequest";
  }
  protected:
  explicit ListUERequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAspectTypesFieldNumber = 1,
  };
  // repeated string aspect_types = 1;
  int aspect_types_size() const;
  private:
  int _internal_aspect_types_size() const;
  public:
  void clear_aspect_types();
  const std::string& aspect_types(int index) const;
  std::string* mutable_aspect_types(int index);
  void set_aspect_types(int index, const std::string& value);
  void set_aspect_types(int index, std::string&& value);
  void set_aspect_types(int index, const char* value);
  void set_aspect_types(int index, const char* value, size_t size);
  std::string* add_aspect_types();
  void add_aspect_types(const std::string& value);
  void add_aspect_types(std::string&& value);
  void add_aspect_types(const char* value);
  void add_aspect_types(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& aspect_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_aspect_types();
  private:
  const std::string& _internal_aspect_types(int index) const;
  std::string* _internal_add_aspect_types();
  public:

  // @@protoc_insertion_point(class_scope:onos.uenib.ListUERequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> aspect_types_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fuenib_2fuenib_2eproto;
};
// -------------------------------------------------------------------

class ListUEResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.uenib.ListUEResponse) */ {
 public:
  inline ListUEResponse() : ListUEResponse(nullptr) {}
  ~ListUEResponse() override;
  explicit constexpr ListUEResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListUEResponse(const ListUEResponse& from);
  ListUEResponse(ListUEResponse&& from) noexcept
    : ListUEResponse() {
    *this = ::std::move(from);
  }

  inline ListUEResponse& operator=(const ListUEResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListUEResponse& operator=(ListUEResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListUEResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListUEResponse* internal_default_instance() {
    return reinterpret_cast<const ListUEResponse*>(
               &_ListUEResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ListUEResponse& a, ListUEResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListUEResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListUEResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListUEResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListUEResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListUEResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListUEResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListUEResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.uenib.ListUEResponse";
  }
  protected:
  explicit ListUEResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUeFieldNumber = 1,
  };
  // .onos.uenib.UE ue = 1 [(.gogoproto.nullable) = false, (.gogoproto.customname) = "UE"];
  bool has_ue() const;
  private:
  bool _internal_has_ue() const;
  public:
  void clear_ue();
  const ::onos::uenib::UE& ue() const;
  PROTOBUF_NODISCARD ::onos::uenib::UE* release_ue();
  ::onos::uenib::UE* mutable_ue();
  void set_allocated_ue(::onos::uenib::UE* ue);
  private:
  const ::onos::uenib::UE& _internal_ue() const;
  ::onos::uenib::UE* _internal_mutable_ue();
  public:
  void unsafe_arena_set_allocated_ue(
      ::onos::uenib::UE* ue);
  ::onos::uenib::UE* unsafe_arena_release_ue();

  // @@protoc_insertion_point(class_scope:onos.uenib.ListUEResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::uenib::UE* ue_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fuenib_2fuenib_2eproto;
};
// -------------------------------------------------------------------

class WatchUERequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.uenib.WatchUERequest) */ {
 public:
  inline WatchUERequest() : WatchUERequest(nullptr) {}
  ~WatchUERequest() override;
  explicit constexpr WatchUERequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WatchUERequest(const WatchUERequest& from);
  WatchUERequest(WatchUERequest&& from) noexcept
    : WatchUERequest() {
    *this = ::std::move(from);
  }

  inline WatchUERequest& operator=(const WatchUERequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchUERequest& operator=(WatchUERequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WatchUERequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WatchUERequest* internal_default_instance() {
    return reinterpret_cast<const WatchUERequest*>(
               &_WatchUERequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(WatchUERequest& a, WatchUERequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchUERequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchUERequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WatchUERequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WatchUERequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WatchUERequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WatchUERequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchUERequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.uenib.WatchUERequest";
  }
  protected:
  explicit WatchUERequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAspectTypesFieldNumber = 3,
    kNoreplayFieldNumber = 2,
  };
  // repeated string aspect_types = 3;
  int aspect_types_size() const;
  private:
  int _internal_aspect_types_size() const;
  public:
  void clear_aspect_types();
  const std::string& aspect_types(int index) const;
  std::string* mutable_aspect_types(int index);
  void set_aspect_types(int index, const std::string& value);
  void set_aspect_types(int index, std::string&& value);
  void set_aspect_types(int index, const char* value);
  void set_aspect_types(int index, const char* value, size_t size);
  std::string* add_aspect_types();
  void add_aspect_types(const std::string& value);
  void add_aspect_types(std::string&& value);
  void add_aspect_types(const char* value);
  void add_aspect_types(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& aspect_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_aspect_types();
  private:
  const std::string& _internal_aspect_types(int index) const;
  std::string* _internal_add_aspect_types();
  public:

  // bool noreplay = 2;
  void clear_noreplay();
  bool noreplay() const;
  void set_noreplay(bool value);
  private:
  bool _internal_noreplay() const;
  void _internal_set_noreplay(bool value);
  public:

  // @@protoc_insertion_point(class_scope:onos.uenib.WatchUERequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> aspect_types_;
  bool noreplay_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fuenib_2fuenib_2eproto;
};
// -------------------------------------------------------------------

class WatchUEResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.uenib.WatchUEResponse) */ {
 public:
  inline WatchUEResponse() : WatchUEResponse(nullptr) {}
  ~WatchUEResponse() override;
  explicit constexpr WatchUEResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WatchUEResponse(const WatchUEResponse& from);
  WatchUEResponse(WatchUEResponse&& from) noexcept
    : WatchUEResponse() {
    *this = ::std::move(from);
  }

  inline WatchUEResponse& operator=(const WatchUEResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchUEResponse& operator=(WatchUEResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WatchUEResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WatchUEResponse* internal_default_instance() {
    return reinterpret_cast<const WatchUEResponse*>(
               &_WatchUEResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(WatchUEResponse& a, WatchUEResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchUEResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchUEResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WatchUEResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WatchUEResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WatchUEResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WatchUEResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchUEResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.uenib.WatchUEResponse";
  }
  protected:
  explicit WatchUEResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventFieldNumber = 1,
  };
  // .onos.uenib.Event event = 1 [(.gogoproto.nullable) = false];
  bool has_event() const;
  private:
  bool _internal_has_event() const;
  public:
  void clear_event();
  const ::onos::uenib::Event& event() const;
  PROTOBUF_NODISCARD ::onos::uenib::Event* release_event();
  ::onos::uenib::Event* mutable_event();
  void set_allocated_event(::onos::uenib::Event* event);
  private:
  const ::onos::uenib::Event& _internal_event() const;
  ::onos::uenib::Event* _internal_mutable_event();
  public:
  void unsafe_arena_set_allocated_event(
      ::onos::uenib::Event* event);
  ::onos::uenib::Event* unsafe_arena_release_event();

  // @@protoc_insertion_point(class_scope:onos.uenib.WatchUEResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::uenib::Event* event_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fuenib_2fuenib_2eproto;
};
// -------------------------------------------------------------------

class UE_AspectsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UE_AspectsEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::Any,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UE_AspectsEntry_DoNotUse, 
    std::string, ::PROTOBUF_NAMESPACE_ID::Any,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  UE_AspectsEntry_DoNotUse();
  explicit constexpr UE_AspectsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit UE_AspectsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const UE_AspectsEntry_DoNotUse& other);
  static const UE_AspectsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const UE_AspectsEntry_DoNotUse*>(&_UE_AspectsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "onos.uenib.UE.AspectsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class UE final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.uenib.UE) */ {
 public:
  inline UE() : UE(nullptr) {}
  ~UE() override;
  explicit constexpr UE(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UE(const UE& from);
  UE(UE&& from) noexcept
    : UE() {
    *this = ::std::move(from);
  }

  inline UE& operator=(const UE& from) {
    CopyFrom(from);
    return *this;
  }
  inline UE& operator=(UE&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UE& default_instance() {
    return *internal_default_instance();
  }
  static inline const UE* internal_default_instance() {
    return reinterpret_cast<const UE*>(
               &_UE_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(UE& a, UE& b) {
    a.Swap(&b);
  }
  inline void Swap(UE* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UE* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UE* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UE>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UE& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UE& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UE* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.uenib.UE";
  }
  protected:
  explicit UE(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kAspectsFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // map<string, .google.protobuf.Any> aspects = 2;
  int aspects_size() const;
  private:
  int _internal_aspects_size() const;
  public:
  void clear_aspects();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::Any >&
      _internal_aspects() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::Any >*
      _internal_mutable_aspects();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::Any >&
      aspects() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::Any >*
      mutable_aspects();

  // string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.casttype) = "ID"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:onos.uenib.UE)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      UE_AspectsEntry_DoNotUse,
      std::string, ::PROTOBUF_NAMESPACE_ID::Any,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> aspects_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fuenib_2fuenib_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Event

// .onos.uenib.EventType type = 1;
inline void Event::clear_type() {
  type_ = 0;
}
inline ::onos::uenib::EventType Event::_internal_type() const {
  return static_cast< ::onos::uenib::EventType >(type_);
}
inline ::onos::uenib::EventType Event::type() const {
  // @@protoc_insertion_point(field_get:onos.uenib.Event.type)
  return _internal_type();
}
inline void Event::_internal_set_type(::onos::uenib::EventType value) {
  
  type_ = value;
}
inline void Event::set_type(::onos::uenib::EventType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:onos.uenib.Event.type)
}

// .onos.uenib.UE ue = 2 [(.gogoproto.nullable) = false, (.gogoproto.customname) = "UE"];
inline bool Event::_internal_has_ue() const {
  return this != internal_default_instance() && ue_ != nullptr;
}
inline bool Event::has_ue() const {
  return _internal_has_ue();
}
inline void Event::clear_ue() {
  if (GetArenaForAllocation() == nullptr && ue_ != nullptr) {
    delete ue_;
  }
  ue_ = nullptr;
}
inline const ::onos::uenib::UE& Event::_internal_ue() const {
  const ::onos::uenib::UE* p = ue_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::uenib::UE&>(
      ::onos::uenib::_UE_default_instance_);
}
inline const ::onos::uenib::UE& Event::ue() const {
  // @@protoc_insertion_point(field_get:onos.uenib.Event.ue)
  return _internal_ue();
}
inline void Event::unsafe_arena_set_allocated_ue(
    ::onos::uenib::UE* ue) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ue_);
  }
  ue_ = ue;
  if (ue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.uenib.Event.ue)
}
inline ::onos::uenib::UE* Event::release_ue() {
  
  ::onos::uenib::UE* temp = ue_;
  ue_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::uenib::UE* Event::unsafe_arena_release_ue() {
  // @@protoc_insertion_point(field_release:onos.uenib.Event.ue)
  
  ::onos::uenib::UE* temp = ue_;
  ue_ = nullptr;
  return temp;
}
inline ::onos::uenib::UE* Event::_internal_mutable_ue() {
  
  if (ue_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::uenib::UE>(GetArenaForAllocation());
    ue_ = p;
  }
  return ue_;
}
inline ::onos::uenib::UE* Event::mutable_ue() {
  ::onos::uenib::UE* _msg = _internal_mutable_ue();
  // @@protoc_insertion_point(field_mutable:onos.uenib.Event.ue)
  return _msg;
}
inline void Event::set_allocated_ue(::onos::uenib::UE* ue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ue_;
  }
  if (ue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::uenib::UE>::GetOwningArena(ue);
    if (message_arena != submessage_arena) {
      ue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ue, submessage_arena);
    }
    
  } else {
    
  }
  ue_ = ue;
  // @@protoc_insertion_point(field_set_allocated:onos.uenib.Event.ue)
}

// -------------------------------------------------------------------

// CreateUERequest

// .onos.uenib.UE ue = 1 [(.gogoproto.nullable) = false, (.gogoproto.customname) = "UE"];
inline bool CreateUERequest::_internal_has_ue() const {
  return this != internal_default_instance() && ue_ != nullptr;
}
inline bool CreateUERequest::has_ue() const {
  return _internal_has_ue();
}
inline void CreateUERequest::clear_ue() {
  if (GetArenaForAllocation() == nullptr && ue_ != nullptr) {
    delete ue_;
  }
  ue_ = nullptr;
}
inline const ::onos::uenib::UE& CreateUERequest::_internal_ue() const {
  const ::onos::uenib::UE* p = ue_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::uenib::UE&>(
      ::onos::uenib::_UE_default_instance_);
}
inline const ::onos::uenib::UE& CreateUERequest::ue() const {
  // @@protoc_insertion_point(field_get:onos.uenib.CreateUERequest.ue)
  return _internal_ue();
}
inline void CreateUERequest::unsafe_arena_set_allocated_ue(
    ::onos::uenib::UE* ue) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ue_);
  }
  ue_ = ue;
  if (ue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.uenib.CreateUERequest.ue)
}
inline ::onos::uenib::UE* CreateUERequest::release_ue() {
  
  ::onos::uenib::UE* temp = ue_;
  ue_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::uenib::UE* CreateUERequest::unsafe_arena_release_ue() {
  // @@protoc_insertion_point(field_release:onos.uenib.CreateUERequest.ue)
  
  ::onos::uenib::UE* temp = ue_;
  ue_ = nullptr;
  return temp;
}
inline ::onos::uenib::UE* CreateUERequest::_internal_mutable_ue() {
  
  if (ue_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::uenib::UE>(GetArenaForAllocation());
    ue_ = p;
  }
  return ue_;
}
inline ::onos::uenib::UE* CreateUERequest::mutable_ue() {
  ::onos::uenib::UE* _msg = _internal_mutable_ue();
  // @@protoc_insertion_point(field_mutable:onos.uenib.CreateUERequest.ue)
  return _msg;
}
inline void CreateUERequest::set_allocated_ue(::onos::uenib::UE* ue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ue_;
  }
  if (ue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::uenib::UE>::GetOwningArena(ue);
    if (message_arena != submessage_arena) {
      ue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ue, submessage_arena);
    }
    
  } else {
    
  }
  ue_ = ue;
  // @@protoc_insertion_point(field_set_allocated:onos.uenib.CreateUERequest.ue)
}

// -------------------------------------------------------------------

// CreateUEResponse

// -------------------------------------------------------------------

// GetUERequest

// string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.casttype) = "ID"];
inline void GetUERequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& GetUERequest::id() const {
  // @@protoc_insertion_point(field_get:onos.uenib.GetUERequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetUERequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.uenib.GetUERequest.id)
}
inline std::string* GetUERequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:onos.uenib.GetUERequest.id)
  return _s;
}
inline const std::string& GetUERequest::_internal_id() const {
  return id_.Get();
}
inline void GetUERequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetUERequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetUERequest::release_id() {
  // @@protoc_insertion_point(field_release:onos.uenib.GetUERequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetUERequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.uenib.GetUERequest.id)
}

// repeated string aspect_types = 2;
inline int GetUERequest::_internal_aspect_types_size() const {
  return aspect_types_.size();
}
inline int GetUERequest::aspect_types_size() const {
  return _internal_aspect_types_size();
}
inline void GetUERequest::clear_aspect_types() {
  aspect_types_.Clear();
}
inline std::string* GetUERequest::add_aspect_types() {
  std::string* _s = _internal_add_aspect_types();
  // @@protoc_insertion_point(field_add_mutable:onos.uenib.GetUERequest.aspect_types)
  return _s;
}
inline const std::string& GetUERequest::_internal_aspect_types(int index) const {
  return aspect_types_.Get(index);
}
inline const std::string& GetUERequest::aspect_types(int index) const {
  // @@protoc_insertion_point(field_get:onos.uenib.GetUERequest.aspect_types)
  return _internal_aspect_types(index);
}
inline std::string* GetUERequest::mutable_aspect_types(int index) {
  // @@protoc_insertion_point(field_mutable:onos.uenib.GetUERequest.aspect_types)
  return aspect_types_.Mutable(index);
}
inline void GetUERequest::set_aspect_types(int index, const std::string& value) {
  aspect_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:onos.uenib.GetUERequest.aspect_types)
}
inline void GetUERequest::set_aspect_types(int index, std::string&& value) {
  aspect_types_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:onos.uenib.GetUERequest.aspect_types)
}
inline void GetUERequest::set_aspect_types(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  aspect_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:onos.uenib.GetUERequest.aspect_types)
}
inline void GetUERequest::set_aspect_types(int index, const char* value, size_t size) {
  aspect_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onos.uenib.GetUERequest.aspect_types)
}
inline std::string* GetUERequest::_internal_add_aspect_types() {
  return aspect_types_.Add();
}
inline void GetUERequest::add_aspect_types(const std::string& value) {
  aspect_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:onos.uenib.GetUERequest.aspect_types)
}
inline void GetUERequest::add_aspect_types(std::string&& value) {
  aspect_types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:onos.uenib.GetUERequest.aspect_types)
}
inline void GetUERequest::add_aspect_types(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  aspect_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:onos.uenib.GetUERequest.aspect_types)
}
inline void GetUERequest::add_aspect_types(const char* value, size_t size) {
  aspect_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:onos.uenib.GetUERequest.aspect_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GetUERequest::aspect_types() const {
  // @@protoc_insertion_point(field_list:onos.uenib.GetUERequest.aspect_types)
  return aspect_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GetUERequest::mutable_aspect_types() {
  // @@protoc_insertion_point(field_mutable_list:onos.uenib.GetUERequest.aspect_types)
  return &aspect_types_;
}

// -------------------------------------------------------------------

// GetUEResponse

// .onos.uenib.UE ue = 1 [(.gogoproto.nullable) = false, (.gogoproto.customname) = "UE"];
inline bool GetUEResponse::_internal_has_ue() const {
  return this != internal_default_instance() && ue_ != nullptr;
}
inline bool GetUEResponse::has_ue() const {
  return _internal_has_ue();
}
inline void GetUEResponse::clear_ue() {
  if (GetArenaForAllocation() == nullptr && ue_ != nullptr) {
    delete ue_;
  }
  ue_ = nullptr;
}
inline const ::onos::uenib::UE& GetUEResponse::_internal_ue() const {
  const ::onos::uenib::UE* p = ue_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::uenib::UE&>(
      ::onos::uenib::_UE_default_instance_);
}
inline const ::onos::uenib::UE& GetUEResponse::ue() const {
  // @@protoc_insertion_point(field_get:onos.uenib.GetUEResponse.ue)
  return _internal_ue();
}
inline void GetUEResponse::unsafe_arena_set_allocated_ue(
    ::onos::uenib::UE* ue) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ue_);
  }
  ue_ = ue;
  if (ue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.uenib.GetUEResponse.ue)
}
inline ::onos::uenib::UE* GetUEResponse::release_ue() {
  
  ::onos::uenib::UE* temp = ue_;
  ue_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::uenib::UE* GetUEResponse::unsafe_arena_release_ue() {
  // @@protoc_insertion_point(field_release:onos.uenib.GetUEResponse.ue)
  
  ::onos::uenib::UE* temp = ue_;
  ue_ = nullptr;
  return temp;
}
inline ::onos::uenib::UE* GetUEResponse::_internal_mutable_ue() {
  
  if (ue_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::uenib::UE>(GetArenaForAllocation());
    ue_ = p;
  }
  return ue_;
}
inline ::onos::uenib::UE* GetUEResponse::mutable_ue() {
  ::onos::uenib::UE* _msg = _internal_mutable_ue();
  // @@protoc_insertion_point(field_mutable:onos.uenib.GetUEResponse.ue)
  return _msg;
}
inline void GetUEResponse::set_allocated_ue(::onos::uenib::UE* ue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ue_;
  }
  if (ue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::uenib::UE>::GetOwningArena(ue);
    if (message_arena != submessage_arena) {
      ue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ue, submessage_arena);
    }
    
  } else {
    
  }
  ue_ = ue;
  // @@protoc_insertion_point(field_set_allocated:onos.uenib.GetUEResponse.ue)
}

// -------------------------------------------------------------------

// UpdateUERequest

// .onos.uenib.UE ue = 1 [(.gogoproto.nullable) = false, (.gogoproto.customname) = "UE"];
inline bool UpdateUERequest::_internal_has_ue() const {
  return this != internal_default_instance() && ue_ != nullptr;
}
inline bool UpdateUERequest::has_ue() const {
  return _internal_has_ue();
}
inline void UpdateUERequest::clear_ue() {
  if (GetArenaForAllocation() == nullptr && ue_ != nullptr) {
    delete ue_;
  }
  ue_ = nullptr;
}
inline const ::onos::uenib::UE& UpdateUERequest::_internal_ue() const {
  const ::onos::uenib::UE* p = ue_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::uenib::UE&>(
      ::onos::uenib::_UE_default_instance_);
}
inline const ::onos::uenib::UE& UpdateUERequest::ue() const {
  // @@protoc_insertion_point(field_get:onos.uenib.UpdateUERequest.ue)
  return _internal_ue();
}
inline void UpdateUERequest::unsafe_arena_set_allocated_ue(
    ::onos::uenib::UE* ue) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ue_);
  }
  ue_ = ue;
  if (ue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.uenib.UpdateUERequest.ue)
}
inline ::onos::uenib::UE* UpdateUERequest::release_ue() {
  
  ::onos::uenib::UE* temp = ue_;
  ue_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::uenib::UE* UpdateUERequest::unsafe_arena_release_ue() {
  // @@protoc_insertion_point(field_release:onos.uenib.UpdateUERequest.ue)
  
  ::onos::uenib::UE* temp = ue_;
  ue_ = nullptr;
  return temp;
}
inline ::onos::uenib::UE* UpdateUERequest::_internal_mutable_ue() {
  
  if (ue_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::uenib::UE>(GetArenaForAllocation());
    ue_ = p;
  }
  return ue_;
}
inline ::onos::uenib::UE* UpdateUERequest::mutable_ue() {
  ::onos::uenib::UE* _msg = _internal_mutable_ue();
  // @@protoc_insertion_point(field_mutable:onos.uenib.UpdateUERequest.ue)
  return _msg;
}
inline void UpdateUERequest::set_allocated_ue(::onos::uenib::UE* ue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ue_;
  }
  if (ue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::uenib::UE>::GetOwningArena(ue);
    if (message_arena != submessage_arena) {
      ue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ue, submessage_arena);
    }
    
  } else {
    
  }
  ue_ = ue;
  // @@protoc_insertion_point(field_set_allocated:onos.uenib.UpdateUERequest.ue)
}

// -------------------------------------------------------------------

// UpdateUEResponse

// -------------------------------------------------------------------

// DeleteUERequest

// string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.casttype) = "ID"];
inline void DeleteUERequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& DeleteUERequest::id() const {
  // @@protoc_insertion_point(field_get:onos.uenib.DeleteUERequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteUERequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.uenib.DeleteUERequest.id)
}
inline std::string* DeleteUERequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:onos.uenib.DeleteUERequest.id)
  return _s;
}
inline const std::string& DeleteUERequest::_internal_id() const {
  return id_.Get();
}
inline void DeleteUERequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteUERequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteUERequest::release_id() {
  // @@protoc_insertion_point(field_release:onos.uenib.DeleteUERequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteUERequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.uenib.DeleteUERequest.id)
}

// repeated string aspect_types = 2;
inline int DeleteUERequest::_internal_aspect_types_size() const {
  return aspect_types_.size();
}
inline int DeleteUERequest::aspect_types_size() const {
  return _internal_aspect_types_size();
}
inline void DeleteUERequest::clear_aspect_types() {
  aspect_types_.Clear();
}
inline std::string* DeleteUERequest::add_aspect_types() {
  std::string* _s = _internal_add_aspect_types();
  // @@protoc_insertion_point(field_add_mutable:onos.uenib.DeleteUERequest.aspect_types)
  return _s;
}
inline const std::string& DeleteUERequest::_internal_aspect_types(int index) const {
  return aspect_types_.Get(index);
}
inline const std::string& DeleteUERequest::aspect_types(int index) const {
  // @@protoc_insertion_point(field_get:onos.uenib.DeleteUERequest.aspect_types)
  return _internal_aspect_types(index);
}
inline std::string* DeleteUERequest::mutable_aspect_types(int index) {
  // @@protoc_insertion_point(field_mutable:onos.uenib.DeleteUERequest.aspect_types)
  return aspect_types_.Mutable(index);
}
inline void DeleteUERequest::set_aspect_types(int index, const std::string& value) {
  aspect_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:onos.uenib.DeleteUERequest.aspect_types)
}
inline void DeleteUERequest::set_aspect_types(int index, std::string&& value) {
  aspect_types_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:onos.uenib.DeleteUERequest.aspect_types)
}
inline void DeleteUERequest::set_aspect_types(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  aspect_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:onos.uenib.DeleteUERequest.aspect_types)
}
inline void DeleteUERequest::set_aspect_types(int index, const char* value, size_t size) {
  aspect_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onos.uenib.DeleteUERequest.aspect_types)
}
inline std::string* DeleteUERequest::_internal_add_aspect_types() {
  return aspect_types_.Add();
}
inline void DeleteUERequest::add_aspect_types(const std::string& value) {
  aspect_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:onos.uenib.DeleteUERequest.aspect_types)
}
inline void DeleteUERequest::add_aspect_types(std::string&& value) {
  aspect_types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:onos.uenib.DeleteUERequest.aspect_types)
}
inline void DeleteUERequest::add_aspect_types(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  aspect_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:onos.uenib.DeleteUERequest.aspect_types)
}
inline void DeleteUERequest::add_aspect_types(const char* value, size_t size) {
  aspect_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:onos.uenib.DeleteUERequest.aspect_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeleteUERequest::aspect_types() const {
  // @@protoc_insertion_point(field_list:onos.uenib.DeleteUERequest.aspect_types)
  return aspect_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeleteUERequest::mutable_aspect_types() {
  // @@protoc_insertion_point(field_mutable_list:onos.uenib.DeleteUERequest.aspect_types)
  return &aspect_types_;
}

// -------------------------------------------------------------------

// DeleteUEResponse

// -------------------------------------------------------------------

// ListUERequest

// repeated string aspect_types = 1;
inline int ListUERequest::_internal_aspect_types_size() const {
  return aspect_types_.size();
}
inline int ListUERequest::aspect_types_size() const {
  return _internal_aspect_types_size();
}
inline void ListUERequest::clear_aspect_types() {
  aspect_types_.Clear();
}
inline std::string* ListUERequest::add_aspect_types() {
  std::string* _s = _internal_add_aspect_types();
  // @@protoc_insertion_point(field_add_mutable:onos.uenib.ListUERequest.aspect_types)
  return _s;
}
inline const std::string& ListUERequest::_internal_aspect_types(int index) const {
  return aspect_types_.Get(index);
}
inline const std::string& ListUERequest::aspect_types(int index) const {
  // @@protoc_insertion_point(field_get:onos.uenib.ListUERequest.aspect_types)
  return _internal_aspect_types(index);
}
inline std::string* ListUERequest::mutable_aspect_types(int index) {
  // @@protoc_insertion_point(field_mutable:onos.uenib.ListUERequest.aspect_types)
  return aspect_types_.Mutable(index);
}
inline void ListUERequest::set_aspect_types(int index, const std::string& value) {
  aspect_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:onos.uenib.ListUERequest.aspect_types)
}
inline void ListUERequest::set_aspect_types(int index, std::string&& value) {
  aspect_types_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:onos.uenib.ListUERequest.aspect_types)
}
inline void ListUERequest::set_aspect_types(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  aspect_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:onos.uenib.ListUERequest.aspect_types)
}
inline void ListUERequest::set_aspect_types(int index, const char* value, size_t size) {
  aspect_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onos.uenib.ListUERequest.aspect_types)
}
inline std::string* ListUERequest::_internal_add_aspect_types() {
  return aspect_types_.Add();
}
inline void ListUERequest::add_aspect_types(const std::string& value) {
  aspect_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:onos.uenib.ListUERequest.aspect_types)
}
inline void ListUERequest::add_aspect_types(std::string&& value) {
  aspect_types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:onos.uenib.ListUERequest.aspect_types)
}
inline void ListUERequest::add_aspect_types(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  aspect_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:onos.uenib.ListUERequest.aspect_types)
}
inline void ListUERequest::add_aspect_types(const char* value, size_t size) {
  aspect_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:onos.uenib.ListUERequest.aspect_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListUERequest::aspect_types() const {
  // @@protoc_insertion_point(field_list:onos.uenib.ListUERequest.aspect_types)
  return aspect_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListUERequest::mutable_aspect_types() {
  // @@protoc_insertion_point(field_mutable_list:onos.uenib.ListUERequest.aspect_types)
  return &aspect_types_;
}

// -------------------------------------------------------------------

// ListUEResponse

// .onos.uenib.UE ue = 1 [(.gogoproto.nullable) = false, (.gogoproto.customname) = "UE"];
inline bool ListUEResponse::_internal_has_ue() const {
  return this != internal_default_instance() && ue_ != nullptr;
}
inline bool ListUEResponse::has_ue() const {
  return _internal_has_ue();
}
inline void ListUEResponse::clear_ue() {
  if (GetArenaForAllocation() == nullptr && ue_ != nullptr) {
    delete ue_;
  }
  ue_ = nullptr;
}
inline const ::onos::uenib::UE& ListUEResponse::_internal_ue() const {
  const ::onos::uenib::UE* p = ue_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::uenib::UE&>(
      ::onos::uenib::_UE_default_instance_);
}
inline const ::onos::uenib::UE& ListUEResponse::ue() const {
  // @@protoc_insertion_point(field_get:onos.uenib.ListUEResponse.ue)
  return _internal_ue();
}
inline void ListUEResponse::unsafe_arena_set_allocated_ue(
    ::onos::uenib::UE* ue) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ue_);
  }
  ue_ = ue;
  if (ue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.uenib.ListUEResponse.ue)
}
inline ::onos::uenib::UE* ListUEResponse::release_ue() {
  
  ::onos::uenib::UE* temp = ue_;
  ue_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::uenib::UE* ListUEResponse::unsafe_arena_release_ue() {
  // @@protoc_insertion_point(field_release:onos.uenib.ListUEResponse.ue)
  
  ::onos::uenib::UE* temp = ue_;
  ue_ = nullptr;
  return temp;
}
inline ::onos::uenib::UE* ListUEResponse::_internal_mutable_ue() {
  
  if (ue_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::uenib::UE>(GetArenaForAllocation());
    ue_ = p;
  }
  return ue_;
}
inline ::onos::uenib::UE* ListUEResponse::mutable_ue() {
  ::onos::uenib::UE* _msg = _internal_mutable_ue();
  // @@protoc_insertion_point(field_mutable:onos.uenib.ListUEResponse.ue)
  return _msg;
}
inline void ListUEResponse::set_allocated_ue(::onos::uenib::UE* ue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ue_;
  }
  if (ue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::uenib::UE>::GetOwningArena(ue);
    if (message_arena != submessage_arena) {
      ue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ue, submessage_arena);
    }
    
  } else {
    
  }
  ue_ = ue;
  // @@protoc_insertion_point(field_set_allocated:onos.uenib.ListUEResponse.ue)
}

// -------------------------------------------------------------------

// WatchUERequest

// bool noreplay = 2;
inline void WatchUERequest::clear_noreplay() {
  noreplay_ = false;
}
inline bool WatchUERequest::_internal_noreplay() const {
  return noreplay_;
}
inline bool WatchUERequest::noreplay() const {
  // @@protoc_insertion_point(field_get:onos.uenib.WatchUERequest.noreplay)
  return _internal_noreplay();
}
inline void WatchUERequest::_internal_set_noreplay(bool value) {
  
  noreplay_ = value;
}
inline void WatchUERequest::set_noreplay(bool value) {
  _internal_set_noreplay(value);
  // @@protoc_insertion_point(field_set:onos.uenib.WatchUERequest.noreplay)
}

// repeated string aspect_types = 3;
inline int WatchUERequest::_internal_aspect_types_size() const {
  return aspect_types_.size();
}
inline int WatchUERequest::aspect_types_size() const {
  return _internal_aspect_types_size();
}
inline void WatchUERequest::clear_aspect_types() {
  aspect_types_.Clear();
}
inline std::string* WatchUERequest::add_aspect_types() {
  std::string* _s = _internal_add_aspect_types();
  // @@protoc_insertion_point(field_add_mutable:onos.uenib.WatchUERequest.aspect_types)
  return _s;
}
inline const std::string& WatchUERequest::_internal_aspect_types(int index) const {
  return aspect_types_.Get(index);
}
inline const std::string& WatchUERequest::aspect_types(int index) const {
  // @@protoc_insertion_point(field_get:onos.uenib.WatchUERequest.aspect_types)
  return _internal_aspect_types(index);
}
inline std::string* WatchUERequest::mutable_aspect_types(int index) {
  // @@protoc_insertion_point(field_mutable:onos.uenib.WatchUERequest.aspect_types)
  return aspect_types_.Mutable(index);
}
inline void WatchUERequest::set_aspect_types(int index, const std::string& value) {
  aspect_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:onos.uenib.WatchUERequest.aspect_types)
}
inline void WatchUERequest::set_aspect_types(int index, std::string&& value) {
  aspect_types_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:onos.uenib.WatchUERequest.aspect_types)
}
inline void WatchUERequest::set_aspect_types(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  aspect_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:onos.uenib.WatchUERequest.aspect_types)
}
inline void WatchUERequest::set_aspect_types(int index, const char* value, size_t size) {
  aspect_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onos.uenib.WatchUERequest.aspect_types)
}
inline std::string* WatchUERequest::_internal_add_aspect_types() {
  return aspect_types_.Add();
}
inline void WatchUERequest::add_aspect_types(const std::string& value) {
  aspect_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:onos.uenib.WatchUERequest.aspect_types)
}
inline void WatchUERequest::add_aspect_types(std::string&& value) {
  aspect_types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:onos.uenib.WatchUERequest.aspect_types)
}
inline void WatchUERequest::add_aspect_types(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  aspect_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:onos.uenib.WatchUERequest.aspect_types)
}
inline void WatchUERequest::add_aspect_types(const char* value, size_t size) {
  aspect_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:onos.uenib.WatchUERequest.aspect_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
WatchUERequest::aspect_types() const {
  // @@protoc_insertion_point(field_list:onos.uenib.WatchUERequest.aspect_types)
  return aspect_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
WatchUERequest::mutable_aspect_types() {
  // @@protoc_insertion_point(field_mutable_list:onos.uenib.WatchUERequest.aspect_types)
  return &aspect_types_;
}

// -------------------------------------------------------------------

// WatchUEResponse

// .onos.uenib.Event event = 1 [(.gogoproto.nullable) = false];
inline bool WatchUEResponse::_internal_has_event() const {
  return this != internal_default_instance() && event_ != nullptr;
}
inline bool WatchUEResponse::has_event() const {
  return _internal_has_event();
}
inline void WatchUEResponse::clear_event() {
  if (GetArenaForAllocation() == nullptr && event_ != nullptr) {
    delete event_;
  }
  event_ = nullptr;
}
inline const ::onos::uenib::Event& WatchUEResponse::_internal_event() const {
  const ::onos::uenib::Event* p = event_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::uenib::Event&>(
      ::onos::uenib::_Event_default_instance_);
}
inline const ::onos::uenib::Event& WatchUEResponse::event() const {
  // @@protoc_insertion_point(field_get:onos.uenib.WatchUEResponse.event)
  return _internal_event();
}
inline void WatchUEResponse::unsafe_arena_set_allocated_event(
    ::onos::uenib::Event* event) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(event_);
  }
  event_ = event;
  if (event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.uenib.WatchUEResponse.event)
}
inline ::onos::uenib::Event* WatchUEResponse::release_event() {
  
  ::onos::uenib::Event* temp = event_;
  event_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::uenib::Event* WatchUEResponse::unsafe_arena_release_event() {
  // @@protoc_insertion_point(field_release:onos.uenib.WatchUEResponse.event)
  
  ::onos::uenib::Event* temp = event_;
  event_ = nullptr;
  return temp;
}
inline ::onos::uenib::Event* WatchUEResponse::_internal_mutable_event() {
  
  if (event_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::uenib::Event>(GetArenaForAllocation());
    event_ = p;
  }
  return event_;
}
inline ::onos::uenib::Event* WatchUEResponse::mutable_event() {
  ::onos::uenib::Event* _msg = _internal_mutable_event();
  // @@protoc_insertion_point(field_mutable:onos.uenib.WatchUEResponse.event)
  return _msg;
}
inline void WatchUEResponse::set_allocated_event(::onos::uenib::Event* event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete event_;
  }
  if (event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::uenib::Event>::GetOwningArena(event);
    if (message_arena != submessage_arena) {
      event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    
  } else {
    
  }
  event_ = event;
  // @@protoc_insertion_point(field_set_allocated:onos.uenib.WatchUEResponse.event)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// UE

// string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.casttype) = "ID"];
inline void UE::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& UE::id() const {
  // @@protoc_insertion_point(field_get:onos.uenib.UE.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UE::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.uenib.UE.id)
}
inline std::string* UE::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:onos.uenib.UE.id)
  return _s;
}
inline const std::string& UE::_internal_id() const {
  return id_.Get();
}
inline void UE::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UE::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UE::release_id() {
  // @@protoc_insertion_point(field_release:onos.uenib.UE.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UE::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.uenib.UE.id)
}

// map<string, .google.protobuf.Any> aspects = 2;
inline int UE::_internal_aspects_size() const {
  return aspects_.size();
}
inline int UE::aspects_size() const {
  return _internal_aspects_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::Any >&
UE::_internal_aspects() const {
  return aspects_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::Any >&
UE::aspects() const {
  // @@protoc_insertion_point(field_map:onos.uenib.UE.aspects)
  return _internal_aspects();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::Any >*
UE::_internal_mutable_aspects() {
  return aspects_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::PROTOBUF_NAMESPACE_ID::Any >*
UE::mutable_aspects() {
  // @@protoc_insertion_point(field_mutable_map:onos.uenib.UE.aspects)
  return _internal_mutable_aspects();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace uenib
}  // namespace onos

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::onos::uenib::EventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::onos::uenib::EventType>() {
  return ::onos::uenib::EventType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_onos_2fuenib_2fuenib_2eproto
