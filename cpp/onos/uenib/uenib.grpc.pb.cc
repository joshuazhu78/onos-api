// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: onos/uenib/uenib.proto

#include "onos/uenib/uenib.pb.h"
#include "onos/uenib/uenib.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace onos {
namespace uenib {

static const char* UEService_method_names[] = {
  "/onos.uenib.UEService/CreateUE",
  "/onos.uenib.UEService/GetUE",
  "/onos.uenib.UEService/UpdateUE",
  "/onos.uenib.UEService/DeleteUE",
  "/onos.uenib.UEService/ListUEs",
  "/onos.uenib.UEService/WatchUEs",
};

std::unique_ptr< UEService::Stub> UEService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< UEService::Stub> stub(new UEService::Stub(channel, options));
  return stub;
}

UEService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateUE_(UEService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetUE_(UEService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateUE_(UEService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteUE_(UEService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListUEs_(UEService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_WatchUEs_(UEService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status UEService::Stub::CreateUE(::grpc::ClientContext* context, const ::onos::uenib::CreateUERequest& request, ::onos::uenib::CreateUEResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::uenib::CreateUERequest, ::onos::uenib::CreateUEResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateUE_, context, request, response);
}

void UEService::Stub::async::CreateUE(::grpc::ClientContext* context, const ::onos::uenib::CreateUERequest* request, ::onos::uenib::CreateUEResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::uenib::CreateUERequest, ::onos::uenib::CreateUEResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateUE_, context, request, response, std::move(f));
}

void UEService::Stub::async::CreateUE(::grpc::ClientContext* context, const ::onos::uenib::CreateUERequest* request, ::onos::uenib::CreateUEResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateUE_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::uenib::CreateUEResponse>* UEService::Stub::PrepareAsyncCreateUERaw(::grpc::ClientContext* context, const ::onos::uenib::CreateUERequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::uenib::CreateUEResponse, ::onos::uenib::CreateUERequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateUE_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::uenib::CreateUEResponse>* UEService::Stub::AsyncCreateUERaw(::grpc::ClientContext* context, const ::onos::uenib::CreateUERequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateUERaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UEService::Stub::GetUE(::grpc::ClientContext* context, const ::onos::uenib::GetUERequest& request, ::onos::uenib::GetUEResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::uenib::GetUERequest, ::onos::uenib::GetUEResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetUE_, context, request, response);
}

void UEService::Stub::async::GetUE(::grpc::ClientContext* context, const ::onos::uenib::GetUERequest* request, ::onos::uenib::GetUEResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::uenib::GetUERequest, ::onos::uenib::GetUEResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUE_, context, request, response, std::move(f));
}

void UEService::Stub::async::GetUE(::grpc::ClientContext* context, const ::onos::uenib::GetUERequest* request, ::onos::uenib::GetUEResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetUE_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::uenib::GetUEResponse>* UEService::Stub::PrepareAsyncGetUERaw(::grpc::ClientContext* context, const ::onos::uenib::GetUERequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::uenib::GetUEResponse, ::onos::uenib::GetUERequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetUE_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::uenib::GetUEResponse>* UEService::Stub::AsyncGetUERaw(::grpc::ClientContext* context, const ::onos::uenib::GetUERequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetUERaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UEService::Stub::UpdateUE(::grpc::ClientContext* context, const ::onos::uenib::UpdateUERequest& request, ::onos::uenib::UpdateUEResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::uenib::UpdateUERequest, ::onos::uenib::UpdateUEResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateUE_, context, request, response);
}

void UEService::Stub::async::UpdateUE(::grpc::ClientContext* context, const ::onos::uenib::UpdateUERequest* request, ::onos::uenib::UpdateUEResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::uenib::UpdateUERequest, ::onos::uenib::UpdateUEResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateUE_, context, request, response, std::move(f));
}

void UEService::Stub::async::UpdateUE(::grpc::ClientContext* context, const ::onos::uenib::UpdateUERequest* request, ::onos::uenib::UpdateUEResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateUE_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::uenib::UpdateUEResponse>* UEService::Stub::PrepareAsyncUpdateUERaw(::grpc::ClientContext* context, const ::onos::uenib::UpdateUERequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::uenib::UpdateUEResponse, ::onos::uenib::UpdateUERequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateUE_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::uenib::UpdateUEResponse>* UEService::Stub::AsyncUpdateUERaw(::grpc::ClientContext* context, const ::onos::uenib::UpdateUERequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateUERaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status UEService::Stub::DeleteUE(::grpc::ClientContext* context, const ::onos::uenib::DeleteUERequest& request, ::onos::uenib::DeleteUEResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::uenib::DeleteUERequest, ::onos::uenib::DeleteUEResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteUE_, context, request, response);
}

void UEService::Stub::async::DeleteUE(::grpc::ClientContext* context, const ::onos::uenib::DeleteUERequest* request, ::onos::uenib::DeleteUEResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::uenib::DeleteUERequest, ::onos::uenib::DeleteUEResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteUE_, context, request, response, std::move(f));
}

void UEService::Stub::async::DeleteUE(::grpc::ClientContext* context, const ::onos::uenib::DeleteUERequest* request, ::onos::uenib::DeleteUEResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteUE_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::uenib::DeleteUEResponse>* UEService::Stub::PrepareAsyncDeleteUERaw(::grpc::ClientContext* context, const ::onos::uenib::DeleteUERequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::uenib::DeleteUEResponse, ::onos::uenib::DeleteUERequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteUE_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::uenib::DeleteUEResponse>* UEService::Stub::AsyncDeleteUERaw(::grpc::ClientContext* context, const ::onos::uenib::DeleteUERequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteUERaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::onos::uenib::ListUEResponse>* UEService::Stub::ListUEsRaw(::grpc::ClientContext* context, const ::onos::uenib::ListUERequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::onos::uenib::ListUEResponse>::Create(channel_.get(), rpcmethod_ListUEs_, context, request);
}

void UEService::Stub::async::ListUEs(::grpc::ClientContext* context, const ::onos::uenib::ListUERequest* request, ::grpc::ClientReadReactor< ::onos::uenib::ListUEResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::onos::uenib::ListUEResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_ListUEs_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::onos::uenib::ListUEResponse>* UEService::Stub::AsyncListUEsRaw(::grpc::ClientContext* context, const ::onos::uenib::ListUERequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::onos::uenib::ListUEResponse>::Create(channel_.get(), cq, rpcmethod_ListUEs_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::onos::uenib::ListUEResponse>* UEService::Stub::PrepareAsyncListUEsRaw(::grpc::ClientContext* context, const ::onos::uenib::ListUERequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::onos::uenib::ListUEResponse>::Create(channel_.get(), cq, rpcmethod_ListUEs_, context, request, false, nullptr);
}

::grpc::ClientReader< ::onos::uenib::WatchUEResponse>* UEService::Stub::WatchUEsRaw(::grpc::ClientContext* context, const ::onos::uenib::WatchUERequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::onos::uenib::WatchUEResponse>::Create(channel_.get(), rpcmethod_WatchUEs_, context, request);
}

void UEService::Stub::async::WatchUEs(::grpc::ClientContext* context, const ::onos::uenib::WatchUERequest* request, ::grpc::ClientReadReactor< ::onos::uenib::WatchUEResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::onos::uenib::WatchUEResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_WatchUEs_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::onos::uenib::WatchUEResponse>* UEService::Stub::AsyncWatchUEsRaw(::grpc::ClientContext* context, const ::onos::uenib::WatchUERequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::onos::uenib::WatchUEResponse>::Create(channel_.get(), cq, rpcmethod_WatchUEs_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::onos::uenib::WatchUEResponse>* UEService::Stub::PrepareAsyncWatchUEsRaw(::grpc::ClientContext* context, const ::onos::uenib::WatchUERequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::onos::uenib::WatchUEResponse>::Create(channel_.get(), cq, rpcmethod_WatchUEs_, context, request, false, nullptr);
}

UEService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UEService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UEService::Service, ::onos::uenib::CreateUERequest, ::onos::uenib::CreateUEResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UEService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::uenib::CreateUERequest* req,
             ::onos::uenib::CreateUEResponse* resp) {
               return service->CreateUE(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UEService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UEService::Service, ::onos::uenib::GetUERequest, ::onos::uenib::GetUEResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UEService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::uenib::GetUERequest* req,
             ::onos::uenib::GetUEResponse* resp) {
               return service->GetUE(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UEService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UEService::Service, ::onos::uenib::UpdateUERequest, ::onos::uenib::UpdateUEResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UEService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::uenib::UpdateUERequest* req,
             ::onos::uenib::UpdateUEResponse* resp) {
               return service->UpdateUE(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UEService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< UEService::Service, ::onos::uenib::DeleteUERequest, ::onos::uenib::DeleteUEResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](UEService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::uenib::DeleteUERequest* req,
             ::onos::uenib::DeleteUEResponse* resp) {
               return service->DeleteUE(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UEService_method_names[4],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< UEService::Service, ::onos::uenib::ListUERequest, ::onos::uenib::ListUEResponse>(
          [](UEService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::uenib::ListUERequest* req,
             ::grpc::ServerWriter<::onos::uenib::ListUEResponse>* writer) {
               return service->ListUEs(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      UEService_method_names[5],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< UEService::Service, ::onos::uenib::WatchUERequest, ::onos::uenib::WatchUEResponse>(
          [](UEService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::uenib::WatchUERequest* req,
             ::grpc::ServerWriter<::onos::uenib::WatchUEResponse>* writer) {
               return service->WatchUEs(ctx, req, writer);
             }, this)));
}

UEService::Service::~Service() {
}

::grpc::Status UEService::Service::CreateUE(::grpc::ServerContext* context, const ::onos::uenib::CreateUERequest* request, ::onos::uenib::CreateUEResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UEService::Service::GetUE(::grpc::ServerContext* context, const ::onos::uenib::GetUERequest* request, ::onos::uenib::GetUEResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UEService::Service::UpdateUE(::grpc::ServerContext* context, const ::onos::uenib::UpdateUERequest* request, ::onos::uenib::UpdateUEResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UEService::Service::DeleteUE(::grpc::ServerContext* context, const ::onos::uenib::DeleteUERequest* request, ::onos::uenib::DeleteUEResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UEService::Service::ListUEs(::grpc::ServerContext* context, const ::onos::uenib::ListUERequest* request, ::grpc::ServerWriter< ::onos::uenib::ListUEResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status UEService::Service::WatchUEs(::grpc::ServerContext* context, const ::onos::uenib::WatchUERequest* request, ::grpc::ServerWriter< ::onos::uenib::WatchUEResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace onos
}  // namespace uenib

