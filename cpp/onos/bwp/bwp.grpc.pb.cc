// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: onos/bwp/bwp.proto

#include "onos/bwp/bwp.pb.h"
#include "onos/bwp/bwp.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace onos {
namespace bwp {

static const char* Bwp_method_names[] = {
  "/onos.bwp.Bwp/GetConflicts",
  "/onos.bwp.Bwp/GetResolvedConflicts",
  "/onos.bwp.Bwp/GetCell",
  "/onos.bwp.Bwp/GetCells",
};

std::unique_ptr< Bwp::Stub> Bwp::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Bwp::Stub> stub(new Bwp::Stub(channel, options));
  return stub;
}

Bwp::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetConflicts_(Bwp_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetResolvedConflicts_(Bwp_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCell_(Bwp_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCells_(Bwp_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Bwp::Stub::GetConflicts(::grpc::ClientContext* context, const ::onos::bwp::GetConflictsRequest& request, ::onos::bwp::GetConflictsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::bwp::GetConflictsRequest, ::onos::bwp::GetConflictsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetConflicts_, context, request, response);
}

void Bwp::Stub::async::GetConflicts(::grpc::ClientContext* context, const ::onos::bwp::GetConflictsRequest* request, ::onos::bwp::GetConflictsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::bwp::GetConflictsRequest, ::onos::bwp::GetConflictsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetConflicts_, context, request, response, std::move(f));
}

void Bwp::Stub::async::GetConflicts(::grpc::ClientContext* context, const ::onos::bwp::GetConflictsRequest* request, ::onos::bwp::GetConflictsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetConflicts_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::bwp::GetConflictsResponse>* Bwp::Stub::PrepareAsyncGetConflictsRaw(::grpc::ClientContext* context, const ::onos::bwp::GetConflictsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::bwp::GetConflictsResponse, ::onos::bwp::GetConflictsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetConflicts_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::bwp::GetConflictsResponse>* Bwp::Stub::AsyncGetConflictsRaw(::grpc::ClientContext* context, const ::onos::bwp::GetConflictsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetConflictsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Bwp::Stub::GetResolvedConflicts(::grpc::ClientContext* context, const ::onos::bwp::GetResolvedConflictsRequest& request, ::onos::bwp::GetResolvedConflictsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::bwp::GetResolvedConflictsRequest, ::onos::bwp::GetResolvedConflictsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetResolvedConflicts_, context, request, response);
}

void Bwp::Stub::async::GetResolvedConflicts(::grpc::ClientContext* context, const ::onos::bwp::GetResolvedConflictsRequest* request, ::onos::bwp::GetResolvedConflictsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::bwp::GetResolvedConflictsRequest, ::onos::bwp::GetResolvedConflictsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetResolvedConflicts_, context, request, response, std::move(f));
}

void Bwp::Stub::async::GetResolvedConflicts(::grpc::ClientContext* context, const ::onos::bwp::GetResolvedConflictsRequest* request, ::onos::bwp::GetResolvedConflictsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetResolvedConflicts_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::bwp::GetResolvedConflictsResponse>* Bwp::Stub::PrepareAsyncGetResolvedConflictsRaw(::grpc::ClientContext* context, const ::onos::bwp::GetResolvedConflictsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::bwp::GetResolvedConflictsResponse, ::onos::bwp::GetResolvedConflictsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetResolvedConflicts_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::bwp::GetResolvedConflictsResponse>* Bwp::Stub::AsyncGetResolvedConflictsRaw(::grpc::ClientContext* context, const ::onos::bwp::GetResolvedConflictsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetResolvedConflictsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Bwp::Stub::GetCell(::grpc::ClientContext* context, const ::onos::bwp::GetCellRequest& request, ::onos::bwp::GetCellResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::bwp::GetCellRequest, ::onos::bwp::GetCellResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCell_, context, request, response);
}

void Bwp::Stub::async::GetCell(::grpc::ClientContext* context, const ::onos::bwp::GetCellRequest* request, ::onos::bwp::GetCellResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::bwp::GetCellRequest, ::onos::bwp::GetCellResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCell_, context, request, response, std::move(f));
}

void Bwp::Stub::async::GetCell(::grpc::ClientContext* context, const ::onos::bwp::GetCellRequest* request, ::onos::bwp::GetCellResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCell_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::bwp::GetCellResponse>* Bwp::Stub::PrepareAsyncGetCellRaw(::grpc::ClientContext* context, const ::onos::bwp::GetCellRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::bwp::GetCellResponse, ::onos::bwp::GetCellRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCell_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::bwp::GetCellResponse>* Bwp::Stub::AsyncGetCellRaw(::grpc::ClientContext* context, const ::onos::bwp::GetCellRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCellRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Bwp::Stub::GetCells(::grpc::ClientContext* context, const ::onos::bwp::GetCellsRequest& request, ::onos::bwp::GetCellsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::bwp::GetCellsRequest, ::onos::bwp::GetCellsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCells_, context, request, response);
}

void Bwp::Stub::async::GetCells(::grpc::ClientContext* context, const ::onos::bwp::GetCellsRequest* request, ::onos::bwp::GetCellsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::bwp::GetCellsRequest, ::onos::bwp::GetCellsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCells_, context, request, response, std::move(f));
}

void Bwp::Stub::async::GetCells(::grpc::ClientContext* context, const ::onos::bwp::GetCellsRequest* request, ::onos::bwp::GetCellsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCells_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::bwp::GetCellsResponse>* Bwp::Stub::PrepareAsyncGetCellsRaw(::grpc::ClientContext* context, const ::onos::bwp::GetCellsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::bwp::GetCellsResponse, ::onos::bwp::GetCellsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCells_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::bwp::GetCellsResponse>* Bwp::Stub::AsyncGetCellsRaw(::grpc::ClientContext* context, const ::onos::bwp::GetCellsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetCellsRaw(context, request, cq);
  result->StartCall();
  return result;
}

Bwp::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Bwp_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Bwp::Service, ::onos::bwp::GetConflictsRequest, ::onos::bwp::GetConflictsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Bwp::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::bwp::GetConflictsRequest* req,
             ::onos::bwp::GetConflictsResponse* resp) {
               return service->GetConflicts(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Bwp_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Bwp::Service, ::onos::bwp::GetResolvedConflictsRequest, ::onos::bwp::GetResolvedConflictsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Bwp::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::bwp::GetResolvedConflictsRequest* req,
             ::onos::bwp::GetResolvedConflictsResponse* resp) {
               return service->GetResolvedConflicts(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Bwp_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Bwp::Service, ::onos::bwp::GetCellRequest, ::onos::bwp::GetCellResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Bwp::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::bwp::GetCellRequest* req,
             ::onos::bwp::GetCellResponse* resp) {
               return service->GetCell(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Bwp_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Bwp::Service, ::onos::bwp::GetCellsRequest, ::onos::bwp::GetCellsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Bwp::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::bwp::GetCellsRequest* req,
             ::onos::bwp::GetCellsResponse* resp) {
               return service->GetCells(ctx, req, resp);
             }, this)));
}

Bwp::Service::~Service() {
}

::grpc::Status Bwp::Service::GetConflicts(::grpc::ServerContext* context, const ::onos::bwp::GetConflictsRequest* request, ::onos::bwp::GetConflictsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Bwp::Service::GetResolvedConflicts(::grpc::ServerContext* context, const ::onos::bwp::GetResolvedConflictsRequest* request, ::onos::bwp::GetResolvedConflictsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Bwp::Service::GetCell(::grpc::ServerContext* context, const ::onos::bwp::GetCellRequest* request, ::onos::bwp::GetCellResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Bwp::Service::GetCells(::grpc::ServerContext* context, const ::onos::bwp::GetCellsRequest* request, ::onos::bwp::GetCellsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace onos
}  // namespace bwp

