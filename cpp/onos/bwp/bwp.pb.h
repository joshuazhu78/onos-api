// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onos/bwp/bwp.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_onos_2fbwp_2fbwp_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_onos_2fbwp_2fbwp_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_onos_2fbwp_2fbwp_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_onos_2fbwp_2fbwp_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_onos_2fbwp_2fbwp_2eproto;
namespace onos {
namespace bwp {
class BwpCell;
struct BwpCellDefaultTypeInternal;
extern BwpCellDefaultTypeInternal _BwpCell_default_instance_;
class CellResolution;
struct CellResolutionDefaultTypeInternal;
extern CellResolutionDefaultTypeInternal _CellResolution_default_instance_;
class GetCellRequest;
struct GetCellRequestDefaultTypeInternal;
extern GetCellRequestDefaultTypeInternal _GetCellRequest_default_instance_;
class GetCellResponse;
struct GetCellResponseDefaultTypeInternal;
extern GetCellResponseDefaultTypeInternal _GetCellResponse_default_instance_;
class GetCellsRequest;
struct GetCellsRequestDefaultTypeInternal;
extern GetCellsRequestDefaultTypeInternal _GetCellsRequest_default_instance_;
class GetCellsResponse;
struct GetCellsResponseDefaultTypeInternal;
extern GetCellsResponseDefaultTypeInternal _GetCellsResponse_default_instance_;
class GetConflictsRequest;
struct GetConflictsRequestDefaultTypeInternal;
extern GetConflictsRequestDefaultTypeInternal _GetConflictsRequest_default_instance_;
class GetConflictsResponse;
struct GetConflictsResponseDefaultTypeInternal;
extern GetConflictsResponseDefaultTypeInternal _GetConflictsResponse_default_instance_;
class GetResolvedConflictsRequest;
struct GetResolvedConflictsRequestDefaultTypeInternal;
extern GetResolvedConflictsRequestDefaultTypeInternal _GetResolvedConflictsRequest_default_instance_;
class GetResolvedConflictsResponse;
struct GetResolvedConflictsResponseDefaultTypeInternal;
extern GetResolvedConflictsResponseDefaultTypeInternal _GetResolvedConflictsResponse_default_instance_;
class PrbRange;
struct PrbRangeDefaultTypeInternal;
extern PrbRangeDefaultTypeInternal _PrbRange_default_instance_;
}  // namespace bwp
}  // namespace onos
PROTOBUF_NAMESPACE_OPEN
template<> ::onos::bwp::BwpCell* Arena::CreateMaybeMessage<::onos::bwp::BwpCell>(Arena*);
template<> ::onos::bwp::CellResolution* Arena::CreateMaybeMessage<::onos::bwp::CellResolution>(Arena*);
template<> ::onos::bwp::GetCellRequest* Arena::CreateMaybeMessage<::onos::bwp::GetCellRequest>(Arena*);
template<> ::onos::bwp::GetCellResponse* Arena::CreateMaybeMessage<::onos::bwp::GetCellResponse>(Arena*);
template<> ::onos::bwp::GetCellsRequest* Arena::CreateMaybeMessage<::onos::bwp::GetCellsRequest>(Arena*);
template<> ::onos::bwp::GetCellsResponse* Arena::CreateMaybeMessage<::onos::bwp::GetCellsResponse>(Arena*);
template<> ::onos::bwp::GetConflictsRequest* Arena::CreateMaybeMessage<::onos::bwp::GetConflictsRequest>(Arena*);
template<> ::onos::bwp::GetConflictsResponse* Arena::CreateMaybeMessage<::onos::bwp::GetConflictsResponse>(Arena*);
template<> ::onos::bwp::GetResolvedConflictsRequest* Arena::CreateMaybeMessage<::onos::bwp::GetResolvedConflictsRequest>(Arena*);
template<> ::onos::bwp::GetResolvedConflictsResponse* Arena::CreateMaybeMessage<::onos::bwp::GetResolvedConflictsResponse>(Arena*);
template<> ::onos::bwp::PrbRange* Arena::CreateMaybeMessage<::onos::bwp::PrbRange>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace onos {
namespace bwp {

enum CellType : int {
  FEMTO = 0,
  ENTERPRISE = 1,
  OUTDOOR_SMALL = 2,
  MACRO = 3,
  CellType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CellType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CellType_IsValid(int value);
constexpr CellType CellType_MIN = FEMTO;
constexpr CellType CellType_MAX = MACRO;
constexpr int CellType_ARRAYSIZE = CellType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CellType_descriptor();
template<typename T>
inline const std::string& CellType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CellType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CellType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CellType_descriptor(), enum_t_value);
}
inline bool CellType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CellType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CellType>(
    CellType_descriptor(), name, value);
}
// ===================================================================

class GetConflictsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.bwp.GetConflictsRequest) */ {
 public:
  inline GetConflictsRequest() : GetConflictsRequest(nullptr) {}
  ~GetConflictsRequest() override;
  explicit constexpr GetConflictsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetConflictsRequest(const GetConflictsRequest& from);
  GetConflictsRequest(GetConflictsRequest&& from) noexcept
    : GetConflictsRequest() {
    *this = ::std::move(from);
  }

  inline GetConflictsRequest& operator=(const GetConflictsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConflictsRequest& operator=(GetConflictsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetConflictsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetConflictsRequest* internal_default_instance() {
    return reinterpret_cast<const GetConflictsRequest*>(
               &_GetConflictsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GetConflictsRequest& a, GetConflictsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConflictsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetConflictsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetConflictsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetConflictsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetConflictsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetConflictsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConflictsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.bwp.GetConflictsRequest";
  }
  protected:
  explicit GetConflictsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellIdFieldNumber = 1,
  };
  // uint64 cell_id = 1;
  void clear_cell_id();
  uint64_t cell_id() const;
  void set_cell_id(uint64_t value);
  private:
  uint64_t _internal_cell_id() const;
  void _internal_set_cell_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.bwp.GetConflictsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t cell_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fbwp_2fbwp_2eproto;
};
// -------------------------------------------------------------------

class GetConflictsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.bwp.GetConflictsResponse) */ {
 public:
  inline GetConflictsResponse() : GetConflictsResponse(nullptr) {}
  ~GetConflictsResponse() override;
  explicit constexpr GetConflictsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetConflictsResponse(const GetConflictsResponse& from);
  GetConflictsResponse(GetConflictsResponse&& from) noexcept
    : GetConflictsResponse() {
    *this = ::std::move(from);
  }

  inline GetConflictsResponse& operator=(const GetConflictsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConflictsResponse& operator=(GetConflictsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetConflictsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetConflictsResponse* internal_default_instance() {
    return reinterpret_cast<const GetConflictsResponse*>(
               &_GetConflictsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GetConflictsResponse& a, GetConflictsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConflictsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetConflictsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetConflictsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetConflictsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetConflictsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetConflictsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConflictsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.bwp.GetConflictsResponse";
  }
  protected:
  explicit GetConflictsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellsFieldNumber = 1,
  };
  // repeated .onos.bwp.BwpCell cells = 1;
  int cells_size() const;
  private:
  int _internal_cells_size() const;
  public:
  void clear_cells();
  ::onos::bwp::BwpCell* mutable_cells(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::bwp::BwpCell >*
      mutable_cells();
  private:
  const ::onos::bwp::BwpCell& _internal_cells(int index) const;
  ::onos::bwp::BwpCell* _internal_add_cells();
  public:
  const ::onos::bwp::BwpCell& cells(int index) const;
  ::onos::bwp::BwpCell* add_cells();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::bwp::BwpCell >&
      cells() const;

  // @@protoc_insertion_point(class_scope:onos.bwp.GetConflictsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::bwp::BwpCell > cells_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fbwp_2fbwp_2eproto;
};
// -------------------------------------------------------------------

class GetResolvedConflictsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:onos.bwp.GetResolvedConflictsRequest) */ {
 public:
  inline GetResolvedConflictsRequest() : GetResolvedConflictsRequest(nullptr) {}
  explicit constexpr GetResolvedConflictsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetResolvedConflictsRequest(const GetResolvedConflictsRequest& from);
  GetResolvedConflictsRequest(GetResolvedConflictsRequest&& from) noexcept
    : GetResolvedConflictsRequest() {
    *this = ::std::move(from);
  }

  inline GetResolvedConflictsRequest& operator=(const GetResolvedConflictsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetResolvedConflictsRequest& operator=(GetResolvedConflictsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetResolvedConflictsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetResolvedConflictsRequest* internal_default_instance() {
    return reinterpret_cast<const GetResolvedConflictsRequest*>(
               &_GetResolvedConflictsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetResolvedConflictsRequest& a, GetResolvedConflictsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetResolvedConflictsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetResolvedConflictsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetResolvedConflictsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetResolvedConflictsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetResolvedConflictsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetResolvedConflictsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.bwp.GetResolvedConflictsRequest";
  }
  protected:
  explicit GetResolvedConflictsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onos.bwp.GetResolvedConflictsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fbwp_2fbwp_2eproto;
};
// -------------------------------------------------------------------

class GetResolvedConflictsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.bwp.GetResolvedConflictsResponse) */ {
 public:
  inline GetResolvedConflictsResponse() : GetResolvedConflictsResponse(nullptr) {}
  ~GetResolvedConflictsResponse() override;
  explicit constexpr GetResolvedConflictsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetResolvedConflictsResponse(const GetResolvedConflictsResponse& from);
  GetResolvedConflictsResponse(GetResolvedConflictsResponse&& from) noexcept
    : GetResolvedConflictsResponse() {
    *this = ::std::move(from);
  }

  inline GetResolvedConflictsResponse& operator=(const GetResolvedConflictsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetResolvedConflictsResponse& operator=(GetResolvedConflictsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetResolvedConflictsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetResolvedConflictsResponse* internal_default_instance() {
    return reinterpret_cast<const GetResolvedConflictsResponse*>(
               &_GetResolvedConflictsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetResolvedConflictsResponse& a, GetResolvedConflictsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetResolvedConflictsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetResolvedConflictsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetResolvedConflictsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetResolvedConflictsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetResolvedConflictsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetResolvedConflictsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetResolvedConflictsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.bwp.GetResolvedConflictsResponse";
  }
  protected:
  explicit GetResolvedConflictsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellsFieldNumber = 1,
  };
  // repeated .onos.bwp.CellResolution cells = 1;
  int cells_size() const;
  private:
  int _internal_cells_size() const;
  public:
  void clear_cells();
  ::onos::bwp::CellResolution* mutable_cells(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::bwp::CellResolution >*
      mutable_cells();
  private:
  const ::onos::bwp::CellResolution& _internal_cells(int index) const;
  ::onos::bwp::CellResolution* _internal_add_cells();
  public:
  const ::onos::bwp::CellResolution& cells(int index) const;
  ::onos::bwp::CellResolution* add_cells();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::bwp::CellResolution >&
      cells() const;

  // @@protoc_insertion_point(class_scope:onos.bwp.GetResolvedConflictsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::bwp::CellResolution > cells_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fbwp_2fbwp_2eproto;
};
// -------------------------------------------------------------------

class CellResolution final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.bwp.CellResolution) */ {
 public:
  inline CellResolution() : CellResolution(nullptr) {}
  ~CellResolution() override;
  explicit constexpr CellResolution(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CellResolution(const CellResolution& from);
  CellResolution(CellResolution&& from) noexcept
    : CellResolution() {
    *this = ::std::move(from);
  }

  inline CellResolution& operator=(const CellResolution& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellResolution& operator=(CellResolution&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellResolution& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellResolution* internal_default_instance() {
    return reinterpret_cast<const CellResolution*>(
               &_CellResolution_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CellResolution& a, CellResolution& b) {
    a.Swap(&b);
  }
  inline void Swap(CellResolution* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellResolution* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CellResolution* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CellResolution>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CellResolution& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CellResolution& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellResolution* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.bwp.CellResolution";
  }
  protected:
  explicit CellResolution(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResolvedBwpFieldNumber = 2,
    kOriginalBwpFieldNumber = 3,
    kIdFieldNumber = 1,
    kResolvedConflictsFieldNumber = 4,
  };
  // repeated int32 resolved_bwp = 2;
  int resolved_bwp_size() const;
  private:
  int _internal_resolved_bwp_size() const;
  public:
  void clear_resolved_bwp();
  private:
  int32_t _internal_resolved_bwp(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_resolved_bwp() const;
  void _internal_add_resolved_bwp(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_resolved_bwp();
  public:
  int32_t resolved_bwp(int index) const;
  void set_resolved_bwp(int index, int32_t value);
  void add_resolved_bwp(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      resolved_bwp() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_resolved_bwp();

  // repeated int32 original_bwp = 3;
  int original_bwp_size() const;
  private:
  int _internal_original_bwp_size() const;
  public:
  void clear_original_bwp();
  private:
  int32_t _internal_original_bwp(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_original_bwp() const;
  void _internal_add_original_bwp(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_original_bwp();
  public:
  int32_t original_bwp(int index) const;
  void set_original_bwp(int index, int32_t value);
  void add_original_bwp(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      original_bwp() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_original_bwp();

  // uint64 id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // uint32 resolved_conflicts = 4;
  void clear_resolved_conflicts();
  uint32_t resolved_conflicts() const;
  void set_resolved_conflicts(uint32_t value);
  private:
  uint32_t _internal_resolved_conflicts() const;
  void _internal_set_resolved_conflicts(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.bwp.CellResolution)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > resolved_bwp_;
  mutable std::atomic<int> _resolved_bwp_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > original_bwp_;
  mutable std::atomic<int> _original_bwp_cached_byte_size_;
  uint64_t id_;
  uint32_t resolved_conflicts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fbwp_2fbwp_2eproto;
};
// -------------------------------------------------------------------

class GetCellRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.bwp.GetCellRequest) */ {
 public:
  inline GetCellRequest() : GetCellRequest(nullptr) {}
  ~GetCellRequest() override;
  explicit constexpr GetCellRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCellRequest(const GetCellRequest& from);
  GetCellRequest(GetCellRequest&& from) noexcept
    : GetCellRequest() {
    *this = ::std::move(from);
  }

  inline GetCellRequest& operator=(const GetCellRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCellRequest& operator=(GetCellRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCellRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCellRequest* internal_default_instance() {
    return reinterpret_cast<const GetCellRequest*>(
               &_GetCellRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GetCellRequest& a, GetCellRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCellRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCellRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCellRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCellRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCellRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetCellRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCellRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.bwp.GetCellRequest";
  }
  protected:
  explicit GetCellRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellIdFieldNumber = 1,
  };
  // uint64 cell_id = 1;
  void clear_cell_id();
  uint64_t cell_id() const;
  void set_cell_id(uint64_t value);
  private:
  uint64_t _internal_cell_id() const;
  void _internal_set_cell_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.bwp.GetCellRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t cell_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fbwp_2fbwp_2eproto;
};
// -------------------------------------------------------------------

class GetCellResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.bwp.GetCellResponse) */ {
 public:
  inline GetCellResponse() : GetCellResponse(nullptr) {}
  ~GetCellResponse() override;
  explicit constexpr GetCellResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCellResponse(const GetCellResponse& from);
  GetCellResponse(GetCellResponse&& from) noexcept
    : GetCellResponse() {
    *this = ::std::move(from);
  }

  inline GetCellResponse& operator=(const GetCellResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCellResponse& operator=(GetCellResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCellResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCellResponse* internal_default_instance() {
    return reinterpret_cast<const GetCellResponse*>(
               &_GetCellResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetCellResponse& a, GetCellResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCellResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCellResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCellResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCellResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCellResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetCellResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCellResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.bwp.GetCellResponse";
  }
  protected:
  explicit GetCellResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellFieldNumber = 1,
  };
  // .onos.bwp.BwpCell cell = 1;
  bool has_cell() const;
  private:
  bool _internal_has_cell() const;
  public:
  void clear_cell();
  const ::onos::bwp::BwpCell& cell() const;
  PROTOBUF_NODISCARD ::onos::bwp::BwpCell* release_cell();
  ::onos::bwp::BwpCell* mutable_cell();
  void set_allocated_cell(::onos::bwp::BwpCell* cell);
  private:
  const ::onos::bwp::BwpCell& _internal_cell() const;
  ::onos::bwp::BwpCell* _internal_mutable_cell();
  public:
  void unsafe_arena_set_allocated_cell(
      ::onos::bwp::BwpCell* cell);
  ::onos::bwp::BwpCell* unsafe_arena_release_cell();

  // @@protoc_insertion_point(class_scope:onos.bwp.GetCellResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::bwp::BwpCell* cell_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fbwp_2fbwp_2eproto;
};
// -------------------------------------------------------------------

class GetCellsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:onos.bwp.GetCellsRequest) */ {
 public:
  inline GetCellsRequest() : GetCellsRequest(nullptr) {}
  explicit constexpr GetCellsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCellsRequest(const GetCellsRequest& from);
  GetCellsRequest(GetCellsRequest&& from) noexcept
    : GetCellsRequest() {
    *this = ::std::move(from);
  }

  inline GetCellsRequest& operator=(const GetCellsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCellsRequest& operator=(GetCellsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCellsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCellsRequest* internal_default_instance() {
    return reinterpret_cast<const GetCellsRequest*>(
               &_GetCellsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetCellsRequest& a, GetCellsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCellsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCellsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCellsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCellsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetCellsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetCellsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.bwp.GetCellsRequest";
  }
  protected:
  explicit GetCellsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onos.bwp.GetCellsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fbwp_2fbwp_2eproto;
};
// -------------------------------------------------------------------

class GetCellsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.bwp.GetCellsResponse) */ {
 public:
  inline GetCellsResponse() : GetCellsResponse(nullptr) {}
  ~GetCellsResponse() override;
  explicit constexpr GetCellsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetCellsResponse(const GetCellsResponse& from);
  GetCellsResponse(GetCellsResponse&& from) noexcept
    : GetCellsResponse() {
    *this = ::std::move(from);
  }

  inline GetCellsResponse& operator=(const GetCellsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCellsResponse& operator=(GetCellsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCellsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCellsResponse* internal_default_instance() {
    return reinterpret_cast<const GetCellsResponse*>(
               &_GetCellsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(GetCellsResponse& a, GetCellsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCellsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCellsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCellsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetCellsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetCellsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetCellsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCellsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.bwp.GetCellsResponse";
  }
  protected:
  explicit GetCellsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCellsFieldNumber = 1,
  };
  // repeated .onos.bwp.BwpCell cells = 1;
  int cells_size() const;
  private:
  int _internal_cells_size() const;
  public:
  void clear_cells();
  ::onos::bwp::BwpCell* mutable_cells(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::bwp::BwpCell >*
      mutable_cells();
  private:
  const ::onos::bwp::BwpCell& _internal_cells(int index) const;
  ::onos::bwp::BwpCell* _internal_add_cells();
  public:
  const ::onos::bwp::BwpCell& cells(int index) const;
  ::onos::bwp::BwpCell* add_cells();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::bwp::BwpCell >&
      cells() const;

  // @@protoc_insertion_point(class_scope:onos.bwp.GetCellsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::bwp::BwpCell > cells_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fbwp_2fbwp_2eproto;
};
// -------------------------------------------------------------------

class BwpCell final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.bwp.BwpCell) */ {
 public:
  inline BwpCell() : BwpCell(nullptr) {}
  ~BwpCell() override;
  explicit constexpr BwpCell(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BwpCell(const BwpCell& from);
  BwpCell(BwpCell&& from) noexcept
    : BwpCell() {
    *this = ::std::move(from);
  }

  inline BwpCell& operator=(const BwpCell& from) {
    CopyFrom(from);
    return *this;
  }
  inline BwpCell& operator=(BwpCell&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BwpCell& default_instance() {
    return *internal_default_instance();
  }
  static inline const BwpCell* internal_default_instance() {
    return reinterpret_cast<const BwpCell*>(
               &_BwpCell_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(BwpCell& a, BwpCell& b) {
    a.Swap(&b);
  }
  inline void Swap(BwpCell* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BwpCell* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  BwpCell* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<BwpCell>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BwpCell& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BwpCell& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BwpCell* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.bwp.BwpCell";
  }
  protected:
  explicit BwpCell(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBwpsFieldNumber = 5,
    kPrbPoolFieldNumber = 6,
    kNeighborIdsFieldNumber = 7,
    kNodeIdFieldNumber = 2,
    kIdFieldNumber = 1,
    kArfcnFieldNumber = 3,
    kCellTypeFieldNumber = 4,
  };
  // repeated int32 bwps = 5;
  int bwps_size() const;
  private:
  int _internal_bwps_size() const;
  public:
  void clear_bwps();
  private:
  int32_t _internal_bwps(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_bwps() const;
  void _internal_add_bwps(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_bwps();
  public:
  int32_t bwps(int index) const;
  void set_bwps(int index, int32_t value);
  void add_bwps(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      bwps() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_bwps();

  // repeated .onos.bwp.PrbRange prb_pool = 6;
  int prb_pool_size() const;
  private:
  int _internal_prb_pool_size() const;
  public:
  void clear_prb_pool();
  ::onos::bwp::PrbRange* mutable_prb_pool(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::bwp::PrbRange >*
      mutable_prb_pool();
  private:
  const ::onos::bwp::PrbRange& _internal_prb_pool(int index) const;
  ::onos::bwp::PrbRange* _internal_add_prb_pool();
  public:
  const ::onos::bwp::PrbRange& prb_pool(int index) const;
  ::onos::bwp::PrbRange* add_prb_pool();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::bwp::PrbRange >&
      prb_pool() const;

  // repeated uint64 neighbor_ids = 7;
  int neighbor_ids_size() const;
  private:
  int _internal_neighbor_ids_size() const;
  public:
  void clear_neighbor_ids();
  private:
  uint64_t _internal_neighbor_ids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_neighbor_ids() const;
  void _internal_add_neighbor_ids(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_neighbor_ids();
  public:
  uint64_t neighbor_ids(int index) const;
  void set_neighbor_ids(int index, uint64_t value);
  void add_neighbor_ids(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      neighbor_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_neighbor_ids();

  // string node_id = 2;
  void clear_node_id();
  const std::string& node_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_node_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_node_id();
  PROTOBUF_NODISCARD std::string* release_node_id();
  void set_allocated_node_id(std::string* node_id);
  private:
  const std::string& _internal_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_node_id(const std::string& value);
  std::string* _internal_mutable_node_id();
  public:

  // uint64 id = 1;
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // uint32 arfcn = 3;
  void clear_arfcn();
  uint32_t arfcn() const;
  void set_arfcn(uint32_t value);
  private:
  uint32_t _internal_arfcn() const;
  void _internal_set_arfcn(uint32_t value);
  public:

  // .onos.bwp.CellType cell_type = 4;
  void clear_cell_type();
  ::onos::bwp::CellType cell_type() const;
  void set_cell_type(::onos::bwp::CellType value);
  private:
  ::onos::bwp::CellType _internal_cell_type() const;
  void _internal_set_cell_type(::onos::bwp::CellType value);
  public:

  // @@protoc_insertion_point(class_scope:onos.bwp.BwpCell)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > bwps_;
  mutable std::atomic<int> _bwps_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::bwp::PrbRange > prb_pool_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > neighbor_ids_;
  mutable std::atomic<int> _neighbor_ids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_id_;
  uint64_t id_;
  uint32_t arfcn_;
  int cell_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fbwp_2fbwp_2eproto;
};
// -------------------------------------------------------------------

class PrbRange final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.bwp.PrbRange) */ {
 public:
  inline PrbRange() : PrbRange(nullptr) {}
  ~PrbRange() override;
  explicit constexpr PrbRange(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PrbRange(const PrbRange& from);
  PrbRange(PrbRange&& from) noexcept
    : PrbRange() {
    *this = ::std::move(from);
  }

  inline PrbRange& operator=(const PrbRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline PrbRange& operator=(PrbRange&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PrbRange& default_instance() {
    return *internal_default_instance();
  }
  static inline const PrbRange* internal_default_instance() {
    return reinterpret_cast<const PrbRange*>(
               &_PrbRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(PrbRange& a, PrbRange& b) {
    a.Swap(&b);
  }
  inline void Swap(PrbRange* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PrbRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PrbRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PrbRange>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PrbRange& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PrbRange& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrbRange* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.bwp.PrbRange";
  }
  protected:
  explicit PrbRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinFieldNumber = 1,
    kMaxFieldNumber = 2,
  };
  // uint32 min = 1;
  void clear_min();
  uint32_t min() const;
  void set_min(uint32_t value);
  private:
  uint32_t _internal_min() const;
  void _internal_set_min(uint32_t value);
  public:

  // uint32 max = 2;
  void clear_max();
  uint32_t max() const;
  void set_max(uint32_t value);
  private:
  uint32_t _internal_max() const;
  void _internal_set_max(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.bwp.PrbRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint32_t min_;
  uint32_t max_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fbwp_2fbwp_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GetConflictsRequest

// uint64 cell_id = 1;
inline void GetConflictsRequest::clear_cell_id() {
  cell_id_ = uint64_t{0u};
}
inline uint64_t GetConflictsRequest::_internal_cell_id() const {
  return cell_id_;
}
inline uint64_t GetConflictsRequest::cell_id() const {
  // @@protoc_insertion_point(field_get:onos.bwp.GetConflictsRequest.cell_id)
  return _internal_cell_id();
}
inline void GetConflictsRequest::_internal_set_cell_id(uint64_t value) {
  
  cell_id_ = value;
}
inline void GetConflictsRequest::set_cell_id(uint64_t value) {
  _internal_set_cell_id(value);
  // @@protoc_insertion_point(field_set:onos.bwp.GetConflictsRequest.cell_id)
}

// -------------------------------------------------------------------

// GetConflictsResponse

// repeated .onos.bwp.BwpCell cells = 1;
inline int GetConflictsResponse::_internal_cells_size() const {
  return cells_.size();
}
inline int GetConflictsResponse::cells_size() const {
  return _internal_cells_size();
}
inline void GetConflictsResponse::clear_cells() {
  cells_.Clear();
}
inline ::onos::bwp::BwpCell* GetConflictsResponse::mutable_cells(int index) {
  // @@protoc_insertion_point(field_mutable:onos.bwp.GetConflictsResponse.cells)
  return cells_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::bwp::BwpCell >*
GetConflictsResponse::mutable_cells() {
  // @@protoc_insertion_point(field_mutable_list:onos.bwp.GetConflictsResponse.cells)
  return &cells_;
}
inline const ::onos::bwp::BwpCell& GetConflictsResponse::_internal_cells(int index) const {
  return cells_.Get(index);
}
inline const ::onos::bwp::BwpCell& GetConflictsResponse::cells(int index) const {
  // @@protoc_insertion_point(field_get:onos.bwp.GetConflictsResponse.cells)
  return _internal_cells(index);
}
inline ::onos::bwp::BwpCell* GetConflictsResponse::_internal_add_cells() {
  return cells_.Add();
}
inline ::onos::bwp::BwpCell* GetConflictsResponse::add_cells() {
  ::onos::bwp::BwpCell* _add = _internal_add_cells();
  // @@protoc_insertion_point(field_add:onos.bwp.GetConflictsResponse.cells)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::bwp::BwpCell >&
GetConflictsResponse::cells() const {
  // @@protoc_insertion_point(field_list:onos.bwp.GetConflictsResponse.cells)
  return cells_;
}

// -------------------------------------------------------------------

// GetResolvedConflictsRequest

// -------------------------------------------------------------------

// GetResolvedConflictsResponse

// repeated .onos.bwp.CellResolution cells = 1;
inline int GetResolvedConflictsResponse::_internal_cells_size() const {
  return cells_.size();
}
inline int GetResolvedConflictsResponse::cells_size() const {
  return _internal_cells_size();
}
inline void GetResolvedConflictsResponse::clear_cells() {
  cells_.Clear();
}
inline ::onos::bwp::CellResolution* GetResolvedConflictsResponse::mutable_cells(int index) {
  // @@protoc_insertion_point(field_mutable:onos.bwp.GetResolvedConflictsResponse.cells)
  return cells_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::bwp::CellResolution >*
GetResolvedConflictsResponse::mutable_cells() {
  // @@protoc_insertion_point(field_mutable_list:onos.bwp.GetResolvedConflictsResponse.cells)
  return &cells_;
}
inline const ::onos::bwp::CellResolution& GetResolvedConflictsResponse::_internal_cells(int index) const {
  return cells_.Get(index);
}
inline const ::onos::bwp::CellResolution& GetResolvedConflictsResponse::cells(int index) const {
  // @@protoc_insertion_point(field_get:onos.bwp.GetResolvedConflictsResponse.cells)
  return _internal_cells(index);
}
inline ::onos::bwp::CellResolution* GetResolvedConflictsResponse::_internal_add_cells() {
  return cells_.Add();
}
inline ::onos::bwp::CellResolution* GetResolvedConflictsResponse::add_cells() {
  ::onos::bwp::CellResolution* _add = _internal_add_cells();
  // @@protoc_insertion_point(field_add:onos.bwp.GetResolvedConflictsResponse.cells)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::bwp::CellResolution >&
GetResolvedConflictsResponse::cells() const {
  // @@protoc_insertion_point(field_list:onos.bwp.GetResolvedConflictsResponse.cells)
  return cells_;
}

// -------------------------------------------------------------------

// CellResolution

// uint64 id = 1;
inline void CellResolution::clear_id() {
  id_ = uint64_t{0u};
}
inline uint64_t CellResolution::_internal_id() const {
  return id_;
}
inline uint64_t CellResolution::id() const {
  // @@protoc_insertion_point(field_get:onos.bwp.CellResolution.id)
  return _internal_id();
}
inline void CellResolution::_internal_set_id(uint64_t value) {
  
  id_ = value;
}
inline void CellResolution::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:onos.bwp.CellResolution.id)
}

// repeated int32 resolved_bwp = 2;
inline int CellResolution::_internal_resolved_bwp_size() const {
  return resolved_bwp_.size();
}
inline int CellResolution::resolved_bwp_size() const {
  return _internal_resolved_bwp_size();
}
inline void CellResolution::clear_resolved_bwp() {
  resolved_bwp_.Clear();
}
inline int32_t CellResolution::_internal_resolved_bwp(int index) const {
  return resolved_bwp_.Get(index);
}
inline int32_t CellResolution::resolved_bwp(int index) const {
  // @@protoc_insertion_point(field_get:onos.bwp.CellResolution.resolved_bwp)
  return _internal_resolved_bwp(index);
}
inline void CellResolution::set_resolved_bwp(int index, int32_t value) {
  resolved_bwp_.Set(index, value);
  // @@protoc_insertion_point(field_set:onos.bwp.CellResolution.resolved_bwp)
}
inline void CellResolution::_internal_add_resolved_bwp(int32_t value) {
  resolved_bwp_.Add(value);
}
inline void CellResolution::add_resolved_bwp(int32_t value) {
  _internal_add_resolved_bwp(value);
  // @@protoc_insertion_point(field_add:onos.bwp.CellResolution.resolved_bwp)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CellResolution::_internal_resolved_bwp() const {
  return resolved_bwp_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CellResolution::resolved_bwp() const {
  // @@protoc_insertion_point(field_list:onos.bwp.CellResolution.resolved_bwp)
  return _internal_resolved_bwp();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CellResolution::_internal_mutable_resolved_bwp() {
  return &resolved_bwp_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CellResolution::mutable_resolved_bwp() {
  // @@protoc_insertion_point(field_mutable_list:onos.bwp.CellResolution.resolved_bwp)
  return _internal_mutable_resolved_bwp();
}

// repeated int32 original_bwp = 3;
inline int CellResolution::_internal_original_bwp_size() const {
  return original_bwp_.size();
}
inline int CellResolution::original_bwp_size() const {
  return _internal_original_bwp_size();
}
inline void CellResolution::clear_original_bwp() {
  original_bwp_.Clear();
}
inline int32_t CellResolution::_internal_original_bwp(int index) const {
  return original_bwp_.Get(index);
}
inline int32_t CellResolution::original_bwp(int index) const {
  // @@protoc_insertion_point(field_get:onos.bwp.CellResolution.original_bwp)
  return _internal_original_bwp(index);
}
inline void CellResolution::set_original_bwp(int index, int32_t value) {
  original_bwp_.Set(index, value);
  // @@protoc_insertion_point(field_set:onos.bwp.CellResolution.original_bwp)
}
inline void CellResolution::_internal_add_original_bwp(int32_t value) {
  original_bwp_.Add(value);
}
inline void CellResolution::add_original_bwp(int32_t value) {
  _internal_add_original_bwp(value);
  // @@protoc_insertion_point(field_add:onos.bwp.CellResolution.original_bwp)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CellResolution::_internal_original_bwp() const {
  return original_bwp_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CellResolution::original_bwp() const {
  // @@protoc_insertion_point(field_list:onos.bwp.CellResolution.original_bwp)
  return _internal_original_bwp();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CellResolution::_internal_mutable_original_bwp() {
  return &original_bwp_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CellResolution::mutable_original_bwp() {
  // @@protoc_insertion_point(field_mutable_list:onos.bwp.CellResolution.original_bwp)
  return _internal_mutable_original_bwp();
}

// uint32 resolved_conflicts = 4;
inline void CellResolution::clear_resolved_conflicts() {
  resolved_conflicts_ = 0u;
}
inline uint32_t CellResolution::_internal_resolved_conflicts() const {
  return resolved_conflicts_;
}
inline uint32_t CellResolution::resolved_conflicts() const {
  // @@protoc_insertion_point(field_get:onos.bwp.CellResolution.resolved_conflicts)
  return _internal_resolved_conflicts();
}
inline void CellResolution::_internal_set_resolved_conflicts(uint32_t value) {
  
  resolved_conflicts_ = value;
}
inline void CellResolution::set_resolved_conflicts(uint32_t value) {
  _internal_set_resolved_conflicts(value);
  // @@protoc_insertion_point(field_set:onos.bwp.CellResolution.resolved_conflicts)
}

// -------------------------------------------------------------------

// GetCellRequest

// uint64 cell_id = 1;
inline void GetCellRequest::clear_cell_id() {
  cell_id_ = uint64_t{0u};
}
inline uint64_t GetCellRequest::_internal_cell_id() const {
  return cell_id_;
}
inline uint64_t GetCellRequest::cell_id() const {
  // @@protoc_insertion_point(field_get:onos.bwp.GetCellRequest.cell_id)
  return _internal_cell_id();
}
inline void GetCellRequest::_internal_set_cell_id(uint64_t value) {
  
  cell_id_ = value;
}
inline void GetCellRequest::set_cell_id(uint64_t value) {
  _internal_set_cell_id(value);
  // @@protoc_insertion_point(field_set:onos.bwp.GetCellRequest.cell_id)
}

// -------------------------------------------------------------------

// GetCellResponse

// .onos.bwp.BwpCell cell = 1;
inline bool GetCellResponse::_internal_has_cell() const {
  return this != internal_default_instance() && cell_ != nullptr;
}
inline bool GetCellResponse::has_cell() const {
  return _internal_has_cell();
}
inline void GetCellResponse::clear_cell() {
  if (GetArenaForAllocation() == nullptr && cell_ != nullptr) {
    delete cell_;
  }
  cell_ = nullptr;
}
inline const ::onos::bwp::BwpCell& GetCellResponse::_internal_cell() const {
  const ::onos::bwp::BwpCell* p = cell_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::bwp::BwpCell&>(
      ::onos::bwp::_BwpCell_default_instance_);
}
inline const ::onos::bwp::BwpCell& GetCellResponse::cell() const {
  // @@protoc_insertion_point(field_get:onos.bwp.GetCellResponse.cell)
  return _internal_cell();
}
inline void GetCellResponse::unsafe_arena_set_allocated_cell(
    ::onos::bwp::BwpCell* cell) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_);
  }
  cell_ = cell;
  if (cell) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.bwp.GetCellResponse.cell)
}
inline ::onos::bwp::BwpCell* GetCellResponse::release_cell() {
  
  ::onos::bwp::BwpCell* temp = cell_;
  cell_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::bwp::BwpCell* GetCellResponse::unsafe_arena_release_cell() {
  // @@protoc_insertion_point(field_release:onos.bwp.GetCellResponse.cell)
  
  ::onos::bwp::BwpCell* temp = cell_;
  cell_ = nullptr;
  return temp;
}
inline ::onos::bwp::BwpCell* GetCellResponse::_internal_mutable_cell() {
  
  if (cell_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::bwp::BwpCell>(GetArenaForAllocation());
    cell_ = p;
  }
  return cell_;
}
inline ::onos::bwp::BwpCell* GetCellResponse::mutable_cell() {
  ::onos::bwp::BwpCell* _msg = _internal_mutable_cell();
  // @@protoc_insertion_point(field_mutable:onos.bwp.GetCellResponse.cell)
  return _msg;
}
inline void GetCellResponse::set_allocated_cell(::onos::bwp::BwpCell* cell) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete cell_;
  }
  if (cell) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::bwp::BwpCell>::GetOwningArena(cell);
    if (message_arena != submessage_arena) {
      cell = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell, submessage_arena);
    }
    
  } else {
    
  }
  cell_ = cell;
  // @@protoc_insertion_point(field_set_allocated:onos.bwp.GetCellResponse.cell)
}

// -------------------------------------------------------------------

// GetCellsRequest

// -------------------------------------------------------------------

// GetCellsResponse

// repeated .onos.bwp.BwpCell cells = 1;
inline int GetCellsResponse::_internal_cells_size() const {
  return cells_.size();
}
inline int GetCellsResponse::cells_size() const {
  return _internal_cells_size();
}
inline void GetCellsResponse::clear_cells() {
  cells_.Clear();
}
inline ::onos::bwp::BwpCell* GetCellsResponse::mutable_cells(int index) {
  // @@protoc_insertion_point(field_mutable:onos.bwp.GetCellsResponse.cells)
  return cells_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::bwp::BwpCell >*
GetCellsResponse::mutable_cells() {
  // @@protoc_insertion_point(field_mutable_list:onos.bwp.GetCellsResponse.cells)
  return &cells_;
}
inline const ::onos::bwp::BwpCell& GetCellsResponse::_internal_cells(int index) const {
  return cells_.Get(index);
}
inline const ::onos::bwp::BwpCell& GetCellsResponse::cells(int index) const {
  // @@protoc_insertion_point(field_get:onos.bwp.GetCellsResponse.cells)
  return _internal_cells(index);
}
inline ::onos::bwp::BwpCell* GetCellsResponse::_internal_add_cells() {
  return cells_.Add();
}
inline ::onos::bwp::BwpCell* GetCellsResponse::add_cells() {
  ::onos::bwp::BwpCell* _add = _internal_add_cells();
  // @@protoc_insertion_point(field_add:onos.bwp.GetCellsResponse.cells)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::bwp::BwpCell >&
GetCellsResponse::cells() const {
  // @@protoc_insertion_point(field_list:onos.bwp.GetCellsResponse.cells)
  return cells_;
}

// -------------------------------------------------------------------

// BwpCell

// uint64 id = 1;
inline void BwpCell::clear_id() {
  id_ = uint64_t{0u};
}
inline uint64_t BwpCell::_internal_id() const {
  return id_;
}
inline uint64_t BwpCell::id() const {
  // @@protoc_insertion_point(field_get:onos.bwp.BwpCell.id)
  return _internal_id();
}
inline void BwpCell::_internal_set_id(uint64_t value) {
  
  id_ = value;
}
inline void BwpCell::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:onos.bwp.BwpCell.id)
}

// string node_id = 2;
inline void BwpCell::clear_node_id() {
  node_id_.ClearToEmpty();
}
inline const std::string& BwpCell::node_id() const {
  // @@protoc_insertion_point(field_get:onos.bwp.BwpCell.node_id)
  return _internal_node_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BwpCell::set_node_id(ArgT0&& arg0, ArgT... args) {
 
 node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.bwp.BwpCell.node_id)
}
inline std::string* BwpCell::mutable_node_id() {
  std::string* _s = _internal_mutable_node_id();
  // @@protoc_insertion_point(field_mutable:onos.bwp.BwpCell.node_id)
  return _s;
}
inline const std::string& BwpCell::_internal_node_id() const {
  return node_id_.Get();
}
inline void BwpCell::_internal_set_node_id(const std::string& value) {
  
  node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BwpCell::_internal_mutable_node_id() {
  
  return node_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BwpCell::release_node_id() {
  // @@protoc_insertion_point(field_release:onos.bwp.BwpCell.node_id)
  return node_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BwpCell::set_allocated_node_id(std::string* node_id) {
  if (node_id != nullptr) {
    
  } else {
    
  }
  node_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (node_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.bwp.BwpCell.node_id)
}

// uint32 arfcn = 3;
inline void BwpCell::clear_arfcn() {
  arfcn_ = 0u;
}
inline uint32_t BwpCell::_internal_arfcn() const {
  return arfcn_;
}
inline uint32_t BwpCell::arfcn() const {
  // @@protoc_insertion_point(field_get:onos.bwp.BwpCell.arfcn)
  return _internal_arfcn();
}
inline void BwpCell::_internal_set_arfcn(uint32_t value) {
  
  arfcn_ = value;
}
inline void BwpCell::set_arfcn(uint32_t value) {
  _internal_set_arfcn(value);
  // @@protoc_insertion_point(field_set:onos.bwp.BwpCell.arfcn)
}

// .onos.bwp.CellType cell_type = 4;
inline void BwpCell::clear_cell_type() {
  cell_type_ = 0;
}
inline ::onos::bwp::CellType BwpCell::_internal_cell_type() const {
  return static_cast< ::onos::bwp::CellType >(cell_type_);
}
inline ::onos::bwp::CellType BwpCell::cell_type() const {
  // @@protoc_insertion_point(field_get:onos.bwp.BwpCell.cell_type)
  return _internal_cell_type();
}
inline void BwpCell::_internal_set_cell_type(::onos::bwp::CellType value) {
  
  cell_type_ = value;
}
inline void BwpCell::set_cell_type(::onos::bwp::CellType value) {
  _internal_set_cell_type(value);
  // @@protoc_insertion_point(field_set:onos.bwp.BwpCell.cell_type)
}

// repeated int32 bwps = 5;
inline int BwpCell::_internal_bwps_size() const {
  return bwps_.size();
}
inline int BwpCell::bwps_size() const {
  return _internal_bwps_size();
}
inline void BwpCell::clear_bwps() {
  bwps_.Clear();
}
inline int32_t BwpCell::_internal_bwps(int index) const {
  return bwps_.Get(index);
}
inline int32_t BwpCell::bwps(int index) const {
  // @@protoc_insertion_point(field_get:onos.bwp.BwpCell.bwps)
  return _internal_bwps(index);
}
inline void BwpCell::set_bwps(int index, int32_t value) {
  bwps_.Set(index, value);
  // @@protoc_insertion_point(field_set:onos.bwp.BwpCell.bwps)
}
inline void BwpCell::_internal_add_bwps(int32_t value) {
  bwps_.Add(value);
}
inline void BwpCell::add_bwps(int32_t value) {
  _internal_add_bwps(value);
  // @@protoc_insertion_point(field_add:onos.bwp.BwpCell.bwps)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
BwpCell::_internal_bwps() const {
  return bwps_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
BwpCell::bwps() const {
  // @@protoc_insertion_point(field_list:onos.bwp.BwpCell.bwps)
  return _internal_bwps();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
BwpCell::_internal_mutable_bwps() {
  return &bwps_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
BwpCell::mutable_bwps() {
  // @@protoc_insertion_point(field_mutable_list:onos.bwp.BwpCell.bwps)
  return _internal_mutable_bwps();
}

// repeated .onos.bwp.PrbRange prb_pool = 6;
inline int BwpCell::_internal_prb_pool_size() const {
  return prb_pool_.size();
}
inline int BwpCell::prb_pool_size() const {
  return _internal_prb_pool_size();
}
inline void BwpCell::clear_prb_pool() {
  prb_pool_.Clear();
}
inline ::onos::bwp::PrbRange* BwpCell::mutable_prb_pool(int index) {
  // @@protoc_insertion_point(field_mutable:onos.bwp.BwpCell.prb_pool)
  return prb_pool_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::bwp::PrbRange >*
BwpCell::mutable_prb_pool() {
  // @@protoc_insertion_point(field_mutable_list:onos.bwp.BwpCell.prb_pool)
  return &prb_pool_;
}
inline const ::onos::bwp::PrbRange& BwpCell::_internal_prb_pool(int index) const {
  return prb_pool_.Get(index);
}
inline const ::onos::bwp::PrbRange& BwpCell::prb_pool(int index) const {
  // @@protoc_insertion_point(field_get:onos.bwp.BwpCell.prb_pool)
  return _internal_prb_pool(index);
}
inline ::onos::bwp::PrbRange* BwpCell::_internal_add_prb_pool() {
  return prb_pool_.Add();
}
inline ::onos::bwp::PrbRange* BwpCell::add_prb_pool() {
  ::onos::bwp::PrbRange* _add = _internal_add_prb_pool();
  // @@protoc_insertion_point(field_add:onos.bwp.BwpCell.prb_pool)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::bwp::PrbRange >&
BwpCell::prb_pool() const {
  // @@protoc_insertion_point(field_list:onos.bwp.BwpCell.prb_pool)
  return prb_pool_;
}

// repeated uint64 neighbor_ids = 7;
inline int BwpCell::_internal_neighbor_ids_size() const {
  return neighbor_ids_.size();
}
inline int BwpCell::neighbor_ids_size() const {
  return _internal_neighbor_ids_size();
}
inline void BwpCell::clear_neighbor_ids() {
  neighbor_ids_.Clear();
}
inline uint64_t BwpCell::_internal_neighbor_ids(int index) const {
  return neighbor_ids_.Get(index);
}
inline uint64_t BwpCell::neighbor_ids(int index) const {
  // @@protoc_insertion_point(field_get:onos.bwp.BwpCell.neighbor_ids)
  return _internal_neighbor_ids(index);
}
inline void BwpCell::set_neighbor_ids(int index, uint64_t value) {
  neighbor_ids_.Set(index, value);
  // @@protoc_insertion_point(field_set:onos.bwp.BwpCell.neighbor_ids)
}
inline void BwpCell::_internal_add_neighbor_ids(uint64_t value) {
  neighbor_ids_.Add(value);
}
inline void BwpCell::add_neighbor_ids(uint64_t value) {
  _internal_add_neighbor_ids(value);
  // @@protoc_insertion_point(field_add:onos.bwp.BwpCell.neighbor_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
BwpCell::_internal_neighbor_ids() const {
  return neighbor_ids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
BwpCell::neighbor_ids() const {
  // @@protoc_insertion_point(field_list:onos.bwp.BwpCell.neighbor_ids)
  return _internal_neighbor_ids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
BwpCell::_internal_mutable_neighbor_ids() {
  return &neighbor_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
BwpCell::mutable_neighbor_ids() {
  // @@protoc_insertion_point(field_mutable_list:onos.bwp.BwpCell.neighbor_ids)
  return _internal_mutable_neighbor_ids();
}

// -------------------------------------------------------------------

// PrbRange

// uint32 min = 1;
inline void PrbRange::clear_min() {
  min_ = 0u;
}
inline uint32_t PrbRange::_internal_min() const {
  return min_;
}
inline uint32_t PrbRange::min() const {
  // @@protoc_insertion_point(field_get:onos.bwp.PrbRange.min)
  return _internal_min();
}
inline void PrbRange::_internal_set_min(uint32_t value) {
  
  min_ = value;
}
inline void PrbRange::set_min(uint32_t value) {
  _internal_set_min(value);
  // @@protoc_insertion_point(field_set:onos.bwp.PrbRange.min)
}

// uint32 max = 2;
inline void PrbRange::clear_max() {
  max_ = 0u;
}
inline uint32_t PrbRange::_internal_max() const {
  return max_;
}
inline uint32_t PrbRange::max() const {
  // @@protoc_insertion_point(field_get:onos.bwp.PrbRange.max)
  return _internal_max();
}
inline void PrbRange::_internal_set_max(uint32_t value) {
  
  max_ = value;
}
inline void PrbRange::set_max(uint32_t value) {
  _internal_set_max(value);
  // @@protoc_insertion_point(field_set:onos.bwp.PrbRange.max)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bwp
}  // namespace onos

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::onos::bwp::CellType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::onos::bwp::CellType>() {
  return ::onos::bwp::CellType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_onos_2fbwp_2fbwp_2eproto
