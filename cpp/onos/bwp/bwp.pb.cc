// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onos/bwp/bwp.proto

#include "onos/bwp/bwp.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace onos {
namespace bwp {
constexpr GetConflictsRequest::GetConflictsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cell_id_(uint64_t{0u}){}
struct GetConflictsRequestDefaultTypeInternal {
  constexpr GetConflictsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetConflictsRequestDefaultTypeInternal() {}
  union {
    GetConflictsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetConflictsRequestDefaultTypeInternal _GetConflictsRequest_default_instance_;
constexpr GetConflictsResponse::GetConflictsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cells_(){}
struct GetConflictsResponseDefaultTypeInternal {
  constexpr GetConflictsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetConflictsResponseDefaultTypeInternal() {}
  union {
    GetConflictsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetConflictsResponseDefaultTypeInternal _GetConflictsResponse_default_instance_;
constexpr GetResolvedConflictsRequest::GetResolvedConflictsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetResolvedConflictsRequestDefaultTypeInternal {
  constexpr GetResolvedConflictsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetResolvedConflictsRequestDefaultTypeInternal() {}
  union {
    GetResolvedConflictsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetResolvedConflictsRequestDefaultTypeInternal _GetResolvedConflictsRequest_default_instance_;
constexpr GetResolvedConflictsResponse::GetResolvedConflictsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cells_(){}
struct GetResolvedConflictsResponseDefaultTypeInternal {
  constexpr GetResolvedConflictsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetResolvedConflictsResponseDefaultTypeInternal() {}
  union {
    GetResolvedConflictsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetResolvedConflictsResponseDefaultTypeInternal _GetResolvedConflictsResponse_default_instance_;
constexpr CellResolution::CellResolution(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(uint64_t{0u})
  , resolved_bwp_(0u)
  , original_bwp_(0u)
  , resolved_conflicts_(0u){}
struct CellResolutionDefaultTypeInternal {
  constexpr CellResolutionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CellResolutionDefaultTypeInternal() {}
  union {
    CellResolution _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CellResolutionDefaultTypeInternal _CellResolution_default_instance_;
constexpr GetCellRequest::GetCellRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cell_id_(uint64_t{0u}){}
struct GetCellRequestDefaultTypeInternal {
  constexpr GetCellRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetCellRequestDefaultTypeInternal() {}
  union {
    GetCellRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetCellRequestDefaultTypeInternal _GetCellRequest_default_instance_;
constexpr GetCellResponse::GetCellResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cell_(nullptr){}
struct GetCellResponseDefaultTypeInternal {
  constexpr GetCellResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetCellResponseDefaultTypeInternal() {}
  union {
    GetCellResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetCellResponseDefaultTypeInternal _GetCellResponse_default_instance_;
constexpr GetCellsRequest::GetCellsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct GetCellsRequestDefaultTypeInternal {
  constexpr GetCellsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetCellsRequestDefaultTypeInternal() {}
  union {
    GetCellsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetCellsRequestDefaultTypeInternal _GetCellsRequest_default_instance_;
constexpr GetCellsResponse::GetCellsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cells_(){}
struct GetCellsResponseDefaultTypeInternal {
  constexpr GetCellsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetCellsResponseDefaultTypeInternal() {}
  union {
    GetCellsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetCellsResponseDefaultTypeInternal _GetCellsResponse_default_instance_;
constexpr BwpCell::BwpCell(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bwps_()
  , _bwps_cached_byte_size_(0)
  , prb_pool_()
  , neighbor_ids_()
  , _neighbor_ids_cached_byte_size_(0)
  , node_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(uint64_t{0u})
  , arfcn_(0u)
  , cell_type_(0)
{}
struct BwpCellDefaultTypeInternal {
  constexpr BwpCellDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BwpCellDefaultTypeInternal() {}
  union {
    BwpCell _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BwpCellDefaultTypeInternal _BwpCell_default_instance_;
constexpr PrbRange::PrbRange(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : min_(0u)
  , max_(0u){}
struct PrbRangeDefaultTypeInternal {
  constexpr PrbRangeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PrbRangeDefaultTypeInternal() {}
  union {
    PrbRange _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PrbRangeDefaultTypeInternal _PrbRange_default_instance_;
}  // namespace bwp
}  // namespace onos
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_onos_2fbwp_2fbwp_2eproto[11];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_onos_2fbwp_2fbwp_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_onos_2fbwp_2fbwp_2eproto = nullptr;

const uint32_t TableStruct_onos_2fbwp_2fbwp_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::bwp::GetConflictsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::bwp::GetConflictsRequest, cell_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::bwp::GetConflictsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::bwp::GetConflictsResponse, cells_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::bwp::GetResolvedConflictsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::bwp::GetResolvedConflictsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::bwp::GetResolvedConflictsResponse, cells_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::bwp::CellResolution, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::bwp::CellResolution, id_),
  PROTOBUF_FIELD_OFFSET(::onos::bwp::CellResolution, resolved_bwp_),
  PROTOBUF_FIELD_OFFSET(::onos::bwp::CellResolution, original_bwp_),
  PROTOBUF_FIELD_OFFSET(::onos::bwp::CellResolution, resolved_conflicts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::bwp::GetCellRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::bwp::GetCellRequest, cell_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::bwp::GetCellResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::bwp::GetCellResponse, cell_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::bwp::GetCellsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::bwp::GetCellsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::bwp::GetCellsResponse, cells_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::bwp::BwpCell, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::bwp::BwpCell, id_),
  PROTOBUF_FIELD_OFFSET(::onos::bwp::BwpCell, node_id_),
  PROTOBUF_FIELD_OFFSET(::onos::bwp::BwpCell, arfcn_),
  PROTOBUF_FIELD_OFFSET(::onos::bwp::BwpCell, cell_type_),
  PROTOBUF_FIELD_OFFSET(::onos::bwp::BwpCell, bwps_),
  PROTOBUF_FIELD_OFFSET(::onos::bwp::BwpCell, prb_pool_),
  PROTOBUF_FIELD_OFFSET(::onos::bwp::BwpCell, neighbor_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::bwp::PrbRange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::bwp::PrbRange, min_),
  PROTOBUF_FIELD_OFFSET(::onos::bwp::PrbRange, max_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::onos::bwp::GetConflictsRequest)},
  { 7, -1, -1, sizeof(::onos::bwp::GetConflictsResponse)},
  { 14, -1, -1, sizeof(::onos::bwp::GetResolvedConflictsRequest)},
  { 20, -1, -1, sizeof(::onos::bwp::GetResolvedConflictsResponse)},
  { 27, -1, -1, sizeof(::onos::bwp::CellResolution)},
  { 37, -1, -1, sizeof(::onos::bwp::GetCellRequest)},
  { 44, -1, -1, sizeof(::onos::bwp::GetCellResponse)},
  { 51, -1, -1, sizeof(::onos::bwp::GetCellsRequest)},
  { 57, -1, -1, sizeof(::onos::bwp::GetCellsResponse)},
  { 64, -1, -1, sizeof(::onos::bwp::BwpCell)},
  { 77, -1, -1, sizeof(::onos::bwp::PrbRange)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::bwp::_GetConflictsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::bwp::_GetConflictsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::bwp::_GetResolvedConflictsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::bwp::_GetResolvedConflictsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::bwp::_CellResolution_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::bwp::_GetCellRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::bwp::_GetCellResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::bwp::_GetCellsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::bwp::_GetCellsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::bwp::_BwpCell_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::bwp::_PrbRange_default_instance_),
};

const char descriptor_table_protodef_onos_2fbwp_2fbwp_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022onos/bwp/bwp.proto\022\010onos.bwp\"&\n\023GetCon"
  "flictsRequest\022\017\n\007cell_id\030\001 \001(\004\"8\n\024GetCon"
  "flictsResponse\022 \n\005cells\030\001 \003(\0132\021.onos.bwp"
  ".BwpCell\"\035\n\033GetResolvedConflictsRequest\""
  "G\n\034GetResolvedConflictsResponse\022\'\n\005cells"
  "\030\001 \003(\0132\030.onos.bwp.CellResolution\"d\n\016Cell"
  "Resolution\022\n\n\002id\030\001 \001(\004\022\024\n\014resolved_bwp\030\002"
  " \001(\r\022\024\n\014original_bwp\030\003 \001(\r\022\032\n\022resolved_c"
  "onflicts\030\004 \001(\r\"!\n\016GetCellRequest\022\017\n\007cell"
  "_id\030\001 \001(\004\"2\n\017GetCellResponse\022\037\n\004cell\030\001 \001"
  "(\0132\021.onos.bwp.BwpCell\"\021\n\017GetCellsRequest"
  "\"4\n\020GetCellsResponse\022 \n\005cells\030\001 \003(\0132\021.on"
  "os.bwp.BwpCell\"\246\001\n\007BwpCell\022\n\n\002id\030\001 \001(\004\022\017"
  "\n\007node_id\030\002 \001(\t\022\r\n\005arfcn\030\003 \001(\r\022%\n\tcell_t"
  "ype\030\004 \001(\0162\022.onos.bwp.CellType\022\014\n\004bwps\030\005 "
  "\003(\005\022$\n\010prb_pool\030\006 \003(\0132\022.onos.bwp.PrbRang"
  "e\022\024\n\014neighbor_ids\030\007 \003(\004\"$\n\010PrbRange\022\013\n\003m"
  "in\030\001 \001(\r\022\013\n\003max\030\002 \001(\r*C\n\010CellType\022\t\n\005FEM"
  "TO\020\000\022\016\n\nENTERPRISE\020\001\022\021\n\rOUTDOOR_SMALL\020\002\022"
  "\t\n\005MACRO\020\0032\306\002\n\003Bwp\022O\n\014GetConflicts\022\035.ono"
  "s.bwp.GetConflictsRequest\032\036.onos.bwp.Get"
  "ConflictsResponse\"\000\022g\n\024GetResolvedConfli"
  "cts\022%.onos.bwp.GetResolvedConflictsReque"
  "st\032&.onos.bwp.GetResolvedConflictsRespon"
  "se\"\000\022@\n\007GetCell\022\030.onos.bwp.GetCellReques"
  "t\032\031.onos.bwp.GetCellResponse\"\000\022C\n\010GetCel"
  "ls\022\031.onos.bwp.GetCellsRequest\032\032.onos.bwp"
  ".GetCellsResponse\"\000b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_onos_2fbwp_2fbwp_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_onos_2fbwp_2fbwp_2eproto = {
  false, false, 1107, descriptor_table_protodef_onos_2fbwp_2fbwp_2eproto, "onos/bwp/bwp.proto", 
  &descriptor_table_onos_2fbwp_2fbwp_2eproto_once, nullptr, 0, 11,
  schemas, file_default_instances, TableStruct_onos_2fbwp_2fbwp_2eproto::offsets,
  file_level_metadata_onos_2fbwp_2fbwp_2eproto, file_level_enum_descriptors_onos_2fbwp_2fbwp_2eproto, file_level_service_descriptors_onos_2fbwp_2fbwp_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_onos_2fbwp_2fbwp_2eproto_getter() {
  return &descriptor_table_onos_2fbwp_2fbwp_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_onos_2fbwp_2fbwp_2eproto(&descriptor_table_onos_2fbwp_2fbwp_2eproto);
namespace onos {
namespace bwp {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CellType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_onos_2fbwp_2fbwp_2eproto);
  return file_level_enum_descriptors_onos_2fbwp_2fbwp_2eproto[0];
}
bool CellType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class GetConflictsRequest::_Internal {
 public:
};

GetConflictsRequest::GetConflictsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.bwp.GetConflictsRequest)
}
GetConflictsRequest::GetConflictsRequest(const GetConflictsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cell_id_ = from.cell_id_;
  // @@protoc_insertion_point(copy_constructor:onos.bwp.GetConflictsRequest)
}

inline void GetConflictsRequest::SharedCtor() {
cell_id_ = uint64_t{0u};
}

GetConflictsRequest::~GetConflictsRequest() {
  // @@protoc_insertion_point(destructor:onos.bwp.GetConflictsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetConflictsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetConflictsRequest::ArenaDtor(void* object) {
  GetConflictsRequest* _this = reinterpret_cast< GetConflictsRequest* >(object);
  (void)_this;
}
void GetConflictsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetConflictsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetConflictsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.bwp.GetConflictsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cell_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetConflictsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 cell_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          cell_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetConflictsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.bwp.GetConflictsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 cell_id = 1;
  if (this->_internal_cell_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_cell_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.bwp.GetConflictsRequest)
  return target;
}

size_t GetConflictsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.bwp.GetConflictsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 cell_id = 1;
  if (this->_internal_cell_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_cell_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetConflictsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetConflictsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetConflictsRequest::GetClassData() const { return &_class_data_; }

void GetConflictsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetConflictsRequest *>(to)->MergeFrom(
      static_cast<const GetConflictsRequest &>(from));
}


void GetConflictsRequest::MergeFrom(const GetConflictsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.bwp.GetConflictsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_cell_id() != 0) {
    _internal_set_cell_id(from._internal_cell_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetConflictsRequest::CopyFrom(const GetConflictsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.bwp.GetConflictsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConflictsRequest::IsInitialized() const {
  return true;
}

void GetConflictsRequest::InternalSwap(GetConflictsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(cell_id_, other->cell_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetConflictsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fbwp_2fbwp_2eproto_getter, &descriptor_table_onos_2fbwp_2fbwp_2eproto_once,
      file_level_metadata_onos_2fbwp_2fbwp_2eproto[0]);
}

// ===================================================================

class GetConflictsResponse::_Internal {
 public:
};

GetConflictsResponse::GetConflictsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  cells_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.bwp.GetConflictsResponse)
}
GetConflictsResponse::GetConflictsResponse(const GetConflictsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cells_(from.cells_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:onos.bwp.GetConflictsResponse)
}

inline void GetConflictsResponse::SharedCtor() {
}

GetConflictsResponse::~GetConflictsResponse() {
  // @@protoc_insertion_point(destructor:onos.bwp.GetConflictsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetConflictsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetConflictsResponse::ArenaDtor(void* object) {
  GetConflictsResponse* _this = reinterpret_cast< GetConflictsResponse* >(object);
  (void)_this;
}
void GetConflictsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetConflictsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetConflictsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.bwp.GetConflictsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cells_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetConflictsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .onos.bwp.BwpCell cells = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cells(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetConflictsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.bwp.GetConflictsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .onos.bwp.BwpCell cells = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cells_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_cells(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.bwp.GetConflictsResponse)
  return target;
}

size_t GetConflictsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.bwp.GetConflictsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .onos.bwp.BwpCell cells = 1;
  total_size += 1UL * this->_internal_cells_size();
  for (const auto& msg : this->cells_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetConflictsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetConflictsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetConflictsResponse::GetClassData() const { return &_class_data_; }

void GetConflictsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetConflictsResponse *>(to)->MergeFrom(
      static_cast<const GetConflictsResponse &>(from));
}


void GetConflictsResponse::MergeFrom(const GetConflictsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.bwp.GetConflictsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cells_.MergeFrom(from.cells_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetConflictsResponse::CopyFrom(const GetConflictsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.bwp.GetConflictsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetConflictsResponse::IsInitialized() const {
  return true;
}

void GetConflictsResponse::InternalSwap(GetConflictsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  cells_.InternalSwap(&other->cells_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetConflictsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fbwp_2fbwp_2eproto_getter, &descriptor_table_onos_2fbwp_2fbwp_2eproto_once,
      file_level_metadata_onos_2fbwp_2fbwp_2eproto[1]);
}

// ===================================================================

class GetResolvedConflictsRequest::_Internal {
 public:
};

GetResolvedConflictsRequest::GetResolvedConflictsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:onos.bwp.GetResolvedConflictsRequest)
}
GetResolvedConflictsRequest::GetResolvedConflictsRequest(const GetResolvedConflictsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:onos.bwp.GetResolvedConflictsRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetResolvedConflictsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetResolvedConflictsRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetResolvedConflictsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fbwp_2fbwp_2eproto_getter, &descriptor_table_onos_2fbwp_2fbwp_2eproto_once,
      file_level_metadata_onos_2fbwp_2fbwp_2eproto[2]);
}

// ===================================================================

class GetResolvedConflictsResponse::_Internal {
 public:
};

GetResolvedConflictsResponse::GetResolvedConflictsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  cells_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.bwp.GetResolvedConflictsResponse)
}
GetResolvedConflictsResponse::GetResolvedConflictsResponse(const GetResolvedConflictsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cells_(from.cells_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:onos.bwp.GetResolvedConflictsResponse)
}

inline void GetResolvedConflictsResponse::SharedCtor() {
}

GetResolvedConflictsResponse::~GetResolvedConflictsResponse() {
  // @@protoc_insertion_point(destructor:onos.bwp.GetResolvedConflictsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetResolvedConflictsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetResolvedConflictsResponse::ArenaDtor(void* object) {
  GetResolvedConflictsResponse* _this = reinterpret_cast< GetResolvedConflictsResponse* >(object);
  (void)_this;
}
void GetResolvedConflictsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetResolvedConflictsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetResolvedConflictsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.bwp.GetResolvedConflictsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cells_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetResolvedConflictsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .onos.bwp.CellResolution cells = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cells(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetResolvedConflictsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.bwp.GetResolvedConflictsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .onos.bwp.CellResolution cells = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cells_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_cells(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.bwp.GetResolvedConflictsResponse)
  return target;
}

size_t GetResolvedConflictsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.bwp.GetResolvedConflictsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .onos.bwp.CellResolution cells = 1;
  total_size += 1UL * this->_internal_cells_size();
  for (const auto& msg : this->cells_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetResolvedConflictsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetResolvedConflictsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetResolvedConflictsResponse::GetClassData() const { return &_class_data_; }

void GetResolvedConflictsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetResolvedConflictsResponse *>(to)->MergeFrom(
      static_cast<const GetResolvedConflictsResponse &>(from));
}


void GetResolvedConflictsResponse::MergeFrom(const GetResolvedConflictsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.bwp.GetResolvedConflictsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cells_.MergeFrom(from.cells_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetResolvedConflictsResponse::CopyFrom(const GetResolvedConflictsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.bwp.GetResolvedConflictsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetResolvedConflictsResponse::IsInitialized() const {
  return true;
}

void GetResolvedConflictsResponse::InternalSwap(GetResolvedConflictsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  cells_.InternalSwap(&other->cells_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetResolvedConflictsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fbwp_2fbwp_2eproto_getter, &descriptor_table_onos_2fbwp_2fbwp_2eproto_once,
      file_level_metadata_onos_2fbwp_2fbwp_2eproto[3]);
}

// ===================================================================

class CellResolution::_Internal {
 public:
};

CellResolution::CellResolution(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.bwp.CellResolution)
}
CellResolution::CellResolution(const CellResolution& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&resolved_conflicts_) -
    reinterpret_cast<char*>(&id_)) + sizeof(resolved_conflicts_));
  // @@protoc_insertion_point(copy_constructor:onos.bwp.CellResolution)
}

inline void CellResolution::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&resolved_conflicts_) -
    reinterpret_cast<char*>(&id_)) + sizeof(resolved_conflicts_));
}

CellResolution::~CellResolution() {
  // @@protoc_insertion_point(destructor:onos.bwp.CellResolution)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CellResolution::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CellResolution::ArenaDtor(void* object) {
  CellResolution* _this = reinterpret_cast< CellResolution* >(object);
  (void)_this;
}
void CellResolution::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CellResolution::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CellResolution::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.bwp.CellResolution)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&resolved_conflicts_) -
      reinterpret_cast<char*>(&id_)) + sizeof(resolved_conflicts_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellResolution::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 resolved_bwp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          resolved_bwp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 original_bwp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          original_bwp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 resolved_conflicts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          resolved_conflicts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CellResolution::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.bwp.CellResolution)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // uint32 resolved_bwp = 2;
  if (this->_internal_resolved_bwp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_resolved_bwp(), target);
  }

  // uint32 original_bwp = 3;
  if (this->_internal_original_bwp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_original_bwp(), target);
  }

  // uint32 resolved_conflicts = 4;
  if (this->_internal_resolved_conflicts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_resolved_conflicts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.bwp.CellResolution)
  return target;
}

size_t CellResolution::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.bwp.CellResolution)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  // uint32 resolved_bwp = 2;
  if (this->_internal_resolved_bwp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_resolved_bwp());
  }

  // uint32 original_bwp = 3;
  if (this->_internal_original_bwp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_original_bwp());
  }

  // uint32 resolved_conflicts = 4;
  if (this->_internal_resolved_conflicts() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_resolved_conflicts());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellResolution::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CellResolution::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellResolution::GetClassData() const { return &_class_data_; }

void CellResolution::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CellResolution *>(to)->MergeFrom(
      static_cast<const CellResolution &>(from));
}


void CellResolution::MergeFrom(const CellResolution& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.bwp.CellResolution)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_resolved_bwp() != 0) {
    _internal_set_resolved_bwp(from._internal_resolved_bwp());
  }
  if (from._internal_original_bwp() != 0) {
    _internal_set_original_bwp(from._internal_original_bwp());
  }
  if (from._internal_resolved_conflicts() != 0) {
    _internal_set_resolved_conflicts(from._internal_resolved_conflicts());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellResolution::CopyFrom(const CellResolution& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.bwp.CellResolution)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellResolution::IsInitialized() const {
  return true;
}

void CellResolution::InternalSwap(CellResolution* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CellResolution, resolved_conflicts_)
      + sizeof(CellResolution::resolved_conflicts_)
      - PROTOBUF_FIELD_OFFSET(CellResolution, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CellResolution::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fbwp_2fbwp_2eproto_getter, &descriptor_table_onos_2fbwp_2fbwp_2eproto_once,
      file_level_metadata_onos_2fbwp_2fbwp_2eproto[4]);
}

// ===================================================================

class GetCellRequest::_Internal {
 public:
};

GetCellRequest::GetCellRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.bwp.GetCellRequest)
}
GetCellRequest::GetCellRequest(const GetCellRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cell_id_ = from.cell_id_;
  // @@protoc_insertion_point(copy_constructor:onos.bwp.GetCellRequest)
}

inline void GetCellRequest::SharedCtor() {
cell_id_ = uint64_t{0u};
}

GetCellRequest::~GetCellRequest() {
  // @@protoc_insertion_point(destructor:onos.bwp.GetCellRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetCellRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetCellRequest::ArenaDtor(void* object) {
  GetCellRequest* _this = reinterpret_cast< GetCellRequest* >(object);
  (void)_this;
}
void GetCellRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetCellRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetCellRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.bwp.GetCellRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cell_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCellRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 cell_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          cell_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetCellRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.bwp.GetCellRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 cell_id = 1;
  if (this->_internal_cell_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_cell_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.bwp.GetCellRequest)
  return target;
}

size_t GetCellRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.bwp.GetCellRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 cell_id = 1;
  if (this->_internal_cell_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_cell_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetCellRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetCellRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetCellRequest::GetClassData() const { return &_class_data_; }

void GetCellRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetCellRequest *>(to)->MergeFrom(
      static_cast<const GetCellRequest &>(from));
}


void GetCellRequest::MergeFrom(const GetCellRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.bwp.GetCellRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_cell_id() != 0) {
    _internal_set_cell_id(from._internal_cell_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetCellRequest::CopyFrom(const GetCellRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.bwp.GetCellRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCellRequest::IsInitialized() const {
  return true;
}

void GetCellRequest::InternalSwap(GetCellRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(cell_id_, other->cell_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCellRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fbwp_2fbwp_2eproto_getter, &descriptor_table_onos_2fbwp_2fbwp_2eproto_once,
      file_level_metadata_onos_2fbwp_2fbwp_2eproto[5]);
}

// ===================================================================

class GetCellResponse::_Internal {
 public:
  static const ::onos::bwp::BwpCell& cell(const GetCellResponse* msg);
};

const ::onos::bwp::BwpCell&
GetCellResponse::_Internal::cell(const GetCellResponse* msg) {
  return *msg->cell_;
}
GetCellResponse::GetCellResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.bwp.GetCellResponse)
}
GetCellResponse::GetCellResponse(const GetCellResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_cell()) {
    cell_ = new ::onos::bwp::BwpCell(*from.cell_);
  } else {
    cell_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:onos.bwp.GetCellResponse)
}

inline void GetCellResponse::SharedCtor() {
cell_ = nullptr;
}

GetCellResponse::~GetCellResponse() {
  // @@protoc_insertion_point(destructor:onos.bwp.GetCellResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetCellResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete cell_;
}

void GetCellResponse::ArenaDtor(void* object) {
  GetCellResponse* _this = reinterpret_cast< GetCellResponse* >(object);
  (void)_this;
}
void GetCellResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetCellResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetCellResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.bwp.GetCellResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && cell_ != nullptr) {
    delete cell_;
  }
  cell_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCellResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .onos.bwp.BwpCell cell = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetCellResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.bwp.GetCellResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .onos.bwp.BwpCell cell = 1;
  if (this->_internal_has_cell()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::cell(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.bwp.GetCellResponse)
  return target;
}

size_t GetCellResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.bwp.GetCellResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .onos.bwp.BwpCell cell = 1;
  if (this->_internal_has_cell()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cell_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetCellResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetCellResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetCellResponse::GetClassData() const { return &_class_data_; }

void GetCellResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetCellResponse *>(to)->MergeFrom(
      static_cast<const GetCellResponse &>(from));
}


void GetCellResponse::MergeFrom(const GetCellResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.bwp.GetCellResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_cell()) {
    _internal_mutable_cell()->::onos::bwp::BwpCell::MergeFrom(from._internal_cell());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetCellResponse::CopyFrom(const GetCellResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.bwp.GetCellResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCellResponse::IsInitialized() const {
  return true;
}

void GetCellResponse::InternalSwap(GetCellResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(cell_, other->cell_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCellResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fbwp_2fbwp_2eproto_getter, &descriptor_table_onos_2fbwp_2fbwp_2eproto_once,
      file_level_metadata_onos_2fbwp_2fbwp_2eproto[6]);
}

// ===================================================================

class GetCellsRequest::_Internal {
 public:
};

GetCellsRequest::GetCellsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:onos.bwp.GetCellsRequest)
}
GetCellsRequest::GetCellsRequest(const GetCellsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:onos.bwp.GetCellsRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetCellsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetCellsRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata GetCellsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fbwp_2fbwp_2eproto_getter, &descriptor_table_onos_2fbwp_2fbwp_2eproto_once,
      file_level_metadata_onos_2fbwp_2fbwp_2eproto[7]);
}

// ===================================================================

class GetCellsResponse::_Internal {
 public:
};

GetCellsResponse::GetCellsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  cells_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.bwp.GetCellsResponse)
}
GetCellsResponse::GetCellsResponse(const GetCellsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      cells_(from.cells_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:onos.bwp.GetCellsResponse)
}

inline void GetCellsResponse::SharedCtor() {
}

GetCellsResponse::~GetCellsResponse() {
  // @@protoc_insertion_point(destructor:onos.bwp.GetCellsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetCellsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void GetCellsResponse::ArenaDtor(void* object) {
  GetCellsResponse* _this = reinterpret_cast< GetCellsResponse* >(object);
  (void)_this;
}
void GetCellsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetCellsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetCellsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.bwp.GetCellsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cells_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCellsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .onos.bwp.BwpCell cells = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cells(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetCellsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.bwp.GetCellsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .onos.bwp.BwpCell cells = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cells_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_cells(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.bwp.GetCellsResponse)
  return target;
}

size_t GetCellsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.bwp.GetCellsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .onos.bwp.BwpCell cells = 1;
  total_size += 1UL * this->_internal_cells_size();
  for (const auto& msg : this->cells_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetCellsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetCellsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetCellsResponse::GetClassData() const { return &_class_data_; }

void GetCellsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetCellsResponse *>(to)->MergeFrom(
      static_cast<const GetCellsResponse &>(from));
}


void GetCellsResponse::MergeFrom(const GetCellsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.bwp.GetCellsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cells_.MergeFrom(from.cells_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetCellsResponse::CopyFrom(const GetCellsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.bwp.GetCellsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCellsResponse::IsInitialized() const {
  return true;
}

void GetCellsResponse::InternalSwap(GetCellsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  cells_.InternalSwap(&other->cells_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCellsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fbwp_2fbwp_2eproto_getter, &descriptor_table_onos_2fbwp_2fbwp_2eproto_once,
      file_level_metadata_onos_2fbwp_2fbwp_2eproto[8]);
}

// ===================================================================

class BwpCell::_Internal {
 public:
};

BwpCell::BwpCell(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  bwps_(arena),
  prb_pool_(arena),
  neighbor_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.bwp.BwpCell)
}
BwpCell::BwpCell(const BwpCell& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bwps_(from.bwps_),
      prb_pool_(from.prb_pool_),
      neighbor_ids_(from.neighbor_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node_id().empty()) {
    node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&cell_type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(cell_type_));
  // @@protoc_insertion_point(copy_constructor:onos.bwp.BwpCell)
}

inline void BwpCell::SharedCtor() {
node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&cell_type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(cell_type_));
}

BwpCell::~BwpCell() {
  // @@protoc_insertion_point(destructor:onos.bwp.BwpCell)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void BwpCell::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BwpCell::ArenaDtor(void* object) {
  BwpCell* _this = reinterpret_cast< BwpCell* >(object);
  (void)_this;
}
void BwpCell::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BwpCell::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void BwpCell::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.bwp.BwpCell)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bwps_.Clear();
  prb_pool_.Clear();
  neighbor_ids_.Clear();
  node_id_.ClearToEmpty();
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cell_type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(cell_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BwpCell::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_node_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.bwp.BwpCell.node_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 arfcn = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          arfcn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.bwp.CellType cell_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cell_type(static_cast<::onos::bwp::CellType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 bwps = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_bwps(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 40) {
          _internal_add_bwps(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .onos.bwp.PrbRange prb_pool = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_prb_pool(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint64 neighbor_ids = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(_internal_mutable_neighbor_ids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 56) {
          _internal_add_neighbor_ids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* BwpCell::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.bwp.BwpCell)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // string node_id = 2;
  if (!this->_internal_node_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_id().data(), static_cast<int>(this->_internal_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.bwp.BwpCell.node_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_node_id(), target);
  }

  // uint32 arfcn = 3;
  if (this->_internal_arfcn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_arfcn(), target);
  }

  // .onos.bwp.CellType cell_type = 4;
  if (this->_internal_cell_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_cell_type(), target);
  }

  // repeated int32 bwps = 5;
  {
    int byte_size = _bwps_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          5, _internal_bwps(), byte_size, target);
    }
  }

  // repeated .onos.bwp.PrbRange prb_pool = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_prb_pool_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_prb_pool(i), target, stream);
  }

  // repeated uint64 neighbor_ids = 7;
  {
    int byte_size = _neighbor_ids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          7, _internal_neighbor_ids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.bwp.BwpCell)
  return target;
}

size_t BwpCell::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.bwp.BwpCell)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 bwps = 5;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->bwps_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _bwps_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .onos.bwp.PrbRange prb_pool = 6;
  total_size += 1UL * this->_internal_prb_pool_size();
  for (const auto& msg : this->prb_pool_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint64 neighbor_ids = 7;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->neighbor_ids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _neighbor_ids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string node_id = 2;
  if (!this->_internal_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_id());
  }

  // uint64 id = 1;
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  // uint32 arfcn = 3;
  if (this->_internal_arfcn() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_arfcn());
  }

  // .onos.bwp.CellType cell_type = 4;
  if (this->_internal_cell_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cell_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData BwpCell::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    BwpCell::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*BwpCell::GetClassData() const { return &_class_data_; }

void BwpCell::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<BwpCell *>(to)->MergeFrom(
      static_cast<const BwpCell &>(from));
}


void BwpCell::MergeFrom(const BwpCell& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.bwp.BwpCell)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  bwps_.MergeFrom(from.bwps_);
  prb_pool_.MergeFrom(from.prb_pool_);
  neighbor_ids_.MergeFrom(from.neighbor_ids_);
  if (!from._internal_node_id().empty()) {
    _internal_set_node_id(from._internal_node_id());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_arfcn() != 0) {
    _internal_set_arfcn(from._internal_arfcn());
  }
  if (from._internal_cell_type() != 0) {
    _internal_set_cell_type(from._internal_cell_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void BwpCell::CopyFrom(const BwpCell& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.bwp.BwpCell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BwpCell::IsInitialized() const {
  return true;
}

void BwpCell::InternalSwap(BwpCell* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  bwps_.InternalSwap(&other->bwps_);
  prb_pool_.InternalSwap(&other->prb_pool_);
  neighbor_ids_.InternalSwap(&other->neighbor_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &node_id_, lhs_arena,
      &other->node_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BwpCell, cell_type_)
      + sizeof(BwpCell::cell_type_)
      - PROTOBUF_FIELD_OFFSET(BwpCell, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BwpCell::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fbwp_2fbwp_2eproto_getter, &descriptor_table_onos_2fbwp_2fbwp_2eproto_once,
      file_level_metadata_onos_2fbwp_2fbwp_2eproto[9]);
}

// ===================================================================

class PrbRange::_Internal {
 public:
};

PrbRange::PrbRange(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.bwp.PrbRange)
}
PrbRange::PrbRange(const PrbRange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&min_, &from.min_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&min_)) + sizeof(max_));
  // @@protoc_insertion_point(copy_constructor:onos.bwp.PrbRange)
}

inline void PrbRange::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&min_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_) -
    reinterpret_cast<char*>(&min_)) + sizeof(max_));
}

PrbRange::~PrbRange() {
  // @@protoc_insertion_point(destructor:onos.bwp.PrbRange)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PrbRange::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PrbRange::ArenaDtor(void* object) {
  PrbRange* _this = reinterpret_cast< PrbRange* >(object);
  (void)_this;
}
void PrbRange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PrbRange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PrbRange::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.bwp.PrbRange)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_) -
      reinterpret_cast<char*>(&min_)) + sizeof(max_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PrbRange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 min = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          min_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 max = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          max_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PrbRange::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.bwp.PrbRange)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 min = 1;
  if (this->_internal_min() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_min(), target);
  }

  // uint32 max = 2;
  if (this->_internal_max() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_max(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.bwp.PrbRange)
  return target;
}

size_t PrbRange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.bwp.PrbRange)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 min = 1;
  if (this->_internal_min() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_min());
  }

  // uint32 max = 2;
  if (this->_internal_max() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_max());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PrbRange::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PrbRange::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PrbRange::GetClassData() const { return &_class_data_; }

void PrbRange::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PrbRange *>(to)->MergeFrom(
      static_cast<const PrbRange &>(from));
}


void PrbRange::MergeFrom(const PrbRange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.bwp.PrbRange)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_min() != 0) {
    _internal_set_min(from._internal_min());
  }
  if (from._internal_max() != 0) {
    _internal_set_max(from._internal_max());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PrbRange::CopyFrom(const PrbRange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.bwp.PrbRange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrbRange::IsInitialized() const {
  return true;
}

void PrbRange::InternalSwap(PrbRange* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PrbRange, max_)
      + sizeof(PrbRange::max_)
      - PROTOBUF_FIELD_OFFSET(PrbRange, min_)>(
          reinterpret_cast<char*>(&min_),
          reinterpret_cast<char*>(&other->min_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PrbRange::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fbwp_2fbwp_2eproto_getter, &descriptor_table_onos_2fbwp_2fbwp_2eproto_once,
      file_level_metadata_onos_2fbwp_2fbwp_2eproto[10]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace bwp
}  // namespace onos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::onos::bwp::GetConflictsRequest* Arena::CreateMaybeMessage< ::onos::bwp::GetConflictsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::bwp::GetConflictsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::bwp::GetConflictsResponse* Arena::CreateMaybeMessage< ::onos::bwp::GetConflictsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::bwp::GetConflictsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::bwp::GetResolvedConflictsRequest* Arena::CreateMaybeMessage< ::onos::bwp::GetResolvedConflictsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::bwp::GetResolvedConflictsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::bwp::GetResolvedConflictsResponse* Arena::CreateMaybeMessage< ::onos::bwp::GetResolvedConflictsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::bwp::GetResolvedConflictsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::bwp::CellResolution* Arena::CreateMaybeMessage< ::onos::bwp::CellResolution >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::bwp::CellResolution >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::bwp::GetCellRequest* Arena::CreateMaybeMessage< ::onos::bwp::GetCellRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::bwp::GetCellRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::bwp::GetCellResponse* Arena::CreateMaybeMessage< ::onos::bwp::GetCellResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::bwp::GetCellResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::bwp::GetCellsRequest* Arena::CreateMaybeMessage< ::onos::bwp::GetCellsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::bwp::GetCellsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::bwp::GetCellsResponse* Arena::CreateMaybeMessage< ::onos::bwp::GetCellsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::bwp::GetCellsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::bwp::BwpCell* Arena::CreateMaybeMessage< ::onos::bwp::BwpCell >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::bwp::BwpCell >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::bwp::PrbRange* Arena::CreateMaybeMessage< ::onos::bwp::PrbRange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::bwp::PrbRange >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
