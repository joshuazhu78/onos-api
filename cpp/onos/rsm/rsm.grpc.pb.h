// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: onos/rsm/rsm.proto
// Original file comments:
// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0
//
#ifndef GRPC_onos_2frsm_2frsm_2eproto__INCLUDED
#define GRPC_onos_2frsm_2frsm_2eproto__INCLUDED

#include "onos/rsm/rsm.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace onos {
namespace rsm {

class Rsm final {
 public:
  static constexpr char const* service_full_name() {
    return "onos.rsm.Rsm";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Slice management
    virtual ::grpc::Status CreateSlice(::grpc::ClientContext* context, const ::onos::rsm::CreateSliceRequest& request, ::onos::rsm::CreateSliceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::rsm::CreateSliceResponse>> AsyncCreateSlice(::grpc::ClientContext* context, const ::onos::rsm::CreateSliceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::rsm::CreateSliceResponse>>(AsyncCreateSliceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::rsm::CreateSliceResponse>> PrepareAsyncCreateSlice(::grpc::ClientContext* context, const ::onos::rsm::CreateSliceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::rsm::CreateSliceResponse>>(PrepareAsyncCreateSliceRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateSlice(::grpc::ClientContext* context, const ::onos::rsm::UpdateSliceRequest& request, ::onos::rsm::UpdateSliceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::rsm::UpdateSliceResponse>> AsyncUpdateSlice(::grpc::ClientContext* context, const ::onos::rsm::UpdateSliceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::rsm::UpdateSliceResponse>>(AsyncUpdateSliceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::rsm::UpdateSliceResponse>> PrepareAsyncUpdateSlice(::grpc::ClientContext* context, const ::onos::rsm::UpdateSliceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::rsm::UpdateSliceResponse>>(PrepareAsyncUpdateSliceRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteSlice(::grpc::ClientContext* context, const ::onos::rsm::DeleteSliceRequest& request, ::onos::rsm::DeleteSliceResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::rsm::DeleteSliceResponse>> AsyncDeleteSlice(::grpc::ClientContext* context, const ::onos::rsm::DeleteSliceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::rsm::DeleteSliceResponse>>(AsyncDeleteSliceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::rsm::DeleteSliceResponse>> PrepareAsyncDeleteSlice(::grpc::ClientContext* context, const ::onos::rsm::DeleteSliceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::rsm::DeleteSliceResponse>>(PrepareAsyncDeleteSliceRaw(context, request, cq));
    }
    // UE-Slice association
    virtual ::grpc::Status SetUeSliceAssociation(::grpc::ClientContext* context, const ::onos::rsm::SetUeSliceAssociationRequest& request, ::onos::rsm::SetUeSliceAssociationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::rsm::SetUeSliceAssociationResponse>> AsyncSetUeSliceAssociation(::grpc::ClientContext* context, const ::onos::rsm::SetUeSliceAssociationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::rsm::SetUeSliceAssociationResponse>>(AsyncSetUeSliceAssociationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::rsm::SetUeSliceAssociationResponse>> PrepareAsyncSetUeSliceAssociation(::grpc::ClientContext* context, const ::onos::rsm::SetUeSliceAssociationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::rsm::SetUeSliceAssociationResponse>>(PrepareAsyncSetUeSliceAssociationRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Slice management
      virtual void CreateSlice(::grpc::ClientContext* context, const ::onos::rsm::CreateSliceRequest* request, ::onos::rsm::CreateSliceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateSlice(::grpc::ClientContext* context, const ::onos::rsm::CreateSliceRequest* request, ::onos::rsm::CreateSliceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void UpdateSlice(::grpc::ClientContext* context, const ::onos::rsm::UpdateSliceRequest* request, ::onos::rsm::UpdateSliceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateSlice(::grpc::ClientContext* context, const ::onos::rsm::UpdateSliceRequest* request, ::onos::rsm::UpdateSliceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void DeleteSlice(::grpc::ClientContext* context, const ::onos::rsm::DeleteSliceRequest* request, ::onos::rsm::DeleteSliceResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteSlice(::grpc::ClientContext* context, const ::onos::rsm::DeleteSliceRequest* request, ::onos::rsm::DeleteSliceResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // UE-Slice association
      virtual void SetUeSliceAssociation(::grpc::ClientContext* context, const ::onos::rsm::SetUeSliceAssociationRequest* request, ::onos::rsm::SetUeSliceAssociationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetUeSliceAssociation(::grpc::ClientContext* context, const ::onos::rsm::SetUeSliceAssociationRequest* request, ::onos::rsm::SetUeSliceAssociationResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::onos::rsm::CreateSliceResponse>* AsyncCreateSliceRaw(::grpc::ClientContext* context, const ::onos::rsm::CreateSliceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::onos::rsm::CreateSliceResponse>* PrepareAsyncCreateSliceRaw(::grpc::ClientContext* context, const ::onos::rsm::CreateSliceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::onos::rsm::UpdateSliceResponse>* AsyncUpdateSliceRaw(::grpc::ClientContext* context, const ::onos::rsm::UpdateSliceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::onos::rsm::UpdateSliceResponse>* PrepareAsyncUpdateSliceRaw(::grpc::ClientContext* context, const ::onos::rsm::UpdateSliceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::onos::rsm::DeleteSliceResponse>* AsyncDeleteSliceRaw(::grpc::ClientContext* context, const ::onos::rsm::DeleteSliceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::onos::rsm::DeleteSliceResponse>* PrepareAsyncDeleteSliceRaw(::grpc::ClientContext* context, const ::onos::rsm::DeleteSliceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::onos::rsm::SetUeSliceAssociationResponse>* AsyncSetUeSliceAssociationRaw(::grpc::ClientContext* context, const ::onos::rsm::SetUeSliceAssociationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::onos::rsm::SetUeSliceAssociationResponse>* PrepareAsyncSetUeSliceAssociationRaw(::grpc::ClientContext* context, const ::onos::rsm::SetUeSliceAssociationRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status CreateSlice(::grpc::ClientContext* context, const ::onos::rsm::CreateSliceRequest& request, ::onos::rsm::CreateSliceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::rsm::CreateSliceResponse>> AsyncCreateSlice(::grpc::ClientContext* context, const ::onos::rsm::CreateSliceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::rsm::CreateSliceResponse>>(AsyncCreateSliceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::rsm::CreateSliceResponse>> PrepareAsyncCreateSlice(::grpc::ClientContext* context, const ::onos::rsm::CreateSliceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::rsm::CreateSliceResponse>>(PrepareAsyncCreateSliceRaw(context, request, cq));
    }
    ::grpc::Status UpdateSlice(::grpc::ClientContext* context, const ::onos::rsm::UpdateSliceRequest& request, ::onos::rsm::UpdateSliceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::rsm::UpdateSliceResponse>> AsyncUpdateSlice(::grpc::ClientContext* context, const ::onos::rsm::UpdateSliceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::rsm::UpdateSliceResponse>>(AsyncUpdateSliceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::rsm::UpdateSliceResponse>> PrepareAsyncUpdateSlice(::grpc::ClientContext* context, const ::onos::rsm::UpdateSliceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::rsm::UpdateSliceResponse>>(PrepareAsyncUpdateSliceRaw(context, request, cq));
    }
    ::grpc::Status DeleteSlice(::grpc::ClientContext* context, const ::onos::rsm::DeleteSliceRequest& request, ::onos::rsm::DeleteSliceResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::rsm::DeleteSliceResponse>> AsyncDeleteSlice(::grpc::ClientContext* context, const ::onos::rsm::DeleteSliceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::rsm::DeleteSliceResponse>>(AsyncDeleteSliceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::rsm::DeleteSliceResponse>> PrepareAsyncDeleteSlice(::grpc::ClientContext* context, const ::onos::rsm::DeleteSliceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::rsm::DeleteSliceResponse>>(PrepareAsyncDeleteSliceRaw(context, request, cq));
    }
    ::grpc::Status SetUeSliceAssociation(::grpc::ClientContext* context, const ::onos::rsm::SetUeSliceAssociationRequest& request, ::onos::rsm::SetUeSliceAssociationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::rsm::SetUeSliceAssociationResponse>> AsyncSetUeSliceAssociation(::grpc::ClientContext* context, const ::onos::rsm::SetUeSliceAssociationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::rsm::SetUeSliceAssociationResponse>>(AsyncSetUeSliceAssociationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::rsm::SetUeSliceAssociationResponse>> PrepareAsyncSetUeSliceAssociation(::grpc::ClientContext* context, const ::onos::rsm::SetUeSliceAssociationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::rsm::SetUeSliceAssociationResponse>>(PrepareAsyncSetUeSliceAssociationRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void CreateSlice(::grpc::ClientContext* context, const ::onos::rsm::CreateSliceRequest* request, ::onos::rsm::CreateSliceResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateSlice(::grpc::ClientContext* context, const ::onos::rsm::CreateSliceRequest* request, ::onos::rsm::CreateSliceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateSlice(::grpc::ClientContext* context, const ::onos::rsm::UpdateSliceRequest* request, ::onos::rsm::UpdateSliceResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateSlice(::grpc::ClientContext* context, const ::onos::rsm::UpdateSliceRequest* request, ::onos::rsm::UpdateSliceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteSlice(::grpc::ClientContext* context, const ::onos::rsm::DeleteSliceRequest* request, ::onos::rsm::DeleteSliceResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteSlice(::grpc::ClientContext* context, const ::onos::rsm::DeleteSliceRequest* request, ::onos::rsm::DeleteSliceResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetUeSliceAssociation(::grpc::ClientContext* context, const ::onos::rsm::SetUeSliceAssociationRequest* request, ::onos::rsm::SetUeSliceAssociationResponse* response, std::function<void(::grpc::Status)>) override;
      void SetUeSliceAssociation(::grpc::ClientContext* context, const ::onos::rsm::SetUeSliceAssociationRequest* request, ::onos::rsm::SetUeSliceAssociationResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::onos::rsm::CreateSliceResponse>* AsyncCreateSliceRaw(::grpc::ClientContext* context, const ::onos::rsm::CreateSliceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::onos::rsm::CreateSliceResponse>* PrepareAsyncCreateSliceRaw(::grpc::ClientContext* context, const ::onos::rsm::CreateSliceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::onos::rsm::UpdateSliceResponse>* AsyncUpdateSliceRaw(::grpc::ClientContext* context, const ::onos::rsm::UpdateSliceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::onos::rsm::UpdateSliceResponse>* PrepareAsyncUpdateSliceRaw(::grpc::ClientContext* context, const ::onos::rsm::UpdateSliceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::onos::rsm::DeleteSliceResponse>* AsyncDeleteSliceRaw(::grpc::ClientContext* context, const ::onos::rsm::DeleteSliceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::onos::rsm::DeleteSliceResponse>* PrepareAsyncDeleteSliceRaw(::grpc::ClientContext* context, const ::onos::rsm::DeleteSliceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::onos::rsm::SetUeSliceAssociationResponse>* AsyncSetUeSliceAssociationRaw(::grpc::ClientContext* context, const ::onos::rsm::SetUeSliceAssociationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::onos::rsm::SetUeSliceAssociationResponse>* PrepareAsyncSetUeSliceAssociationRaw(::grpc::ClientContext* context, const ::onos::rsm::SetUeSliceAssociationRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateSlice_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateSlice_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteSlice_;
    const ::grpc::internal::RpcMethod rpcmethod_SetUeSliceAssociation_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Slice management
    virtual ::grpc::Status CreateSlice(::grpc::ServerContext* context, const ::onos::rsm::CreateSliceRequest* request, ::onos::rsm::CreateSliceResponse* response);
    virtual ::grpc::Status UpdateSlice(::grpc::ServerContext* context, const ::onos::rsm::UpdateSliceRequest* request, ::onos::rsm::UpdateSliceResponse* response);
    virtual ::grpc::Status DeleteSlice(::grpc::ServerContext* context, const ::onos::rsm::DeleteSliceRequest* request, ::onos::rsm::DeleteSliceResponse* response);
    // UE-Slice association
    virtual ::grpc::Status SetUeSliceAssociation(::grpc::ServerContext* context, const ::onos::rsm::SetUeSliceAssociationRequest* request, ::onos::rsm::SetUeSliceAssociationResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateSlice() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSlice(::grpc::ServerContext* /*context*/, const ::onos::rsm::CreateSliceRequest* /*request*/, ::onos::rsm::CreateSliceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateSlice(::grpc::ServerContext* context, ::onos::rsm::CreateSliceRequest* request, ::grpc::ServerAsyncResponseWriter< ::onos::rsm::CreateSliceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateSlice() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_UpdateSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSlice(::grpc::ServerContext* /*context*/, const ::onos::rsm::UpdateSliceRequest* /*request*/, ::onos::rsm::UpdateSliceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateSlice(::grpc::ServerContext* context, ::onos::rsm::UpdateSliceRequest* request, ::grpc::ServerAsyncResponseWriter< ::onos::rsm::UpdateSliceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteSlice() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_DeleteSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSlice(::grpc::ServerContext* /*context*/, const ::onos::rsm::DeleteSliceRequest* /*request*/, ::onos::rsm::DeleteSliceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteSlice(::grpc::ServerContext* context, ::onos::rsm::DeleteSliceRequest* request, ::grpc::ServerAsyncResponseWriter< ::onos::rsm::DeleteSliceResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetUeSliceAssociation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetUeSliceAssociation() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SetUeSliceAssociation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetUeSliceAssociation(::grpc::ServerContext* /*context*/, const ::onos::rsm::SetUeSliceAssociationRequest* /*request*/, ::onos::rsm::SetUeSliceAssociationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetUeSliceAssociation(::grpc::ServerContext* context, ::onos::rsm::SetUeSliceAssociationRequest* request, ::grpc::ServerAsyncResponseWriter< ::onos::rsm::SetUeSliceAssociationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateSlice<WithAsyncMethod_UpdateSlice<WithAsyncMethod_DeleteSlice<WithAsyncMethod_SetUeSliceAssociation<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_CreateSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateSlice() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::onos::rsm::CreateSliceRequest, ::onos::rsm::CreateSliceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::onos::rsm::CreateSliceRequest* request, ::onos::rsm::CreateSliceResponse* response) { return this->CreateSlice(context, request, response); }));}
    void SetMessageAllocatorFor_CreateSlice(
        ::grpc::MessageAllocator< ::onos::rsm::CreateSliceRequest, ::onos::rsm::CreateSliceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::onos::rsm::CreateSliceRequest, ::onos::rsm::CreateSliceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSlice(::grpc::ServerContext* /*context*/, const ::onos::rsm::CreateSliceRequest* /*request*/, ::onos::rsm::CreateSliceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateSlice(
      ::grpc::CallbackServerContext* /*context*/, const ::onos::rsm::CreateSliceRequest* /*request*/, ::onos::rsm::CreateSliceResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateSlice() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::onos::rsm::UpdateSliceRequest, ::onos::rsm::UpdateSliceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::onos::rsm::UpdateSliceRequest* request, ::onos::rsm::UpdateSliceResponse* response) { return this->UpdateSlice(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateSlice(
        ::grpc::MessageAllocator< ::onos::rsm::UpdateSliceRequest, ::onos::rsm::UpdateSliceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::onos::rsm::UpdateSliceRequest, ::onos::rsm::UpdateSliceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSlice(::grpc::ServerContext* /*context*/, const ::onos::rsm::UpdateSliceRequest* /*request*/, ::onos::rsm::UpdateSliceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateSlice(
      ::grpc::CallbackServerContext* /*context*/, const ::onos::rsm::UpdateSliceRequest* /*request*/, ::onos::rsm::UpdateSliceResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteSlice() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::onos::rsm::DeleteSliceRequest, ::onos::rsm::DeleteSliceResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::onos::rsm::DeleteSliceRequest* request, ::onos::rsm::DeleteSliceResponse* response) { return this->DeleteSlice(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteSlice(
        ::grpc::MessageAllocator< ::onos::rsm::DeleteSliceRequest, ::onos::rsm::DeleteSliceResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::onos::rsm::DeleteSliceRequest, ::onos::rsm::DeleteSliceResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSlice(::grpc::ServerContext* /*context*/, const ::onos::rsm::DeleteSliceRequest* /*request*/, ::onos::rsm::DeleteSliceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteSlice(
      ::grpc::CallbackServerContext* /*context*/, const ::onos::rsm::DeleteSliceRequest* /*request*/, ::onos::rsm::DeleteSliceResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetUeSliceAssociation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetUeSliceAssociation() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::onos::rsm::SetUeSliceAssociationRequest, ::onos::rsm::SetUeSliceAssociationResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::onos::rsm::SetUeSliceAssociationRequest* request, ::onos::rsm::SetUeSliceAssociationResponse* response) { return this->SetUeSliceAssociation(context, request, response); }));}
    void SetMessageAllocatorFor_SetUeSliceAssociation(
        ::grpc::MessageAllocator< ::onos::rsm::SetUeSliceAssociationRequest, ::onos::rsm::SetUeSliceAssociationResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::onos::rsm::SetUeSliceAssociationRequest, ::onos::rsm::SetUeSliceAssociationResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetUeSliceAssociation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetUeSliceAssociation(::grpc::ServerContext* /*context*/, const ::onos::rsm::SetUeSliceAssociationRequest* /*request*/, ::onos::rsm::SetUeSliceAssociationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetUeSliceAssociation(
      ::grpc::CallbackServerContext* /*context*/, const ::onos::rsm::SetUeSliceAssociationRequest* /*request*/, ::onos::rsm::SetUeSliceAssociationResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_CreateSlice<WithCallbackMethod_UpdateSlice<WithCallbackMethod_DeleteSlice<WithCallbackMethod_SetUeSliceAssociation<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_CreateSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateSlice() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSlice(::grpc::ServerContext* /*context*/, const ::onos::rsm::CreateSliceRequest* /*request*/, ::onos::rsm::CreateSliceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateSlice() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_UpdateSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSlice(::grpc::ServerContext* /*context*/, const ::onos::rsm::UpdateSliceRequest* /*request*/, ::onos::rsm::UpdateSliceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteSlice() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_DeleteSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSlice(::grpc::ServerContext* /*context*/, const ::onos::rsm::DeleteSliceRequest* /*request*/, ::onos::rsm::DeleteSliceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetUeSliceAssociation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetUeSliceAssociation() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SetUeSliceAssociation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetUeSliceAssociation(::grpc::ServerContext* /*context*/, const ::onos::rsm::SetUeSliceAssociationRequest* /*request*/, ::onos::rsm::SetUeSliceAssociationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateSlice() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSlice(::grpc::ServerContext* /*context*/, const ::onos::rsm::CreateSliceRequest* /*request*/, ::onos::rsm::CreateSliceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateSlice(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateSlice() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_UpdateSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSlice(::grpc::ServerContext* /*context*/, const ::onos::rsm::UpdateSliceRequest* /*request*/, ::onos::rsm::UpdateSliceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateSlice(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteSlice() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_DeleteSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSlice(::grpc::ServerContext* /*context*/, const ::onos::rsm::DeleteSliceRequest* /*request*/, ::onos::rsm::DeleteSliceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteSlice(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetUeSliceAssociation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetUeSliceAssociation() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SetUeSliceAssociation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetUeSliceAssociation(::grpc::ServerContext* /*context*/, const ::onos::rsm::SetUeSliceAssociationRequest* /*request*/, ::onos::rsm::SetUeSliceAssociationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetUeSliceAssociation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateSlice() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateSlice(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateSlice(::grpc::ServerContext* /*context*/, const ::onos::rsm::CreateSliceRequest* /*request*/, ::onos::rsm::CreateSliceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateSlice(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateSlice() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateSlice(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateSlice(::grpc::ServerContext* /*context*/, const ::onos::rsm::UpdateSliceRequest* /*request*/, ::onos::rsm::UpdateSliceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateSlice(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteSlice() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteSlice(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteSlice(::grpc::ServerContext* /*context*/, const ::onos::rsm::DeleteSliceRequest* /*request*/, ::onos::rsm::DeleteSliceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteSlice(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetUeSliceAssociation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetUeSliceAssociation() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetUeSliceAssociation(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetUeSliceAssociation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetUeSliceAssociation(::grpc::ServerContext* /*context*/, const ::onos::rsm::SetUeSliceAssociationRequest* /*request*/, ::onos::rsm::SetUeSliceAssociationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetUeSliceAssociation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateSlice() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::onos::rsm::CreateSliceRequest, ::onos::rsm::CreateSliceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::onos::rsm::CreateSliceRequest, ::onos::rsm::CreateSliceResponse>* streamer) {
                       return this->StreamedCreateSlice(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateSlice(::grpc::ServerContext* /*context*/, const ::onos::rsm::CreateSliceRequest* /*request*/, ::onos::rsm::CreateSliceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateSlice(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::onos::rsm::CreateSliceRequest,::onos::rsm::CreateSliceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateSlice() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::onos::rsm::UpdateSliceRequest, ::onos::rsm::UpdateSliceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::onos::rsm::UpdateSliceRequest, ::onos::rsm::UpdateSliceResponse>* streamer) {
                       return this->StreamedUpdateSlice(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateSlice(::grpc::ServerContext* /*context*/, const ::onos::rsm::UpdateSliceRequest* /*request*/, ::onos::rsm::UpdateSliceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateSlice(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::onos::rsm::UpdateSliceRequest,::onos::rsm::UpdateSliceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteSlice : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteSlice() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::onos::rsm::DeleteSliceRequest, ::onos::rsm::DeleteSliceResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::onos::rsm::DeleteSliceRequest, ::onos::rsm::DeleteSliceResponse>* streamer) {
                       return this->StreamedDeleteSlice(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteSlice() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteSlice(::grpc::ServerContext* /*context*/, const ::onos::rsm::DeleteSliceRequest* /*request*/, ::onos::rsm::DeleteSliceResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteSlice(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::onos::rsm::DeleteSliceRequest,::onos::rsm::DeleteSliceResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetUeSliceAssociation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetUeSliceAssociation() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::onos::rsm::SetUeSliceAssociationRequest, ::onos::rsm::SetUeSliceAssociationResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::onos::rsm::SetUeSliceAssociationRequest, ::onos::rsm::SetUeSliceAssociationResponse>* streamer) {
                       return this->StreamedSetUeSliceAssociation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetUeSliceAssociation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetUeSliceAssociation(::grpc::ServerContext* /*context*/, const ::onos::rsm::SetUeSliceAssociationRequest* /*request*/, ::onos::rsm::SetUeSliceAssociationResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetUeSliceAssociation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::onos::rsm::SetUeSliceAssociationRequest,::onos::rsm::SetUeSliceAssociationResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateSlice<WithStreamedUnaryMethod_UpdateSlice<WithStreamedUnaryMethod_DeleteSlice<WithStreamedUnaryMethod_SetUeSliceAssociation<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateSlice<WithStreamedUnaryMethod_UpdateSlice<WithStreamedUnaryMethod_DeleteSlice<WithStreamedUnaryMethod_SetUeSliceAssociation<Service > > > > StreamedService;
};

}  // namespace rsm
}  // namespace onos


#endif  // GRPC_onos_2frsm_2frsm_2eproto__INCLUDED
