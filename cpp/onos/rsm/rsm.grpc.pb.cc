// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: onos/rsm/rsm.proto

#include "onos/rsm/rsm.pb.h"
#include "onos/rsm/rsm.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace onos {
namespace rsm {

static const char* Rsm_method_names[] = {
  "/onos.rsm.Rsm/CreateSlice",
  "/onos.rsm.Rsm/UpdateSlice",
  "/onos.rsm.Rsm/DeleteSlice",
  "/onos.rsm.Rsm/SetUeSliceAssociation",
};

std::unique_ptr< Rsm::Stub> Rsm::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Rsm::Stub> stub(new Rsm::Stub(channel, options));
  return stub;
}

Rsm::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_CreateSlice_(Rsm_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateSlice_(Rsm_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteSlice_(Rsm_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetUeSliceAssociation_(Rsm_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status Rsm::Stub::CreateSlice(::grpc::ClientContext* context, const ::onos::rsm::CreateSliceRequest& request, ::onos::rsm::CreateSliceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::rsm::CreateSliceRequest, ::onos::rsm::CreateSliceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateSlice_, context, request, response);
}

void Rsm::Stub::async::CreateSlice(::grpc::ClientContext* context, const ::onos::rsm::CreateSliceRequest* request, ::onos::rsm::CreateSliceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::rsm::CreateSliceRequest, ::onos::rsm::CreateSliceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateSlice_, context, request, response, std::move(f));
}

void Rsm::Stub::async::CreateSlice(::grpc::ClientContext* context, const ::onos::rsm::CreateSliceRequest* request, ::onos::rsm::CreateSliceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateSlice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::rsm::CreateSliceResponse>* Rsm::Stub::PrepareAsyncCreateSliceRaw(::grpc::ClientContext* context, const ::onos::rsm::CreateSliceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::rsm::CreateSliceResponse, ::onos::rsm::CreateSliceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateSlice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::rsm::CreateSliceResponse>* Rsm::Stub::AsyncCreateSliceRaw(::grpc::ClientContext* context, const ::onos::rsm::CreateSliceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateSliceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Rsm::Stub::UpdateSlice(::grpc::ClientContext* context, const ::onos::rsm::UpdateSliceRequest& request, ::onos::rsm::UpdateSliceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::rsm::UpdateSliceRequest, ::onos::rsm::UpdateSliceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateSlice_, context, request, response);
}

void Rsm::Stub::async::UpdateSlice(::grpc::ClientContext* context, const ::onos::rsm::UpdateSliceRequest* request, ::onos::rsm::UpdateSliceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::rsm::UpdateSliceRequest, ::onos::rsm::UpdateSliceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateSlice_, context, request, response, std::move(f));
}

void Rsm::Stub::async::UpdateSlice(::grpc::ClientContext* context, const ::onos::rsm::UpdateSliceRequest* request, ::onos::rsm::UpdateSliceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateSlice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::rsm::UpdateSliceResponse>* Rsm::Stub::PrepareAsyncUpdateSliceRaw(::grpc::ClientContext* context, const ::onos::rsm::UpdateSliceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::rsm::UpdateSliceResponse, ::onos::rsm::UpdateSliceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateSlice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::rsm::UpdateSliceResponse>* Rsm::Stub::AsyncUpdateSliceRaw(::grpc::ClientContext* context, const ::onos::rsm::UpdateSliceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateSliceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Rsm::Stub::DeleteSlice(::grpc::ClientContext* context, const ::onos::rsm::DeleteSliceRequest& request, ::onos::rsm::DeleteSliceResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::rsm::DeleteSliceRequest, ::onos::rsm::DeleteSliceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteSlice_, context, request, response);
}

void Rsm::Stub::async::DeleteSlice(::grpc::ClientContext* context, const ::onos::rsm::DeleteSliceRequest* request, ::onos::rsm::DeleteSliceResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::rsm::DeleteSliceRequest, ::onos::rsm::DeleteSliceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteSlice_, context, request, response, std::move(f));
}

void Rsm::Stub::async::DeleteSlice(::grpc::ClientContext* context, const ::onos::rsm::DeleteSliceRequest* request, ::onos::rsm::DeleteSliceResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteSlice_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::rsm::DeleteSliceResponse>* Rsm::Stub::PrepareAsyncDeleteSliceRaw(::grpc::ClientContext* context, const ::onos::rsm::DeleteSliceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::rsm::DeleteSliceResponse, ::onos::rsm::DeleteSliceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteSlice_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::rsm::DeleteSliceResponse>* Rsm::Stub::AsyncDeleteSliceRaw(::grpc::ClientContext* context, const ::onos::rsm::DeleteSliceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteSliceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Rsm::Stub::SetUeSliceAssociation(::grpc::ClientContext* context, const ::onos::rsm::SetUeSliceAssociationRequest& request, ::onos::rsm::SetUeSliceAssociationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::rsm::SetUeSliceAssociationRequest, ::onos::rsm::SetUeSliceAssociationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetUeSliceAssociation_, context, request, response);
}

void Rsm::Stub::async::SetUeSliceAssociation(::grpc::ClientContext* context, const ::onos::rsm::SetUeSliceAssociationRequest* request, ::onos::rsm::SetUeSliceAssociationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::rsm::SetUeSliceAssociationRequest, ::onos::rsm::SetUeSliceAssociationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetUeSliceAssociation_, context, request, response, std::move(f));
}

void Rsm::Stub::async::SetUeSliceAssociation(::grpc::ClientContext* context, const ::onos::rsm::SetUeSliceAssociationRequest* request, ::onos::rsm::SetUeSliceAssociationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetUeSliceAssociation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::rsm::SetUeSliceAssociationResponse>* Rsm::Stub::PrepareAsyncSetUeSliceAssociationRaw(::grpc::ClientContext* context, const ::onos::rsm::SetUeSliceAssociationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::rsm::SetUeSliceAssociationResponse, ::onos::rsm::SetUeSliceAssociationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetUeSliceAssociation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::rsm::SetUeSliceAssociationResponse>* Rsm::Stub::AsyncSetUeSliceAssociationRaw(::grpc::ClientContext* context, const ::onos::rsm::SetUeSliceAssociationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetUeSliceAssociationRaw(context, request, cq);
  result->StartCall();
  return result;
}

Rsm::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rsm_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rsm::Service, ::onos::rsm::CreateSliceRequest, ::onos::rsm::CreateSliceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Rsm::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::rsm::CreateSliceRequest* req,
             ::onos::rsm::CreateSliceResponse* resp) {
               return service->CreateSlice(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rsm_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rsm::Service, ::onos::rsm::UpdateSliceRequest, ::onos::rsm::UpdateSliceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Rsm::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::rsm::UpdateSliceRequest* req,
             ::onos::rsm::UpdateSliceResponse* resp) {
               return service->UpdateSlice(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rsm_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rsm::Service, ::onos::rsm::DeleteSliceRequest, ::onos::rsm::DeleteSliceResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Rsm::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::rsm::DeleteSliceRequest* req,
             ::onos::rsm::DeleteSliceResponse* resp) {
               return service->DeleteSlice(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Rsm_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Rsm::Service, ::onos::rsm::SetUeSliceAssociationRequest, ::onos::rsm::SetUeSliceAssociationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Rsm::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::rsm::SetUeSliceAssociationRequest* req,
             ::onos::rsm::SetUeSliceAssociationResponse* resp) {
               return service->SetUeSliceAssociation(ctx, req, resp);
             }, this)));
}

Rsm::Service::~Service() {
}

::grpc::Status Rsm::Service::CreateSlice(::grpc::ServerContext* context, const ::onos::rsm::CreateSliceRequest* request, ::onos::rsm::CreateSliceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rsm::Service::UpdateSlice(::grpc::ServerContext* context, const ::onos::rsm::UpdateSliceRequest* request, ::onos::rsm::UpdateSliceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rsm::Service::DeleteSlice(::grpc::ServerContext* context, const ::onos::rsm::DeleteSliceRequest* request, ::onos::rsm::DeleteSliceResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Rsm::Service::SetUeSliceAssociation(::grpc::ServerContext* context, const ::onos::rsm::SetUeSliceAssociationRequest* request, ::onos::rsm::SetUeSliceAssociationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace onos
}  // namespace rsm

