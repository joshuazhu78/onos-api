// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onos/rsm/rsm.proto

#include "onos/rsm/rsm.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace onos {
namespace rsm {
constexpr SliceItem::SliceItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : slice_ids_()
  , e2_node_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SliceItemDefaultTypeInternal {
  constexpr SliceItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SliceItemDefaultTypeInternal() {}
  union {
    SliceItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SliceItemDefaultTypeInternal _SliceItem_default_instance_;
constexpr Ack::Ack(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cause_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , success_(false){}
struct AckDefaultTypeInternal {
  constexpr AckDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckDefaultTypeInternal() {}
  union {
    Ack _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckDefaultTypeInternal _Ack_default_instance_;
constexpr CreateSliceRequest::CreateSliceRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : e2_node_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , slice_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , weight_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , scheduler_type_(0)

  , slicetype_(0)
{}
struct CreateSliceRequestDefaultTypeInternal {
  constexpr CreateSliceRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateSliceRequestDefaultTypeInternal() {}
  union {
    CreateSliceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateSliceRequestDefaultTypeInternal _CreateSliceRequest_default_instance_;
constexpr CreateSliceResponse::CreateSliceResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ack_(nullptr){}
struct CreateSliceResponseDefaultTypeInternal {
  constexpr CreateSliceResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateSliceResponseDefaultTypeInternal() {}
  union {
    CreateSliceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateSliceResponseDefaultTypeInternal _CreateSliceResponse_default_instance_;
constexpr UpdateSliceRequest::UpdateSliceRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : e2_node_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , slice_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , weight_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , scheduler_type_(0)

  , slicetype_(0)
{}
struct UpdateSliceRequestDefaultTypeInternal {
  constexpr UpdateSliceRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateSliceRequestDefaultTypeInternal() {}
  union {
    UpdateSliceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateSliceRequestDefaultTypeInternal _UpdateSliceRequest_default_instance_;
constexpr UpdateSliceResponse::UpdateSliceResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ack_(nullptr){}
struct UpdateSliceResponseDefaultTypeInternal {
  constexpr UpdateSliceResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateSliceResponseDefaultTypeInternal() {}
  union {
    UpdateSliceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateSliceResponseDefaultTypeInternal _UpdateSliceResponse_default_instance_;
constexpr DeleteSliceRequest::DeleteSliceRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : e2_node_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , slice_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , slicetype_(0)
{}
struct DeleteSliceRequestDefaultTypeInternal {
  constexpr DeleteSliceRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteSliceRequestDefaultTypeInternal() {}
  union {
    DeleteSliceRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteSliceRequestDefaultTypeInternal _DeleteSliceRequest_default_instance_;
constexpr DeleteSliceResponse::DeleteSliceResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ack_(nullptr){}
struct DeleteSliceResponseDefaultTypeInternal {
  constexpr DeleteSliceResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteSliceResponseDefaultTypeInternal() {}
  union {
    DeleteSliceResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteSliceResponseDefaultTypeInternal _DeleteSliceResponse_default_instance_;
constexpr SliceAssocItem::SliceAssocItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ue_id_()
  , _ue_id_cached_byte_size_(0)
  , ue_slice_assoc_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , e2_node_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , slice_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SliceAssocItemDefaultTypeInternal {
  constexpr SliceAssocItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SliceAssocItemDefaultTypeInternal() {}
  union {
    SliceAssocItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SliceAssocItemDefaultTypeInternal _SliceAssocItem_default_instance_;
constexpr UeId::UeId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ue_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)
{}
struct UeIdDefaultTypeInternal {
  constexpr UeIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UeIdDefaultTypeInternal() {}
  union {
    UeId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UeIdDefaultTypeInternal _UeId_default_instance_;
constexpr SetUeSliceAssociationRequest::SetUeSliceAssociationRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ue_id_()
  , e2_node_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dl_slice_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ul_slice_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , drb_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct SetUeSliceAssociationRequestDefaultTypeInternal {
  constexpr SetUeSliceAssociationRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetUeSliceAssociationRequestDefaultTypeInternal() {}
  union {
    SetUeSliceAssociationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetUeSliceAssociationRequestDefaultTypeInternal _SetUeSliceAssociationRequest_default_instance_;
constexpr SetUeSliceAssociationResponse::SetUeSliceAssociationResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : assigned_ue_slice_assoc_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ack_(nullptr){}
struct SetUeSliceAssociationResponseDefaultTypeInternal {
  constexpr SetUeSliceAssociationResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SetUeSliceAssociationResponseDefaultTypeInternal() {}
  union {
    SetUeSliceAssociationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SetUeSliceAssociationResponseDefaultTypeInternal _SetUeSliceAssociationResponse_default_instance_;
}  // namespace rsm
}  // namespace onos
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_onos_2frsm_2frsm_2eproto[12];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_onos_2frsm_2frsm_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_onos_2frsm_2frsm_2eproto = nullptr;

const uint32_t TableStruct_onos_2frsm_2frsm_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::rsm::SliceItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::rsm::SliceItem, e2_node_id_),
  PROTOBUF_FIELD_OFFSET(::onos::rsm::SliceItem, slice_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::rsm::Ack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::rsm::Ack, success_),
  PROTOBUF_FIELD_OFFSET(::onos::rsm::Ack, cause_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::rsm::CreateSliceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::rsm::CreateSliceRequest, e2_node_id_),
  PROTOBUF_FIELD_OFFSET(::onos::rsm::CreateSliceRequest, slice_id_),
  PROTOBUF_FIELD_OFFSET(::onos::rsm::CreateSliceRequest, scheduler_type_),
  PROTOBUF_FIELD_OFFSET(::onos::rsm::CreateSliceRequest, weight_),
  PROTOBUF_FIELD_OFFSET(::onos::rsm::CreateSliceRequest, slicetype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::rsm::CreateSliceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::rsm::CreateSliceResponse, ack_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::rsm::UpdateSliceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::rsm::UpdateSliceRequest, e2_node_id_),
  PROTOBUF_FIELD_OFFSET(::onos::rsm::UpdateSliceRequest, slice_id_),
  PROTOBUF_FIELD_OFFSET(::onos::rsm::UpdateSliceRequest, scheduler_type_),
  PROTOBUF_FIELD_OFFSET(::onos::rsm::UpdateSliceRequest, weight_),
  PROTOBUF_FIELD_OFFSET(::onos::rsm::UpdateSliceRequest, slicetype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::rsm::UpdateSliceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::rsm::UpdateSliceResponse, ack_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::rsm::DeleteSliceRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::rsm::DeleteSliceRequest, e2_node_id_),
  PROTOBUF_FIELD_OFFSET(::onos::rsm::DeleteSliceRequest, slice_id_),
  PROTOBUF_FIELD_OFFSET(::onos::rsm::DeleteSliceRequest, slicetype_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::rsm::DeleteSliceResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::rsm::DeleteSliceResponse, ack_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::rsm::SliceAssocItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::rsm::SliceAssocItem, ue_slice_assoc_id_),
  PROTOBUF_FIELD_OFFSET(::onos::rsm::SliceAssocItem, e2_node_id_),
  PROTOBUF_FIELD_OFFSET(::onos::rsm::SliceAssocItem, ue_id_),
  PROTOBUF_FIELD_OFFSET(::onos::rsm::SliceAssocItem, slice_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::rsm::UeId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::rsm::UeId, ue_id_),
  PROTOBUF_FIELD_OFFSET(::onos::rsm::UeId, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::rsm::SetUeSliceAssociationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::rsm::SetUeSliceAssociationRequest, e2_node_id_),
  PROTOBUF_FIELD_OFFSET(::onos::rsm::SetUeSliceAssociationRequest, ue_id_),
  PROTOBUF_FIELD_OFFSET(::onos::rsm::SetUeSliceAssociationRequest, dl_slice_id_),
  PROTOBUF_FIELD_OFFSET(::onos::rsm::SetUeSliceAssociationRequest, ul_slice_id_),
  PROTOBUF_FIELD_OFFSET(::onos::rsm::SetUeSliceAssociationRequest, drb_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::rsm::SetUeSliceAssociationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::rsm::SetUeSliceAssociationResponse, ack_),
  PROTOBUF_FIELD_OFFSET(::onos::rsm::SetUeSliceAssociationResponse, assigned_ue_slice_assoc_id_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::onos::rsm::SliceItem)},
  { 8, -1, -1, sizeof(::onos::rsm::Ack)},
  { 16, -1, -1, sizeof(::onos::rsm::CreateSliceRequest)},
  { 27, -1, -1, sizeof(::onos::rsm::CreateSliceResponse)},
  { 34, -1, -1, sizeof(::onos::rsm::UpdateSliceRequest)},
  { 45, -1, -1, sizeof(::onos::rsm::UpdateSliceResponse)},
  { 52, -1, -1, sizeof(::onos::rsm::DeleteSliceRequest)},
  { 61, -1, -1, sizeof(::onos::rsm::DeleteSliceResponse)},
  { 68, -1, -1, sizeof(::onos::rsm::SliceAssocItem)},
  { 78, -1, -1, sizeof(::onos::rsm::UeId)},
  { 86, -1, -1, sizeof(::onos::rsm::SetUeSliceAssociationRequest)},
  { 97, -1, -1, sizeof(::onos::rsm::SetUeSliceAssociationResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::rsm::_SliceItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::rsm::_Ack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::rsm::_CreateSliceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::rsm::_CreateSliceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::rsm::_UpdateSliceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::rsm::_UpdateSliceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::rsm::_DeleteSliceRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::rsm::_DeleteSliceResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::rsm::_SliceAssocItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::rsm::_UeId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::rsm::_SetUeSliceAssociationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::rsm::_SetUeSliceAssociationResponse_default_instance_),
};

const char descriptor_table_protodef_onos_2frsm_2frsm_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022onos/rsm/rsm.proto\022\010onos.rsm\"2\n\tSliceI"
  "tem\022\022\n\ne2_node_id\030\001 \001(\t\022\021\n\tslice_ids\030\002 \003"
  "(\t\"%\n\003Ack\022\017\n\007success\030\001 \001(\010\022\r\n\005cause\030\002 \001("
  "\t\"\243\001\n\022CreateSliceRequest\022\022\n\ne2_node_id\030\001"
  " \001(\t\022\020\n\010slice_id\030\002 \001(\t\022/\n\016scheduler_type"
  "\030\003 \001(\0162\027.onos.rsm.SchedulerType\022\016\n\006weigh"
  "t\030\004 \001(\t\022&\n\tsliceType\030\005 \001(\0162\023.onos.rsm.Sl"
  "iceType\"1\n\023CreateSliceResponse\022\032\n\003ack\030\001 "
  "\001(\0132\r.onos.rsm.Ack\"\243\001\n\022UpdateSliceReques"
  "t\022\022\n\ne2_node_id\030\001 \001(\t\022\020\n\010slice_id\030\002 \001(\t\022"
  "/\n\016scheduler_type\030\003 \001(\0162\027.onos.rsm.Sched"
  "ulerType\022\016\n\006weight\030\004 \001(\t\022&\n\tsliceType\030\005 "
  "\001(\0162\023.onos.rsm.SliceType\"1\n\023UpdateSliceR"
  "esponse\022\032\n\003ack\030\001 \001(\0132\r.onos.rsm.Ack\"b\n\022D"
  "eleteSliceRequest\022\022\n\ne2_node_id\030\001 \001(\t\022\020\n"
  "\010slice_id\030\002 \001(\t\022&\n\tsliceType\030\003 \001(\0162\023.ono"
  "s.rsm.SliceType\"1\n\023DeleteSliceResponse\022\032"
  "\n\003ack\030\001 \001(\0132\r.onos.rsm.Ack\"t\n\016SliceAssoc"
  "Item\022\031\n\021ue_slice_assoc_id\030\001 \001(\t\022\022\n\ne2_no"
  "de_id\030\002 \001(\t\022!\n\005ue_id\030\003 \003(\0162\022.onos.rsm.Ue"
  "IdType\022\020\n\010slice_id\030\004 \001(\t\"7\n\004UeId\022\r\n\005ue_i"
  "d\030\001 \001(\t\022 \n\004type\030\002 \001(\0162\022.onos.rsm.UeIdTyp"
  "e\"\213\001\n\034SetUeSliceAssociationRequest\022\022\n\ne2"
  "_node_id\030\001 \001(\t\022\035\n\005ue_id\030\002 \003(\0132\016.onos.rsm"
  ".UeId\022\023\n\013dl_slice_id\030\003 \001(\t\022\023\n\013ul_slice_i"
  "d\030\004 \001(\t\022\016\n\006drb_id\030\005 \001(\t\"_\n\035SetUeSliceAss"
  "ociationResponse\022\032\n\003ack\030\001 \001(\0132\r.onos.rsm"
  ".Ack\022\"\n\032assigned_ue_slice_assoc_id\030\002 \001(\t"
  "*=\n\tSliceType\022\027\n\023SLICE_TYPE_DL_SLICE\020\000\022\027"
  "\n\023SLICE_TYPE_UL_SLICE\020\001*u\n\rSchedulerType"
  "\022\036\n\032SCHEDULER_TYPE_ROUND_ROBIN\020\000\022&\n\"SCHE"
  "DULER_TYPE_PROPORTIONALLY_FAIR\020\001\022\034\n\030SCHE"
  "DULER_TYPE_QOS_BASED\020\002*\246\001\n\010UeIdType\022\035\n\031U"
  "E_ID_TYPE_CU_UE_F1_AP_ID\020\000\022\035\n\031UE_ID_TYPE"
  "_DU_UE_F1_AP_ID\020\001\022\035\n\031UE_ID_TYPE_RAN_UE_N"
  "GAP_ID\020\002\022\035\n\031UE_ID_TYPE_AMF_UE_NGAP_ID\020\003\022"
  "\036\n\032UE_ID_TYPE_ENB_UE_S1_AP_ID\020\0042\323\002\n\003Rsm\022"
  "J\n\013CreateSlice\022\034.onos.rsm.CreateSliceReq"
  "uest\032\035.onos.rsm.CreateSliceResponse\022J\n\013U"
  "pdateSlice\022\034.onos.rsm.UpdateSliceRequest"
  "\032\035.onos.rsm.UpdateSliceResponse\022J\n\013Delet"
  "eSlice\022\034.onos.rsm.DeleteSliceRequest\032\035.o"
  "nos.rsm.DeleteSliceResponse\022h\n\025SetUeSlic"
  "eAssociation\022&.onos.rsm.SetUeSliceAssoci"
  "ationRequest\032\'.onos.rsm.SetUeSliceAssoci"
  "ationResponseb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_onos_2frsm_2frsm_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_onos_2frsm_2frsm_2eproto = {
  false, false, 1821, descriptor_table_protodef_onos_2frsm_2frsm_2eproto, "onos/rsm/rsm.proto", 
  &descriptor_table_onos_2frsm_2frsm_2eproto_once, nullptr, 0, 12,
  schemas, file_default_instances, TableStruct_onos_2frsm_2frsm_2eproto::offsets,
  file_level_metadata_onos_2frsm_2frsm_2eproto, file_level_enum_descriptors_onos_2frsm_2frsm_2eproto, file_level_service_descriptors_onos_2frsm_2frsm_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_onos_2frsm_2frsm_2eproto_getter() {
  return &descriptor_table_onos_2frsm_2frsm_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_onos_2frsm_2frsm_2eproto(&descriptor_table_onos_2frsm_2frsm_2eproto);
namespace onos {
namespace rsm {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SliceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_onos_2frsm_2frsm_2eproto);
  return file_level_enum_descriptors_onos_2frsm_2frsm_2eproto[0];
}
bool SliceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SchedulerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_onos_2frsm_2frsm_2eproto);
  return file_level_enum_descriptors_onos_2frsm_2frsm_2eproto[1];
}
bool SchedulerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UeIdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_onos_2frsm_2frsm_2eproto);
  return file_level_enum_descriptors_onos_2frsm_2frsm_2eproto[2];
}
bool UeIdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SliceItem::_Internal {
 public:
};

SliceItem::SliceItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  slice_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.rsm.SliceItem)
}
SliceItem::SliceItem(const SliceItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      slice_ids_(from.slice_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  e2_node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    e2_node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_e2_node_id().empty()) {
    e2_node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_e2_node_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:onos.rsm.SliceItem)
}

inline void SliceItem::SharedCtor() {
e2_node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  e2_node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SliceItem::~SliceItem() {
  // @@protoc_insertion_point(destructor:onos.rsm.SliceItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SliceItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  e2_node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SliceItem::ArenaDtor(void* object) {
  SliceItem* _this = reinterpret_cast< SliceItem* >(object);
  (void)_this;
}
void SliceItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SliceItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SliceItem::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.rsm.SliceItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slice_ids_.Clear();
  e2_node_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SliceItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string e2_node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_e2_node_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.rsm.SliceItem.e2_node_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string slice_ids = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_slice_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.rsm.SliceItem.slice_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SliceItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.rsm.SliceItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string e2_node_id = 1;
  if (!this->_internal_e2_node_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_e2_node_id().data(), static_cast<int>(this->_internal_e2_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.rsm.SliceItem.e2_node_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_e2_node_id(), target);
  }

  // repeated string slice_ids = 2;
  for (int i = 0, n = this->_internal_slice_ids_size(); i < n; i++) {
    const auto& s = this->_internal_slice_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.rsm.SliceItem.slice_ids");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.rsm.SliceItem)
  return target;
}

size_t SliceItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.rsm.SliceItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string slice_ids = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(slice_ids_.size());
  for (int i = 0, n = slice_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      slice_ids_.Get(i));
  }

  // string e2_node_id = 1;
  if (!this->_internal_e2_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_e2_node_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SliceItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SliceItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SliceItem::GetClassData() const { return &_class_data_; }

void SliceItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SliceItem *>(to)->MergeFrom(
      static_cast<const SliceItem &>(from));
}


void SliceItem::MergeFrom(const SliceItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.rsm.SliceItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  slice_ids_.MergeFrom(from.slice_ids_);
  if (!from._internal_e2_node_id().empty()) {
    _internal_set_e2_node_id(from._internal_e2_node_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SliceItem::CopyFrom(const SliceItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.rsm.SliceItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SliceItem::IsInitialized() const {
  return true;
}

void SliceItem::InternalSwap(SliceItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  slice_ids_.InternalSwap(&other->slice_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &e2_node_id_, lhs_arena,
      &other->e2_node_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SliceItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2frsm_2frsm_2eproto_getter, &descriptor_table_onos_2frsm_2frsm_2eproto_once,
      file_level_metadata_onos_2frsm_2frsm_2eproto[0]);
}

// ===================================================================

class Ack::_Internal {
 public:
};

Ack::Ack(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.rsm.Ack)
}
Ack::Ack(const Ack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cause_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cause_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cause().empty()) {
    cause_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cause(), 
      GetArenaForAllocation());
  }
  success_ = from.success_;
  // @@protoc_insertion_point(copy_constructor:onos.rsm.Ack)
}

inline void Ack::SharedCtor() {
cause_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cause_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
success_ = false;
}

Ack::~Ack() {
  // @@protoc_insertion_point(destructor:onos.rsm.Ack)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Ack::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  cause_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Ack::ArenaDtor(void* object) {
  Ack* _this = reinterpret_cast< Ack* >(object);
  (void)_this;
}
void Ack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Ack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Ack::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.rsm.Ack)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cause_.ClearToEmpty();
  success_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          success_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string cause = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_cause();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.rsm.Ack.cause"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Ack::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.rsm.Ack)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool success = 1;
  if (this->_internal_success() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_success(), target);
  }

  // string cause = 2;
  if (!this->_internal_cause().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cause().data(), static_cast<int>(this->_internal_cause().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.rsm.Ack.cause");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cause(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.rsm.Ack)
  return target;
}

size_t Ack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.rsm.Ack)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cause = 2;
  if (!this->_internal_cause().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cause());
  }

  // bool success = 1;
  if (this->_internal_success() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ack::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Ack::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ack::GetClassData() const { return &_class_data_; }

void Ack::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Ack *>(to)->MergeFrom(
      static_cast<const Ack &>(from));
}


void Ack::MergeFrom(const Ack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.rsm.Ack)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_cause().empty()) {
    _internal_set_cause(from._internal_cause());
  }
  if (from._internal_success() != 0) {
    _internal_set_success(from._internal_success());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Ack::CopyFrom(const Ack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.rsm.Ack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ack::IsInitialized() const {
  return true;
}

void Ack::InternalSwap(Ack* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cause_, lhs_arena,
      &other->cause_, rhs_arena
  );
  swap(success_, other->success_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Ack::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2frsm_2frsm_2eproto_getter, &descriptor_table_onos_2frsm_2frsm_2eproto_once,
      file_level_metadata_onos_2frsm_2frsm_2eproto[1]);
}

// ===================================================================

class CreateSliceRequest::_Internal {
 public:
};

CreateSliceRequest::CreateSliceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.rsm.CreateSliceRequest)
}
CreateSliceRequest::CreateSliceRequest(const CreateSliceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  e2_node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    e2_node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_e2_node_id().empty()) {
    e2_node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_e2_node_id(), 
      GetArenaForAllocation());
  }
  slice_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    slice_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_slice_id().empty()) {
    slice_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_slice_id(), 
      GetArenaForAllocation());
  }
  weight_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    weight_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_weight().empty()) {
    weight_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_weight(), 
      GetArenaForAllocation());
  }
  ::memcpy(&scheduler_type_, &from.scheduler_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&slicetype_) -
    reinterpret_cast<char*>(&scheduler_type_)) + sizeof(slicetype_));
  // @@protoc_insertion_point(copy_constructor:onos.rsm.CreateSliceRequest)
}

inline void CreateSliceRequest::SharedCtor() {
e2_node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  e2_node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
slice_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  slice_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
weight_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  weight_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&scheduler_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&slicetype_) -
    reinterpret_cast<char*>(&scheduler_type_)) + sizeof(slicetype_));
}

CreateSliceRequest::~CreateSliceRequest() {
  // @@protoc_insertion_point(destructor:onos.rsm.CreateSliceRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateSliceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  e2_node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  slice_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  weight_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CreateSliceRequest::ArenaDtor(void* object) {
  CreateSliceRequest* _this = reinterpret_cast< CreateSliceRequest* >(object);
  (void)_this;
}
void CreateSliceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateSliceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateSliceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.rsm.CreateSliceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  e2_node_id_.ClearToEmpty();
  slice_id_.ClearToEmpty();
  weight_.ClearToEmpty();
  ::memset(&scheduler_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slicetype_) -
      reinterpret_cast<char*>(&scheduler_type_)) + sizeof(slicetype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateSliceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string e2_node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_e2_node_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.rsm.CreateSliceRequest.e2_node_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string slice_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_slice_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.rsm.CreateSliceRequest.slice_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.rsm.SchedulerType scheduler_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_scheduler_type(static_cast<::onos::rsm::SchedulerType>(val));
        } else
          goto handle_unusual;
        continue;
      // string weight = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_weight();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.rsm.CreateSliceRequest.weight"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.rsm.SliceType sliceType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_slicetype(static_cast<::onos::rsm::SliceType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateSliceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.rsm.CreateSliceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string e2_node_id = 1;
  if (!this->_internal_e2_node_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_e2_node_id().data(), static_cast<int>(this->_internal_e2_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.rsm.CreateSliceRequest.e2_node_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_e2_node_id(), target);
  }

  // string slice_id = 2;
  if (!this->_internal_slice_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_slice_id().data(), static_cast<int>(this->_internal_slice_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.rsm.CreateSliceRequest.slice_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_slice_id(), target);
  }

  // .onos.rsm.SchedulerType scheduler_type = 3;
  if (this->_internal_scheduler_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_scheduler_type(), target);
  }

  // string weight = 4;
  if (!this->_internal_weight().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_weight().data(), static_cast<int>(this->_internal_weight().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.rsm.CreateSliceRequest.weight");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_weight(), target);
  }

  // .onos.rsm.SliceType sliceType = 5;
  if (this->_internal_slicetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_slicetype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.rsm.CreateSliceRequest)
  return target;
}

size_t CreateSliceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.rsm.CreateSliceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string e2_node_id = 1;
  if (!this->_internal_e2_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_e2_node_id());
  }

  // string slice_id = 2;
  if (!this->_internal_slice_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_slice_id());
  }

  // string weight = 4;
  if (!this->_internal_weight().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_weight());
  }

  // .onos.rsm.SchedulerType scheduler_type = 3;
  if (this->_internal_scheduler_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_scheduler_type());
  }

  // .onos.rsm.SliceType sliceType = 5;
  if (this->_internal_slicetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_slicetype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateSliceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateSliceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateSliceRequest::GetClassData() const { return &_class_data_; }

void CreateSliceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateSliceRequest *>(to)->MergeFrom(
      static_cast<const CreateSliceRequest &>(from));
}


void CreateSliceRequest::MergeFrom(const CreateSliceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.rsm.CreateSliceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_e2_node_id().empty()) {
    _internal_set_e2_node_id(from._internal_e2_node_id());
  }
  if (!from._internal_slice_id().empty()) {
    _internal_set_slice_id(from._internal_slice_id());
  }
  if (!from._internal_weight().empty()) {
    _internal_set_weight(from._internal_weight());
  }
  if (from._internal_scheduler_type() != 0) {
    _internal_set_scheduler_type(from._internal_scheduler_type());
  }
  if (from._internal_slicetype() != 0) {
    _internal_set_slicetype(from._internal_slicetype());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateSliceRequest::CopyFrom(const CreateSliceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.rsm.CreateSliceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSliceRequest::IsInitialized() const {
  return true;
}

void CreateSliceRequest::InternalSwap(CreateSliceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &e2_node_id_, lhs_arena,
      &other->e2_node_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &slice_id_, lhs_arena,
      &other->slice_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &weight_, lhs_arena,
      &other->weight_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateSliceRequest, slicetype_)
      + sizeof(CreateSliceRequest::slicetype_)
      - PROTOBUF_FIELD_OFFSET(CreateSliceRequest, scheduler_type_)>(
          reinterpret_cast<char*>(&scheduler_type_),
          reinterpret_cast<char*>(&other->scheduler_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateSliceRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2frsm_2frsm_2eproto_getter, &descriptor_table_onos_2frsm_2frsm_2eproto_once,
      file_level_metadata_onos_2frsm_2frsm_2eproto[2]);
}

// ===================================================================

class CreateSliceResponse::_Internal {
 public:
  static const ::onos::rsm::Ack& ack(const CreateSliceResponse* msg);
};

const ::onos::rsm::Ack&
CreateSliceResponse::_Internal::ack(const CreateSliceResponse* msg) {
  return *msg->ack_;
}
CreateSliceResponse::CreateSliceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.rsm.CreateSliceResponse)
}
CreateSliceResponse::CreateSliceResponse(const CreateSliceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ack()) {
    ack_ = new ::onos::rsm::Ack(*from.ack_);
  } else {
    ack_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:onos.rsm.CreateSliceResponse)
}

inline void CreateSliceResponse::SharedCtor() {
ack_ = nullptr;
}

CreateSliceResponse::~CreateSliceResponse() {
  // @@protoc_insertion_point(destructor:onos.rsm.CreateSliceResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateSliceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete ack_;
}

void CreateSliceResponse::ArenaDtor(void* object) {
  CreateSliceResponse* _this = reinterpret_cast< CreateSliceResponse* >(object);
  (void)_this;
}
void CreateSliceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateSliceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateSliceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.rsm.CreateSliceResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && ack_ != nullptr) {
    delete ack_;
  }
  ack_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateSliceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .onos.rsm.Ack ack = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ack(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CreateSliceResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.rsm.CreateSliceResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .onos.rsm.Ack ack = 1;
  if (this->_internal_has_ack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ack(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.rsm.CreateSliceResponse)
  return target;
}

size_t CreateSliceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.rsm.CreateSliceResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .onos.rsm.Ack ack = 1;
  if (this->_internal_has_ack()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ack_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateSliceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateSliceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateSliceResponse::GetClassData() const { return &_class_data_; }

void CreateSliceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CreateSliceResponse *>(to)->MergeFrom(
      static_cast<const CreateSliceResponse &>(from));
}


void CreateSliceResponse::MergeFrom(const CreateSliceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.rsm.CreateSliceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ack()) {
    _internal_mutable_ack()->::onos::rsm::Ack::MergeFrom(from._internal_ack());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateSliceResponse::CopyFrom(const CreateSliceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.rsm.CreateSliceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateSliceResponse::IsInitialized() const {
  return true;
}

void CreateSliceResponse::InternalSwap(CreateSliceResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(ack_, other->ack_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateSliceResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2frsm_2frsm_2eproto_getter, &descriptor_table_onos_2frsm_2frsm_2eproto_once,
      file_level_metadata_onos_2frsm_2frsm_2eproto[3]);
}

// ===================================================================

class UpdateSliceRequest::_Internal {
 public:
};

UpdateSliceRequest::UpdateSliceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.rsm.UpdateSliceRequest)
}
UpdateSliceRequest::UpdateSliceRequest(const UpdateSliceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  e2_node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    e2_node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_e2_node_id().empty()) {
    e2_node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_e2_node_id(), 
      GetArenaForAllocation());
  }
  slice_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    slice_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_slice_id().empty()) {
    slice_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_slice_id(), 
      GetArenaForAllocation());
  }
  weight_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    weight_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_weight().empty()) {
    weight_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_weight(), 
      GetArenaForAllocation());
  }
  ::memcpy(&scheduler_type_, &from.scheduler_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&slicetype_) -
    reinterpret_cast<char*>(&scheduler_type_)) + sizeof(slicetype_));
  // @@protoc_insertion_point(copy_constructor:onos.rsm.UpdateSliceRequest)
}

inline void UpdateSliceRequest::SharedCtor() {
e2_node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  e2_node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
slice_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  slice_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
weight_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  weight_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&scheduler_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&slicetype_) -
    reinterpret_cast<char*>(&scheduler_type_)) + sizeof(slicetype_));
}

UpdateSliceRequest::~UpdateSliceRequest() {
  // @@protoc_insertion_point(destructor:onos.rsm.UpdateSliceRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateSliceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  e2_node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  slice_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  weight_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpdateSliceRequest::ArenaDtor(void* object) {
  UpdateSliceRequest* _this = reinterpret_cast< UpdateSliceRequest* >(object);
  (void)_this;
}
void UpdateSliceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateSliceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateSliceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.rsm.UpdateSliceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  e2_node_id_.ClearToEmpty();
  slice_id_.ClearToEmpty();
  weight_.ClearToEmpty();
  ::memset(&scheduler_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&slicetype_) -
      reinterpret_cast<char*>(&scheduler_type_)) + sizeof(slicetype_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateSliceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string e2_node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_e2_node_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.rsm.UpdateSliceRequest.e2_node_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string slice_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_slice_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.rsm.UpdateSliceRequest.slice_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.rsm.SchedulerType scheduler_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_scheduler_type(static_cast<::onos::rsm::SchedulerType>(val));
        } else
          goto handle_unusual;
        continue;
      // string weight = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_weight();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.rsm.UpdateSliceRequest.weight"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.rsm.SliceType sliceType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_slicetype(static_cast<::onos::rsm::SliceType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateSliceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.rsm.UpdateSliceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string e2_node_id = 1;
  if (!this->_internal_e2_node_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_e2_node_id().data(), static_cast<int>(this->_internal_e2_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.rsm.UpdateSliceRequest.e2_node_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_e2_node_id(), target);
  }

  // string slice_id = 2;
  if (!this->_internal_slice_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_slice_id().data(), static_cast<int>(this->_internal_slice_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.rsm.UpdateSliceRequest.slice_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_slice_id(), target);
  }

  // .onos.rsm.SchedulerType scheduler_type = 3;
  if (this->_internal_scheduler_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_scheduler_type(), target);
  }

  // string weight = 4;
  if (!this->_internal_weight().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_weight().data(), static_cast<int>(this->_internal_weight().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.rsm.UpdateSliceRequest.weight");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_weight(), target);
  }

  // .onos.rsm.SliceType sliceType = 5;
  if (this->_internal_slicetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_slicetype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.rsm.UpdateSliceRequest)
  return target;
}

size_t UpdateSliceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.rsm.UpdateSliceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string e2_node_id = 1;
  if (!this->_internal_e2_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_e2_node_id());
  }

  // string slice_id = 2;
  if (!this->_internal_slice_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_slice_id());
  }

  // string weight = 4;
  if (!this->_internal_weight().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_weight());
  }

  // .onos.rsm.SchedulerType scheduler_type = 3;
  if (this->_internal_scheduler_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_scheduler_type());
  }

  // .onos.rsm.SliceType sliceType = 5;
  if (this->_internal_slicetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_slicetype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateSliceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateSliceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateSliceRequest::GetClassData() const { return &_class_data_; }

void UpdateSliceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UpdateSliceRequest *>(to)->MergeFrom(
      static_cast<const UpdateSliceRequest &>(from));
}


void UpdateSliceRequest::MergeFrom(const UpdateSliceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.rsm.UpdateSliceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_e2_node_id().empty()) {
    _internal_set_e2_node_id(from._internal_e2_node_id());
  }
  if (!from._internal_slice_id().empty()) {
    _internal_set_slice_id(from._internal_slice_id());
  }
  if (!from._internal_weight().empty()) {
    _internal_set_weight(from._internal_weight());
  }
  if (from._internal_scheduler_type() != 0) {
    _internal_set_scheduler_type(from._internal_scheduler_type());
  }
  if (from._internal_slicetype() != 0) {
    _internal_set_slicetype(from._internal_slicetype());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateSliceRequest::CopyFrom(const UpdateSliceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.rsm.UpdateSliceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateSliceRequest::IsInitialized() const {
  return true;
}

void UpdateSliceRequest::InternalSwap(UpdateSliceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &e2_node_id_, lhs_arena,
      &other->e2_node_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &slice_id_, lhs_arena,
      &other->slice_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &weight_, lhs_arena,
      &other->weight_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateSliceRequest, slicetype_)
      + sizeof(UpdateSliceRequest::slicetype_)
      - PROTOBUF_FIELD_OFFSET(UpdateSliceRequest, scheduler_type_)>(
          reinterpret_cast<char*>(&scheduler_type_),
          reinterpret_cast<char*>(&other->scheduler_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateSliceRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2frsm_2frsm_2eproto_getter, &descriptor_table_onos_2frsm_2frsm_2eproto_once,
      file_level_metadata_onos_2frsm_2frsm_2eproto[4]);
}

// ===================================================================

class UpdateSliceResponse::_Internal {
 public:
  static const ::onos::rsm::Ack& ack(const UpdateSliceResponse* msg);
};

const ::onos::rsm::Ack&
UpdateSliceResponse::_Internal::ack(const UpdateSliceResponse* msg) {
  return *msg->ack_;
}
UpdateSliceResponse::UpdateSliceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.rsm.UpdateSliceResponse)
}
UpdateSliceResponse::UpdateSliceResponse(const UpdateSliceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ack()) {
    ack_ = new ::onos::rsm::Ack(*from.ack_);
  } else {
    ack_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:onos.rsm.UpdateSliceResponse)
}

inline void UpdateSliceResponse::SharedCtor() {
ack_ = nullptr;
}

UpdateSliceResponse::~UpdateSliceResponse() {
  // @@protoc_insertion_point(destructor:onos.rsm.UpdateSliceResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateSliceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete ack_;
}

void UpdateSliceResponse::ArenaDtor(void* object) {
  UpdateSliceResponse* _this = reinterpret_cast< UpdateSliceResponse* >(object);
  (void)_this;
}
void UpdateSliceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateSliceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateSliceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.rsm.UpdateSliceResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && ack_ != nullptr) {
    delete ack_;
  }
  ack_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateSliceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .onos.rsm.Ack ack = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ack(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UpdateSliceResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.rsm.UpdateSliceResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .onos.rsm.Ack ack = 1;
  if (this->_internal_has_ack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ack(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.rsm.UpdateSliceResponse)
  return target;
}

size_t UpdateSliceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.rsm.UpdateSliceResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .onos.rsm.Ack ack = 1;
  if (this->_internal_has_ack()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ack_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateSliceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateSliceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateSliceResponse::GetClassData() const { return &_class_data_; }

void UpdateSliceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UpdateSliceResponse *>(to)->MergeFrom(
      static_cast<const UpdateSliceResponse &>(from));
}


void UpdateSliceResponse::MergeFrom(const UpdateSliceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.rsm.UpdateSliceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ack()) {
    _internal_mutable_ack()->::onos::rsm::Ack::MergeFrom(from._internal_ack());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateSliceResponse::CopyFrom(const UpdateSliceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.rsm.UpdateSliceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateSliceResponse::IsInitialized() const {
  return true;
}

void UpdateSliceResponse::InternalSwap(UpdateSliceResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(ack_, other->ack_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateSliceResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2frsm_2frsm_2eproto_getter, &descriptor_table_onos_2frsm_2frsm_2eproto_once,
      file_level_metadata_onos_2frsm_2frsm_2eproto[5]);
}

// ===================================================================

class DeleteSliceRequest::_Internal {
 public:
};

DeleteSliceRequest::DeleteSliceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.rsm.DeleteSliceRequest)
}
DeleteSliceRequest::DeleteSliceRequest(const DeleteSliceRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  e2_node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    e2_node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_e2_node_id().empty()) {
    e2_node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_e2_node_id(), 
      GetArenaForAllocation());
  }
  slice_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    slice_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_slice_id().empty()) {
    slice_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_slice_id(), 
      GetArenaForAllocation());
  }
  slicetype_ = from.slicetype_;
  // @@protoc_insertion_point(copy_constructor:onos.rsm.DeleteSliceRequest)
}

inline void DeleteSliceRequest::SharedCtor() {
e2_node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  e2_node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
slice_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  slice_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
slicetype_ = 0;
}

DeleteSliceRequest::~DeleteSliceRequest() {
  // @@protoc_insertion_point(destructor:onos.rsm.DeleteSliceRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteSliceRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  e2_node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  slice_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteSliceRequest::ArenaDtor(void* object) {
  DeleteSliceRequest* _this = reinterpret_cast< DeleteSliceRequest* >(object);
  (void)_this;
}
void DeleteSliceRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteSliceRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteSliceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.rsm.DeleteSliceRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  e2_node_id_.ClearToEmpty();
  slice_id_.ClearToEmpty();
  slicetype_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteSliceRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string e2_node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_e2_node_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.rsm.DeleteSliceRequest.e2_node_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string slice_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_slice_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.rsm.DeleteSliceRequest.slice_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.rsm.SliceType sliceType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_slicetype(static_cast<::onos::rsm::SliceType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteSliceRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.rsm.DeleteSliceRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string e2_node_id = 1;
  if (!this->_internal_e2_node_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_e2_node_id().data(), static_cast<int>(this->_internal_e2_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.rsm.DeleteSliceRequest.e2_node_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_e2_node_id(), target);
  }

  // string slice_id = 2;
  if (!this->_internal_slice_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_slice_id().data(), static_cast<int>(this->_internal_slice_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.rsm.DeleteSliceRequest.slice_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_slice_id(), target);
  }

  // .onos.rsm.SliceType sliceType = 3;
  if (this->_internal_slicetype() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_slicetype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.rsm.DeleteSliceRequest)
  return target;
}

size_t DeleteSliceRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.rsm.DeleteSliceRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string e2_node_id = 1;
  if (!this->_internal_e2_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_e2_node_id());
  }

  // string slice_id = 2;
  if (!this->_internal_slice_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_slice_id());
  }

  // .onos.rsm.SliceType sliceType = 3;
  if (this->_internal_slicetype() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_slicetype());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteSliceRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteSliceRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteSliceRequest::GetClassData() const { return &_class_data_; }

void DeleteSliceRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteSliceRequest *>(to)->MergeFrom(
      static_cast<const DeleteSliceRequest &>(from));
}


void DeleteSliceRequest::MergeFrom(const DeleteSliceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.rsm.DeleteSliceRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_e2_node_id().empty()) {
    _internal_set_e2_node_id(from._internal_e2_node_id());
  }
  if (!from._internal_slice_id().empty()) {
    _internal_set_slice_id(from._internal_slice_id());
  }
  if (from._internal_slicetype() != 0) {
    _internal_set_slicetype(from._internal_slicetype());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteSliceRequest::CopyFrom(const DeleteSliceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.rsm.DeleteSliceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteSliceRequest::IsInitialized() const {
  return true;
}

void DeleteSliceRequest::InternalSwap(DeleteSliceRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &e2_node_id_, lhs_arena,
      &other->e2_node_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &slice_id_, lhs_arena,
      &other->slice_id_, rhs_arena
  );
  swap(slicetype_, other->slicetype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteSliceRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2frsm_2frsm_2eproto_getter, &descriptor_table_onos_2frsm_2frsm_2eproto_once,
      file_level_metadata_onos_2frsm_2frsm_2eproto[6]);
}

// ===================================================================

class DeleteSliceResponse::_Internal {
 public:
  static const ::onos::rsm::Ack& ack(const DeleteSliceResponse* msg);
};

const ::onos::rsm::Ack&
DeleteSliceResponse::_Internal::ack(const DeleteSliceResponse* msg) {
  return *msg->ack_;
}
DeleteSliceResponse::DeleteSliceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.rsm.DeleteSliceResponse)
}
DeleteSliceResponse::DeleteSliceResponse(const DeleteSliceResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_ack()) {
    ack_ = new ::onos::rsm::Ack(*from.ack_);
  } else {
    ack_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:onos.rsm.DeleteSliceResponse)
}

inline void DeleteSliceResponse::SharedCtor() {
ack_ = nullptr;
}

DeleteSliceResponse::~DeleteSliceResponse() {
  // @@protoc_insertion_point(destructor:onos.rsm.DeleteSliceResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteSliceResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete ack_;
}

void DeleteSliceResponse::ArenaDtor(void* object) {
  DeleteSliceResponse* _this = reinterpret_cast< DeleteSliceResponse* >(object);
  (void)_this;
}
void DeleteSliceResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteSliceResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteSliceResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.rsm.DeleteSliceResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && ack_ != nullptr) {
    delete ack_;
  }
  ack_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteSliceResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .onos.rsm.Ack ack = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ack(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DeleteSliceResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.rsm.DeleteSliceResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .onos.rsm.Ack ack = 1;
  if (this->_internal_has_ack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ack(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.rsm.DeleteSliceResponse)
  return target;
}

size_t DeleteSliceResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.rsm.DeleteSliceResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .onos.rsm.Ack ack = 1;
  if (this->_internal_has_ack()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ack_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteSliceResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteSliceResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteSliceResponse::GetClassData() const { return &_class_data_; }

void DeleteSliceResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DeleteSliceResponse *>(to)->MergeFrom(
      static_cast<const DeleteSliceResponse &>(from));
}


void DeleteSliceResponse::MergeFrom(const DeleteSliceResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.rsm.DeleteSliceResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_ack()) {
    _internal_mutable_ack()->::onos::rsm::Ack::MergeFrom(from._internal_ack());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteSliceResponse::CopyFrom(const DeleteSliceResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.rsm.DeleteSliceResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteSliceResponse::IsInitialized() const {
  return true;
}

void DeleteSliceResponse::InternalSwap(DeleteSliceResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(ack_, other->ack_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteSliceResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2frsm_2frsm_2eproto_getter, &descriptor_table_onos_2frsm_2frsm_2eproto_once,
      file_level_metadata_onos_2frsm_2frsm_2eproto[7]);
}

// ===================================================================

class SliceAssocItem::_Internal {
 public:
};

SliceAssocItem::SliceAssocItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ue_id_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.rsm.SliceAssocItem)
}
SliceAssocItem::SliceAssocItem(const SliceAssocItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ue_id_(from.ue_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ue_slice_assoc_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ue_slice_assoc_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ue_slice_assoc_id().empty()) {
    ue_slice_assoc_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ue_slice_assoc_id(), 
      GetArenaForAllocation());
  }
  e2_node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    e2_node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_e2_node_id().empty()) {
    e2_node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_e2_node_id(), 
      GetArenaForAllocation());
  }
  slice_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    slice_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_slice_id().empty()) {
    slice_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_slice_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:onos.rsm.SliceAssocItem)
}

inline void SliceAssocItem::SharedCtor() {
ue_slice_assoc_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ue_slice_assoc_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
e2_node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  e2_node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
slice_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  slice_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SliceAssocItem::~SliceAssocItem() {
  // @@protoc_insertion_point(destructor:onos.rsm.SliceAssocItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SliceAssocItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ue_slice_assoc_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  e2_node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  slice_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SliceAssocItem::ArenaDtor(void* object) {
  SliceAssocItem* _this = reinterpret_cast< SliceAssocItem* >(object);
  (void)_this;
}
void SliceAssocItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SliceAssocItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SliceAssocItem::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.rsm.SliceAssocItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ue_id_.Clear();
  ue_slice_assoc_id_.ClearToEmpty();
  e2_node_id_.ClearToEmpty();
  slice_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SliceAssocItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ue_slice_assoc_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ue_slice_assoc_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.rsm.SliceAssocItem.ue_slice_assoc_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string e2_node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_e2_node_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.rsm.SliceAssocItem.e2_node_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .onos.rsm.UeIdType ue_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_ue_id(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 24) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_ue_id(static_cast<::onos::rsm::UeIdType>(val));
        } else
          goto handle_unusual;
        continue;
      // string slice_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_slice_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.rsm.SliceAssocItem.slice_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SliceAssocItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.rsm.SliceAssocItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ue_slice_assoc_id = 1;
  if (!this->_internal_ue_slice_assoc_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ue_slice_assoc_id().data(), static_cast<int>(this->_internal_ue_slice_assoc_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.rsm.SliceAssocItem.ue_slice_assoc_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ue_slice_assoc_id(), target);
  }

  // string e2_node_id = 2;
  if (!this->_internal_e2_node_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_e2_node_id().data(), static_cast<int>(this->_internal_e2_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.rsm.SliceAssocItem.e2_node_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_e2_node_id(), target);
  }

  // repeated .onos.rsm.UeIdType ue_id = 3;
  {
    int byte_size = _ue_id_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          3, ue_id_, byte_size, target);
    }
  }

  // string slice_id = 4;
  if (!this->_internal_slice_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_slice_id().data(), static_cast<int>(this->_internal_slice_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.rsm.SliceAssocItem.slice_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_slice_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.rsm.SliceAssocItem)
  return target;
}

size_t SliceAssocItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.rsm.SliceAssocItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .onos.rsm.UeIdType ue_id = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_ue_id_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_ue_id(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ue_id_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string ue_slice_assoc_id = 1;
  if (!this->_internal_ue_slice_assoc_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ue_slice_assoc_id());
  }

  // string e2_node_id = 2;
  if (!this->_internal_e2_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_e2_node_id());
  }

  // string slice_id = 4;
  if (!this->_internal_slice_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_slice_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SliceAssocItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SliceAssocItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SliceAssocItem::GetClassData() const { return &_class_data_; }

void SliceAssocItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SliceAssocItem *>(to)->MergeFrom(
      static_cast<const SliceAssocItem &>(from));
}


void SliceAssocItem::MergeFrom(const SliceAssocItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.rsm.SliceAssocItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ue_id_.MergeFrom(from.ue_id_);
  if (!from._internal_ue_slice_assoc_id().empty()) {
    _internal_set_ue_slice_assoc_id(from._internal_ue_slice_assoc_id());
  }
  if (!from._internal_e2_node_id().empty()) {
    _internal_set_e2_node_id(from._internal_e2_node_id());
  }
  if (!from._internal_slice_id().empty()) {
    _internal_set_slice_id(from._internal_slice_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SliceAssocItem::CopyFrom(const SliceAssocItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.rsm.SliceAssocItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SliceAssocItem::IsInitialized() const {
  return true;
}

void SliceAssocItem::InternalSwap(SliceAssocItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ue_id_.InternalSwap(&other->ue_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ue_slice_assoc_id_, lhs_arena,
      &other->ue_slice_assoc_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &e2_node_id_, lhs_arena,
      &other->e2_node_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &slice_id_, lhs_arena,
      &other->slice_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SliceAssocItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2frsm_2frsm_2eproto_getter, &descriptor_table_onos_2frsm_2frsm_2eproto_once,
      file_level_metadata_onos_2frsm_2frsm_2eproto[8]);
}

// ===================================================================

class UeId::_Internal {
 public:
};

UeId::UeId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.rsm.UeId)
}
UeId::UeId(const UeId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ue_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ue_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ue_id().empty()) {
    ue_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ue_id(), 
      GetArenaForAllocation());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:onos.rsm.UeId)
}

inline void UeId::SharedCtor() {
ue_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ue_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_ = 0;
}

UeId::~UeId() {
  // @@protoc_insertion_point(destructor:onos.rsm.UeId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UeId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ue_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UeId::ArenaDtor(void* object) {
  UeId* _this = reinterpret_cast< UeId* >(object);
  (void)_this;
}
void UeId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UeId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UeId::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.rsm.UeId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ue_id_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UeId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ue_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_ue_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.rsm.UeId.ue_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.rsm.UeIdType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::onos::rsm::UeIdType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UeId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.rsm.UeId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string ue_id = 1;
  if (!this->_internal_ue_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ue_id().data(), static_cast<int>(this->_internal_ue_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.rsm.UeId.ue_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ue_id(), target);
  }

  // .onos.rsm.UeIdType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.rsm.UeId)
  return target;
}

size_t UeId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.rsm.UeId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ue_id = 1;
  if (!this->_internal_ue_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ue_id());
  }

  // .onos.rsm.UeIdType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UeId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UeId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UeId::GetClassData() const { return &_class_data_; }

void UeId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UeId *>(to)->MergeFrom(
      static_cast<const UeId &>(from));
}


void UeId::MergeFrom(const UeId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.rsm.UeId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ue_id().empty()) {
    _internal_set_ue_id(from._internal_ue_id());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UeId::CopyFrom(const UeId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.rsm.UeId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UeId::IsInitialized() const {
  return true;
}

void UeId::InternalSwap(UeId* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ue_id_, lhs_arena,
      &other->ue_id_, rhs_arena
  );
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UeId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2frsm_2frsm_2eproto_getter, &descriptor_table_onos_2frsm_2frsm_2eproto_once,
      file_level_metadata_onos_2frsm_2frsm_2eproto[9]);
}

// ===================================================================

class SetUeSliceAssociationRequest::_Internal {
 public:
};

SetUeSliceAssociationRequest::SetUeSliceAssociationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ue_id_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.rsm.SetUeSliceAssociationRequest)
}
SetUeSliceAssociationRequest::SetUeSliceAssociationRequest(const SetUeSliceAssociationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ue_id_(from.ue_id_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  e2_node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    e2_node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_e2_node_id().empty()) {
    e2_node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_e2_node_id(), 
      GetArenaForAllocation());
  }
  dl_slice_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    dl_slice_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dl_slice_id().empty()) {
    dl_slice_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dl_slice_id(), 
      GetArenaForAllocation());
  }
  ul_slice_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ul_slice_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ul_slice_id().empty()) {
    ul_slice_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ul_slice_id(), 
      GetArenaForAllocation());
  }
  drb_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    drb_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_drb_id().empty()) {
    drb_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_drb_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:onos.rsm.SetUeSliceAssociationRequest)
}

inline void SetUeSliceAssociationRequest::SharedCtor() {
e2_node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  e2_node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
dl_slice_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  dl_slice_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ul_slice_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ul_slice_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
drb_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  drb_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

SetUeSliceAssociationRequest::~SetUeSliceAssociationRequest() {
  // @@protoc_insertion_point(destructor:onos.rsm.SetUeSliceAssociationRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetUeSliceAssociationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  e2_node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dl_slice_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ul_slice_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  drb_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SetUeSliceAssociationRequest::ArenaDtor(void* object) {
  SetUeSliceAssociationRequest* _this = reinterpret_cast< SetUeSliceAssociationRequest* >(object);
  (void)_this;
}
void SetUeSliceAssociationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetUeSliceAssociationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetUeSliceAssociationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.rsm.SetUeSliceAssociationRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ue_id_.Clear();
  e2_node_id_.ClearToEmpty();
  dl_slice_id_.ClearToEmpty();
  ul_slice_id_.ClearToEmpty();
  drb_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetUeSliceAssociationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string e2_node_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_e2_node_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.rsm.SetUeSliceAssociationRequest.e2_node_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .onos.rsm.UeId ue_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ue_id(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string dl_slice_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_dl_slice_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.rsm.SetUeSliceAssociationRequest.dl_slice_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ul_slice_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_ul_slice_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.rsm.SetUeSliceAssociationRequest.ul_slice_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string drb_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_drb_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.rsm.SetUeSliceAssociationRequest.drb_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetUeSliceAssociationRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.rsm.SetUeSliceAssociationRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string e2_node_id = 1;
  if (!this->_internal_e2_node_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_e2_node_id().data(), static_cast<int>(this->_internal_e2_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.rsm.SetUeSliceAssociationRequest.e2_node_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_e2_node_id(), target);
  }

  // repeated .onos.rsm.UeId ue_id = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ue_id_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_ue_id(i), target, stream);
  }

  // string dl_slice_id = 3;
  if (!this->_internal_dl_slice_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dl_slice_id().data(), static_cast<int>(this->_internal_dl_slice_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.rsm.SetUeSliceAssociationRequest.dl_slice_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_dl_slice_id(), target);
  }

  // string ul_slice_id = 4;
  if (!this->_internal_ul_slice_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ul_slice_id().data(), static_cast<int>(this->_internal_ul_slice_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.rsm.SetUeSliceAssociationRequest.ul_slice_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ul_slice_id(), target);
  }

  // string drb_id = 5;
  if (!this->_internal_drb_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_drb_id().data(), static_cast<int>(this->_internal_drb_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.rsm.SetUeSliceAssociationRequest.drb_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_drb_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.rsm.SetUeSliceAssociationRequest)
  return target;
}

size_t SetUeSliceAssociationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.rsm.SetUeSliceAssociationRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .onos.rsm.UeId ue_id = 2;
  total_size += 1UL * this->_internal_ue_id_size();
  for (const auto& msg : this->ue_id_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string e2_node_id = 1;
  if (!this->_internal_e2_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_e2_node_id());
  }

  // string dl_slice_id = 3;
  if (!this->_internal_dl_slice_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dl_slice_id());
  }

  // string ul_slice_id = 4;
  if (!this->_internal_ul_slice_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ul_slice_id());
  }

  // string drb_id = 5;
  if (!this->_internal_drb_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_drb_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetUeSliceAssociationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetUeSliceAssociationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetUeSliceAssociationRequest::GetClassData() const { return &_class_data_; }

void SetUeSliceAssociationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetUeSliceAssociationRequest *>(to)->MergeFrom(
      static_cast<const SetUeSliceAssociationRequest &>(from));
}


void SetUeSliceAssociationRequest::MergeFrom(const SetUeSliceAssociationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.rsm.SetUeSliceAssociationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ue_id_.MergeFrom(from.ue_id_);
  if (!from._internal_e2_node_id().empty()) {
    _internal_set_e2_node_id(from._internal_e2_node_id());
  }
  if (!from._internal_dl_slice_id().empty()) {
    _internal_set_dl_slice_id(from._internal_dl_slice_id());
  }
  if (!from._internal_ul_slice_id().empty()) {
    _internal_set_ul_slice_id(from._internal_ul_slice_id());
  }
  if (!from._internal_drb_id().empty()) {
    _internal_set_drb_id(from._internal_drb_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetUeSliceAssociationRequest::CopyFrom(const SetUeSliceAssociationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.rsm.SetUeSliceAssociationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetUeSliceAssociationRequest::IsInitialized() const {
  return true;
}

void SetUeSliceAssociationRequest::InternalSwap(SetUeSliceAssociationRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ue_id_.InternalSwap(&other->ue_id_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &e2_node_id_, lhs_arena,
      &other->e2_node_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dl_slice_id_, lhs_arena,
      &other->dl_slice_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ul_slice_id_, lhs_arena,
      &other->ul_slice_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &drb_id_, lhs_arena,
      &other->drb_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata SetUeSliceAssociationRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2frsm_2frsm_2eproto_getter, &descriptor_table_onos_2frsm_2frsm_2eproto_once,
      file_level_metadata_onos_2frsm_2frsm_2eproto[10]);
}

// ===================================================================

class SetUeSliceAssociationResponse::_Internal {
 public:
  static const ::onos::rsm::Ack& ack(const SetUeSliceAssociationResponse* msg);
};

const ::onos::rsm::Ack&
SetUeSliceAssociationResponse::_Internal::ack(const SetUeSliceAssociationResponse* msg) {
  return *msg->ack_;
}
SetUeSliceAssociationResponse::SetUeSliceAssociationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.rsm.SetUeSliceAssociationResponse)
}
SetUeSliceAssociationResponse::SetUeSliceAssociationResponse(const SetUeSliceAssociationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  assigned_ue_slice_assoc_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    assigned_ue_slice_assoc_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_assigned_ue_slice_assoc_id().empty()) {
    assigned_ue_slice_assoc_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_assigned_ue_slice_assoc_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_ack()) {
    ack_ = new ::onos::rsm::Ack(*from.ack_);
  } else {
    ack_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:onos.rsm.SetUeSliceAssociationResponse)
}

inline void SetUeSliceAssociationResponse::SharedCtor() {
assigned_ue_slice_assoc_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  assigned_ue_slice_assoc_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ack_ = nullptr;
}

SetUeSliceAssociationResponse::~SetUeSliceAssociationResponse() {
  // @@protoc_insertion_point(destructor:onos.rsm.SetUeSliceAssociationResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SetUeSliceAssociationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  assigned_ue_slice_assoc_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ack_;
}

void SetUeSliceAssociationResponse::ArenaDtor(void* object) {
  SetUeSliceAssociationResponse* _this = reinterpret_cast< SetUeSliceAssociationResponse* >(object);
  (void)_this;
}
void SetUeSliceAssociationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SetUeSliceAssociationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SetUeSliceAssociationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.rsm.SetUeSliceAssociationResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  assigned_ue_slice_assoc_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && ack_ != nullptr) {
    delete ack_;
  }
  ack_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SetUeSliceAssociationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .onos.rsm.Ack ack = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_ack(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string assigned_ue_slice_assoc_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_assigned_ue_slice_assoc_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.rsm.SetUeSliceAssociationResponse.assigned_ue_slice_assoc_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SetUeSliceAssociationResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.rsm.SetUeSliceAssociationResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .onos.rsm.Ack ack = 1;
  if (this->_internal_has_ack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::ack(this), target, stream);
  }

  // string assigned_ue_slice_assoc_id = 2;
  if (!this->_internal_assigned_ue_slice_assoc_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_assigned_ue_slice_assoc_id().data(), static_cast<int>(this->_internal_assigned_ue_slice_assoc_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.rsm.SetUeSliceAssociationResponse.assigned_ue_slice_assoc_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_assigned_ue_slice_assoc_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.rsm.SetUeSliceAssociationResponse)
  return target;
}

size_t SetUeSliceAssociationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.rsm.SetUeSliceAssociationResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string assigned_ue_slice_assoc_id = 2;
  if (!this->_internal_assigned_ue_slice_assoc_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_assigned_ue_slice_assoc_id());
  }

  // .onos.rsm.Ack ack = 1;
  if (this->_internal_has_ack()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ack_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SetUeSliceAssociationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SetUeSliceAssociationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SetUeSliceAssociationResponse::GetClassData() const { return &_class_data_; }

void SetUeSliceAssociationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SetUeSliceAssociationResponse *>(to)->MergeFrom(
      static_cast<const SetUeSliceAssociationResponse &>(from));
}


void SetUeSliceAssociationResponse::MergeFrom(const SetUeSliceAssociationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.rsm.SetUeSliceAssociationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_assigned_ue_slice_assoc_id().empty()) {
    _internal_set_assigned_ue_slice_assoc_id(from._internal_assigned_ue_slice_assoc_id());
  }
  if (from._internal_has_ack()) {
    _internal_mutable_ack()->::onos::rsm::Ack::MergeFrom(from._internal_ack());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SetUeSliceAssociationResponse::CopyFrom(const SetUeSliceAssociationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.rsm.SetUeSliceAssociationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SetUeSliceAssociationResponse::IsInitialized() const {
  return true;
}

void SetUeSliceAssociationResponse::InternalSwap(SetUeSliceAssociationResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &assigned_ue_slice_assoc_id_, lhs_arena,
      &other->assigned_ue_slice_assoc_id_, rhs_arena
  );
  swap(ack_, other->ack_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SetUeSliceAssociationResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2frsm_2frsm_2eproto_getter, &descriptor_table_onos_2frsm_2frsm_2eproto_once,
      file_level_metadata_onos_2frsm_2frsm_2eproto[11]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace rsm
}  // namespace onos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::onos::rsm::SliceItem* Arena::CreateMaybeMessage< ::onos::rsm::SliceItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::rsm::SliceItem >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::rsm::Ack* Arena::CreateMaybeMessage< ::onos::rsm::Ack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::rsm::Ack >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::rsm::CreateSliceRequest* Arena::CreateMaybeMessage< ::onos::rsm::CreateSliceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::rsm::CreateSliceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::rsm::CreateSliceResponse* Arena::CreateMaybeMessage< ::onos::rsm::CreateSliceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::rsm::CreateSliceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::rsm::UpdateSliceRequest* Arena::CreateMaybeMessage< ::onos::rsm::UpdateSliceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::rsm::UpdateSliceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::rsm::UpdateSliceResponse* Arena::CreateMaybeMessage< ::onos::rsm::UpdateSliceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::rsm::UpdateSliceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::rsm::DeleteSliceRequest* Arena::CreateMaybeMessage< ::onos::rsm::DeleteSliceRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::rsm::DeleteSliceRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::rsm::DeleteSliceResponse* Arena::CreateMaybeMessage< ::onos::rsm::DeleteSliceResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::rsm::DeleteSliceResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::rsm::SliceAssocItem* Arena::CreateMaybeMessage< ::onos::rsm::SliceAssocItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::rsm::SliceAssocItem >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::rsm::UeId* Arena::CreateMaybeMessage< ::onos::rsm::UeId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::rsm::UeId >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::rsm::SetUeSliceAssociationRequest* Arena::CreateMaybeMessage< ::onos::rsm::SetUeSliceAssociationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::rsm::SetUeSliceAssociationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::rsm::SetUeSliceAssociationResponse* Arena::CreateMaybeMessage< ::onos::rsm::SetUeSliceAssociationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::rsm::SetUeSliceAssociationResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
