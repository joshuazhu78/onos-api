// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onos/topo/config.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_onos_2ftopo_2fconfig_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_onos_2ftopo_2fconfig_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/duration.pb.h>
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_onos_2ftopo_2fconfig_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_onos_2ftopo_2fconfig_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_onos_2ftopo_2fconfig_2eproto;
namespace onos {
namespace topo {
class AdHoc;
struct AdHocDefaultTypeInternal;
extern AdHocDefaultTypeInternal _AdHoc_default_instance_;
class AdHoc_PropertiesEntry_DoNotUse;
struct AdHoc_PropertiesEntry_DoNotUseDefaultTypeInternal;
extern AdHoc_PropertiesEntry_DoNotUseDefaultTypeInternal _AdHoc_PropertiesEntry_DoNotUse_default_instance_;
class Asset;
struct AssetDefaultTypeInternal;
extern AssetDefaultTypeInternal _Asset_default_instance_;
class Configurable;
struct ConfigurableDefaultTypeInternal;
extern ConfigurableDefaultTypeInternal _Configurable_default_instance_;
class MastershipState;
struct MastershipStateDefaultTypeInternal;
extern MastershipStateDefaultTypeInternal _MastershipState_default_instance_;
class ProtocolState;
struct ProtocolStateDefaultTypeInternal;
extern ProtocolStateDefaultTypeInternal _ProtocolState_default_instance_;
class Protocols;
struct ProtocolsDefaultTypeInternal;
extern ProtocolsDefaultTypeInternal _Protocols_default_instance_;
class TLSOptions;
struct TLSOptionsDefaultTypeInternal;
extern TLSOptionsDefaultTypeInternal _TLSOptions_default_instance_;
}  // namespace topo
}  // namespace onos
PROTOBUF_NAMESPACE_OPEN
template<> ::onos::topo::AdHoc* Arena::CreateMaybeMessage<::onos::topo::AdHoc>(Arena*);
template<> ::onos::topo::AdHoc_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage<::onos::topo::AdHoc_PropertiesEntry_DoNotUse>(Arena*);
template<> ::onos::topo::Asset* Arena::CreateMaybeMessage<::onos::topo::Asset>(Arena*);
template<> ::onos::topo::Configurable* Arena::CreateMaybeMessage<::onos::topo::Configurable>(Arena*);
template<> ::onos::topo::MastershipState* Arena::CreateMaybeMessage<::onos::topo::MastershipState>(Arena*);
template<> ::onos::topo::ProtocolState* Arena::CreateMaybeMessage<::onos::topo::ProtocolState>(Arena*);
template<> ::onos::topo::Protocols* Arena::CreateMaybeMessage<::onos::topo::Protocols>(Arena*);
template<> ::onos::topo::TLSOptions* Arena::CreateMaybeMessage<::onos::topo::TLSOptions>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace onos {
namespace topo {

enum Protocol : int {
  UNKNOWN_PROTOCOL = 0,
  GNMI = 1,
  P4RUNTIME = 2,
  GNOI = 3,
  E2AP = 4,
  Protocol_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Protocol_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Protocol_IsValid(int value);
constexpr Protocol Protocol_MIN = UNKNOWN_PROTOCOL;
constexpr Protocol Protocol_MAX = E2AP;
constexpr int Protocol_ARRAYSIZE = Protocol_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Protocol_descriptor();
template<typename T>
inline const std::string& Protocol_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Protocol>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Protocol_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Protocol_descriptor(), enum_t_value);
}
inline bool Protocol_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Protocol* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Protocol>(
    Protocol_descriptor(), name, value);
}
enum ConnectivityState : int {
  UNKNOWN_CONNECTIVITY_STATE = 0,
  REACHABLE = 1,
  UNREACHABLE = 2,
  ConnectivityState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ConnectivityState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ConnectivityState_IsValid(int value);
constexpr ConnectivityState ConnectivityState_MIN = UNKNOWN_CONNECTIVITY_STATE;
constexpr ConnectivityState ConnectivityState_MAX = UNREACHABLE;
constexpr int ConnectivityState_ARRAYSIZE = ConnectivityState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConnectivityState_descriptor();
template<typename T>
inline const std::string& ConnectivityState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConnectivityState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConnectivityState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConnectivityState_descriptor(), enum_t_value);
}
inline bool ConnectivityState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ConnectivityState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConnectivityState>(
    ConnectivityState_descriptor(), name, value);
}
enum ChannelState : int {
  UNKNOWN_CHANNEL_STATE = 0,
  CONNECTED = 1,
  DISCONNECTED = 2,
  ChannelState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ChannelState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ChannelState_IsValid(int value);
constexpr ChannelState ChannelState_MIN = UNKNOWN_CHANNEL_STATE;
constexpr ChannelState ChannelState_MAX = DISCONNECTED;
constexpr int ChannelState_ARRAYSIZE = ChannelState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChannelState_descriptor();
template<typename T>
inline const std::string& ChannelState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ChannelState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ChannelState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ChannelState_descriptor(), enum_t_value);
}
inline bool ChannelState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ChannelState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ChannelState>(
    ChannelState_descriptor(), name, value);
}
enum ServiceState : int {
  UNKNOWN_SERVICE_STATE = 0,
  AVAILABLE = 1,
  UNAVAILABLE = 2,
  CONNECTING = 3,
  ServiceState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ServiceState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ServiceState_IsValid(int value);
constexpr ServiceState ServiceState_MIN = UNKNOWN_SERVICE_STATE;
constexpr ServiceState ServiceState_MAX = CONNECTING;
constexpr int ServiceState_ARRAYSIZE = ServiceState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServiceState_descriptor();
template<typename T>
inline const std::string& ServiceState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ServiceState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ServiceState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ServiceState_descriptor(), enum_t_value);
}
inline bool ServiceState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ServiceState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ServiceState>(
    ServiceState_descriptor(), name, value);
}
// ===================================================================

class Asset final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.Asset) */ {
 public:
  inline Asset() : Asset(nullptr) {}
  ~Asset() override;
  explicit constexpr Asset(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Asset(const Asset& from);
  Asset(Asset&& from) noexcept
    : Asset() {
    *this = ::std::move(from);
  }

  inline Asset& operator=(const Asset& from) {
    CopyFrom(from);
    return *this;
  }
  inline Asset& operator=(Asset&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Asset& default_instance() {
    return *internal_default_instance();
  }
  static inline const Asset* internal_default_instance() {
    return reinterpret_cast<const Asset*>(
               &_Asset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Asset& a, Asset& b) {
    a.Swap(&b);
  }
  inline void Swap(Asset* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Asset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Asset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Asset>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Asset& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Asset& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Asset* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.Asset";
  }
  protected:
  explicit Asset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kManufacturerFieldNumber = 2,
    kModelFieldNumber = 3,
    kSerialFieldNumber = 4,
    kAssetFieldNumber = 5,
    kSwVersionFieldNumber = 6,
    kRoleFieldNumber = 8,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string manufacturer = 2;
  void clear_manufacturer();
  const std::string& manufacturer() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_manufacturer(ArgT0&& arg0, ArgT... args);
  std::string* mutable_manufacturer();
  PROTOBUF_NODISCARD std::string* release_manufacturer();
  void set_allocated_manufacturer(std::string* manufacturer);
  private:
  const std::string& _internal_manufacturer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_manufacturer(const std::string& value);
  std::string* _internal_mutable_manufacturer();
  public:

  // string model = 3;
  void clear_model();
  const std::string& model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model();
  PROTOBUF_NODISCARD std::string* release_model();
  void set_allocated_model(std::string* model);
  private:
  const std::string& _internal_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model(const std::string& value);
  std::string* _internal_mutable_model();
  public:

  // string serial = 4;
  void clear_serial();
  const std::string& serial() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_serial(ArgT0&& arg0, ArgT... args);
  std::string* mutable_serial();
  PROTOBUF_NODISCARD std::string* release_serial();
  void set_allocated_serial(std::string* serial);
  private:
  const std::string& _internal_serial() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_serial(const std::string& value);
  std::string* _internal_mutable_serial();
  public:

  // string asset = 5;
  void clear_asset();
  const std::string& asset() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_asset(ArgT0&& arg0, ArgT... args);
  std::string* mutable_asset();
  PROTOBUF_NODISCARD std::string* release_asset();
  void set_allocated_asset(std::string* asset);
  private:
  const std::string& _internal_asset() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_asset(const std::string& value);
  std::string* _internal_mutable_asset();
  public:

  // string sw_version = 6;
  void clear_sw_version();
  const std::string& sw_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sw_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sw_version();
  PROTOBUF_NODISCARD std::string* release_sw_version();
  void set_allocated_sw_version(std::string* sw_version);
  private:
  const std::string& _internal_sw_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sw_version(const std::string& value);
  std::string* _internal_mutable_sw_version();
  public:

  // string role = 8;
  void clear_role();
  const std::string& role() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_role(ArgT0&& arg0, ArgT... args);
  std::string* mutable_role();
  PROTOBUF_NODISCARD std::string* release_role();
  void set_allocated_role(std::string* role);
  private:
  const std::string& _internal_role() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role(const std::string& value);
  std::string* _internal_mutable_role();
  public:

  // @@protoc_insertion_point(class_scope:onos.topo.Asset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr manufacturer_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr serial_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr asset_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sw_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class Configurable final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.Configurable) */ {
 public:
  inline Configurable() : Configurable(nullptr) {}
  ~Configurable() override;
  explicit constexpr Configurable(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Configurable(const Configurable& from);
  Configurable(Configurable&& from) noexcept
    : Configurable() {
    *this = ::std::move(from);
  }

  inline Configurable& operator=(const Configurable& from) {
    CopyFrom(from);
    return *this;
  }
  inline Configurable& operator=(Configurable&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Configurable& default_instance() {
    return *internal_default_instance();
  }
  static inline const Configurable* internal_default_instance() {
    return reinterpret_cast<const Configurable*>(
               &_Configurable_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Configurable& a, Configurable& b) {
    a.Swap(&b);
  }
  inline void Swap(Configurable* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Configurable* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Configurable* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Configurable>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Configurable& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Configurable& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Configurable* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.Configurable";
  }
  protected:
  explicit Configurable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kAddressFieldNumber = 2,
    kTargetFieldNumber = 3,
    kVersionFieldNumber = 4,
    kTimeoutFieldNumber = 5,
    kPersistentFieldNumber = 6,
  };
  // string type = 1;
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_NODISCARD std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // string address = 2;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // string target = 3;
  void clear_target();
  const std::string& target() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_target(ArgT0&& arg0, ArgT... args);
  std::string* mutable_target();
  PROTOBUF_NODISCARD std::string* release_target();
  void set_allocated_target(std::string* target);
  private:
  const std::string& _internal_target() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target(const std::string& value);
  std::string* _internal_mutable_target();
  public:

  // string version = 4;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // .google.protobuf.Duration timeout = 5 [(.gogoproto.stdduration) = true];
  bool has_timeout() const;
  private:
  bool _internal_has_timeout() const;
  public:
  void clear_timeout();
  const ::PROTOBUF_NAMESPACE_ID::Duration& timeout() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_timeout();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_timeout();
  void set_allocated_timeout(::PROTOBUF_NAMESPACE_ID::Duration* timeout);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_timeout() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_timeout();
  public:
  void unsafe_arena_set_allocated_timeout(
      ::PROTOBUF_NAMESPACE_ID::Duration* timeout);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_timeout();

  // bool persistent = 6;
  void clear_persistent();
  bool persistent() const;
  void set_persistent(bool value);
  private:
  bool _internal_persistent() const;
  void _internal_set_persistent(bool value);
  public:

  // @@protoc_insertion_point(class_scope:onos.topo.Configurable)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::Duration* timeout_;
  bool persistent_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class MastershipState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.MastershipState) */ {
 public:
  inline MastershipState() : MastershipState(nullptr) {}
  ~MastershipState() override;
  explicit constexpr MastershipState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MastershipState(const MastershipState& from);
  MastershipState(MastershipState&& from) noexcept
    : MastershipState() {
    *this = ::std::move(from);
  }

  inline MastershipState& operator=(const MastershipState& from) {
    CopyFrom(from);
    return *this;
  }
  inline MastershipState& operator=(MastershipState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MastershipState& default_instance() {
    return *internal_default_instance();
  }
  static inline const MastershipState* internal_default_instance() {
    return reinterpret_cast<const MastershipState*>(
               &_MastershipState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MastershipState& a, MastershipState& b) {
    a.Swap(&b);
  }
  inline void Swap(MastershipState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MastershipState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MastershipState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MastershipState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MastershipState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MastershipState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MastershipState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.MastershipState";
  }
  protected:
  explicit MastershipState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodeIdFieldNumber = 2,
    kTermFieldNumber = 1,
  };
  // string node_id = 2;
  void clear_node_id();
  const std::string& node_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_node_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_node_id();
  PROTOBUF_NODISCARD std::string* release_node_id();
  void set_allocated_node_id(std::string* node_id);
  private:
  const std::string& _internal_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_node_id(const std::string& value);
  std::string* _internal_mutable_node_id();
  public:

  // uint64 term = 1;
  void clear_term();
  uint64_t term() const;
  void set_term(uint64_t value);
  private:
  uint64_t _internal_term() const;
  void _internal_set_term(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.topo.MastershipState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_id_;
  uint64_t term_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class TLSOptions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.TLSOptions) */ {
 public:
  inline TLSOptions() : TLSOptions(nullptr) {}
  ~TLSOptions() override;
  explicit constexpr TLSOptions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLSOptions(const TLSOptions& from);
  TLSOptions(TLSOptions&& from) noexcept
    : TLSOptions() {
    *this = ::std::move(from);
  }

  inline TLSOptions& operator=(const TLSOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLSOptions& operator=(TLSOptions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLSOptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLSOptions* internal_default_instance() {
    return reinterpret_cast<const TLSOptions*>(
               &_TLSOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TLSOptions& a, TLSOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(TLSOptions* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLSOptions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLSOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLSOptions>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLSOptions& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TLSOptions& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLSOptions* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.TLSOptions";
  }
  protected:
  explicit TLSOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 3,
    kCaCertFieldNumber = 4,
    kCertFieldNumber = 5,
    kInsecureFieldNumber = 1,
    kPlainFieldNumber = 2,
  };
  // string key = 3;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string ca_cert = 4;
  void clear_ca_cert();
  const std::string& ca_cert() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ca_cert(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ca_cert();
  PROTOBUF_NODISCARD std::string* release_ca_cert();
  void set_allocated_ca_cert(std::string* ca_cert);
  private:
  const std::string& _internal_ca_cert() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ca_cert(const std::string& value);
  std::string* _internal_mutable_ca_cert();
  public:

  // string cert = 5;
  void clear_cert();
  const std::string& cert() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cert(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cert();
  PROTOBUF_NODISCARD std::string* release_cert();
  void set_allocated_cert(std::string* cert);
  private:
  const std::string& _internal_cert() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cert(const std::string& value);
  std::string* _internal_mutable_cert();
  public:

  // bool insecure = 1;
  void clear_insecure();
  bool insecure() const;
  void set_insecure(bool value);
  private:
  bool _internal_insecure() const;
  void _internal_set_insecure(bool value);
  public:

  // bool plain = 2;
  void clear_plain();
  bool plain() const;
  void set_plain(bool value);
  private:
  bool _internal_plain() const;
  void _internal_set_plain(bool value);
  public:

  // @@protoc_insertion_point(class_scope:onos.topo.TLSOptions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ca_cert_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cert_;
  bool insecure_;
  bool plain_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class AdHoc_PropertiesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AdHoc_PropertiesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AdHoc_PropertiesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  AdHoc_PropertiesEntry_DoNotUse();
  explicit constexpr AdHoc_PropertiesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit AdHoc_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AdHoc_PropertiesEntry_DoNotUse& other);
  static const AdHoc_PropertiesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AdHoc_PropertiesEntry_DoNotUse*>(&_AdHoc_PropertiesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "onos.topo.AdHoc.PropertiesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "onos.topo.AdHoc.PropertiesEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class AdHoc final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.AdHoc) */ {
 public:
  inline AdHoc() : AdHoc(nullptr) {}
  ~AdHoc() override;
  explicit constexpr AdHoc(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AdHoc(const AdHoc& from);
  AdHoc(AdHoc&& from) noexcept
    : AdHoc() {
    *this = ::std::move(from);
  }

  inline AdHoc& operator=(const AdHoc& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdHoc& operator=(AdHoc&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AdHoc& default_instance() {
    return *internal_default_instance();
  }
  static inline const AdHoc* internal_default_instance() {
    return reinterpret_cast<const AdHoc*>(
               &_AdHoc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AdHoc& a, AdHoc& b) {
    a.Swap(&b);
  }
  inline void Swap(AdHoc* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AdHoc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AdHoc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AdHoc>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AdHoc& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AdHoc& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdHoc* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.AdHoc";
  }
  protected:
  explicit AdHoc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPropertiesFieldNumber = 1,
  };
  // map<string, string> properties = 1;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_properties() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_properties();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      properties() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_properties();

  // @@protoc_insertion_point(class_scope:onos.topo.AdHoc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AdHoc_PropertiesEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> properties_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class ProtocolState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.ProtocolState) */ {
 public:
  inline ProtocolState() : ProtocolState(nullptr) {}
  ~ProtocolState() override;
  explicit constexpr ProtocolState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProtocolState(const ProtocolState& from);
  ProtocolState(ProtocolState&& from) noexcept
    : ProtocolState() {
    *this = ::std::move(from);
  }

  inline ProtocolState& operator=(const ProtocolState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProtocolState& operator=(ProtocolState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProtocolState& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProtocolState* internal_default_instance() {
    return reinterpret_cast<const ProtocolState*>(
               &_ProtocolState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ProtocolState& a, ProtocolState& b) {
    a.Swap(&b);
  }
  inline void Swap(ProtocolState* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProtocolState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProtocolState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProtocolState>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProtocolState& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProtocolState& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProtocolState* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.ProtocolState";
  }
  protected:
  explicit ProtocolState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProtocolFieldNumber = 1,
    kConnectivityStateFieldNumber = 2,
    kChannelStateFieldNumber = 3,
    kServiceStateFieldNumber = 4,
  };
  // .onos.topo.Protocol protocol = 1;
  void clear_protocol();
  ::onos::topo::Protocol protocol() const;
  void set_protocol(::onos::topo::Protocol value);
  private:
  ::onos::topo::Protocol _internal_protocol() const;
  void _internal_set_protocol(::onos::topo::Protocol value);
  public:

  // .onos.topo.ConnectivityState connectivityState = 2;
  void clear_connectivitystate();
  ::onos::topo::ConnectivityState connectivitystate() const;
  void set_connectivitystate(::onos::topo::ConnectivityState value);
  private:
  ::onos::topo::ConnectivityState _internal_connectivitystate() const;
  void _internal_set_connectivitystate(::onos::topo::ConnectivityState value);
  public:

  // .onos.topo.ChannelState channelState = 3;
  void clear_channelstate();
  ::onos::topo::ChannelState channelstate() const;
  void set_channelstate(::onos::topo::ChannelState value);
  private:
  ::onos::topo::ChannelState _internal_channelstate() const;
  void _internal_set_channelstate(::onos::topo::ChannelState value);
  public:

  // .onos.topo.ServiceState serviceState = 4;
  void clear_servicestate();
  ::onos::topo::ServiceState servicestate() const;
  void set_servicestate(::onos::topo::ServiceState value);
  private:
  ::onos::topo::ServiceState _internal_servicestate() const;
  void _internal_set_servicestate(::onos::topo::ServiceState value);
  public:

  // @@protoc_insertion_point(class_scope:onos.topo.ProtocolState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int protocol_;
  int connectivitystate_;
  int channelstate_;
  int servicestate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fconfig_2eproto;
};
// -------------------------------------------------------------------

class Protocols final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.Protocols) */ {
 public:
  inline Protocols() : Protocols(nullptr) {}
  ~Protocols() override;
  explicit constexpr Protocols(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Protocols(const Protocols& from);
  Protocols(Protocols&& from) noexcept
    : Protocols() {
    *this = ::std::move(from);
  }

  inline Protocols& operator=(const Protocols& from) {
    CopyFrom(from);
    return *this;
  }
  inline Protocols& operator=(Protocols&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Protocols& default_instance() {
    return *internal_default_instance();
  }
  static inline const Protocols* internal_default_instance() {
    return reinterpret_cast<const Protocols*>(
               &_Protocols_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Protocols& a, Protocols& b) {
    a.Swap(&b);
  }
  inline void Swap(Protocols* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Protocols* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Protocols* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Protocols>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Protocols& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Protocols& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Protocols* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.Protocols";
  }
  protected:
  explicit Protocols(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // repeated .onos.topo.ProtocolState state = 1;
  int state_size() const;
  private:
  int _internal_state_size() const;
  public:
  void clear_state();
  ::onos::topo::ProtocolState* mutable_state(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::ProtocolState >*
      mutable_state();
  private:
  const ::onos::topo::ProtocolState& _internal_state(int index) const;
  ::onos::topo::ProtocolState* _internal_add_state();
  public:
  const ::onos::topo::ProtocolState& state(int index) const;
  ::onos::topo::ProtocolState* add_state();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::ProtocolState >&
      state() const;

  // @@protoc_insertion_point(class_scope:onos.topo.Protocols)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::ProtocolState > state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fconfig_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Asset

// string name = 1;
inline void Asset::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Asset::name() const {
  // @@protoc_insertion_point(field_get:onos.topo.Asset.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Asset::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.topo.Asset.name)
}
inline std::string* Asset::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:onos.topo.Asset.name)
  return _s;
}
inline const std::string& Asset::_internal_name() const {
  return name_.Get();
}
inline void Asset::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Asset::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Asset::release_name() {
  // @@protoc_insertion_point(field_release:onos.topo.Asset.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Asset::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.topo.Asset.name)
}

// string manufacturer = 2;
inline void Asset::clear_manufacturer() {
  manufacturer_.ClearToEmpty();
}
inline const std::string& Asset::manufacturer() const {
  // @@protoc_insertion_point(field_get:onos.topo.Asset.manufacturer)
  return _internal_manufacturer();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Asset::set_manufacturer(ArgT0&& arg0, ArgT... args) {
 
 manufacturer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.topo.Asset.manufacturer)
}
inline std::string* Asset::mutable_manufacturer() {
  std::string* _s = _internal_mutable_manufacturer();
  // @@protoc_insertion_point(field_mutable:onos.topo.Asset.manufacturer)
  return _s;
}
inline const std::string& Asset::_internal_manufacturer() const {
  return manufacturer_.Get();
}
inline void Asset::_internal_set_manufacturer(const std::string& value) {
  
  manufacturer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Asset::_internal_mutable_manufacturer() {
  
  return manufacturer_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Asset::release_manufacturer() {
  // @@protoc_insertion_point(field_release:onos.topo.Asset.manufacturer)
  return manufacturer_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Asset::set_allocated_manufacturer(std::string* manufacturer) {
  if (manufacturer != nullptr) {
    
  } else {
    
  }
  manufacturer_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), manufacturer,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (manufacturer_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    manufacturer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.topo.Asset.manufacturer)
}

// string model = 3;
inline void Asset::clear_model() {
  model_.ClearToEmpty();
}
inline const std::string& Asset::model() const {
  // @@protoc_insertion_point(field_get:onos.topo.Asset.model)
  return _internal_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Asset::set_model(ArgT0&& arg0, ArgT... args) {
 
 model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.topo.Asset.model)
}
inline std::string* Asset::mutable_model() {
  std::string* _s = _internal_mutable_model();
  // @@protoc_insertion_point(field_mutable:onos.topo.Asset.model)
  return _s;
}
inline const std::string& Asset::_internal_model() const {
  return model_.Get();
}
inline void Asset::_internal_set_model(const std::string& value) {
  
  model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Asset::_internal_mutable_model() {
  
  return model_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Asset::release_model() {
  // @@protoc_insertion_point(field_release:onos.topo.Asset.model)
  return model_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Asset::set_allocated_model(std::string* model) {
  if (model != nullptr) {
    
  } else {
    
  }
  model_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.topo.Asset.model)
}

// string serial = 4;
inline void Asset::clear_serial() {
  serial_.ClearToEmpty();
}
inline const std::string& Asset::serial() const {
  // @@protoc_insertion_point(field_get:onos.topo.Asset.serial)
  return _internal_serial();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Asset::set_serial(ArgT0&& arg0, ArgT... args) {
 
 serial_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.topo.Asset.serial)
}
inline std::string* Asset::mutable_serial() {
  std::string* _s = _internal_mutable_serial();
  // @@protoc_insertion_point(field_mutable:onos.topo.Asset.serial)
  return _s;
}
inline const std::string& Asset::_internal_serial() const {
  return serial_.Get();
}
inline void Asset::_internal_set_serial(const std::string& value) {
  
  serial_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Asset::_internal_mutable_serial() {
  
  return serial_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Asset::release_serial() {
  // @@protoc_insertion_point(field_release:onos.topo.Asset.serial)
  return serial_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Asset::set_allocated_serial(std::string* serial) {
  if (serial != nullptr) {
    
  } else {
    
  }
  serial_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), serial,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (serial_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    serial_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.topo.Asset.serial)
}

// string asset = 5;
inline void Asset::clear_asset() {
  asset_.ClearToEmpty();
}
inline const std::string& Asset::asset() const {
  // @@protoc_insertion_point(field_get:onos.topo.Asset.asset)
  return _internal_asset();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Asset::set_asset(ArgT0&& arg0, ArgT... args) {
 
 asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.topo.Asset.asset)
}
inline std::string* Asset::mutable_asset() {
  std::string* _s = _internal_mutable_asset();
  // @@protoc_insertion_point(field_mutable:onos.topo.Asset.asset)
  return _s;
}
inline const std::string& Asset::_internal_asset() const {
  return asset_.Get();
}
inline void Asset::_internal_set_asset(const std::string& value) {
  
  asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Asset::_internal_mutable_asset() {
  
  return asset_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Asset::release_asset() {
  // @@protoc_insertion_point(field_release:onos.topo.Asset.asset)
  return asset_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Asset::set_allocated_asset(std::string* asset) {
  if (asset != nullptr) {
    
  } else {
    
  }
  asset_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), asset,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (asset_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    asset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.topo.Asset.asset)
}

// string sw_version = 6;
inline void Asset::clear_sw_version() {
  sw_version_.ClearToEmpty();
}
inline const std::string& Asset::sw_version() const {
  // @@protoc_insertion_point(field_get:onos.topo.Asset.sw_version)
  return _internal_sw_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Asset::set_sw_version(ArgT0&& arg0, ArgT... args) {
 
 sw_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.topo.Asset.sw_version)
}
inline std::string* Asset::mutable_sw_version() {
  std::string* _s = _internal_mutable_sw_version();
  // @@protoc_insertion_point(field_mutable:onos.topo.Asset.sw_version)
  return _s;
}
inline const std::string& Asset::_internal_sw_version() const {
  return sw_version_.Get();
}
inline void Asset::_internal_set_sw_version(const std::string& value) {
  
  sw_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Asset::_internal_mutable_sw_version() {
  
  return sw_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Asset::release_sw_version() {
  // @@protoc_insertion_point(field_release:onos.topo.Asset.sw_version)
  return sw_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Asset::set_allocated_sw_version(std::string* sw_version) {
  if (sw_version != nullptr) {
    
  } else {
    
  }
  sw_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sw_version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sw_version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sw_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.topo.Asset.sw_version)
}

// string role = 8;
inline void Asset::clear_role() {
  role_.ClearToEmpty();
}
inline const std::string& Asset::role() const {
  // @@protoc_insertion_point(field_get:onos.topo.Asset.role)
  return _internal_role();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Asset::set_role(ArgT0&& arg0, ArgT... args) {
 
 role_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.topo.Asset.role)
}
inline std::string* Asset::mutable_role() {
  std::string* _s = _internal_mutable_role();
  // @@protoc_insertion_point(field_mutable:onos.topo.Asset.role)
  return _s;
}
inline const std::string& Asset::_internal_role() const {
  return role_.Get();
}
inline void Asset::_internal_set_role(const std::string& value) {
  
  role_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Asset::_internal_mutable_role() {
  
  return role_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Asset::release_role() {
  // @@protoc_insertion_point(field_release:onos.topo.Asset.role)
  return role_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Asset::set_allocated_role(std::string* role) {
  if (role != nullptr) {
    
  } else {
    
  }
  role_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), role,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (role_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.topo.Asset.role)
}

// -------------------------------------------------------------------

// Configurable

// string type = 1;
inline void Configurable::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& Configurable::type() const {
  // @@protoc_insertion_point(field_get:onos.topo.Configurable.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Configurable::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.topo.Configurable.type)
}
inline std::string* Configurable::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:onos.topo.Configurable.type)
  return _s;
}
inline const std::string& Configurable::_internal_type() const {
  return type_.Get();
}
inline void Configurable::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Configurable::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Configurable::release_type() {
  // @@protoc_insertion_point(field_release:onos.topo.Configurable.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Configurable::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.topo.Configurable.type)
}

// string address = 2;
inline void Configurable::clear_address() {
  address_.ClearToEmpty();
}
inline const std::string& Configurable::address() const {
  // @@protoc_insertion_point(field_get:onos.topo.Configurable.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Configurable::set_address(ArgT0&& arg0, ArgT... args) {
 
 address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.topo.Configurable.address)
}
inline std::string* Configurable::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:onos.topo.Configurable.address)
  return _s;
}
inline const std::string& Configurable::_internal_address() const {
  return address_.Get();
}
inline void Configurable::_internal_set_address(const std::string& value) {
  
  address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Configurable::_internal_mutable_address() {
  
  return address_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Configurable::release_address() {
  // @@protoc_insertion_point(field_release:onos.topo.Configurable.address)
  return address_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Configurable::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  address_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), address,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (address_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.topo.Configurable.address)
}

// string target = 3;
inline void Configurable::clear_target() {
  target_.ClearToEmpty();
}
inline const std::string& Configurable::target() const {
  // @@protoc_insertion_point(field_get:onos.topo.Configurable.target)
  return _internal_target();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Configurable::set_target(ArgT0&& arg0, ArgT... args) {
 
 target_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.topo.Configurable.target)
}
inline std::string* Configurable::mutable_target() {
  std::string* _s = _internal_mutable_target();
  // @@protoc_insertion_point(field_mutable:onos.topo.Configurable.target)
  return _s;
}
inline const std::string& Configurable::_internal_target() const {
  return target_.Get();
}
inline void Configurable::_internal_set_target(const std::string& value) {
  
  target_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Configurable::_internal_mutable_target() {
  
  return target_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Configurable::release_target() {
  // @@protoc_insertion_point(field_release:onos.topo.Configurable.target)
  return target_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Configurable::set_allocated_target(std::string* target) {
  if (target != nullptr) {
    
  } else {
    
  }
  target_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (target_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.topo.Configurable.target)
}

// string version = 4;
inline void Configurable::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& Configurable::version() const {
  // @@protoc_insertion_point(field_get:onos.topo.Configurable.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Configurable::set_version(ArgT0&& arg0, ArgT... args) {
 
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.topo.Configurable.version)
}
inline std::string* Configurable::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:onos.topo.Configurable.version)
  return _s;
}
inline const std::string& Configurable::_internal_version() const {
  return version_.Get();
}
inline void Configurable::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Configurable::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Configurable::release_version() {
  // @@protoc_insertion_point(field_release:onos.topo.Configurable.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Configurable::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.topo.Configurable.version)
}

// .google.protobuf.Duration timeout = 5 [(.gogoproto.stdduration) = true];
inline bool Configurable::_internal_has_timeout() const {
  return this != internal_default_instance() && timeout_ != nullptr;
}
inline bool Configurable::has_timeout() const {
  return _internal_has_timeout();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& Configurable::_internal_timeout() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = timeout_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& Configurable::timeout() const {
  // @@protoc_insertion_point(field_get:onos.topo.Configurable.timeout)
  return _internal_timeout();
}
inline void Configurable::unsafe_arena_set_allocated_timeout(
    ::PROTOBUF_NAMESPACE_ID::Duration* timeout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timeout_);
  }
  timeout_ = timeout;
  if (timeout) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.topo.Configurable.timeout)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Configurable::release_timeout() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = timeout_;
  timeout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Configurable::unsafe_arena_release_timeout() {
  // @@protoc_insertion_point(field_release:onos.topo.Configurable.timeout)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = timeout_;
  timeout_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Configurable::_internal_mutable_timeout() {
  
  if (timeout_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    timeout_ = p;
  }
  return timeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* Configurable::mutable_timeout() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_timeout();
  // @@protoc_insertion_point(field_mutable:onos.topo.Configurable.timeout)
  return _msg;
}
inline void Configurable::set_allocated_timeout(::PROTOBUF_NAMESPACE_ID::Duration* timeout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(timeout_);
  }
  if (timeout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(timeout));
    if (message_arena != submessage_arena) {
      timeout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, timeout, submessage_arena);
    }
    
  } else {
    
  }
  timeout_ = timeout;
  // @@protoc_insertion_point(field_set_allocated:onos.topo.Configurable.timeout)
}

// bool persistent = 6;
inline void Configurable::clear_persistent() {
  persistent_ = false;
}
inline bool Configurable::_internal_persistent() const {
  return persistent_;
}
inline bool Configurable::persistent() const {
  // @@protoc_insertion_point(field_get:onos.topo.Configurable.persistent)
  return _internal_persistent();
}
inline void Configurable::_internal_set_persistent(bool value) {
  
  persistent_ = value;
}
inline void Configurable::set_persistent(bool value) {
  _internal_set_persistent(value);
  // @@protoc_insertion_point(field_set:onos.topo.Configurable.persistent)
}

// -------------------------------------------------------------------

// MastershipState

// uint64 term = 1;
inline void MastershipState::clear_term() {
  term_ = uint64_t{0u};
}
inline uint64_t MastershipState::_internal_term() const {
  return term_;
}
inline uint64_t MastershipState::term() const {
  // @@protoc_insertion_point(field_get:onos.topo.MastershipState.term)
  return _internal_term();
}
inline void MastershipState::_internal_set_term(uint64_t value) {
  
  term_ = value;
}
inline void MastershipState::set_term(uint64_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:onos.topo.MastershipState.term)
}

// string node_id = 2;
inline void MastershipState::clear_node_id() {
  node_id_.ClearToEmpty();
}
inline const std::string& MastershipState::node_id() const {
  // @@protoc_insertion_point(field_get:onos.topo.MastershipState.node_id)
  return _internal_node_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MastershipState::set_node_id(ArgT0&& arg0, ArgT... args) {
 
 node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.topo.MastershipState.node_id)
}
inline std::string* MastershipState::mutable_node_id() {
  std::string* _s = _internal_mutable_node_id();
  // @@protoc_insertion_point(field_mutable:onos.topo.MastershipState.node_id)
  return _s;
}
inline const std::string& MastershipState::_internal_node_id() const {
  return node_id_.Get();
}
inline void MastershipState::_internal_set_node_id(const std::string& value) {
  
  node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MastershipState::_internal_mutable_node_id() {
  
  return node_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MastershipState::release_node_id() {
  // @@protoc_insertion_point(field_release:onos.topo.MastershipState.node_id)
  return node_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MastershipState::set_allocated_node_id(std::string* node_id) {
  if (node_id != nullptr) {
    
  } else {
    
  }
  node_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (node_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.topo.MastershipState.node_id)
}

// -------------------------------------------------------------------

// TLSOptions

// bool insecure = 1;
inline void TLSOptions::clear_insecure() {
  insecure_ = false;
}
inline bool TLSOptions::_internal_insecure() const {
  return insecure_;
}
inline bool TLSOptions::insecure() const {
  // @@protoc_insertion_point(field_get:onos.topo.TLSOptions.insecure)
  return _internal_insecure();
}
inline void TLSOptions::_internal_set_insecure(bool value) {
  
  insecure_ = value;
}
inline void TLSOptions::set_insecure(bool value) {
  _internal_set_insecure(value);
  // @@protoc_insertion_point(field_set:onos.topo.TLSOptions.insecure)
}

// bool plain = 2;
inline void TLSOptions::clear_plain() {
  plain_ = false;
}
inline bool TLSOptions::_internal_plain() const {
  return plain_;
}
inline bool TLSOptions::plain() const {
  // @@protoc_insertion_point(field_get:onos.topo.TLSOptions.plain)
  return _internal_plain();
}
inline void TLSOptions::_internal_set_plain(bool value) {
  
  plain_ = value;
}
inline void TLSOptions::set_plain(bool value) {
  _internal_set_plain(value);
  // @@protoc_insertion_point(field_set:onos.topo.TLSOptions.plain)
}

// string key = 3;
inline void TLSOptions::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& TLSOptions::key() const {
  // @@protoc_insertion_point(field_get:onos.topo.TLSOptions.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TLSOptions::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.topo.TLSOptions.key)
}
inline std::string* TLSOptions::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:onos.topo.TLSOptions.key)
  return _s;
}
inline const std::string& TLSOptions::_internal_key() const {
  return key_.Get();
}
inline void TLSOptions::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TLSOptions::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TLSOptions::release_key() {
  // @@protoc_insertion_point(field_release:onos.topo.TLSOptions.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TLSOptions::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.topo.TLSOptions.key)
}

// string ca_cert = 4;
inline void TLSOptions::clear_ca_cert() {
  ca_cert_.ClearToEmpty();
}
inline const std::string& TLSOptions::ca_cert() const {
  // @@protoc_insertion_point(field_get:onos.topo.TLSOptions.ca_cert)
  return _internal_ca_cert();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TLSOptions::set_ca_cert(ArgT0&& arg0, ArgT... args) {
 
 ca_cert_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.topo.TLSOptions.ca_cert)
}
inline std::string* TLSOptions::mutable_ca_cert() {
  std::string* _s = _internal_mutable_ca_cert();
  // @@protoc_insertion_point(field_mutable:onos.topo.TLSOptions.ca_cert)
  return _s;
}
inline const std::string& TLSOptions::_internal_ca_cert() const {
  return ca_cert_.Get();
}
inline void TLSOptions::_internal_set_ca_cert(const std::string& value) {
  
  ca_cert_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TLSOptions::_internal_mutable_ca_cert() {
  
  return ca_cert_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TLSOptions::release_ca_cert() {
  // @@protoc_insertion_point(field_release:onos.topo.TLSOptions.ca_cert)
  return ca_cert_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TLSOptions::set_allocated_ca_cert(std::string* ca_cert) {
  if (ca_cert != nullptr) {
    
  } else {
    
  }
  ca_cert_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ca_cert,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ca_cert_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ca_cert_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.topo.TLSOptions.ca_cert)
}

// string cert = 5;
inline void TLSOptions::clear_cert() {
  cert_.ClearToEmpty();
}
inline const std::string& TLSOptions::cert() const {
  // @@protoc_insertion_point(field_get:onos.topo.TLSOptions.cert)
  return _internal_cert();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TLSOptions::set_cert(ArgT0&& arg0, ArgT... args) {
 
 cert_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.topo.TLSOptions.cert)
}
inline std::string* TLSOptions::mutable_cert() {
  std::string* _s = _internal_mutable_cert();
  // @@protoc_insertion_point(field_mutable:onos.topo.TLSOptions.cert)
  return _s;
}
inline const std::string& TLSOptions::_internal_cert() const {
  return cert_.Get();
}
inline void TLSOptions::_internal_set_cert(const std::string& value) {
  
  cert_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TLSOptions::_internal_mutable_cert() {
  
  return cert_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TLSOptions::release_cert() {
  // @@protoc_insertion_point(field_release:onos.topo.TLSOptions.cert)
  return cert_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TLSOptions::set_allocated_cert(std::string* cert) {
  if (cert != nullptr) {
    
  } else {
    
  }
  cert_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cert,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cert_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    cert_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.topo.TLSOptions.cert)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AdHoc

// map<string, string> properties = 1;
inline int AdHoc::_internal_properties_size() const {
  return properties_.size();
}
inline int AdHoc::properties_size() const {
  return _internal_properties_size();
}
inline void AdHoc::clear_properties() {
  properties_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AdHoc::_internal_properties() const {
  return properties_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AdHoc::properties() const {
  // @@protoc_insertion_point(field_map:onos.topo.AdHoc.properties)
  return _internal_properties();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AdHoc::_internal_mutable_properties() {
  return properties_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AdHoc::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_map:onos.topo.AdHoc.properties)
  return _internal_mutable_properties();
}

// -------------------------------------------------------------------

// ProtocolState

// .onos.topo.Protocol protocol = 1;
inline void ProtocolState::clear_protocol() {
  protocol_ = 0;
}
inline ::onos::topo::Protocol ProtocolState::_internal_protocol() const {
  return static_cast< ::onos::topo::Protocol >(protocol_);
}
inline ::onos::topo::Protocol ProtocolState::protocol() const {
  // @@protoc_insertion_point(field_get:onos.topo.ProtocolState.protocol)
  return _internal_protocol();
}
inline void ProtocolState::_internal_set_protocol(::onos::topo::Protocol value) {
  
  protocol_ = value;
}
inline void ProtocolState::set_protocol(::onos::topo::Protocol value) {
  _internal_set_protocol(value);
  // @@protoc_insertion_point(field_set:onos.topo.ProtocolState.protocol)
}

// .onos.topo.ConnectivityState connectivityState = 2;
inline void ProtocolState::clear_connectivitystate() {
  connectivitystate_ = 0;
}
inline ::onos::topo::ConnectivityState ProtocolState::_internal_connectivitystate() const {
  return static_cast< ::onos::topo::ConnectivityState >(connectivitystate_);
}
inline ::onos::topo::ConnectivityState ProtocolState::connectivitystate() const {
  // @@protoc_insertion_point(field_get:onos.topo.ProtocolState.connectivityState)
  return _internal_connectivitystate();
}
inline void ProtocolState::_internal_set_connectivitystate(::onos::topo::ConnectivityState value) {
  
  connectivitystate_ = value;
}
inline void ProtocolState::set_connectivitystate(::onos::topo::ConnectivityState value) {
  _internal_set_connectivitystate(value);
  // @@protoc_insertion_point(field_set:onos.topo.ProtocolState.connectivityState)
}

// .onos.topo.ChannelState channelState = 3;
inline void ProtocolState::clear_channelstate() {
  channelstate_ = 0;
}
inline ::onos::topo::ChannelState ProtocolState::_internal_channelstate() const {
  return static_cast< ::onos::topo::ChannelState >(channelstate_);
}
inline ::onos::topo::ChannelState ProtocolState::channelstate() const {
  // @@protoc_insertion_point(field_get:onos.topo.ProtocolState.channelState)
  return _internal_channelstate();
}
inline void ProtocolState::_internal_set_channelstate(::onos::topo::ChannelState value) {
  
  channelstate_ = value;
}
inline void ProtocolState::set_channelstate(::onos::topo::ChannelState value) {
  _internal_set_channelstate(value);
  // @@protoc_insertion_point(field_set:onos.topo.ProtocolState.channelState)
}

// .onos.topo.ServiceState serviceState = 4;
inline void ProtocolState::clear_servicestate() {
  servicestate_ = 0;
}
inline ::onos::topo::ServiceState ProtocolState::_internal_servicestate() const {
  return static_cast< ::onos::topo::ServiceState >(servicestate_);
}
inline ::onos::topo::ServiceState ProtocolState::servicestate() const {
  // @@protoc_insertion_point(field_get:onos.topo.ProtocolState.serviceState)
  return _internal_servicestate();
}
inline void ProtocolState::_internal_set_servicestate(::onos::topo::ServiceState value) {
  
  servicestate_ = value;
}
inline void ProtocolState::set_servicestate(::onos::topo::ServiceState value) {
  _internal_set_servicestate(value);
  // @@protoc_insertion_point(field_set:onos.topo.ProtocolState.serviceState)
}

// -------------------------------------------------------------------

// Protocols

// repeated .onos.topo.ProtocolState state = 1;
inline int Protocols::_internal_state_size() const {
  return state_.size();
}
inline int Protocols::state_size() const {
  return _internal_state_size();
}
inline void Protocols::clear_state() {
  state_.Clear();
}
inline ::onos::topo::ProtocolState* Protocols::mutable_state(int index) {
  // @@protoc_insertion_point(field_mutable:onos.topo.Protocols.state)
  return state_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::ProtocolState >*
Protocols::mutable_state() {
  // @@protoc_insertion_point(field_mutable_list:onos.topo.Protocols.state)
  return &state_;
}
inline const ::onos::topo::ProtocolState& Protocols::_internal_state(int index) const {
  return state_.Get(index);
}
inline const ::onos::topo::ProtocolState& Protocols::state(int index) const {
  // @@protoc_insertion_point(field_get:onos.topo.Protocols.state)
  return _internal_state(index);
}
inline ::onos::topo::ProtocolState* Protocols::_internal_add_state() {
  return state_.Add();
}
inline ::onos::topo::ProtocolState* Protocols::add_state() {
  ::onos::topo::ProtocolState* _add = _internal_add_state();
  // @@protoc_insertion_point(field_add:onos.topo.Protocols.state)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::ProtocolState >&
Protocols::state() const {
  // @@protoc_insertion_point(field_list:onos.topo.Protocols.state)
  return state_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace topo
}  // namespace onos

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::onos::topo::Protocol> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::onos::topo::Protocol>() {
  return ::onos::topo::Protocol_descriptor();
}
template <> struct is_proto_enum< ::onos::topo::ConnectivityState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::onos::topo::ConnectivityState>() {
  return ::onos::topo::ConnectivityState_descriptor();
}
template <> struct is_proto_enum< ::onos::topo::ChannelState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::onos::topo::ChannelState>() {
  return ::onos::topo::ChannelState_descriptor();
}
template <> struct is_proto_enum< ::onos::topo::ServiceState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::onos::topo::ServiceState>() {
  return ::onos::topo::ServiceState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_onos_2ftopo_2fconfig_2eproto
