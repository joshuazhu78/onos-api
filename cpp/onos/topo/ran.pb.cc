// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onos/topo/ran.proto

#include "onos/topo/ran.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace onos {
namespace topo {
constexpr Location::Location(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : lat_(0)
  , lng_(0)
  , _oneof_case_{}{}
struct LocationDefaultTypeInternal {
  constexpr LocationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LocationDefaultTypeInternal() {}
  union {
    Location _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LocationDefaultTypeInternal _Location_default_instance_;
constexpr Wgs84Location::Wgs84Location(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : latitude_deg_(0)
  , longitude_deg_(0)
  , altitude_m_(0){}
struct Wgs84LocationDefaultTypeInternal {
  constexpr Wgs84LocationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Wgs84LocationDefaultTypeInternal() {}
  union {
    Wgs84Location _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Wgs84LocationDefaultTypeInternal _Wgs84Location_default_instance_;
constexpr CartesianLocation::CartesianLocation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_m_(0)
  , y_m_(0)
  , z_m_(0){}
struct CartesianLocationDefaultTypeInternal {
  constexpr CartesianLocationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CartesianLocationDefaultTypeInternal() {}
  union {
    CartesianLocation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CartesianLocationDefaultTypeInternal _CartesianLocation_default_instance_;
constexpr AzElOrientation::AzElOrientation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : azimuth_deg_(0)
  , elevation_deg_(0)
  , rotation_deg_(0){}
struct AzElOrientationDefaultTypeInternal {
  constexpr AzElOrientationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AzElOrientationDefaultTypeInternal() {}
  union {
    AzElOrientation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AzElOrientationDefaultTypeInternal _AzElOrientation_default_instance_;
constexpr YprOrientation::YprOrientation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : yaw_deg_(0)
  , pitch_deg_(0)
  , roll_deg_(0){}
struct YprOrientationDefaultTypeInternal {
  constexpr YprOrientationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~YprOrientationDefaultTypeInternal() {}
  union {
    YprOrientation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT YprOrientationDefaultTypeInternal _YprOrientation_default_instance_;
constexpr Orientation::Orientation(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct OrientationDefaultTypeInternal {
  constexpr OrientationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OrientationDefaultTypeInternal() {}
  union {
    Orientation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OrientationDefaultTypeInternal _Orientation_default_instance_;
constexpr Waypoint::Waypoint(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : time_(nullptr)
  , location_(nullptr){}
struct WaypointDefaultTypeInternal {
  constexpr WaypointDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WaypointDefaultTypeInternal() {}
  union {
    Waypoint _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WaypointDefaultTypeInternal _Waypoint_default_instance_;
constexpr Waypoints::Waypoints(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : waypoint_(){}
struct WaypointsDefaultTypeInternal {
  constexpr WaypointsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WaypointsDefaultTypeInternal() {}
  union {
    Waypoints _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WaypointsDefaultTypeInternal _Waypoints_default_instance_;
constexpr OrbitData::OrbitData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : epoch_(nullptr)
  , inclination_deg_(0)
  , raan_deg_(0)
  , e_(0)
  , argument_deg_(0)
  , anomaly_deg_(0)
  , mean_motion_(0){}
struct OrbitDataDefaultTypeInternal {
  constexpr OrbitDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~OrbitDataDefaultTypeInternal() {}
  union {
    OrbitData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT OrbitDataDefaultTypeInternal _OrbitData_default_instance_;
constexpr Motion::Motion(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct MotionDefaultTypeInternal {
  constexpr MotionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MotionDefaultTypeInternal() {}
  union {
    Motion _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MotionDefaultTypeInternal _Motion_default_instance_;
constexpr Coverage::Coverage(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : height_(0)
  , arc_width_(0)
  , azimuth_(0)
  , tilt_(0){}
struct CoverageDefaultTypeInternal {
  constexpr CoverageDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CoverageDefaultTypeInternal() {}
  union {
    Coverage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CoverageDefaultTypeInternal _Coverage_default_instance_;
constexpr E2Node_ServiceModelsEntry_DoNotUse::E2Node_ServiceModelsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct E2Node_ServiceModelsEntry_DoNotUseDefaultTypeInternal {
  constexpr E2Node_ServiceModelsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~E2Node_ServiceModelsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    E2Node_ServiceModelsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT E2Node_ServiceModelsEntry_DoNotUseDefaultTypeInternal _E2Node_ServiceModelsEntry_DoNotUse_default_instance_;
constexpr E2Node::E2Node(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : service_models_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct E2NodeDefaultTypeInternal {
  constexpr E2NodeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~E2NodeDefaultTypeInternal() {}
  union {
    E2Node _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT E2NodeDefaultTypeInternal _E2Node_default_instance_;
constexpr E2NodeConfig::E2NodeConfig(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : connections_()
  , version_(uint64_t{0u}){}
struct E2NodeConfigDefaultTypeInternal {
  constexpr E2NodeConfigDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~E2NodeConfigDefaultTypeInternal() {}
  union {
    E2NodeConfig _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT E2NodeConfigDefaultTypeInternal _E2NodeConfig_default_instance_;
constexpr Lease::Lease(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : expiration_(nullptr){}
struct LeaseDefaultTypeInternal {
  constexpr LeaseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LeaseDefaultTypeInternal() {}
  union {
    Lease _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LeaseDefaultTypeInternal _Lease_default_instance_;
constexpr Interface::Interface(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)

  , port_(0u){}
struct InterfaceDefaultTypeInternal {
  constexpr InterfaceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InterfaceDefaultTypeInternal() {}
  union {
    Interface _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InterfaceDefaultTypeInternal _Interface_default_instance_;
constexpr E2TInfo::E2TInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : interfaces_(){}
struct E2TInfoDefaultTypeInternal {
  constexpr E2TInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~E2TInfoDefaultTypeInternal() {}
  union {
    E2TInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT E2TInfoDefaultTypeInternal _E2TInfo_default_instance_;
constexpr XAppInfo::XAppInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : interfaces_()
  , a1_policy_types_(){}
struct XAppInfoDefaultTypeInternal {
  constexpr XAppInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~XAppInfoDefaultTypeInternal() {}
  union {
    XAppInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT XAppInfoDefaultTypeInternal _XAppInfo_default_instance_;
constexpr A1PolicyType::A1PolicyType(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct A1PolicyTypeDefaultTypeInternal {
  constexpr A1PolicyTypeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~A1PolicyTypeDefaultTypeInternal() {}
  union {
    A1PolicyType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT A1PolicyTypeDefaultTypeInternal _A1PolicyType_default_instance_;
constexpr A1TInfo::A1TInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : interfaces_(){}
struct A1TInfoDefaultTypeInternal {
  constexpr A1TInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~A1TInfoDefaultTypeInternal() {}
  union {
    A1TInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT A1TInfoDefaultTypeInternal _A1TInfo_default_instance_;
constexpr CellGlobalID::CellGlobalID(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)
{}
struct CellGlobalIDDefaultTypeInternal {
  constexpr CellGlobalIDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CellGlobalIDDefaultTypeInternal() {}
  union {
    CellGlobalID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CellGlobalIDDefaultTypeInternal _CellGlobalID_default_instance_;
constexpr NeighborCellID::NeighborCellID(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : plmn_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cell_global_id_(nullptr){}
struct NeighborCellIDDefaultTypeInternal {
  constexpr NeighborCellIDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NeighborCellIDDefaultTypeInternal() {}
  union {
    NeighborCellID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NeighborCellIDDefaultTypeInternal _NeighborCellID_default_instance_;
constexpr E2Cell_KpiReportsEntry_DoNotUse::E2Cell_KpiReportsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct E2Cell_KpiReportsEntry_DoNotUseDefaultTypeInternal {
  constexpr E2Cell_KpiReportsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~E2Cell_KpiReportsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    E2Cell_KpiReportsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT E2Cell_KpiReportsEntry_DoNotUseDefaultTypeInternal _E2Cell_KpiReportsEntry_DoNotUse_default_instance_;
constexpr E2Cell::E2Cell(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : kpi_reports_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , neighbor_cell_ids_()
  , cell_object_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cell_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cell_global_id_(nullptr)
  , antenna_count_(0u)
  , arfcn_(0u)
  , pci_(0u){}
struct E2CellDefaultTypeInternal {
  constexpr E2CellDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~E2CellDefaultTypeInternal() {}
  union {
    E2Cell _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT E2CellDefaultTypeInternal _E2Cell_default_instance_;
constexpr ServiceModelInfo::ServiceModelInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ran_functions_()
  , ranfunctionids_()
  , _ranfunctionids_cached_byte_size_(0)
  , oid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ServiceModelInfoDefaultTypeInternal {
  constexpr ServiceModelInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServiceModelInfoDefaultTypeInternal() {}
  union {
    ServiceModelInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServiceModelInfoDefaultTypeInternal _ServiceModelInfo_default_instance_;
constexpr RCRanFunction::RCRanFunction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : report_styles_()
  , insert_styles_()
  , event_trigger_styles_()
  , policy_styles_()
  , control_styles_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct RCRanFunctionDefaultTypeInternal {
  constexpr RCRanFunctionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RCRanFunctionDefaultTypeInternal() {}
  union {
    RCRanFunction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RCRanFunctionDefaultTypeInternal _RCRanFunction_default_instance_;
constexpr MHORanFunction::MHORanFunction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : report_styles_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct MHORanFunctionDefaultTypeInternal {
  constexpr MHORanFunctionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MHORanFunctionDefaultTypeInternal() {}
  union {
    MHORanFunction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MHORanFunctionDefaultTypeInternal _MHORanFunction_default_instance_;
constexpr KPMRanFunction::KPMRanFunction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : report_styles_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct KPMRanFunctionDefaultTypeInternal {
  constexpr KPMRanFunctionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KPMRanFunctionDefaultTypeInternal() {}
  union {
    KPMRanFunction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KPMRanFunctionDefaultTypeInternal _KPMRanFunction_default_instance_;
constexpr RSMRanFunction::RSMRanFunction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ric_slicing_node_capability_list_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct RSMRanFunctionDefaultTypeInternal {
  constexpr RSMRanFunctionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RSMRanFunctionDefaultTypeInternal() {}
  union {
    RSMRanFunction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RSMRanFunctionDefaultTypeInternal _RSMRanFunction_default_instance_;
constexpr RCEventTriggerStyle::RCEventTriggerStyle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)
  , format_type_(0){}
struct RCEventTriggerStyleDefaultTypeInternal {
  constexpr RCEventTriggerStyleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RCEventTriggerStyleDefaultTypeInternal() {}
  union {
    RCEventTriggerStyle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RCEventTriggerStyleDefaultTypeInternal _RCEventTriggerStyle_default_instance_;
constexpr RCReportStyle::RCReportStyle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ran_parameters_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0){}
struct RCReportStyleDefaultTypeInternal {
  constexpr RCReportStyleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RCReportStyleDefaultTypeInternal() {}
  union {
    RCReportStyle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RCReportStyleDefaultTypeInternal _RCReportStyle_default_instance_;
constexpr RCInsertStyle::RCInsertStyle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : insert_indications_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0){}
struct RCInsertStyleDefaultTypeInternal {
  constexpr RCInsertStyleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RCInsertStyleDefaultTypeInternal() {}
  union {
    RCInsertStyle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RCInsertStyleDefaultTypeInternal _RCInsertStyle_default_instance_;
constexpr RCPolicyStyle::RCPolicyStyle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0){}
struct RCPolicyStyleDefaultTypeInternal {
  constexpr RCPolicyStyleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RCPolicyStyleDefaultTypeInternal() {}
  union {
    RCPolicyStyle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RCPolicyStyleDefaultTypeInternal _RCPolicyStyle_default_instance_;
constexpr RCControlStyle::RCControlStyle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : control_actions_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0)
  , header_format_type_(0)
  , message_format_type_(0)
  , control_outcome_format_type_(0){}
struct RCControlStyleDefaultTypeInternal {
  constexpr RCControlStyleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RCControlStyleDefaultTypeInternal() {}
  union {
    RCControlStyle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RCControlStyleDefaultTypeInternal _RCControlStyle_default_instance_;
constexpr ControlAction::ControlAction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ran_parameters_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0){}
struct ControlActionDefaultTypeInternal {
  constexpr ControlActionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlActionDefaultTypeInternal() {}
  union {
    ControlAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlActionDefaultTypeInternal _ControlAction_default_instance_;
constexpr InsertIndication::InsertIndication(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ran_parameters_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0){}
struct InsertIndicationDefaultTypeInternal {
  constexpr InsertIndicationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InsertIndicationDefaultTypeInternal() {}
  union {
    InsertIndication _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InsertIndicationDefaultTypeInternal _InsertIndication_default_instance_;
constexpr RANParameter::RANParameter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(0){}
struct RANParameterDefaultTypeInternal {
  constexpr RANParameterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RANParameterDefaultTypeInternal() {}
  union {
    RANParameter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RANParameterDefaultTypeInternal _RANParameter_default_instance_;
constexpr KPMReportStyle::KPMReportStyle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : measurements_()
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0){}
struct KPMReportStyleDefaultTypeInternal {
  constexpr KPMReportStyleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KPMReportStyleDefaultTypeInternal() {}
  union {
    KPMReportStyle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KPMReportStyleDefaultTypeInternal _KPMReportStyle_default_instance_;
constexpr MHOReportStyle::MHOReportStyle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , type_(0){}
struct MHOReportStyleDefaultTypeInternal {
  constexpr MHOReportStyleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MHOReportStyleDefaultTypeInternal() {}
  union {
    MHOReportStyle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MHOReportStyleDefaultTypeInternal _MHOReportStyle_default_instance_;
constexpr KPMMeasurement::KPMMeasurement(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct KPMMeasurementDefaultTypeInternal {
  constexpr KPMMeasurementDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~KPMMeasurementDefaultTypeInternal() {}
  union {
    KPMMeasurement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT KPMMeasurementDefaultTypeInternal _KPMMeasurement_default_instance_;
constexpr RSMNodeSlicingCapabilityItem::RSMNodeSlicingCapabilityItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : supported_config_()
  , max_number_of_slices_dl_(0)
  , max_number_of_slices_ul_(0)
  , slicing_type_(0)

  , max_number_of_ues_per_slice_(0){}
struct RSMNodeSlicingCapabilityItemDefaultTypeInternal {
  constexpr RSMNodeSlicingCapabilityItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RSMNodeSlicingCapabilityItemDefaultTypeInternal() {}
  union {
    RSMNodeSlicingCapabilityItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RSMNodeSlicingCapabilityItemDefaultTypeInternal _RSMNodeSlicingCapabilityItem_default_instance_;
constexpr RSMSupportedSlicingConfigItem::RSMSupportedSlicingConfigItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : slicing_config_type_(0)
{}
struct RSMSupportedSlicingConfigItemDefaultTypeInternal {
  constexpr RSMSupportedSlicingConfigItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RSMSupportedSlicingConfigItemDefaultTypeInternal() {}
  union {
    RSMSupportedSlicingConfigItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RSMSupportedSlicingConfigItemDefaultTypeInternal _RSMSupportedSlicingConfigItem_default_instance_;
constexpr RSMSliceItemList::RSMSliceItemList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rsm_slice_list_(){}
struct RSMSliceItemListDefaultTypeInternal {
  constexpr RSMSliceItemListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RSMSliceItemListDefaultTypeInternal() {}
  union {
    RSMSliceItemList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RSMSliceItemListDefaultTypeInternal _RSMSliceItemList_default_instance_;
constexpr RSMSlicingItem::RSMSlicingItem(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ue_id_list_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , slice_desc_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , slice_parameters_(nullptr)
  , slice_type_(0)
{}
struct RSMSlicingItemDefaultTypeInternal {
  constexpr RSMSlicingItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RSMSlicingItemDefaultTypeInternal() {}
  union {
    RSMSlicingItem _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RSMSlicingItemDefaultTypeInternal _RSMSlicingItem_default_instance_;
constexpr RSMSliceParameters::RSMSliceParameters(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : scheduler_type_(0)

  , weight_(0)
  , qos_level_(0){}
struct RSMSliceParametersDefaultTypeInternal {
  constexpr RSMSliceParametersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RSMSliceParametersDefaultTypeInternal() {}
  union {
    RSMSliceParameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RSMSliceParametersDefaultTypeInternal _RSMSliceParameters_default_instance_;
constexpr DuUeF1apID::DuUeF1apID(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(int64_t{0}){}
struct DuUeF1apIDDefaultTypeInternal {
  constexpr DuUeF1apIDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DuUeF1apIDDefaultTypeInternal() {}
  union {
    DuUeF1apID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DuUeF1apIDDefaultTypeInternal _DuUeF1apID_default_instance_;
constexpr CuUeF1apID::CuUeF1apID(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(int64_t{0}){}
struct CuUeF1apIDDefaultTypeInternal {
  constexpr CuUeF1apIDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CuUeF1apIDDefaultTypeInternal() {}
  union {
    CuUeF1apID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CuUeF1apIDDefaultTypeInternal _CuUeF1apID_default_instance_;
constexpr RanUeNgapID::RanUeNgapID(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(int64_t{0}){}
struct RanUeNgapIDDefaultTypeInternal {
  constexpr RanUeNgapIDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RanUeNgapIDDefaultTypeInternal() {}
  union {
    RanUeNgapID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RanUeNgapIDDefaultTypeInternal _RanUeNgapID_default_instance_;
constexpr EnbUeS1apID::EnbUeS1apID(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0){}
struct EnbUeS1apIDDefaultTypeInternal {
  constexpr EnbUeS1apIDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EnbUeS1apIDDefaultTypeInternal() {}
  union {
    EnbUeS1apID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EnbUeS1apIDDefaultTypeInternal _EnbUeS1apID_default_instance_;
constexpr AmfUeNgapID::AmfUeNgapID(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(int64_t{0}){}
struct AmfUeNgapIDDefaultTypeInternal {
  constexpr AmfUeNgapIDDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AmfUeNgapIDDefaultTypeInternal() {}
  union {
    AmfUeNgapID _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AmfUeNgapIDDefaultTypeInternal _AmfUeNgapID_default_instance_;
constexpr UeIdentity::UeIdentity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : du_ue_f1ap_id_(nullptr)
  , cu_ue_f1ap_id_(nullptr)
  , ran_ue_ngap_id_(nullptr)
  , enb_ue_s1ap_id_(nullptr)
  , amf_ue_ngap_id_(nullptr)
  , drb_id_(nullptr)
  , preferred_id_type_(0)
{}
struct UeIdentityDefaultTypeInternal {
  constexpr UeIdentityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UeIdentityDefaultTypeInternal() {}
  union {
    UeIdentity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UeIdentityDefaultTypeInternal _UeIdentity_default_instance_;
constexpr DrbId::DrbId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct DrbIdDefaultTypeInternal {
  constexpr DrbIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DrbIdDefaultTypeInternal() {}
  union {
    DrbId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DrbIdDefaultTypeInternal _DrbId_default_instance_;
constexpr FiveGDrbId::FiveGDrbId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : flows_map_to_drb_()
  , qfi_(nullptr)
  , value_(0){}
struct FiveGDrbIdDefaultTypeInternal {
  constexpr FiveGDrbIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FiveGDrbIdDefaultTypeInternal() {}
  union {
    FiveGDrbId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FiveGDrbIdDefaultTypeInternal _FiveGDrbId_default_instance_;
constexpr Qfi::Qfi(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0){}
struct QfiDefaultTypeInternal {
  constexpr QfiDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QfiDefaultTypeInternal() {}
  union {
    Qfi _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QfiDefaultTypeInternal _Qfi_default_instance_;
constexpr QoSflowLevelParameters::QoSflowLevelParameters(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : _oneof_case_{}{}
struct QoSflowLevelParametersDefaultTypeInternal {
  constexpr QoSflowLevelParametersDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QoSflowLevelParametersDefaultTypeInternal() {}
  union {
    QoSflowLevelParameters _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QoSflowLevelParametersDefaultTypeInternal _QoSflowLevelParameters_default_instance_;
constexpr DynamicFiveQi::DynamicFiveQi(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : priority_level_(0)
  , packet_delay_budge_(0)
  , packet_error_rate_(0){}
struct DynamicFiveQiDefaultTypeInternal {
  constexpr DynamicFiveQiDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DynamicFiveQiDefaultTypeInternal() {}
  union {
    DynamicFiveQi _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DynamicFiveQiDefaultTypeInternal _DynamicFiveQi_default_instance_;
constexpr NonDynamicFiveQi::NonDynamicFiveQi(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : five_qi_(nullptr){}
struct NonDynamicFiveQiDefaultTypeInternal {
  constexpr NonDynamicFiveQiDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NonDynamicFiveQiDefaultTypeInternal() {}
  union {
    NonDynamicFiveQi _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NonDynamicFiveQiDefaultTypeInternal _NonDynamicFiveQi_default_instance_;
constexpr FiveQi::FiveQi(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0){}
struct FiveQiDefaultTypeInternal {
  constexpr FiveQiDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FiveQiDefaultTypeInternal() {}
  union {
    FiveQi _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FiveQiDefaultTypeInternal _FiveQi_default_instance_;
constexpr FourGDrbId::FourGDrbId(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : qci_(nullptr)
  , value_(0){}
struct FourGDrbIdDefaultTypeInternal {
  constexpr FourGDrbIdDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~FourGDrbIdDefaultTypeInternal() {}
  union {
    FourGDrbId _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT FourGDrbIdDefaultTypeInternal _FourGDrbId_default_instance_;
constexpr Qci::Qci(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(0){}
struct QciDefaultTypeInternal {
  constexpr QciDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~QciDefaultTypeInternal() {}
  union {
    Qci _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT QciDefaultTypeInternal _Qci_default_instance_;
}  // namespace topo
}  // namespace onos
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_onos_2ftopo_2fran_2eproto[60];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_onos_2ftopo_2fran_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_onos_2ftopo_2fran_2eproto = nullptr;

const uint32_t TableStruct_onos_2ftopo_2fran_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::Location, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::onos::topo::Location, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::Location, lat_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::Location, lng_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::onos::topo::Location, ext_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::Wgs84Location, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::Wgs84Location, latitude_deg_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::Wgs84Location, longitude_deg_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::Wgs84Location, altitude_m_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::CartesianLocation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::CartesianLocation, x_m_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::CartesianLocation, y_m_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::CartesianLocation, z_m_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::AzElOrientation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::AzElOrientation, azimuth_deg_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::AzElOrientation, elevation_deg_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::AzElOrientation, rotation_deg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::YprOrientation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::YprOrientation, yaw_deg_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::YprOrientation, pitch_deg_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::YprOrientation, roll_deg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::Orientation, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::onos::topo::Orientation, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::onos::topo::Orientation, orientation_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::Waypoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::Waypoint, time_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::Waypoint, location_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::Waypoints, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::Waypoints, waypoint_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::OrbitData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::OrbitData, epoch_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::OrbitData, inclination_deg_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::OrbitData, raan_deg_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::OrbitData, e_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::OrbitData, argument_deg_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::OrbitData, anomaly_deg_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::OrbitData, mean_motion_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::Motion, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::onos::topo::Motion, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::onos::topo::Motion, motion_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::Coverage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::Coverage, height_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::Coverage, arc_width_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::Coverage, azimuth_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::Coverage, tilt_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::E2Node_ServiceModelsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::E2Node_ServiceModelsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::E2Node_ServiceModelsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::E2Node_ServiceModelsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::E2Node, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::E2Node, service_models_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::E2NodeConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::E2NodeConfig, connections_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::E2NodeConfig, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::Lease, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::Lease, expiration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::Interface, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::Interface, type_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::Interface, ip_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::Interface, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::E2TInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::E2TInfo, interfaces_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::XAppInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::XAppInfo, interfaces_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::XAppInfo, a1_policy_types_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::A1PolicyType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::A1PolicyType, id_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::A1PolicyType, name_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::A1PolicyType, version_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::A1PolicyType, description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::A1TInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::A1TInfo, interfaces_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::CellGlobalID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::CellGlobalID, value_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::CellGlobalID, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::NeighborCellID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::NeighborCellID, cell_global_id_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::NeighborCellID, plmn_id_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::E2Cell_KpiReportsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::E2Cell_KpiReportsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::E2Cell_KpiReportsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::E2Cell_KpiReportsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::E2Cell, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::E2Cell, cell_object_id_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::E2Cell, cell_global_id_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::E2Cell, antenna_count_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::E2Cell, arfcn_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::E2Cell, cell_type_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::E2Cell, pci_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::E2Cell, kpi_reports_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::E2Cell, neighbor_cell_ids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::ServiceModelInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::ServiceModelInfo, oid_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::ServiceModelInfo, name_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::ServiceModelInfo, ran_functions_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::ServiceModelInfo, ranfunctionids_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::RCRanFunction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::RCRanFunction, id_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::RCRanFunction, report_styles_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::RCRanFunction, insert_styles_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::RCRanFunction, event_trigger_styles_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::RCRanFunction, policy_styles_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::RCRanFunction, control_styles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::MHORanFunction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::MHORanFunction, id_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::MHORanFunction, report_styles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::KPMRanFunction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::KPMRanFunction, id_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::KPMRanFunction, report_styles_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::RSMRanFunction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::RSMRanFunction, id_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::RSMRanFunction, ric_slicing_node_capability_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::RCEventTriggerStyle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::RCEventTriggerStyle, name_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::RCEventTriggerStyle, type_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::RCEventTriggerStyle, format_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::RCReportStyle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::RCReportStyle, name_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::RCReportStyle, type_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::RCReportStyle, ran_parameters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::RCInsertStyle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::RCInsertStyle, name_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::RCInsertStyle, type_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::RCInsertStyle, insert_indications_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::RCPolicyStyle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::RCPolicyStyle, name_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::RCPolicyStyle, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::RCControlStyle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::RCControlStyle, name_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::RCControlStyle, type_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::RCControlStyle, header_format_type_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::RCControlStyle, message_format_type_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::RCControlStyle, control_outcome_format_type_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::RCControlStyle, control_actions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::ControlAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::ControlAction, id_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::ControlAction, name_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::ControlAction, ran_parameters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::InsertIndication, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::InsertIndication, id_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::InsertIndication, name_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::InsertIndication, ran_parameters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::RANParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::RANParameter, id_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::RANParameter, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::KPMReportStyle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::KPMReportStyle, name_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::KPMReportStyle, type_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::KPMReportStyle, measurements_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::MHOReportStyle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::MHOReportStyle, name_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::MHOReportStyle, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::KPMMeasurement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::KPMMeasurement, id_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::KPMMeasurement, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::RSMNodeSlicingCapabilityItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::RSMNodeSlicingCapabilityItem, max_number_of_slices_dl_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::RSMNodeSlicingCapabilityItem, max_number_of_slices_ul_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::RSMNodeSlicingCapabilityItem, slicing_type_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::RSMNodeSlicingCapabilityItem, max_number_of_ues_per_slice_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::RSMNodeSlicingCapabilityItem, supported_config_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::RSMSupportedSlicingConfigItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::RSMSupportedSlicingConfigItem, slicing_config_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::RSMSliceItemList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::RSMSliceItemList, rsm_slice_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::RSMSlicingItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::RSMSlicingItem, id_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::RSMSlicingItem, slice_desc_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::RSMSlicingItem, slice_parameters_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::RSMSlicingItem, slice_type_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::RSMSlicingItem, ue_id_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::RSMSliceParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::RSMSliceParameters, scheduler_type_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::RSMSliceParameters, weight_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::RSMSliceParameters, qos_level_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::DuUeF1apID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::DuUeF1apID, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::CuUeF1apID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::CuUeF1apID, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::RanUeNgapID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::RanUeNgapID, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::EnbUeS1apID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::EnbUeS1apID, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::AmfUeNgapID, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::AmfUeNgapID, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::UeIdentity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::UeIdentity, du_ue_f1ap_id_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::UeIdentity, cu_ue_f1ap_id_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::UeIdentity, ran_ue_ngap_id_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::UeIdentity, enb_ue_s1ap_id_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::UeIdentity, amf_ue_ngap_id_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::UeIdentity, preferred_id_type_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::UeIdentity, drb_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::DrbId, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::onos::topo::DrbId, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::onos::topo::DrbId, drb_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::FiveGDrbId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::FiveGDrbId, value_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::FiveGDrbId, qfi_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::FiveGDrbId, flows_map_to_drb_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::Qfi, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::Qfi, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::QoSflowLevelParameters, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::onos::topo::QoSflowLevelParameters, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::onos::topo::QoSflowLevelParameters, qos_flow_level_parameters_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::DynamicFiveQi, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::DynamicFiveQi, priority_level_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::DynamicFiveQi, packet_delay_budge_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::DynamicFiveQi, packet_error_rate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::NonDynamicFiveQi, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::NonDynamicFiveQi, five_qi_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::FiveQi, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::FiveQi, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::FourGDrbId, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::FourGDrbId, value_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::FourGDrbId, qci_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::Qci, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::Qci, value_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::onos::topo::Location)},
  { 11, -1, -1, sizeof(::onos::topo::Wgs84Location)},
  { 20, -1, -1, sizeof(::onos::topo::CartesianLocation)},
  { 29, -1, -1, sizeof(::onos::topo::AzElOrientation)},
  { 38, -1, -1, sizeof(::onos::topo::YprOrientation)},
  { 47, -1, -1, sizeof(::onos::topo::Orientation)},
  { 56, -1, -1, sizeof(::onos::topo::Waypoint)},
  { 64, -1, -1, sizeof(::onos::topo::Waypoints)},
  { 71, -1, -1, sizeof(::onos::topo::OrbitData)},
  { 84, -1, -1, sizeof(::onos::topo::Motion)},
  { 94, -1, -1, sizeof(::onos::topo::Coverage)},
  { 104, 112, -1, sizeof(::onos::topo::E2Node_ServiceModelsEntry_DoNotUse)},
  { 114, -1, -1, sizeof(::onos::topo::E2Node)},
  { 121, -1, -1, sizeof(::onos::topo::E2NodeConfig)},
  { 129, -1, -1, sizeof(::onos::topo::Lease)},
  { 136, -1, -1, sizeof(::onos::topo::Interface)},
  { 145, -1, -1, sizeof(::onos::topo::E2TInfo)},
  { 152, -1, -1, sizeof(::onos::topo::XAppInfo)},
  { 160, -1, -1, sizeof(::onos::topo::A1PolicyType)},
  { 170, -1, -1, sizeof(::onos::topo::A1TInfo)},
  { 177, -1, -1, sizeof(::onos::topo::CellGlobalID)},
  { 185, -1, -1, sizeof(::onos::topo::NeighborCellID)},
  { 193, 201, -1, sizeof(::onos::topo::E2Cell_KpiReportsEntry_DoNotUse)},
  { 203, -1, -1, sizeof(::onos::topo::E2Cell)},
  { 217, -1, -1, sizeof(::onos::topo::ServiceModelInfo)},
  { 227, -1, -1, sizeof(::onos::topo::RCRanFunction)},
  { 239, -1, -1, sizeof(::onos::topo::MHORanFunction)},
  { 247, -1, -1, sizeof(::onos::topo::KPMRanFunction)},
  { 255, -1, -1, sizeof(::onos::topo::RSMRanFunction)},
  { 263, -1, -1, sizeof(::onos::topo::RCEventTriggerStyle)},
  { 272, -1, -1, sizeof(::onos::topo::RCReportStyle)},
  { 281, -1, -1, sizeof(::onos::topo::RCInsertStyle)},
  { 290, -1, -1, sizeof(::onos::topo::RCPolicyStyle)},
  { 298, -1, -1, sizeof(::onos::topo::RCControlStyle)},
  { 310, -1, -1, sizeof(::onos::topo::ControlAction)},
  { 319, -1, -1, sizeof(::onos::topo::InsertIndication)},
  { 328, -1, -1, sizeof(::onos::topo::RANParameter)},
  { 336, -1, -1, sizeof(::onos::topo::KPMReportStyle)},
  { 345, -1, -1, sizeof(::onos::topo::MHOReportStyle)},
  { 353, -1, -1, sizeof(::onos::topo::KPMMeasurement)},
  { 361, -1, -1, sizeof(::onos::topo::RSMNodeSlicingCapabilityItem)},
  { 372, -1, -1, sizeof(::onos::topo::RSMSupportedSlicingConfigItem)},
  { 379, -1, -1, sizeof(::onos::topo::RSMSliceItemList)},
  { 386, -1, -1, sizeof(::onos::topo::RSMSlicingItem)},
  { 397, -1, -1, sizeof(::onos::topo::RSMSliceParameters)},
  { 406, -1, -1, sizeof(::onos::topo::DuUeF1apID)},
  { 413, -1, -1, sizeof(::onos::topo::CuUeF1apID)},
  { 420, -1, -1, sizeof(::onos::topo::RanUeNgapID)},
  { 427, -1, -1, sizeof(::onos::topo::EnbUeS1apID)},
  { 434, -1, -1, sizeof(::onos::topo::AmfUeNgapID)},
  { 441, -1, -1, sizeof(::onos::topo::UeIdentity)},
  { 454, -1, -1, sizeof(::onos::topo::DrbId)},
  { 463, -1, -1, sizeof(::onos::topo::FiveGDrbId)},
  { 472, -1, -1, sizeof(::onos::topo::Qfi)},
  { 479, -1, -1, sizeof(::onos::topo::QoSflowLevelParameters)},
  { 488, -1, -1, sizeof(::onos::topo::DynamicFiveQi)},
  { 497, -1, -1, sizeof(::onos::topo::NonDynamicFiveQi)},
  { 504, -1, -1, sizeof(::onos::topo::FiveQi)},
  { 511, -1, -1, sizeof(::onos::topo::FourGDrbId)},
  { 519, -1, -1, sizeof(::onos::topo::Qci)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_Location_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_Wgs84Location_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_CartesianLocation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_AzElOrientation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_YprOrientation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_Orientation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_Waypoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_Waypoints_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_OrbitData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_Motion_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_Coverage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_E2Node_ServiceModelsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_E2Node_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_E2NodeConfig_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_Lease_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_Interface_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_E2TInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_XAppInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_A1PolicyType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_A1TInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_CellGlobalID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_NeighborCellID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_E2Cell_KpiReportsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_E2Cell_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_ServiceModelInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_RCRanFunction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_MHORanFunction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_KPMRanFunction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_RSMRanFunction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_RCEventTriggerStyle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_RCReportStyle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_RCInsertStyle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_RCPolicyStyle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_RCControlStyle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_ControlAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_InsertIndication_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_RANParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_KPMReportStyle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_MHOReportStyle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_KPMMeasurement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_RSMNodeSlicingCapabilityItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_RSMSupportedSlicingConfigItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_RSMSliceItemList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_RSMSlicingItem_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_RSMSliceParameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_DuUeF1apID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_CuUeF1apID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_RanUeNgapID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_EnbUeS1apID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_AmfUeNgapID_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_UeIdentity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_DrbId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_FiveGDrbId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_Qfi_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_QoSflowLevelParameters_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_DynamicFiveQi_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_NonDynamicFiveQi_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_FiveQi_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_FourGDrbId_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_Qci_default_instance_),
};

const char descriptor_table_protodef_onos_2ftopo_2fran_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023onos/topo/ran.proto\022\tonos.topo\032\031google"
  "/protobuf/any.proto\032\024gogoproto/gogo.prot"
  "o\032\037google/protobuf/timestamp.proto\"\221\001\n\010L"
  "ocation\022\017\n\003lat\030\001 \001(\001B\002\030\001\022\017\n\003lng\030\002 \001(\001B\002\030"
  "\001\022)\n\005wgs84\030\003 \001(\0132\030.onos.topo.Wgs84Locati"
  "onH\000\0221\n\tcartesian\030\004 \001(\0132\034.onos.topo.Cart"
  "esianLocationH\000B\005\n\003ext\"P\n\rWgs84Location\022"
  "\024\n\014latitude_deg\030\001 \001(\001\022\025\n\rlongitude_deg\030\002"
  " \001(\001\022\022\n\naltitude_m\030\003 \001(\001\":\n\021CartesianLoc"
  "ation\022\013\n\003x_m\030\001 \001(\001\022\013\n\003y_m\030\002 \001(\001\022\013\n\003z_m\030\003"
  " \001(\001\"S\n\017AzElOrientation\022\023\n\013azimuth_deg\030\001"
  " \001(\001\022\025\n\relevation_deg\030\002 \001(\001\022\024\n\014rotation_"
  "deg\030\003 \001(\001\"F\n\016YprOrientation\022\017\n\007yaw_deg\030\001"
  " \001(\001\022\021\n\tpitch_deg\030\002 \001(\001\022\020\n\010roll_deg\030\003 \001("
  "\001\"r\n\013Orientation\022*\n\004azel\030\001 \001(\0132\032.onos.to"
  "po.AzElOrientationH\000\022(\n\003ypr\030\002 \001(\0132\031.onos"
  ".topo.YprOrientationH\000B\r\n\013orientation\"[\n"
  "\010Waypoint\022(\n\004time\030\001 \001(\0132\032.google.protobu"
  "f.Timestamp\022%\n\010location\030\002 \001(\0132\023.onos.top"
  "o.Location\"2\n\tWaypoints\022%\n\010waypoint\030\001 \003("
  "\0132\023.onos.topo.Waypoint\"\254\001\n\tOrbitData\022)\n\005"
  "epoch\030\001 \001(\0132\032.google.protobuf.Timestamp\022"
  "\027\n\017inclination_deg\030\002 \001(\001\022\020\n\010raan_deg\030\003 \001"
  "(\001\022\t\n\001e\030\004 \001(\001\022\024\n\014argument_deg\030\005 \001(\001\022\023\n\013a"
  "nomaly_deg\030\006 \001(\001\022\023\n\013mean_motion\030\007 \001(\001\"\223\001"
  "\n\006Motion\022-\n\016fixed_location\030\001 \001(\0132\023.onos."
  "topo.LocationH\000\022)\n\twaypoints\030\002 \001(\0132\024.ono"
  "s.topo.WaypointsH\000\022%\n\005orbit\030\003 \001(\0132\024.onos"
  ".topo.OrbitDataH\000B\010\n\006motion\"L\n\010Coverage\022"
  "\016\n\006height\030\001 \001(\005\022\021\n\tarc_width\030\002 \001(\005\022\017\n\007az"
  "imuth\030\003 \001(\005\022\014\n\004tilt\030\004 \001(\005\"\231\001\n\006E2Node\022<\n\016"
  "service_models\030\001 \003(\0132$.onos.topo.E2Node."
  "ServiceModelsEntry\032Q\n\022ServiceModelsEntry"
  "\022\013\n\003key\030\001 \001(\t\022*\n\005value\030\002 \001(\0132\033.onos.topo"
  ".ServiceModelInfo:\0028\001\"P\n\014E2NodeConfig\022/\n"
  "\013connections\030\001 \003(\0132\024.onos.topo.Interface"
  "B\004\310\336\037\000\022\017\n\007version\030\002 \001(\004\"=\n\005Lease\0224\n\nexpi"
  "ration\030\001 \001(\0132\032.google.protobuf.Timestamp"
  "B\004\220\337\037\001\"\342\001\n\tInterface\022\'\n\004type\030\001 \001(\0162\031.ono"
  "s.topo.Interface.Type\022\022\n\002ip\030\002 \001(\tB\006\342\336\037\002I"
  "P\022\014\n\004port\030\003 \001(\r\"\211\001\n\004Type\022\025\n\021INTERFACE_UN"
  "KNOWN\020\000\022\021\n\rINTERFACE_E2T\020\001\022\025\n\021INTERFACE_"
  "E2AP101\020\002\022\025\n\021INTERFACE_E2AP200\020\003\022\025\n\021INTE"
  "RFACE_A1_XAPP\020\004\022\022\n\016INTERFACE_A1AP\020\005\"3\n\007E"
  "2TInfo\022(\n\ninterfaces\030\001 \003(\0132\024.onos.topo.I"
  "nterface\"f\n\010XAppInfo\022(\n\ninterfaces\030\001 \003(\013"
  "2\024.onos.topo.Interface\0220\n\017a1_policy_type"
  "s\030\002 \003(\0132\027.onos.topo.A1PolicyType\"\316\001\n\014A1P"
  "olicyType\022\"\n\002id\030\001 \001(\tB\026\342\336\037\002ID\372\336\037\014PolicyT"
  "ypeID\022(\n\004name\030\002 \001(\tB\032\342\336\037\004Name\372\336\037\016PolicyT"
  "ypeName\0221\n\007version\030\003 \001(\tB \342\336\037\007Version\372\336\037"
  "\021PolicyTypeVersion\022=\n\013description\030\004 \001(\tB"
  "(\342\336\037\013Description\372\336\037\025PolicyTypeDescriptio"
  "n\"3\n\007A1TInfo\022(\n\ninterfaces\030\001 \003(\0132\024.onos."
  "topo.Interface\"H\n\014CellGlobalID\022\r\n\005value\030"
  "\001 \001(\t\022)\n\004type\030\002 \001(\0162\033.onos.topo.CellGlob"
  "alIDType\"p\n\016NeighborCellID\022A\n\016cell_globa"
  "l_id\030\001 \001(\0132\027.onos.topo.CellGlobalIDB\020\342\336\037"
  "\014CellGlobalID\022\033\n\007plmn_id\030\002 \001(\tB\n\342\336\037\006Plmn"
  "ID\"\225\003\n\006E2Cell\022(\n\016cell_object_id\030\001 \001(\tB\020\342"
  "\336\037\014CellObjectID\022A\n\016cell_global_id\030\002 \001(\0132"
  "\027.onos.topo.CellGlobalIDB\020\342\336\037\014CellGlobal"
  "ID\022\025\n\rantenna_count\030\003 \001(\r\022\030\n\005arfcn\030\004 \001(\r"
  "B\t\342\336\037\005ARFCN\022\021\n\tcell_type\030\005 \001(\t\022\024\n\003pci\030\006 "
  "\001(\rB\007\342\336\037\003PCI\022F\n\013kpi_reports\030\007 \003(\0132!.onos"
  ".topo.E2Cell.KpiReportsEntryB\016\342\336\037\nKpiRep"
  "orts\022I\n\021neighbor_cell_ids\030\010 \003(\0132\031.onos.t"
  "opo.NeighborCellIDB\023\342\336\037\017NeighborCellIDs\032"
  "1\n\017KpiReportsEntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value"
  "\030\002 \001(\r:\0028\001\"{\n\020ServiceModelInfo\022\024\n\003oid\030\001 "
  "\001(\tB\007\342\336\037\003OID\022\014\n\004name\030\002 \001(\t\022+\n\rran_functi"
  "ons\030\003 \003(\0132\024.google.protobuf.Any\022\026\n\016ranFu"
  "nctionIDs\030\004 \003(\r\"\247\002\n\rRCRanFunction\022\022\n\002id\030"
  "\001 \001(\tB\006\342\336\037\002ID\022/\n\rreport_styles\030\002 \003(\0132\030.o"
  "nos.topo.RCReportStyle\022/\n\rinsert_styles\030"
  "\003 \003(\0132\030.onos.topo.RCInsertStyle\022<\n\024event"
  "_trigger_styles\030\004 \003(\0132\036.onos.topo.RCEven"
  "tTriggerStyle\022/\n\rpolicy_styles\030\005 \003(\0132\030.o"
  "nos.topo.RCPolicyStyle\0221\n\016control_styles"
  "\030\006 \003(\0132\031.onos.topo.RCControlStyle\"V\n\016MHO"
  "RanFunction\022\022\n\002id\030\001 \001(\tB\006\342\336\037\002ID\0220\n\rrepor"
  "t_styles\030\002 \003(\0132\031.onos.topo.MHOReportStyl"
  "e\"V\n\016KPMRanFunction\022\022\n\002id\030\001 \001(\tB\006\342\336\037\002ID\022"
  "0\n\rreport_styles\030\002 \003(\0132\031.onos.topo.KPMRe"
  "portStyle\"w\n\016RSMRanFunction\022\022\n\002id\030\001 \001(\tB"
  "\006\342\336\037\002ID\022Q\n ric_slicing_node_capability_l"
  "ist\030\002 \003(\0132\'.onos.topo.RSMNodeSlicingCapa"
  "bilityItem\"F\n\023RCEventTriggerStyle\022\014\n\004nam"
  "e\030\001 \001(\t\022\014\n\004type\030\002 \001(\005\022\023\n\013format_type\030\003 \001"
  "(\005\"\\\n\rRCReportStyle\022\014\n\004name\030\001 \001(\t\022\014\n\004typ"
  "e\030\002 \001(\005\022/\n\016ran_parameters\030\003 \003(\0132\027.onos.t"
  "opo.RANParameter\"d\n\rRCInsertStyle\022\014\n\004nam"
  "e\030\001 \001(\t\022\014\n\004type\030\002 \001(\005\0227\n\022insert_indicati"
  "ons\030\003 \003(\0132\033.onos.topo.InsertIndication\"+"
  "\n\rRCPolicyStyle\022\014\n\004name\030\001 \001(\t\022\014\n\004type\030\002 "
  "\001(\005\"\275\001\n\016RCControlStyle\022\014\n\004name\030\001 \001(\t\022\014\n\004"
  "type\030\002 \001(\005\022\032\n\022header_format_type\030\003 \001(\005\022\033"
  "\n\023message_format_type\030\004 \001(\005\022#\n\033control_o"
  "utcome_format_type\030\005 \001(\005\0221\n\017control_acti"
  "ons\030\006 \003(\0132\030.onos.topo.ControlAction\"b\n\rC"
  "ontrolAction\022\022\n\002id\030\001 \001(\005B\006\342\336\037\002ID\022\014\n\004name"
  "\030\002 \001(\t\022/\n\016ran_parameters\030\003 \003(\0132\027.onos.to"
  "po.RANParameter\"e\n\020InsertIndication\022\022\n\002i"
  "d\030\001 \001(\005B\006\342\336\037\002ID\022\014\n\004name\030\002 \001(\t\022/\n\016ran_par"
  "ameters\030\003 \003(\0132\027.onos.topo.RANParameter\"0"
  "\n\014RANParameter\022\022\n\002id\030\001 \001(\005B\006\342\336\037\002ID\022\014\n\004na"
  "me\030\002 \001(\t\"]\n\016KPMReportStyle\022\014\n\004name\030\001 \001(\t"
  "\022\014\n\004type\030\002 \001(\005\022/\n\014measurements\030\003 \003(\0132\031.o"
  "nos.topo.KPMMeasurement\",\n\016MHOReportStyl"
  "e\022\014\n\004name\030\001 \001(\t\022\014\n\004type\030\002 \001(\005\"2\n\016KPMMeas"
  "urement\022\022\n\002id\030\001 \001(\tB\006\342\336\037\002ID\022\014\n\004name\030\002 \001("
  "\t\"\372\001\n\034RSMNodeSlicingCapabilityItem\022\037\n\027ma"
  "x_number_of_slices_dl\030\001 \001(\005\022\037\n\027max_numbe"
  "r_of_slices_ul\030\002 \001(\005\022/\n\014slicing_type\030\003 \001"
  "(\0162\031.onos.topo.RSMSlicingType\022#\n\033max_num"
  "ber_of_ues_per_slice\030\004 \001(\005\022B\n\020supported_"
  "config\030\005 \003(\0132(.onos.topo.RSMSupportedSli"
  "cingConfigItem\"W\n\035RSMSupportedSlicingCon"
  "figItem\0226\n\023slicing_config_type\030\001 \001(\0162\031.o"
  "nos.topo.E2SmRsmCommand\"E\n\020RSMSliceItemL"
  "ist\0221\n\016rsm_slice_list\030\001 \003(\0132\031.onos.topo."
  "RSMSlicingItem\"\311\001\n\016RSMSlicingItem\022\022\n\002id\030"
  "\001 \001(\tB\006\342\336\037\002ID\022\022\n\nslice_desc\030\002 \001(\t\0227\n\020sli"
  "ce_parameters\030\003 \001(\0132\035.onos.topo.RSMSlice"
  "Parameters\022+\n\nslice_type\030\004 \001(\0162\027.onos.to"
  "po.RSMSliceType\022)\n\nue_id_list\030\005 \003(\0132\025.on"
  "os.topo.UeIdentity\"l\n\022RSMSliceParameters"
  "\0223\n\016scheduler_type\030\001 \001(\0162\033.onos.topo.RSM"
  "SchedulerType\022\016\n\006weight\030\002 \001(\005\022\021\n\tqos_lev"
  "el\030\003 \001(\005\"\033\n\nDuUeF1apID\022\r\n\005value\030\001 \001(\003\"\033\n"
  "\nCuUeF1apID\022\r\n\005value\030\001 \001(\003\"\034\n\013RanUeNgapI"
  "D\022\r\n\005value\030\001 \001(\003\"\034\n\013EnbUeS1apID\022\r\n\005value"
  "\030\001 \001(\005\"\034\n\013AmfUeNgapID\022\r\n\005value\030\001 \001(\003\"\262\003\n"
  "\nUeIdentity\022<\n\rdu_ue_f1ap_id\030\001 \001(\0132\025.ono"
  "s.topo.DuUeF1apIDB\016\342\336\037\nDuUeF1apID\022<\n\rcu_"
  "ue_f1ap_id\030\002 \001(\0132\025.onos.topo.CuUeF1apIDB"
  "\016\342\336\037\nCuUeF1apID\022\?\n\016ran_ue_ngap_id\030\003 \001(\0132"
  "\026.onos.topo.RanUeNgapIDB\017\342\336\037\013RANUeNgapID"
  "\022\?\n\016enb_ue_s1ap_id\030\004 \001(\0132\026.onos.topo.Enb"
  "UeS1apIDB\017\342\336\037\013EnbUeS1apID\022\?\n\016amf_ue_ngap"
  "_id\030\005 \001(\0132\026.onos.topo.AmfUeNgapIDB\017\342\336\037\013A"
  "MFUeNgapID\022C\n\021preferred_id_type\030\006 \001(\0162\023."
  "onos.topo.UeIdTypeB\023\342\336\037\017PreferredIDType\022"
  " \n\006drb_id\030\007 \001(\0132\020.onos.topo.DrbId\"\207\001\n\005Dr"
  "bId\0229\n\014four_gdrb_id\030\001 \001(\0132\025.onos.topo.Fo"
  "urGDrbIdH\000R\nfourGDrbID\0229\n\014five_gdrb_id\030\002"
  " \001(\0132\025.onos.topo.FiveGDrbIdH\000R\nfiveGDrbI"
  "DB\010\n\006drb_id\"u\n\nFiveGDrbId\022\r\n\005value\030\001 \001(\005"
  "\022\033\n\003qfi\030\002 \001(\0132\016.onos.topo.Qfi\022;\n\020flows_m"
  "ap_to_drb\030\003 \003(\0132!.onos.topo.QoSflowLevel"
  "Parameters\"\024\n\003Qfi\022\r\n\005value\030\001 \001(\005\"\246\001\n\026QoS"
  "flowLevelParameters\0223\n\017dynamic_five_qi\030\001"
  " \001(\0132\030.onos.topo.DynamicFiveQiH\000\022:\n\023non_"
  "dynamic_five_qi\030\002 \001(\0132\033.onos.topo.NonDyn"
  "amicFiveQiH\000B\033\n\031qos_flow_level_parameter"
  "s\"^\n\rDynamicFiveQi\022\026\n\016priority_level\030\001 \001"
  "(\005\022\032\n\022packet_delay_budge\030\002 \001(\005\022\031\n\021packet"
  "_error_rate\030\003 \001(\005\"6\n\020NonDynamicFiveQi\022\"\n"
  "\007five_qi\030\001 \001(\0132\021.onos.topo.FiveQi\"\027\n\006Fiv"
  "eQi\022\r\n\005value\030\001 \001(\005\"8\n\nFourGDrbId\022\r\n\005valu"
  "e\030\001 \001(\005\022\033\n\003qci\030\002 \001(\0132\016.onos.topo.Qci\"\024\n\003"
  "Qci\022\r\n\005value\030\001 \001(\005*D\n\016RANEntityKinds\022\n\n\006"
  "E2NODE\020\000\022\n\n\006E2CELL\020\001\022\007\n\003E2T\020\003\022\010\n\004XAPP\020\004\022"
  "\007\n\003A1T\020\005*=\n\020RANRelationKinds\022\014\n\010CONTROLS"
  "\020\000\022\014\n\010CONTAINS\020\001\022\r\n\tNEIGHBORS\020\002*\'\n\020CellG"
  "lobalIDType\022\t\n\005NRCGI\020\000\022\010\n\004ECGI\020\001*M\n\010Node"
  "Type\022\013\n\007NT_NONE\020\000\022\n\n\006NT_GNB\020\001\022\r\n\tNT_EN_G"
  "NB\020\002\022\r\n\tNT_NG_ENB\020\003\022\n\n\006NT_ENB\020\004*L\n\rCompo"
  "nentType\022\013\n\007CT_NONE\020\000\022\t\n\005CT_CU\020\001\022\014\n\010CT_C"
  "U_UP\020\002\022\t\n\005CT_DU\020\003\022\n\n\006CT_ENB\020\004*\306\001\n\016E2SmRs"
  "mCommand\022\"\n\036E2_SM_RSM_COMMAND_SLICE_CREA"
  "TE\020\000\022\"\n\036E2_SM_RSM_COMMAND_SLICE_UPDATE\020\001"
  "\022\"\n\036E2_SM_RSM_COMMAND_SLICE_DELETE\020\002\022\"\n\036"
  "E2_SM_RSM_COMMAND_UE_ASSOCIATE\020\003\022$\n E2_S"
  "M_RSM_COMMAND_EVENT_TRIGGERS\020\004*C\n\016RSMSli"
  "cingType\022\027\n\023SLICING_TYPE_STATIC\020\000\022\030\n\024SLI"
  "CING_TYPE_DYNAMIC\020\001*x\n\020RSMSchedulerType\022"
  "\036\n\032SCHEDULER_TYPE_ROUND_ROBIN\020\000\022&\n\"SCHED"
  "ULER_TYPE_PROPORTIONALLY_FAIR\020\001\022\034\n\030SCHED"
  "ULER_TYPE_QOS_BASED\020\002*@\n\014RSMSliceType\022\027\n"
  "\023SLICE_TYPE_DL_SLICE\020\000\022\027\n\023SLICE_TYPE_UL_"
  "SLICE\020\001*\246\001\n\010UeIdType\022\035\n\031UE_ID_TYPE_CU_UE"
  "_F1_AP_ID\020\000\022\035\n\031UE_ID_TYPE_DU_UE_F1_AP_ID"
  "\020\001\022\035\n\031UE_ID_TYPE_RAN_UE_NGAP_ID\020\002\022\035\n\031UE_"
  "ID_TYPE_AMF_UE_NGAP_ID\020\003\022\036\n\032UE_ID_TYPE_E"
  "NB_UE_S1_AP_ID\020\004b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_onos_2ftopo_2fran_2eproto_deps[3] = {
  &::descriptor_table_gogoproto_2fgogo_2eproto,
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_onos_2ftopo_2fran_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_onos_2ftopo_2fran_2eproto = {
  false, false, 7424, descriptor_table_protodef_onos_2ftopo_2fran_2eproto, "onos/topo/ran.proto", 
  &descriptor_table_onos_2ftopo_2fran_2eproto_once, descriptor_table_onos_2ftopo_2fran_2eproto_deps, 3, 60,
  schemas, file_default_instances, TableStruct_onos_2ftopo_2fran_2eproto::offsets,
  file_level_metadata_onos_2ftopo_2fran_2eproto, file_level_enum_descriptors_onos_2ftopo_2fran_2eproto, file_level_service_descriptors_onos_2ftopo_2fran_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_onos_2ftopo_2fran_2eproto_getter() {
  return &descriptor_table_onos_2ftopo_2fran_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_onos_2ftopo_2fran_2eproto(&descriptor_table_onos_2ftopo_2fran_2eproto);
namespace onos {
namespace topo {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Interface_Type_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_onos_2ftopo_2fran_2eproto);
  return file_level_enum_descriptors_onos_2ftopo_2fran_2eproto[0];
}
bool Interface_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Interface_Type Interface::INTERFACE_UNKNOWN;
constexpr Interface_Type Interface::INTERFACE_E2T;
constexpr Interface_Type Interface::INTERFACE_E2AP101;
constexpr Interface_Type Interface::INTERFACE_E2AP200;
constexpr Interface_Type Interface::INTERFACE_A1_XAPP;
constexpr Interface_Type Interface::INTERFACE_A1AP;
constexpr Interface_Type Interface::Type_MIN;
constexpr Interface_Type Interface::Type_MAX;
constexpr int Interface::Type_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RANEntityKinds_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_onos_2ftopo_2fran_2eproto);
  return file_level_enum_descriptors_onos_2ftopo_2fran_2eproto[1];
}
bool RANEntityKinds_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RANRelationKinds_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_onos_2ftopo_2fran_2eproto);
  return file_level_enum_descriptors_onos_2ftopo_2fran_2eproto[2];
}
bool RANRelationKinds_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CellGlobalIDType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_onos_2ftopo_2fran_2eproto);
  return file_level_enum_descriptors_onos_2ftopo_2fran_2eproto[3];
}
bool CellGlobalIDType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NodeType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_onos_2ftopo_2fran_2eproto);
  return file_level_enum_descriptors_onos_2ftopo_2fran_2eproto[4];
}
bool NodeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ComponentType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_onos_2ftopo_2fran_2eproto);
  return file_level_enum_descriptors_onos_2ftopo_2fran_2eproto[5];
}
bool ComponentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* E2SmRsmCommand_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_onos_2ftopo_2fran_2eproto);
  return file_level_enum_descriptors_onos_2ftopo_2fran_2eproto[6];
}
bool E2SmRsmCommand_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RSMSlicingType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_onos_2ftopo_2fran_2eproto);
  return file_level_enum_descriptors_onos_2ftopo_2fran_2eproto[7];
}
bool RSMSlicingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RSMSchedulerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_onos_2ftopo_2fran_2eproto);
  return file_level_enum_descriptors_onos_2ftopo_2fran_2eproto[8];
}
bool RSMSchedulerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RSMSliceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_onos_2ftopo_2fran_2eproto);
  return file_level_enum_descriptors_onos_2ftopo_2fran_2eproto[9];
}
bool RSMSliceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UeIdType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_onos_2ftopo_2fran_2eproto);
  return file_level_enum_descriptors_onos_2ftopo_2fran_2eproto[10];
}
bool UeIdType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Location::_Internal {
 public:
  static const ::onos::topo::Wgs84Location& wgs84(const Location* msg);
  static const ::onos::topo::CartesianLocation& cartesian(const Location* msg);
};

const ::onos::topo::Wgs84Location&
Location::_Internal::wgs84(const Location* msg) {
  return *msg->ext_.wgs84_;
}
const ::onos::topo::CartesianLocation&
Location::_Internal::cartesian(const Location* msg) {
  return *msg->ext_.cartesian_;
}
void Location::set_allocated_wgs84(::onos::topo::Wgs84Location* wgs84) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ext();
  if (wgs84) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::topo::Wgs84Location>::GetOwningArena(wgs84);
    if (message_arena != submessage_arena) {
      wgs84 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wgs84, submessage_arena);
    }
    set_has_wgs84();
    ext_.wgs84_ = wgs84;
  }
  // @@protoc_insertion_point(field_set_allocated:onos.topo.Location.wgs84)
}
void Location::set_allocated_cartesian(::onos::topo::CartesianLocation* cartesian) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_ext();
  if (cartesian) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::topo::CartesianLocation>::GetOwningArena(cartesian);
    if (message_arena != submessage_arena) {
      cartesian = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cartesian, submessage_arena);
    }
    set_has_cartesian();
    ext_.cartesian_ = cartesian;
  }
  // @@protoc_insertion_point(field_set_allocated:onos.topo.Location.cartesian)
}
Location::Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.Location)
}
Location::Location(const Location& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&lat_, &from.lat_,
    static_cast<size_t>(reinterpret_cast<char*>(&lng_) -
    reinterpret_cast<char*>(&lat_)) + sizeof(lng_));
  clear_has_ext();
  switch (from.ext_case()) {
    case kWgs84: {
      _internal_mutable_wgs84()->::onos::topo::Wgs84Location::MergeFrom(from._internal_wgs84());
      break;
    }
    case kCartesian: {
      _internal_mutable_cartesian()->::onos::topo::CartesianLocation::MergeFrom(from._internal_cartesian());
      break;
    }
    case EXT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:onos.topo.Location)
}

inline void Location::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&lat_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&lng_) -
    reinterpret_cast<char*>(&lat_)) + sizeof(lng_));
clear_has_ext();
}

Location::~Location() {
  // @@protoc_insertion_point(destructor:onos.topo.Location)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Location::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_ext()) {
    clear_ext();
  }
}

void Location::ArenaDtor(void* object) {
  Location* _this = reinterpret_cast< Location* >(object);
  (void)_this;
}
void Location::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Location::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Location::clear_ext() {
// @@protoc_insertion_point(one_of_clear_start:onos.topo.Location)
  switch (ext_case()) {
    case kWgs84: {
      if (GetArenaForAllocation() == nullptr) {
        delete ext_.wgs84_;
      }
      break;
    }
    case kCartesian: {
      if (GetArenaForAllocation() == nullptr) {
        delete ext_.cartesian_;
      }
      break;
    }
    case EXT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = EXT_NOT_SET;
}


void Location::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.Location)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&lat_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lng_) -
      reinterpret_cast<char*>(&lat_)) + sizeof(lng_));
  clear_ext();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Location::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double lat = 1 [deprecated = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double lng = 2 [deprecated = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          lng_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // .onos.topo.Wgs84Location wgs84 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_wgs84(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.topo.CartesianLocation cartesian = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_cartesian(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Location::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.Location)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double lat = 1 [deprecated = true];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lat = this->_internal_lat();
  uint64_t raw_lat;
  memcpy(&raw_lat, &tmp_lat, sizeof(tmp_lat));
  if (raw_lat != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_lat(), target);
  }

  // double lng = 2 [deprecated = true];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lng = this->_internal_lng();
  uint64_t raw_lng;
  memcpy(&raw_lng, &tmp_lng, sizeof(tmp_lng));
  if (raw_lng != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_lng(), target);
  }

  // .onos.topo.Wgs84Location wgs84 = 3;
  if (_internal_has_wgs84()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::wgs84(this), target, stream);
  }

  // .onos.topo.CartesianLocation cartesian = 4;
  if (_internal_has_cartesian()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::cartesian(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.Location)
  return target;
}

size_t Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.Location)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double lat = 1 [deprecated = true];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lat = this->_internal_lat();
  uint64_t raw_lat;
  memcpy(&raw_lat, &tmp_lat, sizeof(tmp_lat));
  if (raw_lat != 0) {
    total_size += 1 + 8;
  }

  // double lng = 2 [deprecated = true];
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lng = this->_internal_lng();
  uint64_t raw_lng;
  memcpy(&raw_lng, &tmp_lng, sizeof(tmp_lng));
  if (raw_lng != 0) {
    total_size += 1 + 8;
  }

  switch (ext_case()) {
    // .onos.topo.Wgs84Location wgs84 = 3;
    case kWgs84: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_.wgs84_);
      break;
    }
    // .onos.topo.CartesianLocation cartesian = 4;
    case kCartesian: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *ext_.cartesian_);
      break;
    }
    case EXT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Location::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Location::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Location::GetClassData() const { return &_class_data_; }

void Location::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Location *>(to)->MergeFrom(
      static_cast<const Location &>(from));
}


void Location::MergeFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.Location)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lat = from._internal_lat();
  uint64_t raw_lat;
  memcpy(&raw_lat, &tmp_lat, sizeof(tmp_lat));
  if (raw_lat != 0) {
    _internal_set_lat(from._internal_lat());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_lng = from._internal_lng();
  uint64_t raw_lng;
  memcpy(&raw_lng, &tmp_lng, sizeof(tmp_lng));
  if (raw_lng != 0) {
    _internal_set_lng(from._internal_lng());
  }
  switch (from.ext_case()) {
    case kWgs84: {
      _internal_mutable_wgs84()->::onos::topo::Wgs84Location::MergeFrom(from._internal_wgs84());
      break;
    }
    case kCartesian: {
      _internal_mutable_cartesian()->::onos::topo::CartesianLocation::MergeFrom(from._internal_cartesian());
      break;
    }
    case EXT_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Location::CopyFrom(const Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Location::IsInitialized() const {
  return true;
}

void Location::InternalSwap(Location* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Location, lng_)
      + sizeof(Location::lng_)
      - PROTOBUF_FIELD_OFFSET(Location, lat_)>(
          reinterpret_cast<char*>(&lat_),
          reinterpret_cast<char*>(&other->lat_));
  swap(ext_, other->ext_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Location::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[0]);
}

// ===================================================================

class Wgs84Location::_Internal {
 public:
};

Wgs84Location::Wgs84Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.Wgs84Location)
}
Wgs84Location::Wgs84Location(const Wgs84Location& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&latitude_deg_, &from.latitude_deg_,
    static_cast<size_t>(reinterpret_cast<char*>(&altitude_m_) -
    reinterpret_cast<char*>(&latitude_deg_)) + sizeof(altitude_m_));
  // @@protoc_insertion_point(copy_constructor:onos.topo.Wgs84Location)
}

inline void Wgs84Location::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&latitude_deg_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&altitude_m_) -
    reinterpret_cast<char*>(&latitude_deg_)) + sizeof(altitude_m_));
}

Wgs84Location::~Wgs84Location() {
  // @@protoc_insertion_point(destructor:onos.topo.Wgs84Location)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Wgs84Location::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Wgs84Location::ArenaDtor(void* object) {
  Wgs84Location* _this = reinterpret_cast< Wgs84Location* >(object);
  (void)_this;
}
void Wgs84Location::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Wgs84Location::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Wgs84Location::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.Wgs84Location)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&latitude_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&altitude_m_) -
      reinterpret_cast<char*>(&latitude_deg_)) + sizeof(altitude_m_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Wgs84Location::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double latitude_deg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          latitude_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double longitude_deg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          longitude_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double altitude_m = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          altitude_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Wgs84Location::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.Wgs84Location)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double latitude_deg = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude_deg = this->_internal_latitude_deg();
  uint64_t raw_latitude_deg;
  memcpy(&raw_latitude_deg, &tmp_latitude_deg, sizeof(tmp_latitude_deg));
  if (raw_latitude_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_latitude_deg(), target);
  }

  // double longitude_deg = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude_deg = this->_internal_longitude_deg();
  uint64_t raw_longitude_deg;
  memcpy(&raw_longitude_deg, &tmp_longitude_deg, sizeof(tmp_longitude_deg));
  if (raw_longitude_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_longitude_deg(), target);
  }

  // double altitude_m = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_altitude_m = this->_internal_altitude_m();
  uint64_t raw_altitude_m;
  memcpy(&raw_altitude_m, &tmp_altitude_m, sizeof(tmp_altitude_m));
  if (raw_altitude_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_altitude_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.Wgs84Location)
  return target;
}

size_t Wgs84Location::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.Wgs84Location)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double latitude_deg = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude_deg = this->_internal_latitude_deg();
  uint64_t raw_latitude_deg;
  memcpy(&raw_latitude_deg, &tmp_latitude_deg, sizeof(tmp_latitude_deg));
  if (raw_latitude_deg != 0) {
    total_size += 1 + 8;
  }

  // double longitude_deg = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude_deg = this->_internal_longitude_deg();
  uint64_t raw_longitude_deg;
  memcpy(&raw_longitude_deg, &tmp_longitude_deg, sizeof(tmp_longitude_deg));
  if (raw_longitude_deg != 0) {
    total_size += 1 + 8;
  }

  // double altitude_m = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_altitude_m = this->_internal_altitude_m();
  uint64_t raw_altitude_m;
  memcpy(&raw_altitude_m, &tmp_altitude_m, sizeof(tmp_altitude_m));
  if (raw_altitude_m != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Wgs84Location::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Wgs84Location::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Wgs84Location::GetClassData() const { return &_class_data_; }

void Wgs84Location::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Wgs84Location *>(to)->MergeFrom(
      static_cast<const Wgs84Location &>(from));
}


void Wgs84Location::MergeFrom(const Wgs84Location& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.Wgs84Location)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_latitude_deg = from._internal_latitude_deg();
  uint64_t raw_latitude_deg;
  memcpy(&raw_latitude_deg, &tmp_latitude_deg, sizeof(tmp_latitude_deg));
  if (raw_latitude_deg != 0) {
    _internal_set_latitude_deg(from._internal_latitude_deg());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_longitude_deg = from._internal_longitude_deg();
  uint64_t raw_longitude_deg;
  memcpy(&raw_longitude_deg, &tmp_longitude_deg, sizeof(tmp_longitude_deg));
  if (raw_longitude_deg != 0) {
    _internal_set_longitude_deg(from._internal_longitude_deg());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_altitude_m = from._internal_altitude_m();
  uint64_t raw_altitude_m;
  memcpy(&raw_altitude_m, &tmp_altitude_m, sizeof(tmp_altitude_m));
  if (raw_altitude_m != 0) {
    _internal_set_altitude_m(from._internal_altitude_m());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Wgs84Location::CopyFrom(const Wgs84Location& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.Wgs84Location)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Wgs84Location::IsInitialized() const {
  return true;
}

void Wgs84Location::InternalSwap(Wgs84Location* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Wgs84Location, altitude_m_)
      + sizeof(Wgs84Location::altitude_m_)
      - PROTOBUF_FIELD_OFFSET(Wgs84Location, latitude_deg_)>(
          reinterpret_cast<char*>(&latitude_deg_),
          reinterpret_cast<char*>(&other->latitude_deg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Wgs84Location::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[1]);
}

// ===================================================================

class CartesianLocation::_Internal {
 public:
};

CartesianLocation::CartesianLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.CartesianLocation)
}
CartesianLocation::CartesianLocation(const CartesianLocation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_m_, &from.x_m_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_m_) -
    reinterpret_cast<char*>(&x_m_)) + sizeof(z_m_));
  // @@protoc_insertion_point(copy_constructor:onos.topo.CartesianLocation)
}

inline void CartesianLocation::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_m_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_m_) -
    reinterpret_cast<char*>(&x_m_)) + sizeof(z_m_));
}

CartesianLocation::~CartesianLocation() {
  // @@protoc_insertion_point(destructor:onos.topo.CartesianLocation)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CartesianLocation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CartesianLocation::ArenaDtor(void* object) {
  CartesianLocation* _this = reinterpret_cast< CartesianLocation* >(object);
  (void)_this;
}
void CartesianLocation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CartesianLocation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CartesianLocation::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.CartesianLocation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_m_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_m_) -
      reinterpret_cast<char*>(&x_m_)) + sizeof(z_m_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CartesianLocation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double x_m = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          x_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double y_m = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          y_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double z_m = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          z_m_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CartesianLocation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.CartesianLocation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double x_m = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x_m = this->_internal_x_m();
  uint64_t raw_x_m;
  memcpy(&raw_x_m, &tmp_x_m, sizeof(tmp_x_m));
  if (raw_x_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_x_m(), target);
  }

  // double y_m = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y_m = this->_internal_y_m();
  uint64_t raw_y_m;
  memcpy(&raw_y_m, &tmp_y_m, sizeof(tmp_y_m));
  if (raw_y_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_y_m(), target);
  }

  // double z_m = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z_m = this->_internal_z_m();
  uint64_t raw_z_m;
  memcpy(&raw_z_m, &tmp_z_m, sizeof(tmp_z_m));
  if (raw_z_m != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_z_m(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.CartesianLocation)
  return target;
}

size_t CartesianLocation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.CartesianLocation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double x_m = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x_m = this->_internal_x_m();
  uint64_t raw_x_m;
  memcpy(&raw_x_m, &tmp_x_m, sizeof(tmp_x_m));
  if (raw_x_m != 0) {
    total_size += 1 + 8;
  }

  // double y_m = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y_m = this->_internal_y_m();
  uint64_t raw_y_m;
  memcpy(&raw_y_m, &tmp_y_m, sizeof(tmp_y_m));
  if (raw_y_m != 0) {
    total_size += 1 + 8;
  }

  // double z_m = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z_m = this->_internal_z_m();
  uint64_t raw_z_m;
  memcpy(&raw_z_m, &tmp_z_m, sizeof(tmp_z_m));
  if (raw_z_m != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CartesianLocation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CartesianLocation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CartesianLocation::GetClassData() const { return &_class_data_; }

void CartesianLocation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CartesianLocation *>(to)->MergeFrom(
      static_cast<const CartesianLocation &>(from));
}


void CartesianLocation::MergeFrom(const CartesianLocation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.CartesianLocation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_x_m = from._internal_x_m();
  uint64_t raw_x_m;
  memcpy(&raw_x_m, &tmp_x_m, sizeof(tmp_x_m));
  if (raw_x_m != 0) {
    _internal_set_x_m(from._internal_x_m());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_y_m = from._internal_y_m();
  uint64_t raw_y_m;
  memcpy(&raw_y_m, &tmp_y_m, sizeof(tmp_y_m));
  if (raw_y_m != 0) {
    _internal_set_y_m(from._internal_y_m());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_z_m = from._internal_z_m();
  uint64_t raw_z_m;
  memcpy(&raw_z_m, &tmp_z_m, sizeof(tmp_z_m));
  if (raw_z_m != 0) {
    _internal_set_z_m(from._internal_z_m());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CartesianLocation::CopyFrom(const CartesianLocation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.CartesianLocation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CartesianLocation::IsInitialized() const {
  return true;
}

void CartesianLocation::InternalSwap(CartesianLocation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CartesianLocation, z_m_)
      + sizeof(CartesianLocation::z_m_)
      - PROTOBUF_FIELD_OFFSET(CartesianLocation, x_m_)>(
          reinterpret_cast<char*>(&x_m_),
          reinterpret_cast<char*>(&other->x_m_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CartesianLocation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[2]);
}

// ===================================================================

class AzElOrientation::_Internal {
 public:
};

AzElOrientation::AzElOrientation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.AzElOrientation)
}
AzElOrientation::AzElOrientation(const AzElOrientation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&azimuth_deg_, &from.azimuth_deg_,
    static_cast<size_t>(reinterpret_cast<char*>(&rotation_deg_) -
    reinterpret_cast<char*>(&azimuth_deg_)) + sizeof(rotation_deg_));
  // @@protoc_insertion_point(copy_constructor:onos.topo.AzElOrientation)
}

inline void AzElOrientation::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&azimuth_deg_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&rotation_deg_) -
    reinterpret_cast<char*>(&azimuth_deg_)) + sizeof(rotation_deg_));
}

AzElOrientation::~AzElOrientation() {
  // @@protoc_insertion_point(destructor:onos.topo.AzElOrientation)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AzElOrientation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AzElOrientation::ArenaDtor(void* object) {
  AzElOrientation* _this = reinterpret_cast< AzElOrientation* >(object);
  (void)_this;
}
void AzElOrientation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AzElOrientation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AzElOrientation::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.AzElOrientation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&azimuth_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&rotation_deg_) -
      reinterpret_cast<char*>(&azimuth_deg_)) + sizeof(rotation_deg_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AzElOrientation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double azimuth_deg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          azimuth_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double elevation_deg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          elevation_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double rotation_deg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          rotation_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AzElOrientation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.AzElOrientation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double azimuth_deg = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_azimuth_deg = this->_internal_azimuth_deg();
  uint64_t raw_azimuth_deg;
  memcpy(&raw_azimuth_deg, &tmp_azimuth_deg, sizeof(tmp_azimuth_deg));
  if (raw_azimuth_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_azimuth_deg(), target);
  }

  // double elevation_deg = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_elevation_deg = this->_internal_elevation_deg();
  uint64_t raw_elevation_deg;
  memcpy(&raw_elevation_deg, &tmp_elevation_deg, sizeof(tmp_elevation_deg));
  if (raw_elevation_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_elevation_deg(), target);
  }

  // double rotation_deg = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rotation_deg = this->_internal_rotation_deg();
  uint64_t raw_rotation_deg;
  memcpy(&raw_rotation_deg, &tmp_rotation_deg, sizeof(tmp_rotation_deg));
  if (raw_rotation_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_rotation_deg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.AzElOrientation)
  return target;
}

size_t AzElOrientation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.AzElOrientation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double azimuth_deg = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_azimuth_deg = this->_internal_azimuth_deg();
  uint64_t raw_azimuth_deg;
  memcpy(&raw_azimuth_deg, &tmp_azimuth_deg, sizeof(tmp_azimuth_deg));
  if (raw_azimuth_deg != 0) {
    total_size += 1 + 8;
  }

  // double elevation_deg = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_elevation_deg = this->_internal_elevation_deg();
  uint64_t raw_elevation_deg;
  memcpy(&raw_elevation_deg, &tmp_elevation_deg, sizeof(tmp_elevation_deg));
  if (raw_elevation_deg != 0) {
    total_size += 1 + 8;
  }

  // double rotation_deg = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rotation_deg = this->_internal_rotation_deg();
  uint64_t raw_rotation_deg;
  memcpy(&raw_rotation_deg, &tmp_rotation_deg, sizeof(tmp_rotation_deg));
  if (raw_rotation_deg != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AzElOrientation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AzElOrientation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AzElOrientation::GetClassData() const { return &_class_data_; }

void AzElOrientation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AzElOrientation *>(to)->MergeFrom(
      static_cast<const AzElOrientation &>(from));
}


void AzElOrientation::MergeFrom(const AzElOrientation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.AzElOrientation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_azimuth_deg = from._internal_azimuth_deg();
  uint64_t raw_azimuth_deg;
  memcpy(&raw_azimuth_deg, &tmp_azimuth_deg, sizeof(tmp_azimuth_deg));
  if (raw_azimuth_deg != 0) {
    _internal_set_azimuth_deg(from._internal_azimuth_deg());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_elevation_deg = from._internal_elevation_deg();
  uint64_t raw_elevation_deg;
  memcpy(&raw_elevation_deg, &tmp_elevation_deg, sizeof(tmp_elevation_deg));
  if (raw_elevation_deg != 0) {
    _internal_set_elevation_deg(from._internal_elevation_deg());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_rotation_deg = from._internal_rotation_deg();
  uint64_t raw_rotation_deg;
  memcpy(&raw_rotation_deg, &tmp_rotation_deg, sizeof(tmp_rotation_deg));
  if (raw_rotation_deg != 0) {
    _internal_set_rotation_deg(from._internal_rotation_deg());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AzElOrientation::CopyFrom(const AzElOrientation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.AzElOrientation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AzElOrientation::IsInitialized() const {
  return true;
}

void AzElOrientation::InternalSwap(AzElOrientation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AzElOrientation, rotation_deg_)
      + sizeof(AzElOrientation::rotation_deg_)
      - PROTOBUF_FIELD_OFFSET(AzElOrientation, azimuth_deg_)>(
          reinterpret_cast<char*>(&azimuth_deg_),
          reinterpret_cast<char*>(&other->azimuth_deg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AzElOrientation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[3]);
}

// ===================================================================

class YprOrientation::_Internal {
 public:
};

YprOrientation::YprOrientation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.YprOrientation)
}
YprOrientation::YprOrientation(const YprOrientation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&yaw_deg_, &from.yaw_deg_,
    static_cast<size_t>(reinterpret_cast<char*>(&roll_deg_) -
    reinterpret_cast<char*>(&yaw_deg_)) + sizeof(roll_deg_));
  // @@protoc_insertion_point(copy_constructor:onos.topo.YprOrientation)
}

inline void YprOrientation::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&yaw_deg_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&roll_deg_) -
    reinterpret_cast<char*>(&yaw_deg_)) + sizeof(roll_deg_));
}

YprOrientation::~YprOrientation() {
  // @@protoc_insertion_point(destructor:onos.topo.YprOrientation)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void YprOrientation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void YprOrientation::ArenaDtor(void* object) {
  YprOrientation* _this = reinterpret_cast< YprOrientation* >(object);
  (void)_this;
}
void YprOrientation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void YprOrientation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void YprOrientation::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.YprOrientation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&yaw_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&roll_deg_) -
      reinterpret_cast<char*>(&yaw_deg_)) + sizeof(roll_deg_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* YprOrientation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // double yaw_deg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 9)) {
          yaw_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double pitch_deg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          pitch_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double roll_deg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          roll_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* YprOrientation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.YprOrientation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // double yaw_deg = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_yaw_deg = this->_internal_yaw_deg();
  uint64_t raw_yaw_deg;
  memcpy(&raw_yaw_deg, &tmp_yaw_deg, sizeof(tmp_yaw_deg));
  if (raw_yaw_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_yaw_deg(), target);
  }

  // double pitch_deg = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pitch_deg = this->_internal_pitch_deg();
  uint64_t raw_pitch_deg;
  memcpy(&raw_pitch_deg, &tmp_pitch_deg, sizeof(tmp_pitch_deg));
  if (raw_pitch_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_pitch_deg(), target);
  }

  // double roll_deg = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_roll_deg = this->_internal_roll_deg();
  uint64_t raw_roll_deg;
  memcpy(&raw_roll_deg, &tmp_roll_deg, sizeof(tmp_roll_deg));
  if (raw_roll_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_roll_deg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.YprOrientation)
  return target;
}

size_t YprOrientation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.YprOrientation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // double yaw_deg = 1;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_yaw_deg = this->_internal_yaw_deg();
  uint64_t raw_yaw_deg;
  memcpy(&raw_yaw_deg, &tmp_yaw_deg, sizeof(tmp_yaw_deg));
  if (raw_yaw_deg != 0) {
    total_size += 1 + 8;
  }

  // double pitch_deg = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pitch_deg = this->_internal_pitch_deg();
  uint64_t raw_pitch_deg;
  memcpy(&raw_pitch_deg, &tmp_pitch_deg, sizeof(tmp_pitch_deg));
  if (raw_pitch_deg != 0) {
    total_size += 1 + 8;
  }

  // double roll_deg = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_roll_deg = this->_internal_roll_deg();
  uint64_t raw_roll_deg;
  memcpy(&raw_roll_deg, &tmp_roll_deg, sizeof(tmp_roll_deg));
  if (raw_roll_deg != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData YprOrientation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    YprOrientation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*YprOrientation::GetClassData() const { return &_class_data_; }

void YprOrientation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<YprOrientation *>(to)->MergeFrom(
      static_cast<const YprOrientation &>(from));
}


void YprOrientation::MergeFrom(const YprOrientation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.YprOrientation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_yaw_deg = from._internal_yaw_deg();
  uint64_t raw_yaw_deg;
  memcpy(&raw_yaw_deg, &tmp_yaw_deg, sizeof(tmp_yaw_deg));
  if (raw_yaw_deg != 0) {
    _internal_set_yaw_deg(from._internal_yaw_deg());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_pitch_deg = from._internal_pitch_deg();
  uint64_t raw_pitch_deg;
  memcpy(&raw_pitch_deg, &tmp_pitch_deg, sizeof(tmp_pitch_deg));
  if (raw_pitch_deg != 0) {
    _internal_set_pitch_deg(from._internal_pitch_deg());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_roll_deg = from._internal_roll_deg();
  uint64_t raw_roll_deg;
  memcpy(&raw_roll_deg, &tmp_roll_deg, sizeof(tmp_roll_deg));
  if (raw_roll_deg != 0) {
    _internal_set_roll_deg(from._internal_roll_deg());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void YprOrientation::CopyFrom(const YprOrientation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.YprOrientation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YprOrientation::IsInitialized() const {
  return true;
}

void YprOrientation::InternalSwap(YprOrientation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(YprOrientation, roll_deg_)
      + sizeof(YprOrientation::roll_deg_)
      - PROTOBUF_FIELD_OFFSET(YprOrientation, yaw_deg_)>(
          reinterpret_cast<char*>(&yaw_deg_),
          reinterpret_cast<char*>(&other->yaw_deg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata YprOrientation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[4]);
}

// ===================================================================

class Orientation::_Internal {
 public:
  static const ::onos::topo::AzElOrientation& azel(const Orientation* msg);
  static const ::onos::topo::YprOrientation& ypr(const Orientation* msg);
};

const ::onos::topo::AzElOrientation&
Orientation::_Internal::azel(const Orientation* msg) {
  return *msg->orientation_.azel_;
}
const ::onos::topo::YprOrientation&
Orientation::_Internal::ypr(const Orientation* msg) {
  return *msg->orientation_.ypr_;
}
void Orientation::set_allocated_azel(::onos::topo::AzElOrientation* azel) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_orientation();
  if (azel) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::topo::AzElOrientation>::GetOwningArena(azel);
    if (message_arena != submessage_arena) {
      azel = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, azel, submessage_arena);
    }
    set_has_azel();
    orientation_.azel_ = azel;
  }
  // @@protoc_insertion_point(field_set_allocated:onos.topo.Orientation.azel)
}
void Orientation::set_allocated_ypr(::onos::topo::YprOrientation* ypr) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_orientation();
  if (ypr) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::topo::YprOrientation>::GetOwningArena(ypr);
    if (message_arena != submessage_arena) {
      ypr = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ypr, submessage_arena);
    }
    set_has_ypr();
    orientation_.ypr_ = ypr;
  }
  // @@protoc_insertion_point(field_set_allocated:onos.topo.Orientation.ypr)
}
Orientation::Orientation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.Orientation)
}
Orientation::Orientation(const Orientation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_orientation();
  switch (from.orientation_case()) {
    case kAzel: {
      _internal_mutable_azel()->::onos::topo::AzElOrientation::MergeFrom(from._internal_azel());
      break;
    }
    case kYpr: {
      _internal_mutable_ypr()->::onos::topo::YprOrientation::MergeFrom(from._internal_ypr());
      break;
    }
    case ORIENTATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:onos.topo.Orientation)
}

inline void Orientation::SharedCtor() {
clear_has_orientation();
}

Orientation::~Orientation() {
  // @@protoc_insertion_point(destructor:onos.topo.Orientation)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Orientation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_orientation()) {
    clear_orientation();
  }
}

void Orientation::ArenaDtor(void* object) {
  Orientation* _this = reinterpret_cast< Orientation* >(object);
  (void)_this;
}
void Orientation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Orientation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Orientation::clear_orientation() {
// @@protoc_insertion_point(one_of_clear_start:onos.topo.Orientation)
  switch (orientation_case()) {
    case kAzel: {
      if (GetArenaForAllocation() == nullptr) {
        delete orientation_.azel_;
      }
      break;
    }
    case kYpr: {
      if (GetArenaForAllocation() == nullptr) {
        delete orientation_.ypr_;
      }
      break;
    }
    case ORIENTATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ORIENTATION_NOT_SET;
}


void Orientation::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.Orientation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_orientation();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Orientation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .onos.topo.AzElOrientation azel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_azel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.topo.YprOrientation ypr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ypr(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Orientation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.Orientation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .onos.topo.AzElOrientation azel = 1;
  if (_internal_has_azel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::azel(this), target, stream);
  }

  // .onos.topo.YprOrientation ypr = 2;
  if (_internal_has_ypr()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ypr(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.Orientation)
  return target;
}

size_t Orientation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.Orientation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (orientation_case()) {
    // .onos.topo.AzElOrientation azel = 1;
    case kAzel: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *orientation_.azel_);
      break;
    }
    // .onos.topo.YprOrientation ypr = 2;
    case kYpr: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *orientation_.ypr_);
      break;
    }
    case ORIENTATION_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Orientation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Orientation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Orientation::GetClassData() const { return &_class_data_; }

void Orientation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Orientation *>(to)->MergeFrom(
      static_cast<const Orientation &>(from));
}


void Orientation::MergeFrom(const Orientation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.Orientation)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.orientation_case()) {
    case kAzel: {
      _internal_mutable_azel()->::onos::topo::AzElOrientation::MergeFrom(from._internal_azel());
      break;
    }
    case kYpr: {
      _internal_mutable_ypr()->::onos::topo::YprOrientation::MergeFrom(from._internal_ypr());
      break;
    }
    case ORIENTATION_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Orientation::CopyFrom(const Orientation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.Orientation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Orientation::IsInitialized() const {
  return true;
}

void Orientation::InternalSwap(Orientation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(orientation_, other->orientation_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Orientation::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[5]);
}

// ===================================================================

class Waypoint::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& time(const Waypoint* msg);
  static const ::onos::topo::Location& location(const Waypoint* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Waypoint::_Internal::time(const Waypoint* msg) {
  return *msg->time_;
}
const ::onos::topo::Location&
Waypoint::_Internal::location(const Waypoint* msg) {
  return *msg->location_;
}
void Waypoint::clear_time() {
  if (GetArenaForAllocation() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
}
Waypoint::Waypoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.Waypoint)
}
Waypoint::Waypoint(const Waypoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_time()) {
    time_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.time_);
  } else {
    time_ = nullptr;
  }
  if (from._internal_has_location()) {
    location_ = new ::onos::topo::Location(*from.location_);
  } else {
    location_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:onos.topo.Waypoint)
}

inline void Waypoint::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&time_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&location_) -
    reinterpret_cast<char*>(&time_)) + sizeof(location_));
}

Waypoint::~Waypoint() {
  // @@protoc_insertion_point(destructor:onos.topo.Waypoint)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Waypoint::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete time_;
  if (this != internal_default_instance()) delete location_;
}

void Waypoint::ArenaDtor(void* object) {
  Waypoint* _this = reinterpret_cast< Waypoint* >(object);
  (void)_this;
}
void Waypoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Waypoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Waypoint::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.Waypoint)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && time_ != nullptr) {
    delete time_;
  }
  time_ = nullptr;
  if (GetArenaForAllocation() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Waypoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_time(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.topo.Location location = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Waypoint::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.Waypoint)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time = 1;
  if (this->_internal_has_time()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::time(this), target, stream);
  }

  // .onos.topo.Location location = 2;
  if (this->_internal_has_location()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::location(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.Waypoint)
  return target;
}

size_t Waypoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.Waypoint)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp time = 1;
  if (this->_internal_has_time()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *time_);
  }

  // .onos.topo.Location location = 2;
  if (this->_internal_has_location()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *location_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Waypoint::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Waypoint::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Waypoint::GetClassData() const { return &_class_data_; }

void Waypoint::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Waypoint *>(to)->MergeFrom(
      static_cast<const Waypoint &>(from));
}


void Waypoint::MergeFrom(const Waypoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.Waypoint)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_time()) {
    _internal_mutable_time()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_time());
  }
  if (from._internal_has_location()) {
    _internal_mutable_location()->::onos::topo::Location::MergeFrom(from._internal_location());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Waypoint::CopyFrom(const Waypoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.Waypoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Waypoint::IsInitialized() const {
  return true;
}

void Waypoint::InternalSwap(Waypoint* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Waypoint, location_)
      + sizeof(Waypoint::location_)
      - PROTOBUF_FIELD_OFFSET(Waypoint, time_)>(
          reinterpret_cast<char*>(&time_),
          reinterpret_cast<char*>(&other->time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Waypoint::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[6]);
}

// ===================================================================

class Waypoints::_Internal {
 public:
};

Waypoints::Waypoints(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  waypoint_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.Waypoints)
}
Waypoints::Waypoints(const Waypoints& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      waypoint_(from.waypoint_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:onos.topo.Waypoints)
}

inline void Waypoints::SharedCtor() {
}

Waypoints::~Waypoints() {
  // @@protoc_insertion_point(destructor:onos.topo.Waypoints)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Waypoints::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Waypoints::ArenaDtor(void* object) {
  Waypoints* _this = reinterpret_cast< Waypoints* >(object);
  (void)_this;
}
void Waypoints::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Waypoints::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Waypoints::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.Waypoints)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  waypoint_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Waypoints::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .onos.topo.Waypoint waypoint = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_waypoint(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Waypoints::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.Waypoints)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .onos.topo.Waypoint waypoint = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_waypoint_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_waypoint(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.Waypoints)
  return target;
}

size_t Waypoints::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.Waypoints)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .onos.topo.Waypoint waypoint = 1;
  total_size += 1UL * this->_internal_waypoint_size();
  for (const auto& msg : this->waypoint_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Waypoints::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Waypoints::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Waypoints::GetClassData() const { return &_class_data_; }

void Waypoints::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Waypoints *>(to)->MergeFrom(
      static_cast<const Waypoints &>(from));
}


void Waypoints::MergeFrom(const Waypoints& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.Waypoints)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  waypoint_.MergeFrom(from.waypoint_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Waypoints::CopyFrom(const Waypoints& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.Waypoints)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Waypoints::IsInitialized() const {
  return true;
}

void Waypoints::InternalSwap(Waypoints* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  waypoint_.InternalSwap(&other->waypoint_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Waypoints::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[7]);
}

// ===================================================================

class OrbitData::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& epoch(const OrbitData* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
OrbitData::_Internal::epoch(const OrbitData* msg) {
  return *msg->epoch_;
}
void OrbitData::clear_epoch() {
  if (GetArenaForAllocation() == nullptr && epoch_ != nullptr) {
    delete epoch_;
  }
  epoch_ = nullptr;
}
OrbitData::OrbitData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.OrbitData)
}
OrbitData::OrbitData(const OrbitData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_epoch()) {
    epoch_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.epoch_);
  } else {
    epoch_ = nullptr;
  }
  ::memcpy(&inclination_deg_, &from.inclination_deg_,
    static_cast<size_t>(reinterpret_cast<char*>(&mean_motion_) -
    reinterpret_cast<char*>(&inclination_deg_)) + sizeof(mean_motion_));
  // @@protoc_insertion_point(copy_constructor:onos.topo.OrbitData)
}

inline void OrbitData::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&epoch_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&mean_motion_) -
    reinterpret_cast<char*>(&epoch_)) + sizeof(mean_motion_));
}

OrbitData::~OrbitData() {
  // @@protoc_insertion_point(destructor:onos.topo.OrbitData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void OrbitData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete epoch_;
}

void OrbitData::ArenaDtor(void* object) {
  OrbitData* _this = reinterpret_cast< OrbitData* >(object);
  (void)_this;
}
void OrbitData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OrbitData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void OrbitData::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.OrbitData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && epoch_ != nullptr) {
    delete epoch_;
  }
  epoch_ = nullptr;
  ::memset(&inclination_deg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&mean_motion_) -
      reinterpret_cast<char*>(&inclination_deg_)) + sizeof(mean_motion_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OrbitData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp epoch = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_epoch(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // double inclination_deg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 17)) {
          inclination_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double raan_deg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 25)) {
          raan_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double e = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 33)) {
          e_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double argument_deg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 41)) {
          argument_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double anomaly_deg = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 49)) {
          anomaly_deg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      // double mean_motion = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 57)) {
          mean_motion_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* OrbitData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.OrbitData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp epoch = 1;
  if (this->_internal_has_epoch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::epoch(this), target, stream);
  }

  // double inclination_deg = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_inclination_deg = this->_internal_inclination_deg();
  uint64_t raw_inclination_deg;
  memcpy(&raw_inclination_deg, &tmp_inclination_deg, sizeof(tmp_inclination_deg));
  if (raw_inclination_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_inclination_deg(), target);
  }

  // double raan_deg = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_raan_deg = this->_internal_raan_deg();
  uint64_t raw_raan_deg;
  memcpy(&raw_raan_deg, &tmp_raan_deg, sizeof(tmp_raan_deg));
  if (raw_raan_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_raan_deg(), target);
  }

  // double e = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_e = this->_internal_e();
  uint64_t raw_e;
  memcpy(&raw_e, &tmp_e, sizeof(tmp_e));
  if (raw_e != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_e(), target);
  }

  // double argument_deg = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_argument_deg = this->_internal_argument_deg();
  uint64_t raw_argument_deg;
  memcpy(&raw_argument_deg, &tmp_argument_deg, sizeof(tmp_argument_deg));
  if (raw_argument_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_argument_deg(), target);
  }

  // double anomaly_deg = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_anomaly_deg = this->_internal_anomaly_deg();
  uint64_t raw_anomaly_deg;
  memcpy(&raw_anomaly_deg, &tmp_anomaly_deg, sizeof(tmp_anomaly_deg));
  if (raw_anomaly_deg != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_anomaly_deg(), target);
  }

  // double mean_motion = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_mean_motion = this->_internal_mean_motion();
  uint64_t raw_mean_motion;
  memcpy(&raw_mean_motion, &tmp_mean_motion, sizeof(tmp_mean_motion));
  if (raw_mean_motion != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_mean_motion(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.OrbitData)
  return target;
}

size_t OrbitData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.OrbitData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp epoch = 1;
  if (this->_internal_has_epoch()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *epoch_);
  }

  // double inclination_deg = 2;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_inclination_deg = this->_internal_inclination_deg();
  uint64_t raw_inclination_deg;
  memcpy(&raw_inclination_deg, &tmp_inclination_deg, sizeof(tmp_inclination_deg));
  if (raw_inclination_deg != 0) {
    total_size += 1 + 8;
  }

  // double raan_deg = 3;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_raan_deg = this->_internal_raan_deg();
  uint64_t raw_raan_deg;
  memcpy(&raw_raan_deg, &tmp_raan_deg, sizeof(tmp_raan_deg));
  if (raw_raan_deg != 0) {
    total_size += 1 + 8;
  }

  // double e = 4;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_e = this->_internal_e();
  uint64_t raw_e;
  memcpy(&raw_e, &tmp_e, sizeof(tmp_e));
  if (raw_e != 0) {
    total_size += 1 + 8;
  }

  // double argument_deg = 5;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_argument_deg = this->_internal_argument_deg();
  uint64_t raw_argument_deg;
  memcpy(&raw_argument_deg, &tmp_argument_deg, sizeof(tmp_argument_deg));
  if (raw_argument_deg != 0) {
    total_size += 1 + 8;
  }

  // double anomaly_deg = 6;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_anomaly_deg = this->_internal_anomaly_deg();
  uint64_t raw_anomaly_deg;
  memcpy(&raw_anomaly_deg, &tmp_anomaly_deg, sizeof(tmp_anomaly_deg));
  if (raw_anomaly_deg != 0) {
    total_size += 1 + 8;
  }

  // double mean_motion = 7;
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_mean_motion = this->_internal_mean_motion();
  uint64_t raw_mean_motion;
  memcpy(&raw_mean_motion, &tmp_mean_motion, sizeof(tmp_mean_motion));
  if (raw_mean_motion != 0) {
    total_size += 1 + 8;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData OrbitData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    OrbitData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*OrbitData::GetClassData() const { return &_class_data_; }

void OrbitData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<OrbitData *>(to)->MergeFrom(
      static_cast<const OrbitData &>(from));
}


void OrbitData::MergeFrom(const OrbitData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.OrbitData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_epoch()) {
    _internal_mutable_epoch()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_epoch());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_inclination_deg = from._internal_inclination_deg();
  uint64_t raw_inclination_deg;
  memcpy(&raw_inclination_deg, &tmp_inclination_deg, sizeof(tmp_inclination_deg));
  if (raw_inclination_deg != 0) {
    _internal_set_inclination_deg(from._internal_inclination_deg());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_raan_deg = from._internal_raan_deg();
  uint64_t raw_raan_deg;
  memcpy(&raw_raan_deg, &tmp_raan_deg, sizeof(tmp_raan_deg));
  if (raw_raan_deg != 0) {
    _internal_set_raan_deg(from._internal_raan_deg());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_e = from._internal_e();
  uint64_t raw_e;
  memcpy(&raw_e, &tmp_e, sizeof(tmp_e));
  if (raw_e != 0) {
    _internal_set_e(from._internal_e());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_argument_deg = from._internal_argument_deg();
  uint64_t raw_argument_deg;
  memcpy(&raw_argument_deg, &tmp_argument_deg, sizeof(tmp_argument_deg));
  if (raw_argument_deg != 0) {
    _internal_set_argument_deg(from._internal_argument_deg());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_anomaly_deg = from._internal_anomaly_deg();
  uint64_t raw_anomaly_deg;
  memcpy(&raw_anomaly_deg, &tmp_anomaly_deg, sizeof(tmp_anomaly_deg));
  if (raw_anomaly_deg != 0) {
    _internal_set_anomaly_deg(from._internal_anomaly_deg());
  }
  static_assert(sizeof(uint64_t) == sizeof(double), "Code assumes uint64_t and double are the same size.");
  double tmp_mean_motion = from._internal_mean_motion();
  uint64_t raw_mean_motion;
  memcpy(&raw_mean_motion, &tmp_mean_motion, sizeof(tmp_mean_motion));
  if (raw_mean_motion != 0) {
    _internal_set_mean_motion(from._internal_mean_motion());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void OrbitData::CopyFrom(const OrbitData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.OrbitData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OrbitData::IsInitialized() const {
  return true;
}

void OrbitData::InternalSwap(OrbitData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OrbitData, mean_motion_)
      + sizeof(OrbitData::mean_motion_)
      - PROTOBUF_FIELD_OFFSET(OrbitData, epoch_)>(
          reinterpret_cast<char*>(&epoch_),
          reinterpret_cast<char*>(&other->epoch_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OrbitData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[8]);
}

// ===================================================================

class Motion::_Internal {
 public:
  static const ::onos::topo::Location& fixed_location(const Motion* msg);
  static const ::onos::topo::Waypoints& waypoints(const Motion* msg);
  static const ::onos::topo::OrbitData& orbit(const Motion* msg);
};

const ::onos::topo::Location&
Motion::_Internal::fixed_location(const Motion* msg) {
  return *msg->motion_.fixed_location_;
}
const ::onos::topo::Waypoints&
Motion::_Internal::waypoints(const Motion* msg) {
  return *msg->motion_.waypoints_;
}
const ::onos::topo::OrbitData&
Motion::_Internal::orbit(const Motion* msg) {
  return *msg->motion_.orbit_;
}
void Motion::set_allocated_fixed_location(::onos::topo::Location* fixed_location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_motion();
  if (fixed_location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::topo::Location>::GetOwningArena(fixed_location);
    if (message_arena != submessage_arena) {
      fixed_location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fixed_location, submessage_arena);
    }
    set_has_fixed_location();
    motion_.fixed_location_ = fixed_location;
  }
  // @@protoc_insertion_point(field_set_allocated:onos.topo.Motion.fixed_location)
}
void Motion::set_allocated_waypoints(::onos::topo::Waypoints* waypoints) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_motion();
  if (waypoints) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::topo::Waypoints>::GetOwningArena(waypoints);
    if (message_arena != submessage_arena) {
      waypoints = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, waypoints, submessage_arena);
    }
    set_has_waypoints();
    motion_.waypoints_ = waypoints;
  }
  // @@protoc_insertion_point(field_set_allocated:onos.topo.Motion.waypoints)
}
void Motion::set_allocated_orbit(::onos::topo::OrbitData* orbit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_motion();
  if (orbit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::topo::OrbitData>::GetOwningArena(orbit);
    if (message_arena != submessage_arena) {
      orbit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orbit, submessage_arena);
    }
    set_has_orbit();
    motion_.orbit_ = orbit;
  }
  // @@protoc_insertion_point(field_set_allocated:onos.topo.Motion.orbit)
}
Motion::Motion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.Motion)
}
Motion::Motion(const Motion& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_motion();
  switch (from.motion_case()) {
    case kFixedLocation: {
      _internal_mutable_fixed_location()->::onos::topo::Location::MergeFrom(from._internal_fixed_location());
      break;
    }
    case kWaypoints: {
      _internal_mutable_waypoints()->::onos::topo::Waypoints::MergeFrom(from._internal_waypoints());
      break;
    }
    case kOrbit: {
      _internal_mutable_orbit()->::onos::topo::OrbitData::MergeFrom(from._internal_orbit());
      break;
    }
    case MOTION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:onos.topo.Motion)
}

inline void Motion::SharedCtor() {
clear_has_motion();
}

Motion::~Motion() {
  // @@protoc_insertion_point(destructor:onos.topo.Motion)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Motion::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_motion()) {
    clear_motion();
  }
}

void Motion::ArenaDtor(void* object) {
  Motion* _this = reinterpret_cast< Motion* >(object);
  (void)_this;
}
void Motion::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Motion::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Motion::clear_motion() {
// @@protoc_insertion_point(one_of_clear_start:onos.topo.Motion)
  switch (motion_case()) {
    case kFixedLocation: {
      if (GetArenaForAllocation() == nullptr) {
        delete motion_.fixed_location_;
      }
      break;
    }
    case kWaypoints: {
      if (GetArenaForAllocation() == nullptr) {
        delete motion_.waypoints_;
      }
      break;
    }
    case kOrbit: {
      if (GetArenaForAllocation() == nullptr) {
        delete motion_.orbit_;
      }
      break;
    }
    case MOTION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MOTION_NOT_SET;
}


void Motion::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.Motion)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_motion();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Motion::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .onos.topo.Location fixed_location = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_fixed_location(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.topo.Waypoints waypoints = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_waypoints(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.topo.OrbitData orbit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_orbit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Motion::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.Motion)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .onos.topo.Location fixed_location = 1;
  if (_internal_has_fixed_location()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::fixed_location(this), target, stream);
  }

  // .onos.topo.Waypoints waypoints = 2;
  if (_internal_has_waypoints()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::waypoints(this), target, stream);
  }

  // .onos.topo.OrbitData orbit = 3;
  if (_internal_has_orbit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::orbit(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.Motion)
  return target;
}

size_t Motion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.Motion)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (motion_case()) {
    // .onos.topo.Location fixed_location = 1;
    case kFixedLocation: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *motion_.fixed_location_);
      break;
    }
    // .onos.topo.Waypoints waypoints = 2;
    case kWaypoints: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *motion_.waypoints_);
      break;
    }
    // .onos.topo.OrbitData orbit = 3;
    case kOrbit: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *motion_.orbit_);
      break;
    }
    case MOTION_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Motion::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Motion::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Motion::GetClassData() const { return &_class_data_; }

void Motion::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Motion *>(to)->MergeFrom(
      static_cast<const Motion &>(from));
}


void Motion::MergeFrom(const Motion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.Motion)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.motion_case()) {
    case kFixedLocation: {
      _internal_mutable_fixed_location()->::onos::topo::Location::MergeFrom(from._internal_fixed_location());
      break;
    }
    case kWaypoints: {
      _internal_mutable_waypoints()->::onos::topo::Waypoints::MergeFrom(from._internal_waypoints());
      break;
    }
    case kOrbit: {
      _internal_mutable_orbit()->::onos::topo::OrbitData::MergeFrom(from._internal_orbit());
      break;
    }
    case MOTION_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Motion::CopyFrom(const Motion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.Motion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Motion::IsInitialized() const {
  return true;
}

void Motion::InternalSwap(Motion* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(motion_, other->motion_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Motion::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[9]);
}

// ===================================================================

class Coverage::_Internal {
 public:
};

Coverage::Coverage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.Coverage)
}
Coverage::Coverage(const Coverage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&tilt_) -
    reinterpret_cast<char*>(&height_)) + sizeof(tilt_));
  // @@protoc_insertion_point(copy_constructor:onos.topo.Coverage)
}

inline void Coverage::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&height_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&tilt_) -
    reinterpret_cast<char*>(&height_)) + sizeof(tilt_));
}

Coverage::~Coverage() {
  // @@protoc_insertion_point(destructor:onos.topo.Coverage)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Coverage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Coverage::ArenaDtor(void* object) {
  Coverage* _this = reinterpret_cast< Coverage* >(object);
  (void)_this;
}
void Coverage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Coverage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Coverage::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.Coverage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tilt_) -
      reinterpret_cast<char*>(&height_)) + sizeof(tilt_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Coverage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 height = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 arc_width = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          arc_width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 azimuth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          azimuth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 tilt = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          tilt_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Coverage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.Coverage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 height = 1;
  if (this->_internal_height() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_height(), target);
  }

  // int32 arc_width = 2;
  if (this->_internal_arc_width() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_arc_width(), target);
  }

  // int32 azimuth = 3;
  if (this->_internal_azimuth() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_azimuth(), target);
  }

  // int32 tilt = 4;
  if (this->_internal_tilt() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_tilt(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.Coverage)
  return target;
}

size_t Coverage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.Coverage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 height = 1;
  if (this->_internal_height() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_height());
  }

  // int32 arc_width = 2;
  if (this->_internal_arc_width() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_arc_width());
  }

  // int32 azimuth = 3;
  if (this->_internal_azimuth() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_azimuth());
  }

  // int32 tilt = 4;
  if (this->_internal_tilt() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_tilt());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Coverage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Coverage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Coverage::GetClassData() const { return &_class_data_; }

void Coverage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Coverage *>(to)->MergeFrom(
      static_cast<const Coverage &>(from));
}


void Coverage::MergeFrom(const Coverage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.Coverage)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_height() != 0) {
    _internal_set_height(from._internal_height());
  }
  if (from._internal_arc_width() != 0) {
    _internal_set_arc_width(from._internal_arc_width());
  }
  if (from._internal_azimuth() != 0) {
    _internal_set_azimuth(from._internal_azimuth());
  }
  if (from._internal_tilt() != 0) {
    _internal_set_tilt(from._internal_tilt());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Coverage::CopyFrom(const Coverage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.Coverage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Coverage::IsInitialized() const {
  return true;
}

void Coverage::InternalSwap(Coverage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Coverage, tilt_)
      + sizeof(Coverage::tilt_)
      - PROTOBUF_FIELD_OFFSET(Coverage, height_)>(
          reinterpret_cast<char*>(&height_),
          reinterpret_cast<char*>(&other->height_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Coverage::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[10]);
}

// ===================================================================

E2Node_ServiceModelsEntry_DoNotUse::E2Node_ServiceModelsEntry_DoNotUse() {}
E2Node_ServiceModelsEntry_DoNotUse::E2Node_ServiceModelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void E2Node_ServiceModelsEntry_DoNotUse::MergeFrom(const E2Node_ServiceModelsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata E2Node_ServiceModelsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[11]);
}

// ===================================================================

class E2Node::_Internal {
 public:
};

E2Node::E2Node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  service_models_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.E2Node)
}
E2Node::E2Node(const E2Node& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  service_models_.MergeFrom(from.service_models_);
  // @@protoc_insertion_point(copy_constructor:onos.topo.E2Node)
}

inline void E2Node::SharedCtor() {
}

E2Node::~E2Node() {
  // @@protoc_insertion_point(destructor:onos.topo.E2Node)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void E2Node::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void E2Node::ArenaDtor(void* object) {
  E2Node* _this = reinterpret_cast< E2Node* >(object);
  (void)_this;
  _this->service_models_. ~MapField();
}
inline void E2Node::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &E2Node::ArenaDtor);
  }
}
void E2Node::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void E2Node::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.E2Node)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  service_models_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* E2Node::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .onos.topo.ServiceModelInfo> service_models = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&service_models_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* E2Node::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.E2Node)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .onos.topo.ServiceModelInfo> service_models = 1;
  if (!this->_internal_service_models().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::topo::ServiceModelInfo >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "onos.topo.E2Node.ServiceModelsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_service_models().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_service_models().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::topo::ServiceModelInfo >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::topo::ServiceModelInfo >::const_iterator
          it = this->_internal_service_models().begin();
          it != this->_internal_service_models().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = E2Node_ServiceModelsEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::topo::ServiceModelInfo >::const_iterator
          it = this->_internal_service_models().begin();
          it != this->_internal_service_models().end(); ++it) {
        target = E2Node_ServiceModelsEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.E2Node)
  return target;
}

size_t E2Node::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.E2Node)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .onos.topo.ServiceModelInfo> service_models = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_service_models_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::topo::ServiceModelInfo >::const_iterator
      it = this->_internal_service_models().begin();
      it != this->_internal_service_models().end(); ++it) {
    total_size += E2Node_ServiceModelsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData E2Node::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    E2Node::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*E2Node::GetClassData() const { return &_class_data_; }

void E2Node::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<E2Node *>(to)->MergeFrom(
      static_cast<const E2Node &>(from));
}


void E2Node::MergeFrom(const E2Node& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.E2Node)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  service_models_.MergeFrom(from.service_models_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void E2Node::CopyFrom(const E2Node& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.E2Node)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E2Node::IsInitialized() const {
  return true;
}

void E2Node::InternalSwap(E2Node* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  service_models_.InternalSwap(&other->service_models_);
}

::PROTOBUF_NAMESPACE_ID::Metadata E2Node::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[12]);
}

// ===================================================================

class E2NodeConfig::_Internal {
 public:
};

E2NodeConfig::E2NodeConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  connections_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.E2NodeConfig)
}
E2NodeConfig::E2NodeConfig(const E2NodeConfig& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      connections_(from.connections_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:onos.topo.E2NodeConfig)
}

inline void E2NodeConfig::SharedCtor() {
version_ = uint64_t{0u};
}

E2NodeConfig::~E2NodeConfig() {
  // @@protoc_insertion_point(destructor:onos.topo.E2NodeConfig)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void E2NodeConfig::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void E2NodeConfig::ArenaDtor(void* object) {
  E2NodeConfig* _this = reinterpret_cast< E2NodeConfig* >(object);
  (void)_this;
}
void E2NodeConfig::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void E2NodeConfig::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void E2NodeConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.E2NodeConfig)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  connections_.Clear();
  version_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* E2NodeConfig::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .onos.topo.Interface connections = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_connections(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 version = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          version_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* E2NodeConfig::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.E2NodeConfig)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .onos.topo.Interface connections = 1 [(.gogoproto.nullable) = false];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_connections_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_connections(i), target, stream);
  }

  // uint64 version = 2;
  if (this->_internal_version() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.E2NodeConfig)
  return target;
}

size_t E2NodeConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.E2NodeConfig)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .onos.topo.Interface connections = 1 [(.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_connections_size();
  for (const auto& msg : this->connections_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // uint64 version = 2;
  if (this->_internal_version() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData E2NodeConfig::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    E2NodeConfig::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*E2NodeConfig::GetClassData() const { return &_class_data_; }

void E2NodeConfig::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<E2NodeConfig *>(to)->MergeFrom(
      static_cast<const E2NodeConfig &>(from));
}


void E2NodeConfig::MergeFrom(const E2NodeConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.E2NodeConfig)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  connections_.MergeFrom(from.connections_);
  if (from._internal_version() != 0) {
    _internal_set_version(from._internal_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void E2NodeConfig::CopyFrom(const E2NodeConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.E2NodeConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E2NodeConfig::IsInitialized() const {
  return true;
}

void E2NodeConfig::InternalSwap(E2NodeConfig* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  connections_.InternalSwap(&other->connections_);
  swap(version_, other->version_);
}

::PROTOBUF_NAMESPACE_ID::Metadata E2NodeConfig::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[13]);
}

// ===================================================================

class Lease::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& expiration(const Lease* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
Lease::_Internal::expiration(const Lease* msg) {
  return *msg->expiration_;
}
void Lease::clear_expiration() {
  if (GetArenaForAllocation() == nullptr && expiration_ != nullptr) {
    delete expiration_;
  }
  expiration_ = nullptr;
}
Lease::Lease(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.Lease)
}
Lease::Lease(const Lease& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_expiration()) {
    expiration_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.expiration_);
  } else {
    expiration_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:onos.topo.Lease)
}

inline void Lease::SharedCtor() {
expiration_ = nullptr;
}

Lease::~Lease() {
  // @@protoc_insertion_point(destructor:onos.topo.Lease)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Lease::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete expiration_;
}

void Lease::ArenaDtor(void* object) {
  Lease* _this = reinterpret_cast< Lease* >(object);
  (void)_this;
}
void Lease::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Lease::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Lease::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.Lease)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && expiration_ != nullptr) {
    delete expiration_;
  }
  expiration_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Lease::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp expiration = 1 [(.gogoproto.stdtime) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_expiration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Lease::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.Lease)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp expiration = 1 [(.gogoproto.stdtime) = true];
  if (this->_internal_has_expiration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::expiration(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.Lease)
  return target;
}

size_t Lease::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.Lease)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp expiration = 1 [(.gogoproto.stdtime) = true];
  if (this->_internal_has_expiration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expiration_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Lease::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Lease::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Lease::GetClassData() const { return &_class_data_; }

void Lease::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Lease *>(to)->MergeFrom(
      static_cast<const Lease &>(from));
}


void Lease::MergeFrom(const Lease& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.Lease)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_expiration()) {
    _internal_mutable_expiration()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_expiration());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Lease::CopyFrom(const Lease& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.Lease)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Lease::IsInitialized() const {
  return true;
}

void Lease::InternalSwap(Lease* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(expiration_, other->expiration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Lease::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[14]);
}

// ===================================================================

class Interface::_Internal {
 public:
};

Interface::Interface(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.Interface)
}
Interface::Interface(const Interface& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ip().empty()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArenaForAllocation());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&type_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:onos.topo.Interface)
}

inline void Interface::SharedCtor() {
ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&type_)) + sizeof(port_));
}

Interface::~Interface() {
  // @@protoc_insertion_point(destructor:onos.topo.Interface)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Interface::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Interface::ArenaDtor(void* object) {
  Interface* _this = reinterpret_cast< Interface* >(object);
  (void)_this;
}
void Interface::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Interface::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Interface::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.Interface)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ip_.ClearToEmpty();
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&type_)) + sizeof(port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Interface::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .onos.topo.Interface.Type type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::onos::topo::Interface_Type>(val));
        } else
          goto handle_unusual;
        continue;
      // string ip = 2 [(.gogoproto.customname) = "IP"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.topo.Interface.ip"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Interface::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.Interface)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .onos.topo.Interface.Type type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // string ip = 2 [(.gogoproto.customname) = "IP"];
  if (!this->_internal_ip().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ip().data(), static_cast<int>(this->_internal_ip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.topo.Interface.ip");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ip(), target);
  }

  // uint32 port = 3;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.Interface)
  return target;
}

size_t Interface::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.Interface)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ip = 2 [(.gogoproto.customname) = "IP"];
  if (!this->_internal_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ip());
  }

  // .onos.topo.Interface.Type type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // uint32 port = 3;
  if (this->_internal_port() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Interface::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Interface::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Interface::GetClassData() const { return &_class_data_; }

void Interface::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Interface *>(to)->MergeFrom(
      static_cast<const Interface &>(from));
}


void Interface::MergeFrom(const Interface& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.Interface)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ip().empty()) {
    _internal_set_ip(from._internal_ip());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_port() != 0) {
    _internal_set_port(from._internal_port());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Interface::CopyFrom(const Interface& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.Interface)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Interface::IsInitialized() const {
  return true;
}

void Interface::InternalSwap(Interface* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_, lhs_arena,
      &other->ip_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Interface, port_)
      + sizeof(Interface::port_)
      - PROTOBUF_FIELD_OFFSET(Interface, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Interface::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[15]);
}

// ===================================================================

class E2TInfo::_Internal {
 public:
};

E2TInfo::E2TInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  interfaces_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.E2TInfo)
}
E2TInfo::E2TInfo(const E2TInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      interfaces_(from.interfaces_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:onos.topo.E2TInfo)
}

inline void E2TInfo::SharedCtor() {
}

E2TInfo::~E2TInfo() {
  // @@protoc_insertion_point(destructor:onos.topo.E2TInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void E2TInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void E2TInfo::ArenaDtor(void* object) {
  E2TInfo* _this = reinterpret_cast< E2TInfo* >(object);
  (void)_this;
}
void E2TInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void E2TInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void E2TInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.E2TInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  interfaces_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* E2TInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .onos.topo.Interface interfaces = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_interfaces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* E2TInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.E2TInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .onos.topo.Interface interfaces = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_interfaces_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_interfaces(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.E2TInfo)
  return target;
}

size_t E2TInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.E2TInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .onos.topo.Interface interfaces = 1;
  total_size += 1UL * this->_internal_interfaces_size();
  for (const auto& msg : this->interfaces_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData E2TInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    E2TInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*E2TInfo::GetClassData() const { return &_class_data_; }

void E2TInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<E2TInfo *>(to)->MergeFrom(
      static_cast<const E2TInfo &>(from));
}


void E2TInfo::MergeFrom(const E2TInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.E2TInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  interfaces_.MergeFrom(from.interfaces_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void E2TInfo::CopyFrom(const E2TInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.E2TInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E2TInfo::IsInitialized() const {
  return true;
}

void E2TInfo::InternalSwap(E2TInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  interfaces_.InternalSwap(&other->interfaces_);
}

::PROTOBUF_NAMESPACE_ID::Metadata E2TInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[16]);
}

// ===================================================================

class XAppInfo::_Internal {
 public:
};

XAppInfo::XAppInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  interfaces_(arena),
  a1_policy_types_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.XAppInfo)
}
XAppInfo::XAppInfo(const XAppInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      interfaces_(from.interfaces_),
      a1_policy_types_(from.a1_policy_types_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:onos.topo.XAppInfo)
}

inline void XAppInfo::SharedCtor() {
}

XAppInfo::~XAppInfo() {
  // @@protoc_insertion_point(destructor:onos.topo.XAppInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void XAppInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void XAppInfo::ArenaDtor(void* object) {
  XAppInfo* _this = reinterpret_cast< XAppInfo* >(object);
  (void)_this;
}
void XAppInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void XAppInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void XAppInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.XAppInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  interfaces_.Clear();
  a1_policy_types_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* XAppInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .onos.topo.Interface interfaces = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_interfaces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .onos.topo.A1PolicyType a1_policy_types = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_a1_policy_types(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* XAppInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.XAppInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .onos.topo.Interface interfaces = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_interfaces_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_interfaces(i), target, stream);
  }

  // repeated .onos.topo.A1PolicyType a1_policy_types = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_a1_policy_types_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_a1_policy_types(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.XAppInfo)
  return target;
}

size_t XAppInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.XAppInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .onos.topo.Interface interfaces = 1;
  total_size += 1UL * this->_internal_interfaces_size();
  for (const auto& msg : this->interfaces_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .onos.topo.A1PolicyType a1_policy_types = 2;
  total_size += 1UL * this->_internal_a1_policy_types_size();
  for (const auto& msg : this->a1_policy_types_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData XAppInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    XAppInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*XAppInfo::GetClassData() const { return &_class_data_; }

void XAppInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<XAppInfo *>(to)->MergeFrom(
      static_cast<const XAppInfo &>(from));
}


void XAppInfo::MergeFrom(const XAppInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.XAppInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  interfaces_.MergeFrom(from.interfaces_);
  a1_policy_types_.MergeFrom(from.a1_policy_types_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void XAppInfo::CopyFrom(const XAppInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.XAppInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool XAppInfo::IsInitialized() const {
  return true;
}

void XAppInfo::InternalSwap(XAppInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  interfaces_.InternalSwap(&other->interfaces_);
  a1_policy_types_.InternalSwap(&other->a1_policy_types_);
}

::PROTOBUF_NAMESPACE_ID::Metadata XAppInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[17]);
}

// ===================================================================

class A1PolicyType::_Internal {
 public:
};

A1PolicyType::A1PolicyType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.A1PolicyType)
}
A1PolicyType::A1PolicyType(const A1PolicyType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:onos.topo.A1PolicyType)
}

inline void A1PolicyType::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

A1PolicyType::~A1PolicyType() {
  // @@protoc_insertion_point(destructor:onos.topo.A1PolicyType)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void A1PolicyType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void A1PolicyType::ArenaDtor(void* object) {
  A1PolicyType* _this = reinterpret_cast< A1PolicyType* >(object);
  (void)_this;
}
void A1PolicyType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void A1PolicyType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void A1PolicyType::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.A1PolicyType)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  name_.ClearToEmpty();
  version_.ClearToEmpty();
  description_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* A1PolicyType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.casttype) = "PolicyTypeID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.topo.A1PolicyType.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2 [(.gogoproto.customname) = "Name", (.gogoproto.casttype) = "PolicyTypeName"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.topo.A1PolicyType.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string version = 3 [(.gogoproto.customname) = "Version", (.gogoproto.casttype) = "PolicyTypeVersion"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.topo.A1PolicyType.version"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string description = 4 [(.gogoproto.customname) = "Description", (.gogoproto.casttype) = "PolicyTypeDescription"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.topo.A1PolicyType.description"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* A1PolicyType::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.A1PolicyType)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.casttype) = "PolicyTypeID"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.topo.A1PolicyType.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2 [(.gogoproto.customname) = "Name", (.gogoproto.casttype) = "PolicyTypeName"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.topo.A1PolicyType.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string version = 3 [(.gogoproto.customname) = "Version", (.gogoproto.casttype) = "PolicyTypeVersion"];
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.topo.A1PolicyType.version");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_version(), target);
  }

  // string description = 4 [(.gogoproto.customname) = "Description", (.gogoproto.casttype) = "PolicyTypeDescription"];
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.topo.A1PolicyType.description");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_description(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.A1PolicyType)
  return target;
}

size_t A1PolicyType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.A1PolicyType)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.casttype) = "PolicyTypeID"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2 [(.gogoproto.customname) = "Name", (.gogoproto.casttype) = "PolicyTypeName"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string version = 3 [(.gogoproto.customname) = "Version", (.gogoproto.casttype) = "PolicyTypeVersion"];
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // string description = 4 [(.gogoproto.customname) = "Description", (.gogoproto.casttype) = "PolicyTypeDescription"];
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData A1PolicyType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    A1PolicyType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*A1PolicyType::GetClassData() const { return &_class_data_; }

void A1PolicyType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<A1PolicyType *>(to)->MergeFrom(
      static_cast<const A1PolicyType &>(from));
}


void A1PolicyType::MergeFrom(const A1PolicyType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.A1PolicyType)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_version().empty()) {
    _internal_set_version(from._internal_version());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void A1PolicyType::CopyFrom(const A1PolicyType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.A1PolicyType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool A1PolicyType::IsInitialized() const {
  return true;
}

void A1PolicyType::InternalSwap(A1PolicyType* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_, lhs_arena,
      &other->version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, lhs_arena,
      &other->description_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata A1PolicyType::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[18]);
}

// ===================================================================

class A1TInfo::_Internal {
 public:
};

A1TInfo::A1TInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  interfaces_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.A1TInfo)
}
A1TInfo::A1TInfo(const A1TInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      interfaces_(from.interfaces_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:onos.topo.A1TInfo)
}

inline void A1TInfo::SharedCtor() {
}

A1TInfo::~A1TInfo() {
  // @@protoc_insertion_point(destructor:onos.topo.A1TInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void A1TInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void A1TInfo::ArenaDtor(void* object) {
  A1TInfo* _this = reinterpret_cast< A1TInfo* >(object);
  (void)_this;
}
void A1TInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void A1TInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void A1TInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.A1TInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  interfaces_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* A1TInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .onos.topo.Interface interfaces = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_interfaces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* A1TInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.A1TInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .onos.topo.Interface interfaces = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_interfaces_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_interfaces(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.A1TInfo)
  return target;
}

size_t A1TInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.A1TInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .onos.topo.Interface interfaces = 1;
  total_size += 1UL * this->_internal_interfaces_size();
  for (const auto& msg : this->interfaces_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData A1TInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    A1TInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*A1TInfo::GetClassData() const { return &_class_data_; }

void A1TInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<A1TInfo *>(to)->MergeFrom(
      static_cast<const A1TInfo &>(from));
}


void A1TInfo::MergeFrom(const A1TInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.A1TInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  interfaces_.MergeFrom(from.interfaces_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void A1TInfo::CopyFrom(const A1TInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.A1TInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool A1TInfo::IsInitialized() const {
  return true;
}

void A1TInfo::InternalSwap(A1TInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  interfaces_.InternalSwap(&other->interfaces_);
}

::PROTOBUF_NAMESPACE_ID::Metadata A1TInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[19]);
}

// ===================================================================

class CellGlobalID::_Internal {
 public:
};

CellGlobalID::CellGlobalID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.CellGlobalID)
}
CellGlobalID::CellGlobalID(const CellGlobalID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:onos.topo.CellGlobalID)
}

inline void CellGlobalID::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_ = 0;
}

CellGlobalID::~CellGlobalID() {
  // @@protoc_insertion_point(destructor:onos.topo.CellGlobalID)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CellGlobalID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void CellGlobalID::ArenaDtor(void* object) {
  CellGlobalID* _this = reinterpret_cast< CellGlobalID* >(object);
  (void)_this;
}
void CellGlobalID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CellGlobalID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CellGlobalID::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.CellGlobalID)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CellGlobalID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.topo.CellGlobalID.value"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.topo.CellGlobalIDType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::onos::topo::CellGlobalIDType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CellGlobalID::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.CellGlobalID)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.topo.CellGlobalID.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  // .onos.topo.CellGlobalIDType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.CellGlobalID)
  return target;
}

size_t CellGlobalID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.CellGlobalID)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1;
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // .onos.topo.CellGlobalIDType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CellGlobalID::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CellGlobalID::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CellGlobalID::GetClassData() const { return &_class_data_; }

void CellGlobalID::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CellGlobalID *>(to)->MergeFrom(
      static_cast<const CellGlobalID &>(from));
}


void CellGlobalID::MergeFrom(const CellGlobalID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.CellGlobalID)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CellGlobalID::CopyFrom(const CellGlobalID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.CellGlobalID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellGlobalID::IsInitialized() const {
  return true;
}

void CellGlobalID::InternalSwap(CellGlobalID* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, lhs_arena,
      &other->value_, rhs_arena
  );
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CellGlobalID::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[20]);
}

// ===================================================================

class NeighborCellID::_Internal {
 public:
  static const ::onos::topo::CellGlobalID& cell_global_id(const NeighborCellID* msg);
};

const ::onos::topo::CellGlobalID&
NeighborCellID::_Internal::cell_global_id(const NeighborCellID* msg) {
  return *msg->cell_global_id_;
}
NeighborCellID::NeighborCellID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.NeighborCellID)
}
NeighborCellID::NeighborCellID(const NeighborCellID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  plmn_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    plmn_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_plmn_id().empty()) {
    plmn_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_plmn_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_cell_global_id()) {
    cell_global_id_ = new ::onos::topo::CellGlobalID(*from.cell_global_id_);
  } else {
    cell_global_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:onos.topo.NeighborCellID)
}

inline void NeighborCellID::SharedCtor() {
plmn_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  plmn_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
cell_global_id_ = nullptr;
}

NeighborCellID::~NeighborCellID() {
  // @@protoc_insertion_point(destructor:onos.topo.NeighborCellID)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NeighborCellID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  plmn_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cell_global_id_;
}

void NeighborCellID::ArenaDtor(void* object) {
  NeighborCellID* _this = reinterpret_cast< NeighborCellID* >(object);
  (void)_this;
}
void NeighborCellID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NeighborCellID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NeighborCellID::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.NeighborCellID)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  plmn_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && cell_global_id_ != nullptr) {
    delete cell_global_id_;
  }
  cell_global_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NeighborCellID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .onos.topo.CellGlobalID cell_global_id = 1 [(.gogoproto.customname) = "CellGlobalID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_global_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string plmn_id = 2 [(.gogoproto.customname) = "PlmnID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_plmn_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.topo.NeighborCellID.plmn_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NeighborCellID::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.NeighborCellID)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .onos.topo.CellGlobalID cell_global_id = 1 [(.gogoproto.customname) = "CellGlobalID"];
  if (this->_internal_has_cell_global_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::cell_global_id(this), target, stream);
  }

  // string plmn_id = 2 [(.gogoproto.customname) = "PlmnID"];
  if (!this->_internal_plmn_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_plmn_id().data(), static_cast<int>(this->_internal_plmn_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.topo.NeighborCellID.plmn_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_plmn_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.NeighborCellID)
  return target;
}

size_t NeighborCellID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.NeighborCellID)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string plmn_id = 2 [(.gogoproto.customname) = "PlmnID"];
  if (!this->_internal_plmn_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_plmn_id());
  }

  // .onos.topo.CellGlobalID cell_global_id = 1 [(.gogoproto.customname) = "CellGlobalID"];
  if (this->_internal_has_cell_global_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cell_global_id_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NeighborCellID::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NeighborCellID::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NeighborCellID::GetClassData() const { return &_class_data_; }

void NeighborCellID::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NeighborCellID *>(to)->MergeFrom(
      static_cast<const NeighborCellID &>(from));
}


void NeighborCellID::MergeFrom(const NeighborCellID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.NeighborCellID)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_plmn_id().empty()) {
    _internal_set_plmn_id(from._internal_plmn_id());
  }
  if (from._internal_has_cell_global_id()) {
    _internal_mutable_cell_global_id()->::onos::topo::CellGlobalID::MergeFrom(from._internal_cell_global_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NeighborCellID::CopyFrom(const NeighborCellID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.NeighborCellID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NeighborCellID::IsInitialized() const {
  return true;
}

void NeighborCellID::InternalSwap(NeighborCellID* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &plmn_id_, lhs_arena,
      &other->plmn_id_, rhs_arena
  );
  swap(cell_global_id_, other->cell_global_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NeighborCellID::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[21]);
}

// ===================================================================

E2Cell_KpiReportsEntry_DoNotUse::E2Cell_KpiReportsEntry_DoNotUse() {}
E2Cell_KpiReportsEntry_DoNotUse::E2Cell_KpiReportsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void E2Cell_KpiReportsEntry_DoNotUse::MergeFrom(const E2Cell_KpiReportsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata E2Cell_KpiReportsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[22]);
}

// ===================================================================

class E2Cell::_Internal {
 public:
  static const ::onos::topo::CellGlobalID& cell_global_id(const E2Cell* msg);
};

const ::onos::topo::CellGlobalID&
E2Cell::_Internal::cell_global_id(const E2Cell* msg) {
  return *msg->cell_global_id_;
}
E2Cell::E2Cell(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  kpi_reports_(arena),
  neighbor_cell_ids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.E2Cell)
}
E2Cell::E2Cell(const E2Cell& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      neighbor_cell_ids_(from.neighbor_cell_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  kpi_reports_.MergeFrom(from.kpi_reports_);
  cell_object_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cell_object_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cell_object_id().empty()) {
    cell_object_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cell_object_id(), 
      GetArenaForAllocation());
  }
  cell_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cell_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cell_type().empty()) {
    cell_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cell_type(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_cell_global_id()) {
    cell_global_id_ = new ::onos::topo::CellGlobalID(*from.cell_global_id_);
  } else {
    cell_global_id_ = nullptr;
  }
  ::memcpy(&antenna_count_, &from.antenna_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&pci_) -
    reinterpret_cast<char*>(&antenna_count_)) + sizeof(pci_));
  // @@protoc_insertion_point(copy_constructor:onos.topo.E2Cell)
}

inline void E2Cell::SharedCtor() {
cell_object_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cell_object_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
cell_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cell_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&cell_global_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&pci_) -
    reinterpret_cast<char*>(&cell_global_id_)) + sizeof(pci_));
}

E2Cell::~E2Cell() {
  // @@protoc_insertion_point(destructor:onos.topo.E2Cell)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void E2Cell::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  cell_object_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cell_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete cell_global_id_;
}

void E2Cell::ArenaDtor(void* object) {
  E2Cell* _this = reinterpret_cast< E2Cell* >(object);
  (void)_this;
  _this->kpi_reports_. ~MapField();
}
inline void E2Cell::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &E2Cell::ArenaDtor);
  }
}
void E2Cell::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void E2Cell::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.E2Cell)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  kpi_reports_.Clear();
  neighbor_cell_ids_.Clear();
  cell_object_id_.ClearToEmpty();
  cell_type_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && cell_global_id_ != nullptr) {
    delete cell_global_id_;
  }
  cell_global_id_ = nullptr;
  ::memset(&antenna_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pci_) -
      reinterpret_cast<char*>(&antenna_count_)) + sizeof(pci_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* E2Cell::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string cell_object_id = 1 [(.gogoproto.customname) = "CellObjectID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_cell_object_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.topo.E2Cell.cell_object_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.topo.CellGlobalID cell_global_id = 2 [(.gogoproto.customname) = "CellGlobalID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cell_global_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 antenna_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          antenna_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 arfcn = 4 [(.gogoproto.customname) = "ARFCN"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          arfcn_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string cell_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_cell_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.topo.E2Cell.cell_type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 pci = 6 [(.gogoproto.customname) = "PCI"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          pci_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, uint32> kpi_reports = 7 [(.gogoproto.customname) = "KpiReports"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&kpi_reports_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .onos.topo.NeighborCellID neighbor_cell_ids = 8 [(.gogoproto.customname) = "NeighborCellIDs"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_neighbor_cell_ids(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* E2Cell::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.E2Cell)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string cell_object_id = 1 [(.gogoproto.customname) = "CellObjectID"];
  if (!this->_internal_cell_object_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cell_object_id().data(), static_cast<int>(this->_internal_cell_object_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.topo.E2Cell.cell_object_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cell_object_id(), target);
  }

  // .onos.topo.CellGlobalID cell_global_id = 2 [(.gogoproto.customname) = "CellGlobalID"];
  if (this->_internal_has_cell_global_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cell_global_id(this), target, stream);
  }

  // uint32 antenna_count = 3;
  if (this->_internal_antenna_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_antenna_count(), target);
  }

  // uint32 arfcn = 4 [(.gogoproto.customname) = "ARFCN"];
  if (this->_internal_arfcn() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_arfcn(), target);
  }

  // string cell_type = 5;
  if (!this->_internal_cell_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cell_type().data(), static_cast<int>(this->_internal_cell_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.topo.E2Cell.cell_type");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_cell_type(), target);
  }

  // uint32 pci = 6 [(.gogoproto.customname) = "PCI"];
  if (this->_internal_pci() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_pci(), target);
  }

  // map<string, uint32> kpi_reports = 7 [(.gogoproto.customname) = "KpiReports"];
  if (!this->_internal_kpi_reports().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "onos.topo.E2Cell.KpiReportsEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_kpi_reports().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_kpi_reports().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >::const_iterator
          it = this->_internal_kpi_reports().begin();
          it != this->_internal_kpi_reports().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = E2Cell_KpiReportsEntry_DoNotUse::Funcs::InternalSerialize(7, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >::const_iterator
          it = this->_internal_kpi_reports().begin();
          it != this->_internal_kpi_reports().end(); ++it) {
        target = E2Cell_KpiReportsEntry_DoNotUse::Funcs::InternalSerialize(7, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // repeated .onos.topo.NeighborCellID neighbor_cell_ids = 8 [(.gogoproto.customname) = "NeighborCellIDs"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_neighbor_cell_ids_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_neighbor_cell_ids(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.E2Cell)
  return target;
}

size_t E2Cell::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.E2Cell)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, uint32> kpi_reports = 7 [(.gogoproto.customname) = "KpiReports"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_kpi_reports_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >::const_iterator
      it = this->_internal_kpi_reports().begin();
      it != this->_internal_kpi_reports().end(); ++it) {
    total_size += E2Cell_KpiReportsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .onos.topo.NeighborCellID neighbor_cell_ids = 8 [(.gogoproto.customname) = "NeighborCellIDs"];
  total_size += 1UL * this->_internal_neighbor_cell_ids_size();
  for (const auto& msg : this->neighbor_cell_ids_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string cell_object_id = 1 [(.gogoproto.customname) = "CellObjectID"];
  if (!this->_internal_cell_object_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cell_object_id());
  }

  // string cell_type = 5;
  if (!this->_internal_cell_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cell_type());
  }

  // .onos.topo.CellGlobalID cell_global_id = 2 [(.gogoproto.customname) = "CellGlobalID"];
  if (this->_internal_has_cell_global_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cell_global_id_);
  }

  // uint32 antenna_count = 3;
  if (this->_internal_antenna_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_antenna_count());
  }

  // uint32 arfcn = 4 [(.gogoproto.customname) = "ARFCN"];
  if (this->_internal_arfcn() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_arfcn());
  }

  // uint32 pci = 6 [(.gogoproto.customname) = "PCI"];
  if (this->_internal_pci() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_pci());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData E2Cell::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    E2Cell::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*E2Cell::GetClassData() const { return &_class_data_; }

void E2Cell::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<E2Cell *>(to)->MergeFrom(
      static_cast<const E2Cell &>(from));
}


void E2Cell::MergeFrom(const E2Cell& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.E2Cell)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  kpi_reports_.MergeFrom(from.kpi_reports_);
  neighbor_cell_ids_.MergeFrom(from.neighbor_cell_ids_);
  if (!from._internal_cell_object_id().empty()) {
    _internal_set_cell_object_id(from._internal_cell_object_id());
  }
  if (!from._internal_cell_type().empty()) {
    _internal_set_cell_type(from._internal_cell_type());
  }
  if (from._internal_has_cell_global_id()) {
    _internal_mutable_cell_global_id()->::onos::topo::CellGlobalID::MergeFrom(from._internal_cell_global_id());
  }
  if (from._internal_antenna_count() != 0) {
    _internal_set_antenna_count(from._internal_antenna_count());
  }
  if (from._internal_arfcn() != 0) {
    _internal_set_arfcn(from._internal_arfcn());
  }
  if (from._internal_pci() != 0) {
    _internal_set_pci(from._internal_pci());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void E2Cell::CopyFrom(const E2Cell& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.E2Cell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool E2Cell::IsInitialized() const {
  return true;
}

void E2Cell::InternalSwap(E2Cell* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  kpi_reports_.InternalSwap(&other->kpi_reports_);
  neighbor_cell_ids_.InternalSwap(&other->neighbor_cell_ids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cell_object_id_, lhs_arena,
      &other->cell_object_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cell_type_, lhs_arena,
      &other->cell_type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(E2Cell, pci_)
      + sizeof(E2Cell::pci_)
      - PROTOBUF_FIELD_OFFSET(E2Cell, cell_global_id_)>(
          reinterpret_cast<char*>(&cell_global_id_),
          reinterpret_cast<char*>(&other->cell_global_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata E2Cell::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[23]);
}

// ===================================================================

class ServiceModelInfo::_Internal {
 public:
};

void ServiceModelInfo::clear_ran_functions() {
  ran_functions_.Clear();
}
ServiceModelInfo::ServiceModelInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ran_functions_(arena),
  ranfunctionids_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.ServiceModelInfo)
}
ServiceModelInfo::ServiceModelInfo(const ServiceModelInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ran_functions_(from.ran_functions_),
      ranfunctionids_(from.ranfunctionids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  oid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    oid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_oid().empty()) {
    oid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_oid(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:onos.topo.ServiceModelInfo)
}

inline void ServiceModelInfo::SharedCtor() {
oid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  oid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ServiceModelInfo::~ServiceModelInfo() {
  // @@protoc_insertion_point(destructor:onos.topo.ServiceModelInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ServiceModelInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  oid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServiceModelInfo::ArenaDtor(void* object) {
  ServiceModelInfo* _this = reinterpret_cast< ServiceModelInfo* >(object);
  (void)_this;
}
void ServiceModelInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServiceModelInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServiceModelInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.ServiceModelInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ran_functions_.Clear();
  ranfunctionids_.Clear();
  oid_.ClearToEmpty();
  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceModelInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string oid = 1 [(.gogoproto.customname) = "OID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_oid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.topo.ServiceModelInfo.oid"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.topo.ServiceModelInfo.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .google.protobuf.Any ran_functions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ran_functions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated uint32 ranFunctionIDs = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(_internal_mutable_ranfunctionids(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_ranfunctionids(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServiceModelInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.ServiceModelInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string oid = 1 [(.gogoproto.customname) = "OID"];
  if (!this->_internal_oid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_oid().data(), static_cast<int>(this->_internal_oid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.topo.ServiceModelInfo.oid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_oid(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.topo.ServiceModelInfo.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated .google.protobuf.Any ran_functions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ran_functions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_ran_functions(i), target, stream);
  }

  // repeated uint32 ranFunctionIDs = 4;
  {
    int byte_size = _ranfunctionids_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          4, _internal_ranfunctionids(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.ServiceModelInfo)
  return target;
}

size_t ServiceModelInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.ServiceModelInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .google.protobuf.Any ran_functions = 3;
  total_size += 1UL * this->_internal_ran_functions_size();
  for (const auto& msg : this->ran_functions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated uint32 ranFunctionIDs = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->ranfunctionids_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ranfunctionids_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string oid = 1 [(.gogoproto.customname) = "OID"];
  if (!this->_internal_oid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_oid());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServiceModelInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ServiceModelInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServiceModelInfo::GetClassData() const { return &_class_data_; }

void ServiceModelInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ServiceModelInfo *>(to)->MergeFrom(
      static_cast<const ServiceModelInfo &>(from));
}


void ServiceModelInfo::MergeFrom(const ServiceModelInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.ServiceModelInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ran_functions_.MergeFrom(from.ran_functions_);
  ranfunctionids_.MergeFrom(from.ranfunctionids_);
  if (!from._internal_oid().empty()) {
    _internal_set_oid(from._internal_oid());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServiceModelInfo::CopyFrom(const ServiceModelInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.ServiceModelInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceModelInfo::IsInitialized() const {
  return true;
}

void ServiceModelInfo::InternalSwap(ServiceModelInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ran_functions_.InternalSwap(&other->ran_functions_);
  ranfunctionids_.InternalSwap(&other->ranfunctionids_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &oid_, lhs_arena,
      &other->oid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceModelInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[24]);
}

// ===================================================================

class RCRanFunction::_Internal {
 public:
};

RCRanFunction::RCRanFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  report_styles_(arena),
  insert_styles_(arena),
  event_trigger_styles_(arena),
  policy_styles_(arena),
  control_styles_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.RCRanFunction)
}
RCRanFunction::RCRanFunction(const RCRanFunction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      report_styles_(from.report_styles_),
      insert_styles_(from.insert_styles_),
      event_trigger_styles_(from.event_trigger_styles_),
      policy_styles_(from.policy_styles_),
      control_styles_(from.control_styles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:onos.topo.RCRanFunction)
}

inline void RCRanFunction::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RCRanFunction::~RCRanFunction() {
  // @@protoc_insertion_point(destructor:onos.topo.RCRanFunction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RCRanFunction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RCRanFunction::ArenaDtor(void* object) {
  RCRanFunction* _this = reinterpret_cast< RCRanFunction* >(object);
  (void)_this;
}
void RCRanFunction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RCRanFunction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RCRanFunction::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.RCRanFunction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  report_styles_.Clear();
  insert_styles_.Clear();
  event_trigger_styles_.Clear();
  policy_styles_.Clear();
  control_styles_.Clear();
  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RCRanFunction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [(.gogoproto.customname) = "ID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.topo.RCRanFunction.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .onos.topo.RCReportStyle report_styles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_report_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .onos.topo.RCInsertStyle insert_styles = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_insert_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .onos.topo.RCEventTriggerStyle event_trigger_styles = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_event_trigger_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .onos.topo.RCPolicyStyle policy_styles = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_policy_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .onos.topo.RCControlStyle control_styles = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_control_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RCRanFunction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.RCRanFunction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [(.gogoproto.customname) = "ID"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.topo.RCRanFunction.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // repeated .onos.topo.RCReportStyle report_styles = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_report_styles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_report_styles(i), target, stream);
  }

  // repeated .onos.topo.RCInsertStyle insert_styles = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_insert_styles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_insert_styles(i), target, stream);
  }

  // repeated .onos.topo.RCEventTriggerStyle event_trigger_styles = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_event_trigger_styles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_event_trigger_styles(i), target, stream);
  }

  // repeated .onos.topo.RCPolicyStyle policy_styles = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_policy_styles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_policy_styles(i), target, stream);
  }

  // repeated .onos.topo.RCControlStyle control_styles = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_control_styles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_control_styles(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.RCRanFunction)
  return target;
}

size_t RCRanFunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.RCRanFunction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .onos.topo.RCReportStyle report_styles = 2;
  total_size += 1UL * this->_internal_report_styles_size();
  for (const auto& msg : this->report_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .onos.topo.RCInsertStyle insert_styles = 3;
  total_size += 1UL * this->_internal_insert_styles_size();
  for (const auto& msg : this->insert_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .onos.topo.RCEventTriggerStyle event_trigger_styles = 4;
  total_size += 1UL * this->_internal_event_trigger_styles_size();
  for (const auto& msg : this->event_trigger_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .onos.topo.RCPolicyStyle policy_styles = 5;
  total_size += 1UL * this->_internal_policy_styles_size();
  for (const auto& msg : this->policy_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .onos.topo.RCControlStyle control_styles = 6;
  total_size += 1UL * this->_internal_control_styles_size();
  for (const auto& msg : this->control_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1 [(.gogoproto.customname) = "ID"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RCRanFunction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RCRanFunction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RCRanFunction::GetClassData() const { return &_class_data_; }

void RCRanFunction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RCRanFunction *>(to)->MergeFrom(
      static_cast<const RCRanFunction &>(from));
}


void RCRanFunction::MergeFrom(const RCRanFunction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.RCRanFunction)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  report_styles_.MergeFrom(from.report_styles_);
  insert_styles_.MergeFrom(from.insert_styles_);
  event_trigger_styles_.MergeFrom(from.event_trigger_styles_);
  policy_styles_.MergeFrom(from.policy_styles_);
  control_styles_.MergeFrom(from.control_styles_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RCRanFunction::CopyFrom(const RCRanFunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.RCRanFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RCRanFunction::IsInitialized() const {
  return true;
}

void RCRanFunction::InternalSwap(RCRanFunction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  report_styles_.InternalSwap(&other->report_styles_);
  insert_styles_.InternalSwap(&other->insert_styles_);
  event_trigger_styles_.InternalSwap(&other->event_trigger_styles_);
  policy_styles_.InternalSwap(&other->policy_styles_);
  control_styles_.InternalSwap(&other->control_styles_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RCRanFunction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[25]);
}

// ===================================================================

class MHORanFunction::_Internal {
 public:
};

MHORanFunction::MHORanFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  report_styles_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.MHORanFunction)
}
MHORanFunction::MHORanFunction(const MHORanFunction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      report_styles_(from.report_styles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:onos.topo.MHORanFunction)
}

inline void MHORanFunction::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

MHORanFunction::~MHORanFunction() {
  // @@protoc_insertion_point(destructor:onos.topo.MHORanFunction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MHORanFunction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MHORanFunction::ArenaDtor(void* object) {
  MHORanFunction* _this = reinterpret_cast< MHORanFunction* >(object);
  (void)_this;
}
void MHORanFunction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MHORanFunction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MHORanFunction::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.MHORanFunction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  report_styles_.Clear();
  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MHORanFunction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [(.gogoproto.customname) = "ID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.topo.MHORanFunction.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .onos.topo.MHOReportStyle report_styles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_report_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MHORanFunction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.MHORanFunction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [(.gogoproto.customname) = "ID"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.topo.MHORanFunction.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // repeated .onos.topo.MHOReportStyle report_styles = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_report_styles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_report_styles(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.MHORanFunction)
  return target;
}

size_t MHORanFunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.MHORanFunction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .onos.topo.MHOReportStyle report_styles = 2;
  total_size += 1UL * this->_internal_report_styles_size();
  for (const auto& msg : this->report_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1 [(.gogoproto.customname) = "ID"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MHORanFunction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MHORanFunction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MHORanFunction::GetClassData() const { return &_class_data_; }

void MHORanFunction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MHORanFunction *>(to)->MergeFrom(
      static_cast<const MHORanFunction &>(from));
}


void MHORanFunction::MergeFrom(const MHORanFunction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.MHORanFunction)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  report_styles_.MergeFrom(from.report_styles_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MHORanFunction::CopyFrom(const MHORanFunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.MHORanFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MHORanFunction::IsInitialized() const {
  return true;
}

void MHORanFunction::InternalSwap(MHORanFunction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  report_styles_.InternalSwap(&other->report_styles_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MHORanFunction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[26]);
}

// ===================================================================

class KPMRanFunction::_Internal {
 public:
};

KPMRanFunction::KPMRanFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  report_styles_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.KPMRanFunction)
}
KPMRanFunction::KPMRanFunction(const KPMRanFunction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      report_styles_(from.report_styles_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:onos.topo.KPMRanFunction)
}

inline void KPMRanFunction::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

KPMRanFunction::~KPMRanFunction() {
  // @@protoc_insertion_point(destructor:onos.topo.KPMRanFunction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void KPMRanFunction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KPMRanFunction::ArenaDtor(void* object) {
  KPMRanFunction* _this = reinterpret_cast< KPMRanFunction* >(object);
  (void)_this;
}
void KPMRanFunction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KPMRanFunction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KPMRanFunction::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.KPMRanFunction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  report_styles_.Clear();
  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KPMRanFunction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [(.gogoproto.customname) = "ID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.topo.KPMRanFunction.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .onos.topo.KPMReportStyle report_styles = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_report_styles(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KPMRanFunction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.KPMRanFunction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [(.gogoproto.customname) = "ID"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.topo.KPMRanFunction.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // repeated .onos.topo.KPMReportStyle report_styles = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_report_styles_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_report_styles(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.KPMRanFunction)
  return target;
}

size_t KPMRanFunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.KPMRanFunction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .onos.topo.KPMReportStyle report_styles = 2;
  total_size += 1UL * this->_internal_report_styles_size();
  for (const auto& msg : this->report_styles_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1 [(.gogoproto.customname) = "ID"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KPMRanFunction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    KPMRanFunction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KPMRanFunction::GetClassData() const { return &_class_data_; }

void KPMRanFunction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<KPMRanFunction *>(to)->MergeFrom(
      static_cast<const KPMRanFunction &>(from));
}


void KPMRanFunction::MergeFrom(const KPMRanFunction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.KPMRanFunction)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  report_styles_.MergeFrom(from.report_styles_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KPMRanFunction::CopyFrom(const KPMRanFunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.KPMRanFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPMRanFunction::IsInitialized() const {
  return true;
}

void KPMRanFunction::InternalSwap(KPMRanFunction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  report_styles_.InternalSwap(&other->report_styles_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata KPMRanFunction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[27]);
}

// ===================================================================

class RSMRanFunction::_Internal {
 public:
};

RSMRanFunction::RSMRanFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ric_slicing_node_capability_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.RSMRanFunction)
}
RSMRanFunction::RSMRanFunction(const RSMRanFunction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ric_slicing_node_capability_list_(from.ric_slicing_node_capability_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:onos.topo.RSMRanFunction)
}

inline void RSMRanFunction::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

RSMRanFunction::~RSMRanFunction() {
  // @@protoc_insertion_point(destructor:onos.topo.RSMRanFunction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RSMRanFunction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RSMRanFunction::ArenaDtor(void* object) {
  RSMRanFunction* _this = reinterpret_cast< RSMRanFunction* >(object);
  (void)_this;
}
void RSMRanFunction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RSMRanFunction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RSMRanFunction::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.RSMRanFunction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ric_slicing_node_capability_list_.Clear();
  id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RSMRanFunction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [(.gogoproto.customname) = "ID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.topo.RSMRanFunction.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .onos.topo.RSMNodeSlicingCapabilityItem ric_slicing_node_capability_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ric_slicing_node_capability_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RSMRanFunction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.RSMRanFunction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [(.gogoproto.customname) = "ID"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.topo.RSMRanFunction.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // repeated .onos.topo.RSMNodeSlicingCapabilityItem ric_slicing_node_capability_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ric_slicing_node_capability_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_ric_slicing_node_capability_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.RSMRanFunction)
  return target;
}

size_t RSMRanFunction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.RSMRanFunction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .onos.topo.RSMNodeSlicingCapabilityItem ric_slicing_node_capability_list = 2;
  total_size += 1UL * this->_internal_ric_slicing_node_capability_list_size();
  for (const auto& msg : this->ric_slicing_node_capability_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1 [(.gogoproto.customname) = "ID"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RSMRanFunction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RSMRanFunction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RSMRanFunction::GetClassData() const { return &_class_data_; }

void RSMRanFunction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RSMRanFunction *>(to)->MergeFrom(
      static_cast<const RSMRanFunction &>(from));
}


void RSMRanFunction::MergeFrom(const RSMRanFunction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.RSMRanFunction)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ric_slicing_node_capability_list_.MergeFrom(from.ric_slicing_node_capability_list_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RSMRanFunction::CopyFrom(const RSMRanFunction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.RSMRanFunction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RSMRanFunction::IsInitialized() const {
  return true;
}

void RSMRanFunction::InternalSwap(RSMRanFunction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ric_slicing_node_capability_list_.InternalSwap(&other->ric_slicing_node_capability_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata RSMRanFunction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[28]);
}

// ===================================================================

class RCEventTriggerStyle::_Internal {
 public:
};

RCEventTriggerStyle::RCEventTriggerStyle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.RCEventTriggerStyle)
}
RCEventTriggerStyle::RCEventTriggerStyle(const RCEventTriggerStyle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&format_type_) -
    reinterpret_cast<char*>(&type_)) + sizeof(format_type_));
  // @@protoc_insertion_point(copy_constructor:onos.topo.RCEventTriggerStyle)
}

inline void RCEventTriggerStyle::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&format_type_) -
    reinterpret_cast<char*>(&type_)) + sizeof(format_type_));
}

RCEventTriggerStyle::~RCEventTriggerStyle() {
  // @@protoc_insertion_point(destructor:onos.topo.RCEventTriggerStyle)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RCEventTriggerStyle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RCEventTriggerStyle::ArenaDtor(void* object) {
  RCEventTriggerStyle* _this = reinterpret_cast< RCEventTriggerStyle* >(object);
  (void)_this;
}
void RCEventTriggerStyle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RCEventTriggerStyle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RCEventTriggerStyle::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.RCEventTriggerStyle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&format_type_) -
      reinterpret_cast<char*>(&type_)) + sizeof(format_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RCEventTriggerStyle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.topo.RCEventTriggerStyle.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 format_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          format_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RCEventTriggerStyle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.RCEventTriggerStyle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.topo.RCEventTriggerStyle.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // int32 format_type = 3;
  if (this->_internal_format_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_format_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.RCEventTriggerStyle)
  return target;
}

size_t RCEventTriggerStyle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.RCEventTriggerStyle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  // int32 format_type = 3;
  if (this->_internal_format_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_format_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RCEventTriggerStyle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RCEventTriggerStyle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RCEventTriggerStyle::GetClassData() const { return &_class_data_; }

void RCEventTriggerStyle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RCEventTriggerStyle *>(to)->MergeFrom(
      static_cast<const RCEventTriggerStyle &>(from));
}


void RCEventTriggerStyle::MergeFrom(const RCEventTriggerStyle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.RCEventTriggerStyle)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_format_type() != 0) {
    _internal_set_format_type(from._internal_format_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RCEventTriggerStyle::CopyFrom(const RCEventTriggerStyle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.RCEventTriggerStyle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RCEventTriggerStyle::IsInitialized() const {
  return true;
}

void RCEventTriggerStyle::InternalSwap(RCEventTriggerStyle* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RCEventTriggerStyle, format_type_)
      + sizeof(RCEventTriggerStyle::format_type_)
      - PROTOBUF_FIELD_OFFSET(RCEventTriggerStyle, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RCEventTriggerStyle::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[29]);
}

// ===================================================================

class RCReportStyle::_Internal {
 public:
};

RCReportStyle::RCReportStyle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ran_parameters_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.RCReportStyle)
}
RCReportStyle::RCReportStyle(const RCReportStyle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ran_parameters_(from.ran_parameters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:onos.topo.RCReportStyle)
}

inline void RCReportStyle::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_ = 0;
}

RCReportStyle::~RCReportStyle() {
  // @@protoc_insertion_point(destructor:onos.topo.RCReportStyle)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RCReportStyle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RCReportStyle::ArenaDtor(void* object) {
  RCReportStyle* _this = reinterpret_cast< RCReportStyle* >(object);
  (void)_this;
}
void RCReportStyle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RCReportStyle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RCReportStyle::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.RCReportStyle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ran_parameters_.Clear();
  name_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RCReportStyle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.topo.RCReportStyle.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .onos.topo.RANParameter ran_parameters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ran_parameters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RCReportStyle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.RCReportStyle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.topo.RCReportStyle.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // repeated .onos.topo.RANParameter ran_parameters = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ran_parameters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_ran_parameters(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.RCReportStyle)
  return target;
}

size_t RCReportStyle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.RCReportStyle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .onos.topo.RANParameter ran_parameters = 3;
  total_size += 1UL * this->_internal_ran_parameters_size();
  for (const auto& msg : this->ran_parameters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RCReportStyle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RCReportStyle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RCReportStyle::GetClassData() const { return &_class_data_; }

void RCReportStyle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RCReportStyle *>(to)->MergeFrom(
      static_cast<const RCReportStyle &>(from));
}


void RCReportStyle::MergeFrom(const RCReportStyle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.RCReportStyle)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ran_parameters_.MergeFrom(from.ran_parameters_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RCReportStyle::CopyFrom(const RCReportStyle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.RCReportStyle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RCReportStyle::IsInitialized() const {
  return true;
}

void RCReportStyle::InternalSwap(RCReportStyle* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ran_parameters_.InternalSwap(&other->ran_parameters_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RCReportStyle::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[30]);
}

// ===================================================================

class RCInsertStyle::_Internal {
 public:
};

RCInsertStyle::RCInsertStyle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  insert_indications_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.RCInsertStyle)
}
RCInsertStyle::RCInsertStyle(const RCInsertStyle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      insert_indications_(from.insert_indications_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:onos.topo.RCInsertStyle)
}

inline void RCInsertStyle::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_ = 0;
}

RCInsertStyle::~RCInsertStyle() {
  // @@protoc_insertion_point(destructor:onos.topo.RCInsertStyle)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RCInsertStyle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RCInsertStyle::ArenaDtor(void* object) {
  RCInsertStyle* _this = reinterpret_cast< RCInsertStyle* >(object);
  (void)_this;
}
void RCInsertStyle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RCInsertStyle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RCInsertStyle::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.RCInsertStyle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  insert_indications_.Clear();
  name_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RCInsertStyle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.topo.RCInsertStyle.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .onos.topo.InsertIndication insert_indications = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_insert_indications(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RCInsertStyle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.RCInsertStyle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.topo.RCInsertStyle.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // repeated .onos.topo.InsertIndication insert_indications = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_insert_indications_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_insert_indications(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.RCInsertStyle)
  return target;
}

size_t RCInsertStyle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.RCInsertStyle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .onos.topo.InsertIndication insert_indications = 3;
  total_size += 1UL * this->_internal_insert_indications_size();
  for (const auto& msg : this->insert_indications_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RCInsertStyle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RCInsertStyle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RCInsertStyle::GetClassData() const { return &_class_data_; }

void RCInsertStyle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RCInsertStyle *>(to)->MergeFrom(
      static_cast<const RCInsertStyle &>(from));
}


void RCInsertStyle::MergeFrom(const RCInsertStyle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.RCInsertStyle)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  insert_indications_.MergeFrom(from.insert_indications_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RCInsertStyle::CopyFrom(const RCInsertStyle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.RCInsertStyle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RCInsertStyle::IsInitialized() const {
  return true;
}

void RCInsertStyle::InternalSwap(RCInsertStyle* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  insert_indications_.InternalSwap(&other->insert_indications_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RCInsertStyle::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[31]);
}

// ===================================================================

class RCPolicyStyle::_Internal {
 public:
};

RCPolicyStyle::RCPolicyStyle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.RCPolicyStyle)
}
RCPolicyStyle::RCPolicyStyle(const RCPolicyStyle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:onos.topo.RCPolicyStyle)
}

inline void RCPolicyStyle::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_ = 0;
}

RCPolicyStyle::~RCPolicyStyle() {
  // @@protoc_insertion_point(destructor:onos.topo.RCPolicyStyle)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RCPolicyStyle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RCPolicyStyle::ArenaDtor(void* object) {
  RCPolicyStyle* _this = reinterpret_cast< RCPolicyStyle* >(object);
  (void)_this;
}
void RCPolicyStyle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RCPolicyStyle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RCPolicyStyle::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.RCPolicyStyle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RCPolicyStyle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.topo.RCPolicyStyle.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RCPolicyStyle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.RCPolicyStyle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.topo.RCPolicyStyle.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.RCPolicyStyle)
  return target;
}

size_t RCPolicyStyle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.RCPolicyStyle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RCPolicyStyle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RCPolicyStyle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RCPolicyStyle::GetClassData() const { return &_class_data_; }

void RCPolicyStyle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RCPolicyStyle *>(to)->MergeFrom(
      static_cast<const RCPolicyStyle &>(from));
}


void RCPolicyStyle::MergeFrom(const RCPolicyStyle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.RCPolicyStyle)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RCPolicyStyle::CopyFrom(const RCPolicyStyle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.RCPolicyStyle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RCPolicyStyle::IsInitialized() const {
  return true;
}

void RCPolicyStyle::InternalSwap(RCPolicyStyle* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RCPolicyStyle::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[32]);
}

// ===================================================================

class RCControlStyle::_Internal {
 public:
};

RCControlStyle::RCControlStyle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  control_actions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.RCControlStyle)
}
RCControlStyle::RCControlStyle(const RCControlStyle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      control_actions_(from.control_actions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&control_outcome_format_type_) -
    reinterpret_cast<char*>(&type_)) + sizeof(control_outcome_format_type_));
  // @@protoc_insertion_point(copy_constructor:onos.topo.RCControlStyle)
}

inline void RCControlStyle::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&control_outcome_format_type_) -
    reinterpret_cast<char*>(&type_)) + sizeof(control_outcome_format_type_));
}

RCControlStyle::~RCControlStyle() {
  // @@protoc_insertion_point(destructor:onos.topo.RCControlStyle)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RCControlStyle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RCControlStyle::ArenaDtor(void* object) {
  RCControlStyle* _this = reinterpret_cast< RCControlStyle* >(object);
  (void)_this;
}
void RCControlStyle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RCControlStyle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RCControlStyle::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.RCControlStyle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  control_actions_.Clear();
  name_.ClearToEmpty();
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&control_outcome_format_type_) -
      reinterpret_cast<char*>(&type_)) + sizeof(control_outcome_format_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RCControlStyle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.topo.RCControlStyle.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 header_format_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          header_format_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 message_format_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          message_format_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 control_outcome_format_type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          control_outcome_format_type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .onos.topo.ControlAction control_actions = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_control_actions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RCControlStyle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.RCControlStyle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.topo.RCControlStyle.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // int32 header_format_type = 3;
  if (this->_internal_header_format_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_header_format_type(), target);
  }

  // int32 message_format_type = 4;
  if (this->_internal_message_format_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_message_format_type(), target);
  }

  // int32 control_outcome_format_type = 5;
  if (this->_internal_control_outcome_format_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_control_outcome_format_type(), target);
  }

  // repeated .onos.topo.ControlAction control_actions = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_control_actions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_control_actions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.RCControlStyle)
  return target;
}

size_t RCControlStyle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.RCControlStyle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .onos.topo.ControlAction control_actions = 6;
  total_size += 1UL * this->_internal_control_actions_size();
  for (const auto& msg : this->control_actions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  // int32 header_format_type = 3;
  if (this->_internal_header_format_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_header_format_type());
  }

  // int32 message_format_type = 4;
  if (this->_internal_message_format_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_message_format_type());
  }

  // int32 control_outcome_format_type = 5;
  if (this->_internal_control_outcome_format_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_control_outcome_format_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RCControlStyle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RCControlStyle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RCControlStyle::GetClassData() const { return &_class_data_; }

void RCControlStyle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RCControlStyle *>(to)->MergeFrom(
      static_cast<const RCControlStyle &>(from));
}


void RCControlStyle::MergeFrom(const RCControlStyle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.RCControlStyle)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  control_actions_.MergeFrom(from.control_actions_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_header_format_type() != 0) {
    _internal_set_header_format_type(from._internal_header_format_type());
  }
  if (from._internal_message_format_type() != 0) {
    _internal_set_message_format_type(from._internal_message_format_type());
  }
  if (from._internal_control_outcome_format_type() != 0) {
    _internal_set_control_outcome_format_type(from._internal_control_outcome_format_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RCControlStyle::CopyFrom(const RCControlStyle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.RCControlStyle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RCControlStyle::IsInitialized() const {
  return true;
}

void RCControlStyle::InternalSwap(RCControlStyle* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  control_actions_.InternalSwap(&other->control_actions_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RCControlStyle, control_outcome_format_type_)
      + sizeof(RCControlStyle::control_outcome_format_type_)
      - PROTOBUF_FIELD_OFFSET(RCControlStyle, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RCControlStyle::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[33]);
}

// ===================================================================

class ControlAction::_Internal {
 public:
};

ControlAction::ControlAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ran_parameters_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.ControlAction)
}
ControlAction::ControlAction(const ControlAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ran_parameters_(from.ran_parameters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:onos.topo.ControlAction)
}

inline void ControlAction::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
id_ = 0;
}

ControlAction::~ControlAction() {
  // @@protoc_insertion_point(destructor:onos.topo.ControlAction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ControlAction::ArenaDtor(void* object) {
  ControlAction* _this = reinterpret_cast< ControlAction* >(object);
  (void)_this;
}
void ControlAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlAction::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.ControlAction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ran_parameters_.Clear();
  name_.ClearToEmpty();
  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1 [(.gogoproto.customname) = "ID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.topo.ControlAction.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .onos.topo.RANParameter ran_parameters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ran_parameters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlAction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.ControlAction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1 [(.gogoproto.customname) = "ID"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.topo.ControlAction.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated .onos.topo.RANParameter ran_parameters = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ran_parameters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_ran_parameters(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.ControlAction)
  return target;
}

size_t ControlAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.ControlAction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .onos.topo.RANParameter ran_parameters = 3;
  total_size += 1UL * this->_internal_ran_parameters_size();
  for (const auto& msg : this->ran_parameters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 id = 1 [(.gogoproto.customname) = "ID"];
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlAction::GetClassData() const { return &_class_data_; }

void ControlAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlAction *>(to)->MergeFrom(
      static_cast<const ControlAction &>(from));
}


void ControlAction::MergeFrom(const ControlAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.ControlAction)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ran_parameters_.MergeFrom(from.ran_parameters_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlAction::CopyFrom(const ControlAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.ControlAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlAction::IsInitialized() const {
  return true;
}

void ControlAction::InternalSwap(ControlAction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ran_parameters_.InternalSwap(&other->ran_parameters_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlAction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[34]);
}

// ===================================================================

class InsertIndication::_Internal {
 public:
};

InsertIndication::InsertIndication(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ran_parameters_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.InsertIndication)
}
InsertIndication::InsertIndication(const InsertIndication& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ran_parameters_(from.ran_parameters_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:onos.topo.InsertIndication)
}

inline void InsertIndication::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
id_ = 0;
}

InsertIndication::~InsertIndication() {
  // @@protoc_insertion_point(destructor:onos.topo.InsertIndication)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void InsertIndication::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InsertIndication::ArenaDtor(void* object) {
  InsertIndication* _this = reinterpret_cast< InsertIndication* >(object);
  (void)_this;
}
void InsertIndication::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InsertIndication::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void InsertIndication::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.InsertIndication)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ran_parameters_.Clear();
  name_.ClearToEmpty();
  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InsertIndication::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1 [(.gogoproto.customname) = "ID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.topo.InsertIndication.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .onos.topo.RANParameter ran_parameters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ran_parameters(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InsertIndication::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.InsertIndication)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1 [(.gogoproto.customname) = "ID"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.topo.InsertIndication.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated .onos.topo.RANParameter ran_parameters = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ran_parameters_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_ran_parameters(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.InsertIndication)
  return target;
}

size_t InsertIndication::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.InsertIndication)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .onos.topo.RANParameter ran_parameters = 3;
  total_size += 1UL * this->_internal_ran_parameters_size();
  for (const auto& msg : this->ran_parameters_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 id = 1 [(.gogoproto.customname) = "ID"];
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InsertIndication::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    InsertIndication::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InsertIndication::GetClassData() const { return &_class_data_; }

void InsertIndication::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<InsertIndication *>(to)->MergeFrom(
      static_cast<const InsertIndication &>(from));
}


void InsertIndication::MergeFrom(const InsertIndication& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.InsertIndication)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ran_parameters_.MergeFrom(from.ran_parameters_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InsertIndication::CopyFrom(const InsertIndication& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.InsertIndication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InsertIndication::IsInitialized() const {
  return true;
}

void InsertIndication::InternalSwap(InsertIndication* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ran_parameters_.InternalSwap(&other->ran_parameters_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InsertIndication::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[35]);
}

// ===================================================================

class RANParameter::_Internal {
 public:
};

RANParameter::RANParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.RANParameter)
}
RANParameter::RANParameter(const RANParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:onos.topo.RANParameter)
}

inline void RANParameter::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
id_ = 0;
}

RANParameter::~RANParameter() {
  // @@protoc_insertion_point(destructor:onos.topo.RANParameter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RANParameter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RANParameter::ArenaDtor(void* object) {
  RANParameter* _this = reinterpret_cast< RANParameter* >(object);
  (void)_this;
}
void RANParameter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RANParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RANParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.RANParameter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RANParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1 [(.gogoproto.customname) = "ID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.topo.RANParameter.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RANParameter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.RANParameter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1 [(.gogoproto.customname) = "ID"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.topo.RANParameter.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.RANParameter)
  return target;
}

size_t RANParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.RANParameter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 id = 1 [(.gogoproto.customname) = "ID"];
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RANParameter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RANParameter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RANParameter::GetClassData() const { return &_class_data_; }

void RANParameter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RANParameter *>(to)->MergeFrom(
      static_cast<const RANParameter &>(from));
}


void RANParameter::MergeFrom(const RANParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.RANParameter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RANParameter::CopyFrom(const RANParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.RANParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RANParameter::IsInitialized() const {
  return true;
}

void RANParameter::InternalSwap(RANParameter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RANParameter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[36]);
}

// ===================================================================

class KPMReportStyle::_Internal {
 public:
};

KPMReportStyle::KPMReportStyle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  measurements_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.KPMReportStyle)
}
KPMReportStyle::KPMReportStyle(const KPMReportStyle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      measurements_(from.measurements_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:onos.topo.KPMReportStyle)
}

inline void KPMReportStyle::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_ = 0;
}

KPMReportStyle::~KPMReportStyle() {
  // @@protoc_insertion_point(destructor:onos.topo.KPMReportStyle)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void KPMReportStyle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KPMReportStyle::ArenaDtor(void* object) {
  KPMReportStyle* _this = reinterpret_cast< KPMReportStyle* >(object);
  (void)_this;
}
void KPMReportStyle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KPMReportStyle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KPMReportStyle::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.KPMReportStyle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  measurements_.Clear();
  name_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KPMReportStyle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.topo.KPMReportStyle.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .onos.topo.KPMMeasurement measurements = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_measurements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KPMReportStyle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.KPMReportStyle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.topo.KPMReportStyle.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  // repeated .onos.topo.KPMMeasurement measurements = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_measurements_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_measurements(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.KPMReportStyle)
  return target;
}

size_t KPMReportStyle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.KPMReportStyle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .onos.topo.KPMMeasurement measurements = 3;
  total_size += 1UL * this->_internal_measurements_size();
  for (const auto& msg : this->measurements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KPMReportStyle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    KPMReportStyle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KPMReportStyle::GetClassData() const { return &_class_data_; }

void KPMReportStyle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<KPMReportStyle *>(to)->MergeFrom(
      static_cast<const KPMReportStyle &>(from));
}


void KPMReportStyle::MergeFrom(const KPMReportStyle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.KPMReportStyle)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  measurements_.MergeFrom(from.measurements_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KPMReportStyle::CopyFrom(const KPMReportStyle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.KPMReportStyle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPMReportStyle::IsInitialized() const {
  return true;
}

void KPMReportStyle::InternalSwap(KPMReportStyle* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  measurements_.InternalSwap(&other->measurements_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata KPMReportStyle::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[37]);
}

// ===================================================================

class MHOReportStyle::_Internal {
 public:
};

MHOReportStyle::MHOReportStyle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.MHOReportStyle)
}
MHOReportStyle::MHOReportStyle(const MHOReportStyle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:onos.topo.MHOReportStyle)
}

inline void MHOReportStyle::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
type_ = 0;
}

MHOReportStyle::~MHOReportStyle() {
  // @@protoc_insertion_point(destructor:onos.topo.MHOReportStyle)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MHOReportStyle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MHOReportStyle::ArenaDtor(void* object) {
  MHOReportStyle* _this = reinterpret_cast< MHOReportStyle* >(object);
  (void)_this;
}
void MHOReportStyle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MHOReportStyle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MHOReportStyle::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.MHOReportStyle)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MHOReportStyle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.topo.MHOReportStyle.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MHOReportStyle::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.MHOReportStyle)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.topo.MHOReportStyle.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.MHOReportStyle)
  return target;
}

size_t MHOReportStyle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.MHOReportStyle)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // int32 type = 2;
  if (this->_internal_type() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MHOReportStyle::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MHOReportStyle::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MHOReportStyle::GetClassData() const { return &_class_data_; }

void MHOReportStyle::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MHOReportStyle *>(to)->MergeFrom(
      static_cast<const MHOReportStyle &>(from));
}


void MHOReportStyle::MergeFrom(const MHOReportStyle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.MHOReportStyle)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MHOReportStyle::CopyFrom(const MHOReportStyle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.MHOReportStyle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MHOReportStyle::IsInitialized() const {
  return true;
}

void MHOReportStyle::InternalSwap(MHOReportStyle* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(type_, other->type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MHOReportStyle::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[38]);
}

// ===================================================================

class KPMMeasurement::_Internal {
 public:
};

KPMMeasurement::KPMMeasurement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.KPMMeasurement)
}
KPMMeasurement::KPMMeasurement(const KPMMeasurement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:onos.topo.KPMMeasurement)
}

inline void KPMMeasurement::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

KPMMeasurement::~KPMMeasurement() {
  // @@protoc_insertion_point(destructor:onos.topo.KPMMeasurement)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void KPMMeasurement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void KPMMeasurement::ArenaDtor(void* object) {
  KPMMeasurement* _this = reinterpret_cast< KPMMeasurement* >(object);
  (void)_this;
}
void KPMMeasurement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void KPMMeasurement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void KPMMeasurement::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.KPMMeasurement)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* KPMMeasurement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [(.gogoproto.customname) = "ID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.topo.KPMMeasurement.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.topo.KPMMeasurement.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* KPMMeasurement::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.KPMMeasurement)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [(.gogoproto.customname) = "ID"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.topo.KPMMeasurement.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.topo.KPMMeasurement.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.KPMMeasurement)
  return target;
}

size_t KPMMeasurement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.KPMMeasurement)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [(.gogoproto.customname) = "ID"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData KPMMeasurement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    KPMMeasurement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*KPMMeasurement::GetClassData() const { return &_class_data_; }

void KPMMeasurement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<KPMMeasurement *>(to)->MergeFrom(
      static_cast<const KPMMeasurement &>(from));
}


void KPMMeasurement::MergeFrom(const KPMMeasurement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.KPMMeasurement)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void KPMMeasurement::CopyFrom(const KPMMeasurement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.KPMMeasurement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KPMMeasurement::IsInitialized() const {
  return true;
}

void KPMMeasurement::InternalSwap(KPMMeasurement* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata KPMMeasurement::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[39]);
}

// ===================================================================

class RSMNodeSlicingCapabilityItem::_Internal {
 public:
};

RSMNodeSlicingCapabilityItem::RSMNodeSlicingCapabilityItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  supported_config_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.RSMNodeSlicingCapabilityItem)
}
RSMNodeSlicingCapabilityItem::RSMNodeSlicingCapabilityItem(const RSMNodeSlicingCapabilityItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      supported_config_(from.supported_config_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&max_number_of_slices_dl_, &from.max_number_of_slices_dl_,
    static_cast<size_t>(reinterpret_cast<char*>(&max_number_of_ues_per_slice_) -
    reinterpret_cast<char*>(&max_number_of_slices_dl_)) + sizeof(max_number_of_ues_per_slice_));
  // @@protoc_insertion_point(copy_constructor:onos.topo.RSMNodeSlicingCapabilityItem)
}

inline void RSMNodeSlicingCapabilityItem::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&max_number_of_slices_dl_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&max_number_of_ues_per_slice_) -
    reinterpret_cast<char*>(&max_number_of_slices_dl_)) + sizeof(max_number_of_ues_per_slice_));
}

RSMNodeSlicingCapabilityItem::~RSMNodeSlicingCapabilityItem() {
  // @@protoc_insertion_point(destructor:onos.topo.RSMNodeSlicingCapabilityItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RSMNodeSlicingCapabilityItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RSMNodeSlicingCapabilityItem::ArenaDtor(void* object) {
  RSMNodeSlicingCapabilityItem* _this = reinterpret_cast< RSMNodeSlicingCapabilityItem* >(object);
  (void)_this;
}
void RSMNodeSlicingCapabilityItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RSMNodeSlicingCapabilityItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RSMNodeSlicingCapabilityItem::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.RSMNodeSlicingCapabilityItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  supported_config_.Clear();
  ::memset(&max_number_of_slices_dl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&max_number_of_ues_per_slice_) -
      reinterpret_cast<char*>(&max_number_of_slices_dl_)) + sizeof(max_number_of_ues_per_slice_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RSMNodeSlicingCapabilityItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 max_number_of_slices_dl = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          max_number_of_slices_dl_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 max_number_of_slices_ul = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          max_number_of_slices_ul_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.topo.RSMSlicingType slicing_type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_slicing_type(static_cast<::onos::topo::RSMSlicingType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 max_number_of_ues_per_slice = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          max_number_of_ues_per_slice_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .onos.topo.RSMSupportedSlicingConfigItem supported_config = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_supported_config(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RSMNodeSlicingCapabilityItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.RSMNodeSlicingCapabilityItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 max_number_of_slices_dl = 1;
  if (this->_internal_max_number_of_slices_dl() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_max_number_of_slices_dl(), target);
  }

  // int32 max_number_of_slices_ul = 2;
  if (this->_internal_max_number_of_slices_ul() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_max_number_of_slices_ul(), target);
  }

  // .onos.topo.RSMSlicingType slicing_type = 3;
  if (this->_internal_slicing_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_slicing_type(), target);
  }

  // int32 max_number_of_ues_per_slice = 4;
  if (this->_internal_max_number_of_ues_per_slice() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_max_number_of_ues_per_slice(), target);
  }

  // repeated .onos.topo.RSMSupportedSlicingConfigItem supported_config = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_supported_config_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_supported_config(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.RSMNodeSlicingCapabilityItem)
  return target;
}

size_t RSMNodeSlicingCapabilityItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.RSMNodeSlicingCapabilityItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .onos.topo.RSMSupportedSlicingConfigItem supported_config = 5;
  total_size += 1UL * this->_internal_supported_config_size();
  for (const auto& msg : this->supported_config_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 max_number_of_slices_dl = 1;
  if (this->_internal_max_number_of_slices_dl() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_max_number_of_slices_dl());
  }

  // int32 max_number_of_slices_ul = 2;
  if (this->_internal_max_number_of_slices_ul() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_max_number_of_slices_ul());
  }

  // .onos.topo.RSMSlicingType slicing_type = 3;
  if (this->_internal_slicing_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_slicing_type());
  }

  // int32 max_number_of_ues_per_slice = 4;
  if (this->_internal_max_number_of_ues_per_slice() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_max_number_of_ues_per_slice());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RSMNodeSlicingCapabilityItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RSMNodeSlicingCapabilityItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RSMNodeSlicingCapabilityItem::GetClassData() const { return &_class_data_; }

void RSMNodeSlicingCapabilityItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RSMNodeSlicingCapabilityItem *>(to)->MergeFrom(
      static_cast<const RSMNodeSlicingCapabilityItem &>(from));
}


void RSMNodeSlicingCapabilityItem::MergeFrom(const RSMNodeSlicingCapabilityItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.RSMNodeSlicingCapabilityItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  supported_config_.MergeFrom(from.supported_config_);
  if (from._internal_max_number_of_slices_dl() != 0) {
    _internal_set_max_number_of_slices_dl(from._internal_max_number_of_slices_dl());
  }
  if (from._internal_max_number_of_slices_ul() != 0) {
    _internal_set_max_number_of_slices_ul(from._internal_max_number_of_slices_ul());
  }
  if (from._internal_slicing_type() != 0) {
    _internal_set_slicing_type(from._internal_slicing_type());
  }
  if (from._internal_max_number_of_ues_per_slice() != 0) {
    _internal_set_max_number_of_ues_per_slice(from._internal_max_number_of_ues_per_slice());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RSMNodeSlicingCapabilityItem::CopyFrom(const RSMNodeSlicingCapabilityItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.RSMNodeSlicingCapabilityItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RSMNodeSlicingCapabilityItem::IsInitialized() const {
  return true;
}

void RSMNodeSlicingCapabilityItem::InternalSwap(RSMNodeSlicingCapabilityItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  supported_config_.InternalSwap(&other->supported_config_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RSMNodeSlicingCapabilityItem, max_number_of_ues_per_slice_)
      + sizeof(RSMNodeSlicingCapabilityItem::max_number_of_ues_per_slice_)
      - PROTOBUF_FIELD_OFFSET(RSMNodeSlicingCapabilityItem, max_number_of_slices_dl_)>(
          reinterpret_cast<char*>(&max_number_of_slices_dl_),
          reinterpret_cast<char*>(&other->max_number_of_slices_dl_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RSMNodeSlicingCapabilityItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[40]);
}

// ===================================================================

class RSMSupportedSlicingConfigItem::_Internal {
 public:
};

RSMSupportedSlicingConfigItem::RSMSupportedSlicingConfigItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.RSMSupportedSlicingConfigItem)
}
RSMSupportedSlicingConfigItem::RSMSupportedSlicingConfigItem(const RSMSupportedSlicingConfigItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  slicing_config_type_ = from.slicing_config_type_;
  // @@protoc_insertion_point(copy_constructor:onos.topo.RSMSupportedSlicingConfigItem)
}

inline void RSMSupportedSlicingConfigItem::SharedCtor() {
slicing_config_type_ = 0;
}

RSMSupportedSlicingConfigItem::~RSMSupportedSlicingConfigItem() {
  // @@protoc_insertion_point(destructor:onos.topo.RSMSupportedSlicingConfigItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RSMSupportedSlicingConfigItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RSMSupportedSlicingConfigItem::ArenaDtor(void* object) {
  RSMSupportedSlicingConfigItem* _this = reinterpret_cast< RSMSupportedSlicingConfigItem* >(object);
  (void)_this;
}
void RSMSupportedSlicingConfigItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RSMSupportedSlicingConfigItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RSMSupportedSlicingConfigItem::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.RSMSupportedSlicingConfigItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  slicing_config_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RSMSupportedSlicingConfigItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .onos.topo.E2SmRsmCommand slicing_config_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_slicing_config_type(static_cast<::onos::topo::E2SmRsmCommand>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RSMSupportedSlicingConfigItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.RSMSupportedSlicingConfigItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .onos.topo.E2SmRsmCommand slicing_config_type = 1;
  if (this->_internal_slicing_config_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_slicing_config_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.RSMSupportedSlicingConfigItem)
  return target;
}

size_t RSMSupportedSlicingConfigItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.RSMSupportedSlicingConfigItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .onos.topo.E2SmRsmCommand slicing_config_type = 1;
  if (this->_internal_slicing_config_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_slicing_config_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RSMSupportedSlicingConfigItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RSMSupportedSlicingConfigItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RSMSupportedSlicingConfigItem::GetClassData() const { return &_class_data_; }

void RSMSupportedSlicingConfigItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RSMSupportedSlicingConfigItem *>(to)->MergeFrom(
      static_cast<const RSMSupportedSlicingConfigItem &>(from));
}


void RSMSupportedSlicingConfigItem::MergeFrom(const RSMSupportedSlicingConfigItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.RSMSupportedSlicingConfigItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_slicing_config_type() != 0) {
    _internal_set_slicing_config_type(from._internal_slicing_config_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RSMSupportedSlicingConfigItem::CopyFrom(const RSMSupportedSlicingConfigItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.RSMSupportedSlicingConfigItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RSMSupportedSlicingConfigItem::IsInitialized() const {
  return true;
}

void RSMSupportedSlicingConfigItem::InternalSwap(RSMSupportedSlicingConfigItem* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(slicing_config_type_, other->slicing_config_type_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RSMSupportedSlicingConfigItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[41]);
}

// ===================================================================

class RSMSliceItemList::_Internal {
 public:
};

RSMSliceItemList::RSMSliceItemList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  rsm_slice_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.RSMSliceItemList)
}
RSMSliceItemList::RSMSliceItemList(const RSMSliceItemList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      rsm_slice_list_(from.rsm_slice_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:onos.topo.RSMSliceItemList)
}

inline void RSMSliceItemList::SharedCtor() {
}

RSMSliceItemList::~RSMSliceItemList() {
  // @@protoc_insertion_point(destructor:onos.topo.RSMSliceItemList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RSMSliceItemList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RSMSliceItemList::ArenaDtor(void* object) {
  RSMSliceItemList* _this = reinterpret_cast< RSMSliceItemList* >(object);
  (void)_this;
}
void RSMSliceItemList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RSMSliceItemList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RSMSliceItemList::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.RSMSliceItemList)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rsm_slice_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RSMSliceItemList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .onos.topo.RSMSlicingItem rsm_slice_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rsm_slice_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RSMSliceItemList::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.RSMSliceItemList)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .onos.topo.RSMSlicingItem rsm_slice_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rsm_slice_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_rsm_slice_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.RSMSliceItemList)
  return target;
}

size_t RSMSliceItemList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.RSMSliceItemList)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .onos.topo.RSMSlicingItem rsm_slice_list = 1;
  total_size += 1UL * this->_internal_rsm_slice_list_size();
  for (const auto& msg : this->rsm_slice_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RSMSliceItemList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RSMSliceItemList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RSMSliceItemList::GetClassData() const { return &_class_data_; }

void RSMSliceItemList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RSMSliceItemList *>(to)->MergeFrom(
      static_cast<const RSMSliceItemList &>(from));
}


void RSMSliceItemList::MergeFrom(const RSMSliceItemList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.RSMSliceItemList)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  rsm_slice_list_.MergeFrom(from.rsm_slice_list_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RSMSliceItemList::CopyFrom(const RSMSliceItemList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.RSMSliceItemList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RSMSliceItemList::IsInitialized() const {
  return true;
}

void RSMSliceItemList::InternalSwap(RSMSliceItemList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  rsm_slice_list_.InternalSwap(&other->rsm_slice_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RSMSliceItemList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[42]);
}

// ===================================================================

class RSMSlicingItem::_Internal {
 public:
  static const ::onos::topo::RSMSliceParameters& slice_parameters(const RSMSlicingItem* msg);
};

const ::onos::topo::RSMSliceParameters&
RSMSlicingItem::_Internal::slice_parameters(const RSMSlicingItem* msg) {
  return *msg->slice_parameters_;
}
RSMSlicingItem::RSMSlicingItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  ue_id_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.RSMSlicingItem)
}
RSMSlicingItem::RSMSlicingItem(const RSMSlicingItem& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      ue_id_list_(from.ue_id_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  slice_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    slice_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_slice_desc().empty()) {
    slice_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_slice_desc(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_slice_parameters()) {
    slice_parameters_ = new ::onos::topo::RSMSliceParameters(*from.slice_parameters_);
  } else {
    slice_parameters_ = nullptr;
  }
  slice_type_ = from.slice_type_;
  // @@protoc_insertion_point(copy_constructor:onos.topo.RSMSlicingItem)
}

inline void RSMSlicingItem::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
slice_desc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  slice_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&slice_parameters_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&slice_type_) -
    reinterpret_cast<char*>(&slice_parameters_)) + sizeof(slice_type_));
}

RSMSlicingItem::~RSMSlicingItem() {
  // @@protoc_insertion_point(destructor:onos.topo.RSMSlicingItem)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RSMSlicingItem::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  slice_desc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete slice_parameters_;
}

void RSMSlicingItem::ArenaDtor(void* object) {
  RSMSlicingItem* _this = reinterpret_cast< RSMSlicingItem* >(object);
  (void)_this;
}
void RSMSlicingItem::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RSMSlicingItem::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RSMSlicingItem::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.RSMSlicingItem)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ue_id_list_.Clear();
  id_.ClearToEmpty();
  slice_desc_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && slice_parameters_ != nullptr) {
    delete slice_parameters_;
  }
  slice_parameters_ = nullptr;
  slice_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RSMSlicingItem::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [(.gogoproto.customname) = "ID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.topo.RSMSlicingItem.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string slice_desc = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_slice_desc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.topo.RSMSlicingItem.slice_desc"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.topo.RSMSliceParameters slice_parameters = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_slice_parameters(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.topo.RSMSliceType slice_type = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_slice_type(static_cast<::onos::topo::RSMSliceType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated .onos.topo.UeIdentity ue_id_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ue_id_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RSMSlicingItem::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.RSMSlicingItem)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [(.gogoproto.customname) = "ID"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.topo.RSMSlicingItem.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string slice_desc = 2;
  if (!this->_internal_slice_desc().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_slice_desc().data(), static_cast<int>(this->_internal_slice_desc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.topo.RSMSlicingItem.slice_desc");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_slice_desc(), target);
  }

  // .onos.topo.RSMSliceParameters slice_parameters = 3;
  if (this->_internal_has_slice_parameters()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::slice_parameters(this), target, stream);
  }

  // .onos.topo.RSMSliceType slice_type = 4;
  if (this->_internal_slice_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_slice_type(), target);
  }

  // repeated .onos.topo.UeIdentity ue_id_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ue_id_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_ue_id_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.RSMSlicingItem)
  return target;
}

size_t RSMSlicingItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.RSMSlicingItem)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .onos.topo.UeIdentity ue_id_list = 5;
  total_size += 1UL * this->_internal_ue_id_list_size();
  for (const auto& msg : this->ue_id_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1 [(.gogoproto.customname) = "ID"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string slice_desc = 2;
  if (!this->_internal_slice_desc().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_slice_desc());
  }

  // .onos.topo.RSMSliceParameters slice_parameters = 3;
  if (this->_internal_has_slice_parameters()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *slice_parameters_);
  }

  // .onos.topo.RSMSliceType slice_type = 4;
  if (this->_internal_slice_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_slice_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RSMSlicingItem::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RSMSlicingItem::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RSMSlicingItem::GetClassData() const { return &_class_data_; }

void RSMSlicingItem::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RSMSlicingItem *>(to)->MergeFrom(
      static_cast<const RSMSlicingItem &>(from));
}


void RSMSlicingItem::MergeFrom(const RSMSlicingItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.RSMSlicingItem)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  ue_id_list_.MergeFrom(from.ue_id_list_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_slice_desc().empty()) {
    _internal_set_slice_desc(from._internal_slice_desc());
  }
  if (from._internal_has_slice_parameters()) {
    _internal_mutable_slice_parameters()->::onos::topo::RSMSliceParameters::MergeFrom(from._internal_slice_parameters());
  }
  if (from._internal_slice_type() != 0) {
    _internal_set_slice_type(from._internal_slice_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RSMSlicingItem::CopyFrom(const RSMSlicingItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.RSMSlicingItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RSMSlicingItem::IsInitialized() const {
  return true;
}

void RSMSlicingItem::InternalSwap(RSMSlicingItem* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ue_id_list_.InternalSwap(&other->ue_id_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &slice_desc_, lhs_arena,
      &other->slice_desc_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RSMSlicingItem, slice_type_)
      + sizeof(RSMSlicingItem::slice_type_)
      - PROTOBUF_FIELD_OFFSET(RSMSlicingItem, slice_parameters_)>(
          reinterpret_cast<char*>(&slice_parameters_),
          reinterpret_cast<char*>(&other->slice_parameters_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RSMSlicingItem::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[43]);
}

// ===================================================================

class RSMSliceParameters::_Internal {
 public:
};

RSMSliceParameters::RSMSliceParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.RSMSliceParameters)
}
RSMSliceParameters::RSMSliceParameters(const RSMSliceParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&scheduler_type_, &from.scheduler_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&qos_level_) -
    reinterpret_cast<char*>(&scheduler_type_)) + sizeof(qos_level_));
  // @@protoc_insertion_point(copy_constructor:onos.topo.RSMSliceParameters)
}

inline void RSMSliceParameters::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&scheduler_type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&qos_level_) -
    reinterpret_cast<char*>(&scheduler_type_)) + sizeof(qos_level_));
}

RSMSliceParameters::~RSMSliceParameters() {
  // @@protoc_insertion_point(destructor:onos.topo.RSMSliceParameters)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RSMSliceParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RSMSliceParameters::ArenaDtor(void* object) {
  RSMSliceParameters* _this = reinterpret_cast< RSMSliceParameters* >(object);
  (void)_this;
}
void RSMSliceParameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RSMSliceParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RSMSliceParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.RSMSliceParameters)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&scheduler_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&qos_level_) -
      reinterpret_cast<char*>(&scheduler_type_)) + sizeof(qos_level_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RSMSliceParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .onos.topo.RSMSchedulerType scheduler_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_scheduler_type(static_cast<::onos::topo::RSMSchedulerType>(val));
        } else
          goto handle_unusual;
        continue;
      // int32 weight = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          weight_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 qos_level = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          qos_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RSMSliceParameters::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.RSMSliceParameters)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .onos.topo.RSMSchedulerType scheduler_type = 1;
  if (this->_internal_scheduler_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_scheduler_type(), target);
  }

  // int32 weight = 2;
  if (this->_internal_weight() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_weight(), target);
  }

  // int32 qos_level = 3;
  if (this->_internal_qos_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_qos_level(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.RSMSliceParameters)
  return target;
}

size_t RSMSliceParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.RSMSliceParameters)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .onos.topo.RSMSchedulerType scheduler_type = 1;
  if (this->_internal_scheduler_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_scheduler_type());
  }

  // int32 weight = 2;
  if (this->_internal_weight() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_weight());
  }

  // int32 qos_level = 3;
  if (this->_internal_qos_level() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_qos_level());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RSMSliceParameters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RSMSliceParameters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RSMSliceParameters::GetClassData() const { return &_class_data_; }

void RSMSliceParameters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RSMSliceParameters *>(to)->MergeFrom(
      static_cast<const RSMSliceParameters &>(from));
}


void RSMSliceParameters::MergeFrom(const RSMSliceParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.RSMSliceParameters)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_scheduler_type() != 0) {
    _internal_set_scheduler_type(from._internal_scheduler_type());
  }
  if (from._internal_weight() != 0) {
    _internal_set_weight(from._internal_weight());
  }
  if (from._internal_qos_level() != 0) {
    _internal_set_qos_level(from._internal_qos_level());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RSMSliceParameters::CopyFrom(const RSMSliceParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.RSMSliceParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RSMSliceParameters::IsInitialized() const {
  return true;
}

void RSMSliceParameters::InternalSwap(RSMSliceParameters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RSMSliceParameters, qos_level_)
      + sizeof(RSMSliceParameters::qos_level_)
      - PROTOBUF_FIELD_OFFSET(RSMSliceParameters, scheduler_type_)>(
          reinterpret_cast<char*>(&scheduler_type_),
          reinterpret_cast<char*>(&other->scheduler_type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RSMSliceParameters::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[44]);
}

// ===================================================================

class DuUeF1apID::_Internal {
 public:
};

DuUeF1apID::DuUeF1apID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.DuUeF1apID)
}
DuUeF1apID::DuUeF1apID(const DuUeF1apID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:onos.topo.DuUeF1apID)
}

inline void DuUeF1apID::SharedCtor() {
value_ = int64_t{0};
}

DuUeF1apID::~DuUeF1apID() {
  // @@protoc_insertion_point(destructor:onos.topo.DuUeF1apID)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DuUeF1apID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DuUeF1apID::ArenaDtor(void* object) {
  DuUeF1apID* _this = reinterpret_cast< DuUeF1apID* >(object);
  (void)_this;
}
void DuUeF1apID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DuUeF1apID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DuUeF1apID::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.DuUeF1apID)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DuUeF1apID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DuUeF1apID::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.DuUeF1apID)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.DuUeF1apID)
  return target;
}

size_t DuUeF1apID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.DuUeF1apID)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DuUeF1apID::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DuUeF1apID::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DuUeF1apID::GetClassData() const { return &_class_data_; }

void DuUeF1apID::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DuUeF1apID *>(to)->MergeFrom(
      static_cast<const DuUeF1apID &>(from));
}


void DuUeF1apID::MergeFrom(const DuUeF1apID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.DuUeF1apID)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DuUeF1apID::CopyFrom(const DuUeF1apID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.DuUeF1apID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DuUeF1apID::IsInitialized() const {
  return true;
}

void DuUeF1apID::InternalSwap(DuUeF1apID* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DuUeF1apID::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[45]);
}

// ===================================================================

class CuUeF1apID::_Internal {
 public:
};

CuUeF1apID::CuUeF1apID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.CuUeF1apID)
}
CuUeF1apID::CuUeF1apID(const CuUeF1apID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:onos.topo.CuUeF1apID)
}

inline void CuUeF1apID::SharedCtor() {
value_ = int64_t{0};
}

CuUeF1apID::~CuUeF1apID() {
  // @@protoc_insertion_point(destructor:onos.topo.CuUeF1apID)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CuUeF1apID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void CuUeF1apID::ArenaDtor(void* object) {
  CuUeF1apID* _this = reinterpret_cast< CuUeF1apID* >(object);
  (void)_this;
}
void CuUeF1apID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CuUeF1apID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CuUeF1apID::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.CuUeF1apID)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CuUeF1apID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CuUeF1apID::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.CuUeF1apID)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.CuUeF1apID)
  return target;
}

size_t CuUeF1apID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.CuUeF1apID)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CuUeF1apID::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CuUeF1apID::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CuUeF1apID::GetClassData() const { return &_class_data_; }

void CuUeF1apID::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<CuUeF1apID *>(to)->MergeFrom(
      static_cast<const CuUeF1apID &>(from));
}


void CuUeF1apID::MergeFrom(const CuUeF1apID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.CuUeF1apID)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CuUeF1apID::CopyFrom(const CuUeF1apID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.CuUeF1apID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CuUeF1apID::IsInitialized() const {
  return true;
}

void CuUeF1apID::InternalSwap(CuUeF1apID* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CuUeF1apID::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[46]);
}

// ===================================================================

class RanUeNgapID::_Internal {
 public:
};

RanUeNgapID::RanUeNgapID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.RanUeNgapID)
}
RanUeNgapID::RanUeNgapID(const RanUeNgapID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:onos.topo.RanUeNgapID)
}

inline void RanUeNgapID::SharedCtor() {
value_ = int64_t{0};
}

RanUeNgapID::~RanUeNgapID() {
  // @@protoc_insertion_point(destructor:onos.topo.RanUeNgapID)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RanUeNgapID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RanUeNgapID::ArenaDtor(void* object) {
  RanUeNgapID* _this = reinterpret_cast< RanUeNgapID* >(object);
  (void)_this;
}
void RanUeNgapID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RanUeNgapID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RanUeNgapID::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.RanUeNgapID)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RanUeNgapID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RanUeNgapID::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.RanUeNgapID)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.RanUeNgapID)
  return target;
}

size_t RanUeNgapID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.RanUeNgapID)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RanUeNgapID::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RanUeNgapID::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RanUeNgapID::GetClassData() const { return &_class_data_; }

void RanUeNgapID::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RanUeNgapID *>(to)->MergeFrom(
      static_cast<const RanUeNgapID &>(from));
}


void RanUeNgapID::MergeFrom(const RanUeNgapID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.RanUeNgapID)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RanUeNgapID::CopyFrom(const RanUeNgapID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.RanUeNgapID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RanUeNgapID::IsInitialized() const {
  return true;
}

void RanUeNgapID::InternalSwap(RanUeNgapID* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RanUeNgapID::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[47]);
}

// ===================================================================

class EnbUeS1apID::_Internal {
 public:
};

EnbUeS1apID::EnbUeS1apID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.EnbUeS1apID)
}
EnbUeS1apID::EnbUeS1apID(const EnbUeS1apID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:onos.topo.EnbUeS1apID)
}

inline void EnbUeS1apID::SharedCtor() {
value_ = 0;
}

EnbUeS1apID::~EnbUeS1apID() {
  // @@protoc_insertion_point(destructor:onos.topo.EnbUeS1apID)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EnbUeS1apID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EnbUeS1apID::ArenaDtor(void* object) {
  EnbUeS1apID* _this = reinterpret_cast< EnbUeS1apID* >(object);
  (void)_this;
}
void EnbUeS1apID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EnbUeS1apID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EnbUeS1apID::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.EnbUeS1apID)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EnbUeS1apID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EnbUeS1apID::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.EnbUeS1apID)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.EnbUeS1apID)
  return target;
}

size_t EnbUeS1apID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.EnbUeS1apID)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EnbUeS1apID::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EnbUeS1apID::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EnbUeS1apID::GetClassData() const { return &_class_data_; }

void EnbUeS1apID::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EnbUeS1apID *>(to)->MergeFrom(
      static_cast<const EnbUeS1apID &>(from));
}


void EnbUeS1apID::MergeFrom(const EnbUeS1apID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.EnbUeS1apID)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EnbUeS1apID::CopyFrom(const EnbUeS1apID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.EnbUeS1apID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnbUeS1apID::IsInitialized() const {
  return true;
}

void EnbUeS1apID::InternalSwap(EnbUeS1apID* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EnbUeS1apID::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[48]);
}

// ===================================================================

class AmfUeNgapID::_Internal {
 public:
};

AmfUeNgapID::AmfUeNgapID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.AmfUeNgapID)
}
AmfUeNgapID::AmfUeNgapID(const AmfUeNgapID& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:onos.topo.AmfUeNgapID)
}

inline void AmfUeNgapID::SharedCtor() {
value_ = int64_t{0};
}

AmfUeNgapID::~AmfUeNgapID() {
  // @@protoc_insertion_point(destructor:onos.topo.AmfUeNgapID)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AmfUeNgapID::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AmfUeNgapID::ArenaDtor(void* object) {
  AmfUeNgapID* _this = reinterpret_cast< AmfUeNgapID* >(object);
  (void)_this;
}
void AmfUeNgapID::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AmfUeNgapID::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AmfUeNgapID::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.AmfUeNgapID)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AmfUeNgapID::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AmfUeNgapID::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.AmfUeNgapID)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.AmfUeNgapID)
  return target;
}

size_t AmfUeNgapID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.AmfUeNgapID)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AmfUeNgapID::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AmfUeNgapID::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AmfUeNgapID::GetClassData() const { return &_class_data_; }

void AmfUeNgapID::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AmfUeNgapID *>(to)->MergeFrom(
      static_cast<const AmfUeNgapID &>(from));
}


void AmfUeNgapID::MergeFrom(const AmfUeNgapID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.AmfUeNgapID)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AmfUeNgapID::CopyFrom(const AmfUeNgapID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.AmfUeNgapID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AmfUeNgapID::IsInitialized() const {
  return true;
}

void AmfUeNgapID::InternalSwap(AmfUeNgapID* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AmfUeNgapID::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[49]);
}

// ===================================================================

class UeIdentity::_Internal {
 public:
  static const ::onos::topo::DuUeF1apID& du_ue_f1ap_id(const UeIdentity* msg);
  static const ::onos::topo::CuUeF1apID& cu_ue_f1ap_id(const UeIdentity* msg);
  static const ::onos::topo::RanUeNgapID& ran_ue_ngap_id(const UeIdentity* msg);
  static const ::onos::topo::EnbUeS1apID& enb_ue_s1ap_id(const UeIdentity* msg);
  static const ::onos::topo::AmfUeNgapID& amf_ue_ngap_id(const UeIdentity* msg);
  static const ::onos::topo::DrbId& drb_id(const UeIdentity* msg);
};

const ::onos::topo::DuUeF1apID&
UeIdentity::_Internal::du_ue_f1ap_id(const UeIdentity* msg) {
  return *msg->du_ue_f1ap_id_;
}
const ::onos::topo::CuUeF1apID&
UeIdentity::_Internal::cu_ue_f1ap_id(const UeIdentity* msg) {
  return *msg->cu_ue_f1ap_id_;
}
const ::onos::topo::RanUeNgapID&
UeIdentity::_Internal::ran_ue_ngap_id(const UeIdentity* msg) {
  return *msg->ran_ue_ngap_id_;
}
const ::onos::topo::EnbUeS1apID&
UeIdentity::_Internal::enb_ue_s1ap_id(const UeIdentity* msg) {
  return *msg->enb_ue_s1ap_id_;
}
const ::onos::topo::AmfUeNgapID&
UeIdentity::_Internal::amf_ue_ngap_id(const UeIdentity* msg) {
  return *msg->amf_ue_ngap_id_;
}
const ::onos::topo::DrbId&
UeIdentity::_Internal::drb_id(const UeIdentity* msg) {
  return *msg->drb_id_;
}
UeIdentity::UeIdentity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.UeIdentity)
}
UeIdentity::UeIdentity(const UeIdentity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_du_ue_f1ap_id()) {
    du_ue_f1ap_id_ = new ::onos::topo::DuUeF1apID(*from.du_ue_f1ap_id_);
  } else {
    du_ue_f1ap_id_ = nullptr;
  }
  if (from._internal_has_cu_ue_f1ap_id()) {
    cu_ue_f1ap_id_ = new ::onos::topo::CuUeF1apID(*from.cu_ue_f1ap_id_);
  } else {
    cu_ue_f1ap_id_ = nullptr;
  }
  if (from._internal_has_ran_ue_ngap_id()) {
    ran_ue_ngap_id_ = new ::onos::topo::RanUeNgapID(*from.ran_ue_ngap_id_);
  } else {
    ran_ue_ngap_id_ = nullptr;
  }
  if (from._internal_has_enb_ue_s1ap_id()) {
    enb_ue_s1ap_id_ = new ::onos::topo::EnbUeS1apID(*from.enb_ue_s1ap_id_);
  } else {
    enb_ue_s1ap_id_ = nullptr;
  }
  if (from._internal_has_amf_ue_ngap_id()) {
    amf_ue_ngap_id_ = new ::onos::topo::AmfUeNgapID(*from.amf_ue_ngap_id_);
  } else {
    amf_ue_ngap_id_ = nullptr;
  }
  if (from._internal_has_drb_id()) {
    drb_id_ = new ::onos::topo::DrbId(*from.drb_id_);
  } else {
    drb_id_ = nullptr;
  }
  preferred_id_type_ = from.preferred_id_type_;
  // @@protoc_insertion_point(copy_constructor:onos.topo.UeIdentity)
}

inline void UeIdentity::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&du_ue_f1ap_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&preferred_id_type_) -
    reinterpret_cast<char*>(&du_ue_f1ap_id_)) + sizeof(preferred_id_type_));
}

UeIdentity::~UeIdentity() {
  // @@protoc_insertion_point(destructor:onos.topo.UeIdentity)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UeIdentity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete du_ue_f1ap_id_;
  if (this != internal_default_instance()) delete cu_ue_f1ap_id_;
  if (this != internal_default_instance()) delete ran_ue_ngap_id_;
  if (this != internal_default_instance()) delete enb_ue_s1ap_id_;
  if (this != internal_default_instance()) delete amf_ue_ngap_id_;
  if (this != internal_default_instance()) delete drb_id_;
}

void UeIdentity::ArenaDtor(void* object) {
  UeIdentity* _this = reinterpret_cast< UeIdentity* >(object);
  (void)_this;
}
void UeIdentity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UeIdentity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UeIdentity::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.UeIdentity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && du_ue_f1ap_id_ != nullptr) {
    delete du_ue_f1ap_id_;
  }
  du_ue_f1ap_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && cu_ue_f1ap_id_ != nullptr) {
    delete cu_ue_f1ap_id_;
  }
  cu_ue_f1ap_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && ran_ue_ngap_id_ != nullptr) {
    delete ran_ue_ngap_id_;
  }
  ran_ue_ngap_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && enb_ue_s1ap_id_ != nullptr) {
    delete enb_ue_s1ap_id_;
  }
  enb_ue_s1ap_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && amf_ue_ngap_id_ != nullptr) {
    delete amf_ue_ngap_id_;
  }
  amf_ue_ngap_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && drb_id_ != nullptr) {
    delete drb_id_;
  }
  drb_id_ = nullptr;
  preferred_id_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UeIdentity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .onos.topo.DuUeF1apID du_ue_f1ap_id = 1 [(.gogoproto.customname) = "DuUeF1apID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_du_ue_f1ap_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.topo.CuUeF1apID cu_ue_f1ap_id = 2 [(.gogoproto.customname) = "CuUeF1apID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_cu_ue_f1ap_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.topo.RanUeNgapID ran_ue_ngap_id = 3 [(.gogoproto.customname) = "RANUeNgapID"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_ran_ue_ngap_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.topo.EnbUeS1apID enb_ue_s1ap_id = 4 [(.gogoproto.customname) = "EnbUeS1apID"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_enb_ue_s1ap_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.topo.AmfUeNgapID amf_ue_ngap_id = 5 [(.gogoproto.customname) = "AMFUeNgapID"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_amf_ue_ngap_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.topo.UeIdType preferred_id_type = 6 [(.gogoproto.customname) = "PreferredIDType"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_preferred_id_type(static_cast<::onos::topo::UeIdType>(val));
        } else
          goto handle_unusual;
        continue;
      // .onos.topo.DrbId drb_id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_drb_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UeIdentity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.UeIdentity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .onos.topo.DuUeF1apID du_ue_f1ap_id = 1 [(.gogoproto.customname) = "DuUeF1apID"];
  if (this->_internal_has_du_ue_f1ap_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::du_ue_f1ap_id(this), target, stream);
  }

  // .onos.topo.CuUeF1apID cu_ue_f1ap_id = 2 [(.gogoproto.customname) = "CuUeF1apID"];
  if (this->_internal_has_cu_ue_f1ap_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::cu_ue_f1ap_id(this), target, stream);
  }

  // .onos.topo.RanUeNgapID ran_ue_ngap_id = 3 [(.gogoproto.customname) = "RANUeNgapID"];
  if (this->_internal_has_ran_ue_ngap_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::ran_ue_ngap_id(this), target, stream);
  }

  // .onos.topo.EnbUeS1apID enb_ue_s1ap_id = 4 [(.gogoproto.customname) = "EnbUeS1apID"];
  if (this->_internal_has_enb_ue_s1ap_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::enb_ue_s1ap_id(this), target, stream);
  }

  // .onos.topo.AmfUeNgapID amf_ue_ngap_id = 5 [(.gogoproto.customname) = "AMFUeNgapID"];
  if (this->_internal_has_amf_ue_ngap_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::amf_ue_ngap_id(this), target, stream);
  }

  // .onos.topo.UeIdType preferred_id_type = 6 [(.gogoproto.customname) = "PreferredIDType"];
  if (this->_internal_preferred_id_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_preferred_id_type(), target);
  }

  // .onos.topo.DrbId drb_id = 7;
  if (this->_internal_has_drb_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::drb_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.UeIdentity)
  return target;
}

size_t UeIdentity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.UeIdentity)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .onos.topo.DuUeF1apID du_ue_f1ap_id = 1 [(.gogoproto.customname) = "DuUeF1apID"];
  if (this->_internal_has_du_ue_f1ap_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *du_ue_f1ap_id_);
  }

  // .onos.topo.CuUeF1apID cu_ue_f1ap_id = 2 [(.gogoproto.customname) = "CuUeF1apID"];
  if (this->_internal_has_cu_ue_f1ap_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cu_ue_f1ap_id_);
  }

  // .onos.topo.RanUeNgapID ran_ue_ngap_id = 3 [(.gogoproto.customname) = "RANUeNgapID"];
  if (this->_internal_has_ran_ue_ngap_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ran_ue_ngap_id_);
  }

  // .onos.topo.EnbUeS1apID enb_ue_s1ap_id = 4 [(.gogoproto.customname) = "EnbUeS1apID"];
  if (this->_internal_has_enb_ue_s1ap_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *enb_ue_s1ap_id_);
  }

  // .onos.topo.AmfUeNgapID amf_ue_ngap_id = 5 [(.gogoproto.customname) = "AMFUeNgapID"];
  if (this->_internal_has_amf_ue_ngap_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *amf_ue_ngap_id_);
  }

  // .onos.topo.DrbId drb_id = 7;
  if (this->_internal_has_drb_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *drb_id_);
  }

  // .onos.topo.UeIdType preferred_id_type = 6 [(.gogoproto.customname) = "PreferredIDType"];
  if (this->_internal_preferred_id_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_preferred_id_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UeIdentity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UeIdentity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UeIdentity::GetClassData() const { return &_class_data_; }

void UeIdentity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UeIdentity *>(to)->MergeFrom(
      static_cast<const UeIdentity &>(from));
}


void UeIdentity::MergeFrom(const UeIdentity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.UeIdentity)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_du_ue_f1ap_id()) {
    _internal_mutable_du_ue_f1ap_id()->::onos::topo::DuUeF1apID::MergeFrom(from._internal_du_ue_f1ap_id());
  }
  if (from._internal_has_cu_ue_f1ap_id()) {
    _internal_mutable_cu_ue_f1ap_id()->::onos::topo::CuUeF1apID::MergeFrom(from._internal_cu_ue_f1ap_id());
  }
  if (from._internal_has_ran_ue_ngap_id()) {
    _internal_mutable_ran_ue_ngap_id()->::onos::topo::RanUeNgapID::MergeFrom(from._internal_ran_ue_ngap_id());
  }
  if (from._internal_has_enb_ue_s1ap_id()) {
    _internal_mutable_enb_ue_s1ap_id()->::onos::topo::EnbUeS1apID::MergeFrom(from._internal_enb_ue_s1ap_id());
  }
  if (from._internal_has_amf_ue_ngap_id()) {
    _internal_mutable_amf_ue_ngap_id()->::onos::topo::AmfUeNgapID::MergeFrom(from._internal_amf_ue_ngap_id());
  }
  if (from._internal_has_drb_id()) {
    _internal_mutable_drb_id()->::onos::topo::DrbId::MergeFrom(from._internal_drb_id());
  }
  if (from._internal_preferred_id_type() != 0) {
    _internal_set_preferred_id_type(from._internal_preferred_id_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UeIdentity::CopyFrom(const UeIdentity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.UeIdentity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UeIdentity::IsInitialized() const {
  return true;
}

void UeIdentity::InternalSwap(UeIdentity* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UeIdentity, preferred_id_type_)
      + sizeof(UeIdentity::preferred_id_type_)
      - PROTOBUF_FIELD_OFFSET(UeIdentity, du_ue_f1ap_id_)>(
          reinterpret_cast<char*>(&du_ue_f1ap_id_),
          reinterpret_cast<char*>(&other->du_ue_f1ap_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UeIdentity::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[50]);
}

// ===================================================================

class DrbId::_Internal {
 public:
  static const ::onos::topo::FourGDrbId& four_gdrb_id(const DrbId* msg);
  static const ::onos::topo::FiveGDrbId& five_gdrb_id(const DrbId* msg);
};

const ::onos::topo::FourGDrbId&
DrbId::_Internal::four_gdrb_id(const DrbId* msg) {
  return *msg->drb_id_.four_gdrb_id_;
}
const ::onos::topo::FiveGDrbId&
DrbId::_Internal::five_gdrb_id(const DrbId* msg) {
  return *msg->drb_id_.five_gdrb_id_;
}
void DrbId::set_allocated_four_gdrb_id(::onos::topo::FourGDrbId* four_gdrb_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_drb_id();
  if (four_gdrb_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::topo::FourGDrbId>::GetOwningArena(four_gdrb_id);
    if (message_arena != submessage_arena) {
      four_gdrb_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, four_gdrb_id, submessage_arena);
    }
    set_has_four_gdrb_id();
    drb_id_.four_gdrb_id_ = four_gdrb_id;
  }
  // @@protoc_insertion_point(field_set_allocated:onos.topo.DrbId.four_gdrb_id)
}
void DrbId::set_allocated_five_gdrb_id(::onos::topo::FiveGDrbId* five_gdrb_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_drb_id();
  if (five_gdrb_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::topo::FiveGDrbId>::GetOwningArena(five_gdrb_id);
    if (message_arena != submessage_arena) {
      five_gdrb_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, five_gdrb_id, submessage_arena);
    }
    set_has_five_gdrb_id();
    drb_id_.five_gdrb_id_ = five_gdrb_id;
  }
  // @@protoc_insertion_point(field_set_allocated:onos.topo.DrbId.five_gdrb_id)
}
DrbId::DrbId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.DrbId)
}
DrbId::DrbId(const DrbId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_drb_id();
  switch (from.drb_id_case()) {
    case kFourGdrbId: {
      _internal_mutable_four_gdrb_id()->::onos::topo::FourGDrbId::MergeFrom(from._internal_four_gdrb_id());
      break;
    }
    case kFiveGdrbId: {
      _internal_mutable_five_gdrb_id()->::onos::topo::FiveGDrbId::MergeFrom(from._internal_five_gdrb_id());
      break;
    }
    case DRB_ID_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:onos.topo.DrbId)
}

inline void DrbId::SharedCtor() {
clear_has_drb_id();
}

DrbId::~DrbId() {
  // @@protoc_insertion_point(destructor:onos.topo.DrbId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DrbId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_drb_id()) {
    clear_drb_id();
  }
}

void DrbId::ArenaDtor(void* object) {
  DrbId* _this = reinterpret_cast< DrbId* >(object);
  (void)_this;
}
void DrbId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DrbId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DrbId::clear_drb_id() {
// @@protoc_insertion_point(one_of_clear_start:onos.topo.DrbId)
  switch (drb_id_case()) {
    case kFourGdrbId: {
      if (GetArenaForAllocation() == nullptr) {
        delete drb_id_.four_gdrb_id_;
      }
      break;
    }
    case kFiveGdrbId: {
      if (GetArenaForAllocation() == nullptr) {
        delete drb_id_.five_gdrb_id_;
      }
      break;
    }
    case DRB_ID_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DRB_ID_NOT_SET;
}


void DrbId::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.DrbId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_drb_id();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DrbId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .onos.topo.FourGDrbId four_gdrb_id = 1 [json_name = "fourGDrbID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_four_gdrb_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.topo.FiveGDrbId five_gdrb_id = 2 [json_name = "fiveGDrbID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_five_gdrb_id(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DrbId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.DrbId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .onos.topo.FourGDrbId four_gdrb_id = 1 [json_name = "fourGDrbID"];
  if (_internal_has_four_gdrb_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::four_gdrb_id(this), target, stream);
  }

  // .onos.topo.FiveGDrbId five_gdrb_id = 2 [json_name = "fiveGDrbID"];
  if (_internal_has_five_gdrb_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::five_gdrb_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.DrbId)
  return target;
}

size_t DrbId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.DrbId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (drb_id_case()) {
    // .onos.topo.FourGDrbId four_gdrb_id = 1 [json_name = "fourGDrbID"];
    case kFourGdrbId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *drb_id_.four_gdrb_id_);
      break;
    }
    // .onos.topo.FiveGDrbId five_gdrb_id = 2 [json_name = "fiveGDrbID"];
    case kFiveGdrbId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *drb_id_.five_gdrb_id_);
      break;
    }
    case DRB_ID_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DrbId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DrbId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DrbId::GetClassData() const { return &_class_data_; }

void DrbId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DrbId *>(to)->MergeFrom(
      static_cast<const DrbId &>(from));
}


void DrbId::MergeFrom(const DrbId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.DrbId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.drb_id_case()) {
    case kFourGdrbId: {
      _internal_mutable_four_gdrb_id()->::onos::topo::FourGDrbId::MergeFrom(from._internal_four_gdrb_id());
      break;
    }
    case kFiveGdrbId: {
      _internal_mutable_five_gdrb_id()->::onos::topo::FiveGDrbId::MergeFrom(from._internal_five_gdrb_id());
      break;
    }
    case DRB_ID_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DrbId::CopyFrom(const DrbId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.DrbId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrbId::IsInitialized() const {
  return true;
}

void DrbId::InternalSwap(DrbId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(drb_id_, other->drb_id_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DrbId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[51]);
}

// ===================================================================

class FiveGDrbId::_Internal {
 public:
  static const ::onos::topo::Qfi& qfi(const FiveGDrbId* msg);
};

const ::onos::topo::Qfi&
FiveGDrbId::_Internal::qfi(const FiveGDrbId* msg) {
  return *msg->qfi_;
}
FiveGDrbId::FiveGDrbId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  flows_map_to_drb_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.FiveGDrbId)
}
FiveGDrbId::FiveGDrbId(const FiveGDrbId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      flows_map_to_drb_(from.flows_map_to_drb_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_qfi()) {
    qfi_ = new ::onos::topo::Qfi(*from.qfi_);
  } else {
    qfi_ = nullptr;
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:onos.topo.FiveGDrbId)
}

inline void FiveGDrbId::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&qfi_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&qfi_)) + sizeof(value_));
}

FiveGDrbId::~FiveGDrbId() {
  // @@protoc_insertion_point(destructor:onos.topo.FiveGDrbId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FiveGDrbId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete qfi_;
}

void FiveGDrbId::ArenaDtor(void* object) {
  FiveGDrbId* _this = reinterpret_cast< FiveGDrbId* >(object);
  (void)_this;
}
void FiveGDrbId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FiveGDrbId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FiveGDrbId::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.FiveGDrbId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  flows_map_to_drb_.Clear();
  if (GetArenaForAllocation() == nullptr && qfi_ != nullptr) {
    delete qfi_;
  }
  qfi_ = nullptr;
  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FiveGDrbId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.topo.Qfi qfi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_qfi(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .onos.topo.QoSflowLevelParameters flows_map_to_drb = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_flows_map_to_drb(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FiveGDrbId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.FiveGDrbId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_value(), target);
  }

  // .onos.topo.Qfi qfi = 2;
  if (this->_internal_has_qfi()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::qfi(this), target, stream);
  }

  // repeated .onos.topo.QoSflowLevelParameters flows_map_to_drb = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_flows_map_to_drb_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_flows_map_to_drb(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.FiveGDrbId)
  return target;
}

size_t FiveGDrbId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.FiveGDrbId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .onos.topo.QoSflowLevelParameters flows_map_to_drb = 3;
  total_size += 1UL * this->_internal_flows_map_to_drb_size();
  for (const auto& msg : this->flows_map_to_drb_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .onos.topo.Qfi qfi = 2;
  if (this->_internal_has_qfi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *qfi_);
  }

  // int32 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FiveGDrbId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FiveGDrbId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FiveGDrbId::GetClassData() const { return &_class_data_; }

void FiveGDrbId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FiveGDrbId *>(to)->MergeFrom(
      static_cast<const FiveGDrbId &>(from));
}


void FiveGDrbId::MergeFrom(const FiveGDrbId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.FiveGDrbId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  flows_map_to_drb_.MergeFrom(from.flows_map_to_drb_);
  if (from._internal_has_qfi()) {
    _internal_mutable_qfi()->::onos::topo::Qfi::MergeFrom(from._internal_qfi());
  }
  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FiveGDrbId::CopyFrom(const FiveGDrbId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.FiveGDrbId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FiveGDrbId::IsInitialized() const {
  return true;
}

void FiveGDrbId::InternalSwap(FiveGDrbId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  flows_map_to_drb_.InternalSwap(&other->flows_map_to_drb_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FiveGDrbId, value_)
      + sizeof(FiveGDrbId::value_)
      - PROTOBUF_FIELD_OFFSET(FiveGDrbId, qfi_)>(
          reinterpret_cast<char*>(&qfi_),
          reinterpret_cast<char*>(&other->qfi_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FiveGDrbId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[52]);
}

// ===================================================================

class Qfi::_Internal {
 public:
};

Qfi::Qfi(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.Qfi)
}
Qfi::Qfi(const Qfi& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:onos.topo.Qfi)
}

inline void Qfi::SharedCtor() {
value_ = 0;
}

Qfi::~Qfi() {
  // @@protoc_insertion_point(destructor:onos.topo.Qfi)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Qfi::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Qfi::ArenaDtor(void* object) {
  Qfi* _this = reinterpret_cast< Qfi* >(object);
  (void)_this;
}
void Qfi::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Qfi::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Qfi::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.Qfi)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Qfi::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Qfi::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.Qfi)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.Qfi)
  return target;
}

size_t Qfi::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.Qfi)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Qfi::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Qfi::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Qfi::GetClassData() const { return &_class_data_; }

void Qfi::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Qfi *>(to)->MergeFrom(
      static_cast<const Qfi &>(from));
}


void Qfi::MergeFrom(const Qfi& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.Qfi)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Qfi::CopyFrom(const Qfi& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.Qfi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qfi::IsInitialized() const {
  return true;
}

void Qfi::InternalSwap(Qfi* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Qfi::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[53]);
}

// ===================================================================

class QoSflowLevelParameters::_Internal {
 public:
  static const ::onos::topo::DynamicFiveQi& dynamic_five_qi(const QoSflowLevelParameters* msg);
  static const ::onos::topo::NonDynamicFiveQi& non_dynamic_five_qi(const QoSflowLevelParameters* msg);
};

const ::onos::topo::DynamicFiveQi&
QoSflowLevelParameters::_Internal::dynamic_five_qi(const QoSflowLevelParameters* msg) {
  return *msg->qos_flow_level_parameters_.dynamic_five_qi_;
}
const ::onos::topo::NonDynamicFiveQi&
QoSflowLevelParameters::_Internal::non_dynamic_five_qi(const QoSflowLevelParameters* msg) {
  return *msg->qos_flow_level_parameters_.non_dynamic_five_qi_;
}
void QoSflowLevelParameters::set_allocated_dynamic_five_qi(::onos::topo::DynamicFiveQi* dynamic_five_qi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_qos_flow_level_parameters();
  if (dynamic_five_qi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::topo::DynamicFiveQi>::GetOwningArena(dynamic_five_qi);
    if (message_arena != submessage_arena) {
      dynamic_five_qi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dynamic_five_qi, submessage_arena);
    }
    set_has_dynamic_five_qi();
    qos_flow_level_parameters_.dynamic_five_qi_ = dynamic_five_qi;
  }
  // @@protoc_insertion_point(field_set_allocated:onos.topo.QoSflowLevelParameters.dynamic_five_qi)
}
void QoSflowLevelParameters::set_allocated_non_dynamic_five_qi(::onos::topo::NonDynamicFiveQi* non_dynamic_five_qi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_qos_flow_level_parameters();
  if (non_dynamic_five_qi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::topo::NonDynamicFiveQi>::GetOwningArena(non_dynamic_five_qi);
    if (message_arena != submessage_arena) {
      non_dynamic_five_qi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, non_dynamic_five_qi, submessage_arena);
    }
    set_has_non_dynamic_five_qi();
    qos_flow_level_parameters_.non_dynamic_five_qi_ = non_dynamic_five_qi;
  }
  // @@protoc_insertion_point(field_set_allocated:onos.topo.QoSflowLevelParameters.non_dynamic_five_qi)
}
QoSflowLevelParameters::QoSflowLevelParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.QoSflowLevelParameters)
}
QoSflowLevelParameters::QoSflowLevelParameters(const QoSflowLevelParameters& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_qos_flow_level_parameters();
  switch (from.qos_flow_level_parameters_case()) {
    case kDynamicFiveQi: {
      _internal_mutable_dynamic_five_qi()->::onos::topo::DynamicFiveQi::MergeFrom(from._internal_dynamic_five_qi());
      break;
    }
    case kNonDynamicFiveQi: {
      _internal_mutable_non_dynamic_five_qi()->::onos::topo::NonDynamicFiveQi::MergeFrom(from._internal_non_dynamic_five_qi());
      break;
    }
    case QOS_FLOW_LEVEL_PARAMETERS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:onos.topo.QoSflowLevelParameters)
}

inline void QoSflowLevelParameters::SharedCtor() {
clear_has_qos_flow_level_parameters();
}

QoSflowLevelParameters::~QoSflowLevelParameters() {
  // @@protoc_insertion_point(destructor:onos.topo.QoSflowLevelParameters)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void QoSflowLevelParameters::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_qos_flow_level_parameters()) {
    clear_qos_flow_level_parameters();
  }
}

void QoSflowLevelParameters::ArenaDtor(void* object) {
  QoSflowLevelParameters* _this = reinterpret_cast< QoSflowLevelParameters* >(object);
  (void)_this;
}
void QoSflowLevelParameters::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void QoSflowLevelParameters::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void QoSflowLevelParameters::clear_qos_flow_level_parameters() {
// @@protoc_insertion_point(one_of_clear_start:onos.topo.QoSflowLevelParameters)
  switch (qos_flow_level_parameters_case()) {
    case kDynamicFiveQi: {
      if (GetArenaForAllocation() == nullptr) {
        delete qos_flow_level_parameters_.dynamic_five_qi_;
      }
      break;
    }
    case kNonDynamicFiveQi: {
      if (GetArenaForAllocation() == nullptr) {
        delete qos_flow_level_parameters_.non_dynamic_five_qi_;
      }
      break;
    }
    case QOS_FLOW_LEVEL_PARAMETERS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = QOS_FLOW_LEVEL_PARAMETERS_NOT_SET;
}


void QoSflowLevelParameters::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.QoSflowLevelParameters)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_qos_flow_level_parameters();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* QoSflowLevelParameters::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .onos.topo.DynamicFiveQi dynamic_five_qi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_dynamic_five_qi(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.topo.NonDynamicFiveQi non_dynamic_five_qi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_non_dynamic_five_qi(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* QoSflowLevelParameters::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.QoSflowLevelParameters)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .onos.topo.DynamicFiveQi dynamic_five_qi = 1;
  if (_internal_has_dynamic_five_qi()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::dynamic_five_qi(this), target, stream);
  }

  // .onos.topo.NonDynamicFiveQi non_dynamic_five_qi = 2;
  if (_internal_has_non_dynamic_five_qi()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::non_dynamic_five_qi(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.QoSflowLevelParameters)
  return target;
}

size_t QoSflowLevelParameters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.QoSflowLevelParameters)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (qos_flow_level_parameters_case()) {
    // .onos.topo.DynamicFiveQi dynamic_five_qi = 1;
    case kDynamicFiveQi: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *qos_flow_level_parameters_.dynamic_five_qi_);
      break;
    }
    // .onos.topo.NonDynamicFiveQi non_dynamic_five_qi = 2;
    case kNonDynamicFiveQi: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *qos_flow_level_parameters_.non_dynamic_five_qi_);
      break;
    }
    case QOS_FLOW_LEVEL_PARAMETERS_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData QoSflowLevelParameters::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    QoSflowLevelParameters::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*QoSflowLevelParameters::GetClassData() const { return &_class_data_; }

void QoSflowLevelParameters::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<QoSflowLevelParameters *>(to)->MergeFrom(
      static_cast<const QoSflowLevelParameters &>(from));
}


void QoSflowLevelParameters::MergeFrom(const QoSflowLevelParameters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.QoSflowLevelParameters)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.qos_flow_level_parameters_case()) {
    case kDynamicFiveQi: {
      _internal_mutable_dynamic_five_qi()->::onos::topo::DynamicFiveQi::MergeFrom(from._internal_dynamic_five_qi());
      break;
    }
    case kNonDynamicFiveQi: {
      _internal_mutable_non_dynamic_five_qi()->::onos::topo::NonDynamicFiveQi::MergeFrom(from._internal_non_dynamic_five_qi());
      break;
    }
    case QOS_FLOW_LEVEL_PARAMETERS_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void QoSflowLevelParameters::CopyFrom(const QoSflowLevelParameters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.QoSflowLevelParameters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QoSflowLevelParameters::IsInitialized() const {
  return true;
}

void QoSflowLevelParameters::InternalSwap(QoSflowLevelParameters* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(qos_flow_level_parameters_, other->qos_flow_level_parameters_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata QoSflowLevelParameters::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[54]);
}

// ===================================================================

class DynamicFiveQi::_Internal {
 public:
};

DynamicFiveQi::DynamicFiveQi(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.DynamicFiveQi)
}
DynamicFiveQi::DynamicFiveQi(const DynamicFiveQi& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&priority_level_, &from.priority_level_,
    static_cast<size_t>(reinterpret_cast<char*>(&packet_error_rate_) -
    reinterpret_cast<char*>(&priority_level_)) + sizeof(packet_error_rate_));
  // @@protoc_insertion_point(copy_constructor:onos.topo.DynamicFiveQi)
}

inline void DynamicFiveQi::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&priority_level_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&packet_error_rate_) -
    reinterpret_cast<char*>(&priority_level_)) + sizeof(packet_error_rate_));
}

DynamicFiveQi::~DynamicFiveQi() {
  // @@protoc_insertion_point(destructor:onos.topo.DynamicFiveQi)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DynamicFiveQi::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DynamicFiveQi::ArenaDtor(void* object) {
  DynamicFiveQi* _this = reinterpret_cast< DynamicFiveQi* >(object);
  (void)_this;
}
void DynamicFiveQi::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DynamicFiveQi::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DynamicFiveQi::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.DynamicFiveQi)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&priority_level_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&packet_error_rate_) -
      reinterpret_cast<char*>(&priority_level_)) + sizeof(packet_error_rate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DynamicFiveQi::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 priority_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          priority_level_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 packet_delay_budge = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          packet_delay_budge_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 packet_error_rate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          packet_error_rate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DynamicFiveQi::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.DynamicFiveQi)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 priority_level = 1;
  if (this->_internal_priority_level() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_priority_level(), target);
  }

  // int32 packet_delay_budge = 2;
  if (this->_internal_packet_delay_budge() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_packet_delay_budge(), target);
  }

  // int32 packet_error_rate = 3;
  if (this->_internal_packet_error_rate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_packet_error_rate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.DynamicFiveQi)
  return target;
}

size_t DynamicFiveQi::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.DynamicFiveQi)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 priority_level = 1;
  if (this->_internal_priority_level() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_priority_level());
  }

  // int32 packet_delay_budge = 2;
  if (this->_internal_packet_delay_budge() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_packet_delay_budge());
  }

  // int32 packet_error_rate = 3;
  if (this->_internal_packet_error_rate() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_packet_error_rate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DynamicFiveQi::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DynamicFiveQi::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DynamicFiveQi::GetClassData() const { return &_class_data_; }

void DynamicFiveQi::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DynamicFiveQi *>(to)->MergeFrom(
      static_cast<const DynamicFiveQi &>(from));
}


void DynamicFiveQi::MergeFrom(const DynamicFiveQi& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.DynamicFiveQi)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_priority_level() != 0) {
    _internal_set_priority_level(from._internal_priority_level());
  }
  if (from._internal_packet_delay_budge() != 0) {
    _internal_set_packet_delay_budge(from._internal_packet_delay_budge());
  }
  if (from._internal_packet_error_rate() != 0) {
    _internal_set_packet_error_rate(from._internal_packet_error_rate());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DynamicFiveQi::CopyFrom(const DynamicFiveQi& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.DynamicFiveQi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DynamicFiveQi::IsInitialized() const {
  return true;
}

void DynamicFiveQi::InternalSwap(DynamicFiveQi* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DynamicFiveQi, packet_error_rate_)
      + sizeof(DynamicFiveQi::packet_error_rate_)
      - PROTOBUF_FIELD_OFFSET(DynamicFiveQi, priority_level_)>(
          reinterpret_cast<char*>(&priority_level_),
          reinterpret_cast<char*>(&other->priority_level_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DynamicFiveQi::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[55]);
}

// ===================================================================

class NonDynamicFiveQi::_Internal {
 public:
  static const ::onos::topo::FiveQi& five_qi(const NonDynamicFiveQi* msg);
};

const ::onos::topo::FiveQi&
NonDynamicFiveQi::_Internal::five_qi(const NonDynamicFiveQi* msg) {
  return *msg->five_qi_;
}
NonDynamicFiveQi::NonDynamicFiveQi(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.NonDynamicFiveQi)
}
NonDynamicFiveQi::NonDynamicFiveQi(const NonDynamicFiveQi& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_five_qi()) {
    five_qi_ = new ::onos::topo::FiveQi(*from.five_qi_);
  } else {
    five_qi_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:onos.topo.NonDynamicFiveQi)
}

inline void NonDynamicFiveQi::SharedCtor() {
five_qi_ = nullptr;
}

NonDynamicFiveQi::~NonDynamicFiveQi() {
  // @@protoc_insertion_point(destructor:onos.topo.NonDynamicFiveQi)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NonDynamicFiveQi::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete five_qi_;
}

void NonDynamicFiveQi::ArenaDtor(void* object) {
  NonDynamicFiveQi* _this = reinterpret_cast< NonDynamicFiveQi* >(object);
  (void)_this;
}
void NonDynamicFiveQi::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NonDynamicFiveQi::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NonDynamicFiveQi::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.NonDynamicFiveQi)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && five_qi_ != nullptr) {
    delete five_qi_;
  }
  five_qi_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NonDynamicFiveQi::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .onos.topo.FiveQi five_qi = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_five_qi(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NonDynamicFiveQi::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.NonDynamicFiveQi)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .onos.topo.FiveQi five_qi = 1;
  if (this->_internal_has_five_qi()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::five_qi(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.NonDynamicFiveQi)
  return target;
}

size_t NonDynamicFiveQi::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.NonDynamicFiveQi)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .onos.topo.FiveQi five_qi = 1;
  if (this->_internal_has_five_qi()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *five_qi_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NonDynamicFiveQi::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NonDynamicFiveQi::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NonDynamicFiveQi::GetClassData() const { return &_class_data_; }

void NonDynamicFiveQi::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NonDynamicFiveQi *>(to)->MergeFrom(
      static_cast<const NonDynamicFiveQi &>(from));
}


void NonDynamicFiveQi::MergeFrom(const NonDynamicFiveQi& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.NonDynamicFiveQi)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_five_qi()) {
    _internal_mutable_five_qi()->::onos::topo::FiveQi::MergeFrom(from._internal_five_qi());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NonDynamicFiveQi::CopyFrom(const NonDynamicFiveQi& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.NonDynamicFiveQi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NonDynamicFiveQi::IsInitialized() const {
  return true;
}

void NonDynamicFiveQi::InternalSwap(NonDynamicFiveQi* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(five_qi_, other->five_qi_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NonDynamicFiveQi::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[56]);
}

// ===================================================================

class FiveQi::_Internal {
 public:
};

FiveQi::FiveQi(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.FiveQi)
}
FiveQi::FiveQi(const FiveQi& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:onos.topo.FiveQi)
}

inline void FiveQi::SharedCtor() {
value_ = 0;
}

FiveQi::~FiveQi() {
  // @@protoc_insertion_point(destructor:onos.topo.FiveQi)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FiveQi::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void FiveQi::ArenaDtor(void* object) {
  FiveQi* _this = reinterpret_cast< FiveQi* >(object);
  (void)_this;
}
void FiveQi::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FiveQi::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FiveQi::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.FiveQi)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FiveQi::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FiveQi::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.FiveQi)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.FiveQi)
  return target;
}

size_t FiveQi::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.FiveQi)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FiveQi::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FiveQi::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FiveQi::GetClassData() const { return &_class_data_; }

void FiveQi::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FiveQi *>(to)->MergeFrom(
      static_cast<const FiveQi &>(from));
}


void FiveQi::MergeFrom(const FiveQi& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.FiveQi)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FiveQi::CopyFrom(const FiveQi& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.FiveQi)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FiveQi::IsInitialized() const {
  return true;
}

void FiveQi::InternalSwap(FiveQi* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FiveQi::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[57]);
}

// ===================================================================

class FourGDrbId::_Internal {
 public:
  static const ::onos::topo::Qci& qci(const FourGDrbId* msg);
};

const ::onos::topo::Qci&
FourGDrbId::_Internal::qci(const FourGDrbId* msg) {
  return *msg->qci_;
}
FourGDrbId::FourGDrbId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.FourGDrbId)
}
FourGDrbId::FourGDrbId(const FourGDrbId& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_qci()) {
    qci_ = new ::onos::topo::Qci(*from.qci_);
  } else {
    qci_ = nullptr;
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:onos.topo.FourGDrbId)
}

inline void FourGDrbId::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&qci_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
    reinterpret_cast<char*>(&qci_)) + sizeof(value_));
}

FourGDrbId::~FourGDrbId() {
  // @@protoc_insertion_point(destructor:onos.topo.FourGDrbId)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void FourGDrbId::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete qci_;
}

void FourGDrbId::ArenaDtor(void* object) {
  FourGDrbId* _this = reinterpret_cast< FourGDrbId* >(object);
  (void)_this;
}
void FourGDrbId::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FourGDrbId::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void FourGDrbId::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.FourGDrbId)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && qci_ != nullptr) {
    delete qci_;
  }
  qci_ = nullptr;
  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FourGDrbId::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.topo.Qci qci = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_qci(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* FourGDrbId::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.FourGDrbId)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_value(), target);
  }

  // .onos.topo.Qci qci = 2;
  if (this->_internal_has_qci()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::qci(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.FourGDrbId)
  return target;
}

size_t FourGDrbId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.FourGDrbId)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .onos.topo.Qci qci = 2;
  if (this->_internal_has_qci()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *qci_);
  }

  // int32 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData FourGDrbId::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    FourGDrbId::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*FourGDrbId::GetClassData() const { return &_class_data_; }

void FourGDrbId::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<FourGDrbId *>(to)->MergeFrom(
      static_cast<const FourGDrbId &>(from));
}


void FourGDrbId::MergeFrom(const FourGDrbId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.FourGDrbId)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_qci()) {
    _internal_mutable_qci()->::onos::topo::Qci::MergeFrom(from._internal_qci());
  }
  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void FourGDrbId::CopyFrom(const FourGDrbId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.FourGDrbId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FourGDrbId::IsInitialized() const {
  return true;
}

void FourGDrbId::InternalSwap(FourGDrbId* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FourGDrbId, value_)
      + sizeof(FourGDrbId::value_)
      - PROTOBUF_FIELD_OFFSET(FourGDrbId, qci_)>(
          reinterpret_cast<char*>(&qci_),
          reinterpret_cast<char*>(&other->qci_));
}

::PROTOBUF_NAMESPACE_ID::Metadata FourGDrbId::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[58]);
}

// ===================================================================

class Qci::_Internal {
 public:
};

Qci::Qci(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.Qci)
}
Qci::Qci(const Qci& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:onos.topo.Qci)
}

inline void Qci::SharedCtor() {
value_ = 0;
}

Qci::~Qci() {
  // @@protoc_insertion_point(destructor:onos.topo.Qci)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Qci::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Qci::ArenaDtor(void* object) {
  Qci* _this = reinterpret_cast< Qci* >(object);
  (void)_this;
}
void Qci::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Qci::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Qci::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.Qci)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Qci::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Qci::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.Qci)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 value = 1;
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.Qci)
  return target;
}

size_t Qci::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.Qci)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 value = 1;
  if (this->_internal_value() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Qci::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Qci::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Qci::GetClassData() const { return &_class_data_; }

void Qci::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Qci *>(to)->MergeFrom(
      static_cast<const Qci &>(from));
}


void Qci::MergeFrom(const Qci& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.Qci)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Qci::CopyFrom(const Qci& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.Qci)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Qci::IsInitialized() const {
  return true;
}

void Qci::InternalSwap(Qci* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Qci::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fran_2eproto_getter, &descriptor_table_onos_2ftopo_2fran_2eproto_once,
      file_level_metadata_onos_2ftopo_2fran_2eproto[59]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace topo
}  // namespace onos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::onos::topo::Location* Arena::CreateMaybeMessage< ::onos::topo::Location >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::Location >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::Wgs84Location* Arena::CreateMaybeMessage< ::onos::topo::Wgs84Location >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::Wgs84Location >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::CartesianLocation* Arena::CreateMaybeMessage< ::onos::topo::CartesianLocation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::CartesianLocation >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::AzElOrientation* Arena::CreateMaybeMessage< ::onos::topo::AzElOrientation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::AzElOrientation >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::YprOrientation* Arena::CreateMaybeMessage< ::onos::topo::YprOrientation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::YprOrientation >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::Orientation* Arena::CreateMaybeMessage< ::onos::topo::Orientation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::Orientation >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::Waypoint* Arena::CreateMaybeMessage< ::onos::topo::Waypoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::Waypoint >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::Waypoints* Arena::CreateMaybeMessage< ::onos::topo::Waypoints >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::Waypoints >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::OrbitData* Arena::CreateMaybeMessage< ::onos::topo::OrbitData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::OrbitData >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::Motion* Arena::CreateMaybeMessage< ::onos::topo::Motion >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::Motion >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::Coverage* Arena::CreateMaybeMessage< ::onos::topo::Coverage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::Coverage >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::E2Node_ServiceModelsEntry_DoNotUse* Arena::CreateMaybeMessage< ::onos::topo::E2Node_ServiceModelsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::E2Node_ServiceModelsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::E2Node* Arena::CreateMaybeMessage< ::onos::topo::E2Node >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::E2Node >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::E2NodeConfig* Arena::CreateMaybeMessage< ::onos::topo::E2NodeConfig >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::E2NodeConfig >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::Lease* Arena::CreateMaybeMessage< ::onos::topo::Lease >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::Lease >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::Interface* Arena::CreateMaybeMessage< ::onos::topo::Interface >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::Interface >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::E2TInfo* Arena::CreateMaybeMessage< ::onos::topo::E2TInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::E2TInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::XAppInfo* Arena::CreateMaybeMessage< ::onos::topo::XAppInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::XAppInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::A1PolicyType* Arena::CreateMaybeMessage< ::onos::topo::A1PolicyType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::A1PolicyType >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::A1TInfo* Arena::CreateMaybeMessage< ::onos::topo::A1TInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::A1TInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::CellGlobalID* Arena::CreateMaybeMessage< ::onos::topo::CellGlobalID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::CellGlobalID >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::NeighborCellID* Arena::CreateMaybeMessage< ::onos::topo::NeighborCellID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::NeighborCellID >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::E2Cell_KpiReportsEntry_DoNotUse* Arena::CreateMaybeMessage< ::onos::topo::E2Cell_KpiReportsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::E2Cell_KpiReportsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::E2Cell* Arena::CreateMaybeMessage< ::onos::topo::E2Cell >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::E2Cell >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::ServiceModelInfo* Arena::CreateMaybeMessage< ::onos::topo::ServiceModelInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::ServiceModelInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::RCRanFunction* Arena::CreateMaybeMessage< ::onos::topo::RCRanFunction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::RCRanFunction >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::MHORanFunction* Arena::CreateMaybeMessage< ::onos::topo::MHORanFunction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::MHORanFunction >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::KPMRanFunction* Arena::CreateMaybeMessage< ::onos::topo::KPMRanFunction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::KPMRanFunction >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::RSMRanFunction* Arena::CreateMaybeMessage< ::onos::topo::RSMRanFunction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::RSMRanFunction >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::RCEventTriggerStyle* Arena::CreateMaybeMessage< ::onos::topo::RCEventTriggerStyle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::RCEventTriggerStyle >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::RCReportStyle* Arena::CreateMaybeMessage< ::onos::topo::RCReportStyle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::RCReportStyle >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::RCInsertStyle* Arena::CreateMaybeMessage< ::onos::topo::RCInsertStyle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::RCInsertStyle >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::RCPolicyStyle* Arena::CreateMaybeMessage< ::onos::topo::RCPolicyStyle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::RCPolicyStyle >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::RCControlStyle* Arena::CreateMaybeMessage< ::onos::topo::RCControlStyle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::RCControlStyle >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::ControlAction* Arena::CreateMaybeMessage< ::onos::topo::ControlAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::ControlAction >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::InsertIndication* Arena::CreateMaybeMessage< ::onos::topo::InsertIndication >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::InsertIndication >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::RANParameter* Arena::CreateMaybeMessage< ::onos::topo::RANParameter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::RANParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::KPMReportStyle* Arena::CreateMaybeMessage< ::onos::topo::KPMReportStyle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::KPMReportStyle >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::MHOReportStyle* Arena::CreateMaybeMessage< ::onos::topo::MHOReportStyle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::MHOReportStyle >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::KPMMeasurement* Arena::CreateMaybeMessage< ::onos::topo::KPMMeasurement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::KPMMeasurement >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::RSMNodeSlicingCapabilityItem* Arena::CreateMaybeMessage< ::onos::topo::RSMNodeSlicingCapabilityItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::RSMNodeSlicingCapabilityItem >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::RSMSupportedSlicingConfigItem* Arena::CreateMaybeMessage< ::onos::topo::RSMSupportedSlicingConfigItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::RSMSupportedSlicingConfigItem >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::RSMSliceItemList* Arena::CreateMaybeMessage< ::onos::topo::RSMSliceItemList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::RSMSliceItemList >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::RSMSlicingItem* Arena::CreateMaybeMessage< ::onos::topo::RSMSlicingItem >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::RSMSlicingItem >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::RSMSliceParameters* Arena::CreateMaybeMessage< ::onos::topo::RSMSliceParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::RSMSliceParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::DuUeF1apID* Arena::CreateMaybeMessage< ::onos::topo::DuUeF1apID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::DuUeF1apID >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::CuUeF1apID* Arena::CreateMaybeMessage< ::onos::topo::CuUeF1apID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::CuUeF1apID >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::RanUeNgapID* Arena::CreateMaybeMessage< ::onos::topo::RanUeNgapID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::RanUeNgapID >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::EnbUeS1apID* Arena::CreateMaybeMessage< ::onos::topo::EnbUeS1apID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::EnbUeS1apID >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::AmfUeNgapID* Arena::CreateMaybeMessage< ::onos::topo::AmfUeNgapID >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::AmfUeNgapID >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::UeIdentity* Arena::CreateMaybeMessage< ::onos::topo::UeIdentity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::UeIdentity >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::DrbId* Arena::CreateMaybeMessage< ::onos::topo::DrbId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::DrbId >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::FiveGDrbId* Arena::CreateMaybeMessage< ::onos::topo::FiveGDrbId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::FiveGDrbId >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::Qfi* Arena::CreateMaybeMessage< ::onos::topo::Qfi >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::Qfi >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::QoSflowLevelParameters* Arena::CreateMaybeMessage< ::onos::topo::QoSflowLevelParameters >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::QoSflowLevelParameters >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::DynamicFiveQi* Arena::CreateMaybeMessage< ::onos::topo::DynamicFiveQi >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::DynamicFiveQi >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::NonDynamicFiveQi* Arena::CreateMaybeMessage< ::onos::topo::NonDynamicFiveQi >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::NonDynamicFiveQi >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::FiveQi* Arena::CreateMaybeMessage< ::onos::topo::FiveQi >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::FiveQi >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::FourGDrbId* Arena::CreateMaybeMessage< ::onos::topo::FourGDrbId >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::FourGDrbId >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::Qci* Arena::CreateMaybeMessage< ::onos::topo::Qci >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::Qci >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
