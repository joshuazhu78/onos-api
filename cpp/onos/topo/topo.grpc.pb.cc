// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: onos/topo/topo.proto

#include "onos/topo/topo.pb.h"
#include "onos/topo/topo.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace onos {
namespace topo {

static const char* Topo_method_names[] = {
  "/onos.topo.Topo/Create",
  "/onos.topo.Topo/Get",
  "/onos.topo.Topo/Update",
  "/onos.topo.Topo/Delete",
  "/onos.topo.Topo/List",
  "/onos.topo.Topo/Watch",
};

std::unique_ptr< Topo::Stub> Topo::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Topo::Stub> stub(new Topo::Stub(channel, options));
  return stub;
}

Topo::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Create_(Topo_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Get_(Topo_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Update_(Topo_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Delete_(Topo_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_List_(Topo_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_Watch_(Topo_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status Topo::Stub::Create(::grpc::ClientContext* context, const ::onos::topo::CreateRequest& request, ::onos::topo::CreateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::topo::CreateRequest, ::onos::topo::CreateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Create_, context, request, response);
}

void Topo::Stub::async::Create(::grpc::ClientContext* context, const ::onos::topo::CreateRequest* request, ::onos::topo::CreateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::topo::CreateRequest, ::onos::topo::CreateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, std::move(f));
}

void Topo::Stub::async::Create(::grpc::ClientContext* context, const ::onos::topo::CreateRequest* request, ::onos::topo::CreateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Create_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::topo::CreateResponse>* Topo::Stub::PrepareAsyncCreateRaw(::grpc::ClientContext* context, const ::onos::topo::CreateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::topo::CreateResponse, ::onos::topo::CreateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Create_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::topo::CreateResponse>* Topo::Stub::AsyncCreateRaw(::grpc::ClientContext* context, const ::onos::topo::CreateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Topo::Stub::Get(::grpc::ClientContext* context, const ::onos::topo::GetRequest& request, ::onos::topo::GetResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::topo::GetRequest, ::onos::topo::GetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Get_, context, request, response);
}

void Topo::Stub::async::Get(::grpc::ClientContext* context, const ::onos::topo::GetRequest* request, ::onos::topo::GetResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::topo::GetRequest, ::onos::topo::GetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, std::move(f));
}

void Topo::Stub::async::Get(::grpc::ClientContext* context, const ::onos::topo::GetRequest* request, ::onos::topo::GetResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Get_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::topo::GetResponse>* Topo::Stub::PrepareAsyncGetRaw(::grpc::ClientContext* context, const ::onos::topo::GetRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::topo::GetResponse, ::onos::topo::GetRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Get_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::topo::GetResponse>* Topo::Stub::AsyncGetRaw(::grpc::ClientContext* context, const ::onos::topo::GetRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Topo::Stub::Update(::grpc::ClientContext* context, const ::onos::topo::UpdateRequest& request, ::onos::topo::UpdateResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::topo::UpdateRequest, ::onos::topo::UpdateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Update_, context, request, response);
}

void Topo::Stub::async::Update(::grpc::ClientContext* context, const ::onos::topo::UpdateRequest* request, ::onos::topo::UpdateResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::topo::UpdateRequest, ::onos::topo::UpdateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, std::move(f));
}

void Topo::Stub::async::Update(::grpc::ClientContext* context, const ::onos::topo::UpdateRequest* request, ::onos::topo::UpdateResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Update_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::topo::UpdateResponse>* Topo::Stub::PrepareAsyncUpdateRaw(::grpc::ClientContext* context, const ::onos::topo::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::topo::UpdateResponse, ::onos::topo::UpdateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Update_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::topo::UpdateResponse>* Topo::Stub::AsyncUpdateRaw(::grpc::ClientContext* context, const ::onos::topo::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Topo::Stub::Delete(::grpc::ClientContext* context, const ::onos::topo::DeleteRequest& request, ::onos::topo::DeleteResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::topo::DeleteRequest, ::onos::topo::DeleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Delete_, context, request, response);
}

void Topo::Stub::async::Delete(::grpc::ClientContext* context, const ::onos::topo::DeleteRequest* request, ::onos::topo::DeleteResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::topo::DeleteRequest, ::onos::topo::DeleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, std::move(f));
}

void Topo::Stub::async::Delete(::grpc::ClientContext* context, const ::onos::topo::DeleteRequest* request, ::onos::topo::DeleteResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Delete_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::topo::DeleteResponse>* Topo::Stub::PrepareAsyncDeleteRaw(::grpc::ClientContext* context, const ::onos::topo::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::topo::DeleteResponse, ::onos::topo::DeleteRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Delete_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::topo::DeleteResponse>* Topo::Stub::AsyncDeleteRaw(::grpc::ClientContext* context, const ::onos::topo::DeleteRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status Topo::Stub::List(::grpc::ClientContext* context, const ::onos::topo::ListRequest& request, ::onos::topo::ListResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::topo::ListRequest, ::onos::topo::ListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_List_, context, request, response);
}

void Topo::Stub::async::List(::grpc::ClientContext* context, const ::onos::topo::ListRequest* request, ::onos::topo::ListResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::topo::ListRequest, ::onos::topo::ListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, std::move(f));
}

void Topo::Stub::async::List(::grpc::ClientContext* context, const ::onos::topo::ListRequest* request, ::onos::topo::ListResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_List_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::topo::ListResponse>* Topo::Stub::PrepareAsyncListRaw(::grpc::ClientContext* context, const ::onos::topo::ListRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::topo::ListResponse, ::onos::topo::ListRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_List_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::topo::ListResponse>* Topo::Stub::AsyncListRaw(::grpc::ClientContext* context, const ::onos::topo::ListRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::onos::topo::WatchResponse>* Topo::Stub::WatchRaw(::grpc::ClientContext* context, const ::onos::topo::WatchRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::onos::topo::WatchResponse>::Create(channel_.get(), rpcmethod_Watch_, context, request);
}

void Topo::Stub::async::Watch(::grpc::ClientContext* context, const ::onos::topo::WatchRequest* request, ::grpc::ClientReadReactor< ::onos::topo::WatchResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::onos::topo::WatchResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_Watch_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::onos::topo::WatchResponse>* Topo::Stub::AsyncWatchRaw(::grpc::ClientContext* context, const ::onos::topo::WatchRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::onos::topo::WatchResponse>::Create(channel_.get(), cq, rpcmethod_Watch_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::onos::topo::WatchResponse>* Topo::Stub::PrepareAsyncWatchRaw(::grpc::ClientContext* context, const ::onos::topo::WatchRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::onos::topo::WatchResponse>::Create(channel_.get(), cq, rpcmethod_Watch_, context, request, false, nullptr);
}

Topo::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Topo_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Topo::Service, ::onos::topo::CreateRequest, ::onos::topo::CreateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Topo::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::topo::CreateRequest* req,
             ::onos::topo::CreateResponse* resp) {
               return service->Create(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Topo_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Topo::Service, ::onos::topo::GetRequest, ::onos::topo::GetResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Topo::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::topo::GetRequest* req,
             ::onos::topo::GetResponse* resp) {
               return service->Get(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Topo_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Topo::Service, ::onos::topo::UpdateRequest, ::onos::topo::UpdateResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Topo::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::topo::UpdateRequest* req,
             ::onos::topo::UpdateResponse* resp) {
               return service->Update(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Topo_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Topo::Service, ::onos::topo::DeleteRequest, ::onos::topo::DeleteResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Topo::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::topo::DeleteRequest* req,
             ::onos::topo::DeleteResponse* resp) {
               return service->Delete(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Topo_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Topo::Service, ::onos::topo::ListRequest, ::onos::topo::ListResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Topo::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::topo::ListRequest* req,
             ::onos::topo::ListResponse* resp) {
               return service->List(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Topo_method_names[5],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Topo::Service, ::onos::topo::WatchRequest, ::onos::topo::WatchResponse>(
          [](Topo::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::topo::WatchRequest* req,
             ::grpc::ServerWriter<::onos::topo::WatchResponse>* writer) {
               return service->Watch(ctx, req, writer);
             }, this)));
}

Topo::Service::~Service() {
}

::grpc::Status Topo::Service::Create(::grpc::ServerContext* context, const ::onos::topo::CreateRequest* request, ::onos::topo::CreateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Topo::Service::Get(::grpc::ServerContext* context, const ::onos::topo::GetRequest* request, ::onos::topo::GetResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Topo::Service::Update(::grpc::ServerContext* context, const ::onos::topo::UpdateRequest* request, ::onos::topo::UpdateResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Topo::Service::Delete(::grpc::ServerContext* context, const ::onos::topo::DeleteRequest* request, ::onos::topo::DeleteResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Topo::Service::List(::grpc::ServerContext* context, const ::onos::topo::ListRequest* request, ::onos::topo::ListResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Topo::Service::Watch(::grpc::ServerContext* context, const ::onos::topo::WatchRequest* request, ::grpc::ServerWriter< ::onos::topo::WatchResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace onos
}  // namespace topo

