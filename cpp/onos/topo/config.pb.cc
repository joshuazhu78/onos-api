// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onos/topo/config.proto

#include "onos/topo/config.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace onos {
namespace topo {
constexpr Asset::Asset(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , manufacturer_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , model_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , serial_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , asset_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sw_version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , role_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AssetDefaultTypeInternal {
  constexpr AssetDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AssetDefaultTypeInternal() {}
  union {
    Asset _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AssetDefaultTypeInternal _Asset_default_instance_;
constexpr Configurable::Configurable(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , address_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , target_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , timeout_(nullptr)
  , persistent_(false){}
struct ConfigurableDefaultTypeInternal {
  constexpr ConfigurableDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigurableDefaultTypeInternal() {}
  union {
    Configurable _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigurableDefaultTypeInternal _Configurable_default_instance_;
constexpr MastershipState::MastershipState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : node_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , term_(uint64_t{0u}){}
struct MastershipStateDefaultTypeInternal {
  constexpr MastershipStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MastershipStateDefaultTypeInternal() {}
  union {
    MastershipState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MastershipStateDefaultTypeInternal _MastershipState_default_instance_;
constexpr TLSOptions::TLSOptions(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ca_cert_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cert_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , insecure_(false)
  , plain_(false){}
struct TLSOptionsDefaultTypeInternal {
  constexpr TLSOptionsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TLSOptionsDefaultTypeInternal() {}
  union {
    TLSOptions _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TLSOptionsDefaultTypeInternal _TLSOptions_default_instance_;
constexpr AdHoc_PropertiesEntry_DoNotUse::AdHoc_PropertiesEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct AdHoc_PropertiesEntry_DoNotUseDefaultTypeInternal {
  constexpr AdHoc_PropertiesEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AdHoc_PropertiesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    AdHoc_PropertiesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AdHoc_PropertiesEntry_DoNotUseDefaultTypeInternal _AdHoc_PropertiesEntry_DoNotUse_default_instance_;
constexpr AdHoc::AdHoc(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : properties_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct AdHocDefaultTypeInternal {
  constexpr AdHocDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AdHocDefaultTypeInternal() {}
  union {
    AdHoc _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AdHocDefaultTypeInternal _AdHoc_default_instance_;
constexpr ProtocolState::ProtocolState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : protocol_(0)

  , connectivitystate_(0)

  , channelstate_(0)

  , servicestate_(0)
{}
struct ProtocolStateDefaultTypeInternal {
  constexpr ProtocolStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProtocolStateDefaultTypeInternal() {}
  union {
    ProtocolState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProtocolStateDefaultTypeInternal _ProtocolState_default_instance_;
constexpr Protocols::Protocols(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : state_(){}
struct ProtocolsDefaultTypeInternal {
  constexpr ProtocolsDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ProtocolsDefaultTypeInternal() {}
  union {
    Protocols _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ProtocolsDefaultTypeInternal _Protocols_default_instance_;
}  // namespace topo
}  // namespace onos
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_onos_2ftopo_2fconfig_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_onos_2ftopo_2fconfig_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_onos_2ftopo_2fconfig_2eproto = nullptr;

const uint32_t TableStruct_onos_2ftopo_2fconfig_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::Asset, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::Asset, name_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::Asset, manufacturer_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::Asset, model_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::Asset, serial_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::Asset, asset_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::Asset, sw_version_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::Asset, role_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::Configurable, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::Configurable, type_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::Configurable, address_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::Configurable, target_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::Configurable, version_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::Configurable, timeout_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::Configurable, persistent_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::MastershipState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::MastershipState, term_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::MastershipState, node_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::TLSOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::TLSOptions, insecure_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::TLSOptions, plain_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::TLSOptions, key_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::TLSOptions, ca_cert_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::TLSOptions, cert_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::AdHoc_PropertiesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::AdHoc_PropertiesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::AdHoc_PropertiesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::AdHoc_PropertiesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::AdHoc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::AdHoc, properties_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::ProtocolState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::ProtocolState, protocol_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::ProtocolState, connectivitystate_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::ProtocolState, channelstate_),
  PROTOBUF_FIELD_OFFSET(::onos::topo::ProtocolState, servicestate_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::topo::Protocols, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::topo::Protocols, state_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::onos::topo::Asset)},
  { 13, -1, -1, sizeof(::onos::topo::Configurable)},
  { 25, -1, -1, sizeof(::onos::topo::MastershipState)},
  { 33, -1, -1, sizeof(::onos::topo::TLSOptions)},
  { 44, 52, -1, sizeof(::onos::topo::AdHoc_PropertiesEntry_DoNotUse)},
  { 54, -1, -1, sizeof(::onos::topo::AdHoc)},
  { 61, -1, -1, sizeof(::onos::topo::ProtocolState)},
  { 71, -1, -1, sizeof(::onos::topo::Protocols)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_Asset_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_Configurable_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_MastershipState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_TLSOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_AdHoc_PropertiesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_AdHoc_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_ProtocolState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::topo::_Protocols_default_instance_),
};

const char descriptor_table_protodef_onos_2ftopo_2fconfig_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026onos/topo/config.proto\022\tonos.topo\032\036goo"
  "gle/protobuf/duration.proto\032\024gogoproto/g"
  "ogo.proto\"{\n\005Asset\022\014\n\004name\030\001 \001(\t\022\024\n\014manu"
  "facturer\030\002 \001(\t\022\r\n\005model\030\003 \001(\t\022\016\n\006serial\030"
  "\004 \001(\t\022\r\n\005asset\030\005 \001(\t\022\022\n\nsw_version\030\006 \001(\t"
  "\022\014\n\004role\030\010 \001(\t\"\224\001\n\014Configurable\022\014\n\004type\030"
  "\001 \001(\t\022\017\n\007address\030\002 \001(\t\022\016\n\006target\030\003 \001(\t\022\017"
  "\n\007version\030\004 \001(\t\0220\n\007timeout\030\005 \001(\0132\031.googl"
  "e.protobuf.DurationB\004\230\337\037\001\022\022\n\npersistent\030"
  "\006 \001(\010\"0\n\017MastershipState\022\014\n\004term\030\001 \001(\004\022\017"
  "\n\007node_id\030\002 \001(\t\"Y\n\nTLSOptions\022\020\n\010insecur"
  "e\030\001 \001(\010\022\r\n\005plain\030\002 \001(\010\022\013\n\003key\030\003 \001(\t\022\017\n\007c"
  "a_cert\030\004 \001(\t\022\014\n\004cert\030\005 \001(\t\"p\n\005AdHoc\0224\n\np"
  "roperties\030\001 \003(\0132 .onos.topo.AdHoc.Proper"
  "tiesEntry\0321\n\017PropertiesEntry\022\013\n\003key\030\001 \001("
  "\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\315\001\n\rProtocolState\022%"
  "\n\010protocol\030\001 \001(\0162\023.onos.topo.Protocol\0227\n"
  "\021connectivityState\030\002 \001(\0162\034.onos.topo.Con"
  "nectivityState\022-\n\014channelState\030\003 \001(\0162\027.o"
  "nos.topo.ChannelState\022-\n\014serviceState\030\004 "
  "\001(\0162\027.onos.topo.ServiceState\"4\n\tProtocol"
  "s\022\'\n\005state\030\001 \003(\0132\030.onos.topo.ProtocolSta"
  "te*M\n\010Protocol\022\024\n\020UNKNOWN_PROTOCOL\020\000\022\010\n\004"
  "GNMI\020\001\022\r\n\tP4RUNTIME\020\002\022\010\n\004GNOI\020\003\022\010\n\004E2AP\020"
  "\004*S\n\021ConnectivityState\022\036\n\032UNKNOWN_CONNEC"
  "TIVITY_STATE\020\000\022\r\n\tREACHABLE\020\001\022\017\n\013UNREACH"
  "ABLE\020\002*J\n\014ChannelState\022\031\n\025UNKNOWN_CHANNE"
  "L_STATE\020\000\022\r\n\tCONNECTED\020\001\022\020\n\014DISCONNECTED"
  "\020\002*Y\n\014ServiceState\022\031\n\025UNKNOWN_SERVICE_ST"
  "ATE\020\000\022\r\n\tAVAILABLE\020\001\022\017\n\013UNAVAILABLE\020\002\022\016\n"
  "\nCONNECTING\020\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_onos_2ftopo_2fconfig_2eproto_deps[2] = {
  &::descriptor_table_gogoproto_2fgogo_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_onos_2ftopo_2fconfig_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_onos_2ftopo_2fconfig_2eproto = {
  false, false, 1221, descriptor_table_protodef_onos_2ftopo_2fconfig_2eproto, "onos/topo/config.proto", 
  &descriptor_table_onos_2ftopo_2fconfig_2eproto_once, descriptor_table_onos_2ftopo_2fconfig_2eproto_deps, 2, 8,
  schemas, file_default_instances, TableStruct_onos_2ftopo_2fconfig_2eproto::offsets,
  file_level_metadata_onos_2ftopo_2fconfig_2eproto, file_level_enum_descriptors_onos_2ftopo_2fconfig_2eproto, file_level_service_descriptors_onos_2ftopo_2fconfig_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_onos_2ftopo_2fconfig_2eproto_getter() {
  return &descriptor_table_onos_2ftopo_2fconfig_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_onos_2ftopo_2fconfig_2eproto(&descriptor_table_onos_2ftopo_2fconfig_2eproto);
namespace onos {
namespace topo {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Protocol_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_onos_2ftopo_2fconfig_2eproto);
  return file_level_enum_descriptors_onos_2ftopo_2fconfig_2eproto[0];
}
bool Protocol_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConnectivityState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_onos_2ftopo_2fconfig_2eproto);
  return file_level_enum_descriptors_onos_2ftopo_2fconfig_2eproto[1];
}
bool ConnectivityState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChannelState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_onos_2ftopo_2fconfig_2eproto);
  return file_level_enum_descriptors_onos_2ftopo_2fconfig_2eproto[2];
}
bool ChannelState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ServiceState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_onos_2ftopo_2fconfig_2eproto);
  return file_level_enum_descriptors_onos_2ftopo_2fconfig_2eproto[3];
}
bool ServiceState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Asset::_Internal {
 public:
};

Asset::Asset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.Asset)
}
Asset::Asset(const Asset& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  manufacturer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    manufacturer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_manufacturer().empty()) {
    manufacturer_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_manufacturer(), 
      GetArenaForAllocation());
  }
  model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_model().empty()) {
    model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_model(), 
      GetArenaForAllocation());
  }
  serial_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    serial_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_serial().empty()) {
    serial_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_serial(), 
      GetArenaForAllocation());
  }
  asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    asset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_asset().empty()) {
    asset_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_asset(), 
      GetArenaForAllocation());
  }
  sw_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sw_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sw_version().empty()) {
    sw_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sw_version(), 
      GetArenaForAllocation());
  }
  role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_role().empty()) {
    role_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_role(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:onos.topo.Asset)
}

inline void Asset::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
manufacturer_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  manufacturer_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  model_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
serial_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  serial_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
asset_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  asset_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sw_version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sw_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
role_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  role_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Asset::~Asset() {
  // @@protoc_insertion_point(destructor:onos.topo.Asset)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Asset::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  manufacturer_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  serial_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  asset_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sw_version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  role_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Asset::ArenaDtor(void* object) {
  Asset* _this = reinterpret_cast< Asset* >(object);
  (void)_this;
}
void Asset::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Asset::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Asset::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.Asset)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  manufacturer_.ClearToEmpty();
  model_.ClearToEmpty();
  serial_.ClearToEmpty();
  asset_.ClearToEmpty();
  sw_version_.ClearToEmpty();
  role_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Asset::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.topo.Asset.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string manufacturer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_manufacturer();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.topo.Asset.manufacturer"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string model = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_model();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.topo.Asset.model"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string serial = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_serial();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.topo.Asset.serial"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string asset = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_asset();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.topo.Asset.asset"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string sw_version = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_sw_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.topo.Asset.sw_version"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string role = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_role();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.topo.Asset.role"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Asset::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.Asset)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.topo.Asset.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string manufacturer = 2;
  if (!this->_internal_manufacturer().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_manufacturer().data(), static_cast<int>(this->_internal_manufacturer().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.topo.Asset.manufacturer");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_manufacturer(), target);
  }

  // string model = 3;
  if (!this->_internal_model().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_model().data(), static_cast<int>(this->_internal_model().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.topo.Asset.model");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_model(), target);
  }

  // string serial = 4;
  if (!this->_internal_serial().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_serial().data(), static_cast<int>(this->_internal_serial().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.topo.Asset.serial");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_serial(), target);
  }

  // string asset = 5;
  if (!this->_internal_asset().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_asset().data(), static_cast<int>(this->_internal_asset().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.topo.Asset.asset");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_asset(), target);
  }

  // string sw_version = 6;
  if (!this->_internal_sw_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sw_version().data(), static_cast<int>(this->_internal_sw_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.topo.Asset.sw_version");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_sw_version(), target);
  }

  // string role = 8;
  if (!this->_internal_role().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_role().data(), static_cast<int>(this->_internal_role().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.topo.Asset.role");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_role(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.Asset)
  return target;
}

size_t Asset::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.Asset)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string manufacturer = 2;
  if (!this->_internal_manufacturer().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_manufacturer());
  }

  // string model = 3;
  if (!this->_internal_model().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_model());
  }

  // string serial = 4;
  if (!this->_internal_serial().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_serial());
  }

  // string asset = 5;
  if (!this->_internal_asset().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_asset());
  }

  // string sw_version = 6;
  if (!this->_internal_sw_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sw_version());
  }

  // string role = 8;
  if (!this->_internal_role().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_role());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Asset::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Asset::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Asset::GetClassData() const { return &_class_data_; }

void Asset::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Asset *>(to)->MergeFrom(
      static_cast<const Asset &>(from));
}


void Asset::MergeFrom(const Asset& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.Asset)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_manufacturer().empty()) {
    _internal_set_manufacturer(from._internal_manufacturer());
  }
  if (!from._internal_model().empty()) {
    _internal_set_model(from._internal_model());
  }
  if (!from._internal_serial().empty()) {
    _internal_set_serial(from._internal_serial());
  }
  if (!from._internal_asset().empty()) {
    _internal_set_asset(from._internal_asset());
  }
  if (!from._internal_sw_version().empty()) {
    _internal_set_sw_version(from._internal_sw_version());
  }
  if (!from._internal_role().empty()) {
    _internal_set_role(from._internal_role());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Asset::CopyFrom(const Asset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.Asset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Asset::IsInitialized() const {
  return true;
}

void Asset::InternalSwap(Asset* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &manufacturer_, lhs_arena,
      &other->manufacturer_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &model_, lhs_arena,
      &other->model_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &serial_, lhs_arena,
      &other->serial_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &asset_, lhs_arena,
      &other->asset_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sw_version_, lhs_arena,
      &other->sw_version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &role_, lhs_arena,
      &other->role_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Asset::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fconfig_2eproto_getter, &descriptor_table_onos_2ftopo_2fconfig_2eproto_once,
      file_level_metadata_onos_2ftopo_2fconfig_2eproto[0]);
}

// ===================================================================

class Configurable::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Duration& timeout(const Configurable* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Duration&
Configurable::_Internal::timeout(const Configurable* msg) {
  return *msg->timeout_;
}
void Configurable::clear_timeout() {
  if (GetArenaForAllocation() == nullptr && timeout_ != nullptr) {
    delete timeout_;
  }
  timeout_ = nullptr;
}
Configurable::Configurable(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.Configurable)
}
Configurable::Configurable(const Configurable& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_type().empty()) {
    type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_type(), 
      GetArenaForAllocation());
  }
  address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_address().empty()) {
    address_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_address(), 
      GetArenaForAllocation());
  }
  target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_target().empty()) {
    target_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_target(), 
      GetArenaForAllocation());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_timeout()) {
    timeout_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.timeout_);
  } else {
    timeout_ = nullptr;
  }
  persistent_ = from.persistent_;
  // @@protoc_insertion_point(copy_constructor:onos.topo.Configurable)
}

inline void Configurable::SharedCtor() {
type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
address_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  address_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
target_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  target_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&timeout_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&persistent_) -
    reinterpret_cast<char*>(&timeout_)) + sizeof(persistent_));
}

Configurable::~Configurable() {
  // @@protoc_insertion_point(destructor:onos.topo.Configurable)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Configurable::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  address_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  target_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timeout_;
}

void Configurable::ArenaDtor(void* object) {
  Configurable* _this = reinterpret_cast< Configurable* >(object);
  (void)_this;
}
void Configurable::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Configurable::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Configurable::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.Configurable)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_.ClearToEmpty();
  address_.ClearToEmpty();
  target_.ClearToEmpty();
  version_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && timeout_ != nullptr) {
    delete timeout_;
  }
  timeout_ = nullptr;
  persistent_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Configurable::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.topo.Configurable.type"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string address = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_address();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.topo.Configurable.address"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string target = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_target();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.topo.Configurable.target"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string version = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.topo.Configurable.version"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration timeout = 5 [(.gogoproto.stdduration) = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_timeout(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool persistent = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          persistent_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Configurable::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.Configurable)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_type().data(), static_cast<int>(this->_internal_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.topo.Configurable.type");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_type(), target);
  }

  // string address = 2;
  if (!this->_internal_address().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_address().data(), static_cast<int>(this->_internal_address().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.topo.Configurable.address");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_address(), target);
  }

  // string target = 3;
  if (!this->_internal_target().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_target().data(), static_cast<int>(this->_internal_target().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.topo.Configurable.target");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_target(), target);
  }

  // string version = 4;
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.topo.Configurable.version");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_version(), target);
  }

  // .google.protobuf.Duration timeout = 5 [(.gogoproto.stdduration) = true];
  if (this->_internal_has_timeout()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::timeout(this), target, stream);
  }

  // bool persistent = 6;
  if (this->_internal_persistent() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_persistent(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.Configurable)
  return target;
}

size_t Configurable::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.Configurable)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string type = 1;
  if (!this->_internal_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_type());
  }

  // string address = 2;
  if (!this->_internal_address().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_address());
  }

  // string target = 3;
  if (!this->_internal_target().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_target());
  }

  // string version = 4;
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  // .google.protobuf.Duration timeout = 5 [(.gogoproto.stdduration) = true];
  if (this->_internal_has_timeout()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timeout_);
  }

  // bool persistent = 6;
  if (this->_internal_persistent() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Configurable::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Configurable::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Configurable::GetClassData() const { return &_class_data_; }

void Configurable::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Configurable *>(to)->MergeFrom(
      static_cast<const Configurable &>(from));
}


void Configurable::MergeFrom(const Configurable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.Configurable)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type().empty()) {
    _internal_set_type(from._internal_type());
  }
  if (!from._internal_address().empty()) {
    _internal_set_address(from._internal_address());
  }
  if (!from._internal_target().empty()) {
    _internal_set_target(from._internal_target());
  }
  if (!from._internal_version().empty()) {
    _internal_set_version(from._internal_version());
  }
  if (from._internal_has_timeout()) {
    _internal_mutable_timeout()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_timeout());
  }
  if (from._internal_persistent() != 0) {
    _internal_set_persistent(from._internal_persistent());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Configurable::CopyFrom(const Configurable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.Configurable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Configurable::IsInitialized() const {
  return true;
}

void Configurable::InternalSwap(Configurable* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &type_, lhs_arena,
      &other->type_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &address_, lhs_arena,
      &other->address_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &target_, lhs_arena,
      &other->target_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_, lhs_arena,
      &other->version_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Configurable, persistent_)
      + sizeof(Configurable::persistent_)
      - PROTOBUF_FIELD_OFFSET(Configurable, timeout_)>(
          reinterpret_cast<char*>(&timeout_),
          reinterpret_cast<char*>(&other->timeout_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Configurable::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fconfig_2eproto_getter, &descriptor_table_onos_2ftopo_2fconfig_2eproto_once,
      file_level_metadata_onos_2ftopo_2fconfig_2eproto[1]);
}

// ===================================================================

class MastershipState::_Internal {
 public:
};

MastershipState::MastershipState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.MastershipState)
}
MastershipState::MastershipState(const MastershipState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node_id().empty()) {
    node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node_id(), 
      GetArenaForAllocation());
  }
  term_ = from.term_;
  // @@protoc_insertion_point(copy_constructor:onos.topo.MastershipState)
}

inline void MastershipState::SharedCtor() {
node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
term_ = uint64_t{0u};
}

MastershipState::~MastershipState() {
  // @@protoc_insertion_point(destructor:onos.topo.MastershipState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MastershipState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MastershipState::ArenaDtor(void* object) {
  MastershipState* _this = reinterpret_cast< MastershipState* >(object);
  (void)_this;
}
void MastershipState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MastershipState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MastershipState::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.MastershipState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_id_.ClearToEmpty();
  term_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MastershipState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 term = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string node_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_node_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.topo.MastershipState.node_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MastershipState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.MastershipState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 term = 1;
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_term(), target);
  }

  // string node_id = 2;
  if (!this->_internal_node_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node_id().data(), static_cast<int>(this->_internal_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.topo.MastershipState.node_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_node_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.MastershipState)
  return target;
}

size_t MastershipState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.MastershipState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string node_id = 2;
  if (!this->_internal_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node_id());
  }

  // uint64 term = 1;
  if (this->_internal_term() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_term());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MastershipState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MastershipState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MastershipState::GetClassData() const { return &_class_data_; }

void MastershipState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MastershipState *>(to)->MergeFrom(
      static_cast<const MastershipState &>(from));
}


void MastershipState::MergeFrom(const MastershipState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.MastershipState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_node_id().empty()) {
    _internal_set_node_id(from._internal_node_id());
  }
  if (from._internal_term() != 0) {
    _internal_set_term(from._internal_term());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MastershipState::CopyFrom(const MastershipState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.MastershipState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MastershipState::IsInitialized() const {
  return true;
}

void MastershipState::InternalSwap(MastershipState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &node_id_, lhs_arena,
      &other->node_id_, rhs_arena
  );
  swap(term_, other->term_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MastershipState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fconfig_2eproto_getter, &descriptor_table_onos_2ftopo_2fconfig_2eproto_once,
      file_level_metadata_onos_2ftopo_2fconfig_2eproto[2]);
}

// ===================================================================

class TLSOptions::_Internal {
 public:
};

TLSOptions::TLSOptions(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.TLSOptions)
}
TLSOptions::TLSOptions(const TLSOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  ca_cert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    ca_cert_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_ca_cert().empty()) {
    ca_cert_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ca_cert(), 
      GetArenaForAllocation());
  }
  cert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    cert_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_cert().empty()) {
    cert_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cert(), 
      GetArenaForAllocation());
  }
  ::memcpy(&insecure_, &from.insecure_,
    static_cast<size_t>(reinterpret_cast<char*>(&plain_) -
    reinterpret_cast<char*>(&insecure_)) + sizeof(plain_));
  // @@protoc_insertion_point(copy_constructor:onos.topo.TLSOptions)
}

inline void TLSOptions::SharedCtor() {
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
ca_cert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  ca_cert_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
cert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  cert_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&insecure_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&plain_) -
    reinterpret_cast<char*>(&insecure_)) + sizeof(plain_));
}

TLSOptions::~TLSOptions() {
  // @@protoc_insertion_point(destructor:onos.topo.TLSOptions)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TLSOptions::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ca_cert_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cert_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TLSOptions::ArenaDtor(void* object) {
  TLSOptions* _this = reinterpret_cast< TLSOptions* >(object);
  (void)_this;
}
void TLSOptions::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TLSOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TLSOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.TLSOptions)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  ca_cert_.ClearToEmpty();
  cert_.ClearToEmpty();
  ::memset(&insecure_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&plain_) -
      reinterpret_cast<char*>(&insecure_)) + sizeof(plain_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TLSOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool insecure = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          insecure_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool plain = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          plain_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.topo.TLSOptions.key"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string ca_cert = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_ca_cert();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.topo.TLSOptions.ca_cert"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string cert = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_cert();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.topo.TLSOptions.cert"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TLSOptions::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.TLSOptions)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool insecure = 1;
  if (this->_internal_insecure() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_insecure(), target);
  }

  // bool plain = 2;
  if (this->_internal_plain() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_plain(), target);
  }

  // string key = 3;
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.topo.TLSOptions.key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_key(), target);
  }

  // string ca_cert = 4;
  if (!this->_internal_ca_cert().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ca_cert().data(), static_cast<int>(this->_internal_ca_cert().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.topo.TLSOptions.ca_cert");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_ca_cert(), target);
  }

  // string cert = 5;
  if (!this->_internal_cert().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cert().data(), static_cast<int>(this->_internal_cert().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.topo.TLSOptions.cert");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_cert(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.TLSOptions)
  return target;
}

size_t TLSOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.TLSOptions)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 3;
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string ca_cert = 4;
  if (!this->_internal_ca_cert().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ca_cert());
  }

  // string cert = 5;
  if (!this->_internal_cert().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cert());
  }

  // bool insecure = 1;
  if (this->_internal_insecure() != 0) {
    total_size += 1 + 1;
  }

  // bool plain = 2;
  if (this->_internal_plain() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TLSOptions::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TLSOptions::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TLSOptions::GetClassData() const { return &_class_data_; }

void TLSOptions::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TLSOptions *>(to)->MergeFrom(
      static_cast<const TLSOptions &>(from));
}


void TLSOptions::MergeFrom(const TLSOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.TLSOptions)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (!from._internal_ca_cert().empty()) {
    _internal_set_ca_cert(from._internal_ca_cert());
  }
  if (!from._internal_cert().empty()) {
    _internal_set_cert(from._internal_cert());
  }
  if (from._internal_insecure() != 0) {
    _internal_set_insecure(from._internal_insecure());
  }
  if (from._internal_plain() != 0) {
    _internal_set_plain(from._internal_plain());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TLSOptions::CopyFrom(const TLSOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.TLSOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLSOptions::IsInitialized() const {
  return true;
}

void TLSOptions::InternalSwap(TLSOptions* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, lhs_arena,
      &other->key_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ca_cert_, lhs_arena,
      &other->ca_cert_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cert_, lhs_arena,
      &other->cert_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TLSOptions, plain_)
      + sizeof(TLSOptions::plain_)
      - PROTOBUF_FIELD_OFFSET(TLSOptions, insecure_)>(
          reinterpret_cast<char*>(&insecure_),
          reinterpret_cast<char*>(&other->insecure_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TLSOptions::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fconfig_2eproto_getter, &descriptor_table_onos_2ftopo_2fconfig_2eproto_once,
      file_level_metadata_onos_2ftopo_2fconfig_2eproto[3]);
}

// ===================================================================

AdHoc_PropertiesEntry_DoNotUse::AdHoc_PropertiesEntry_DoNotUse() {}
AdHoc_PropertiesEntry_DoNotUse::AdHoc_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void AdHoc_PropertiesEntry_DoNotUse::MergeFrom(const AdHoc_PropertiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata AdHoc_PropertiesEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fconfig_2eproto_getter, &descriptor_table_onos_2ftopo_2fconfig_2eproto_once,
      file_level_metadata_onos_2ftopo_2fconfig_2eproto[4]);
}

// ===================================================================

class AdHoc::_Internal {
 public:
};

AdHoc::AdHoc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  properties_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.AdHoc)
}
AdHoc::AdHoc(const AdHoc& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  properties_.MergeFrom(from.properties_);
  // @@protoc_insertion_point(copy_constructor:onos.topo.AdHoc)
}

inline void AdHoc::SharedCtor() {
}

AdHoc::~AdHoc() {
  // @@protoc_insertion_point(destructor:onos.topo.AdHoc)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AdHoc::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AdHoc::ArenaDtor(void* object) {
  AdHoc* _this = reinterpret_cast< AdHoc* >(object);
  (void)_this;
  _this->properties_. ~MapField();
}
inline void AdHoc::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &AdHoc::ArenaDtor);
  }
}
void AdHoc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AdHoc::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.AdHoc)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  properties_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdHoc::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, string> properties = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&properties_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AdHoc::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.AdHoc)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, string> properties = 1;
  if (!this->_internal_properties().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "onos.topo.AdHoc.PropertiesEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "onos.topo.AdHoc.PropertiesEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_properties().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_properties().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_properties().begin();
          it != this->_internal_properties().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = AdHoc_PropertiesEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_properties().begin();
          it != this->_internal_properties().end(); ++it) {
        target = AdHoc_PropertiesEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.AdHoc)
  return target;
}

size_t AdHoc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.AdHoc)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> properties = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_properties_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_properties().begin();
      it != this->_internal_properties().end(); ++it) {
    total_size += AdHoc_PropertiesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AdHoc::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AdHoc::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AdHoc::GetClassData() const { return &_class_data_; }

void AdHoc::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AdHoc *>(to)->MergeFrom(
      static_cast<const AdHoc &>(from));
}


void AdHoc::MergeFrom(const AdHoc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.AdHoc)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  properties_.MergeFrom(from.properties_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AdHoc::CopyFrom(const AdHoc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.AdHoc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdHoc::IsInitialized() const {
  return true;
}

void AdHoc::InternalSwap(AdHoc* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  properties_.InternalSwap(&other->properties_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdHoc::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fconfig_2eproto_getter, &descriptor_table_onos_2ftopo_2fconfig_2eproto_once,
      file_level_metadata_onos_2ftopo_2fconfig_2eproto[5]);
}

// ===================================================================

class ProtocolState::_Internal {
 public:
};

ProtocolState::ProtocolState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.ProtocolState)
}
ProtocolState::ProtocolState(const ProtocolState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&protocol_, &from.protocol_,
    static_cast<size_t>(reinterpret_cast<char*>(&servicestate_) -
    reinterpret_cast<char*>(&protocol_)) + sizeof(servicestate_));
  // @@protoc_insertion_point(copy_constructor:onos.topo.ProtocolState)
}

inline void ProtocolState::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&protocol_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&servicestate_) -
    reinterpret_cast<char*>(&protocol_)) + sizeof(servicestate_));
}

ProtocolState::~ProtocolState() {
  // @@protoc_insertion_point(destructor:onos.topo.ProtocolState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ProtocolState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ProtocolState::ArenaDtor(void* object) {
  ProtocolState* _this = reinterpret_cast< ProtocolState* >(object);
  (void)_this;
}
void ProtocolState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProtocolState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ProtocolState::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.ProtocolState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&protocol_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&servicestate_) -
      reinterpret_cast<char*>(&protocol_)) + sizeof(servicestate_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProtocolState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .onos.topo.Protocol protocol = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_protocol(static_cast<::onos::topo::Protocol>(val));
        } else
          goto handle_unusual;
        continue;
      // .onos.topo.ConnectivityState connectivityState = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_connectivitystate(static_cast<::onos::topo::ConnectivityState>(val));
        } else
          goto handle_unusual;
        continue;
      // .onos.topo.ChannelState channelState = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_channelstate(static_cast<::onos::topo::ChannelState>(val));
        } else
          goto handle_unusual;
        continue;
      // .onos.topo.ServiceState serviceState = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_servicestate(static_cast<::onos::topo::ServiceState>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ProtocolState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.ProtocolState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .onos.topo.Protocol protocol = 1;
  if (this->_internal_protocol() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_protocol(), target);
  }

  // .onos.topo.ConnectivityState connectivityState = 2;
  if (this->_internal_connectivitystate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_connectivitystate(), target);
  }

  // .onos.topo.ChannelState channelState = 3;
  if (this->_internal_channelstate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_channelstate(), target);
  }

  // .onos.topo.ServiceState serviceState = 4;
  if (this->_internal_servicestate() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_servicestate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.ProtocolState)
  return target;
}

size_t ProtocolState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.ProtocolState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .onos.topo.Protocol protocol = 1;
  if (this->_internal_protocol() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_protocol());
  }

  // .onos.topo.ConnectivityState connectivityState = 2;
  if (this->_internal_connectivitystate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_connectivitystate());
  }

  // .onos.topo.ChannelState channelState = 3;
  if (this->_internal_channelstate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_channelstate());
  }

  // .onos.topo.ServiceState serviceState = 4;
  if (this->_internal_servicestate() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_servicestate());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ProtocolState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ProtocolState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ProtocolState::GetClassData() const { return &_class_data_; }

void ProtocolState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ProtocolState *>(to)->MergeFrom(
      static_cast<const ProtocolState &>(from));
}


void ProtocolState::MergeFrom(const ProtocolState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.ProtocolState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_protocol() != 0) {
    _internal_set_protocol(from._internal_protocol());
  }
  if (from._internal_connectivitystate() != 0) {
    _internal_set_connectivitystate(from._internal_connectivitystate());
  }
  if (from._internal_channelstate() != 0) {
    _internal_set_channelstate(from._internal_channelstate());
  }
  if (from._internal_servicestate() != 0) {
    _internal_set_servicestate(from._internal_servicestate());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ProtocolState::CopyFrom(const ProtocolState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.ProtocolState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProtocolState::IsInitialized() const {
  return true;
}

void ProtocolState::InternalSwap(ProtocolState* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProtocolState, servicestate_)
      + sizeof(ProtocolState::servicestate_)
      - PROTOBUF_FIELD_OFFSET(ProtocolState, protocol_)>(
          reinterpret_cast<char*>(&protocol_),
          reinterpret_cast<char*>(&other->protocol_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProtocolState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fconfig_2eproto_getter, &descriptor_table_onos_2ftopo_2fconfig_2eproto_once,
      file_level_metadata_onos_2ftopo_2fconfig_2eproto[6]);
}

// ===================================================================

class Protocols::_Internal {
 public:
};

Protocols::Protocols(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  state_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.topo.Protocols)
}
Protocols::Protocols(const Protocols& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      state_(from.state_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:onos.topo.Protocols)
}

inline void Protocols::SharedCtor() {
}

Protocols::~Protocols() {
  // @@protoc_insertion_point(destructor:onos.topo.Protocols)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Protocols::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Protocols::ArenaDtor(void* object) {
  Protocols* _this = reinterpret_cast< Protocols* >(object);
  (void)_this;
}
void Protocols::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Protocols::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Protocols::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.topo.Protocols)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  state_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Protocols::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .onos.topo.ProtocolState state = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_state(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Protocols::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.topo.Protocols)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .onos.topo.ProtocolState state = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_state_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_state(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.topo.Protocols)
  return target;
}

size_t Protocols::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.topo.Protocols)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .onos.topo.ProtocolState state = 1;
  total_size += 1UL * this->_internal_state_size();
  for (const auto& msg : this->state_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Protocols::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Protocols::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Protocols::GetClassData() const { return &_class_data_; }

void Protocols::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Protocols *>(to)->MergeFrom(
      static_cast<const Protocols &>(from));
}


void Protocols::MergeFrom(const Protocols& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.topo.Protocols)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  state_.MergeFrom(from.state_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Protocols::CopyFrom(const Protocols& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.topo.Protocols)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Protocols::IsInitialized() const {
  return true;
}

void Protocols::InternalSwap(Protocols* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  state_.InternalSwap(&other->state_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Protocols::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2ftopo_2fconfig_2eproto_getter, &descriptor_table_onos_2ftopo_2fconfig_2eproto_once,
      file_level_metadata_onos_2ftopo_2fconfig_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace topo
}  // namespace onos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::onos::topo::Asset* Arena::CreateMaybeMessage< ::onos::topo::Asset >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::Asset >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::Configurable* Arena::CreateMaybeMessage< ::onos::topo::Configurable >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::Configurable >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::MastershipState* Arena::CreateMaybeMessage< ::onos::topo::MastershipState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::MastershipState >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::TLSOptions* Arena::CreateMaybeMessage< ::onos::topo::TLSOptions >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::TLSOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::AdHoc_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage< ::onos::topo::AdHoc_PropertiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::AdHoc_PropertiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::AdHoc* Arena::CreateMaybeMessage< ::onos::topo::AdHoc >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::AdHoc >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::ProtocolState* Arena::CreateMaybeMessage< ::onos::topo::ProtocolState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::ProtocolState >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::topo::Protocols* Arena::CreateMaybeMessage< ::onos::topo::Protocols >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::topo::Protocols >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
