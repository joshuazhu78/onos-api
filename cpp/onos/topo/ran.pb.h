// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onos/topo/ran.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_onos_2ftopo_2fran_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_onos_2ftopo_2fran_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/any.pb.h>
#include "gogoproto/gogo.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_onos_2ftopo_2fran_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_onos_2ftopo_2fran_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[60]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_onos_2ftopo_2fran_2eproto;
namespace onos {
namespace topo {
class A1PolicyType;
struct A1PolicyTypeDefaultTypeInternal;
extern A1PolicyTypeDefaultTypeInternal _A1PolicyType_default_instance_;
class A1TInfo;
struct A1TInfoDefaultTypeInternal;
extern A1TInfoDefaultTypeInternal _A1TInfo_default_instance_;
class AmfUeNgapID;
struct AmfUeNgapIDDefaultTypeInternal;
extern AmfUeNgapIDDefaultTypeInternal _AmfUeNgapID_default_instance_;
class AzElOrientation;
struct AzElOrientationDefaultTypeInternal;
extern AzElOrientationDefaultTypeInternal _AzElOrientation_default_instance_;
class CartesianLocation;
struct CartesianLocationDefaultTypeInternal;
extern CartesianLocationDefaultTypeInternal _CartesianLocation_default_instance_;
class CellGlobalID;
struct CellGlobalIDDefaultTypeInternal;
extern CellGlobalIDDefaultTypeInternal _CellGlobalID_default_instance_;
class ControlAction;
struct ControlActionDefaultTypeInternal;
extern ControlActionDefaultTypeInternal _ControlAction_default_instance_;
class Coverage;
struct CoverageDefaultTypeInternal;
extern CoverageDefaultTypeInternal _Coverage_default_instance_;
class CuUeF1apID;
struct CuUeF1apIDDefaultTypeInternal;
extern CuUeF1apIDDefaultTypeInternal _CuUeF1apID_default_instance_;
class DrbId;
struct DrbIdDefaultTypeInternal;
extern DrbIdDefaultTypeInternal _DrbId_default_instance_;
class DuUeF1apID;
struct DuUeF1apIDDefaultTypeInternal;
extern DuUeF1apIDDefaultTypeInternal _DuUeF1apID_default_instance_;
class DynamicFiveQi;
struct DynamicFiveQiDefaultTypeInternal;
extern DynamicFiveQiDefaultTypeInternal _DynamicFiveQi_default_instance_;
class E2Cell;
struct E2CellDefaultTypeInternal;
extern E2CellDefaultTypeInternal _E2Cell_default_instance_;
class E2Cell_KpiReportsEntry_DoNotUse;
struct E2Cell_KpiReportsEntry_DoNotUseDefaultTypeInternal;
extern E2Cell_KpiReportsEntry_DoNotUseDefaultTypeInternal _E2Cell_KpiReportsEntry_DoNotUse_default_instance_;
class E2Node;
struct E2NodeDefaultTypeInternal;
extern E2NodeDefaultTypeInternal _E2Node_default_instance_;
class E2NodeConfig;
struct E2NodeConfigDefaultTypeInternal;
extern E2NodeConfigDefaultTypeInternal _E2NodeConfig_default_instance_;
class E2Node_ServiceModelsEntry_DoNotUse;
struct E2Node_ServiceModelsEntry_DoNotUseDefaultTypeInternal;
extern E2Node_ServiceModelsEntry_DoNotUseDefaultTypeInternal _E2Node_ServiceModelsEntry_DoNotUse_default_instance_;
class E2TInfo;
struct E2TInfoDefaultTypeInternal;
extern E2TInfoDefaultTypeInternal _E2TInfo_default_instance_;
class EnbUeS1apID;
struct EnbUeS1apIDDefaultTypeInternal;
extern EnbUeS1apIDDefaultTypeInternal _EnbUeS1apID_default_instance_;
class FiveGDrbId;
struct FiveGDrbIdDefaultTypeInternal;
extern FiveGDrbIdDefaultTypeInternal _FiveGDrbId_default_instance_;
class FiveQi;
struct FiveQiDefaultTypeInternal;
extern FiveQiDefaultTypeInternal _FiveQi_default_instance_;
class FourGDrbId;
struct FourGDrbIdDefaultTypeInternal;
extern FourGDrbIdDefaultTypeInternal _FourGDrbId_default_instance_;
class InsertIndication;
struct InsertIndicationDefaultTypeInternal;
extern InsertIndicationDefaultTypeInternal _InsertIndication_default_instance_;
class Interface;
struct InterfaceDefaultTypeInternal;
extern InterfaceDefaultTypeInternal _Interface_default_instance_;
class KPMMeasurement;
struct KPMMeasurementDefaultTypeInternal;
extern KPMMeasurementDefaultTypeInternal _KPMMeasurement_default_instance_;
class KPMRanFunction;
struct KPMRanFunctionDefaultTypeInternal;
extern KPMRanFunctionDefaultTypeInternal _KPMRanFunction_default_instance_;
class KPMReportStyle;
struct KPMReportStyleDefaultTypeInternal;
extern KPMReportStyleDefaultTypeInternal _KPMReportStyle_default_instance_;
class Lease;
struct LeaseDefaultTypeInternal;
extern LeaseDefaultTypeInternal _Lease_default_instance_;
class Location;
struct LocationDefaultTypeInternal;
extern LocationDefaultTypeInternal _Location_default_instance_;
class MHORanFunction;
struct MHORanFunctionDefaultTypeInternal;
extern MHORanFunctionDefaultTypeInternal _MHORanFunction_default_instance_;
class MHOReportStyle;
struct MHOReportStyleDefaultTypeInternal;
extern MHOReportStyleDefaultTypeInternal _MHOReportStyle_default_instance_;
class Motion;
struct MotionDefaultTypeInternal;
extern MotionDefaultTypeInternal _Motion_default_instance_;
class NeighborCellID;
struct NeighborCellIDDefaultTypeInternal;
extern NeighborCellIDDefaultTypeInternal _NeighborCellID_default_instance_;
class NonDynamicFiveQi;
struct NonDynamicFiveQiDefaultTypeInternal;
extern NonDynamicFiveQiDefaultTypeInternal _NonDynamicFiveQi_default_instance_;
class OrbitData;
struct OrbitDataDefaultTypeInternal;
extern OrbitDataDefaultTypeInternal _OrbitData_default_instance_;
class Orientation;
struct OrientationDefaultTypeInternal;
extern OrientationDefaultTypeInternal _Orientation_default_instance_;
class Qci;
struct QciDefaultTypeInternal;
extern QciDefaultTypeInternal _Qci_default_instance_;
class Qfi;
struct QfiDefaultTypeInternal;
extern QfiDefaultTypeInternal _Qfi_default_instance_;
class QoSflowLevelParameters;
struct QoSflowLevelParametersDefaultTypeInternal;
extern QoSflowLevelParametersDefaultTypeInternal _QoSflowLevelParameters_default_instance_;
class RANParameter;
struct RANParameterDefaultTypeInternal;
extern RANParameterDefaultTypeInternal _RANParameter_default_instance_;
class RCControlStyle;
struct RCControlStyleDefaultTypeInternal;
extern RCControlStyleDefaultTypeInternal _RCControlStyle_default_instance_;
class RCEventTriggerStyle;
struct RCEventTriggerStyleDefaultTypeInternal;
extern RCEventTriggerStyleDefaultTypeInternal _RCEventTriggerStyle_default_instance_;
class RCInsertStyle;
struct RCInsertStyleDefaultTypeInternal;
extern RCInsertStyleDefaultTypeInternal _RCInsertStyle_default_instance_;
class RCPolicyStyle;
struct RCPolicyStyleDefaultTypeInternal;
extern RCPolicyStyleDefaultTypeInternal _RCPolicyStyle_default_instance_;
class RCRanFunction;
struct RCRanFunctionDefaultTypeInternal;
extern RCRanFunctionDefaultTypeInternal _RCRanFunction_default_instance_;
class RCReportStyle;
struct RCReportStyleDefaultTypeInternal;
extern RCReportStyleDefaultTypeInternal _RCReportStyle_default_instance_;
class RSMNodeSlicingCapabilityItem;
struct RSMNodeSlicingCapabilityItemDefaultTypeInternal;
extern RSMNodeSlicingCapabilityItemDefaultTypeInternal _RSMNodeSlicingCapabilityItem_default_instance_;
class RSMRanFunction;
struct RSMRanFunctionDefaultTypeInternal;
extern RSMRanFunctionDefaultTypeInternal _RSMRanFunction_default_instance_;
class RSMSliceItemList;
struct RSMSliceItemListDefaultTypeInternal;
extern RSMSliceItemListDefaultTypeInternal _RSMSliceItemList_default_instance_;
class RSMSliceParameters;
struct RSMSliceParametersDefaultTypeInternal;
extern RSMSliceParametersDefaultTypeInternal _RSMSliceParameters_default_instance_;
class RSMSlicingItem;
struct RSMSlicingItemDefaultTypeInternal;
extern RSMSlicingItemDefaultTypeInternal _RSMSlicingItem_default_instance_;
class RSMSupportedSlicingConfigItem;
struct RSMSupportedSlicingConfigItemDefaultTypeInternal;
extern RSMSupportedSlicingConfigItemDefaultTypeInternal _RSMSupportedSlicingConfigItem_default_instance_;
class RanUeNgapID;
struct RanUeNgapIDDefaultTypeInternal;
extern RanUeNgapIDDefaultTypeInternal _RanUeNgapID_default_instance_;
class ServiceModelInfo;
struct ServiceModelInfoDefaultTypeInternal;
extern ServiceModelInfoDefaultTypeInternal _ServiceModelInfo_default_instance_;
class UeIdentity;
struct UeIdentityDefaultTypeInternal;
extern UeIdentityDefaultTypeInternal _UeIdentity_default_instance_;
class Waypoint;
struct WaypointDefaultTypeInternal;
extern WaypointDefaultTypeInternal _Waypoint_default_instance_;
class Waypoints;
struct WaypointsDefaultTypeInternal;
extern WaypointsDefaultTypeInternal _Waypoints_default_instance_;
class Wgs84Location;
struct Wgs84LocationDefaultTypeInternal;
extern Wgs84LocationDefaultTypeInternal _Wgs84Location_default_instance_;
class XAppInfo;
struct XAppInfoDefaultTypeInternal;
extern XAppInfoDefaultTypeInternal _XAppInfo_default_instance_;
class YprOrientation;
struct YprOrientationDefaultTypeInternal;
extern YprOrientationDefaultTypeInternal _YprOrientation_default_instance_;
}  // namespace topo
}  // namespace onos
PROTOBUF_NAMESPACE_OPEN
template<> ::onos::topo::A1PolicyType* Arena::CreateMaybeMessage<::onos::topo::A1PolicyType>(Arena*);
template<> ::onos::topo::A1TInfo* Arena::CreateMaybeMessage<::onos::topo::A1TInfo>(Arena*);
template<> ::onos::topo::AmfUeNgapID* Arena::CreateMaybeMessage<::onos::topo::AmfUeNgapID>(Arena*);
template<> ::onos::topo::AzElOrientation* Arena::CreateMaybeMessage<::onos::topo::AzElOrientation>(Arena*);
template<> ::onos::topo::CartesianLocation* Arena::CreateMaybeMessage<::onos::topo::CartesianLocation>(Arena*);
template<> ::onos::topo::CellGlobalID* Arena::CreateMaybeMessage<::onos::topo::CellGlobalID>(Arena*);
template<> ::onos::topo::ControlAction* Arena::CreateMaybeMessage<::onos::topo::ControlAction>(Arena*);
template<> ::onos::topo::Coverage* Arena::CreateMaybeMessage<::onos::topo::Coverage>(Arena*);
template<> ::onos::topo::CuUeF1apID* Arena::CreateMaybeMessage<::onos::topo::CuUeF1apID>(Arena*);
template<> ::onos::topo::DrbId* Arena::CreateMaybeMessage<::onos::topo::DrbId>(Arena*);
template<> ::onos::topo::DuUeF1apID* Arena::CreateMaybeMessage<::onos::topo::DuUeF1apID>(Arena*);
template<> ::onos::topo::DynamicFiveQi* Arena::CreateMaybeMessage<::onos::topo::DynamicFiveQi>(Arena*);
template<> ::onos::topo::E2Cell* Arena::CreateMaybeMessage<::onos::topo::E2Cell>(Arena*);
template<> ::onos::topo::E2Cell_KpiReportsEntry_DoNotUse* Arena::CreateMaybeMessage<::onos::topo::E2Cell_KpiReportsEntry_DoNotUse>(Arena*);
template<> ::onos::topo::E2Node* Arena::CreateMaybeMessage<::onos::topo::E2Node>(Arena*);
template<> ::onos::topo::E2NodeConfig* Arena::CreateMaybeMessage<::onos::topo::E2NodeConfig>(Arena*);
template<> ::onos::topo::E2Node_ServiceModelsEntry_DoNotUse* Arena::CreateMaybeMessage<::onos::topo::E2Node_ServiceModelsEntry_DoNotUse>(Arena*);
template<> ::onos::topo::E2TInfo* Arena::CreateMaybeMessage<::onos::topo::E2TInfo>(Arena*);
template<> ::onos::topo::EnbUeS1apID* Arena::CreateMaybeMessage<::onos::topo::EnbUeS1apID>(Arena*);
template<> ::onos::topo::FiveGDrbId* Arena::CreateMaybeMessage<::onos::topo::FiveGDrbId>(Arena*);
template<> ::onos::topo::FiveQi* Arena::CreateMaybeMessage<::onos::topo::FiveQi>(Arena*);
template<> ::onos::topo::FourGDrbId* Arena::CreateMaybeMessage<::onos::topo::FourGDrbId>(Arena*);
template<> ::onos::topo::InsertIndication* Arena::CreateMaybeMessage<::onos::topo::InsertIndication>(Arena*);
template<> ::onos::topo::Interface* Arena::CreateMaybeMessage<::onos::topo::Interface>(Arena*);
template<> ::onos::topo::KPMMeasurement* Arena::CreateMaybeMessage<::onos::topo::KPMMeasurement>(Arena*);
template<> ::onos::topo::KPMRanFunction* Arena::CreateMaybeMessage<::onos::topo::KPMRanFunction>(Arena*);
template<> ::onos::topo::KPMReportStyle* Arena::CreateMaybeMessage<::onos::topo::KPMReportStyle>(Arena*);
template<> ::onos::topo::Lease* Arena::CreateMaybeMessage<::onos::topo::Lease>(Arena*);
template<> ::onos::topo::Location* Arena::CreateMaybeMessage<::onos::topo::Location>(Arena*);
template<> ::onos::topo::MHORanFunction* Arena::CreateMaybeMessage<::onos::topo::MHORanFunction>(Arena*);
template<> ::onos::topo::MHOReportStyle* Arena::CreateMaybeMessage<::onos::topo::MHOReportStyle>(Arena*);
template<> ::onos::topo::Motion* Arena::CreateMaybeMessage<::onos::topo::Motion>(Arena*);
template<> ::onos::topo::NeighborCellID* Arena::CreateMaybeMessage<::onos::topo::NeighborCellID>(Arena*);
template<> ::onos::topo::NonDynamicFiveQi* Arena::CreateMaybeMessage<::onos::topo::NonDynamicFiveQi>(Arena*);
template<> ::onos::topo::OrbitData* Arena::CreateMaybeMessage<::onos::topo::OrbitData>(Arena*);
template<> ::onos::topo::Orientation* Arena::CreateMaybeMessage<::onos::topo::Orientation>(Arena*);
template<> ::onos::topo::Qci* Arena::CreateMaybeMessage<::onos::topo::Qci>(Arena*);
template<> ::onos::topo::Qfi* Arena::CreateMaybeMessage<::onos::topo::Qfi>(Arena*);
template<> ::onos::topo::QoSflowLevelParameters* Arena::CreateMaybeMessage<::onos::topo::QoSflowLevelParameters>(Arena*);
template<> ::onos::topo::RANParameter* Arena::CreateMaybeMessage<::onos::topo::RANParameter>(Arena*);
template<> ::onos::topo::RCControlStyle* Arena::CreateMaybeMessage<::onos::topo::RCControlStyle>(Arena*);
template<> ::onos::topo::RCEventTriggerStyle* Arena::CreateMaybeMessage<::onos::topo::RCEventTriggerStyle>(Arena*);
template<> ::onos::topo::RCInsertStyle* Arena::CreateMaybeMessage<::onos::topo::RCInsertStyle>(Arena*);
template<> ::onos::topo::RCPolicyStyle* Arena::CreateMaybeMessage<::onos::topo::RCPolicyStyle>(Arena*);
template<> ::onos::topo::RCRanFunction* Arena::CreateMaybeMessage<::onos::topo::RCRanFunction>(Arena*);
template<> ::onos::topo::RCReportStyle* Arena::CreateMaybeMessage<::onos::topo::RCReportStyle>(Arena*);
template<> ::onos::topo::RSMNodeSlicingCapabilityItem* Arena::CreateMaybeMessage<::onos::topo::RSMNodeSlicingCapabilityItem>(Arena*);
template<> ::onos::topo::RSMRanFunction* Arena::CreateMaybeMessage<::onos::topo::RSMRanFunction>(Arena*);
template<> ::onos::topo::RSMSliceItemList* Arena::CreateMaybeMessage<::onos::topo::RSMSliceItemList>(Arena*);
template<> ::onos::topo::RSMSliceParameters* Arena::CreateMaybeMessage<::onos::topo::RSMSliceParameters>(Arena*);
template<> ::onos::topo::RSMSlicingItem* Arena::CreateMaybeMessage<::onos::topo::RSMSlicingItem>(Arena*);
template<> ::onos::topo::RSMSupportedSlicingConfigItem* Arena::CreateMaybeMessage<::onos::topo::RSMSupportedSlicingConfigItem>(Arena*);
template<> ::onos::topo::RanUeNgapID* Arena::CreateMaybeMessage<::onos::topo::RanUeNgapID>(Arena*);
template<> ::onos::topo::ServiceModelInfo* Arena::CreateMaybeMessage<::onos::topo::ServiceModelInfo>(Arena*);
template<> ::onos::topo::UeIdentity* Arena::CreateMaybeMessage<::onos::topo::UeIdentity>(Arena*);
template<> ::onos::topo::Waypoint* Arena::CreateMaybeMessage<::onos::topo::Waypoint>(Arena*);
template<> ::onos::topo::Waypoints* Arena::CreateMaybeMessage<::onos::topo::Waypoints>(Arena*);
template<> ::onos::topo::Wgs84Location* Arena::CreateMaybeMessage<::onos::topo::Wgs84Location>(Arena*);
template<> ::onos::topo::XAppInfo* Arena::CreateMaybeMessage<::onos::topo::XAppInfo>(Arena*);
template<> ::onos::topo::YprOrientation* Arena::CreateMaybeMessage<::onos::topo::YprOrientation>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace onos {
namespace topo {

enum Interface_Type : int {
  Interface_Type_INTERFACE_UNKNOWN = 0,
  Interface_Type_INTERFACE_E2T = 1,
  Interface_Type_INTERFACE_E2AP101 = 2,
  Interface_Type_INTERFACE_E2AP200 = 3,
  Interface_Type_INTERFACE_A1_XAPP = 4,
  Interface_Type_INTERFACE_A1AP = 5,
  Interface_Type_Interface_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Interface_Type_Interface_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Interface_Type_IsValid(int value);
constexpr Interface_Type Interface_Type_Type_MIN = Interface_Type_INTERFACE_UNKNOWN;
constexpr Interface_Type Interface_Type_Type_MAX = Interface_Type_INTERFACE_A1AP;
constexpr int Interface_Type_Type_ARRAYSIZE = Interface_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Interface_Type_descriptor();
template<typename T>
inline const std::string& Interface_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Interface_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Interface_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Interface_Type_descriptor(), enum_t_value);
}
inline bool Interface_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Interface_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Interface_Type>(
    Interface_Type_descriptor(), name, value);
}
enum RANEntityKinds : int {
  E2NODE = 0,
  E2CELL = 1,
  E2T = 3,
  XAPP = 4,
  A1T = 5,
  RANEntityKinds_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RANEntityKinds_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RANEntityKinds_IsValid(int value);
constexpr RANEntityKinds RANEntityKinds_MIN = E2NODE;
constexpr RANEntityKinds RANEntityKinds_MAX = A1T;
constexpr int RANEntityKinds_ARRAYSIZE = RANEntityKinds_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RANEntityKinds_descriptor();
template<typename T>
inline const std::string& RANEntityKinds_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RANEntityKinds>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RANEntityKinds_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RANEntityKinds_descriptor(), enum_t_value);
}
inline bool RANEntityKinds_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RANEntityKinds* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RANEntityKinds>(
    RANEntityKinds_descriptor(), name, value);
}
enum RANRelationKinds : int {
  CONTROLS = 0,
  CONTAINS = 1,
  NEIGHBORS = 2,
  RANRelationKinds_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RANRelationKinds_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RANRelationKinds_IsValid(int value);
constexpr RANRelationKinds RANRelationKinds_MIN = CONTROLS;
constexpr RANRelationKinds RANRelationKinds_MAX = NEIGHBORS;
constexpr int RANRelationKinds_ARRAYSIZE = RANRelationKinds_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RANRelationKinds_descriptor();
template<typename T>
inline const std::string& RANRelationKinds_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RANRelationKinds>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RANRelationKinds_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RANRelationKinds_descriptor(), enum_t_value);
}
inline bool RANRelationKinds_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RANRelationKinds* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RANRelationKinds>(
    RANRelationKinds_descriptor(), name, value);
}
enum CellGlobalIDType : int {
  NRCGI = 0,
  ECGI = 1,
  CellGlobalIDType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  CellGlobalIDType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool CellGlobalIDType_IsValid(int value);
constexpr CellGlobalIDType CellGlobalIDType_MIN = NRCGI;
constexpr CellGlobalIDType CellGlobalIDType_MAX = ECGI;
constexpr int CellGlobalIDType_ARRAYSIZE = CellGlobalIDType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CellGlobalIDType_descriptor();
template<typename T>
inline const std::string& CellGlobalIDType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CellGlobalIDType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CellGlobalIDType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CellGlobalIDType_descriptor(), enum_t_value);
}
inline bool CellGlobalIDType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CellGlobalIDType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CellGlobalIDType>(
    CellGlobalIDType_descriptor(), name, value);
}
enum NodeType : int {
  NT_NONE = 0,
  NT_GNB = 1,
  NT_EN_GNB = 2,
  NT_NG_ENB = 3,
  NT_ENB = 4,
  NodeType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  NodeType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool NodeType_IsValid(int value);
constexpr NodeType NodeType_MIN = NT_NONE;
constexpr NodeType NodeType_MAX = NT_ENB;
constexpr int NodeType_ARRAYSIZE = NodeType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NodeType_descriptor();
template<typename T>
inline const std::string& NodeType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NodeType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NodeType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NodeType_descriptor(), enum_t_value);
}
inline bool NodeType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NodeType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NodeType>(
    NodeType_descriptor(), name, value);
}
enum ComponentType : int {
  CT_NONE = 0,
  CT_CU = 1,
  CT_CU_UP = 2,
  CT_DU = 3,
  CT_ENB = 4,
  ComponentType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ComponentType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ComponentType_IsValid(int value);
constexpr ComponentType ComponentType_MIN = CT_NONE;
constexpr ComponentType ComponentType_MAX = CT_ENB;
constexpr int ComponentType_ARRAYSIZE = ComponentType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ComponentType_descriptor();
template<typename T>
inline const std::string& ComponentType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ComponentType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ComponentType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ComponentType_descriptor(), enum_t_value);
}
inline bool ComponentType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ComponentType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ComponentType>(
    ComponentType_descriptor(), name, value);
}
enum E2SmRsmCommand : int {
  E2_SM_RSM_COMMAND_SLICE_CREATE = 0,
  E2_SM_RSM_COMMAND_SLICE_UPDATE = 1,
  E2_SM_RSM_COMMAND_SLICE_DELETE = 2,
  E2_SM_RSM_COMMAND_UE_ASSOCIATE = 3,
  E2_SM_RSM_COMMAND_EVENT_TRIGGERS = 4,
  E2SmRsmCommand_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  E2SmRsmCommand_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool E2SmRsmCommand_IsValid(int value);
constexpr E2SmRsmCommand E2SmRsmCommand_MIN = E2_SM_RSM_COMMAND_SLICE_CREATE;
constexpr E2SmRsmCommand E2SmRsmCommand_MAX = E2_SM_RSM_COMMAND_EVENT_TRIGGERS;
constexpr int E2SmRsmCommand_ARRAYSIZE = E2SmRsmCommand_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* E2SmRsmCommand_descriptor();
template<typename T>
inline const std::string& E2SmRsmCommand_Name(T enum_t_value) {
  static_assert(::std::is_same<T, E2SmRsmCommand>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function E2SmRsmCommand_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    E2SmRsmCommand_descriptor(), enum_t_value);
}
inline bool E2SmRsmCommand_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, E2SmRsmCommand* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<E2SmRsmCommand>(
    E2SmRsmCommand_descriptor(), name, value);
}
enum RSMSlicingType : int {
  SLICING_TYPE_STATIC = 0,
  SLICING_TYPE_DYNAMIC = 1,
  RSMSlicingType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RSMSlicingType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RSMSlicingType_IsValid(int value);
constexpr RSMSlicingType RSMSlicingType_MIN = SLICING_TYPE_STATIC;
constexpr RSMSlicingType RSMSlicingType_MAX = SLICING_TYPE_DYNAMIC;
constexpr int RSMSlicingType_ARRAYSIZE = RSMSlicingType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RSMSlicingType_descriptor();
template<typename T>
inline const std::string& RSMSlicingType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RSMSlicingType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RSMSlicingType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RSMSlicingType_descriptor(), enum_t_value);
}
inline bool RSMSlicingType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RSMSlicingType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RSMSlicingType>(
    RSMSlicingType_descriptor(), name, value);
}
enum RSMSchedulerType : int {
  SCHEDULER_TYPE_ROUND_ROBIN = 0,
  SCHEDULER_TYPE_PROPORTIONALLY_FAIR = 1,
  SCHEDULER_TYPE_QOS_BASED = 2,
  RSMSchedulerType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RSMSchedulerType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RSMSchedulerType_IsValid(int value);
constexpr RSMSchedulerType RSMSchedulerType_MIN = SCHEDULER_TYPE_ROUND_ROBIN;
constexpr RSMSchedulerType RSMSchedulerType_MAX = SCHEDULER_TYPE_QOS_BASED;
constexpr int RSMSchedulerType_ARRAYSIZE = RSMSchedulerType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RSMSchedulerType_descriptor();
template<typename T>
inline const std::string& RSMSchedulerType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RSMSchedulerType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RSMSchedulerType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RSMSchedulerType_descriptor(), enum_t_value);
}
inline bool RSMSchedulerType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RSMSchedulerType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RSMSchedulerType>(
    RSMSchedulerType_descriptor(), name, value);
}
enum RSMSliceType : int {
  SLICE_TYPE_DL_SLICE = 0,
  SLICE_TYPE_UL_SLICE = 1,
  RSMSliceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  RSMSliceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool RSMSliceType_IsValid(int value);
constexpr RSMSliceType RSMSliceType_MIN = SLICE_TYPE_DL_SLICE;
constexpr RSMSliceType RSMSliceType_MAX = SLICE_TYPE_UL_SLICE;
constexpr int RSMSliceType_ARRAYSIZE = RSMSliceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RSMSliceType_descriptor();
template<typename T>
inline const std::string& RSMSliceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RSMSliceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RSMSliceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RSMSliceType_descriptor(), enum_t_value);
}
inline bool RSMSliceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, RSMSliceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RSMSliceType>(
    RSMSliceType_descriptor(), name, value);
}
enum UeIdType : int {
  UE_ID_TYPE_CU_UE_F1_AP_ID = 0,
  UE_ID_TYPE_DU_UE_F1_AP_ID = 1,
  UE_ID_TYPE_RAN_UE_NGAP_ID = 2,
  UE_ID_TYPE_AMF_UE_NGAP_ID = 3,
  UE_ID_TYPE_ENB_UE_S1_AP_ID = 4,
  UeIdType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  UeIdType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool UeIdType_IsValid(int value);
constexpr UeIdType UeIdType_MIN = UE_ID_TYPE_CU_UE_F1_AP_ID;
constexpr UeIdType UeIdType_MAX = UE_ID_TYPE_ENB_UE_S1_AP_ID;
constexpr int UeIdType_ARRAYSIZE = UeIdType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UeIdType_descriptor();
template<typename T>
inline const std::string& UeIdType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UeIdType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UeIdType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UeIdType_descriptor(), enum_t_value);
}
inline bool UeIdType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UeIdType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UeIdType>(
    UeIdType_descriptor(), name, value);
}
// ===================================================================

class Location final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.Location) */ {
 public:
  inline Location() : Location(nullptr) {}
  ~Location() override;
  explicit constexpr Location(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Location(const Location& from);
  Location(Location&& from) noexcept
    : Location() {
    *this = ::std::move(from);
  }

  inline Location& operator=(const Location& from) {
    CopyFrom(from);
    return *this;
  }
  inline Location& operator=(Location&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Location& default_instance() {
    return *internal_default_instance();
  }
  enum ExtCase {
    kWgs84 = 3,
    kCartesian = 4,
    EXT_NOT_SET = 0,
  };

  static inline const Location* internal_default_instance() {
    return reinterpret_cast<const Location*>(
               &_Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Location& a, Location& b) {
    a.Swap(&b);
  }
  inline void Swap(Location* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Location* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Location* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Location>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Location& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Location& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Location* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.Location";
  }
  protected:
  explicit Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatFieldNumber = 1,
    kLngFieldNumber = 2,
    kWgs84FieldNumber = 3,
    kCartesianFieldNumber = 4,
  };
  // double lat = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_lat();
  PROTOBUF_DEPRECATED double lat() const;
  PROTOBUF_DEPRECATED void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // double lng = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_lng();
  PROTOBUF_DEPRECATED double lng() const;
  PROTOBUF_DEPRECATED void set_lng(double value);
  private:
  double _internal_lng() const;
  void _internal_set_lng(double value);
  public:

  // .onos.topo.Wgs84Location wgs84 = 3;
  bool has_wgs84() const;
  private:
  bool _internal_has_wgs84() const;
  public:
  void clear_wgs84();
  const ::onos::topo::Wgs84Location& wgs84() const;
  PROTOBUF_NODISCARD ::onos::topo::Wgs84Location* release_wgs84();
  ::onos::topo::Wgs84Location* mutable_wgs84();
  void set_allocated_wgs84(::onos::topo::Wgs84Location* wgs84);
  private:
  const ::onos::topo::Wgs84Location& _internal_wgs84() const;
  ::onos::topo::Wgs84Location* _internal_mutable_wgs84();
  public:
  void unsafe_arena_set_allocated_wgs84(
      ::onos::topo::Wgs84Location* wgs84);
  ::onos::topo::Wgs84Location* unsafe_arena_release_wgs84();

  // .onos.topo.CartesianLocation cartesian = 4;
  bool has_cartesian() const;
  private:
  bool _internal_has_cartesian() const;
  public:
  void clear_cartesian();
  const ::onos::topo::CartesianLocation& cartesian() const;
  PROTOBUF_NODISCARD ::onos::topo::CartesianLocation* release_cartesian();
  ::onos::topo::CartesianLocation* mutable_cartesian();
  void set_allocated_cartesian(::onos::topo::CartesianLocation* cartesian);
  private:
  const ::onos::topo::CartesianLocation& _internal_cartesian() const;
  ::onos::topo::CartesianLocation* _internal_mutable_cartesian();
  public:
  void unsafe_arena_set_allocated_cartesian(
      ::onos::topo::CartesianLocation* cartesian);
  ::onos::topo::CartesianLocation* unsafe_arena_release_cartesian();

  void clear_ext();
  ExtCase ext_case() const;
  // @@protoc_insertion_point(class_scope:onos.topo.Location)
 private:
  class _Internal;
  void set_has_wgs84();
  void set_has_cartesian();

  inline bool has_ext() const;
  inline void clear_has_ext();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double lat_;
  double lng_;
  union ExtUnion {
    constexpr ExtUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::onos::topo::Wgs84Location* wgs84_;
    ::onos::topo::CartesianLocation* cartesian_;
  } ext_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class Wgs84Location final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.Wgs84Location) */ {
 public:
  inline Wgs84Location() : Wgs84Location(nullptr) {}
  ~Wgs84Location() override;
  explicit constexpr Wgs84Location(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Wgs84Location(const Wgs84Location& from);
  Wgs84Location(Wgs84Location&& from) noexcept
    : Wgs84Location() {
    *this = ::std::move(from);
  }

  inline Wgs84Location& operator=(const Wgs84Location& from) {
    CopyFrom(from);
    return *this;
  }
  inline Wgs84Location& operator=(Wgs84Location&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Wgs84Location& default_instance() {
    return *internal_default_instance();
  }
  static inline const Wgs84Location* internal_default_instance() {
    return reinterpret_cast<const Wgs84Location*>(
               &_Wgs84Location_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Wgs84Location& a, Wgs84Location& b) {
    a.Swap(&b);
  }
  inline void Swap(Wgs84Location* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Wgs84Location* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Wgs84Location* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Wgs84Location>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Wgs84Location& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Wgs84Location& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Wgs84Location* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.Wgs84Location";
  }
  protected:
  explicit Wgs84Location(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeDegFieldNumber = 1,
    kLongitudeDegFieldNumber = 2,
    kAltitudeMFieldNumber = 3,
  };
  // double latitude_deg = 1;
  void clear_latitude_deg();
  double latitude_deg() const;
  void set_latitude_deg(double value);
  private:
  double _internal_latitude_deg() const;
  void _internal_set_latitude_deg(double value);
  public:

  // double longitude_deg = 2;
  void clear_longitude_deg();
  double longitude_deg() const;
  void set_longitude_deg(double value);
  private:
  double _internal_longitude_deg() const;
  void _internal_set_longitude_deg(double value);
  public:

  // double altitude_m = 3;
  void clear_altitude_m();
  double altitude_m() const;
  void set_altitude_m(double value);
  private:
  double _internal_altitude_m() const;
  void _internal_set_altitude_m(double value);
  public:

  // @@protoc_insertion_point(class_scope:onos.topo.Wgs84Location)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double latitude_deg_;
  double longitude_deg_;
  double altitude_m_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class CartesianLocation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.CartesianLocation) */ {
 public:
  inline CartesianLocation() : CartesianLocation(nullptr) {}
  ~CartesianLocation() override;
  explicit constexpr CartesianLocation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CartesianLocation(const CartesianLocation& from);
  CartesianLocation(CartesianLocation&& from) noexcept
    : CartesianLocation() {
    *this = ::std::move(from);
  }

  inline CartesianLocation& operator=(const CartesianLocation& from) {
    CopyFrom(from);
    return *this;
  }
  inline CartesianLocation& operator=(CartesianLocation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CartesianLocation& default_instance() {
    return *internal_default_instance();
  }
  static inline const CartesianLocation* internal_default_instance() {
    return reinterpret_cast<const CartesianLocation*>(
               &_CartesianLocation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CartesianLocation& a, CartesianLocation& b) {
    a.Swap(&b);
  }
  inline void Swap(CartesianLocation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CartesianLocation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CartesianLocation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CartesianLocation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CartesianLocation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CartesianLocation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CartesianLocation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.CartesianLocation";
  }
  protected:
  explicit CartesianLocation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXMFieldNumber = 1,
    kYMFieldNumber = 2,
    kZMFieldNumber = 3,
  };
  // double x_m = 1;
  void clear_x_m();
  double x_m() const;
  void set_x_m(double value);
  private:
  double _internal_x_m() const;
  void _internal_set_x_m(double value);
  public:

  // double y_m = 2;
  void clear_y_m();
  double y_m() const;
  void set_y_m(double value);
  private:
  double _internal_y_m() const;
  void _internal_set_y_m(double value);
  public:

  // double z_m = 3;
  void clear_z_m();
  double z_m() const;
  void set_z_m(double value);
  private:
  double _internal_z_m() const;
  void _internal_set_z_m(double value);
  public:

  // @@protoc_insertion_point(class_scope:onos.topo.CartesianLocation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double x_m_;
  double y_m_;
  double z_m_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class AzElOrientation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.AzElOrientation) */ {
 public:
  inline AzElOrientation() : AzElOrientation(nullptr) {}
  ~AzElOrientation() override;
  explicit constexpr AzElOrientation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AzElOrientation(const AzElOrientation& from);
  AzElOrientation(AzElOrientation&& from) noexcept
    : AzElOrientation() {
    *this = ::std::move(from);
  }

  inline AzElOrientation& operator=(const AzElOrientation& from) {
    CopyFrom(from);
    return *this;
  }
  inline AzElOrientation& operator=(AzElOrientation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AzElOrientation& default_instance() {
    return *internal_default_instance();
  }
  static inline const AzElOrientation* internal_default_instance() {
    return reinterpret_cast<const AzElOrientation*>(
               &_AzElOrientation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AzElOrientation& a, AzElOrientation& b) {
    a.Swap(&b);
  }
  inline void Swap(AzElOrientation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AzElOrientation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AzElOrientation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AzElOrientation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AzElOrientation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AzElOrientation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AzElOrientation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.AzElOrientation";
  }
  protected:
  explicit AzElOrientation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAzimuthDegFieldNumber = 1,
    kElevationDegFieldNumber = 2,
    kRotationDegFieldNumber = 3,
  };
  // double azimuth_deg = 1;
  void clear_azimuth_deg();
  double azimuth_deg() const;
  void set_azimuth_deg(double value);
  private:
  double _internal_azimuth_deg() const;
  void _internal_set_azimuth_deg(double value);
  public:

  // double elevation_deg = 2;
  void clear_elevation_deg();
  double elevation_deg() const;
  void set_elevation_deg(double value);
  private:
  double _internal_elevation_deg() const;
  void _internal_set_elevation_deg(double value);
  public:

  // double rotation_deg = 3;
  void clear_rotation_deg();
  double rotation_deg() const;
  void set_rotation_deg(double value);
  private:
  double _internal_rotation_deg() const;
  void _internal_set_rotation_deg(double value);
  public:

  // @@protoc_insertion_point(class_scope:onos.topo.AzElOrientation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double azimuth_deg_;
  double elevation_deg_;
  double rotation_deg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class YprOrientation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.YprOrientation) */ {
 public:
  inline YprOrientation() : YprOrientation(nullptr) {}
  ~YprOrientation() override;
  explicit constexpr YprOrientation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  YprOrientation(const YprOrientation& from);
  YprOrientation(YprOrientation&& from) noexcept
    : YprOrientation() {
    *this = ::std::move(from);
  }

  inline YprOrientation& operator=(const YprOrientation& from) {
    CopyFrom(from);
    return *this;
  }
  inline YprOrientation& operator=(YprOrientation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const YprOrientation& default_instance() {
    return *internal_default_instance();
  }
  static inline const YprOrientation* internal_default_instance() {
    return reinterpret_cast<const YprOrientation*>(
               &_YprOrientation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(YprOrientation& a, YprOrientation& b) {
    a.Swap(&b);
  }
  inline void Swap(YprOrientation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(YprOrientation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  YprOrientation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<YprOrientation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const YprOrientation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const YprOrientation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(YprOrientation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.YprOrientation";
  }
  protected:
  explicit YprOrientation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kYawDegFieldNumber = 1,
    kPitchDegFieldNumber = 2,
    kRollDegFieldNumber = 3,
  };
  // double yaw_deg = 1;
  void clear_yaw_deg();
  double yaw_deg() const;
  void set_yaw_deg(double value);
  private:
  double _internal_yaw_deg() const;
  void _internal_set_yaw_deg(double value);
  public:

  // double pitch_deg = 2;
  void clear_pitch_deg();
  double pitch_deg() const;
  void set_pitch_deg(double value);
  private:
  double _internal_pitch_deg() const;
  void _internal_set_pitch_deg(double value);
  public:

  // double roll_deg = 3;
  void clear_roll_deg();
  double roll_deg() const;
  void set_roll_deg(double value);
  private:
  double _internal_roll_deg() const;
  void _internal_set_roll_deg(double value);
  public:

  // @@protoc_insertion_point(class_scope:onos.topo.YprOrientation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  double yaw_deg_;
  double pitch_deg_;
  double roll_deg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class Orientation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.Orientation) */ {
 public:
  inline Orientation() : Orientation(nullptr) {}
  ~Orientation() override;
  explicit constexpr Orientation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Orientation(const Orientation& from);
  Orientation(Orientation&& from) noexcept
    : Orientation() {
    *this = ::std::move(from);
  }

  inline Orientation& operator=(const Orientation& from) {
    CopyFrom(from);
    return *this;
  }
  inline Orientation& operator=(Orientation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Orientation& default_instance() {
    return *internal_default_instance();
  }
  enum OrientationCase {
    kAzel = 1,
    kYpr = 2,
    ORIENTATION_NOT_SET = 0,
  };

  static inline const Orientation* internal_default_instance() {
    return reinterpret_cast<const Orientation*>(
               &_Orientation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Orientation& a, Orientation& b) {
    a.Swap(&b);
  }
  inline void Swap(Orientation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Orientation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Orientation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Orientation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Orientation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Orientation& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Orientation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.Orientation";
  }
  protected:
  explicit Orientation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAzelFieldNumber = 1,
    kYprFieldNumber = 2,
  };
  // .onos.topo.AzElOrientation azel = 1;
  bool has_azel() const;
  private:
  bool _internal_has_azel() const;
  public:
  void clear_azel();
  const ::onos::topo::AzElOrientation& azel() const;
  PROTOBUF_NODISCARD ::onos::topo::AzElOrientation* release_azel();
  ::onos::topo::AzElOrientation* mutable_azel();
  void set_allocated_azel(::onos::topo::AzElOrientation* azel);
  private:
  const ::onos::topo::AzElOrientation& _internal_azel() const;
  ::onos::topo::AzElOrientation* _internal_mutable_azel();
  public:
  void unsafe_arena_set_allocated_azel(
      ::onos::topo::AzElOrientation* azel);
  ::onos::topo::AzElOrientation* unsafe_arena_release_azel();

  // .onos.topo.YprOrientation ypr = 2;
  bool has_ypr() const;
  private:
  bool _internal_has_ypr() const;
  public:
  void clear_ypr();
  const ::onos::topo::YprOrientation& ypr() const;
  PROTOBUF_NODISCARD ::onos::topo::YprOrientation* release_ypr();
  ::onos::topo::YprOrientation* mutable_ypr();
  void set_allocated_ypr(::onos::topo::YprOrientation* ypr);
  private:
  const ::onos::topo::YprOrientation& _internal_ypr() const;
  ::onos::topo::YprOrientation* _internal_mutable_ypr();
  public:
  void unsafe_arena_set_allocated_ypr(
      ::onos::topo::YprOrientation* ypr);
  ::onos::topo::YprOrientation* unsafe_arena_release_ypr();

  void clear_orientation();
  OrientationCase orientation_case() const;
  // @@protoc_insertion_point(class_scope:onos.topo.Orientation)
 private:
  class _Internal;
  void set_has_azel();
  void set_has_ypr();

  inline bool has_orientation() const;
  inline void clear_has_orientation();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union OrientationUnion {
    constexpr OrientationUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::onos::topo::AzElOrientation* azel_;
    ::onos::topo::YprOrientation* ypr_;
  } orientation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class Waypoint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.Waypoint) */ {
 public:
  inline Waypoint() : Waypoint(nullptr) {}
  ~Waypoint() override;
  explicit constexpr Waypoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Waypoint(const Waypoint& from);
  Waypoint(Waypoint&& from) noexcept
    : Waypoint() {
    *this = ::std::move(from);
  }

  inline Waypoint& operator=(const Waypoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline Waypoint& operator=(Waypoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Waypoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const Waypoint* internal_default_instance() {
    return reinterpret_cast<const Waypoint*>(
               &_Waypoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Waypoint& a, Waypoint& b) {
    a.Swap(&b);
  }
  inline void Swap(Waypoint* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Waypoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Waypoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Waypoint>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Waypoint& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Waypoint& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Waypoint* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.Waypoint";
  }
  protected:
  explicit Waypoint(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
    kLocationFieldNumber = 2,
  };
  // .google.protobuf.Timestamp time = 1;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& time() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_time();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_time();
  void set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_time() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_time();
  public:
  void unsafe_arena_set_allocated_time(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* time);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_time();

  // .onos.topo.Location location = 2;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::onos::topo::Location& location() const;
  PROTOBUF_NODISCARD ::onos::topo::Location* release_location();
  ::onos::topo::Location* mutable_location();
  void set_allocated_location(::onos::topo::Location* location);
  private:
  const ::onos::topo::Location& _internal_location() const;
  ::onos::topo::Location* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::onos::topo::Location* location);
  ::onos::topo::Location* unsafe_arena_release_location();

  // @@protoc_insertion_point(class_scope:onos.topo.Waypoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* time_;
  ::onos::topo::Location* location_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class Waypoints final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.Waypoints) */ {
 public:
  inline Waypoints() : Waypoints(nullptr) {}
  ~Waypoints() override;
  explicit constexpr Waypoints(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Waypoints(const Waypoints& from);
  Waypoints(Waypoints&& from) noexcept
    : Waypoints() {
    *this = ::std::move(from);
  }

  inline Waypoints& operator=(const Waypoints& from) {
    CopyFrom(from);
    return *this;
  }
  inline Waypoints& operator=(Waypoints&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Waypoints& default_instance() {
    return *internal_default_instance();
  }
  static inline const Waypoints* internal_default_instance() {
    return reinterpret_cast<const Waypoints*>(
               &_Waypoints_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Waypoints& a, Waypoints& b) {
    a.Swap(&b);
  }
  inline void Swap(Waypoints* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Waypoints* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Waypoints* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Waypoints>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Waypoints& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Waypoints& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Waypoints* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.Waypoints";
  }
  protected:
  explicit Waypoints(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWaypointFieldNumber = 1,
  };
  // repeated .onos.topo.Waypoint waypoint = 1;
  int waypoint_size() const;
  private:
  int _internal_waypoint_size() const;
  public:
  void clear_waypoint();
  ::onos::topo::Waypoint* mutable_waypoint(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::Waypoint >*
      mutable_waypoint();
  private:
  const ::onos::topo::Waypoint& _internal_waypoint(int index) const;
  ::onos::topo::Waypoint* _internal_add_waypoint();
  public:
  const ::onos::topo::Waypoint& waypoint(int index) const;
  ::onos::topo::Waypoint* add_waypoint();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::Waypoint >&
      waypoint() const;

  // @@protoc_insertion_point(class_scope:onos.topo.Waypoints)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::Waypoint > waypoint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class OrbitData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.OrbitData) */ {
 public:
  inline OrbitData() : OrbitData(nullptr) {}
  ~OrbitData() override;
  explicit constexpr OrbitData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  OrbitData(const OrbitData& from);
  OrbitData(OrbitData&& from) noexcept
    : OrbitData() {
    *this = ::std::move(from);
  }

  inline OrbitData& operator=(const OrbitData& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrbitData& operator=(OrbitData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrbitData& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrbitData* internal_default_instance() {
    return reinterpret_cast<const OrbitData*>(
               &_OrbitData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(OrbitData& a, OrbitData& b) {
    a.Swap(&b);
  }
  inline void Swap(OrbitData* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrbitData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrbitData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<OrbitData>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const OrbitData& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const OrbitData& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OrbitData* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.OrbitData";
  }
  protected:
  explicit OrbitData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEpochFieldNumber = 1,
    kInclinationDegFieldNumber = 2,
    kRaanDegFieldNumber = 3,
    kEFieldNumber = 4,
    kArgumentDegFieldNumber = 5,
    kAnomalyDegFieldNumber = 6,
    kMeanMotionFieldNumber = 7,
  };
  // .google.protobuf.Timestamp epoch = 1;
  bool has_epoch() const;
  private:
  bool _internal_has_epoch() const;
  public:
  void clear_epoch();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& epoch() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_epoch();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_epoch();
  void set_allocated_epoch(::PROTOBUF_NAMESPACE_ID::Timestamp* epoch);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_epoch() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_epoch();
  public:
  void unsafe_arena_set_allocated_epoch(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* epoch);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_epoch();

  // double inclination_deg = 2;
  void clear_inclination_deg();
  double inclination_deg() const;
  void set_inclination_deg(double value);
  private:
  double _internal_inclination_deg() const;
  void _internal_set_inclination_deg(double value);
  public:

  // double raan_deg = 3;
  void clear_raan_deg();
  double raan_deg() const;
  void set_raan_deg(double value);
  private:
  double _internal_raan_deg() const;
  void _internal_set_raan_deg(double value);
  public:

  // double e = 4;
  void clear_e();
  double e() const;
  void set_e(double value);
  private:
  double _internal_e() const;
  void _internal_set_e(double value);
  public:

  // double argument_deg = 5;
  void clear_argument_deg();
  double argument_deg() const;
  void set_argument_deg(double value);
  private:
  double _internal_argument_deg() const;
  void _internal_set_argument_deg(double value);
  public:

  // double anomaly_deg = 6;
  void clear_anomaly_deg();
  double anomaly_deg() const;
  void set_anomaly_deg(double value);
  private:
  double _internal_anomaly_deg() const;
  void _internal_set_anomaly_deg(double value);
  public:

  // double mean_motion = 7;
  void clear_mean_motion();
  double mean_motion() const;
  void set_mean_motion(double value);
  private:
  double _internal_mean_motion() const;
  void _internal_set_mean_motion(double value);
  public:

  // @@protoc_insertion_point(class_scope:onos.topo.OrbitData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* epoch_;
  double inclination_deg_;
  double raan_deg_;
  double e_;
  double argument_deg_;
  double anomaly_deg_;
  double mean_motion_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class Motion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.Motion) */ {
 public:
  inline Motion() : Motion(nullptr) {}
  ~Motion() override;
  explicit constexpr Motion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Motion(const Motion& from);
  Motion(Motion&& from) noexcept
    : Motion() {
    *this = ::std::move(from);
  }

  inline Motion& operator=(const Motion& from) {
    CopyFrom(from);
    return *this;
  }
  inline Motion& operator=(Motion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Motion& default_instance() {
    return *internal_default_instance();
  }
  enum MotionCase {
    kFixedLocation = 1,
    kWaypoints = 2,
    kOrbit = 3,
    MOTION_NOT_SET = 0,
  };

  static inline const Motion* internal_default_instance() {
    return reinterpret_cast<const Motion*>(
               &_Motion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Motion& a, Motion& b) {
    a.Swap(&b);
  }
  inline void Swap(Motion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Motion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Motion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Motion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Motion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Motion& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Motion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.Motion";
  }
  protected:
  explicit Motion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFixedLocationFieldNumber = 1,
    kWaypointsFieldNumber = 2,
    kOrbitFieldNumber = 3,
  };
  // .onos.topo.Location fixed_location = 1;
  bool has_fixed_location() const;
  private:
  bool _internal_has_fixed_location() const;
  public:
  void clear_fixed_location();
  const ::onos::topo::Location& fixed_location() const;
  PROTOBUF_NODISCARD ::onos::topo::Location* release_fixed_location();
  ::onos::topo::Location* mutable_fixed_location();
  void set_allocated_fixed_location(::onos::topo::Location* fixed_location);
  private:
  const ::onos::topo::Location& _internal_fixed_location() const;
  ::onos::topo::Location* _internal_mutable_fixed_location();
  public:
  void unsafe_arena_set_allocated_fixed_location(
      ::onos::topo::Location* fixed_location);
  ::onos::topo::Location* unsafe_arena_release_fixed_location();

  // .onos.topo.Waypoints waypoints = 2;
  bool has_waypoints() const;
  private:
  bool _internal_has_waypoints() const;
  public:
  void clear_waypoints();
  const ::onos::topo::Waypoints& waypoints() const;
  PROTOBUF_NODISCARD ::onos::topo::Waypoints* release_waypoints();
  ::onos::topo::Waypoints* mutable_waypoints();
  void set_allocated_waypoints(::onos::topo::Waypoints* waypoints);
  private:
  const ::onos::topo::Waypoints& _internal_waypoints() const;
  ::onos::topo::Waypoints* _internal_mutable_waypoints();
  public:
  void unsafe_arena_set_allocated_waypoints(
      ::onos::topo::Waypoints* waypoints);
  ::onos::topo::Waypoints* unsafe_arena_release_waypoints();

  // .onos.topo.OrbitData orbit = 3;
  bool has_orbit() const;
  private:
  bool _internal_has_orbit() const;
  public:
  void clear_orbit();
  const ::onos::topo::OrbitData& orbit() const;
  PROTOBUF_NODISCARD ::onos::topo::OrbitData* release_orbit();
  ::onos::topo::OrbitData* mutable_orbit();
  void set_allocated_orbit(::onos::topo::OrbitData* orbit);
  private:
  const ::onos::topo::OrbitData& _internal_orbit() const;
  ::onos::topo::OrbitData* _internal_mutable_orbit();
  public:
  void unsafe_arena_set_allocated_orbit(
      ::onos::topo::OrbitData* orbit);
  ::onos::topo::OrbitData* unsafe_arena_release_orbit();

  void clear_motion();
  MotionCase motion_case() const;
  // @@protoc_insertion_point(class_scope:onos.topo.Motion)
 private:
  class _Internal;
  void set_has_fixed_location();
  void set_has_waypoints();
  void set_has_orbit();

  inline bool has_motion() const;
  inline void clear_has_motion();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union MotionUnion {
    constexpr MotionUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::onos::topo::Location* fixed_location_;
    ::onos::topo::Waypoints* waypoints_;
    ::onos::topo::OrbitData* orbit_;
  } motion_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class Coverage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.Coverage) */ {
 public:
  inline Coverage() : Coverage(nullptr) {}
  ~Coverage() override;
  explicit constexpr Coverage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Coverage(const Coverage& from);
  Coverage(Coverage&& from) noexcept
    : Coverage() {
    *this = ::std::move(from);
  }

  inline Coverage& operator=(const Coverage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Coverage& operator=(Coverage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Coverage& default_instance() {
    return *internal_default_instance();
  }
  static inline const Coverage* internal_default_instance() {
    return reinterpret_cast<const Coverage*>(
               &_Coverage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Coverage& a, Coverage& b) {
    a.Swap(&b);
  }
  inline void Swap(Coverage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Coverage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Coverage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Coverage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Coverage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Coverage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Coverage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.Coverage";
  }
  protected:
  explicit Coverage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeightFieldNumber = 1,
    kArcWidthFieldNumber = 2,
    kAzimuthFieldNumber = 3,
    kTiltFieldNumber = 4,
  };
  // int32 height = 1;
  void clear_height();
  int32_t height() const;
  void set_height(int32_t value);
  private:
  int32_t _internal_height() const;
  void _internal_set_height(int32_t value);
  public:

  // int32 arc_width = 2;
  void clear_arc_width();
  int32_t arc_width() const;
  void set_arc_width(int32_t value);
  private:
  int32_t _internal_arc_width() const;
  void _internal_set_arc_width(int32_t value);
  public:

  // int32 azimuth = 3;
  void clear_azimuth();
  int32_t azimuth() const;
  void set_azimuth(int32_t value);
  private:
  int32_t _internal_azimuth() const;
  void _internal_set_azimuth(int32_t value);
  public:

  // int32 tilt = 4;
  void clear_tilt();
  int32_t tilt() const;
  void set_tilt(int32_t value);
  private:
  int32_t _internal_tilt() const;
  void _internal_set_tilt(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.topo.Coverage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t height_;
  int32_t arc_width_;
  int32_t azimuth_;
  int32_t tilt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class E2Node_ServiceModelsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<E2Node_ServiceModelsEntry_DoNotUse, 
    std::string, ::onos::topo::ServiceModelInfo,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<E2Node_ServiceModelsEntry_DoNotUse, 
    std::string, ::onos::topo::ServiceModelInfo,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  E2Node_ServiceModelsEntry_DoNotUse();
  explicit constexpr E2Node_ServiceModelsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit E2Node_ServiceModelsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const E2Node_ServiceModelsEntry_DoNotUse& other);
  static const E2Node_ServiceModelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const E2Node_ServiceModelsEntry_DoNotUse*>(&_E2Node_ServiceModelsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "onos.topo.E2Node.ServiceModelsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class E2Node final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.E2Node) */ {
 public:
  inline E2Node() : E2Node(nullptr) {}
  ~E2Node() override;
  explicit constexpr E2Node(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  E2Node(const E2Node& from);
  E2Node(E2Node&& from) noexcept
    : E2Node() {
    *this = ::std::move(from);
  }

  inline E2Node& operator=(const E2Node& from) {
    CopyFrom(from);
    return *this;
  }
  inline E2Node& operator=(E2Node&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const E2Node& default_instance() {
    return *internal_default_instance();
  }
  static inline const E2Node* internal_default_instance() {
    return reinterpret_cast<const E2Node*>(
               &_E2Node_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(E2Node& a, E2Node& b) {
    a.Swap(&b);
  }
  inline void Swap(E2Node* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(E2Node* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  E2Node* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<E2Node>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const E2Node& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const E2Node& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(E2Node* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.E2Node";
  }
  protected:
  explicit E2Node(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kServiceModelsFieldNumber = 1,
  };
  // map<string, .onos.topo.ServiceModelInfo> service_models = 1;
  int service_models_size() const;
  private:
  int _internal_service_models_size() const;
  public:
  void clear_service_models();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::topo::ServiceModelInfo >&
      _internal_service_models() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::topo::ServiceModelInfo >*
      _internal_mutable_service_models();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::topo::ServiceModelInfo >&
      service_models() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::topo::ServiceModelInfo >*
      mutable_service_models();

  // @@protoc_insertion_point(class_scope:onos.topo.E2Node)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      E2Node_ServiceModelsEntry_DoNotUse,
      std::string, ::onos::topo::ServiceModelInfo,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> service_models_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class E2NodeConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.E2NodeConfig) */ {
 public:
  inline E2NodeConfig() : E2NodeConfig(nullptr) {}
  ~E2NodeConfig() override;
  explicit constexpr E2NodeConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  E2NodeConfig(const E2NodeConfig& from);
  E2NodeConfig(E2NodeConfig&& from) noexcept
    : E2NodeConfig() {
    *this = ::std::move(from);
  }

  inline E2NodeConfig& operator=(const E2NodeConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline E2NodeConfig& operator=(E2NodeConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const E2NodeConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const E2NodeConfig* internal_default_instance() {
    return reinterpret_cast<const E2NodeConfig*>(
               &_E2NodeConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(E2NodeConfig& a, E2NodeConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(E2NodeConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(E2NodeConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  E2NodeConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<E2NodeConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const E2NodeConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const E2NodeConfig& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(E2NodeConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.E2NodeConfig";
  }
  protected:
  explicit E2NodeConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionsFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // repeated .onos.topo.Interface connections = 1 [(.gogoproto.nullable) = false];
  int connections_size() const;
  private:
  int _internal_connections_size() const;
  public:
  void clear_connections();
  ::onos::topo::Interface* mutable_connections(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::Interface >*
      mutable_connections();
  private:
  const ::onos::topo::Interface& _internal_connections(int index) const;
  ::onos::topo::Interface* _internal_add_connections();
  public:
  const ::onos::topo::Interface& connections(int index) const;
  ::onos::topo::Interface* add_connections();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::Interface >&
      connections() const;

  // uint64 version = 2;
  void clear_version();
  uint64_t version() const;
  void set_version(uint64_t value);
  private:
  uint64_t _internal_version() const;
  void _internal_set_version(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.topo.E2NodeConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::Interface > connections_;
  uint64_t version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class Lease final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.Lease) */ {
 public:
  inline Lease() : Lease(nullptr) {}
  ~Lease() override;
  explicit constexpr Lease(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Lease(const Lease& from);
  Lease(Lease&& from) noexcept
    : Lease() {
    *this = ::std::move(from);
  }

  inline Lease& operator=(const Lease& from) {
    CopyFrom(from);
    return *this;
  }
  inline Lease& operator=(Lease&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Lease& default_instance() {
    return *internal_default_instance();
  }
  static inline const Lease* internal_default_instance() {
    return reinterpret_cast<const Lease*>(
               &_Lease_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Lease& a, Lease& b) {
    a.Swap(&b);
  }
  inline void Swap(Lease* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Lease* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Lease* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Lease>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Lease& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Lease& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Lease* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.Lease";
  }
  protected:
  explicit Lease(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExpirationFieldNumber = 1,
  };
  // .google.protobuf.Timestamp expiration = 1 [(.gogoproto.stdtime) = true];
  bool has_expiration() const;
  private:
  bool _internal_has_expiration() const;
  public:
  void clear_expiration();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& expiration() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_expiration();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_expiration();
  void set_allocated_expiration(::PROTOBUF_NAMESPACE_ID::Timestamp* expiration);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_expiration() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_expiration();
  public:
  void unsafe_arena_set_allocated_expiration(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* expiration);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_expiration();

  // @@protoc_insertion_point(class_scope:onos.topo.Lease)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* expiration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class Interface final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.Interface) */ {
 public:
  inline Interface() : Interface(nullptr) {}
  ~Interface() override;
  explicit constexpr Interface(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Interface(const Interface& from);
  Interface(Interface&& from) noexcept
    : Interface() {
    *this = ::std::move(from);
  }

  inline Interface& operator=(const Interface& from) {
    CopyFrom(from);
    return *this;
  }
  inline Interface& operator=(Interface&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Interface& default_instance() {
    return *internal_default_instance();
  }
  static inline const Interface* internal_default_instance() {
    return reinterpret_cast<const Interface*>(
               &_Interface_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(Interface& a, Interface& b) {
    a.Swap(&b);
  }
  inline void Swap(Interface* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Interface* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Interface* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Interface>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Interface& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Interface& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Interface* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.Interface";
  }
  protected:
  explicit Interface(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Interface_Type Type;
  static constexpr Type INTERFACE_UNKNOWN =
    Interface_Type_INTERFACE_UNKNOWN;
  static constexpr Type INTERFACE_E2T =
    Interface_Type_INTERFACE_E2T;
  static constexpr Type INTERFACE_E2AP101 =
    Interface_Type_INTERFACE_E2AP101;
  static constexpr Type INTERFACE_E2AP200 =
    Interface_Type_INTERFACE_E2AP200;
  static constexpr Type INTERFACE_A1_XAPP =
    Interface_Type_INTERFACE_A1_XAPP;
  static constexpr Type INTERFACE_A1AP =
    Interface_Type_INTERFACE_A1AP;
  static inline bool Type_IsValid(int value) {
    return Interface_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Interface_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Interface_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Interface_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Interface_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Interface_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Interface_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kIpFieldNumber = 2,
    kTypeFieldNumber = 1,
    kPortFieldNumber = 3,
  };
  // string ip = 2 [(.gogoproto.customname) = "IP"];
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_NODISCARD std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // .onos.topo.Interface.Type type = 1;
  void clear_type();
  ::onos::topo::Interface_Type type() const;
  void set_type(::onos::topo::Interface_Type value);
  private:
  ::onos::topo::Interface_Type _internal_type() const;
  void _internal_set_type(::onos::topo::Interface_Type value);
  public:

  // uint32 port = 3;
  void clear_port();
  uint32_t port() const;
  void set_port(uint32_t value);
  private:
  uint32_t _internal_port() const;
  void _internal_set_port(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.topo.Interface)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  int type_;
  uint32_t port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class E2TInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.E2TInfo) */ {
 public:
  inline E2TInfo() : E2TInfo(nullptr) {}
  ~E2TInfo() override;
  explicit constexpr E2TInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  E2TInfo(const E2TInfo& from);
  E2TInfo(E2TInfo&& from) noexcept
    : E2TInfo() {
    *this = ::std::move(from);
  }

  inline E2TInfo& operator=(const E2TInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline E2TInfo& operator=(E2TInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const E2TInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const E2TInfo* internal_default_instance() {
    return reinterpret_cast<const E2TInfo*>(
               &_E2TInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(E2TInfo& a, E2TInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(E2TInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(E2TInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  E2TInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<E2TInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const E2TInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const E2TInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(E2TInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.E2TInfo";
  }
  protected:
  explicit E2TInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInterfacesFieldNumber = 1,
  };
  // repeated .onos.topo.Interface interfaces = 1;
  int interfaces_size() const;
  private:
  int _internal_interfaces_size() const;
  public:
  void clear_interfaces();
  ::onos::topo::Interface* mutable_interfaces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::Interface >*
      mutable_interfaces();
  private:
  const ::onos::topo::Interface& _internal_interfaces(int index) const;
  ::onos::topo::Interface* _internal_add_interfaces();
  public:
  const ::onos::topo::Interface& interfaces(int index) const;
  ::onos::topo::Interface* add_interfaces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::Interface >&
      interfaces() const;

  // @@protoc_insertion_point(class_scope:onos.topo.E2TInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::Interface > interfaces_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class XAppInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.XAppInfo) */ {
 public:
  inline XAppInfo() : XAppInfo(nullptr) {}
  ~XAppInfo() override;
  explicit constexpr XAppInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  XAppInfo(const XAppInfo& from);
  XAppInfo(XAppInfo&& from) noexcept
    : XAppInfo() {
    *this = ::std::move(from);
  }

  inline XAppInfo& operator=(const XAppInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline XAppInfo& operator=(XAppInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const XAppInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const XAppInfo* internal_default_instance() {
    return reinterpret_cast<const XAppInfo*>(
               &_XAppInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(XAppInfo& a, XAppInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(XAppInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(XAppInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  XAppInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<XAppInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const XAppInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const XAppInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(XAppInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.XAppInfo";
  }
  protected:
  explicit XAppInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInterfacesFieldNumber = 1,
    kA1PolicyTypesFieldNumber = 2,
  };
  // repeated .onos.topo.Interface interfaces = 1;
  int interfaces_size() const;
  private:
  int _internal_interfaces_size() const;
  public:
  void clear_interfaces();
  ::onos::topo::Interface* mutable_interfaces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::Interface >*
      mutable_interfaces();
  private:
  const ::onos::topo::Interface& _internal_interfaces(int index) const;
  ::onos::topo::Interface* _internal_add_interfaces();
  public:
  const ::onos::topo::Interface& interfaces(int index) const;
  ::onos::topo::Interface* add_interfaces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::Interface >&
      interfaces() const;

  // repeated .onos.topo.A1PolicyType a1_policy_types = 2;
  int a1_policy_types_size() const;
  private:
  int _internal_a1_policy_types_size() const;
  public:
  void clear_a1_policy_types();
  ::onos::topo::A1PolicyType* mutable_a1_policy_types(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::A1PolicyType >*
      mutable_a1_policy_types();
  private:
  const ::onos::topo::A1PolicyType& _internal_a1_policy_types(int index) const;
  ::onos::topo::A1PolicyType* _internal_add_a1_policy_types();
  public:
  const ::onos::topo::A1PolicyType& a1_policy_types(int index) const;
  ::onos::topo::A1PolicyType* add_a1_policy_types();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::A1PolicyType >&
      a1_policy_types() const;

  // @@protoc_insertion_point(class_scope:onos.topo.XAppInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::Interface > interfaces_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::A1PolicyType > a1_policy_types_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class A1PolicyType final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.A1PolicyType) */ {
 public:
  inline A1PolicyType() : A1PolicyType(nullptr) {}
  ~A1PolicyType() override;
  explicit constexpr A1PolicyType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  A1PolicyType(const A1PolicyType& from);
  A1PolicyType(A1PolicyType&& from) noexcept
    : A1PolicyType() {
    *this = ::std::move(from);
  }

  inline A1PolicyType& operator=(const A1PolicyType& from) {
    CopyFrom(from);
    return *this;
  }
  inline A1PolicyType& operator=(A1PolicyType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const A1PolicyType& default_instance() {
    return *internal_default_instance();
  }
  static inline const A1PolicyType* internal_default_instance() {
    return reinterpret_cast<const A1PolicyType*>(
               &_A1PolicyType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(A1PolicyType& a, A1PolicyType& b) {
    a.Swap(&b);
  }
  inline void Swap(A1PolicyType* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(A1PolicyType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  A1PolicyType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<A1PolicyType>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const A1PolicyType& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const A1PolicyType& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(A1PolicyType* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.A1PolicyType";
  }
  protected:
  explicit A1PolicyType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kVersionFieldNumber = 3,
    kDescriptionFieldNumber = 4,
  };
  // string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.casttype) = "PolicyTypeID"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2 [(.gogoproto.customname) = "Name", (.gogoproto.casttype) = "PolicyTypeName"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string version = 3 [(.gogoproto.customname) = "Version", (.gogoproto.casttype) = "PolicyTypeVersion"];
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string description = 4 [(.gogoproto.customname) = "Description", (.gogoproto.casttype) = "PolicyTypeDescription"];
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // @@protoc_insertion_point(class_scope:onos.topo.A1PolicyType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class A1TInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.A1TInfo) */ {
 public:
  inline A1TInfo() : A1TInfo(nullptr) {}
  ~A1TInfo() override;
  explicit constexpr A1TInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  A1TInfo(const A1TInfo& from);
  A1TInfo(A1TInfo&& from) noexcept
    : A1TInfo() {
    *this = ::std::move(from);
  }

  inline A1TInfo& operator=(const A1TInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline A1TInfo& operator=(A1TInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const A1TInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const A1TInfo* internal_default_instance() {
    return reinterpret_cast<const A1TInfo*>(
               &_A1TInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(A1TInfo& a, A1TInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(A1TInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(A1TInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  A1TInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<A1TInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const A1TInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const A1TInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(A1TInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.A1TInfo";
  }
  protected:
  explicit A1TInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInterfacesFieldNumber = 1,
  };
  // repeated .onos.topo.Interface interfaces = 1;
  int interfaces_size() const;
  private:
  int _internal_interfaces_size() const;
  public:
  void clear_interfaces();
  ::onos::topo::Interface* mutable_interfaces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::Interface >*
      mutable_interfaces();
  private:
  const ::onos::topo::Interface& _internal_interfaces(int index) const;
  ::onos::topo::Interface* _internal_add_interfaces();
  public:
  const ::onos::topo::Interface& interfaces(int index) const;
  ::onos::topo::Interface* add_interfaces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::Interface >&
      interfaces() const;

  // @@protoc_insertion_point(class_scope:onos.topo.A1TInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::Interface > interfaces_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class CellGlobalID final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.CellGlobalID) */ {
 public:
  inline CellGlobalID() : CellGlobalID(nullptr) {}
  ~CellGlobalID() override;
  explicit constexpr CellGlobalID(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CellGlobalID(const CellGlobalID& from);
  CellGlobalID(CellGlobalID&& from) noexcept
    : CellGlobalID() {
    *this = ::std::move(from);
  }

  inline CellGlobalID& operator=(const CellGlobalID& from) {
    CopyFrom(from);
    return *this;
  }
  inline CellGlobalID& operator=(CellGlobalID&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CellGlobalID& default_instance() {
    return *internal_default_instance();
  }
  static inline const CellGlobalID* internal_default_instance() {
    return reinterpret_cast<const CellGlobalID*>(
               &_CellGlobalID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(CellGlobalID& a, CellGlobalID& b) {
    a.Swap(&b);
  }
  inline void Swap(CellGlobalID* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CellGlobalID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CellGlobalID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CellGlobalID>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CellGlobalID& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CellGlobalID& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CellGlobalID* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.CellGlobalID";
  }
  protected:
  explicit CellGlobalID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string value = 1;
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_NODISCARD std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // .onos.topo.CellGlobalIDType type = 2;
  void clear_type();
  ::onos::topo::CellGlobalIDType type() const;
  void set_type(::onos::topo::CellGlobalIDType value);
  private:
  ::onos::topo::CellGlobalIDType _internal_type() const;
  void _internal_set_type(::onos::topo::CellGlobalIDType value);
  public:

  // @@protoc_insertion_point(class_scope:onos.topo.CellGlobalID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class NeighborCellID final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.NeighborCellID) */ {
 public:
  inline NeighborCellID() : NeighborCellID(nullptr) {}
  ~NeighborCellID() override;
  explicit constexpr NeighborCellID(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NeighborCellID(const NeighborCellID& from);
  NeighborCellID(NeighborCellID&& from) noexcept
    : NeighborCellID() {
    *this = ::std::move(from);
  }

  inline NeighborCellID& operator=(const NeighborCellID& from) {
    CopyFrom(from);
    return *this;
  }
  inline NeighborCellID& operator=(NeighborCellID&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NeighborCellID& default_instance() {
    return *internal_default_instance();
  }
  static inline const NeighborCellID* internal_default_instance() {
    return reinterpret_cast<const NeighborCellID*>(
               &_NeighborCellID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(NeighborCellID& a, NeighborCellID& b) {
    a.Swap(&b);
  }
  inline void Swap(NeighborCellID* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NeighborCellID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NeighborCellID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NeighborCellID>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NeighborCellID& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NeighborCellID& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NeighborCellID* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.NeighborCellID";
  }
  protected:
  explicit NeighborCellID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlmnIdFieldNumber = 2,
    kCellGlobalIdFieldNumber = 1,
  };
  // string plmn_id = 2 [(.gogoproto.customname) = "PlmnID"];
  void clear_plmn_id();
  const std::string& plmn_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_plmn_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_plmn_id();
  PROTOBUF_NODISCARD std::string* release_plmn_id();
  void set_allocated_plmn_id(std::string* plmn_id);
  private:
  const std::string& _internal_plmn_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_plmn_id(const std::string& value);
  std::string* _internal_mutable_plmn_id();
  public:

  // .onos.topo.CellGlobalID cell_global_id = 1 [(.gogoproto.customname) = "CellGlobalID"];
  bool has_cell_global_id() const;
  private:
  bool _internal_has_cell_global_id() const;
  public:
  void clear_cell_global_id();
  const ::onos::topo::CellGlobalID& cell_global_id() const;
  PROTOBUF_NODISCARD ::onos::topo::CellGlobalID* release_cell_global_id();
  ::onos::topo::CellGlobalID* mutable_cell_global_id();
  void set_allocated_cell_global_id(::onos::topo::CellGlobalID* cell_global_id);
  private:
  const ::onos::topo::CellGlobalID& _internal_cell_global_id() const;
  ::onos::topo::CellGlobalID* _internal_mutable_cell_global_id();
  public:
  void unsafe_arena_set_allocated_cell_global_id(
      ::onos::topo::CellGlobalID* cell_global_id);
  ::onos::topo::CellGlobalID* unsafe_arena_release_cell_global_id();

  // @@protoc_insertion_point(class_scope:onos.topo.NeighborCellID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plmn_id_;
  ::onos::topo::CellGlobalID* cell_global_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class E2Cell_KpiReportsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<E2Cell_KpiReportsEntry_DoNotUse, 
    std::string, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<E2Cell_KpiReportsEntry_DoNotUse, 
    std::string, uint32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> SuperType;
  E2Cell_KpiReportsEntry_DoNotUse();
  explicit constexpr E2Cell_KpiReportsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit E2Cell_KpiReportsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const E2Cell_KpiReportsEntry_DoNotUse& other);
  static const E2Cell_KpiReportsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const E2Cell_KpiReportsEntry_DoNotUse*>(&_E2Cell_KpiReportsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "onos.topo.E2Cell.KpiReportsEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class E2Cell final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.E2Cell) */ {
 public:
  inline E2Cell() : E2Cell(nullptr) {}
  ~E2Cell() override;
  explicit constexpr E2Cell(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  E2Cell(const E2Cell& from);
  E2Cell(E2Cell&& from) noexcept
    : E2Cell() {
    *this = ::std::move(from);
  }

  inline E2Cell& operator=(const E2Cell& from) {
    CopyFrom(from);
    return *this;
  }
  inline E2Cell& operator=(E2Cell&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const E2Cell& default_instance() {
    return *internal_default_instance();
  }
  static inline const E2Cell* internal_default_instance() {
    return reinterpret_cast<const E2Cell*>(
               &_E2Cell_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(E2Cell& a, E2Cell& b) {
    a.Swap(&b);
  }
  inline void Swap(E2Cell* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(E2Cell* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  E2Cell* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<E2Cell>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const E2Cell& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const E2Cell& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(E2Cell* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.E2Cell";
  }
  protected:
  explicit E2Cell(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kKpiReportsFieldNumber = 7,
    kNeighborCellIdsFieldNumber = 8,
    kCellObjectIdFieldNumber = 1,
    kCellTypeFieldNumber = 5,
    kCellGlobalIdFieldNumber = 2,
    kAntennaCountFieldNumber = 3,
    kArfcnFieldNumber = 4,
    kPciFieldNumber = 6,
  };
  // map<string, uint32> kpi_reports = 7 [(.gogoproto.customname) = "KpiReports"];
  int kpi_reports_size() const;
  private:
  int _internal_kpi_reports_size() const;
  public:
  void clear_kpi_reports();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >&
      _internal_kpi_reports() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >*
      _internal_mutable_kpi_reports();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >&
      kpi_reports() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >*
      mutable_kpi_reports();

  // repeated .onos.topo.NeighborCellID neighbor_cell_ids = 8 [(.gogoproto.customname) = "NeighborCellIDs"];
  int neighbor_cell_ids_size() const;
  private:
  int _internal_neighbor_cell_ids_size() const;
  public:
  void clear_neighbor_cell_ids();
  ::onos::topo::NeighborCellID* mutable_neighbor_cell_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::NeighborCellID >*
      mutable_neighbor_cell_ids();
  private:
  const ::onos::topo::NeighborCellID& _internal_neighbor_cell_ids(int index) const;
  ::onos::topo::NeighborCellID* _internal_add_neighbor_cell_ids();
  public:
  const ::onos::topo::NeighborCellID& neighbor_cell_ids(int index) const;
  ::onos::topo::NeighborCellID* add_neighbor_cell_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::NeighborCellID >&
      neighbor_cell_ids() const;

  // string cell_object_id = 1 [(.gogoproto.customname) = "CellObjectID"];
  void clear_cell_object_id();
  const std::string& cell_object_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cell_object_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cell_object_id();
  PROTOBUF_NODISCARD std::string* release_cell_object_id();
  void set_allocated_cell_object_id(std::string* cell_object_id);
  private:
  const std::string& _internal_cell_object_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cell_object_id(const std::string& value);
  std::string* _internal_mutable_cell_object_id();
  public:

  // string cell_type = 5;
  void clear_cell_type();
  const std::string& cell_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cell_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cell_type();
  PROTOBUF_NODISCARD std::string* release_cell_type();
  void set_allocated_cell_type(std::string* cell_type);
  private:
  const std::string& _internal_cell_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cell_type(const std::string& value);
  std::string* _internal_mutable_cell_type();
  public:

  // .onos.topo.CellGlobalID cell_global_id = 2 [(.gogoproto.customname) = "CellGlobalID"];
  bool has_cell_global_id() const;
  private:
  bool _internal_has_cell_global_id() const;
  public:
  void clear_cell_global_id();
  const ::onos::topo::CellGlobalID& cell_global_id() const;
  PROTOBUF_NODISCARD ::onos::topo::CellGlobalID* release_cell_global_id();
  ::onos::topo::CellGlobalID* mutable_cell_global_id();
  void set_allocated_cell_global_id(::onos::topo::CellGlobalID* cell_global_id);
  private:
  const ::onos::topo::CellGlobalID& _internal_cell_global_id() const;
  ::onos::topo::CellGlobalID* _internal_mutable_cell_global_id();
  public:
  void unsafe_arena_set_allocated_cell_global_id(
      ::onos::topo::CellGlobalID* cell_global_id);
  ::onos::topo::CellGlobalID* unsafe_arena_release_cell_global_id();

  // uint32 antenna_count = 3;
  void clear_antenna_count();
  uint32_t antenna_count() const;
  void set_antenna_count(uint32_t value);
  private:
  uint32_t _internal_antenna_count() const;
  void _internal_set_antenna_count(uint32_t value);
  public:

  // uint32 arfcn = 4 [(.gogoproto.customname) = "ARFCN"];
  void clear_arfcn();
  uint32_t arfcn() const;
  void set_arfcn(uint32_t value);
  private:
  uint32_t _internal_arfcn() const;
  void _internal_set_arfcn(uint32_t value);
  public:

  // uint32 pci = 6 [(.gogoproto.customname) = "PCI"];
  void clear_pci();
  uint32_t pci() const;
  void set_pci(uint32_t value);
  private:
  uint32_t _internal_pci() const;
  void _internal_set_pci(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.topo.E2Cell)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      E2Cell_KpiReportsEntry_DoNotUse,
      std::string, uint32_t,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32> kpi_reports_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::NeighborCellID > neighbor_cell_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cell_object_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cell_type_;
  ::onos::topo::CellGlobalID* cell_global_id_;
  uint32_t antenna_count_;
  uint32_t arfcn_;
  uint32_t pci_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class ServiceModelInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.ServiceModelInfo) */ {
 public:
  inline ServiceModelInfo() : ServiceModelInfo(nullptr) {}
  ~ServiceModelInfo() override;
  explicit constexpr ServiceModelInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServiceModelInfo(const ServiceModelInfo& from);
  ServiceModelInfo(ServiceModelInfo&& from) noexcept
    : ServiceModelInfo() {
    *this = ::std::move(from);
  }

  inline ServiceModelInfo& operator=(const ServiceModelInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceModelInfo& operator=(ServiceModelInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServiceModelInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServiceModelInfo* internal_default_instance() {
    return reinterpret_cast<const ServiceModelInfo*>(
               &_ServiceModelInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ServiceModelInfo& a, ServiceModelInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceModelInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceModelInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServiceModelInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServiceModelInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServiceModelInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ServiceModelInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceModelInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.ServiceModelInfo";
  }
  protected:
  explicit ServiceModelInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRanFunctionsFieldNumber = 3,
    kRanFunctionIDsFieldNumber = 4,
    kOidFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // repeated .google.protobuf.Any ran_functions = 3;
  int ran_functions_size() const;
  private:
  int _internal_ran_functions_size() const;
  public:
  void clear_ran_functions();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_ran_functions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >*
      mutable_ran_functions();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_ran_functions(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_add_ran_functions();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Any& ran_functions(int index) const;
  ::PROTOBUF_NAMESPACE_ID::Any* add_ran_functions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >&
      ran_functions() const;

  // repeated uint32 ranFunctionIDs = 4;
  int ranfunctionids_size() const;
  private:
  int _internal_ranfunctionids_size() const;
  public:
  void clear_ranfunctionids();
  private:
  uint32_t _internal_ranfunctionids(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      _internal_ranfunctionids() const;
  void _internal_add_ranfunctionids(uint32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      _internal_mutable_ranfunctionids();
  public:
  uint32_t ranfunctionids(int index) const;
  void set_ranfunctionids(int index, uint32_t value);
  void add_ranfunctionids(uint32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
      ranfunctionids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
      mutable_ranfunctionids();

  // string oid = 1 [(.gogoproto.customname) = "OID"];
  void clear_oid();
  const std::string& oid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_oid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_oid();
  PROTOBUF_NODISCARD std::string* release_oid();
  void set_allocated_oid(std::string* oid);
  private:
  const std::string& _internal_oid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_oid(const std::string& value);
  std::string* _internal_mutable_oid();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:onos.topo.ServiceModelInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any > ran_functions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t > ranfunctionids_;
  mutable std::atomic<int> _ranfunctionids_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class RCRanFunction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.RCRanFunction) */ {
 public:
  inline RCRanFunction() : RCRanFunction(nullptr) {}
  ~RCRanFunction() override;
  explicit constexpr RCRanFunction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RCRanFunction(const RCRanFunction& from);
  RCRanFunction(RCRanFunction&& from) noexcept
    : RCRanFunction() {
    *this = ::std::move(from);
  }

  inline RCRanFunction& operator=(const RCRanFunction& from) {
    CopyFrom(from);
    return *this;
  }
  inline RCRanFunction& operator=(RCRanFunction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RCRanFunction& default_instance() {
    return *internal_default_instance();
  }
  static inline const RCRanFunction* internal_default_instance() {
    return reinterpret_cast<const RCRanFunction*>(
               &_RCRanFunction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(RCRanFunction& a, RCRanFunction& b) {
    a.Swap(&b);
  }
  inline void Swap(RCRanFunction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RCRanFunction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RCRanFunction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RCRanFunction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RCRanFunction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RCRanFunction& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RCRanFunction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.RCRanFunction";
  }
  protected:
  explicit RCRanFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReportStylesFieldNumber = 2,
    kInsertStylesFieldNumber = 3,
    kEventTriggerStylesFieldNumber = 4,
    kPolicyStylesFieldNumber = 5,
    kControlStylesFieldNumber = 6,
    kIdFieldNumber = 1,
  };
  // repeated .onos.topo.RCReportStyle report_styles = 2;
  int report_styles_size() const;
  private:
  int _internal_report_styles_size() const;
  public:
  void clear_report_styles();
  ::onos::topo::RCReportStyle* mutable_report_styles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RCReportStyle >*
      mutable_report_styles();
  private:
  const ::onos::topo::RCReportStyle& _internal_report_styles(int index) const;
  ::onos::topo::RCReportStyle* _internal_add_report_styles();
  public:
  const ::onos::topo::RCReportStyle& report_styles(int index) const;
  ::onos::topo::RCReportStyle* add_report_styles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RCReportStyle >&
      report_styles() const;

  // repeated .onos.topo.RCInsertStyle insert_styles = 3;
  int insert_styles_size() const;
  private:
  int _internal_insert_styles_size() const;
  public:
  void clear_insert_styles();
  ::onos::topo::RCInsertStyle* mutable_insert_styles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RCInsertStyle >*
      mutable_insert_styles();
  private:
  const ::onos::topo::RCInsertStyle& _internal_insert_styles(int index) const;
  ::onos::topo::RCInsertStyle* _internal_add_insert_styles();
  public:
  const ::onos::topo::RCInsertStyle& insert_styles(int index) const;
  ::onos::topo::RCInsertStyle* add_insert_styles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RCInsertStyle >&
      insert_styles() const;

  // repeated .onos.topo.RCEventTriggerStyle event_trigger_styles = 4;
  int event_trigger_styles_size() const;
  private:
  int _internal_event_trigger_styles_size() const;
  public:
  void clear_event_trigger_styles();
  ::onos::topo::RCEventTriggerStyle* mutable_event_trigger_styles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RCEventTriggerStyle >*
      mutable_event_trigger_styles();
  private:
  const ::onos::topo::RCEventTriggerStyle& _internal_event_trigger_styles(int index) const;
  ::onos::topo::RCEventTriggerStyle* _internal_add_event_trigger_styles();
  public:
  const ::onos::topo::RCEventTriggerStyle& event_trigger_styles(int index) const;
  ::onos::topo::RCEventTriggerStyle* add_event_trigger_styles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RCEventTriggerStyle >&
      event_trigger_styles() const;

  // repeated .onos.topo.RCPolicyStyle policy_styles = 5;
  int policy_styles_size() const;
  private:
  int _internal_policy_styles_size() const;
  public:
  void clear_policy_styles();
  ::onos::topo::RCPolicyStyle* mutable_policy_styles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RCPolicyStyle >*
      mutable_policy_styles();
  private:
  const ::onos::topo::RCPolicyStyle& _internal_policy_styles(int index) const;
  ::onos::topo::RCPolicyStyle* _internal_add_policy_styles();
  public:
  const ::onos::topo::RCPolicyStyle& policy_styles(int index) const;
  ::onos::topo::RCPolicyStyle* add_policy_styles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RCPolicyStyle >&
      policy_styles() const;

  // repeated .onos.topo.RCControlStyle control_styles = 6;
  int control_styles_size() const;
  private:
  int _internal_control_styles_size() const;
  public:
  void clear_control_styles();
  ::onos::topo::RCControlStyle* mutable_control_styles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RCControlStyle >*
      mutable_control_styles();
  private:
  const ::onos::topo::RCControlStyle& _internal_control_styles(int index) const;
  ::onos::topo::RCControlStyle* _internal_add_control_styles();
  public:
  const ::onos::topo::RCControlStyle& control_styles(int index) const;
  ::onos::topo::RCControlStyle* add_control_styles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RCControlStyle >&
      control_styles() const;

  // string id = 1 [(.gogoproto.customname) = "ID"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:onos.topo.RCRanFunction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RCReportStyle > report_styles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RCInsertStyle > insert_styles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RCEventTriggerStyle > event_trigger_styles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RCPolicyStyle > policy_styles_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RCControlStyle > control_styles_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class MHORanFunction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.MHORanFunction) */ {
 public:
  inline MHORanFunction() : MHORanFunction(nullptr) {}
  ~MHORanFunction() override;
  explicit constexpr MHORanFunction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MHORanFunction(const MHORanFunction& from);
  MHORanFunction(MHORanFunction&& from) noexcept
    : MHORanFunction() {
    *this = ::std::move(from);
  }

  inline MHORanFunction& operator=(const MHORanFunction& from) {
    CopyFrom(from);
    return *this;
  }
  inline MHORanFunction& operator=(MHORanFunction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MHORanFunction& default_instance() {
    return *internal_default_instance();
  }
  static inline const MHORanFunction* internal_default_instance() {
    return reinterpret_cast<const MHORanFunction*>(
               &_MHORanFunction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(MHORanFunction& a, MHORanFunction& b) {
    a.Swap(&b);
  }
  inline void Swap(MHORanFunction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MHORanFunction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MHORanFunction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MHORanFunction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MHORanFunction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MHORanFunction& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MHORanFunction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.MHORanFunction";
  }
  protected:
  explicit MHORanFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReportStylesFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated .onos.topo.MHOReportStyle report_styles = 2;
  int report_styles_size() const;
  private:
  int _internal_report_styles_size() const;
  public:
  void clear_report_styles();
  ::onos::topo::MHOReportStyle* mutable_report_styles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::MHOReportStyle >*
      mutable_report_styles();
  private:
  const ::onos::topo::MHOReportStyle& _internal_report_styles(int index) const;
  ::onos::topo::MHOReportStyle* _internal_add_report_styles();
  public:
  const ::onos::topo::MHOReportStyle& report_styles(int index) const;
  ::onos::topo::MHOReportStyle* add_report_styles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::MHOReportStyle >&
      report_styles() const;

  // string id = 1 [(.gogoproto.customname) = "ID"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:onos.topo.MHORanFunction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::MHOReportStyle > report_styles_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class KPMRanFunction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.KPMRanFunction) */ {
 public:
  inline KPMRanFunction() : KPMRanFunction(nullptr) {}
  ~KPMRanFunction() override;
  explicit constexpr KPMRanFunction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KPMRanFunction(const KPMRanFunction& from);
  KPMRanFunction(KPMRanFunction&& from) noexcept
    : KPMRanFunction() {
    *this = ::std::move(from);
  }

  inline KPMRanFunction& operator=(const KPMRanFunction& from) {
    CopyFrom(from);
    return *this;
  }
  inline KPMRanFunction& operator=(KPMRanFunction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KPMRanFunction& default_instance() {
    return *internal_default_instance();
  }
  static inline const KPMRanFunction* internal_default_instance() {
    return reinterpret_cast<const KPMRanFunction*>(
               &_KPMRanFunction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(KPMRanFunction& a, KPMRanFunction& b) {
    a.Swap(&b);
  }
  inline void Swap(KPMRanFunction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KPMRanFunction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KPMRanFunction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KPMRanFunction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KPMRanFunction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const KPMRanFunction& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KPMRanFunction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.KPMRanFunction";
  }
  protected:
  explicit KPMRanFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReportStylesFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated .onos.topo.KPMReportStyle report_styles = 2;
  int report_styles_size() const;
  private:
  int _internal_report_styles_size() const;
  public:
  void clear_report_styles();
  ::onos::topo::KPMReportStyle* mutable_report_styles(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::KPMReportStyle >*
      mutable_report_styles();
  private:
  const ::onos::topo::KPMReportStyle& _internal_report_styles(int index) const;
  ::onos::topo::KPMReportStyle* _internal_add_report_styles();
  public:
  const ::onos::topo::KPMReportStyle& report_styles(int index) const;
  ::onos::topo::KPMReportStyle* add_report_styles();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::KPMReportStyle >&
      report_styles() const;

  // string id = 1 [(.gogoproto.customname) = "ID"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:onos.topo.KPMRanFunction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::KPMReportStyle > report_styles_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class RSMRanFunction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.RSMRanFunction) */ {
 public:
  inline RSMRanFunction() : RSMRanFunction(nullptr) {}
  ~RSMRanFunction() override;
  explicit constexpr RSMRanFunction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RSMRanFunction(const RSMRanFunction& from);
  RSMRanFunction(RSMRanFunction&& from) noexcept
    : RSMRanFunction() {
    *this = ::std::move(from);
  }

  inline RSMRanFunction& operator=(const RSMRanFunction& from) {
    CopyFrom(from);
    return *this;
  }
  inline RSMRanFunction& operator=(RSMRanFunction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RSMRanFunction& default_instance() {
    return *internal_default_instance();
  }
  static inline const RSMRanFunction* internal_default_instance() {
    return reinterpret_cast<const RSMRanFunction*>(
               &_RSMRanFunction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(RSMRanFunction& a, RSMRanFunction& b) {
    a.Swap(&b);
  }
  inline void Swap(RSMRanFunction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RSMRanFunction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RSMRanFunction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RSMRanFunction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RSMRanFunction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RSMRanFunction& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RSMRanFunction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.RSMRanFunction";
  }
  protected:
  explicit RSMRanFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRicSlicingNodeCapabilityListFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated .onos.topo.RSMNodeSlicingCapabilityItem ric_slicing_node_capability_list = 2;
  int ric_slicing_node_capability_list_size() const;
  private:
  int _internal_ric_slicing_node_capability_list_size() const;
  public:
  void clear_ric_slicing_node_capability_list();
  ::onos::topo::RSMNodeSlicingCapabilityItem* mutable_ric_slicing_node_capability_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RSMNodeSlicingCapabilityItem >*
      mutable_ric_slicing_node_capability_list();
  private:
  const ::onos::topo::RSMNodeSlicingCapabilityItem& _internal_ric_slicing_node_capability_list(int index) const;
  ::onos::topo::RSMNodeSlicingCapabilityItem* _internal_add_ric_slicing_node_capability_list();
  public:
  const ::onos::topo::RSMNodeSlicingCapabilityItem& ric_slicing_node_capability_list(int index) const;
  ::onos::topo::RSMNodeSlicingCapabilityItem* add_ric_slicing_node_capability_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RSMNodeSlicingCapabilityItem >&
      ric_slicing_node_capability_list() const;

  // string id = 1 [(.gogoproto.customname) = "ID"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:onos.topo.RSMRanFunction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RSMNodeSlicingCapabilityItem > ric_slicing_node_capability_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class RCEventTriggerStyle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.RCEventTriggerStyle) */ {
 public:
  inline RCEventTriggerStyle() : RCEventTriggerStyle(nullptr) {}
  ~RCEventTriggerStyle() override;
  explicit constexpr RCEventTriggerStyle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RCEventTriggerStyle(const RCEventTriggerStyle& from);
  RCEventTriggerStyle(RCEventTriggerStyle&& from) noexcept
    : RCEventTriggerStyle() {
    *this = ::std::move(from);
  }

  inline RCEventTriggerStyle& operator=(const RCEventTriggerStyle& from) {
    CopyFrom(from);
    return *this;
  }
  inline RCEventTriggerStyle& operator=(RCEventTriggerStyle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RCEventTriggerStyle& default_instance() {
    return *internal_default_instance();
  }
  static inline const RCEventTriggerStyle* internal_default_instance() {
    return reinterpret_cast<const RCEventTriggerStyle*>(
               &_RCEventTriggerStyle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(RCEventTriggerStyle& a, RCEventTriggerStyle& b) {
    a.Swap(&b);
  }
  inline void Swap(RCEventTriggerStyle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RCEventTriggerStyle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RCEventTriggerStyle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RCEventTriggerStyle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RCEventTriggerStyle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RCEventTriggerStyle& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RCEventTriggerStyle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.RCEventTriggerStyle";
  }
  protected:
  explicit RCEventTriggerStyle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
    kFormatTypeFieldNumber = 3,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 type = 2;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // int32 format_type = 3;
  void clear_format_type();
  int32_t format_type() const;
  void set_format_type(int32_t value);
  private:
  int32_t _internal_format_type() const;
  void _internal_set_format_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.topo.RCEventTriggerStyle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int32_t type_;
  int32_t format_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class RCReportStyle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.RCReportStyle) */ {
 public:
  inline RCReportStyle() : RCReportStyle(nullptr) {}
  ~RCReportStyle() override;
  explicit constexpr RCReportStyle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RCReportStyle(const RCReportStyle& from);
  RCReportStyle(RCReportStyle&& from) noexcept
    : RCReportStyle() {
    *this = ::std::move(from);
  }

  inline RCReportStyle& operator=(const RCReportStyle& from) {
    CopyFrom(from);
    return *this;
  }
  inline RCReportStyle& operator=(RCReportStyle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RCReportStyle& default_instance() {
    return *internal_default_instance();
  }
  static inline const RCReportStyle* internal_default_instance() {
    return reinterpret_cast<const RCReportStyle*>(
               &_RCReportStyle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(RCReportStyle& a, RCReportStyle& b) {
    a.Swap(&b);
  }
  inline void Swap(RCReportStyle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RCReportStyle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RCReportStyle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RCReportStyle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RCReportStyle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RCReportStyle& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RCReportStyle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.RCReportStyle";
  }
  protected:
  explicit RCReportStyle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRanParametersFieldNumber = 3,
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // repeated .onos.topo.RANParameter ran_parameters = 3;
  int ran_parameters_size() const;
  private:
  int _internal_ran_parameters_size() const;
  public:
  void clear_ran_parameters();
  ::onos::topo::RANParameter* mutable_ran_parameters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RANParameter >*
      mutable_ran_parameters();
  private:
  const ::onos::topo::RANParameter& _internal_ran_parameters(int index) const;
  ::onos::topo::RANParameter* _internal_add_ran_parameters();
  public:
  const ::onos::topo::RANParameter& ran_parameters(int index) const;
  ::onos::topo::RANParameter* add_ran_parameters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RANParameter >&
      ran_parameters() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 type = 2;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.topo.RCReportStyle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RANParameter > ran_parameters_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int32_t type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class RCInsertStyle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.RCInsertStyle) */ {
 public:
  inline RCInsertStyle() : RCInsertStyle(nullptr) {}
  ~RCInsertStyle() override;
  explicit constexpr RCInsertStyle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RCInsertStyle(const RCInsertStyle& from);
  RCInsertStyle(RCInsertStyle&& from) noexcept
    : RCInsertStyle() {
    *this = ::std::move(from);
  }

  inline RCInsertStyle& operator=(const RCInsertStyle& from) {
    CopyFrom(from);
    return *this;
  }
  inline RCInsertStyle& operator=(RCInsertStyle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RCInsertStyle& default_instance() {
    return *internal_default_instance();
  }
  static inline const RCInsertStyle* internal_default_instance() {
    return reinterpret_cast<const RCInsertStyle*>(
               &_RCInsertStyle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(RCInsertStyle& a, RCInsertStyle& b) {
    a.Swap(&b);
  }
  inline void Swap(RCInsertStyle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RCInsertStyle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RCInsertStyle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RCInsertStyle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RCInsertStyle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RCInsertStyle& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RCInsertStyle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.RCInsertStyle";
  }
  protected:
  explicit RCInsertStyle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInsertIndicationsFieldNumber = 3,
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // repeated .onos.topo.InsertIndication insert_indications = 3;
  int insert_indications_size() const;
  private:
  int _internal_insert_indications_size() const;
  public:
  void clear_insert_indications();
  ::onos::topo::InsertIndication* mutable_insert_indications(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::InsertIndication >*
      mutable_insert_indications();
  private:
  const ::onos::topo::InsertIndication& _internal_insert_indications(int index) const;
  ::onos::topo::InsertIndication* _internal_add_insert_indications();
  public:
  const ::onos::topo::InsertIndication& insert_indications(int index) const;
  ::onos::topo::InsertIndication* add_insert_indications();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::InsertIndication >&
      insert_indications() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 type = 2;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.topo.RCInsertStyle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::InsertIndication > insert_indications_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int32_t type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class RCPolicyStyle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.RCPolicyStyle) */ {
 public:
  inline RCPolicyStyle() : RCPolicyStyle(nullptr) {}
  ~RCPolicyStyle() override;
  explicit constexpr RCPolicyStyle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RCPolicyStyle(const RCPolicyStyle& from);
  RCPolicyStyle(RCPolicyStyle&& from) noexcept
    : RCPolicyStyle() {
    *this = ::std::move(from);
  }

  inline RCPolicyStyle& operator=(const RCPolicyStyle& from) {
    CopyFrom(from);
    return *this;
  }
  inline RCPolicyStyle& operator=(RCPolicyStyle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RCPolicyStyle& default_instance() {
    return *internal_default_instance();
  }
  static inline const RCPolicyStyle* internal_default_instance() {
    return reinterpret_cast<const RCPolicyStyle*>(
               &_RCPolicyStyle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(RCPolicyStyle& a, RCPolicyStyle& b) {
    a.Swap(&b);
  }
  inline void Swap(RCPolicyStyle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RCPolicyStyle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RCPolicyStyle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RCPolicyStyle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RCPolicyStyle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RCPolicyStyle& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RCPolicyStyle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.RCPolicyStyle";
  }
  protected:
  explicit RCPolicyStyle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 type = 2;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.topo.RCPolicyStyle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int32_t type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class RCControlStyle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.RCControlStyle) */ {
 public:
  inline RCControlStyle() : RCControlStyle(nullptr) {}
  ~RCControlStyle() override;
  explicit constexpr RCControlStyle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RCControlStyle(const RCControlStyle& from);
  RCControlStyle(RCControlStyle&& from) noexcept
    : RCControlStyle() {
    *this = ::std::move(from);
  }

  inline RCControlStyle& operator=(const RCControlStyle& from) {
    CopyFrom(from);
    return *this;
  }
  inline RCControlStyle& operator=(RCControlStyle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RCControlStyle& default_instance() {
    return *internal_default_instance();
  }
  static inline const RCControlStyle* internal_default_instance() {
    return reinterpret_cast<const RCControlStyle*>(
               &_RCControlStyle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(RCControlStyle& a, RCControlStyle& b) {
    a.Swap(&b);
  }
  inline void Swap(RCControlStyle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RCControlStyle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RCControlStyle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RCControlStyle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RCControlStyle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RCControlStyle& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RCControlStyle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.RCControlStyle";
  }
  protected:
  explicit RCControlStyle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kControlActionsFieldNumber = 6,
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
    kHeaderFormatTypeFieldNumber = 3,
    kMessageFormatTypeFieldNumber = 4,
    kControlOutcomeFormatTypeFieldNumber = 5,
  };
  // repeated .onos.topo.ControlAction control_actions = 6;
  int control_actions_size() const;
  private:
  int _internal_control_actions_size() const;
  public:
  void clear_control_actions();
  ::onos::topo::ControlAction* mutable_control_actions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::ControlAction >*
      mutable_control_actions();
  private:
  const ::onos::topo::ControlAction& _internal_control_actions(int index) const;
  ::onos::topo::ControlAction* _internal_add_control_actions();
  public:
  const ::onos::topo::ControlAction& control_actions(int index) const;
  ::onos::topo::ControlAction* add_control_actions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::ControlAction >&
      control_actions() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 type = 2;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // int32 header_format_type = 3;
  void clear_header_format_type();
  int32_t header_format_type() const;
  void set_header_format_type(int32_t value);
  private:
  int32_t _internal_header_format_type() const;
  void _internal_set_header_format_type(int32_t value);
  public:

  // int32 message_format_type = 4;
  void clear_message_format_type();
  int32_t message_format_type() const;
  void set_message_format_type(int32_t value);
  private:
  int32_t _internal_message_format_type() const;
  void _internal_set_message_format_type(int32_t value);
  public:

  // int32 control_outcome_format_type = 5;
  void clear_control_outcome_format_type();
  int32_t control_outcome_format_type() const;
  void set_control_outcome_format_type(int32_t value);
  private:
  int32_t _internal_control_outcome_format_type() const;
  void _internal_set_control_outcome_format_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.topo.RCControlStyle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::ControlAction > control_actions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int32_t type_;
  int32_t header_format_type_;
  int32_t message_format_type_;
  int32_t control_outcome_format_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class ControlAction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.ControlAction) */ {
 public:
  inline ControlAction() : ControlAction(nullptr) {}
  ~ControlAction() override;
  explicit constexpr ControlAction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlAction(const ControlAction& from);
  ControlAction(ControlAction&& from) noexcept
    : ControlAction() {
    *this = ::std::move(from);
  }

  inline ControlAction& operator=(const ControlAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlAction& operator=(ControlAction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlAction& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlAction* internal_default_instance() {
    return reinterpret_cast<const ControlAction*>(
               &_ControlAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(ControlAction& a, ControlAction& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlAction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlAction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlAction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlAction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ControlAction& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlAction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.ControlAction";
  }
  protected:
  explicit ControlAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRanParametersFieldNumber = 3,
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated .onos.topo.RANParameter ran_parameters = 3;
  int ran_parameters_size() const;
  private:
  int _internal_ran_parameters_size() const;
  public:
  void clear_ran_parameters();
  ::onos::topo::RANParameter* mutable_ran_parameters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RANParameter >*
      mutable_ran_parameters();
  private:
  const ::onos::topo::RANParameter& _internal_ran_parameters(int index) const;
  ::onos::topo::RANParameter* _internal_add_ran_parameters();
  public:
  const ::onos::topo::RANParameter& ran_parameters(int index) const;
  ::onos::topo::RANParameter* add_ran_parameters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RANParameter >&
      ran_parameters() const;

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 id = 1 [(.gogoproto.customname) = "ID"];
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.topo.ControlAction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RANParameter > ran_parameters_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int32_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class InsertIndication final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.InsertIndication) */ {
 public:
  inline InsertIndication() : InsertIndication(nullptr) {}
  ~InsertIndication() override;
  explicit constexpr InsertIndication(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InsertIndication(const InsertIndication& from);
  InsertIndication(InsertIndication&& from) noexcept
    : InsertIndication() {
    *this = ::std::move(from);
  }

  inline InsertIndication& operator=(const InsertIndication& from) {
    CopyFrom(from);
    return *this;
  }
  inline InsertIndication& operator=(InsertIndication&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InsertIndication& default_instance() {
    return *internal_default_instance();
  }
  static inline const InsertIndication* internal_default_instance() {
    return reinterpret_cast<const InsertIndication*>(
               &_InsertIndication_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(InsertIndication& a, InsertIndication& b) {
    a.Swap(&b);
  }
  inline void Swap(InsertIndication* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InsertIndication* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InsertIndication* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InsertIndication>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InsertIndication& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const InsertIndication& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsertIndication* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.InsertIndication";
  }
  protected:
  explicit InsertIndication(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRanParametersFieldNumber = 3,
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // repeated .onos.topo.RANParameter ran_parameters = 3;
  int ran_parameters_size() const;
  private:
  int _internal_ran_parameters_size() const;
  public:
  void clear_ran_parameters();
  ::onos::topo::RANParameter* mutable_ran_parameters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RANParameter >*
      mutable_ran_parameters();
  private:
  const ::onos::topo::RANParameter& _internal_ran_parameters(int index) const;
  ::onos::topo::RANParameter* _internal_add_ran_parameters();
  public:
  const ::onos::topo::RANParameter& ran_parameters(int index) const;
  ::onos::topo::RANParameter* add_ran_parameters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RANParameter >&
      ran_parameters() const;

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 id = 1 [(.gogoproto.customname) = "ID"];
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.topo.InsertIndication)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RANParameter > ran_parameters_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int32_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class RANParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.RANParameter) */ {
 public:
  inline RANParameter() : RANParameter(nullptr) {}
  ~RANParameter() override;
  explicit constexpr RANParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RANParameter(const RANParameter& from);
  RANParameter(RANParameter&& from) noexcept
    : RANParameter() {
    *this = ::std::move(from);
  }

  inline RANParameter& operator=(const RANParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline RANParameter& operator=(RANParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RANParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const RANParameter* internal_default_instance() {
    return reinterpret_cast<const RANParameter*>(
               &_RANParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(RANParameter& a, RANParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(RANParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RANParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RANParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RANParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RANParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RANParameter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RANParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.RANParameter";
  }
  protected:
  explicit RANParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 id = 1 [(.gogoproto.customname) = "ID"];
  void clear_id();
  int32_t id() const;
  void set_id(int32_t value);
  private:
  int32_t _internal_id() const;
  void _internal_set_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.topo.RANParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int32_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class KPMReportStyle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.KPMReportStyle) */ {
 public:
  inline KPMReportStyle() : KPMReportStyle(nullptr) {}
  ~KPMReportStyle() override;
  explicit constexpr KPMReportStyle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KPMReportStyle(const KPMReportStyle& from);
  KPMReportStyle(KPMReportStyle&& from) noexcept
    : KPMReportStyle() {
    *this = ::std::move(from);
  }

  inline KPMReportStyle& operator=(const KPMReportStyle& from) {
    CopyFrom(from);
    return *this;
  }
  inline KPMReportStyle& operator=(KPMReportStyle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KPMReportStyle& default_instance() {
    return *internal_default_instance();
  }
  static inline const KPMReportStyle* internal_default_instance() {
    return reinterpret_cast<const KPMReportStyle*>(
               &_KPMReportStyle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(KPMReportStyle& a, KPMReportStyle& b) {
    a.Swap(&b);
  }
  inline void Swap(KPMReportStyle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KPMReportStyle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KPMReportStyle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KPMReportStyle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KPMReportStyle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const KPMReportStyle& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KPMReportStyle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.KPMReportStyle";
  }
  protected:
  explicit KPMReportStyle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMeasurementsFieldNumber = 3,
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // repeated .onos.topo.KPMMeasurement measurements = 3;
  int measurements_size() const;
  private:
  int _internal_measurements_size() const;
  public:
  void clear_measurements();
  ::onos::topo::KPMMeasurement* mutable_measurements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::KPMMeasurement >*
      mutable_measurements();
  private:
  const ::onos::topo::KPMMeasurement& _internal_measurements(int index) const;
  ::onos::topo::KPMMeasurement* _internal_add_measurements();
  public:
  const ::onos::topo::KPMMeasurement& measurements(int index) const;
  ::onos::topo::KPMMeasurement* add_measurements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::KPMMeasurement >&
      measurements() const;

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 type = 2;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.topo.KPMReportStyle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::KPMMeasurement > measurements_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int32_t type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class MHOReportStyle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.MHOReportStyle) */ {
 public:
  inline MHOReportStyle() : MHOReportStyle(nullptr) {}
  ~MHOReportStyle() override;
  explicit constexpr MHOReportStyle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MHOReportStyle(const MHOReportStyle& from);
  MHOReportStyle(MHOReportStyle&& from) noexcept
    : MHOReportStyle() {
    *this = ::std::move(from);
  }

  inline MHOReportStyle& operator=(const MHOReportStyle& from) {
    CopyFrom(from);
    return *this;
  }
  inline MHOReportStyle& operator=(MHOReportStyle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MHOReportStyle& default_instance() {
    return *internal_default_instance();
  }
  static inline const MHOReportStyle* internal_default_instance() {
    return reinterpret_cast<const MHOReportStyle*>(
               &_MHOReportStyle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(MHOReportStyle& a, MHOReportStyle& b) {
    a.Swap(&b);
  }
  inline void Swap(MHOReportStyle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MHOReportStyle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MHOReportStyle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MHOReportStyle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MHOReportStyle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MHOReportStyle& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MHOReportStyle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.MHOReportStyle";
  }
  protected:
  explicit MHOReportStyle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 type = 2;
  void clear_type();
  int32_t type() const;
  void set_type(int32_t value);
  private:
  int32_t _internal_type() const;
  void _internal_set_type(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.topo.MHOReportStyle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int32_t type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class KPMMeasurement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.KPMMeasurement) */ {
 public:
  inline KPMMeasurement() : KPMMeasurement(nullptr) {}
  ~KPMMeasurement() override;
  explicit constexpr KPMMeasurement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  KPMMeasurement(const KPMMeasurement& from);
  KPMMeasurement(KPMMeasurement&& from) noexcept
    : KPMMeasurement() {
    *this = ::std::move(from);
  }

  inline KPMMeasurement& operator=(const KPMMeasurement& from) {
    CopyFrom(from);
    return *this;
  }
  inline KPMMeasurement& operator=(KPMMeasurement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const KPMMeasurement& default_instance() {
    return *internal_default_instance();
  }
  static inline const KPMMeasurement* internal_default_instance() {
    return reinterpret_cast<const KPMMeasurement*>(
               &_KPMMeasurement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(KPMMeasurement& a, KPMMeasurement& b) {
    a.Swap(&b);
  }
  inline void Swap(KPMMeasurement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(KPMMeasurement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  KPMMeasurement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<KPMMeasurement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const KPMMeasurement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const KPMMeasurement& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KPMMeasurement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.KPMMeasurement";
  }
  protected:
  explicit KPMMeasurement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // string id = 1 [(.gogoproto.customname) = "ID"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:onos.topo.KPMMeasurement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class RSMNodeSlicingCapabilityItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.RSMNodeSlicingCapabilityItem) */ {
 public:
  inline RSMNodeSlicingCapabilityItem() : RSMNodeSlicingCapabilityItem(nullptr) {}
  ~RSMNodeSlicingCapabilityItem() override;
  explicit constexpr RSMNodeSlicingCapabilityItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RSMNodeSlicingCapabilityItem(const RSMNodeSlicingCapabilityItem& from);
  RSMNodeSlicingCapabilityItem(RSMNodeSlicingCapabilityItem&& from) noexcept
    : RSMNodeSlicingCapabilityItem() {
    *this = ::std::move(from);
  }

  inline RSMNodeSlicingCapabilityItem& operator=(const RSMNodeSlicingCapabilityItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline RSMNodeSlicingCapabilityItem& operator=(RSMNodeSlicingCapabilityItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RSMNodeSlicingCapabilityItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const RSMNodeSlicingCapabilityItem* internal_default_instance() {
    return reinterpret_cast<const RSMNodeSlicingCapabilityItem*>(
               &_RSMNodeSlicingCapabilityItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(RSMNodeSlicingCapabilityItem& a, RSMNodeSlicingCapabilityItem& b) {
    a.Swap(&b);
  }
  inline void Swap(RSMNodeSlicingCapabilityItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RSMNodeSlicingCapabilityItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RSMNodeSlicingCapabilityItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RSMNodeSlicingCapabilityItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RSMNodeSlicingCapabilityItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RSMNodeSlicingCapabilityItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RSMNodeSlicingCapabilityItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.RSMNodeSlicingCapabilityItem";
  }
  protected:
  explicit RSMNodeSlicingCapabilityItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSupportedConfigFieldNumber = 5,
    kMaxNumberOfSlicesDlFieldNumber = 1,
    kMaxNumberOfSlicesUlFieldNumber = 2,
    kSlicingTypeFieldNumber = 3,
    kMaxNumberOfUesPerSliceFieldNumber = 4,
  };
  // repeated .onos.topo.RSMSupportedSlicingConfigItem supported_config = 5;
  int supported_config_size() const;
  private:
  int _internal_supported_config_size() const;
  public:
  void clear_supported_config();
  ::onos::topo::RSMSupportedSlicingConfigItem* mutable_supported_config(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RSMSupportedSlicingConfigItem >*
      mutable_supported_config();
  private:
  const ::onos::topo::RSMSupportedSlicingConfigItem& _internal_supported_config(int index) const;
  ::onos::topo::RSMSupportedSlicingConfigItem* _internal_add_supported_config();
  public:
  const ::onos::topo::RSMSupportedSlicingConfigItem& supported_config(int index) const;
  ::onos::topo::RSMSupportedSlicingConfigItem* add_supported_config();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RSMSupportedSlicingConfigItem >&
      supported_config() const;

  // int32 max_number_of_slices_dl = 1;
  void clear_max_number_of_slices_dl();
  int32_t max_number_of_slices_dl() const;
  void set_max_number_of_slices_dl(int32_t value);
  private:
  int32_t _internal_max_number_of_slices_dl() const;
  void _internal_set_max_number_of_slices_dl(int32_t value);
  public:

  // int32 max_number_of_slices_ul = 2;
  void clear_max_number_of_slices_ul();
  int32_t max_number_of_slices_ul() const;
  void set_max_number_of_slices_ul(int32_t value);
  private:
  int32_t _internal_max_number_of_slices_ul() const;
  void _internal_set_max_number_of_slices_ul(int32_t value);
  public:

  // .onos.topo.RSMSlicingType slicing_type = 3;
  void clear_slicing_type();
  ::onos::topo::RSMSlicingType slicing_type() const;
  void set_slicing_type(::onos::topo::RSMSlicingType value);
  private:
  ::onos::topo::RSMSlicingType _internal_slicing_type() const;
  void _internal_set_slicing_type(::onos::topo::RSMSlicingType value);
  public:

  // int32 max_number_of_ues_per_slice = 4;
  void clear_max_number_of_ues_per_slice();
  int32_t max_number_of_ues_per_slice() const;
  void set_max_number_of_ues_per_slice(int32_t value);
  private:
  int32_t _internal_max_number_of_ues_per_slice() const;
  void _internal_set_max_number_of_ues_per_slice(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.topo.RSMNodeSlicingCapabilityItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RSMSupportedSlicingConfigItem > supported_config_;
  int32_t max_number_of_slices_dl_;
  int32_t max_number_of_slices_ul_;
  int slicing_type_;
  int32_t max_number_of_ues_per_slice_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class RSMSupportedSlicingConfigItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.RSMSupportedSlicingConfigItem) */ {
 public:
  inline RSMSupportedSlicingConfigItem() : RSMSupportedSlicingConfigItem(nullptr) {}
  ~RSMSupportedSlicingConfigItem() override;
  explicit constexpr RSMSupportedSlicingConfigItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RSMSupportedSlicingConfigItem(const RSMSupportedSlicingConfigItem& from);
  RSMSupportedSlicingConfigItem(RSMSupportedSlicingConfigItem&& from) noexcept
    : RSMSupportedSlicingConfigItem() {
    *this = ::std::move(from);
  }

  inline RSMSupportedSlicingConfigItem& operator=(const RSMSupportedSlicingConfigItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline RSMSupportedSlicingConfigItem& operator=(RSMSupportedSlicingConfigItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RSMSupportedSlicingConfigItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const RSMSupportedSlicingConfigItem* internal_default_instance() {
    return reinterpret_cast<const RSMSupportedSlicingConfigItem*>(
               &_RSMSupportedSlicingConfigItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(RSMSupportedSlicingConfigItem& a, RSMSupportedSlicingConfigItem& b) {
    a.Swap(&b);
  }
  inline void Swap(RSMSupportedSlicingConfigItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RSMSupportedSlicingConfigItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RSMSupportedSlicingConfigItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RSMSupportedSlicingConfigItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RSMSupportedSlicingConfigItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RSMSupportedSlicingConfigItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RSMSupportedSlicingConfigItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.RSMSupportedSlicingConfigItem";
  }
  protected:
  explicit RSMSupportedSlicingConfigItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSlicingConfigTypeFieldNumber = 1,
  };
  // .onos.topo.E2SmRsmCommand slicing_config_type = 1;
  void clear_slicing_config_type();
  ::onos::topo::E2SmRsmCommand slicing_config_type() const;
  void set_slicing_config_type(::onos::topo::E2SmRsmCommand value);
  private:
  ::onos::topo::E2SmRsmCommand _internal_slicing_config_type() const;
  void _internal_set_slicing_config_type(::onos::topo::E2SmRsmCommand value);
  public:

  // @@protoc_insertion_point(class_scope:onos.topo.RSMSupportedSlicingConfigItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int slicing_config_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class RSMSliceItemList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.RSMSliceItemList) */ {
 public:
  inline RSMSliceItemList() : RSMSliceItemList(nullptr) {}
  ~RSMSliceItemList() override;
  explicit constexpr RSMSliceItemList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RSMSliceItemList(const RSMSliceItemList& from);
  RSMSliceItemList(RSMSliceItemList&& from) noexcept
    : RSMSliceItemList() {
    *this = ::std::move(from);
  }

  inline RSMSliceItemList& operator=(const RSMSliceItemList& from) {
    CopyFrom(from);
    return *this;
  }
  inline RSMSliceItemList& operator=(RSMSliceItemList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RSMSliceItemList& default_instance() {
    return *internal_default_instance();
  }
  static inline const RSMSliceItemList* internal_default_instance() {
    return reinterpret_cast<const RSMSliceItemList*>(
               &_RSMSliceItemList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(RSMSliceItemList& a, RSMSliceItemList& b) {
    a.Swap(&b);
  }
  inline void Swap(RSMSliceItemList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RSMSliceItemList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RSMSliceItemList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RSMSliceItemList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RSMSliceItemList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RSMSliceItemList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RSMSliceItemList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.RSMSliceItemList";
  }
  protected:
  explicit RSMSliceItemList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRsmSliceListFieldNumber = 1,
  };
  // repeated .onos.topo.RSMSlicingItem rsm_slice_list = 1;
  int rsm_slice_list_size() const;
  private:
  int _internal_rsm_slice_list_size() const;
  public:
  void clear_rsm_slice_list();
  ::onos::topo::RSMSlicingItem* mutable_rsm_slice_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RSMSlicingItem >*
      mutable_rsm_slice_list();
  private:
  const ::onos::topo::RSMSlicingItem& _internal_rsm_slice_list(int index) const;
  ::onos::topo::RSMSlicingItem* _internal_add_rsm_slice_list();
  public:
  const ::onos::topo::RSMSlicingItem& rsm_slice_list(int index) const;
  ::onos::topo::RSMSlicingItem* add_rsm_slice_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RSMSlicingItem >&
      rsm_slice_list() const;

  // @@protoc_insertion_point(class_scope:onos.topo.RSMSliceItemList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RSMSlicingItem > rsm_slice_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class RSMSlicingItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.RSMSlicingItem) */ {
 public:
  inline RSMSlicingItem() : RSMSlicingItem(nullptr) {}
  ~RSMSlicingItem() override;
  explicit constexpr RSMSlicingItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RSMSlicingItem(const RSMSlicingItem& from);
  RSMSlicingItem(RSMSlicingItem&& from) noexcept
    : RSMSlicingItem() {
    *this = ::std::move(from);
  }

  inline RSMSlicingItem& operator=(const RSMSlicingItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline RSMSlicingItem& operator=(RSMSlicingItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RSMSlicingItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const RSMSlicingItem* internal_default_instance() {
    return reinterpret_cast<const RSMSlicingItem*>(
               &_RSMSlicingItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(RSMSlicingItem& a, RSMSlicingItem& b) {
    a.Swap(&b);
  }
  inline void Swap(RSMSlicingItem* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RSMSlicingItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RSMSlicingItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RSMSlicingItem>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RSMSlicingItem& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RSMSlicingItem& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RSMSlicingItem* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.RSMSlicingItem";
  }
  protected:
  explicit RSMSlicingItem(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUeIdListFieldNumber = 5,
    kIdFieldNumber = 1,
    kSliceDescFieldNumber = 2,
    kSliceParametersFieldNumber = 3,
    kSliceTypeFieldNumber = 4,
  };
  // repeated .onos.topo.UeIdentity ue_id_list = 5;
  int ue_id_list_size() const;
  private:
  int _internal_ue_id_list_size() const;
  public:
  void clear_ue_id_list();
  ::onos::topo::UeIdentity* mutable_ue_id_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::UeIdentity >*
      mutable_ue_id_list();
  private:
  const ::onos::topo::UeIdentity& _internal_ue_id_list(int index) const;
  ::onos::topo::UeIdentity* _internal_add_ue_id_list();
  public:
  const ::onos::topo::UeIdentity& ue_id_list(int index) const;
  ::onos::topo::UeIdentity* add_ue_id_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::UeIdentity >&
      ue_id_list() const;

  // string id = 1 [(.gogoproto.customname) = "ID"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string slice_desc = 2;
  void clear_slice_desc();
  const std::string& slice_desc() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_slice_desc(ArgT0&& arg0, ArgT... args);
  std::string* mutable_slice_desc();
  PROTOBUF_NODISCARD std::string* release_slice_desc();
  void set_allocated_slice_desc(std::string* slice_desc);
  private:
  const std::string& _internal_slice_desc() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_slice_desc(const std::string& value);
  std::string* _internal_mutable_slice_desc();
  public:

  // .onos.topo.RSMSliceParameters slice_parameters = 3;
  bool has_slice_parameters() const;
  private:
  bool _internal_has_slice_parameters() const;
  public:
  void clear_slice_parameters();
  const ::onos::topo::RSMSliceParameters& slice_parameters() const;
  PROTOBUF_NODISCARD ::onos::topo::RSMSliceParameters* release_slice_parameters();
  ::onos::topo::RSMSliceParameters* mutable_slice_parameters();
  void set_allocated_slice_parameters(::onos::topo::RSMSliceParameters* slice_parameters);
  private:
  const ::onos::topo::RSMSliceParameters& _internal_slice_parameters() const;
  ::onos::topo::RSMSliceParameters* _internal_mutable_slice_parameters();
  public:
  void unsafe_arena_set_allocated_slice_parameters(
      ::onos::topo::RSMSliceParameters* slice_parameters);
  ::onos::topo::RSMSliceParameters* unsafe_arena_release_slice_parameters();

  // .onos.topo.RSMSliceType slice_type = 4;
  void clear_slice_type();
  ::onos::topo::RSMSliceType slice_type() const;
  void set_slice_type(::onos::topo::RSMSliceType value);
  private:
  ::onos::topo::RSMSliceType _internal_slice_type() const;
  void _internal_set_slice_type(::onos::topo::RSMSliceType value);
  public:

  // @@protoc_insertion_point(class_scope:onos.topo.RSMSlicingItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::UeIdentity > ue_id_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr slice_desc_;
  ::onos::topo::RSMSliceParameters* slice_parameters_;
  int slice_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class RSMSliceParameters final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.RSMSliceParameters) */ {
 public:
  inline RSMSliceParameters() : RSMSliceParameters(nullptr) {}
  ~RSMSliceParameters() override;
  explicit constexpr RSMSliceParameters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RSMSliceParameters(const RSMSliceParameters& from);
  RSMSliceParameters(RSMSliceParameters&& from) noexcept
    : RSMSliceParameters() {
    *this = ::std::move(from);
  }

  inline RSMSliceParameters& operator=(const RSMSliceParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline RSMSliceParameters& operator=(RSMSliceParameters&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RSMSliceParameters& default_instance() {
    return *internal_default_instance();
  }
  static inline const RSMSliceParameters* internal_default_instance() {
    return reinterpret_cast<const RSMSliceParameters*>(
               &_RSMSliceParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(RSMSliceParameters& a, RSMSliceParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(RSMSliceParameters* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RSMSliceParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RSMSliceParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RSMSliceParameters>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RSMSliceParameters& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RSMSliceParameters& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RSMSliceParameters* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.RSMSliceParameters";
  }
  protected:
  explicit RSMSliceParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSchedulerTypeFieldNumber = 1,
    kWeightFieldNumber = 2,
    kQosLevelFieldNumber = 3,
  };
  // .onos.topo.RSMSchedulerType scheduler_type = 1;
  void clear_scheduler_type();
  ::onos::topo::RSMSchedulerType scheduler_type() const;
  void set_scheduler_type(::onos::topo::RSMSchedulerType value);
  private:
  ::onos::topo::RSMSchedulerType _internal_scheduler_type() const;
  void _internal_set_scheduler_type(::onos::topo::RSMSchedulerType value);
  public:

  // int32 weight = 2;
  void clear_weight();
  int32_t weight() const;
  void set_weight(int32_t value);
  private:
  int32_t _internal_weight() const;
  void _internal_set_weight(int32_t value);
  public:

  // int32 qos_level = 3;
  void clear_qos_level();
  int32_t qos_level() const;
  void set_qos_level(int32_t value);
  private:
  int32_t _internal_qos_level() const;
  void _internal_set_qos_level(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.topo.RSMSliceParameters)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int scheduler_type_;
  int32_t weight_;
  int32_t qos_level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class DuUeF1apID final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.DuUeF1apID) */ {
 public:
  inline DuUeF1apID() : DuUeF1apID(nullptr) {}
  ~DuUeF1apID() override;
  explicit constexpr DuUeF1apID(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DuUeF1apID(const DuUeF1apID& from);
  DuUeF1apID(DuUeF1apID&& from) noexcept
    : DuUeF1apID() {
    *this = ::std::move(from);
  }

  inline DuUeF1apID& operator=(const DuUeF1apID& from) {
    CopyFrom(from);
    return *this;
  }
  inline DuUeF1apID& operator=(DuUeF1apID&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DuUeF1apID& default_instance() {
    return *internal_default_instance();
  }
  static inline const DuUeF1apID* internal_default_instance() {
    return reinterpret_cast<const DuUeF1apID*>(
               &_DuUeF1apID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(DuUeF1apID& a, DuUeF1apID& b) {
    a.Swap(&b);
  }
  inline void Swap(DuUeF1apID* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DuUeF1apID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DuUeF1apID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DuUeF1apID>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DuUeF1apID& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DuUeF1apID& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DuUeF1apID* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.DuUeF1apID";
  }
  protected:
  explicit DuUeF1apID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // int64 value = 1;
  void clear_value();
  int64_t value() const;
  void set_value(int64_t value);
  private:
  int64_t _internal_value() const;
  void _internal_set_value(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.topo.DuUeF1apID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class CuUeF1apID final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.CuUeF1apID) */ {
 public:
  inline CuUeF1apID() : CuUeF1apID(nullptr) {}
  ~CuUeF1apID() override;
  explicit constexpr CuUeF1apID(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CuUeF1apID(const CuUeF1apID& from);
  CuUeF1apID(CuUeF1apID&& from) noexcept
    : CuUeF1apID() {
    *this = ::std::move(from);
  }

  inline CuUeF1apID& operator=(const CuUeF1apID& from) {
    CopyFrom(from);
    return *this;
  }
  inline CuUeF1apID& operator=(CuUeF1apID&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CuUeF1apID& default_instance() {
    return *internal_default_instance();
  }
  static inline const CuUeF1apID* internal_default_instance() {
    return reinterpret_cast<const CuUeF1apID*>(
               &_CuUeF1apID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(CuUeF1apID& a, CuUeF1apID& b) {
    a.Swap(&b);
  }
  inline void Swap(CuUeF1apID* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CuUeF1apID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CuUeF1apID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CuUeF1apID>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CuUeF1apID& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CuUeF1apID& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CuUeF1apID* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.CuUeF1apID";
  }
  protected:
  explicit CuUeF1apID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // int64 value = 1;
  void clear_value();
  int64_t value() const;
  void set_value(int64_t value);
  private:
  int64_t _internal_value() const;
  void _internal_set_value(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.topo.CuUeF1apID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class RanUeNgapID final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.RanUeNgapID) */ {
 public:
  inline RanUeNgapID() : RanUeNgapID(nullptr) {}
  ~RanUeNgapID() override;
  explicit constexpr RanUeNgapID(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RanUeNgapID(const RanUeNgapID& from);
  RanUeNgapID(RanUeNgapID&& from) noexcept
    : RanUeNgapID() {
    *this = ::std::move(from);
  }

  inline RanUeNgapID& operator=(const RanUeNgapID& from) {
    CopyFrom(from);
    return *this;
  }
  inline RanUeNgapID& operator=(RanUeNgapID&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RanUeNgapID& default_instance() {
    return *internal_default_instance();
  }
  static inline const RanUeNgapID* internal_default_instance() {
    return reinterpret_cast<const RanUeNgapID*>(
               &_RanUeNgapID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(RanUeNgapID& a, RanUeNgapID& b) {
    a.Swap(&b);
  }
  inline void Swap(RanUeNgapID* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RanUeNgapID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RanUeNgapID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RanUeNgapID>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RanUeNgapID& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RanUeNgapID& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RanUeNgapID* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.RanUeNgapID";
  }
  protected:
  explicit RanUeNgapID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // int64 value = 1;
  void clear_value();
  int64_t value() const;
  void set_value(int64_t value);
  private:
  int64_t _internal_value() const;
  void _internal_set_value(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.topo.RanUeNgapID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class EnbUeS1apID final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.EnbUeS1apID) */ {
 public:
  inline EnbUeS1apID() : EnbUeS1apID(nullptr) {}
  ~EnbUeS1apID() override;
  explicit constexpr EnbUeS1apID(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  EnbUeS1apID(const EnbUeS1apID& from);
  EnbUeS1apID(EnbUeS1apID&& from) noexcept
    : EnbUeS1apID() {
    *this = ::std::move(from);
  }

  inline EnbUeS1apID& operator=(const EnbUeS1apID& from) {
    CopyFrom(from);
    return *this;
  }
  inline EnbUeS1apID& operator=(EnbUeS1apID&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const EnbUeS1apID& default_instance() {
    return *internal_default_instance();
  }
  static inline const EnbUeS1apID* internal_default_instance() {
    return reinterpret_cast<const EnbUeS1apID*>(
               &_EnbUeS1apID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(EnbUeS1apID& a, EnbUeS1apID& b) {
    a.Swap(&b);
  }
  inline void Swap(EnbUeS1apID* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(EnbUeS1apID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  EnbUeS1apID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<EnbUeS1apID>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const EnbUeS1apID& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const EnbUeS1apID& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EnbUeS1apID* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.EnbUeS1apID";
  }
  protected:
  explicit EnbUeS1apID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // int32 value = 1;
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.topo.EnbUeS1apID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class AmfUeNgapID final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.AmfUeNgapID) */ {
 public:
  inline AmfUeNgapID() : AmfUeNgapID(nullptr) {}
  ~AmfUeNgapID() override;
  explicit constexpr AmfUeNgapID(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AmfUeNgapID(const AmfUeNgapID& from);
  AmfUeNgapID(AmfUeNgapID&& from) noexcept
    : AmfUeNgapID() {
    *this = ::std::move(from);
  }

  inline AmfUeNgapID& operator=(const AmfUeNgapID& from) {
    CopyFrom(from);
    return *this;
  }
  inline AmfUeNgapID& operator=(AmfUeNgapID&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AmfUeNgapID& default_instance() {
    return *internal_default_instance();
  }
  static inline const AmfUeNgapID* internal_default_instance() {
    return reinterpret_cast<const AmfUeNgapID*>(
               &_AmfUeNgapID_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(AmfUeNgapID& a, AmfUeNgapID& b) {
    a.Swap(&b);
  }
  inline void Swap(AmfUeNgapID* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AmfUeNgapID* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AmfUeNgapID* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AmfUeNgapID>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AmfUeNgapID& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AmfUeNgapID& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AmfUeNgapID* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.AmfUeNgapID";
  }
  protected:
  explicit AmfUeNgapID(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // int64 value = 1;
  void clear_value();
  int64_t value() const;
  void set_value(int64_t value);
  private:
  int64_t _internal_value() const;
  void _internal_set_value(int64_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.topo.AmfUeNgapID)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int64_t value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class UeIdentity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.UeIdentity) */ {
 public:
  inline UeIdentity() : UeIdentity(nullptr) {}
  ~UeIdentity() override;
  explicit constexpr UeIdentity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UeIdentity(const UeIdentity& from);
  UeIdentity(UeIdentity&& from) noexcept
    : UeIdentity() {
    *this = ::std::move(from);
  }

  inline UeIdentity& operator=(const UeIdentity& from) {
    CopyFrom(from);
    return *this;
  }
  inline UeIdentity& operator=(UeIdentity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UeIdentity& default_instance() {
    return *internal_default_instance();
  }
  static inline const UeIdentity* internal_default_instance() {
    return reinterpret_cast<const UeIdentity*>(
               &_UeIdentity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(UeIdentity& a, UeIdentity& b) {
    a.Swap(&b);
  }
  inline void Swap(UeIdentity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UeIdentity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UeIdentity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UeIdentity>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UeIdentity& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UeIdentity& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UeIdentity* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.UeIdentity";
  }
  protected:
  explicit UeIdentity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDuUeF1ApIdFieldNumber = 1,
    kCuUeF1ApIdFieldNumber = 2,
    kRanUeNgapIdFieldNumber = 3,
    kEnbUeS1ApIdFieldNumber = 4,
    kAmfUeNgapIdFieldNumber = 5,
    kDrbIdFieldNumber = 7,
    kPreferredIdTypeFieldNumber = 6,
  };
  // .onos.topo.DuUeF1apID du_ue_f1ap_id = 1 [(.gogoproto.customname) = "DuUeF1apID"];
  bool has_du_ue_f1ap_id() const;
  private:
  bool _internal_has_du_ue_f1ap_id() const;
  public:
  void clear_du_ue_f1ap_id();
  const ::onos::topo::DuUeF1apID& du_ue_f1ap_id() const;
  PROTOBUF_NODISCARD ::onos::topo::DuUeF1apID* release_du_ue_f1ap_id();
  ::onos::topo::DuUeF1apID* mutable_du_ue_f1ap_id();
  void set_allocated_du_ue_f1ap_id(::onos::topo::DuUeF1apID* du_ue_f1ap_id);
  private:
  const ::onos::topo::DuUeF1apID& _internal_du_ue_f1ap_id() const;
  ::onos::topo::DuUeF1apID* _internal_mutable_du_ue_f1ap_id();
  public:
  void unsafe_arena_set_allocated_du_ue_f1ap_id(
      ::onos::topo::DuUeF1apID* du_ue_f1ap_id);
  ::onos::topo::DuUeF1apID* unsafe_arena_release_du_ue_f1ap_id();

  // .onos.topo.CuUeF1apID cu_ue_f1ap_id = 2 [(.gogoproto.customname) = "CuUeF1apID"];
  bool has_cu_ue_f1ap_id() const;
  private:
  bool _internal_has_cu_ue_f1ap_id() const;
  public:
  void clear_cu_ue_f1ap_id();
  const ::onos::topo::CuUeF1apID& cu_ue_f1ap_id() const;
  PROTOBUF_NODISCARD ::onos::topo::CuUeF1apID* release_cu_ue_f1ap_id();
  ::onos::topo::CuUeF1apID* mutable_cu_ue_f1ap_id();
  void set_allocated_cu_ue_f1ap_id(::onos::topo::CuUeF1apID* cu_ue_f1ap_id);
  private:
  const ::onos::topo::CuUeF1apID& _internal_cu_ue_f1ap_id() const;
  ::onos::topo::CuUeF1apID* _internal_mutable_cu_ue_f1ap_id();
  public:
  void unsafe_arena_set_allocated_cu_ue_f1ap_id(
      ::onos::topo::CuUeF1apID* cu_ue_f1ap_id);
  ::onos::topo::CuUeF1apID* unsafe_arena_release_cu_ue_f1ap_id();

  // .onos.topo.RanUeNgapID ran_ue_ngap_id = 3 [(.gogoproto.customname) = "RANUeNgapID"];
  bool has_ran_ue_ngap_id() const;
  private:
  bool _internal_has_ran_ue_ngap_id() const;
  public:
  void clear_ran_ue_ngap_id();
  const ::onos::topo::RanUeNgapID& ran_ue_ngap_id() const;
  PROTOBUF_NODISCARD ::onos::topo::RanUeNgapID* release_ran_ue_ngap_id();
  ::onos::topo::RanUeNgapID* mutable_ran_ue_ngap_id();
  void set_allocated_ran_ue_ngap_id(::onos::topo::RanUeNgapID* ran_ue_ngap_id);
  private:
  const ::onos::topo::RanUeNgapID& _internal_ran_ue_ngap_id() const;
  ::onos::topo::RanUeNgapID* _internal_mutable_ran_ue_ngap_id();
  public:
  void unsafe_arena_set_allocated_ran_ue_ngap_id(
      ::onos::topo::RanUeNgapID* ran_ue_ngap_id);
  ::onos::topo::RanUeNgapID* unsafe_arena_release_ran_ue_ngap_id();

  // .onos.topo.EnbUeS1apID enb_ue_s1ap_id = 4 [(.gogoproto.customname) = "EnbUeS1apID"];
  bool has_enb_ue_s1ap_id() const;
  private:
  bool _internal_has_enb_ue_s1ap_id() const;
  public:
  void clear_enb_ue_s1ap_id();
  const ::onos::topo::EnbUeS1apID& enb_ue_s1ap_id() const;
  PROTOBUF_NODISCARD ::onos::topo::EnbUeS1apID* release_enb_ue_s1ap_id();
  ::onos::topo::EnbUeS1apID* mutable_enb_ue_s1ap_id();
  void set_allocated_enb_ue_s1ap_id(::onos::topo::EnbUeS1apID* enb_ue_s1ap_id);
  private:
  const ::onos::topo::EnbUeS1apID& _internal_enb_ue_s1ap_id() const;
  ::onos::topo::EnbUeS1apID* _internal_mutable_enb_ue_s1ap_id();
  public:
  void unsafe_arena_set_allocated_enb_ue_s1ap_id(
      ::onos::topo::EnbUeS1apID* enb_ue_s1ap_id);
  ::onos::topo::EnbUeS1apID* unsafe_arena_release_enb_ue_s1ap_id();

  // .onos.topo.AmfUeNgapID amf_ue_ngap_id = 5 [(.gogoproto.customname) = "AMFUeNgapID"];
  bool has_amf_ue_ngap_id() const;
  private:
  bool _internal_has_amf_ue_ngap_id() const;
  public:
  void clear_amf_ue_ngap_id();
  const ::onos::topo::AmfUeNgapID& amf_ue_ngap_id() const;
  PROTOBUF_NODISCARD ::onos::topo::AmfUeNgapID* release_amf_ue_ngap_id();
  ::onos::topo::AmfUeNgapID* mutable_amf_ue_ngap_id();
  void set_allocated_amf_ue_ngap_id(::onos::topo::AmfUeNgapID* amf_ue_ngap_id);
  private:
  const ::onos::topo::AmfUeNgapID& _internal_amf_ue_ngap_id() const;
  ::onos::topo::AmfUeNgapID* _internal_mutable_amf_ue_ngap_id();
  public:
  void unsafe_arena_set_allocated_amf_ue_ngap_id(
      ::onos::topo::AmfUeNgapID* amf_ue_ngap_id);
  ::onos::topo::AmfUeNgapID* unsafe_arena_release_amf_ue_ngap_id();

  // .onos.topo.DrbId drb_id = 7;
  bool has_drb_id() const;
  private:
  bool _internal_has_drb_id() const;
  public:
  void clear_drb_id();
  const ::onos::topo::DrbId& drb_id() const;
  PROTOBUF_NODISCARD ::onos::topo::DrbId* release_drb_id();
  ::onos::topo::DrbId* mutable_drb_id();
  void set_allocated_drb_id(::onos::topo::DrbId* drb_id);
  private:
  const ::onos::topo::DrbId& _internal_drb_id() const;
  ::onos::topo::DrbId* _internal_mutable_drb_id();
  public:
  void unsafe_arena_set_allocated_drb_id(
      ::onos::topo::DrbId* drb_id);
  ::onos::topo::DrbId* unsafe_arena_release_drb_id();

  // .onos.topo.UeIdType preferred_id_type = 6 [(.gogoproto.customname) = "PreferredIDType"];
  void clear_preferred_id_type();
  ::onos::topo::UeIdType preferred_id_type() const;
  void set_preferred_id_type(::onos::topo::UeIdType value);
  private:
  ::onos::topo::UeIdType _internal_preferred_id_type() const;
  void _internal_set_preferred_id_type(::onos::topo::UeIdType value);
  public:

  // @@protoc_insertion_point(class_scope:onos.topo.UeIdentity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::topo::DuUeF1apID* du_ue_f1ap_id_;
  ::onos::topo::CuUeF1apID* cu_ue_f1ap_id_;
  ::onos::topo::RanUeNgapID* ran_ue_ngap_id_;
  ::onos::topo::EnbUeS1apID* enb_ue_s1ap_id_;
  ::onos::topo::AmfUeNgapID* amf_ue_ngap_id_;
  ::onos::topo::DrbId* drb_id_;
  int preferred_id_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class DrbId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.DrbId) */ {
 public:
  inline DrbId() : DrbId(nullptr) {}
  ~DrbId() override;
  explicit constexpr DrbId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DrbId(const DrbId& from);
  DrbId(DrbId&& from) noexcept
    : DrbId() {
    *this = ::std::move(from);
  }

  inline DrbId& operator=(const DrbId& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrbId& operator=(DrbId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DrbId& default_instance() {
    return *internal_default_instance();
  }
  enum DrbIdCase {
    kFourGdrbId = 1,
    kFiveGdrbId = 2,
    DRB_ID_NOT_SET = 0,
  };

  static inline const DrbId* internal_default_instance() {
    return reinterpret_cast<const DrbId*>(
               &_DrbId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(DrbId& a, DrbId& b) {
    a.Swap(&b);
  }
  inline void Swap(DrbId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrbId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DrbId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DrbId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DrbId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DrbId& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrbId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.DrbId";
  }
  protected:
  explicit DrbId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFourGdrbIdFieldNumber = 1,
    kFiveGdrbIdFieldNumber = 2,
  };
  // .onos.topo.FourGDrbId four_gdrb_id = 1 [json_name = "fourGDrbID"];
  bool has_four_gdrb_id() const;
  private:
  bool _internal_has_four_gdrb_id() const;
  public:
  void clear_four_gdrb_id();
  const ::onos::topo::FourGDrbId& four_gdrb_id() const;
  PROTOBUF_NODISCARD ::onos::topo::FourGDrbId* release_four_gdrb_id();
  ::onos::topo::FourGDrbId* mutable_four_gdrb_id();
  void set_allocated_four_gdrb_id(::onos::topo::FourGDrbId* four_gdrb_id);
  private:
  const ::onos::topo::FourGDrbId& _internal_four_gdrb_id() const;
  ::onos::topo::FourGDrbId* _internal_mutable_four_gdrb_id();
  public:
  void unsafe_arena_set_allocated_four_gdrb_id(
      ::onos::topo::FourGDrbId* four_gdrb_id);
  ::onos::topo::FourGDrbId* unsafe_arena_release_four_gdrb_id();

  // .onos.topo.FiveGDrbId five_gdrb_id = 2 [json_name = "fiveGDrbID"];
  bool has_five_gdrb_id() const;
  private:
  bool _internal_has_five_gdrb_id() const;
  public:
  void clear_five_gdrb_id();
  const ::onos::topo::FiveGDrbId& five_gdrb_id() const;
  PROTOBUF_NODISCARD ::onos::topo::FiveGDrbId* release_five_gdrb_id();
  ::onos::topo::FiveGDrbId* mutable_five_gdrb_id();
  void set_allocated_five_gdrb_id(::onos::topo::FiveGDrbId* five_gdrb_id);
  private:
  const ::onos::topo::FiveGDrbId& _internal_five_gdrb_id() const;
  ::onos::topo::FiveGDrbId* _internal_mutable_five_gdrb_id();
  public:
  void unsafe_arena_set_allocated_five_gdrb_id(
      ::onos::topo::FiveGDrbId* five_gdrb_id);
  ::onos::topo::FiveGDrbId* unsafe_arena_release_five_gdrb_id();

  void clear_drb_id();
  DrbIdCase drb_id_case() const;
  // @@protoc_insertion_point(class_scope:onos.topo.DrbId)
 private:
  class _Internal;
  void set_has_four_gdrb_id();
  void set_has_five_gdrb_id();

  inline bool has_drb_id() const;
  inline void clear_has_drb_id();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union DrbIdUnion {
    constexpr DrbIdUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::onos::topo::FourGDrbId* four_gdrb_id_;
    ::onos::topo::FiveGDrbId* five_gdrb_id_;
  } drb_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class FiveGDrbId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.FiveGDrbId) */ {
 public:
  inline FiveGDrbId() : FiveGDrbId(nullptr) {}
  ~FiveGDrbId() override;
  explicit constexpr FiveGDrbId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FiveGDrbId(const FiveGDrbId& from);
  FiveGDrbId(FiveGDrbId&& from) noexcept
    : FiveGDrbId() {
    *this = ::std::move(from);
  }

  inline FiveGDrbId& operator=(const FiveGDrbId& from) {
    CopyFrom(from);
    return *this;
  }
  inline FiveGDrbId& operator=(FiveGDrbId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FiveGDrbId& default_instance() {
    return *internal_default_instance();
  }
  static inline const FiveGDrbId* internal_default_instance() {
    return reinterpret_cast<const FiveGDrbId*>(
               &_FiveGDrbId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(FiveGDrbId& a, FiveGDrbId& b) {
    a.Swap(&b);
  }
  inline void Swap(FiveGDrbId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FiveGDrbId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FiveGDrbId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FiveGDrbId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FiveGDrbId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FiveGDrbId& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FiveGDrbId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.FiveGDrbId";
  }
  protected:
  explicit FiveGDrbId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlowsMapToDrbFieldNumber = 3,
    kQfiFieldNumber = 2,
    kValueFieldNumber = 1,
  };
  // repeated .onos.topo.QoSflowLevelParameters flows_map_to_drb = 3;
  int flows_map_to_drb_size() const;
  private:
  int _internal_flows_map_to_drb_size() const;
  public:
  void clear_flows_map_to_drb();
  ::onos::topo::QoSflowLevelParameters* mutable_flows_map_to_drb(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::QoSflowLevelParameters >*
      mutable_flows_map_to_drb();
  private:
  const ::onos::topo::QoSflowLevelParameters& _internal_flows_map_to_drb(int index) const;
  ::onos::topo::QoSflowLevelParameters* _internal_add_flows_map_to_drb();
  public:
  const ::onos::topo::QoSflowLevelParameters& flows_map_to_drb(int index) const;
  ::onos::topo::QoSflowLevelParameters* add_flows_map_to_drb();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::QoSflowLevelParameters >&
      flows_map_to_drb() const;

  // .onos.topo.Qfi qfi = 2;
  bool has_qfi() const;
  private:
  bool _internal_has_qfi() const;
  public:
  void clear_qfi();
  const ::onos::topo::Qfi& qfi() const;
  PROTOBUF_NODISCARD ::onos::topo::Qfi* release_qfi();
  ::onos::topo::Qfi* mutable_qfi();
  void set_allocated_qfi(::onos::topo::Qfi* qfi);
  private:
  const ::onos::topo::Qfi& _internal_qfi() const;
  ::onos::topo::Qfi* _internal_mutable_qfi();
  public:
  void unsafe_arena_set_allocated_qfi(
      ::onos::topo::Qfi* qfi);
  ::onos::topo::Qfi* unsafe_arena_release_qfi();

  // int32 value = 1;
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.topo.FiveGDrbId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::QoSflowLevelParameters > flows_map_to_drb_;
  ::onos::topo::Qfi* qfi_;
  int32_t value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class Qfi final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.Qfi) */ {
 public:
  inline Qfi() : Qfi(nullptr) {}
  ~Qfi() override;
  explicit constexpr Qfi(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Qfi(const Qfi& from);
  Qfi(Qfi&& from) noexcept
    : Qfi() {
    *this = ::std::move(from);
  }

  inline Qfi& operator=(const Qfi& from) {
    CopyFrom(from);
    return *this;
  }
  inline Qfi& operator=(Qfi&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Qfi& default_instance() {
    return *internal_default_instance();
  }
  static inline const Qfi* internal_default_instance() {
    return reinterpret_cast<const Qfi*>(
               &_Qfi_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(Qfi& a, Qfi& b) {
    a.Swap(&b);
  }
  inline void Swap(Qfi* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Qfi* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Qfi* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Qfi>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Qfi& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Qfi& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Qfi* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.Qfi";
  }
  protected:
  explicit Qfi(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // int32 value = 1;
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.topo.Qfi)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class QoSflowLevelParameters final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.QoSflowLevelParameters) */ {
 public:
  inline QoSflowLevelParameters() : QoSflowLevelParameters(nullptr) {}
  ~QoSflowLevelParameters() override;
  explicit constexpr QoSflowLevelParameters(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  QoSflowLevelParameters(const QoSflowLevelParameters& from);
  QoSflowLevelParameters(QoSflowLevelParameters&& from) noexcept
    : QoSflowLevelParameters() {
    *this = ::std::move(from);
  }

  inline QoSflowLevelParameters& operator=(const QoSflowLevelParameters& from) {
    CopyFrom(from);
    return *this;
  }
  inline QoSflowLevelParameters& operator=(QoSflowLevelParameters&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QoSflowLevelParameters& default_instance() {
    return *internal_default_instance();
  }
  enum QosFlowLevelParametersCase {
    kDynamicFiveQi = 1,
    kNonDynamicFiveQi = 2,
    QOS_FLOW_LEVEL_PARAMETERS_NOT_SET = 0,
  };

  static inline const QoSflowLevelParameters* internal_default_instance() {
    return reinterpret_cast<const QoSflowLevelParameters*>(
               &_QoSflowLevelParameters_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(QoSflowLevelParameters& a, QoSflowLevelParameters& b) {
    a.Swap(&b);
  }
  inline void Swap(QoSflowLevelParameters* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QoSflowLevelParameters* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QoSflowLevelParameters* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QoSflowLevelParameters>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const QoSflowLevelParameters& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const QoSflowLevelParameters& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QoSflowLevelParameters* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.QoSflowLevelParameters";
  }
  protected:
  explicit QoSflowLevelParameters(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDynamicFiveQiFieldNumber = 1,
    kNonDynamicFiveQiFieldNumber = 2,
  };
  // .onos.topo.DynamicFiveQi dynamic_five_qi = 1;
  bool has_dynamic_five_qi() const;
  private:
  bool _internal_has_dynamic_five_qi() const;
  public:
  void clear_dynamic_five_qi();
  const ::onos::topo::DynamicFiveQi& dynamic_five_qi() const;
  PROTOBUF_NODISCARD ::onos::topo::DynamicFiveQi* release_dynamic_five_qi();
  ::onos::topo::DynamicFiveQi* mutable_dynamic_five_qi();
  void set_allocated_dynamic_five_qi(::onos::topo::DynamicFiveQi* dynamic_five_qi);
  private:
  const ::onos::topo::DynamicFiveQi& _internal_dynamic_five_qi() const;
  ::onos::topo::DynamicFiveQi* _internal_mutable_dynamic_five_qi();
  public:
  void unsafe_arena_set_allocated_dynamic_five_qi(
      ::onos::topo::DynamicFiveQi* dynamic_five_qi);
  ::onos::topo::DynamicFiveQi* unsafe_arena_release_dynamic_five_qi();

  // .onos.topo.NonDynamicFiveQi non_dynamic_five_qi = 2;
  bool has_non_dynamic_five_qi() const;
  private:
  bool _internal_has_non_dynamic_five_qi() const;
  public:
  void clear_non_dynamic_five_qi();
  const ::onos::topo::NonDynamicFiveQi& non_dynamic_five_qi() const;
  PROTOBUF_NODISCARD ::onos::topo::NonDynamicFiveQi* release_non_dynamic_five_qi();
  ::onos::topo::NonDynamicFiveQi* mutable_non_dynamic_five_qi();
  void set_allocated_non_dynamic_five_qi(::onos::topo::NonDynamicFiveQi* non_dynamic_five_qi);
  private:
  const ::onos::topo::NonDynamicFiveQi& _internal_non_dynamic_five_qi() const;
  ::onos::topo::NonDynamicFiveQi* _internal_mutable_non_dynamic_five_qi();
  public:
  void unsafe_arena_set_allocated_non_dynamic_five_qi(
      ::onos::topo::NonDynamicFiveQi* non_dynamic_five_qi);
  ::onos::topo::NonDynamicFiveQi* unsafe_arena_release_non_dynamic_five_qi();

  void clear_qos_flow_level_parameters();
  QosFlowLevelParametersCase qos_flow_level_parameters_case() const;
  // @@protoc_insertion_point(class_scope:onos.topo.QoSflowLevelParameters)
 private:
  class _Internal;
  void set_has_dynamic_five_qi();
  void set_has_non_dynamic_five_qi();

  inline bool has_qos_flow_level_parameters() const;
  inline void clear_has_qos_flow_level_parameters();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union QosFlowLevelParametersUnion {
    constexpr QosFlowLevelParametersUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::onos::topo::DynamicFiveQi* dynamic_five_qi_;
    ::onos::topo::NonDynamicFiveQi* non_dynamic_five_qi_;
  } qos_flow_level_parameters_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class DynamicFiveQi final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.DynamicFiveQi) */ {
 public:
  inline DynamicFiveQi() : DynamicFiveQi(nullptr) {}
  ~DynamicFiveQi() override;
  explicit constexpr DynamicFiveQi(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DynamicFiveQi(const DynamicFiveQi& from);
  DynamicFiveQi(DynamicFiveQi&& from) noexcept
    : DynamicFiveQi() {
    *this = ::std::move(from);
  }

  inline DynamicFiveQi& operator=(const DynamicFiveQi& from) {
    CopyFrom(from);
    return *this;
  }
  inline DynamicFiveQi& operator=(DynamicFiveQi&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DynamicFiveQi& default_instance() {
    return *internal_default_instance();
  }
  static inline const DynamicFiveQi* internal_default_instance() {
    return reinterpret_cast<const DynamicFiveQi*>(
               &_DynamicFiveQi_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(DynamicFiveQi& a, DynamicFiveQi& b) {
    a.Swap(&b);
  }
  inline void Swap(DynamicFiveQi* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DynamicFiveQi* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DynamicFiveQi* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DynamicFiveQi>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DynamicFiveQi& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DynamicFiveQi& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DynamicFiveQi* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.DynamicFiveQi";
  }
  protected:
  explicit DynamicFiveQi(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPriorityLevelFieldNumber = 1,
    kPacketDelayBudgeFieldNumber = 2,
    kPacketErrorRateFieldNumber = 3,
  };
  // int32 priority_level = 1;
  void clear_priority_level();
  int32_t priority_level() const;
  void set_priority_level(int32_t value);
  private:
  int32_t _internal_priority_level() const;
  void _internal_set_priority_level(int32_t value);
  public:

  // int32 packet_delay_budge = 2;
  void clear_packet_delay_budge();
  int32_t packet_delay_budge() const;
  void set_packet_delay_budge(int32_t value);
  private:
  int32_t _internal_packet_delay_budge() const;
  void _internal_set_packet_delay_budge(int32_t value);
  public:

  // int32 packet_error_rate = 3;
  void clear_packet_error_rate();
  int32_t packet_error_rate() const;
  void set_packet_error_rate(int32_t value);
  private:
  int32_t _internal_packet_error_rate() const;
  void _internal_set_packet_error_rate(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.topo.DynamicFiveQi)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t priority_level_;
  int32_t packet_delay_budge_;
  int32_t packet_error_rate_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class NonDynamicFiveQi final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.NonDynamicFiveQi) */ {
 public:
  inline NonDynamicFiveQi() : NonDynamicFiveQi(nullptr) {}
  ~NonDynamicFiveQi() override;
  explicit constexpr NonDynamicFiveQi(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NonDynamicFiveQi(const NonDynamicFiveQi& from);
  NonDynamicFiveQi(NonDynamicFiveQi&& from) noexcept
    : NonDynamicFiveQi() {
    *this = ::std::move(from);
  }

  inline NonDynamicFiveQi& operator=(const NonDynamicFiveQi& from) {
    CopyFrom(from);
    return *this;
  }
  inline NonDynamicFiveQi& operator=(NonDynamicFiveQi&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NonDynamicFiveQi& default_instance() {
    return *internal_default_instance();
  }
  static inline const NonDynamicFiveQi* internal_default_instance() {
    return reinterpret_cast<const NonDynamicFiveQi*>(
               &_NonDynamicFiveQi_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(NonDynamicFiveQi& a, NonDynamicFiveQi& b) {
    a.Swap(&b);
  }
  inline void Swap(NonDynamicFiveQi* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NonDynamicFiveQi* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  NonDynamicFiveQi* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<NonDynamicFiveQi>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const NonDynamicFiveQi& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const NonDynamicFiveQi& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NonDynamicFiveQi* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.NonDynamicFiveQi";
  }
  protected:
  explicit NonDynamicFiveQi(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFiveQiFieldNumber = 1,
  };
  // .onos.topo.FiveQi five_qi = 1;
  bool has_five_qi() const;
  private:
  bool _internal_has_five_qi() const;
  public:
  void clear_five_qi();
  const ::onos::topo::FiveQi& five_qi() const;
  PROTOBUF_NODISCARD ::onos::topo::FiveQi* release_five_qi();
  ::onos::topo::FiveQi* mutable_five_qi();
  void set_allocated_five_qi(::onos::topo::FiveQi* five_qi);
  private:
  const ::onos::topo::FiveQi& _internal_five_qi() const;
  ::onos::topo::FiveQi* _internal_mutable_five_qi();
  public:
  void unsafe_arena_set_allocated_five_qi(
      ::onos::topo::FiveQi* five_qi);
  ::onos::topo::FiveQi* unsafe_arena_release_five_qi();

  // @@protoc_insertion_point(class_scope:onos.topo.NonDynamicFiveQi)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::topo::FiveQi* five_qi_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class FiveQi final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.FiveQi) */ {
 public:
  inline FiveQi() : FiveQi(nullptr) {}
  ~FiveQi() override;
  explicit constexpr FiveQi(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FiveQi(const FiveQi& from);
  FiveQi(FiveQi&& from) noexcept
    : FiveQi() {
    *this = ::std::move(from);
  }

  inline FiveQi& operator=(const FiveQi& from) {
    CopyFrom(from);
    return *this;
  }
  inline FiveQi& operator=(FiveQi&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FiveQi& default_instance() {
    return *internal_default_instance();
  }
  static inline const FiveQi* internal_default_instance() {
    return reinterpret_cast<const FiveQi*>(
               &_FiveQi_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(FiveQi& a, FiveQi& b) {
    a.Swap(&b);
  }
  inline void Swap(FiveQi* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FiveQi* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FiveQi* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FiveQi>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FiveQi& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FiveQi& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FiveQi* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.FiveQi";
  }
  protected:
  explicit FiveQi(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // int32 value = 1;
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.topo.FiveQi)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class FourGDrbId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.FourGDrbId) */ {
 public:
  inline FourGDrbId() : FourGDrbId(nullptr) {}
  ~FourGDrbId() override;
  explicit constexpr FourGDrbId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FourGDrbId(const FourGDrbId& from);
  FourGDrbId(FourGDrbId&& from) noexcept
    : FourGDrbId() {
    *this = ::std::move(from);
  }

  inline FourGDrbId& operator=(const FourGDrbId& from) {
    CopyFrom(from);
    return *this;
  }
  inline FourGDrbId& operator=(FourGDrbId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FourGDrbId& default_instance() {
    return *internal_default_instance();
  }
  static inline const FourGDrbId* internal_default_instance() {
    return reinterpret_cast<const FourGDrbId*>(
               &_FourGDrbId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(FourGDrbId& a, FourGDrbId& b) {
    a.Swap(&b);
  }
  inline void Swap(FourGDrbId* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FourGDrbId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  FourGDrbId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<FourGDrbId>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const FourGDrbId& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const FourGDrbId& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FourGDrbId* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.FourGDrbId";
  }
  protected:
  explicit FourGDrbId(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQciFieldNumber = 2,
    kValueFieldNumber = 1,
  };
  // .onos.topo.Qci qci = 2;
  bool has_qci() const;
  private:
  bool _internal_has_qci() const;
  public:
  void clear_qci();
  const ::onos::topo::Qci& qci() const;
  PROTOBUF_NODISCARD ::onos::topo::Qci* release_qci();
  ::onos::topo::Qci* mutable_qci();
  void set_allocated_qci(::onos::topo::Qci* qci);
  private:
  const ::onos::topo::Qci& _internal_qci() const;
  ::onos::topo::Qci* _internal_mutable_qci();
  public:
  void unsafe_arena_set_allocated_qci(
      ::onos::topo::Qci* qci);
  ::onos::topo::Qci* unsafe_arena_release_qci();

  // int32 value = 1;
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.topo.FourGDrbId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::topo::Qci* qci_;
  int32_t value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// -------------------------------------------------------------------

class Qci final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.topo.Qci) */ {
 public:
  inline Qci() : Qci(nullptr) {}
  ~Qci() override;
  explicit constexpr Qci(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Qci(const Qci& from);
  Qci(Qci&& from) noexcept
    : Qci() {
    *this = ::std::move(from);
  }

  inline Qci& operator=(const Qci& from) {
    CopyFrom(from);
    return *this;
  }
  inline Qci& operator=(Qci&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Qci& default_instance() {
    return *internal_default_instance();
  }
  static inline const Qci* internal_default_instance() {
    return reinterpret_cast<const Qci*>(
               &_Qci_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(Qci& a, Qci& b) {
    a.Swap(&b);
  }
  inline void Swap(Qci* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Qci* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Qci* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Qci>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Qci& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Qci& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Qci* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.topo.Qci";
  }
  protected:
  explicit Qci(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
  };
  // int32 value = 1;
  void clear_value();
  int32_t value() const;
  void set_value(int32_t value);
  private:
  int32_t _internal_value() const;
  void _internal_set_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.topo.Qci)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int32_t value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2ftopo_2fran_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Location

// double lat = 1 [deprecated = true];
inline void Location::clear_lat() {
  lat_ = 0;
}
inline double Location::_internal_lat() const {
  return lat_;
}
inline double Location::lat() const {
  // @@protoc_insertion_point(field_get:onos.topo.Location.lat)
  return _internal_lat();
}
inline void Location::_internal_set_lat(double value) {
  
  lat_ = value;
}
inline void Location::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:onos.topo.Location.lat)
}

// double lng = 2 [deprecated = true];
inline void Location::clear_lng() {
  lng_ = 0;
}
inline double Location::_internal_lng() const {
  return lng_;
}
inline double Location::lng() const {
  // @@protoc_insertion_point(field_get:onos.topo.Location.lng)
  return _internal_lng();
}
inline void Location::_internal_set_lng(double value) {
  
  lng_ = value;
}
inline void Location::set_lng(double value) {
  _internal_set_lng(value);
  // @@protoc_insertion_point(field_set:onos.topo.Location.lng)
}

// .onos.topo.Wgs84Location wgs84 = 3;
inline bool Location::_internal_has_wgs84() const {
  return ext_case() == kWgs84;
}
inline bool Location::has_wgs84() const {
  return _internal_has_wgs84();
}
inline void Location::set_has_wgs84() {
  _oneof_case_[0] = kWgs84;
}
inline void Location::clear_wgs84() {
  if (_internal_has_wgs84()) {
    if (GetArenaForAllocation() == nullptr) {
      delete ext_.wgs84_;
    }
    clear_has_ext();
  }
}
inline ::onos::topo::Wgs84Location* Location::release_wgs84() {
  // @@protoc_insertion_point(field_release:onos.topo.Location.wgs84)
  if (_internal_has_wgs84()) {
    clear_has_ext();
      ::onos::topo::Wgs84Location* temp = ext_.wgs84_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ext_.wgs84_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::onos::topo::Wgs84Location& Location::_internal_wgs84() const {
  return _internal_has_wgs84()
      ? *ext_.wgs84_
      : reinterpret_cast< ::onos::topo::Wgs84Location&>(::onos::topo::_Wgs84Location_default_instance_);
}
inline const ::onos::topo::Wgs84Location& Location::wgs84() const {
  // @@protoc_insertion_point(field_get:onos.topo.Location.wgs84)
  return _internal_wgs84();
}
inline ::onos::topo::Wgs84Location* Location::unsafe_arena_release_wgs84() {
  // @@protoc_insertion_point(field_unsafe_arena_release:onos.topo.Location.wgs84)
  if (_internal_has_wgs84()) {
    clear_has_ext();
    ::onos::topo::Wgs84Location* temp = ext_.wgs84_;
    ext_.wgs84_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Location::unsafe_arena_set_allocated_wgs84(::onos::topo::Wgs84Location* wgs84) {
  clear_ext();
  if (wgs84) {
    set_has_wgs84();
    ext_.wgs84_ = wgs84;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.topo.Location.wgs84)
}
inline ::onos::topo::Wgs84Location* Location::_internal_mutable_wgs84() {
  if (!_internal_has_wgs84()) {
    clear_ext();
    set_has_wgs84();
    ext_.wgs84_ = CreateMaybeMessage< ::onos::topo::Wgs84Location >(GetArenaForAllocation());
  }
  return ext_.wgs84_;
}
inline ::onos::topo::Wgs84Location* Location::mutable_wgs84() {
  ::onos::topo::Wgs84Location* _msg = _internal_mutable_wgs84();
  // @@protoc_insertion_point(field_mutable:onos.topo.Location.wgs84)
  return _msg;
}

// .onos.topo.CartesianLocation cartesian = 4;
inline bool Location::_internal_has_cartesian() const {
  return ext_case() == kCartesian;
}
inline bool Location::has_cartesian() const {
  return _internal_has_cartesian();
}
inline void Location::set_has_cartesian() {
  _oneof_case_[0] = kCartesian;
}
inline void Location::clear_cartesian() {
  if (_internal_has_cartesian()) {
    if (GetArenaForAllocation() == nullptr) {
      delete ext_.cartesian_;
    }
    clear_has_ext();
  }
}
inline ::onos::topo::CartesianLocation* Location::release_cartesian() {
  // @@protoc_insertion_point(field_release:onos.topo.Location.cartesian)
  if (_internal_has_cartesian()) {
    clear_has_ext();
      ::onos::topo::CartesianLocation* temp = ext_.cartesian_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    ext_.cartesian_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::onos::topo::CartesianLocation& Location::_internal_cartesian() const {
  return _internal_has_cartesian()
      ? *ext_.cartesian_
      : reinterpret_cast< ::onos::topo::CartesianLocation&>(::onos::topo::_CartesianLocation_default_instance_);
}
inline const ::onos::topo::CartesianLocation& Location::cartesian() const {
  // @@protoc_insertion_point(field_get:onos.topo.Location.cartesian)
  return _internal_cartesian();
}
inline ::onos::topo::CartesianLocation* Location::unsafe_arena_release_cartesian() {
  // @@protoc_insertion_point(field_unsafe_arena_release:onos.topo.Location.cartesian)
  if (_internal_has_cartesian()) {
    clear_has_ext();
    ::onos::topo::CartesianLocation* temp = ext_.cartesian_;
    ext_.cartesian_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Location::unsafe_arena_set_allocated_cartesian(::onos::topo::CartesianLocation* cartesian) {
  clear_ext();
  if (cartesian) {
    set_has_cartesian();
    ext_.cartesian_ = cartesian;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.topo.Location.cartesian)
}
inline ::onos::topo::CartesianLocation* Location::_internal_mutable_cartesian() {
  if (!_internal_has_cartesian()) {
    clear_ext();
    set_has_cartesian();
    ext_.cartesian_ = CreateMaybeMessage< ::onos::topo::CartesianLocation >(GetArenaForAllocation());
  }
  return ext_.cartesian_;
}
inline ::onos::topo::CartesianLocation* Location::mutable_cartesian() {
  ::onos::topo::CartesianLocation* _msg = _internal_mutable_cartesian();
  // @@protoc_insertion_point(field_mutable:onos.topo.Location.cartesian)
  return _msg;
}

inline bool Location::has_ext() const {
  return ext_case() != EXT_NOT_SET;
}
inline void Location::clear_has_ext() {
  _oneof_case_[0] = EXT_NOT_SET;
}
inline Location::ExtCase Location::ext_case() const {
  return Location::ExtCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Wgs84Location

// double latitude_deg = 1;
inline void Wgs84Location::clear_latitude_deg() {
  latitude_deg_ = 0;
}
inline double Wgs84Location::_internal_latitude_deg() const {
  return latitude_deg_;
}
inline double Wgs84Location::latitude_deg() const {
  // @@protoc_insertion_point(field_get:onos.topo.Wgs84Location.latitude_deg)
  return _internal_latitude_deg();
}
inline void Wgs84Location::_internal_set_latitude_deg(double value) {
  
  latitude_deg_ = value;
}
inline void Wgs84Location::set_latitude_deg(double value) {
  _internal_set_latitude_deg(value);
  // @@protoc_insertion_point(field_set:onos.topo.Wgs84Location.latitude_deg)
}

// double longitude_deg = 2;
inline void Wgs84Location::clear_longitude_deg() {
  longitude_deg_ = 0;
}
inline double Wgs84Location::_internal_longitude_deg() const {
  return longitude_deg_;
}
inline double Wgs84Location::longitude_deg() const {
  // @@protoc_insertion_point(field_get:onos.topo.Wgs84Location.longitude_deg)
  return _internal_longitude_deg();
}
inline void Wgs84Location::_internal_set_longitude_deg(double value) {
  
  longitude_deg_ = value;
}
inline void Wgs84Location::set_longitude_deg(double value) {
  _internal_set_longitude_deg(value);
  // @@protoc_insertion_point(field_set:onos.topo.Wgs84Location.longitude_deg)
}

// double altitude_m = 3;
inline void Wgs84Location::clear_altitude_m() {
  altitude_m_ = 0;
}
inline double Wgs84Location::_internal_altitude_m() const {
  return altitude_m_;
}
inline double Wgs84Location::altitude_m() const {
  // @@protoc_insertion_point(field_get:onos.topo.Wgs84Location.altitude_m)
  return _internal_altitude_m();
}
inline void Wgs84Location::_internal_set_altitude_m(double value) {
  
  altitude_m_ = value;
}
inline void Wgs84Location::set_altitude_m(double value) {
  _internal_set_altitude_m(value);
  // @@protoc_insertion_point(field_set:onos.topo.Wgs84Location.altitude_m)
}

// -------------------------------------------------------------------

// CartesianLocation

// double x_m = 1;
inline void CartesianLocation::clear_x_m() {
  x_m_ = 0;
}
inline double CartesianLocation::_internal_x_m() const {
  return x_m_;
}
inline double CartesianLocation::x_m() const {
  // @@protoc_insertion_point(field_get:onos.topo.CartesianLocation.x_m)
  return _internal_x_m();
}
inline void CartesianLocation::_internal_set_x_m(double value) {
  
  x_m_ = value;
}
inline void CartesianLocation::set_x_m(double value) {
  _internal_set_x_m(value);
  // @@protoc_insertion_point(field_set:onos.topo.CartesianLocation.x_m)
}

// double y_m = 2;
inline void CartesianLocation::clear_y_m() {
  y_m_ = 0;
}
inline double CartesianLocation::_internal_y_m() const {
  return y_m_;
}
inline double CartesianLocation::y_m() const {
  // @@protoc_insertion_point(field_get:onos.topo.CartesianLocation.y_m)
  return _internal_y_m();
}
inline void CartesianLocation::_internal_set_y_m(double value) {
  
  y_m_ = value;
}
inline void CartesianLocation::set_y_m(double value) {
  _internal_set_y_m(value);
  // @@protoc_insertion_point(field_set:onos.topo.CartesianLocation.y_m)
}

// double z_m = 3;
inline void CartesianLocation::clear_z_m() {
  z_m_ = 0;
}
inline double CartesianLocation::_internal_z_m() const {
  return z_m_;
}
inline double CartesianLocation::z_m() const {
  // @@protoc_insertion_point(field_get:onos.topo.CartesianLocation.z_m)
  return _internal_z_m();
}
inline void CartesianLocation::_internal_set_z_m(double value) {
  
  z_m_ = value;
}
inline void CartesianLocation::set_z_m(double value) {
  _internal_set_z_m(value);
  // @@protoc_insertion_point(field_set:onos.topo.CartesianLocation.z_m)
}

// -------------------------------------------------------------------

// AzElOrientation

// double azimuth_deg = 1;
inline void AzElOrientation::clear_azimuth_deg() {
  azimuth_deg_ = 0;
}
inline double AzElOrientation::_internal_azimuth_deg() const {
  return azimuth_deg_;
}
inline double AzElOrientation::azimuth_deg() const {
  // @@protoc_insertion_point(field_get:onos.topo.AzElOrientation.azimuth_deg)
  return _internal_azimuth_deg();
}
inline void AzElOrientation::_internal_set_azimuth_deg(double value) {
  
  azimuth_deg_ = value;
}
inline void AzElOrientation::set_azimuth_deg(double value) {
  _internal_set_azimuth_deg(value);
  // @@protoc_insertion_point(field_set:onos.topo.AzElOrientation.azimuth_deg)
}

// double elevation_deg = 2;
inline void AzElOrientation::clear_elevation_deg() {
  elevation_deg_ = 0;
}
inline double AzElOrientation::_internal_elevation_deg() const {
  return elevation_deg_;
}
inline double AzElOrientation::elevation_deg() const {
  // @@protoc_insertion_point(field_get:onos.topo.AzElOrientation.elevation_deg)
  return _internal_elevation_deg();
}
inline void AzElOrientation::_internal_set_elevation_deg(double value) {
  
  elevation_deg_ = value;
}
inline void AzElOrientation::set_elevation_deg(double value) {
  _internal_set_elevation_deg(value);
  // @@protoc_insertion_point(field_set:onos.topo.AzElOrientation.elevation_deg)
}

// double rotation_deg = 3;
inline void AzElOrientation::clear_rotation_deg() {
  rotation_deg_ = 0;
}
inline double AzElOrientation::_internal_rotation_deg() const {
  return rotation_deg_;
}
inline double AzElOrientation::rotation_deg() const {
  // @@protoc_insertion_point(field_get:onos.topo.AzElOrientation.rotation_deg)
  return _internal_rotation_deg();
}
inline void AzElOrientation::_internal_set_rotation_deg(double value) {
  
  rotation_deg_ = value;
}
inline void AzElOrientation::set_rotation_deg(double value) {
  _internal_set_rotation_deg(value);
  // @@protoc_insertion_point(field_set:onos.topo.AzElOrientation.rotation_deg)
}

// -------------------------------------------------------------------

// YprOrientation

// double yaw_deg = 1;
inline void YprOrientation::clear_yaw_deg() {
  yaw_deg_ = 0;
}
inline double YprOrientation::_internal_yaw_deg() const {
  return yaw_deg_;
}
inline double YprOrientation::yaw_deg() const {
  // @@protoc_insertion_point(field_get:onos.topo.YprOrientation.yaw_deg)
  return _internal_yaw_deg();
}
inline void YprOrientation::_internal_set_yaw_deg(double value) {
  
  yaw_deg_ = value;
}
inline void YprOrientation::set_yaw_deg(double value) {
  _internal_set_yaw_deg(value);
  // @@protoc_insertion_point(field_set:onos.topo.YprOrientation.yaw_deg)
}

// double pitch_deg = 2;
inline void YprOrientation::clear_pitch_deg() {
  pitch_deg_ = 0;
}
inline double YprOrientation::_internal_pitch_deg() const {
  return pitch_deg_;
}
inline double YprOrientation::pitch_deg() const {
  // @@protoc_insertion_point(field_get:onos.topo.YprOrientation.pitch_deg)
  return _internal_pitch_deg();
}
inline void YprOrientation::_internal_set_pitch_deg(double value) {
  
  pitch_deg_ = value;
}
inline void YprOrientation::set_pitch_deg(double value) {
  _internal_set_pitch_deg(value);
  // @@protoc_insertion_point(field_set:onos.topo.YprOrientation.pitch_deg)
}

// double roll_deg = 3;
inline void YprOrientation::clear_roll_deg() {
  roll_deg_ = 0;
}
inline double YprOrientation::_internal_roll_deg() const {
  return roll_deg_;
}
inline double YprOrientation::roll_deg() const {
  // @@protoc_insertion_point(field_get:onos.topo.YprOrientation.roll_deg)
  return _internal_roll_deg();
}
inline void YprOrientation::_internal_set_roll_deg(double value) {
  
  roll_deg_ = value;
}
inline void YprOrientation::set_roll_deg(double value) {
  _internal_set_roll_deg(value);
  // @@protoc_insertion_point(field_set:onos.topo.YprOrientation.roll_deg)
}

// -------------------------------------------------------------------

// Orientation

// .onos.topo.AzElOrientation azel = 1;
inline bool Orientation::_internal_has_azel() const {
  return orientation_case() == kAzel;
}
inline bool Orientation::has_azel() const {
  return _internal_has_azel();
}
inline void Orientation::set_has_azel() {
  _oneof_case_[0] = kAzel;
}
inline void Orientation::clear_azel() {
  if (_internal_has_azel()) {
    if (GetArenaForAllocation() == nullptr) {
      delete orientation_.azel_;
    }
    clear_has_orientation();
  }
}
inline ::onos::topo::AzElOrientation* Orientation::release_azel() {
  // @@protoc_insertion_point(field_release:onos.topo.Orientation.azel)
  if (_internal_has_azel()) {
    clear_has_orientation();
      ::onos::topo::AzElOrientation* temp = orientation_.azel_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    orientation_.azel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::onos::topo::AzElOrientation& Orientation::_internal_azel() const {
  return _internal_has_azel()
      ? *orientation_.azel_
      : reinterpret_cast< ::onos::topo::AzElOrientation&>(::onos::topo::_AzElOrientation_default_instance_);
}
inline const ::onos::topo::AzElOrientation& Orientation::azel() const {
  // @@protoc_insertion_point(field_get:onos.topo.Orientation.azel)
  return _internal_azel();
}
inline ::onos::topo::AzElOrientation* Orientation::unsafe_arena_release_azel() {
  // @@protoc_insertion_point(field_unsafe_arena_release:onos.topo.Orientation.azel)
  if (_internal_has_azel()) {
    clear_has_orientation();
    ::onos::topo::AzElOrientation* temp = orientation_.azel_;
    orientation_.azel_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Orientation::unsafe_arena_set_allocated_azel(::onos::topo::AzElOrientation* azel) {
  clear_orientation();
  if (azel) {
    set_has_azel();
    orientation_.azel_ = azel;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.topo.Orientation.azel)
}
inline ::onos::topo::AzElOrientation* Orientation::_internal_mutable_azel() {
  if (!_internal_has_azel()) {
    clear_orientation();
    set_has_azel();
    orientation_.azel_ = CreateMaybeMessage< ::onos::topo::AzElOrientation >(GetArenaForAllocation());
  }
  return orientation_.azel_;
}
inline ::onos::topo::AzElOrientation* Orientation::mutable_azel() {
  ::onos::topo::AzElOrientation* _msg = _internal_mutable_azel();
  // @@protoc_insertion_point(field_mutable:onos.topo.Orientation.azel)
  return _msg;
}

// .onos.topo.YprOrientation ypr = 2;
inline bool Orientation::_internal_has_ypr() const {
  return orientation_case() == kYpr;
}
inline bool Orientation::has_ypr() const {
  return _internal_has_ypr();
}
inline void Orientation::set_has_ypr() {
  _oneof_case_[0] = kYpr;
}
inline void Orientation::clear_ypr() {
  if (_internal_has_ypr()) {
    if (GetArenaForAllocation() == nullptr) {
      delete orientation_.ypr_;
    }
    clear_has_orientation();
  }
}
inline ::onos::topo::YprOrientation* Orientation::release_ypr() {
  // @@protoc_insertion_point(field_release:onos.topo.Orientation.ypr)
  if (_internal_has_ypr()) {
    clear_has_orientation();
      ::onos::topo::YprOrientation* temp = orientation_.ypr_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    orientation_.ypr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::onos::topo::YprOrientation& Orientation::_internal_ypr() const {
  return _internal_has_ypr()
      ? *orientation_.ypr_
      : reinterpret_cast< ::onos::topo::YprOrientation&>(::onos::topo::_YprOrientation_default_instance_);
}
inline const ::onos::topo::YprOrientation& Orientation::ypr() const {
  // @@protoc_insertion_point(field_get:onos.topo.Orientation.ypr)
  return _internal_ypr();
}
inline ::onos::topo::YprOrientation* Orientation::unsafe_arena_release_ypr() {
  // @@protoc_insertion_point(field_unsafe_arena_release:onos.topo.Orientation.ypr)
  if (_internal_has_ypr()) {
    clear_has_orientation();
    ::onos::topo::YprOrientation* temp = orientation_.ypr_;
    orientation_.ypr_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Orientation::unsafe_arena_set_allocated_ypr(::onos::topo::YprOrientation* ypr) {
  clear_orientation();
  if (ypr) {
    set_has_ypr();
    orientation_.ypr_ = ypr;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.topo.Orientation.ypr)
}
inline ::onos::topo::YprOrientation* Orientation::_internal_mutable_ypr() {
  if (!_internal_has_ypr()) {
    clear_orientation();
    set_has_ypr();
    orientation_.ypr_ = CreateMaybeMessage< ::onos::topo::YprOrientation >(GetArenaForAllocation());
  }
  return orientation_.ypr_;
}
inline ::onos::topo::YprOrientation* Orientation::mutable_ypr() {
  ::onos::topo::YprOrientation* _msg = _internal_mutable_ypr();
  // @@protoc_insertion_point(field_mutable:onos.topo.Orientation.ypr)
  return _msg;
}

inline bool Orientation::has_orientation() const {
  return orientation_case() != ORIENTATION_NOT_SET;
}
inline void Orientation::clear_has_orientation() {
  _oneof_case_[0] = ORIENTATION_NOT_SET;
}
inline Orientation::OrientationCase Orientation::orientation_case() const {
  return Orientation::OrientationCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Waypoint

// .google.protobuf.Timestamp time = 1;
inline bool Waypoint::_internal_has_time() const {
  return this != internal_default_instance() && time_ != nullptr;
}
inline bool Waypoint::has_time() const {
  return _internal_has_time();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Waypoint::_internal_time() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = time_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Waypoint::time() const {
  // @@protoc_insertion_point(field_get:onos.topo.Waypoint.time)
  return _internal_time();
}
inline void Waypoint::unsafe_arena_set_allocated_time(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  time_ = time;
  if (time) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.topo.Waypoint.time)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Waypoint::release_time() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_;
  time_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Waypoint::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_release:onos.topo.Waypoint.time)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = time_;
  time_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Waypoint::_internal_mutable_time() {
  
  if (time_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    time_ = p;
  }
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Waypoint::mutable_time() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:onos.topo.Waypoint.time)
  return _msg;
}
inline void Waypoint::set_allocated_time(::PROTOBUF_NAMESPACE_ID::Timestamp* time) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(time_);
  }
  if (time) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(time));
    if (message_arena != submessage_arena) {
      time = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, time, submessage_arena);
    }
    
  } else {
    
  }
  time_ = time;
  // @@protoc_insertion_point(field_set_allocated:onos.topo.Waypoint.time)
}

// .onos.topo.Location location = 2;
inline bool Waypoint::_internal_has_location() const {
  return this != internal_default_instance() && location_ != nullptr;
}
inline bool Waypoint::has_location() const {
  return _internal_has_location();
}
inline void Waypoint::clear_location() {
  if (GetArenaForAllocation() == nullptr && location_ != nullptr) {
    delete location_;
  }
  location_ = nullptr;
}
inline const ::onos::topo::Location& Waypoint::_internal_location() const {
  const ::onos::topo::Location* p = location_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::topo::Location&>(
      ::onos::topo::_Location_default_instance_);
}
inline const ::onos::topo::Location& Waypoint::location() const {
  // @@protoc_insertion_point(field_get:onos.topo.Waypoint.location)
  return _internal_location();
}
inline void Waypoint::unsafe_arena_set_allocated_location(
    ::onos::topo::Location* location) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_);
  }
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.topo.Waypoint.location)
}
inline ::onos::topo::Location* Waypoint::release_location() {
  
  ::onos::topo::Location* temp = location_;
  location_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::topo::Location* Waypoint::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:onos.topo.Waypoint.location)
  
  ::onos::topo::Location* temp = location_;
  location_ = nullptr;
  return temp;
}
inline ::onos::topo::Location* Waypoint::_internal_mutable_location() {
  
  if (location_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::topo::Location>(GetArenaForAllocation());
    location_ = p;
  }
  return location_;
}
inline ::onos::topo::Location* Waypoint::mutable_location() {
  ::onos::topo::Location* _msg = _internal_mutable_location();
  // @@protoc_insertion_point(field_mutable:onos.topo.Waypoint.location)
  return _msg;
}
inline void Waypoint::set_allocated_location(::onos::topo::Location* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete location_;
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::topo::Location>::GetOwningArena(location);
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:onos.topo.Waypoint.location)
}

// -------------------------------------------------------------------

// Waypoints

// repeated .onos.topo.Waypoint waypoint = 1;
inline int Waypoints::_internal_waypoint_size() const {
  return waypoint_.size();
}
inline int Waypoints::waypoint_size() const {
  return _internal_waypoint_size();
}
inline void Waypoints::clear_waypoint() {
  waypoint_.Clear();
}
inline ::onos::topo::Waypoint* Waypoints::mutable_waypoint(int index) {
  // @@protoc_insertion_point(field_mutable:onos.topo.Waypoints.waypoint)
  return waypoint_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::Waypoint >*
Waypoints::mutable_waypoint() {
  // @@protoc_insertion_point(field_mutable_list:onos.topo.Waypoints.waypoint)
  return &waypoint_;
}
inline const ::onos::topo::Waypoint& Waypoints::_internal_waypoint(int index) const {
  return waypoint_.Get(index);
}
inline const ::onos::topo::Waypoint& Waypoints::waypoint(int index) const {
  // @@protoc_insertion_point(field_get:onos.topo.Waypoints.waypoint)
  return _internal_waypoint(index);
}
inline ::onos::topo::Waypoint* Waypoints::_internal_add_waypoint() {
  return waypoint_.Add();
}
inline ::onos::topo::Waypoint* Waypoints::add_waypoint() {
  ::onos::topo::Waypoint* _add = _internal_add_waypoint();
  // @@protoc_insertion_point(field_add:onos.topo.Waypoints.waypoint)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::Waypoint >&
Waypoints::waypoint() const {
  // @@protoc_insertion_point(field_list:onos.topo.Waypoints.waypoint)
  return waypoint_;
}

// -------------------------------------------------------------------

// OrbitData

// .google.protobuf.Timestamp epoch = 1;
inline bool OrbitData::_internal_has_epoch() const {
  return this != internal_default_instance() && epoch_ != nullptr;
}
inline bool OrbitData::has_epoch() const {
  return _internal_has_epoch();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OrbitData::_internal_epoch() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = epoch_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& OrbitData::epoch() const {
  // @@protoc_insertion_point(field_get:onos.topo.OrbitData.epoch)
  return _internal_epoch();
}
inline void OrbitData::unsafe_arena_set_allocated_epoch(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* epoch) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(epoch_);
  }
  epoch_ = epoch;
  if (epoch) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.topo.OrbitData.epoch)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrbitData::release_epoch() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = epoch_;
  epoch_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrbitData::unsafe_arena_release_epoch() {
  // @@protoc_insertion_point(field_release:onos.topo.OrbitData.epoch)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = epoch_;
  epoch_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrbitData::_internal_mutable_epoch() {
  
  if (epoch_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    epoch_ = p;
  }
  return epoch_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* OrbitData::mutable_epoch() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_epoch();
  // @@protoc_insertion_point(field_mutable:onos.topo.OrbitData.epoch)
  return _msg;
}
inline void OrbitData::set_allocated_epoch(::PROTOBUF_NAMESPACE_ID::Timestamp* epoch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(epoch_);
  }
  if (epoch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(epoch));
    if (message_arena != submessage_arena) {
      epoch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, epoch, submessage_arena);
    }
    
  } else {
    
  }
  epoch_ = epoch;
  // @@protoc_insertion_point(field_set_allocated:onos.topo.OrbitData.epoch)
}

// double inclination_deg = 2;
inline void OrbitData::clear_inclination_deg() {
  inclination_deg_ = 0;
}
inline double OrbitData::_internal_inclination_deg() const {
  return inclination_deg_;
}
inline double OrbitData::inclination_deg() const {
  // @@protoc_insertion_point(field_get:onos.topo.OrbitData.inclination_deg)
  return _internal_inclination_deg();
}
inline void OrbitData::_internal_set_inclination_deg(double value) {
  
  inclination_deg_ = value;
}
inline void OrbitData::set_inclination_deg(double value) {
  _internal_set_inclination_deg(value);
  // @@protoc_insertion_point(field_set:onos.topo.OrbitData.inclination_deg)
}

// double raan_deg = 3;
inline void OrbitData::clear_raan_deg() {
  raan_deg_ = 0;
}
inline double OrbitData::_internal_raan_deg() const {
  return raan_deg_;
}
inline double OrbitData::raan_deg() const {
  // @@protoc_insertion_point(field_get:onos.topo.OrbitData.raan_deg)
  return _internal_raan_deg();
}
inline void OrbitData::_internal_set_raan_deg(double value) {
  
  raan_deg_ = value;
}
inline void OrbitData::set_raan_deg(double value) {
  _internal_set_raan_deg(value);
  // @@protoc_insertion_point(field_set:onos.topo.OrbitData.raan_deg)
}

// double e = 4;
inline void OrbitData::clear_e() {
  e_ = 0;
}
inline double OrbitData::_internal_e() const {
  return e_;
}
inline double OrbitData::e() const {
  // @@protoc_insertion_point(field_get:onos.topo.OrbitData.e)
  return _internal_e();
}
inline void OrbitData::_internal_set_e(double value) {
  
  e_ = value;
}
inline void OrbitData::set_e(double value) {
  _internal_set_e(value);
  // @@protoc_insertion_point(field_set:onos.topo.OrbitData.e)
}

// double argument_deg = 5;
inline void OrbitData::clear_argument_deg() {
  argument_deg_ = 0;
}
inline double OrbitData::_internal_argument_deg() const {
  return argument_deg_;
}
inline double OrbitData::argument_deg() const {
  // @@protoc_insertion_point(field_get:onos.topo.OrbitData.argument_deg)
  return _internal_argument_deg();
}
inline void OrbitData::_internal_set_argument_deg(double value) {
  
  argument_deg_ = value;
}
inline void OrbitData::set_argument_deg(double value) {
  _internal_set_argument_deg(value);
  // @@protoc_insertion_point(field_set:onos.topo.OrbitData.argument_deg)
}

// double anomaly_deg = 6;
inline void OrbitData::clear_anomaly_deg() {
  anomaly_deg_ = 0;
}
inline double OrbitData::_internal_anomaly_deg() const {
  return anomaly_deg_;
}
inline double OrbitData::anomaly_deg() const {
  // @@protoc_insertion_point(field_get:onos.topo.OrbitData.anomaly_deg)
  return _internal_anomaly_deg();
}
inline void OrbitData::_internal_set_anomaly_deg(double value) {
  
  anomaly_deg_ = value;
}
inline void OrbitData::set_anomaly_deg(double value) {
  _internal_set_anomaly_deg(value);
  // @@protoc_insertion_point(field_set:onos.topo.OrbitData.anomaly_deg)
}

// double mean_motion = 7;
inline void OrbitData::clear_mean_motion() {
  mean_motion_ = 0;
}
inline double OrbitData::_internal_mean_motion() const {
  return mean_motion_;
}
inline double OrbitData::mean_motion() const {
  // @@protoc_insertion_point(field_get:onos.topo.OrbitData.mean_motion)
  return _internal_mean_motion();
}
inline void OrbitData::_internal_set_mean_motion(double value) {
  
  mean_motion_ = value;
}
inline void OrbitData::set_mean_motion(double value) {
  _internal_set_mean_motion(value);
  // @@protoc_insertion_point(field_set:onos.topo.OrbitData.mean_motion)
}

// -------------------------------------------------------------------

// Motion

// .onos.topo.Location fixed_location = 1;
inline bool Motion::_internal_has_fixed_location() const {
  return motion_case() == kFixedLocation;
}
inline bool Motion::has_fixed_location() const {
  return _internal_has_fixed_location();
}
inline void Motion::set_has_fixed_location() {
  _oneof_case_[0] = kFixedLocation;
}
inline void Motion::clear_fixed_location() {
  if (_internal_has_fixed_location()) {
    if (GetArenaForAllocation() == nullptr) {
      delete motion_.fixed_location_;
    }
    clear_has_motion();
  }
}
inline ::onos::topo::Location* Motion::release_fixed_location() {
  // @@protoc_insertion_point(field_release:onos.topo.Motion.fixed_location)
  if (_internal_has_fixed_location()) {
    clear_has_motion();
      ::onos::topo::Location* temp = motion_.fixed_location_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    motion_.fixed_location_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::onos::topo::Location& Motion::_internal_fixed_location() const {
  return _internal_has_fixed_location()
      ? *motion_.fixed_location_
      : reinterpret_cast< ::onos::topo::Location&>(::onos::topo::_Location_default_instance_);
}
inline const ::onos::topo::Location& Motion::fixed_location() const {
  // @@protoc_insertion_point(field_get:onos.topo.Motion.fixed_location)
  return _internal_fixed_location();
}
inline ::onos::topo::Location* Motion::unsafe_arena_release_fixed_location() {
  // @@protoc_insertion_point(field_unsafe_arena_release:onos.topo.Motion.fixed_location)
  if (_internal_has_fixed_location()) {
    clear_has_motion();
    ::onos::topo::Location* temp = motion_.fixed_location_;
    motion_.fixed_location_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Motion::unsafe_arena_set_allocated_fixed_location(::onos::topo::Location* fixed_location) {
  clear_motion();
  if (fixed_location) {
    set_has_fixed_location();
    motion_.fixed_location_ = fixed_location;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.topo.Motion.fixed_location)
}
inline ::onos::topo::Location* Motion::_internal_mutable_fixed_location() {
  if (!_internal_has_fixed_location()) {
    clear_motion();
    set_has_fixed_location();
    motion_.fixed_location_ = CreateMaybeMessage< ::onos::topo::Location >(GetArenaForAllocation());
  }
  return motion_.fixed_location_;
}
inline ::onos::topo::Location* Motion::mutable_fixed_location() {
  ::onos::topo::Location* _msg = _internal_mutable_fixed_location();
  // @@protoc_insertion_point(field_mutable:onos.topo.Motion.fixed_location)
  return _msg;
}

// .onos.topo.Waypoints waypoints = 2;
inline bool Motion::_internal_has_waypoints() const {
  return motion_case() == kWaypoints;
}
inline bool Motion::has_waypoints() const {
  return _internal_has_waypoints();
}
inline void Motion::set_has_waypoints() {
  _oneof_case_[0] = kWaypoints;
}
inline void Motion::clear_waypoints() {
  if (_internal_has_waypoints()) {
    if (GetArenaForAllocation() == nullptr) {
      delete motion_.waypoints_;
    }
    clear_has_motion();
  }
}
inline ::onos::topo::Waypoints* Motion::release_waypoints() {
  // @@protoc_insertion_point(field_release:onos.topo.Motion.waypoints)
  if (_internal_has_waypoints()) {
    clear_has_motion();
      ::onos::topo::Waypoints* temp = motion_.waypoints_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    motion_.waypoints_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::onos::topo::Waypoints& Motion::_internal_waypoints() const {
  return _internal_has_waypoints()
      ? *motion_.waypoints_
      : reinterpret_cast< ::onos::topo::Waypoints&>(::onos::topo::_Waypoints_default_instance_);
}
inline const ::onos::topo::Waypoints& Motion::waypoints() const {
  // @@protoc_insertion_point(field_get:onos.topo.Motion.waypoints)
  return _internal_waypoints();
}
inline ::onos::topo::Waypoints* Motion::unsafe_arena_release_waypoints() {
  // @@protoc_insertion_point(field_unsafe_arena_release:onos.topo.Motion.waypoints)
  if (_internal_has_waypoints()) {
    clear_has_motion();
    ::onos::topo::Waypoints* temp = motion_.waypoints_;
    motion_.waypoints_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Motion::unsafe_arena_set_allocated_waypoints(::onos::topo::Waypoints* waypoints) {
  clear_motion();
  if (waypoints) {
    set_has_waypoints();
    motion_.waypoints_ = waypoints;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.topo.Motion.waypoints)
}
inline ::onos::topo::Waypoints* Motion::_internal_mutable_waypoints() {
  if (!_internal_has_waypoints()) {
    clear_motion();
    set_has_waypoints();
    motion_.waypoints_ = CreateMaybeMessage< ::onos::topo::Waypoints >(GetArenaForAllocation());
  }
  return motion_.waypoints_;
}
inline ::onos::topo::Waypoints* Motion::mutable_waypoints() {
  ::onos::topo::Waypoints* _msg = _internal_mutable_waypoints();
  // @@protoc_insertion_point(field_mutable:onos.topo.Motion.waypoints)
  return _msg;
}

// .onos.topo.OrbitData orbit = 3;
inline bool Motion::_internal_has_orbit() const {
  return motion_case() == kOrbit;
}
inline bool Motion::has_orbit() const {
  return _internal_has_orbit();
}
inline void Motion::set_has_orbit() {
  _oneof_case_[0] = kOrbit;
}
inline void Motion::clear_orbit() {
  if (_internal_has_orbit()) {
    if (GetArenaForAllocation() == nullptr) {
      delete motion_.orbit_;
    }
    clear_has_motion();
  }
}
inline ::onos::topo::OrbitData* Motion::release_orbit() {
  // @@protoc_insertion_point(field_release:onos.topo.Motion.orbit)
  if (_internal_has_orbit()) {
    clear_has_motion();
      ::onos::topo::OrbitData* temp = motion_.orbit_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    motion_.orbit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::onos::topo::OrbitData& Motion::_internal_orbit() const {
  return _internal_has_orbit()
      ? *motion_.orbit_
      : reinterpret_cast< ::onos::topo::OrbitData&>(::onos::topo::_OrbitData_default_instance_);
}
inline const ::onos::topo::OrbitData& Motion::orbit() const {
  // @@protoc_insertion_point(field_get:onos.topo.Motion.orbit)
  return _internal_orbit();
}
inline ::onos::topo::OrbitData* Motion::unsafe_arena_release_orbit() {
  // @@protoc_insertion_point(field_unsafe_arena_release:onos.topo.Motion.orbit)
  if (_internal_has_orbit()) {
    clear_has_motion();
    ::onos::topo::OrbitData* temp = motion_.orbit_;
    motion_.orbit_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Motion::unsafe_arena_set_allocated_orbit(::onos::topo::OrbitData* orbit) {
  clear_motion();
  if (orbit) {
    set_has_orbit();
    motion_.orbit_ = orbit;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.topo.Motion.orbit)
}
inline ::onos::topo::OrbitData* Motion::_internal_mutable_orbit() {
  if (!_internal_has_orbit()) {
    clear_motion();
    set_has_orbit();
    motion_.orbit_ = CreateMaybeMessage< ::onos::topo::OrbitData >(GetArenaForAllocation());
  }
  return motion_.orbit_;
}
inline ::onos::topo::OrbitData* Motion::mutable_orbit() {
  ::onos::topo::OrbitData* _msg = _internal_mutable_orbit();
  // @@protoc_insertion_point(field_mutable:onos.topo.Motion.orbit)
  return _msg;
}

inline bool Motion::has_motion() const {
  return motion_case() != MOTION_NOT_SET;
}
inline void Motion::clear_has_motion() {
  _oneof_case_[0] = MOTION_NOT_SET;
}
inline Motion::MotionCase Motion::motion_case() const {
  return Motion::MotionCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Coverage

// int32 height = 1;
inline void Coverage::clear_height() {
  height_ = 0;
}
inline int32_t Coverage::_internal_height() const {
  return height_;
}
inline int32_t Coverage::height() const {
  // @@protoc_insertion_point(field_get:onos.topo.Coverage.height)
  return _internal_height();
}
inline void Coverage::_internal_set_height(int32_t value) {
  
  height_ = value;
}
inline void Coverage::set_height(int32_t value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:onos.topo.Coverage.height)
}

// int32 arc_width = 2;
inline void Coverage::clear_arc_width() {
  arc_width_ = 0;
}
inline int32_t Coverage::_internal_arc_width() const {
  return arc_width_;
}
inline int32_t Coverage::arc_width() const {
  // @@protoc_insertion_point(field_get:onos.topo.Coverage.arc_width)
  return _internal_arc_width();
}
inline void Coverage::_internal_set_arc_width(int32_t value) {
  
  arc_width_ = value;
}
inline void Coverage::set_arc_width(int32_t value) {
  _internal_set_arc_width(value);
  // @@protoc_insertion_point(field_set:onos.topo.Coverage.arc_width)
}

// int32 azimuth = 3;
inline void Coverage::clear_azimuth() {
  azimuth_ = 0;
}
inline int32_t Coverage::_internal_azimuth() const {
  return azimuth_;
}
inline int32_t Coverage::azimuth() const {
  // @@protoc_insertion_point(field_get:onos.topo.Coverage.azimuth)
  return _internal_azimuth();
}
inline void Coverage::_internal_set_azimuth(int32_t value) {
  
  azimuth_ = value;
}
inline void Coverage::set_azimuth(int32_t value) {
  _internal_set_azimuth(value);
  // @@protoc_insertion_point(field_set:onos.topo.Coverage.azimuth)
}

// int32 tilt = 4;
inline void Coverage::clear_tilt() {
  tilt_ = 0;
}
inline int32_t Coverage::_internal_tilt() const {
  return tilt_;
}
inline int32_t Coverage::tilt() const {
  // @@protoc_insertion_point(field_get:onos.topo.Coverage.tilt)
  return _internal_tilt();
}
inline void Coverage::_internal_set_tilt(int32_t value) {
  
  tilt_ = value;
}
inline void Coverage::set_tilt(int32_t value) {
  _internal_set_tilt(value);
  // @@protoc_insertion_point(field_set:onos.topo.Coverage.tilt)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// E2Node

// map<string, .onos.topo.ServiceModelInfo> service_models = 1;
inline int E2Node::_internal_service_models_size() const {
  return service_models_.size();
}
inline int E2Node::service_models_size() const {
  return _internal_service_models_size();
}
inline void E2Node::clear_service_models() {
  service_models_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::topo::ServiceModelInfo >&
E2Node::_internal_service_models() const {
  return service_models_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::topo::ServiceModelInfo >&
E2Node::service_models() const {
  // @@protoc_insertion_point(field_map:onos.topo.E2Node.service_models)
  return _internal_service_models();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::topo::ServiceModelInfo >*
E2Node::_internal_mutable_service_models() {
  return service_models_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::topo::ServiceModelInfo >*
E2Node::mutable_service_models() {
  // @@protoc_insertion_point(field_mutable_map:onos.topo.E2Node.service_models)
  return _internal_mutable_service_models();
}

// -------------------------------------------------------------------

// E2NodeConfig

// repeated .onos.topo.Interface connections = 1 [(.gogoproto.nullable) = false];
inline int E2NodeConfig::_internal_connections_size() const {
  return connections_.size();
}
inline int E2NodeConfig::connections_size() const {
  return _internal_connections_size();
}
inline void E2NodeConfig::clear_connections() {
  connections_.Clear();
}
inline ::onos::topo::Interface* E2NodeConfig::mutable_connections(int index) {
  // @@protoc_insertion_point(field_mutable:onos.topo.E2NodeConfig.connections)
  return connections_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::Interface >*
E2NodeConfig::mutable_connections() {
  // @@protoc_insertion_point(field_mutable_list:onos.topo.E2NodeConfig.connections)
  return &connections_;
}
inline const ::onos::topo::Interface& E2NodeConfig::_internal_connections(int index) const {
  return connections_.Get(index);
}
inline const ::onos::topo::Interface& E2NodeConfig::connections(int index) const {
  // @@protoc_insertion_point(field_get:onos.topo.E2NodeConfig.connections)
  return _internal_connections(index);
}
inline ::onos::topo::Interface* E2NodeConfig::_internal_add_connections() {
  return connections_.Add();
}
inline ::onos::topo::Interface* E2NodeConfig::add_connections() {
  ::onos::topo::Interface* _add = _internal_add_connections();
  // @@protoc_insertion_point(field_add:onos.topo.E2NodeConfig.connections)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::Interface >&
E2NodeConfig::connections() const {
  // @@protoc_insertion_point(field_list:onos.topo.E2NodeConfig.connections)
  return connections_;
}

// uint64 version = 2;
inline void E2NodeConfig::clear_version() {
  version_ = uint64_t{0u};
}
inline uint64_t E2NodeConfig::_internal_version() const {
  return version_;
}
inline uint64_t E2NodeConfig::version() const {
  // @@protoc_insertion_point(field_get:onos.topo.E2NodeConfig.version)
  return _internal_version();
}
inline void E2NodeConfig::_internal_set_version(uint64_t value) {
  
  version_ = value;
}
inline void E2NodeConfig::set_version(uint64_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:onos.topo.E2NodeConfig.version)
}

// -------------------------------------------------------------------

// Lease

// .google.protobuf.Timestamp expiration = 1 [(.gogoproto.stdtime) = true];
inline bool Lease::_internal_has_expiration() const {
  return this != internal_default_instance() && expiration_ != nullptr;
}
inline bool Lease::has_expiration() const {
  return _internal_has_expiration();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Lease::_internal_expiration() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = expiration_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& Lease::expiration() const {
  // @@protoc_insertion_point(field_get:onos.topo.Lease.expiration)
  return _internal_expiration();
}
inline void Lease::unsafe_arena_set_allocated_expiration(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* expiration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiration_);
  }
  expiration_ = expiration;
  if (expiration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.topo.Lease.expiration)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Lease::release_expiration() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = expiration_;
  expiration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Lease::unsafe_arena_release_expiration() {
  // @@protoc_insertion_point(field_release:onos.topo.Lease.expiration)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = expiration_;
  expiration_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Lease::_internal_mutable_expiration() {
  
  if (expiration_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    expiration_ = p;
  }
  return expiration_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* Lease::mutable_expiration() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_expiration();
  // @@protoc_insertion_point(field_mutable:onos.topo.Lease.expiration)
  return _msg;
}
inline void Lease::set_allocated_expiration(::PROTOBUF_NAMESPACE_ID::Timestamp* expiration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiration_);
  }
  if (expiration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiration));
    if (message_arena != submessage_arena) {
      expiration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expiration, submessage_arena);
    }
    
  } else {
    
  }
  expiration_ = expiration;
  // @@protoc_insertion_point(field_set_allocated:onos.topo.Lease.expiration)
}

// -------------------------------------------------------------------

// Interface

// .onos.topo.Interface.Type type = 1;
inline void Interface::clear_type() {
  type_ = 0;
}
inline ::onos::topo::Interface_Type Interface::_internal_type() const {
  return static_cast< ::onos::topo::Interface_Type >(type_);
}
inline ::onos::topo::Interface_Type Interface::type() const {
  // @@protoc_insertion_point(field_get:onos.topo.Interface.type)
  return _internal_type();
}
inline void Interface::_internal_set_type(::onos::topo::Interface_Type value) {
  
  type_ = value;
}
inline void Interface::set_type(::onos::topo::Interface_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:onos.topo.Interface.type)
}

// string ip = 2 [(.gogoproto.customname) = "IP"];
inline void Interface::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& Interface::ip() const {
  // @@protoc_insertion_point(field_get:onos.topo.Interface.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Interface::set_ip(ArgT0&& arg0, ArgT... args) {
 
 ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.topo.Interface.ip)
}
inline std::string* Interface::mutable_ip() {
  std::string* _s = _internal_mutable_ip();
  // @@protoc_insertion_point(field_mutable:onos.topo.Interface.ip)
  return _s;
}
inline const std::string& Interface::_internal_ip() const {
  return ip_.Get();
}
inline void Interface::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Interface::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Interface::release_ip() {
  // @@protoc_insertion_point(field_release:onos.topo.Interface.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Interface::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ip_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.topo.Interface.ip)
}

// uint32 port = 3;
inline void Interface::clear_port() {
  port_ = 0u;
}
inline uint32_t Interface::_internal_port() const {
  return port_;
}
inline uint32_t Interface::port() const {
  // @@protoc_insertion_point(field_get:onos.topo.Interface.port)
  return _internal_port();
}
inline void Interface::_internal_set_port(uint32_t value) {
  
  port_ = value;
}
inline void Interface::set_port(uint32_t value) {
  _internal_set_port(value);
  // @@protoc_insertion_point(field_set:onos.topo.Interface.port)
}

// -------------------------------------------------------------------

// E2TInfo

// repeated .onos.topo.Interface interfaces = 1;
inline int E2TInfo::_internal_interfaces_size() const {
  return interfaces_.size();
}
inline int E2TInfo::interfaces_size() const {
  return _internal_interfaces_size();
}
inline void E2TInfo::clear_interfaces() {
  interfaces_.Clear();
}
inline ::onos::topo::Interface* E2TInfo::mutable_interfaces(int index) {
  // @@protoc_insertion_point(field_mutable:onos.topo.E2TInfo.interfaces)
  return interfaces_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::Interface >*
E2TInfo::mutable_interfaces() {
  // @@protoc_insertion_point(field_mutable_list:onos.topo.E2TInfo.interfaces)
  return &interfaces_;
}
inline const ::onos::topo::Interface& E2TInfo::_internal_interfaces(int index) const {
  return interfaces_.Get(index);
}
inline const ::onos::topo::Interface& E2TInfo::interfaces(int index) const {
  // @@protoc_insertion_point(field_get:onos.topo.E2TInfo.interfaces)
  return _internal_interfaces(index);
}
inline ::onos::topo::Interface* E2TInfo::_internal_add_interfaces() {
  return interfaces_.Add();
}
inline ::onos::topo::Interface* E2TInfo::add_interfaces() {
  ::onos::topo::Interface* _add = _internal_add_interfaces();
  // @@protoc_insertion_point(field_add:onos.topo.E2TInfo.interfaces)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::Interface >&
E2TInfo::interfaces() const {
  // @@protoc_insertion_point(field_list:onos.topo.E2TInfo.interfaces)
  return interfaces_;
}

// -------------------------------------------------------------------

// XAppInfo

// repeated .onos.topo.Interface interfaces = 1;
inline int XAppInfo::_internal_interfaces_size() const {
  return interfaces_.size();
}
inline int XAppInfo::interfaces_size() const {
  return _internal_interfaces_size();
}
inline void XAppInfo::clear_interfaces() {
  interfaces_.Clear();
}
inline ::onos::topo::Interface* XAppInfo::mutable_interfaces(int index) {
  // @@protoc_insertion_point(field_mutable:onos.topo.XAppInfo.interfaces)
  return interfaces_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::Interface >*
XAppInfo::mutable_interfaces() {
  // @@protoc_insertion_point(field_mutable_list:onos.topo.XAppInfo.interfaces)
  return &interfaces_;
}
inline const ::onos::topo::Interface& XAppInfo::_internal_interfaces(int index) const {
  return interfaces_.Get(index);
}
inline const ::onos::topo::Interface& XAppInfo::interfaces(int index) const {
  // @@protoc_insertion_point(field_get:onos.topo.XAppInfo.interfaces)
  return _internal_interfaces(index);
}
inline ::onos::topo::Interface* XAppInfo::_internal_add_interfaces() {
  return interfaces_.Add();
}
inline ::onos::topo::Interface* XAppInfo::add_interfaces() {
  ::onos::topo::Interface* _add = _internal_add_interfaces();
  // @@protoc_insertion_point(field_add:onos.topo.XAppInfo.interfaces)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::Interface >&
XAppInfo::interfaces() const {
  // @@protoc_insertion_point(field_list:onos.topo.XAppInfo.interfaces)
  return interfaces_;
}

// repeated .onos.topo.A1PolicyType a1_policy_types = 2;
inline int XAppInfo::_internal_a1_policy_types_size() const {
  return a1_policy_types_.size();
}
inline int XAppInfo::a1_policy_types_size() const {
  return _internal_a1_policy_types_size();
}
inline void XAppInfo::clear_a1_policy_types() {
  a1_policy_types_.Clear();
}
inline ::onos::topo::A1PolicyType* XAppInfo::mutable_a1_policy_types(int index) {
  // @@protoc_insertion_point(field_mutable:onos.topo.XAppInfo.a1_policy_types)
  return a1_policy_types_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::A1PolicyType >*
XAppInfo::mutable_a1_policy_types() {
  // @@protoc_insertion_point(field_mutable_list:onos.topo.XAppInfo.a1_policy_types)
  return &a1_policy_types_;
}
inline const ::onos::topo::A1PolicyType& XAppInfo::_internal_a1_policy_types(int index) const {
  return a1_policy_types_.Get(index);
}
inline const ::onos::topo::A1PolicyType& XAppInfo::a1_policy_types(int index) const {
  // @@protoc_insertion_point(field_get:onos.topo.XAppInfo.a1_policy_types)
  return _internal_a1_policy_types(index);
}
inline ::onos::topo::A1PolicyType* XAppInfo::_internal_add_a1_policy_types() {
  return a1_policy_types_.Add();
}
inline ::onos::topo::A1PolicyType* XAppInfo::add_a1_policy_types() {
  ::onos::topo::A1PolicyType* _add = _internal_add_a1_policy_types();
  // @@protoc_insertion_point(field_add:onos.topo.XAppInfo.a1_policy_types)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::A1PolicyType >&
XAppInfo::a1_policy_types() const {
  // @@protoc_insertion_point(field_list:onos.topo.XAppInfo.a1_policy_types)
  return a1_policy_types_;
}

// -------------------------------------------------------------------

// A1PolicyType

// string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.casttype) = "PolicyTypeID"];
inline void A1PolicyType::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& A1PolicyType::id() const {
  // @@protoc_insertion_point(field_get:onos.topo.A1PolicyType.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void A1PolicyType::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.topo.A1PolicyType.id)
}
inline std::string* A1PolicyType::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:onos.topo.A1PolicyType.id)
  return _s;
}
inline const std::string& A1PolicyType::_internal_id() const {
  return id_.Get();
}
inline void A1PolicyType::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* A1PolicyType::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* A1PolicyType::release_id() {
  // @@protoc_insertion_point(field_release:onos.topo.A1PolicyType.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void A1PolicyType::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.topo.A1PolicyType.id)
}

// string name = 2 [(.gogoproto.customname) = "Name", (.gogoproto.casttype) = "PolicyTypeName"];
inline void A1PolicyType::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& A1PolicyType::name() const {
  // @@protoc_insertion_point(field_get:onos.topo.A1PolicyType.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void A1PolicyType::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.topo.A1PolicyType.name)
}
inline std::string* A1PolicyType::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:onos.topo.A1PolicyType.name)
  return _s;
}
inline const std::string& A1PolicyType::_internal_name() const {
  return name_.Get();
}
inline void A1PolicyType::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* A1PolicyType::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* A1PolicyType::release_name() {
  // @@protoc_insertion_point(field_release:onos.topo.A1PolicyType.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void A1PolicyType::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.topo.A1PolicyType.name)
}

// string version = 3 [(.gogoproto.customname) = "Version", (.gogoproto.casttype) = "PolicyTypeVersion"];
inline void A1PolicyType::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& A1PolicyType::version() const {
  // @@protoc_insertion_point(field_get:onos.topo.A1PolicyType.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void A1PolicyType::set_version(ArgT0&& arg0, ArgT... args) {
 
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.topo.A1PolicyType.version)
}
inline std::string* A1PolicyType::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:onos.topo.A1PolicyType.version)
  return _s;
}
inline const std::string& A1PolicyType::_internal_version() const {
  return version_.Get();
}
inline void A1PolicyType::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* A1PolicyType::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* A1PolicyType::release_version() {
  // @@protoc_insertion_point(field_release:onos.topo.A1PolicyType.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void A1PolicyType::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.topo.A1PolicyType.version)
}

// string description = 4 [(.gogoproto.customname) = "Description", (.gogoproto.casttype) = "PolicyTypeDescription"];
inline void A1PolicyType::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& A1PolicyType::description() const {
  // @@protoc_insertion_point(field_get:onos.topo.A1PolicyType.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void A1PolicyType::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.topo.A1PolicyType.description)
}
inline std::string* A1PolicyType::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:onos.topo.A1PolicyType.description)
  return _s;
}
inline const std::string& A1PolicyType::_internal_description() const {
  return description_.Get();
}
inline void A1PolicyType::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* A1PolicyType::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* A1PolicyType::release_description() {
  // @@protoc_insertion_point(field_release:onos.topo.A1PolicyType.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void A1PolicyType::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.topo.A1PolicyType.description)
}

// -------------------------------------------------------------------

// A1TInfo

// repeated .onos.topo.Interface interfaces = 1;
inline int A1TInfo::_internal_interfaces_size() const {
  return interfaces_.size();
}
inline int A1TInfo::interfaces_size() const {
  return _internal_interfaces_size();
}
inline void A1TInfo::clear_interfaces() {
  interfaces_.Clear();
}
inline ::onos::topo::Interface* A1TInfo::mutable_interfaces(int index) {
  // @@protoc_insertion_point(field_mutable:onos.topo.A1TInfo.interfaces)
  return interfaces_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::Interface >*
A1TInfo::mutable_interfaces() {
  // @@protoc_insertion_point(field_mutable_list:onos.topo.A1TInfo.interfaces)
  return &interfaces_;
}
inline const ::onos::topo::Interface& A1TInfo::_internal_interfaces(int index) const {
  return interfaces_.Get(index);
}
inline const ::onos::topo::Interface& A1TInfo::interfaces(int index) const {
  // @@protoc_insertion_point(field_get:onos.topo.A1TInfo.interfaces)
  return _internal_interfaces(index);
}
inline ::onos::topo::Interface* A1TInfo::_internal_add_interfaces() {
  return interfaces_.Add();
}
inline ::onos::topo::Interface* A1TInfo::add_interfaces() {
  ::onos::topo::Interface* _add = _internal_add_interfaces();
  // @@protoc_insertion_point(field_add:onos.topo.A1TInfo.interfaces)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::Interface >&
A1TInfo::interfaces() const {
  // @@protoc_insertion_point(field_list:onos.topo.A1TInfo.interfaces)
  return interfaces_;
}

// -------------------------------------------------------------------

// CellGlobalID

// string value = 1;
inline void CellGlobalID::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& CellGlobalID::value() const {
  // @@protoc_insertion_point(field_get:onos.topo.CellGlobalID.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CellGlobalID::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.topo.CellGlobalID.value)
}
inline std::string* CellGlobalID::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:onos.topo.CellGlobalID.value)
  return _s;
}
inline const std::string& CellGlobalID::_internal_value() const {
  return value_.Get();
}
inline void CellGlobalID::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CellGlobalID::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CellGlobalID::release_value() {
  // @@protoc_insertion_point(field_release:onos.topo.CellGlobalID.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CellGlobalID::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (value_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.topo.CellGlobalID.value)
}

// .onos.topo.CellGlobalIDType type = 2;
inline void CellGlobalID::clear_type() {
  type_ = 0;
}
inline ::onos::topo::CellGlobalIDType CellGlobalID::_internal_type() const {
  return static_cast< ::onos::topo::CellGlobalIDType >(type_);
}
inline ::onos::topo::CellGlobalIDType CellGlobalID::type() const {
  // @@protoc_insertion_point(field_get:onos.topo.CellGlobalID.type)
  return _internal_type();
}
inline void CellGlobalID::_internal_set_type(::onos::topo::CellGlobalIDType value) {
  
  type_ = value;
}
inline void CellGlobalID::set_type(::onos::topo::CellGlobalIDType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:onos.topo.CellGlobalID.type)
}

// -------------------------------------------------------------------

// NeighborCellID

// .onos.topo.CellGlobalID cell_global_id = 1 [(.gogoproto.customname) = "CellGlobalID"];
inline bool NeighborCellID::_internal_has_cell_global_id() const {
  return this != internal_default_instance() && cell_global_id_ != nullptr;
}
inline bool NeighborCellID::has_cell_global_id() const {
  return _internal_has_cell_global_id();
}
inline void NeighborCellID::clear_cell_global_id() {
  if (GetArenaForAllocation() == nullptr && cell_global_id_ != nullptr) {
    delete cell_global_id_;
  }
  cell_global_id_ = nullptr;
}
inline const ::onos::topo::CellGlobalID& NeighborCellID::_internal_cell_global_id() const {
  const ::onos::topo::CellGlobalID* p = cell_global_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::topo::CellGlobalID&>(
      ::onos::topo::_CellGlobalID_default_instance_);
}
inline const ::onos::topo::CellGlobalID& NeighborCellID::cell_global_id() const {
  // @@protoc_insertion_point(field_get:onos.topo.NeighborCellID.cell_global_id)
  return _internal_cell_global_id();
}
inline void NeighborCellID::unsafe_arena_set_allocated_cell_global_id(
    ::onos::topo::CellGlobalID* cell_global_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_global_id_);
  }
  cell_global_id_ = cell_global_id;
  if (cell_global_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.topo.NeighborCellID.cell_global_id)
}
inline ::onos::topo::CellGlobalID* NeighborCellID::release_cell_global_id() {
  
  ::onos::topo::CellGlobalID* temp = cell_global_id_;
  cell_global_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::topo::CellGlobalID* NeighborCellID::unsafe_arena_release_cell_global_id() {
  // @@protoc_insertion_point(field_release:onos.topo.NeighborCellID.cell_global_id)
  
  ::onos::topo::CellGlobalID* temp = cell_global_id_;
  cell_global_id_ = nullptr;
  return temp;
}
inline ::onos::topo::CellGlobalID* NeighborCellID::_internal_mutable_cell_global_id() {
  
  if (cell_global_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::topo::CellGlobalID>(GetArenaForAllocation());
    cell_global_id_ = p;
  }
  return cell_global_id_;
}
inline ::onos::topo::CellGlobalID* NeighborCellID::mutable_cell_global_id() {
  ::onos::topo::CellGlobalID* _msg = _internal_mutable_cell_global_id();
  // @@protoc_insertion_point(field_mutable:onos.topo.NeighborCellID.cell_global_id)
  return _msg;
}
inline void NeighborCellID::set_allocated_cell_global_id(::onos::topo::CellGlobalID* cell_global_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete cell_global_id_;
  }
  if (cell_global_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::topo::CellGlobalID>::GetOwningArena(cell_global_id);
    if (message_arena != submessage_arena) {
      cell_global_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_global_id, submessage_arena);
    }
    
  } else {
    
  }
  cell_global_id_ = cell_global_id;
  // @@protoc_insertion_point(field_set_allocated:onos.topo.NeighborCellID.cell_global_id)
}

// string plmn_id = 2 [(.gogoproto.customname) = "PlmnID"];
inline void NeighborCellID::clear_plmn_id() {
  plmn_id_.ClearToEmpty();
}
inline const std::string& NeighborCellID::plmn_id() const {
  // @@protoc_insertion_point(field_get:onos.topo.NeighborCellID.plmn_id)
  return _internal_plmn_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NeighborCellID::set_plmn_id(ArgT0&& arg0, ArgT... args) {
 
 plmn_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.topo.NeighborCellID.plmn_id)
}
inline std::string* NeighborCellID::mutable_plmn_id() {
  std::string* _s = _internal_mutable_plmn_id();
  // @@protoc_insertion_point(field_mutable:onos.topo.NeighborCellID.plmn_id)
  return _s;
}
inline const std::string& NeighborCellID::_internal_plmn_id() const {
  return plmn_id_.Get();
}
inline void NeighborCellID::_internal_set_plmn_id(const std::string& value) {
  
  plmn_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NeighborCellID::_internal_mutable_plmn_id() {
  
  return plmn_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NeighborCellID::release_plmn_id() {
  // @@protoc_insertion_point(field_release:onos.topo.NeighborCellID.plmn_id)
  return plmn_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NeighborCellID::set_allocated_plmn_id(std::string* plmn_id) {
  if (plmn_id != nullptr) {
    
  } else {
    
  }
  plmn_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), plmn_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (plmn_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    plmn_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.topo.NeighborCellID.plmn_id)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// E2Cell

// string cell_object_id = 1 [(.gogoproto.customname) = "CellObjectID"];
inline void E2Cell::clear_cell_object_id() {
  cell_object_id_.ClearToEmpty();
}
inline const std::string& E2Cell::cell_object_id() const {
  // @@protoc_insertion_point(field_get:onos.topo.E2Cell.cell_object_id)
  return _internal_cell_object_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void E2Cell::set_cell_object_id(ArgT0&& arg0, ArgT... args) {
 
 cell_object_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.topo.E2Cell.cell_object_id)
}
inline std::string* E2Cell::mutable_cell_object_id() {
  std::string* _s = _internal_mutable_cell_object_id();
  // @@protoc_insertion_point(field_mutable:onos.topo.E2Cell.cell_object_id)
  return _s;
}
inline const std::string& E2Cell::_internal_cell_object_id() const {
  return cell_object_id_.Get();
}
inline void E2Cell::_internal_set_cell_object_id(const std::string& value) {
  
  cell_object_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* E2Cell::_internal_mutable_cell_object_id() {
  
  return cell_object_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* E2Cell::release_cell_object_id() {
  // @@protoc_insertion_point(field_release:onos.topo.E2Cell.cell_object_id)
  return cell_object_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void E2Cell::set_allocated_cell_object_id(std::string* cell_object_id) {
  if (cell_object_id != nullptr) {
    
  } else {
    
  }
  cell_object_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cell_object_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cell_object_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    cell_object_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.topo.E2Cell.cell_object_id)
}

// .onos.topo.CellGlobalID cell_global_id = 2 [(.gogoproto.customname) = "CellGlobalID"];
inline bool E2Cell::_internal_has_cell_global_id() const {
  return this != internal_default_instance() && cell_global_id_ != nullptr;
}
inline bool E2Cell::has_cell_global_id() const {
  return _internal_has_cell_global_id();
}
inline void E2Cell::clear_cell_global_id() {
  if (GetArenaForAllocation() == nullptr && cell_global_id_ != nullptr) {
    delete cell_global_id_;
  }
  cell_global_id_ = nullptr;
}
inline const ::onos::topo::CellGlobalID& E2Cell::_internal_cell_global_id() const {
  const ::onos::topo::CellGlobalID* p = cell_global_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::topo::CellGlobalID&>(
      ::onos::topo::_CellGlobalID_default_instance_);
}
inline const ::onos::topo::CellGlobalID& E2Cell::cell_global_id() const {
  // @@protoc_insertion_point(field_get:onos.topo.E2Cell.cell_global_id)
  return _internal_cell_global_id();
}
inline void E2Cell::unsafe_arena_set_allocated_cell_global_id(
    ::onos::topo::CellGlobalID* cell_global_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cell_global_id_);
  }
  cell_global_id_ = cell_global_id;
  if (cell_global_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.topo.E2Cell.cell_global_id)
}
inline ::onos::topo::CellGlobalID* E2Cell::release_cell_global_id() {
  
  ::onos::topo::CellGlobalID* temp = cell_global_id_;
  cell_global_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::topo::CellGlobalID* E2Cell::unsafe_arena_release_cell_global_id() {
  // @@protoc_insertion_point(field_release:onos.topo.E2Cell.cell_global_id)
  
  ::onos::topo::CellGlobalID* temp = cell_global_id_;
  cell_global_id_ = nullptr;
  return temp;
}
inline ::onos::topo::CellGlobalID* E2Cell::_internal_mutable_cell_global_id() {
  
  if (cell_global_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::topo::CellGlobalID>(GetArenaForAllocation());
    cell_global_id_ = p;
  }
  return cell_global_id_;
}
inline ::onos::topo::CellGlobalID* E2Cell::mutable_cell_global_id() {
  ::onos::topo::CellGlobalID* _msg = _internal_mutable_cell_global_id();
  // @@protoc_insertion_point(field_mutable:onos.topo.E2Cell.cell_global_id)
  return _msg;
}
inline void E2Cell::set_allocated_cell_global_id(::onos::topo::CellGlobalID* cell_global_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete cell_global_id_;
  }
  if (cell_global_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::topo::CellGlobalID>::GetOwningArena(cell_global_id);
    if (message_arena != submessage_arena) {
      cell_global_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cell_global_id, submessage_arena);
    }
    
  } else {
    
  }
  cell_global_id_ = cell_global_id;
  // @@protoc_insertion_point(field_set_allocated:onos.topo.E2Cell.cell_global_id)
}

// uint32 antenna_count = 3;
inline void E2Cell::clear_antenna_count() {
  antenna_count_ = 0u;
}
inline uint32_t E2Cell::_internal_antenna_count() const {
  return antenna_count_;
}
inline uint32_t E2Cell::antenna_count() const {
  // @@protoc_insertion_point(field_get:onos.topo.E2Cell.antenna_count)
  return _internal_antenna_count();
}
inline void E2Cell::_internal_set_antenna_count(uint32_t value) {
  
  antenna_count_ = value;
}
inline void E2Cell::set_antenna_count(uint32_t value) {
  _internal_set_antenna_count(value);
  // @@protoc_insertion_point(field_set:onos.topo.E2Cell.antenna_count)
}

// uint32 arfcn = 4 [(.gogoproto.customname) = "ARFCN"];
inline void E2Cell::clear_arfcn() {
  arfcn_ = 0u;
}
inline uint32_t E2Cell::_internal_arfcn() const {
  return arfcn_;
}
inline uint32_t E2Cell::arfcn() const {
  // @@protoc_insertion_point(field_get:onos.topo.E2Cell.arfcn)
  return _internal_arfcn();
}
inline void E2Cell::_internal_set_arfcn(uint32_t value) {
  
  arfcn_ = value;
}
inline void E2Cell::set_arfcn(uint32_t value) {
  _internal_set_arfcn(value);
  // @@protoc_insertion_point(field_set:onos.topo.E2Cell.arfcn)
}

// string cell_type = 5;
inline void E2Cell::clear_cell_type() {
  cell_type_.ClearToEmpty();
}
inline const std::string& E2Cell::cell_type() const {
  // @@protoc_insertion_point(field_get:onos.topo.E2Cell.cell_type)
  return _internal_cell_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void E2Cell::set_cell_type(ArgT0&& arg0, ArgT... args) {
 
 cell_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.topo.E2Cell.cell_type)
}
inline std::string* E2Cell::mutable_cell_type() {
  std::string* _s = _internal_mutable_cell_type();
  // @@protoc_insertion_point(field_mutable:onos.topo.E2Cell.cell_type)
  return _s;
}
inline const std::string& E2Cell::_internal_cell_type() const {
  return cell_type_.Get();
}
inline void E2Cell::_internal_set_cell_type(const std::string& value) {
  
  cell_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* E2Cell::_internal_mutable_cell_type() {
  
  return cell_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* E2Cell::release_cell_type() {
  // @@protoc_insertion_point(field_release:onos.topo.E2Cell.cell_type)
  return cell_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void E2Cell::set_allocated_cell_type(std::string* cell_type) {
  if (cell_type != nullptr) {
    
  } else {
    
  }
  cell_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cell_type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (cell_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    cell_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.topo.E2Cell.cell_type)
}

// uint32 pci = 6 [(.gogoproto.customname) = "PCI"];
inline void E2Cell::clear_pci() {
  pci_ = 0u;
}
inline uint32_t E2Cell::_internal_pci() const {
  return pci_;
}
inline uint32_t E2Cell::pci() const {
  // @@protoc_insertion_point(field_get:onos.topo.E2Cell.pci)
  return _internal_pci();
}
inline void E2Cell::_internal_set_pci(uint32_t value) {
  
  pci_ = value;
}
inline void E2Cell::set_pci(uint32_t value) {
  _internal_set_pci(value);
  // @@protoc_insertion_point(field_set:onos.topo.E2Cell.pci)
}

// map<string, uint32> kpi_reports = 7 [(.gogoproto.customname) = "KpiReports"];
inline int E2Cell::_internal_kpi_reports_size() const {
  return kpi_reports_.size();
}
inline int E2Cell::kpi_reports_size() const {
  return _internal_kpi_reports_size();
}
inline void E2Cell::clear_kpi_reports() {
  kpi_reports_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >&
E2Cell::_internal_kpi_reports() const {
  return kpi_reports_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >&
E2Cell::kpi_reports() const {
  // @@protoc_insertion_point(field_map:onos.topo.E2Cell.kpi_reports)
  return _internal_kpi_reports();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >*
E2Cell::_internal_mutable_kpi_reports() {
  return kpi_reports_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, uint32_t >*
E2Cell::mutable_kpi_reports() {
  // @@protoc_insertion_point(field_mutable_map:onos.topo.E2Cell.kpi_reports)
  return _internal_mutable_kpi_reports();
}

// repeated .onos.topo.NeighborCellID neighbor_cell_ids = 8 [(.gogoproto.customname) = "NeighborCellIDs"];
inline int E2Cell::_internal_neighbor_cell_ids_size() const {
  return neighbor_cell_ids_.size();
}
inline int E2Cell::neighbor_cell_ids_size() const {
  return _internal_neighbor_cell_ids_size();
}
inline void E2Cell::clear_neighbor_cell_ids() {
  neighbor_cell_ids_.Clear();
}
inline ::onos::topo::NeighborCellID* E2Cell::mutable_neighbor_cell_ids(int index) {
  // @@protoc_insertion_point(field_mutable:onos.topo.E2Cell.neighbor_cell_ids)
  return neighbor_cell_ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::NeighborCellID >*
E2Cell::mutable_neighbor_cell_ids() {
  // @@protoc_insertion_point(field_mutable_list:onos.topo.E2Cell.neighbor_cell_ids)
  return &neighbor_cell_ids_;
}
inline const ::onos::topo::NeighborCellID& E2Cell::_internal_neighbor_cell_ids(int index) const {
  return neighbor_cell_ids_.Get(index);
}
inline const ::onos::topo::NeighborCellID& E2Cell::neighbor_cell_ids(int index) const {
  // @@protoc_insertion_point(field_get:onos.topo.E2Cell.neighbor_cell_ids)
  return _internal_neighbor_cell_ids(index);
}
inline ::onos::topo::NeighborCellID* E2Cell::_internal_add_neighbor_cell_ids() {
  return neighbor_cell_ids_.Add();
}
inline ::onos::topo::NeighborCellID* E2Cell::add_neighbor_cell_ids() {
  ::onos::topo::NeighborCellID* _add = _internal_add_neighbor_cell_ids();
  // @@protoc_insertion_point(field_add:onos.topo.E2Cell.neighbor_cell_ids)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::NeighborCellID >&
E2Cell::neighbor_cell_ids() const {
  // @@protoc_insertion_point(field_list:onos.topo.E2Cell.neighbor_cell_ids)
  return neighbor_cell_ids_;
}

// -------------------------------------------------------------------

// ServiceModelInfo

// string oid = 1 [(.gogoproto.customname) = "OID"];
inline void ServiceModelInfo::clear_oid() {
  oid_.ClearToEmpty();
}
inline const std::string& ServiceModelInfo::oid() const {
  // @@protoc_insertion_point(field_get:onos.topo.ServiceModelInfo.oid)
  return _internal_oid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceModelInfo::set_oid(ArgT0&& arg0, ArgT... args) {
 
 oid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.topo.ServiceModelInfo.oid)
}
inline std::string* ServiceModelInfo::mutable_oid() {
  std::string* _s = _internal_mutable_oid();
  // @@protoc_insertion_point(field_mutable:onos.topo.ServiceModelInfo.oid)
  return _s;
}
inline const std::string& ServiceModelInfo::_internal_oid() const {
  return oid_.Get();
}
inline void ServiceModelInfo::_internal_set_oid(const std::string& value) {
  
  oid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ServiceModelInfo::_internal_mutable_oid() {
  
  return oid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ServiceModelInfo::release_oid() {
  // @@protoc_insertion_point(field_release:onos.topo.ServiceModelInfo.oid)
  return oid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ServiceModelInfo::set_allocated_oid(std::string* oid) {
  if (oid != nullptr) {
    
  } else {
    
  }
  oid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), oid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (oid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    oid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.topo.ServiceModelInfo.oid)
}

// string name = 2;
inline void ServiceModelInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ServiceModelInfo::name() const {
  // @@protoc_insertion_point(field_get:onos.topo.ServiceModelInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceModelInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.topo.ServiceModelInfo.name)
}
inline std::string* ServiceModelInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:onos.topo.ServiceModelInfo.name)
  return _s;
}
inline const std::string& ServiceModelInfo::_internal_name() const {
  return name_.Get();
}
inline void ServiceModelInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ServiceModelInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ServiceModelInfo::release_name() {
  // @@protoc_insertion_point(field_release:onos.topo.ServiceModelInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ServiceModelInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.topo.ServiceModelInfo.name)
}

// repeated .google.protobuf.Any ran_functions = 3;
inline int ServiceModelInfo::_internal_ran_functions_size() const {
  return ran_functions_.size();
}
inline int ServiceModelInfo::ran_functions_size() const {
  return _internal_ran_functions_size();
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ServiceModelInfo::mutable_ran_functions(int index) {
  // @@protoc_insertion_point(field_mutable:onos.topo.ServiceModelInfo.ran_functions)
  return ran_functions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >*
ServiceModelInfo::mutable_ran_functions() {
  // @@protoc_insertion_point(field_mutable_list:onos.topo.ServiceModelInfo.ran_functions)
  return &ran_functions_;
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& ServiceModelInfo::_internal_ran_functions(int index) const {
  return ran_functions_.Get(index);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& ServiceModelInfo::ran_functions(int index) const {
  // @@protoc_insertion_point(field_get:onos.topo.ServiceModelInfo.ran_functions)
  return _internal_ran_functions(index);
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ServiceModelInfo::_internal_add_ran_functions() {
  return ran_functions_.Add();
}
inline ::PROTOBUF_NAMESPACE_ID::Any* ServiceModelInfo::add_ran_functions() {
  ::PROTOBUF_NAMESPACE_ID::Any* _add = _internal_add_ran_functions();
  // @@protoc_insertion_point(field_add:onos.topo.ServiceModelInfo.ran_functions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::PROTOBUF_NAMESPACE_ID::Any >&
ServiceModelInfo::ran_functions() const {
  // @@protoc_insertion_point(field_list:onos.topo.ServiceModelInfo.ran_functions)
  return ran_functions_;
}

// repeated uint32 ranFunctionIDs = 4;
inline int ServiceModelInfo::_internal_ranfunctionids_size() const {
  return ranfunctionids_.size();
}
inline int ServiceModelInfo::ranfunctionids_size() const {
  return _internal_ranfunctionids_size();
}
inline void ServiceModelInfo::clear_ranfunctionids() {
  ranfunctionids_.Clear();
}
inline uint32_t ServiceModelInfo::_internal_ranfunctionids(int index) const {
  return ranfunctionids_.Get(index);
}
inline uint32_t ServiceModelInfo::ranfunctionids(int index) const {
  // @@protoc_insertion_point(field_get:onos.topo.ServiceModelInfo.ranFunctionIDs)
  return _internal_ranfunctionids(index);
}
inline void ServiceModelInfo::set_ranfunctionids(int index, uint32_t value) {
  ranfunctionids_.Set(index, value);
  // @@protoc_insertion_point(field_set:onos.topo.ServiceModelInfo.ranFunctionIDs)
}
inline void ServiceModelInfo::_internal_add_ranfunctionids(uint32_t value) {
  ranfunctionids_.Add(value);
}
inline void ServiceModelInfo::add_ranfunctionids(uint32_t value) {
  _internal_add_ranfunctionids(value);
  // @@protoc_insertion_point(field_add:onos.topo.ServiceModelInfo.ranFunctionIDs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ServiceModelInfo::_internal_ranfunctionids() const {
  return ranfunctionids_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >&
ServiceModelInfo::ranfunctionids() const {
  // @@protoc_insertion_point(field_list:onos.topo.ServiceModelInfo.ranFunctionIDs)
  return _internal_ranfunctionids();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ServiceModelInfo::_internal_mutable_ranfunctionids() {
  return &ranfunctionids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint32_t >*
ServiceModelInfo::mutable_ranfunctionids() {
  // @@protoc_insertion_point(field_mutable_list:onos.topo.ServiceModelInfo.ranFunctionIDs)
  return _internal_mutable_ranfunctionids();
}

// -------------------------------------------------------------------

// RCRanFunction

// string id = 1 [(.gogoproto.customname) = "ID"];
inline void RCRanFunction::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& RCRanFunction::id() const {
  // @@protoc_insertion_point(field_get:onos.topo.RCRanFunction.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RCRanFunction::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.topo.RCRanFunction.id)
}
inline std::string* RCRanFunction::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:onos.topo.RCRanFunction.id)
  return _s;
}
inline const std::string& RCRanFunction::_internal_id() const {
  return id_.Get();
}
inline void RCRanFunction::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RCRanFunction::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RCRanFunction::release_id() {
  // @@protoc_insertion_point(field_release:onos.topo.RCRanFunction.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RCRanFunction::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.topo.RCRanFunction.id)
}

// repeated .onos.topo.RCReportStyle report_styles = 2;
inline int RCRanFunction::_internal_report_styles_size() const {
  return report_styles_.size();
}
inline int RCRanFunction::report_styles_size() const {
  return _internal_report_styles_size();
}
inline void RCRanFunction::clear_report_styles() {
  report_styles_.Clear();
}
inline ::onos::topo::RCReportStyle* RCRanFunction::mutable_report_styles(int index) {
  // @@protoc_insertion_point(field_mutable:onos.topo.RCRanFunction.report_styles)
  return report_styles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RCReportStyle >*
RCRanFunction::mutable_report_styles() {
  // @@protoc_insertion_point(field_mutable_list:onos.topo.RCRanFunction.report_styles)
  return &report_styles_;
}
inline const ::onos::topo::RCReportStyle& RCRanFunction::_internal_report_styles(int index) const {
  return report_styles_.Get(index);
}
inline const ::onos::topo::RCReportStyle& RCRanFunction::report_styles(int index) const {
  // @@protoc_insertion_point(field_get:onos.topo.RCRanFunction.report_styles)
  return _internal_report_styles(index);
}
inline ::onos::topo::RCReportStyle* RCRanFunction::_internal_add_report_styles() {
  return report_styles_.Add();
}
inline ::onos::topo::RCReportStyle* RCRanFunction::add_report_styles() {
  ::onos::topo::RCReportStyle* _add = _internal_add_report_styles();
  // @@protoc_insertion_point(field_add:onos.topo.RCRanFunction.report_styles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RCReportStyle >&
RCRanFunction::report_styles() const {
  // @@protoc_insertion_point(field_list:onos.topo.RCRanFunction.report_styles)
  return report_styles_;
}

// repeated .onos.topo.RCInsertStyle insert_styles = 3;
inline int RCRanFunction::_internal_insert_styles_size() const {
  return insert_styles_.size();
}
inline int RCRanFunction::insert_styles_size() const {
  return _internal_insert_styles_size();
}
inline void RCRanFunction::clear_insert_styles() {
  insert_styles_.Clear();
}
inline ::onos::topo::RCInsertStyle* RCRanFunction::mutable_insert_styles(int index) {
  // @@protoc_insertion_point(field_mutable:onos.topo.RCRanFunction.insert_styles)
  return insert_styles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RCInsertStyle >*
RCRanFunction::mutable_insert_styles() {
  // @@protoc_insertion_point(field_mutable_list:onos.topo.RCRanFunction.insert_styles)
  return &insert_styles_;
}
inline const ::onos::topo::RCInsertStyle& RCRanFunction::_internal_insert_styles(int index) const {
  return insert_styles_.Get(index);
}
inline const ::onos::topo::RCInsertStyle& RCRanFunction::insert_styles(int index) const {
  // @@protoc_insertion_point(field_get:onos.topo.RCRanFunction.insert_styles)
  return _internal_insert_styles(index);
}
inline ::onos::topo::RCInsertStyle* RCRanFunction::_internal_add_insert_styles() {
  return insert_styles_.Add();
}
inline ::onos::topo::RCInsertStyle* RCRanFunction::add_insert_styles() {
  ::onos::topo::RCInsertStyle* _add = _internal_add_insert_styles();
  // @@protoc_insertion_point(field_add:onos.topo.RCRanFunction.insert_styles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RCInsertStyle >&
RCRanFunction::insert_styles() const {
  // @@protoc_insertion_point(field_list:onos.topo.RCRanFunction.insert_styles)
  return insert_styles_;
}

// repeated .onos.topo.RCEventTriggerStyle event_trigger_styles = 4;
inline int RCRanFunction::_internal_event_trigger_styles_size() const {
  return event_trigger_styles_.size();
}
inline int RCRanFunction::event_trigger_styles_size() const {
  return _internal_event_trigger_styles_size();
}
inline void RCRanFunction::clear_event_trigger_styles() {
  event_trigger_styles_.Clear();
}
inline ::onos::topo::RCEventTriggerStyle* RCRanFunction::mutable_event_trigger_styles(int index) {
  // @@protoc_insertion_point(field_mutable:onos.topo.RCRanFunction.event_trigger_styles)
  return event_trigger_styles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RCEventTriggerStyle >*
RCRanFunction::mutable_event_trigger_styles() {
  // @@protoc_insertion_point(field_mutable_list:onos.topo.RCRanFunction.event_trigger_styles)
  return &event_trigger_styles_;
}
inline const ::onos::topo::RCEventTriggerStyle& RCRanFunction::_internal_event_trigger_styles(int index) const {
  return event_trigger_styles_.Get(index);
}
inline const ::onos::topo::RCEventTriggerStyle& RCRanFunction::event_trigger_styles(int index) const {
  // @@protoc_insertion_point(field_get:onos.topo.RCRanFunction.event_trigger_styles)
  return _internal_event_trigger_styles(index);
}
inline ::onos::topo::RCEventTriggerStyle* RCRanFunction::_internal_add_event_trigger_styles() {
  return event_trigger_styles_.Add();
}
inline ::onos::topo::RCEventTriggerStyle* RCRanFunction::add_event_trigger_styles() {
  ::onos::topo::RCEventTriggerStyle* _add = _internal_add_event_trigger_styles();
  // @@protoc_insertion_point(field_add:onos.topo.RCRanFunction.event_trigger_styles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RCEventTriggerStyle >&
RCRanFunction::event_trigger_styles() const {
  // @@protoc_insertion_point(field_list:onos.topo.RCRanFunction.event_trigger_styles)
  return event_trigger_styles_;
}

// repeated .onos.topo.RCPolicyStyle policy_styles = 5;
inline int RCRanFunction::_internal_policy_styles_size() const {
  return policy_styles_.size();
}
inline int RCRanFunction::policy_styles_size() const {
  return _internal_policy_styles_size();
}
inline void RCRanFunction::clear_policy_styles() {
  policy_styles_.Clear();
}
inline ::onos::topo::RCPolicyStyle* RCRanFunction::mutable_policy_styles(int index) {
  // @@protoc_insertion_point(field_mutable:onos.topo.RCRanFunction.policy_styles)
  return policy_styles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RCPolicyStyle >*
RCRanFunction::mutable_policy_styles() {
  // @@protoc_insertion_point(field_mutable_list:onos.topo.RCRanFunction.policy_styles)
  return &policy_styles_;
}
inline const ::onos::topo::RCPolicyStyle& RCRanFunction::_internal_policy_styles(int index) const {
  return policy_styles_.Get(index);
}
inline const ::onos::topo::RCPolicyStyle& RCRanFunction::policy_styles(int index) const {
  // @@protoc_insertion_point(field_get:onos.topo.RCRanFunction.policy_styles)
  return _internal_policy_styles(index);
}
inline ::onos::topo::RCPolicyStyle* RCRanFunction::_internal_add_policy_styles() {
  return policy_styles_.Add();
}
inline ::onos::topo::RCPolicyStyle* RCRanFunction::add_policy_styles() {
  ::onos::topo::RCPolicyStyle* _add = _internal_add_policy_styles();
  // @@protoc_insertion_point(field_add:onos.topo.RCRanFunction.policy_styles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RCPolicyStyle >&
RCRanFunction::policy_styles() const {
  // @@protoc_insertion_point(field_list:onos.topo.RCRanFunction.policy_styles)
  return policy_styles_;
}

// repeated .onos.topo.RCControlStyle control_styles = 6;
inline int RCRanFunction::_internal_control_styles_size() const {
  return control_styles_.size();
}
inline int RCRanFunction::control_styles_size() const {
  return _internal_control_styles_size();
}
inline void RCRanFunction::clear_control_styles() {
  control_styles_.Clear();
}
inline ::onos::topo::RCControlStyle* RCRanFunction::mutable_control_styles(int index) {
  // @@protoc_insertion_point(field_mutable:onos.topo.RCRanFunction.control_styles)
  return control_styles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RCControlStyle >*
RCRanFunction::mutable_control_styles() {
  // @@protoc_insertion_point(field_mutable_list:onos.topo.RCRanFunction.control_styles)
  return &control_styles_;
}
inline const ::onos::topo::RCControlStyle& RCRanFunction::_internal_control_styles(int index) const {
  return control_styles_.Get(index);
}
inline const ::onos::topo::RCControlStyle& RCRanFunction::control_styles(int index) const {
  // @@protoc_insertion_point(field_get:onos.topo.RCRanFunction.control_styles)
  return _internal_control_styles(index);
}
inline ::onos::topo::RCControlStyle* RCRanFunction::_internal_add_control_styles() {
  return control_styles_.Add();
}
inline ::onos::topo::RCControlStyle* RCRanFunction::add_control_styles() {
  ::onos::topo::RCControlStyle* _add = _internal_add_control_styles();
  // @@protoc_insertion_point(field_add:onos.topo.RCRanFunction.control_styles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RCControlStyle >&
RCRanFunction::control_styles() const {
  // @@protoc_insertion_point(field_list:onos.topo.RCRanFunction.control_styles)
  return control_styles_;
}

// -------------------------------------------------------------------

// MHORanFunction

// string id = 1 [(.gogoproto.customname) = "ID"];
inline void MHORanFunction::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& MHORanFunction::id() const {
  // @@protoc_insertion_point(field_get:onos.topo.MHORanFunction.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MHORanFunction::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.topo.MHORanFunction.id)
}
inline std::string* MHORanFunction::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:onos.topo.MHORanFunction.id)
  return _s;
}
inline const std::string& MHORanFunction::_internal_id() const {
  return id_.Get();
}
inline void MHORanFunction::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MHORanFunction::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MHORanFunction::release_id() {
  // @@protoc_insertion_point(field_release:onos.topo.MHORanFunction.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MHORanFunction::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.topo.MHORanFunction.id)
}

// repeated .onos.topo.MHOReportStyle report_styles = 2;
inline int MHORanFunction::_internal_report_styles_size() const {
  return report_styles_.size();
}
inline int MHORanFunction::report_styles_size() const {
  return _internal_report_styles_size();
}
inline void MHORanFunction::clear_report_styles() {
  report_styles_.Clear();
}
inline ::onos::topo::MHOReportStyle* MHORanFunction::mutable_report_styles(int index) {
  // @@protoc_insertion_point(field_mutable:onos.topo.MHORanFunction.report_styles)
  return report_styles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::MHOReportStyle >*
MHORanFunction::mutable_report_styles() {
  // @@protoc_insertion_point(field_mutable_list:onos.topo.MHORanFunction.report_styles)
  return &report_styles_;
}
inline const ::onos::topo::MHOReportStyle& MHORanFunction::_internal_report_styles(int index) const {
  return report_styles_.Get(index);
}
inline const ::onos::topo::MHOReportStyle& MHORanFunction::report_styles(int index) const {
  // @@protoc_insertion_point(field_get:onos.topo.MHORanFunction.report_styles)
  return _internal_report_styles(index);
}
inline ::onos::topo::MHOReportStyle* MHORanFunction::_internal_add_report_styles() {
  return report_styles_.Add();
}
inline ::onos::topo::MHOReportStyle* MHORanFunction::add_report_styles() {
  ::onos::topo::MHOReportStyle* _add = _internal_add_report_styles();
  // @@protoc_insertion_point(field_add:onos.topo.MHORanFunction.report_styles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::MHOReportStyle >&
MHORanFunction::report_styles() const {
  // @@protoc_insertion_point(field_list:onos.topo.MHORanFunction.report_styles)
  return report_styles_;
}

// -------------------------------------------------------------------

// KPMRanFunction

// string id = 1 [(.gogoproto.customname) = "ID"];
inline void KPMRanFunction::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& KPMRanFunction::id() const {
  // @@protoc_insertion_point(field_get:onos.topo.KPMRanFunction.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KPMRanFunction::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.topo.KPMRanFunction.id)
}
inline std::string* KPMRanFunction::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:onos.topo.KPMRanFunction.id)
  return _s;
}
inline const std::string& KPMRanFunction::_internal_id() const {
  return id_.Get();
}
inline void KPMRanFunction::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KPMRanFunction::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KPMRanFunction::release_id() {
  // @@protoc_insertion_point(field_release:onos.topo.KPMRanFunction.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void KPMRanFunction::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.topo.KPMRanFunction.id)
}

// repeated .onos.topo.KPMReportStyle report_styles = 2;
inline int KPMRanFunction::_internal_report_styles_size() const {
  return report_styles_.size();
}
inline int KPMRanFunction::report_styles_size() const {
  return _internal_report_styles_size();
}
inline void KPMRanFunction::clear_report_styles() {
  report_styles_.Clear();
}
inline ::onos::topo::KPMReportStyle* KPMRanFunction::mutable_report_styles(int index) {
  // @@protoc_insertion_point(field_mutable:onos.topo.KPMRanFunction.report_styles)
  return report_styles_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::KPMReportStyle >*
KPMRanFunction::mutable_report_styles() {
  // @@protoc_insertion_point(field_mutable_list:onos.topo.KPMRanFunction.report_styles)
  return &report_styles_;
}
inline const ::onos::topo::KPMReportStyle& KPMRanFunction::_internal_report_styles(int index) const {
  return report_styles_.Get(index);
}
inline const ::onos::topo::KPMReportStyle& KPMRanFunction::report_styles(int index) const {
  // @@protoc_insertion_point(field_get:onos.topo.KPMRanFunction.report_styles)
  return _internal_report_styles(index);
}
inline ::onos::topo::KPMReportStyle* KPMRanFunction::_internal_add_report_styles() {
  return report_styles_.Add();
}
inline ::onos::topo::KPMReportStyle* KPMRanFunction::add_report_styles() {
  ::onos::topo::KPMReportStyle* _add = _internal_add_report_styles();
  // @@protoc_insertion_point(field_add:onos.topo.KPMRanFunction.report_styles)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::KPMReportStyle >&
KPMRanFunction::report_styles() const {
  // @@protoc_insertion_point(field_list:onos.topo.KPMRanFunction.report_styles)
  return report_styles_;
}

// -------------------------------------------------------------------

// RSMRanFunction

// string id = 1 [(.gogoproto.customname) = "ID"];
inline void RSMRanFunction::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& RSMRanFunction::id() const {
  // @@protoc_insertion_point(field_get:onos.topo.RSMRanFunction.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RSMRanFunction::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.topo.RSMRanFunction.id)
}
inline std::string* RSMRanFunction::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:onos.topo.RSMRanFunction.id)
  return _s;
}
inline const std::string& RSMRanFunction::_internal_id() const {
  return id_.Get();
}
inline void RSMRanFunction::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RSMRanFunction::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RSMRanFunction::release_id() {
  // @@protoc_insertion_point(field_release:onos.topo.RSMRanFunction.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RSMRanFunction::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.topo.RSMRanFunction.id)
}

// repeated .onos.topo.RSMNodeSlicingCapabilityItem ric_slicing_node_capability_list = 2;
inline int RSMRanFunction::_internal_ric_slicing_node_capability_list_size() const {
  return ric_slicing_node_capability_list_.size();
}
inline int RSMRanFunction::ric_slicing_node_capability_list_size() const {
  return _internal_ric_slicing_node_capability_list_size();
}
inline void RSMRanFunction::clear_ric_slicing_node_capability_list() {
  ric_slicing_node_capability_list_.Clear();
}
inline ::onos::topo::RSMNodeSlicingCapabilityItem* RSMRanFunction::mutable_ric_slicing_node_capability_list(int index) {
  // @@protoc_insertion_point(field_mutable:onos.topo.RSMRanFunction.ric_slicing_node_capability_list)
  return ric_slicing_node_capability_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RSMNodeSlicingCapabilityItem >*
RSMRanFunction::mutable_ric_slicing_node_capability_list() {
  // @@protoc_insertion_point(field_mutable_list:onos.topo.RSMRanFunction.ric_slicing_node_capability_list)
  return &ric_slicing_node_capability_list_;
}
inline const ::onos::topo::RSMNodeSlicingCapabilityItem& RSMRanFunction::_internal_ric_slicing_node_capability_list(int index) const {
  return ric_slicing_node_capability_list_.Get(index);
}
inline const ::onos::topo::RSMNodeSlicingCapabilityItem& RSMRanFunction::ric_slicing_node_capability_list(int index) const {
  // @@protoc_insertion_point(field_get:onos.topo.RSMRanFunction.ric_slicing_node_capability_list)
  return _internal_ric_slicing_node_capability_list(index);
}
inline ::onos::topo::RSMNodeSlicingCapabilityItem* RSMRanFunction::_internal_add_ric_slicing_node_capability_list() {
  return ric_slicing_node_capability_list_.Add();
}
inline ::onos::topo::RSMNodeSlicingCapabilityItem* RSMRanFunction::add_ric_slicing_node_capability_list() {
  ::onos::topo::RSMNodeSlicingCapabilityItem* _add = _internal_add_ric_slicing_node_capability_list();
  // @@protoc_insertion_point(field_add:onos.topo.RSMRanFunction.ric_slicing_node_capability_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RSMNodeSlicingCapabilityItem >&
RSMRanFunction::ric_slicing_node_capability_list() const {
  // @@protoc_insertion_point(field_list:onos.topo.RSMRanFunction.ric_slicing_node_capability_list)
  return ric_slicing_node_capability_list_;
}

// -------------------------------------------------------------------

// RCEventTriggerStyle

// string name = 1;
inline void RCEventTriggerStyle::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& RCEventTriggerStyle::name() const {
  // @@protoc_insertion_point(field_get:onos.topo.RCEventTriggerStyle.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RCEventTriggerStyle::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.topo.RCEventTriggerStyle.name)
}
inline std::string* RCEventTriggerStyle::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:onos.topo.RCEventTriggerStyle.name)
  return _s;
}
inline const std::string& RCEventTriggerStyle::_internal_name() const {
  return name_.Get();
}
inline void RCEventTriggerStyle::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RCEventTriggerStyle::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RCEventTriggerStyle::release_name() {
  // @@protoc_insertion_point(field_release:onos.topo.RCEventTriggerStyle.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RCEventTriggerStyle::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.topo.RCEventTriggerStyle.name)
}

// int32 type = 2;
inline void RCEventTriggerStyle::clear_type() {
  type_ = 0;
}
inline int32_t RCEventTriggerStyle::_internal_type() const {
  return type_;
}
inline int32_t RCEventTriggerStyle::type() const {
  // @@protoc_insertion_point(field_get:onos.topo.RCEventTriggerStyle.type)
  return _internal_type();
}
inline void RCEventTriggerStyle::_internal_set_type(int32_t value) {
  
  type_ = value;
}
inline void RCEventTriggerStyle::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:onos.topo.RCEventTriggerStyle.type)
}

// int32 format_type = 3;
inline void RCEventTriggerStyle::clear_format_type() {
  format_type_ = 0;
}
inline int32_t RCEventTriggerStyle::_internal_format_type() const {
  return format_type_;
}
inline int32_t RCEventTriggerStyle::format_type() const {
  // @@protoc_insertion_point(field_get:onos.topo.RCEventTriggerStyle.format_type)
  return _internal_format_type();
}
inline void RCEventTriggerStyle::_internal_set_format_type(int32_t value) {
  
  format_type_ = value;
}
inline void RCEventTriggerStyle::set_format_type(int32_t value) {
  _internal_set_format_type(value);
  // @@protoc_insertion_point(field_set:onos.topo.RCEventTriggerStyle.format_type)
}

// -------------------------------------------------------------------

// RCReportStyle

// string name = 1;
inline void RCReportStyle::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& RCReportStyle::name() const {
  // @@protoc_insertion_point(field_get:onos.topo.RCReportStyle.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RCReportStyle::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.topo.RCReportStyle.name)
}
inline std::string* RCReportStyle::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:onos.topo.RCReportStyle.name)
  return _s;
}
inline const std::string& RCReportStyle::_internal_name() const {
  return name_.Get();
}
inline void RCReportStyle::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RCReportStyle::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RCReportStyle::release_name() {
  // @@protoc_insertion_point(field_release:onos.topo.RCReportStyle.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RCReportStyle::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.topo.RCReportStyle.name)
}

// int32 type = 2;
inline void RCReportStyle::clear_type() {
  type_ = 0;
}
inline int32_t RCReportStyle::_internal_type() const {
  return type_;
}
inline int32_t RCReportStyle::type() const {
  // @@protoc_insertion_point(field_get:onos.topo.RCReportStyle.type)
  return _internal_type();
}
inline void RCReportStyle::_internal_set_type(int32_t value) {
  
  type_ = value;
}
inline void RCReportStyle::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:onos.topo.RCReportStyle.type)
}

// repeated .onos.topo.RANParameter ran_parameters = 3;
inline int RCReportStyle::_internal_ran_parameters_size() const {
  return ran_parameters_.size();
}
inline int RCReportStyle::ran_parameters_size() const {
  return _internal_ran_parameters_size();
}
inline void RCReportStyle::clear_ran_parameters() {
  ran_parameters_.Clear();
}
inline ::onos::topo::RANParameter* RCReportStyle::mutable_ran_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:onos.topo.RCReportStyle.ran_parameters)
  return ran_parameters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RANParameter >*
RCReportStyle::mutable_ran_parameters() {
  // @@protoc_insertion_point(field_mutable_list:onos.topo.RCReportStyle.ran_parameters)
  return &ran_parameters_;
}
inline const ::onos::topo::RANParameter& RCReportStyle::_internal_ran_parameters(int index) const {
  return ran_parameters_.Get(index);
}
inline const ::onos::topo::RANParameter& RCReportStyle::ran_parameters(int index) const {
  // @@protoc_insertion_point(field_get:onos.topo.RCReportStyle.ran_parameters)
  return _internal_ran_parameters(index);
}
inline ::onos::topo::RANParameter* RCReportStyle::_internal_add_ran_parameters() {
  return ran_parameters_.Add();
}
inline ::onos::topo::RANParameter* RCReportStyle::add_ran_parameters() {
  ::onos::topo::RANParameter* _add = _internal_add_ran_parameters();
  // @@protoc_insertion_point(field_add:onos.topo.RCReportStyle.ran_parameters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RANParameter >&
RCReportStyle::ran_parameters() const {
  // @@protoc_insertion_point(field_list:onos.topo.RCReportStyle.ran_parameters)
  return ran_parameters_;
}

// -------------------------------------------------------------------

// RCInsertStyle

// string name = 1;
inline void RCInsertStyle::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& RCInsertStyle::name() const {
  // @@protoc_insertion_point(field_get:onos.topo.RCInsertStyle.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RCInsertStyle::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.topo.RCInsertStyle.name)
}
inline std::string* RCInsertStyle::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:onos.topo.RCInsertStyle.name)
  return _s;
}
inline const std::string& RCInsertStyle::_internal_name() const {
  return name_.Get();
}
inline void RCInsertStyle::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RCInsertStyle::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RCInsertStyle::release_name() {
  // @@protoc_insertion_point(field_release:onos.topo.RCInsertStyle.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RCInsertStyle::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.topo.RCInsertStyle.name)
}

// int32 type = 2;
inline void RCInsertStyle::clear_type() {
  type_ = 0;
}
inline int32_t RCInsertStyle::_internal_type() const {
  return type_;
}
inline int32_t RCInsertStyle::type() const {
  // @@protoc_insertion_point(field_get:onos.topo.RCInsertStyle.type)
  return _internal_type();
}
inline void RCInsertStyle::_internal_set_type(int32_t value) {
  
  type_ = value;
}
inline void RCInsertStyle::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:onos.topo.RCInsertStyle.type)
}

// repeated .onos.topo.InsertIndication insert_indications = 3;
inline int RCInsertStyle::_internal_insert_indications_size() const {
  return insert_indications_.size();
}
inline int RCInsertStyle::insert_indications_size() const {
  return _internal_insert_indications_size();
}
inline void RCInsertStyle::clear_insert_indications() {
  insert_indications_.Clear();
}
inline ::onos::topo::InsertIndication* RCInsertStyle::mutable_insert_indications(int index) {
  // @@protoc_insertion_point(field_mutable:onos.topo.RCInsertStyle.insert_indications)
  return insert_indications_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::InsertIndication >*
RCInsertStyle::mutable_insert_indications() {
  // @@protoc_insertion_point(field_mutable_list:onos.topo.RCInsertStyle.insert_indications)
  return &insert_indications_;
}
inline const ::onos::topo::InsertIndication& RCInsertStyle::_internal_insert_indications(int index) const {
  return insert_indications_.Get(index);
}
inline const ::onos::topo::InsertIndication& RCInsertStyle::insert_indications(int index) const {
  // @@protoc_insertion_point(field_get:onos.topo.RCInsertStyle.insert_indications)
  return _internal_insert_indications(index);
}
inline ::onos::topo::InsertIndication* RCInsertStyle::_internal_add_insert_indications() {
  return insert_indications_.Add();
}
inline ::onos::topo::InsertIndication* RCInsertStyle::add_insert_indications() {
  ::onos::topo::InsertIndication* _add = _internal_add_insert_indications();
  // @@protoc_insertion_point(field_add:onos.topo.RCInsertStyle.insert_indications)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::InsertIndication >&
RCInsertStyle::insert_indications() const {
  // @@protoc_insertion_point(field_list:onos.topo.RCInsertStyle.insert_indications)
  return insert_indications_;
}

// -------------------------------------------------------------------

// RCPolicyStyle

// string name = 1;
inline void RCPolicyStyle::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& RCPolicyStyle::name() const {
  // @@protoc_insertion_point(field_get:onos.topo.RCPolicyStyle.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RCPolicyStyle::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.topo.RCPolicyStyle.name)
}
inline std::string* RCPolicyStyle::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:onos.topo.RCPolicyStyle.name)
  return _s;
}
inline const std::string& RCPolicyStyle::_internal_name() const {
  return name_.Get();
}
inline void RCPolicyStyle::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RCPolicyStyle::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RCPolicyStyle::release_name() {
  // @@protoc_insertion_point(field_release:onos.topo.RCPolicyStyle.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RCPolicyStyle::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.topo.RCPolicyStyle.name)
}

// int32 type = 2;
inline void RCPolicyStyle::clear_type() {
  type_ = 0;
}
inline int32_t RCPolicyStyle::_internal_type() const {
  return type_;
}
inline int32_t RCPolicyStyle::type() const {
  // @@protoc_insertion_point(field_get:onos.topo.RCPolicyStyle.type)
  return _internal_type();
}
inline void RCPolicyStyle::_internal_set_type(int32_t value) {
  
  type_ = value;
}
inline void RCPolicyStyle::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:onos.topo.RCPolicyStyle.type)
}

// -------------------------------------------------------------------

// RCControlStyle

// string name = 1;
inline void RCControlStyle::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& RCControlStyle::name() const {
  // @@protoc_insertion_point(field_get:onos.topo.RCControlStyle.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RCControlStyle::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.topo.RCControlStyle.name)
}
inline std::string* RCControlStyle::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:onos.topo.RCControlStyle.name)
  return _s;
}
inline const std::string& RCControlStyle::_internal_name() const {
  return name_.Get();
}
inline void RCControlStyle::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RCControlStyle::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RCControlStyle::release_name() {
  // @@protoc_insertion_point(field_release:onos.topo.RCControlStyle.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RCControlStyle::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.topo.RCControlStyle.name)
}

// int32 type = 2;
inline void RCControlStyle::clear_type() {
  type_ = 0;
}
inline int32_t RCControlStyle::_internal_type() const {
  return type_;
}
inline int32_t RCControlStyle::type() const {
  // @@protoc_insertion_point(field_get:onos.topo.RCControlStyle.type)
  return _internal_type();
}
inline void RCControlStyle::_internal_set_type(int32_t value) {
  
  type_ = value;
}
inline void RCControlStyle::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:onos.topo.RCControlStyle.type)
}

// int32 header_format_type = 3;
inline void RCControlStyle::clear_header_format_type() {
  header_format_type_ = 0;
}
inline int32_t RCControlStyle::_internal_header_format_type() const {
  return header_format_type_;
}
inline int32_t RCControlStyle::header_format_type() const {
  // @@protoc_insertion_point(field_get:onos.topo.RCControlStyle.header_format_type)
  return _internal_header_format_type();
}
inline void RCControlStyle::_internal_set_header_format_type(int32_t value) {
  
  header_format_type_ = value;
}
inline void RCControlStyle::set_header_format_type(int32_t value) {
  _internal_set_header_format_type(value);
  // @@protoc_insertion_point(field_set:onos.topo.RCControlStyle.header_format_type)
}

// int32 message_format_type = 4;
inline void RCControlStyle::clear_message_format_type() {
  message_format_type_ = 0;
}
inline int32_t RCControlStyle::_internal_message_format_type() const {
  return message_format_type_;
}
inline int32_t RCControlStyle::message_format_type() const {
  // @@protoc_insertion_point(field_get:onos.topo.RCControlStyle.message_format_type)
  return _internal_message_format_type();
}
inline void RCControlStyle::_internal_set_message_format_type(int32_t value) {
  
  message_format_type_ = value;
}
inline void RCControlStyle::set_message_format_type(int32_t value) {
  _internal_set_message_format_type(value);
  // @@protoc_insertion_point(field_set:onos.topo.RCControlStyle.message_format_type)
}

// int32 control_outcome_format_type = 5;
inline void RCControlStyle::clear_control_outcome_format_type() {
  control_outcome_format_type_ = 0;
}
inline int32_t RCControlStyle::_internal_control_outcome_format_type() const {
  return control_outcome_format_type_;
}
inline int32_t RCControlStyle::control_outcome_format_type() const {
  // @@protoc_insertion_point(field_get:onos.topo.RCControlStyle.control_outcome_format_type)
  return _internal_control_outcome_format_type();
}
inline void RCControlStyle::_internal_set_control_outcome_format_type(int32_t value) {
  
  control_outcome_format_type_ = value;
}
inline void RCControlStyle::set_control_outcome_format_type(int32_t value) {
  _internal_set_control_outcome_format_type(value);
  // @@protoc_insertion_point(field_set:onos.topo.RCControlStyle.control_outcome_format_type)
}

// repeated .onos.topo.ControlAction control_actions = 6;
inline int RCControlStyle::_internal_control_actions_size() const {
  return control_actions_.size();
}
inline int RCControlStyle::control_actions_size() const {
  return _internal_control_actions_size();
}
inline void RCControlStyle::clear_control_actions() {
  control_actions_.Clear();
}
inline ::onos::topo::ControlAction* RCControlStyle::mutable_control_actions(int index) {
  // @@protoc_insertion_point(field_mutable:onos.topo.RCControlStyle.control_actions)
  return control_actions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::ControlAction >*
RCControlStyle::mutable_control_actions() {
  // @@protoc_insertion_point(field_mutable_list:onos.topo.RCControlStyle.control_actions)
  return &control_actions_;
}
inline const ::onos::topo::ControlAction& RCControlStyle::_internal_control_actions(int index) const {
  return control_actions_.Get(index);
}
inline const ::onos::topo::ControlAction& RCControlStyle::control_actions(int index) const {
  // @@protoc_insertion_point(field_get:onos.topo.RCControlStyle.control_actions)
  return _internal_control_actions(index);
}
inline ::onos::topo::ControlAction* RCControlStyle::_internal_add_control_actions() {
  return control_actions_.Add();
}
inline ::onos::topo::ControlAction* RCControlStyle::add_control_actions() {
  ::onos::topo::ControlAction* _add = _internal_add_control_actions();
  // @@protoc_insertion_point(field_add:onos.topo.RCControlStyle.control_actions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::ControlAction >&
RCControlStyle::control_actions() const {
  // @@protoc_insertion_point(field_list:onos.topo.RCControlStyle.control_actions)
  return control_actions_;
}

// -------------------------------------------------------------------

// ControlAction

// int32 id = 1 [(.gogoproto.customname) = "ID"];
inline void ControlAction::clear_id() {
  id_ = 0;
}
inline int32_t ControlAction::_internal_id() const {
  return id_;
}
inline int32_t ControlAction::id() const {
  // @@protoc_insertion_point(field_get:onos.topo.ControlAction.id)
  return _internal_id();
}
inline void ControlAction::_internal_set_id(int32_t value) {
  
  id_ = value;
}
inline void ControlAction::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:onos.topo.ControlAction.id)
}

// string name = 2;
inline void ControlAction::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ControlAction::name() const {
  // @@protoc_insertion_point(field_get:onos.topo.ControlAction.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ControlAction::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.topo.ControlAction.name)
}
inline std::string* ControlAction::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:onos.topo.ControlAction.name)
  return _s;
}
inline const std::string& ControlAction::_internal_name() const {
  return name_.Get();
}
inline void ControlAction::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ControlAction::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ControlAction::release_name() {
  // @@protoc_insertion_point(field_release:onos.topo.ControlAction.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ControlAction::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.topo.ControlAction.name)
}

// repeated .onos.topo.RANParameter ran_parameters = 3;
inline int ControlAction::_internal_ran_parameters_size() const {
  return ran_parameters_.size();
}
inline int ControlAction::ran_parameters_size() const {
  return _internal_ran_parameters_size();
}
inline void ControlAction::clear_ran_parameters() {
  ran_parameters_.Clear();
}
inline ::onos::topo::RANParameter* ControlAction::mutable_ran_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:onos.topo.ControlAction.ran_parameters)
  return ran_parameters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RANParameter >*
ControlAction::mutable_ran_parameters() {
  // @@protoc_insertion_point(field_mutable_list:onos.topo.ControlAction.ran_parameters)
  return &ran_parameters_;
}
inline const ::onos::topo::RANParameter& ControlAction::_internal_ran_parameters(int index) const {
  return ran_parameters_.Get(index);
}
inline const ::onos::topo::RANParameter& ControlAction::ran_parameters(int index) const {
  // @@protoc_insertion_point(field_get:onos.topo.ControlAction.ran_parameters)
  return _internal_ran_parameters(index);
}
inline ::onos::topo::RANParameter* ControlAction::_internal_add_ran_parameters() {
  return ran_parameters_.Add();
}
inline ::onos::topo::RANParameter* ControlAction::add_ran_parameters() {
  ::onos::topo::RANParameter* _add = _internal_add_ran_parameters();
  // @@protoc_insertion_point(field_add:onos.topo.ControlAction.ran_parameters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RANParameter >&
ControlAction::ran_parameters() const {
  // @@protoc_insertion_point(field_list:onos.topo.ControlAction.ran_parameters)
  return ran_parameters_;
}

// -------------------------------------------------------------------

// InsertIndication

// int32 id = 1 [(.gogoproto.customname) = "ID"];
inline void InsertIndication::clear_id() {
  id_ = 0;
}
inline int32_t InsertIndication::_internal_id() const {
  return id_;
}
inline int32_t InsertIndication::id() const {
  // @@protoc_insertion_point(field_get:onos.topo.InsertIndication.id)
  return _internal_id();
}
inline void InsertIndication::_internal_set_id(int32_t value) {
  
  id_ = value;
}
inline void InsertIndication::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:onos.topo.InsertIndication.id)
}

// string name = 2;
inline void InsertIndication::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& InsertIndication::name() const {
  // @@protoc_insertion_point(field_get:onos.topo.InsertIndication.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void InsertIndication::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.topo.InsertIndication.name)
}
inline std::string* InsertIndication::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:onos.topo.InsertIndication.name)
  return _s;
}
inline const std::string& InsertIndication::_internal_name() const {
  return name_.Get();
}
inline void InsertIndication::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* InsertIndication::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* InsertIndication::release_name() {
  // @@protoc_insertion_point(field_release:onos.topo.InsertIndication.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void InsertIndication::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.topo.InsertIndication.name)
}

// repeated .onos.topo.RANParameter ran_parameters = 3;
inline int InsertIndication::_internal_ran_parameters_size() const {
  return ran_parameters_.size();
}
inline int InsertIndication::ran_parameters_size() const {
  return _internal_ran_parameters_size();
}
inline void InsertIndication::clear_ran_parameters() {
  ran_parameters_.Clear();
}
inline ::onos::topo::RANParameter* InsertIndication::mutable_ran_parameters(int index) {
  // @@protoc_insertion_point(field_mutable:onos.topo.InsertIndication.ran_parameters)
  return ran_parameters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RANParameter >*
InsertIndication::mutable_ran_parameters() {
  // @@protoc_insertion_point(field_mutable_list:onos.topo.InsertIndication.ran_parameters)
  return &ran_parameters_;
}
inline const ::onos::topo::RANParameter& InsertIndication::_internal_ran_parameters(int index) const {
  return ran_parameters_.Get(index);
}
inline const ::onos::topo::RANParameter& InsertIndication::ran_parameters(int index) const {
  // @@protoc_insertion_point(field_get:onos.topo.InsertIndication.ran_parameters)
  return _internal_ran_parameters(index);
}
inline ::onos::topo::RANParameter* InsertIndication::_internal_add_ran_parameters() {
  return ran_parameters_.Add();
}
inline ::onos::topo::RANParameter* InsertIndication::add_ran_parameters() {
  ::onos::topo::RANParameter* _add = _internal_add_ran_parameters();
  // @@protoc_insertion_point(field_add:onos.topo.InsertIndication.ran_parameters)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RANParameter >&
InsertIndication::ran_parameters() const {
  // @@protoc_insertion_point(field_list:onos.topo.InsertIndication.ran_parameters)
  return ran_parameters_;
}

// -------------------------------------------------------------------

// RANParameter

// int32 id = 1 [(.gogoproto.customname) = "ID"];
inline void RANParameter::clear_id() {
  id_ = 0;
}
inline int32_t RANParameter::_internal_id() const {
  return id_;
}
inline int32_t RANParameter::id() const {
  // @@protoc_insertion_point(field_get:onos.topo.RANParameter.id)
  return _internal_id();
}
inline void RANParameter::_internal_set_id(int32_t value) {
  
  id_ = value;
}
inline void RANParameter::set_id(int32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:onos.topo.RANParameter.id)
}

// string name = 2;
inline void RANParameter::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& RANParameter::name() const {
  // @@protoc_insertion_point(field_get:onos.topo.RANParameter.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RANParameter::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.topo.RANParameter.name)
}
inline std::string* RANParameter::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:onos.topo.RANParameter.name)
  return _s;
}
inline const std::string& RANParameter::_internal_name() const {
  return name_.Get();
}
inline void RANParameter::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RANParameter::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RANParameter::release_name() {
  // @@protoc_insertion_point(field_release:onos.topo.RANParameter.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RANParameter::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.topo.RANParameter.name)
}

// -------------------------------------------------------------------

// KPMReportStyle

// string name = 1;
inline void KPMReportStyle::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& KPMReportStyle::name() const {
  // @@protoc_insertion_point(field_get:onos.topo.KPMReportStyle.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KPMReportStyle::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.topo.KPMReportStyle.name)
}
inline std::string* KPMReportStyle::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:onos.topo.KPMReportStyle.name)
  return _s;
}
inline const std::string& KPMReportStyle::_internal_name() const {
  return name_.Get();
}
inline void KPMReportStyle::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KPMReportStyle::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KPMReportStyle::release_name() {
  // @@protoc_insertion_point(field_release:onos.topo.KPMReportStyle.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void KPMReportStyle::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.topo.KPMReportStyle.name)
}

// int32 type = 2;
inline void KPMReportStyle::clear_type() {
  type_ = 0;
}
inline int32_t KPMReportStyle::_internal_type() const {
  return type_;
}
inline int32_t KPMReportStyle::type() const {
  // @@protoc_insertion_point(field_get:onos.topo.KPMReportStyle.type)
  return _internal_type();
}
inline void KPMReportStyle::_internal_set_type(int32_t value) {
  
  type_ = value;
}
inline void KPMReportStyle::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:onos.topo.KPMReportStyle.type)
}

// repeated .onos.topo.KPMMeasurement measurements = 3;
inline int KPMReportStyle::_internal_measurements_size() const {
  return measurements_.size();
}
inline int KPMReportStyle::measurements_size() const {
  return _internal_measurements_size();
}
inline void KPMReportStyle::clear_measurements() {
  measurements_.Clear();
}
inline ::onos::topo::KPMMeasurement* KPMReportStyle::mutable_measurements(int index) {
  // @@protoc_insertion_point(field_mutable:onos.topo.KPMReportStyle.measurements)
  return measurements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::KPMMeasurement >*
KPMReportStyle::mutable_measurements() {
  // @@protoc_insertion_point(field_mutable_list:onos.topo.KPMReportStyle.measurements)
  return &measurements_;
}
inline const ::onos::topo::KPMMeasurement& KPMReportStyle::_internal_measurements(int index) const {
  return measurements_.Get(index);
}
inline const ::onos::topo::KPMMeasurement& KPMReportStyle::measurements(int index) const {
  // @@protoc_insertion_point(field_get:onos.topo.KPMReportStyle.measurements)
  return _internal_measurements(index);
}
inline ::onos::topo::KPMMeasurement* KPMReportStyle::_internal_add_measurements() {
  return measurements_.Add();
}
inline ::onos::topo::KPMMeasurement* KPMReportStyle::add_measurements() {
  ::onos::topo::KPMMeasurement* _add = _internal_add_measurements();
  // @@protoc_insertion_point(field_add:onos.topo.KPMReportStyle.measurements)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::KPMMeasurement >&
KPMReportStyle::measurements() const {
  // @@protoc_insertion_point(field_list:onos.topo.KPMReportStyle.measurements)
  return measurements_;
}

// -------------------------------------------------------------------

// MHOReportStyle

// string name = 1;
inline void MHOReportStyle::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& MHOReportStyle::name() const {
  // @@protoc_insertion_point(field_get:onos.topo.MHOReportStyle.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MHOReportStyle::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.topo.MHOReportStyle.name)
}
inline std::string* MHOReportStyle::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:onos.topo.MHOReportStyle.name)
  return _s;
}
inline const std::string& MHOReportStyle::_internal_name() const {
  return name_.Get();
}
inline void MHOReportStyle::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MHOReportStyle::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MHOReportStyle::release_name() {
  // @@protoc_insertion_point(field_release:onos.topo.MHOReportStyle.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MHOReportStyle::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.topo.MHOReportStyle.name)
}

// int32 type = 2;
inline void MHOReportStyle::clear_type() {
  type_ = 0;
}
inline int32_t MHOReportStyle::_internal_type() const {
  return type_;
}
inline int32_t MHOReportStyle::type() const {
  // @@protoc_insertion_point(field_get:onos.topo.MHOReportStyle.type)
  return _internal_type();
}
inline void MHOReportStyle::_internal_set_type(int32_t value) {
  
  type_ = value;
}
inline void MHOReportStyle::set_type(int32_t value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:onos.topo.MHOReportStyle.type)
}

// -------------------------------------------------------------------

// KPMMeasurement

// string id = 1 [(.gogoproto.customname) = "ID"];
inline void KPMMeasurement::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& KPMMeasurement::id() const {
  // @@protoc_insertion_point(field_get:onos.topo.KPMMeasurement.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KPMMeasurement::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.topo.KPMMeasurement.id)
}
inline std::string* KPMMeasurement::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:onos.topo.KPMMeasurement.id)
  return _s;
}
inline const std::string& KPMMeasurement::_internal_id() const {
  return id_.Get();
}
inline void KPMMeasurement::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KPMMeasurement::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KPMMeasurement::release_id() {
  // @@protoc_insertion_point(field_release:onos.topo.KPMMeasurement.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void KPMMeasurement::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.topo.KPMMeasurement.id)
}

// string name = 2;
inline void KPMMeasurement::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& KPMMeasurement::name() const {
  // @@protoc_insertion_point(field_get:onos.topo.KPMMeasurement.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void KPMMeasurement::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.topo.KPMMeasurement.name)
}
inline std::string* KPMMeasurement::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:onos.topo.KPMMeasurement.name)
  return _s;
}
inline const std::string& KPMMeasurement::_internal_name() const {
  return name_.Get();
}
inline void KPMMeasurement::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* KPMMeasurement::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* KPMMeasurement::release_name() {
  // @@protoc_insertion_point(field_release:onos.topo.KPMMeasurement.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void KPMMeasurement::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.topo.KPMMeasurement.name)
}

// -------------------------------------------------------------------

// RSMNodeSlicingCapabilityItem

// int32 max_number_of_slices_dl = 1;
inline void RSMNodeSlicingCapabilityItem::clear_max_number_of_slices_dl() {
  max_number_of_slices_dl_ = 0;
}
inline int32_t RSMNodeSlicingCapabilityItem::_internal_max_number_of_slices_dl() const {
  return max_number_of_slices_dl_;
}
inline int32_t RSMNodeSlicingCapabilityItem::max_number_of_slices_dl() const {
  // @@protoc_insertion_point(field_get:onos.topo.RSMNodeSlicingCapabilityItem.max_number_of_slices_dl)
  return _internal_max_number_of_slices_dl();
}
inline void RSMNodeSlicingCapabilityItem::_internal_set_max_number_of_slices_dl(int32_t value) {
  
  max_number_of_slices_dl_ = value;
}
inline void RSMNodeSlicingCapabilityItem::set_max_number_of_slices_dl(int32_t value) {
  _internal_set_max_number_of_slices_dl(value);
  // @@protoc_insertion_point(field_set:onos.topo.RSMNodeSlicingCapabilityItem.max_number_of_slices_dl)
}

// int32 max_number_of_slices_ul = 2;
inline void RSMNodeSlicingCapabilityItem::clear_max_number_of_slices_ul() {
  max_number_of_slices_ul_ = 0;
}
inline int32_t RSMNodeSlicingCapabilityItem::_internal_max_number_of_slices_ul() const {
  return max_number_of_slices_ul_;
}
inline int32_t RSMNodeSlicingCapabilityItem::max_number_of_slices_ul() const {
  // @@protoc_insertion_point(field_get:onos.topo.RSMNodeSlicingCapabilityItem.max_number_of_slices_ul)
  return _internal_max_number_of_slices_ul();
}
inline void RSMNodeSlicingCapabilityItem::_internal_set_max_number_of_slices_ul(int32_t value) {
  
  max_number_of_slices_ul_ = value;
}
inline void RSMNodeSlicingCapabilityItem::set_max_number_of_slices_ul(int32_t value) {
  _internal_set_max_number_of_slices_ul(value);
  // @@protoc_insertion_point(field_set:onos.topo.RSMNodeSlicingCapabilityItem.max_number_of_slices_ul)
}

// .onos.topo.RSMSlicingType slicing_type = 3;
inline void RSMNodeSlicingCapabilityItem::clear_slicing_type() {
  slicing_type_ = 0;
}
inline ::onos::topo::RSMSlicingType RSMNodeSlicingCapabilityItem::_internal_slicing_type() const {
  return static_cast< ::onos::topo::RSMSlicingType >(slicing_type_);
}
inline ::onos::topo::RSMSlicingType RSMNodeSlicingCapabilityItem::slicing_type() const {
  // @@protoc_insertion_point(field_get:onos.topo.RSMNodeSlicingCapabilityItem.slicing_type)
  return _internal_slicing_type();
}
inline void RSMNodeSlicingCapabilityItem::_internal_set_slicing_type(::onos::topo::RSMSlicingType value) {
  
  slicing_type_ = value;
}
inline void RSMNodeSlicingCapabilityItem::set_slicing_type(::onos::topo::RSMSlicingType value) {
  _internal_set_slicing_type(value);
  // @@protoc_insertion_point(field_set:onos.topo.RSMNodeSlicingCapabilityItem.slicing_type)
}

// int32 max_number_of_ues_per_slice = 4;
inline void RSMNodeSlicingCapabilityItem::clear_max_number_of_ues_per_slice() {
  max_number_of_ues_per_slice_ = 0;
}
inline int32_t RSMNodeSlicingCapabilityItem::_internal_max_number_of_ues_per_slice() const {
  return max_number_of_ues_per_slice_;
}
inline int32_t RSMNodeSlicingCapabilityItem::max_number_of_ues_per_slice() const {
  // @@protoc_insertion_point(field_get:onos.topo.RSMNodeSlicingCapabilityItem.max_number_of_ues_per_slice)
  return _internal_max_number_of_ues_per_slice();
}
inline void RSMNodeSlicingCapabilityItem::_internal_set_max_number_of_ues_per_slice(int32_t value) {
  
  max_number_of_ues_per_slice_ = value;
}
inline void RSMNodeSlicingCapabilityItem::set_max_number_of_ues_per_slice(int32_t value) {
  _internal_set_max_number_of_ues_per_slice(value);
  // @@protoc_insertion_point(field_set:onos.topo.RSMNodeSlicingCapabilityItem.max_number_of_ues_per_slice)
}

// repeated .onos.topo.RSMSupportedSlicingConfigItem supported_config = 5;
inline int RSMNodeSlicingCapabilityItem::_internal_supported_config_size() const {
  return supported_config_.size();
}
inline int RSMNodeSlicingCapabilityItem::supported_config_size() const {
  return _internal_supported_config_size();
}
inline void RSMNodeSlicingCapabilityItem::clear_supported_config() {
  supported_config_.Clear();
}
inline ::onos::topo::RSMSupportedSlicingConfigItem* RSMNodeSlicingCapabilityItem::mutable_supported_config(int index) {
  // @@protoc_insertion_point(field_mutable:onos.topo.RSMNodeSlicingCapabilityItem.supported_config)
  return supported_config_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RSMSupportedSlicingConfigItem >*
RSMNodeSlicingCapabilityItem::mutable_supported_config() {
  // @@protoc_insertion_point(field_mutable_list:onos.topo.RSMNodeSlicingCapabilityItem.supported_config)
  return &supported_config_;
}
inline const ::onos::topo::RSMSupportedSlicingConfigItem& RSMNodeSlicingCapabilityItem::_internal_supported_config(int index) const {
  return supported_config_.Get(index);
}
inline const ::onos::topo::RSMSupportedSlicingConfigItem& RSMNodeSlicingCapabilityItem::supported_config(int index) const {
  // @@protoc_insertion_point(field_get:onos.topo.RSMNodeSlicingCapabilityItem.supported_config)
  return _internal_supported_config(index);
}
inline ::onos::topo::RSMSupportedSlicingConfigItem* RSMNodeSlicingCapabilityItem::_internal_add_supported_config() {
  return supported_config_.Add();
}
inline ::onos::topo::RSMSupportedSlicingConfigItem* RSMNodeSlicingCapabilityItem::add_supported_config() {
  ::onos::topo::RSMSupportedSlicingConfigItem* _add = _internal_add_supported_config();
  // @@protoc_insertion_point(field_add:onos.topo.RSMNodeSlicingCapabilityItem.supported_config)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RSMSupportedSlicingConfigItem >&
RSMNodeSlicingCapabilityItem::supported_config() const {
  // @@protoc_insertion_point(field_list:onos.topo.RSMNodeSlicingCapabilityItem.supported_config)
  return supported_config_;
}

// -------------------------------------------------------------------

// RSMSupportedSlicingConfigItem

// .onos.topo.E2SmRsmCommand slicing_config_type = 1;
inline void RSMSupportedSlicingConfigItem::clear_slicing_config_type() {
  slicing_config_type_ = 0;
}
inline ::onos::topo::E2SmRsmCommand RSMSupportedSlicingConfigItem::_internal_slicing_config_type() const {
  return static_cast< ::onos::topo::E2SmRsmCommand >(slicing_config_type_);
}
inline ::onos::topo::E2SmRsmCommand RSMSupportedSlicingConfigItem::slicing_config_type() const {
  // @@protoc_insertion_point(field_get:onos.topo.RSMSupportedSlicingConfigItem.slicing_config_type)
  return _internal_slicing_config_type();
}
inline void RSMSupportedSlicingConfigItem::_internal_set_slicing_config_type(::onos::topo::E2SmRsmCommand value) {
  
  slicing_config_type_ = value;
}
inline void RSMSupportedSlicingConfigItem::set_slicing_config_type(::onos::topo::E2SmRsmCommand value) {
  _internal_set_slicing_config_type(value);
  // @@protoc_insertion_point(field_set:onos.topo.RSMSupportedSlicingConfigItem.slicing_config_type)
}

// -------------------------------------------------------------------

// RSMSliceItemList

// repeated .onos.topo.RSMSlicingItem rsm_slice_list = 1;
inline int RSMSliceItemList::_internal_rsm_slice_list_size() const {
  return rsm_slice_list_.size();
}
inline int RSMSliceItemList::rsm_slice_list_size() const {
  return _internal_rsm_slice_list_size();
}
inline void RSMSliceItemList::clear_rsm_slice_list() {
  rsm_slice_list_.Clear();
}
inline ::onos::topo::RSMSlicingItem* RSMSliceItemList::mutable_rsm_slice_list(int index) {
  // @@protoc_insertion_point(field_mutable:onos.topo.RSMSliceItemList.rsm_slice_list)
  return rsm_slice_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RSMSlicingItem >*
RSMSliceItemList::mutable_rsm_slice_list() {
  // @@protoc_insertion_point(field_mutable_list:onos.topo.RSMSliceItemList.rsm_slice_list)
  return &rsm_slice_list_;
}
inline const ::onos::topo::RSMSlicingItem& RSMSliceItemList::_internal_rsm_slice_list(int index) const {
  return rsm_slice_list_.Get(index);
}
inline const ::onos::topo::RSMSlicingItem& RSMSliceItemList::rsm_slice_list(int index) const {
  // @@protoc_insertion_point(field_get:onos.topo.RSMSliceItemList.rsm_slice_list)
  return _internal_rsm_slice_list(index);
}
inline ::onos::topo::RSMSlicingItem* RSMSliceItemList::_internal_add_rsm_slice_list() {
  return rsm_slice_list_.Add();
}
inline ::onos::topo::RSMSlicingItem* RSMSliceItemList::add_rsm_slice_list() {
  ::onos::topo::RSMSlicingItem* _add = _internal_add_rsm_slice_list();
  // @@protoc_insertion_point(field_add:onos.topo.RSMSliceItemList.rsm_slice_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::RSMSlicingItem >&
RSMSliceItemList::rsm_slice_list() const {
  // @@protoc_insertion_point(field_list:onos.topo.RSMSliceItemList.rsm_slice_list)
  return rsm_slice_list_;
}

// -------------------------------------------------------------------

// RSMSlicingItem

// string id = 1 [(.gogoproto.customname) = "ID"];
inline void RSMSlicingItem::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& RSMSlicingItem::id() const {
  // @@protoc_insertion_point(field_get:onos.topo.RSMSlicingItem.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RSMSlicingItem::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.topo.RSMSlicingItem.id)
}
inline std::string* RSMSlicingItem::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:onos.topo.RSMSlicingItem.id)
  return _s;
}
inline const std::string& RSMSlicingItem::_internal_id() const {
  return id_.Get();
}
inline void RSMSlicingItem::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RSMSlicingItem::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RSMSlicingItem::release_id() {
  // @@protoc_insertion_point(field_release:onos.topo.RSMSlicingItem.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RSMSlicingItem::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.topo.RSMSlicingItem.id)
}

// string slice_desc = 2;
inline void RSMSlicingItem::clear_slice_desc() {
  slice_desc_.ClearToEmpty();
}
inline const std::string& RSMSlicingItem::slice_desc() const {
  // @@protoc_insertion_point(field_get:onos.topo.RSMSlicingItem.slice_desc)
  return _internal_slice_desc();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RSMSlicingItem::set_slice_desc(ArgT0&& arg0, ArgT... args) {
 
 slice_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.topo.RSMSlicingItem.slice_desc)
}
inline std::string* RSMSlicingItem::mutable_slice_desc() {
  std::string* _s = _internal_mutable_slice_desc();
  // @@protoc_insertion_point(field_mutable:onos.topo.RSMSlicingItem.slice_desc)
  return _s;
}
inline const std::string& RSMSlicingItem::_internal_slice_desc() const {
  return slice_desc_.Get();
}
inline void RSMSlicingItem::_internal_set_slice_desc(const std::string& value) {
  
  slice_desc_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RSMSlicingItem::_internal_mutable_slice_desc() {
  
  return slice_desc_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RSMSlicingItem::release_slice_desc() {
  // @@protoc_insertion_point(field_release:onos.topo.RSMSlicingItem.slice_desc)
  return slice_desc_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RSMSlicingItem::set_allocated_slice_desc(std::string* slice_desc) {
  if (slice_desc != nullptr) {
    
  } else {
    
  }
  slice_desc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), slice_desc,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (slice_desc_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    slice_desc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.topo.RSMSlicingItem.slice_desc)
}

// .onos.topo.RSMSliceParameters slice_parameters = 3;
inline bool RSMSlicingItem::_internal_has_slice_parameters() const {
  return this != internal_default_instance() && slice_parameters_ != nullptr;
}
inline bool RSMSlicingItem::has_slice_parameters() const {
  return _internal_has_slice_parameters();
}
inline void RSMSlicingItem::clear_slice_parameters() {
  if (GetArenaForAllocation() == nullptr && slice_parameters_ != nullptr) {
    delete slice_parameters_;
  }
  slice_parameters_ = nullptr;
}
inline const ::onos::topo::RSMSliceParameters& RSMSlicingItem::_internal_slice_parameters() const {
  const ::onos::topo::RSMSliceParameters* p = slice_parameters_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::topo::RSMSliceParameters&>(
      ::onos::topo::_RSMSliceParameters_default_instance_);
}
inline const ::onos::topo::RSMSliceParameters& RSMSlicingItem::slice_parameters() const {
  // @@protoc_insertion_point(field_get:onos.topo.RSMSlicingItem.slice_parameters)
  return _internal_slice_parameters();
}
inline void RSMSlicingItem::unsafe_arena_set_allocated_slice_parameters(
    ::onos::topo::RSMSliceParameters* slice_parameters) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slice_parameters_);
  }
  slice_parameters_ = slice_parameters;
  if (slice_parameters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.topo.RSMSlicingItem.slice_parameters)
}
inline ::onos::topo::RSMSliceParameters* RSMSlicingItem::release_slice_parameters() {
  
  ::onos::topo::RSMSliceParameters* temp = slice_parameters_;
  slice_parameters_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::topo::RSMSliceParameters* RSMSlicingItem::unsafe_arena_release_slice_parameters() {
  // @@protoc_insertion_point(field_release:onos.topo.RSMSlicingItem.slice_parameters)
  
  ::onos::topo::RSMSliceParameters* temp = slice_parameters_;
  slice_parameters_ = nullptr;
  return temp;
}
inline ::onos::topo::RSMSliceParameters* RSMSlicingItem::_internal_mutable_slice_parameters() {
  
  if (slice_parameters_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::topo::RSMSliceParameters>(GetArenaForAllocation());
    slice_parameters_ = p;
  }
  return slice_parameters_;
}
inline ::onos::topo::RSMSliceParameters* RSMSlicingItem::mutable_slice_parameters() {
  ::onos::topo::RSMSliceParameters* _msg = _internal_mutable_slice_parameters();
  // @@protoc_insertion_point(field_mutable:onos.topo.RSMSlicingItem.slice_parameters)
  return _msg;
}
inline void RSMSlicingItem::set_allocated_slice_parameters(::onos::topo::RSMSliceParameters* slice_parameters) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete slice_parameters_;
  }
  if (slice_parameters) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::topo::RSMSliceParameters>::GetOwningArena(slice_parameters);
    if (message_arena != submessage_arena) {
      slice_parameters = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slice_parameters, submessage_arena);
    }
    
  } else {
    
  }
  slice_parameters_ = slice_parameters;
  // @@protoc_insertion_point(field_set_allocated:onos.topo.RSMSlicingItem.slice_parameters)
}

// .onos.topo.RSMSliceType slice_type = 4;
inline void RSMSlicingItem::clear_slice_type() {
  slice_type_ = 0;
}
inline ::onos::topo::RSMSliceType RSMSlicingItem::_internal_slice_type() const {
  return static_cast< ::onos::topo::RSMSliceType >(slice_type_);
}
inline ::onos::topo::RSMSliceType RSMSlicingItem::slice_type() const {
  // @@protoc_insertion_point(field_get:onos.topo.RSMSlicingItem.slice_type)
  return _internal_slice_type();
}
inline void RSMSlicingItem::_internal_set_slice_type(::onos::topo::RSMSliceType value) {
  
  slice_type_ = value;
}
inline void RSMSlicingItem::set_slice_type(::onos::topo::RSMSliceType value) {
  _internal_set_slice_type(value);
  // @@protoc_insertion_point(field_set:onos.topo.RSMSlicingItem.slice_type)
}

// repeated .onos.topo.UeIdentity ue_id_list = 5;
inline int RSMSlicingItem::_internal_ue_id_list_size() const {
  return ue_id_list_.size();
}
inline int RSMSlicingItem::ue_id_list_size() const {
  return _internal_ue_id_list_size();
}
inline void RSMSlicingItem::clear_ue_id_list() {
  ue_id_list_.Clear();
}
inline ::onos::topo::UeIdentity* RSMSlicingItem::mutable_ue_id_list(int index) {
  // @@protoc_insertion_point(field_mutable:onos.topo.RSMSlicingItem.ue_id_list)
  return ue_id_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::UeIdentity >*
RSMSlicingItem::mutable_ue_id_list() {
  // @@protoc_insertion_point(field_mutable_list:onos.topo.RSMSlicingItem.ue_id_list)
  return &ue_id_list_;
}
inline const ::onos::topo::UeIdentity& RSMSlicingItem::_internal_ue_id_list(int index) const {
  return ue_id_list_.Get(index);
}
inline const ::onos::topo::UeIdentity& RSMSlicingItem::ue_id_list(int index) const {
  // @@protoc_insertion_point(field_get:onos.topo.RSMSlicingItem.ue_id_list)
  return _internal_ue_id_list(index);
}
inline ::onos::topo::UeIdentity* RSMSlicingItem::_internal_add_ue_id_list() {
  return ue_id_list_.Add();
}
inline ::onos::topo::UeIdentity* RSMSlicingItem::add_ue_id_list() {
  ::onos::topo::UeIdentity* _add = _internal_add_ue_id_list();
  // @@protoc_insertion_point(field_add:onos.topo.RSMSlicingItem.ue_id_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::UeIdentity >&
RSMSlicingItem::ue_id_list() const {
  // @@protoc_insertion_point(field_list:onos.topo.RSMSlicingItem.ue_id_list)
  return ue_id_list_;
}

// -------------------------------------------------------------------

// RSMSliceParameters

// .onos.topo.RSMSchedulerType scheduler_type = 1;
inline void RSMSliceParameters::clear_scheduler_type() {
  scheduler_type_ = 0;
}
inline ::onos::topo::RSMSchedulerType RSMSliceParameters::_internal_scheduler_type() const {
  return static_cast< ::onos::topo::RSMSchedulerType >(scheduler_type_);
}
inline ::onos::topo::RSMSchedulerType RSMSliceParameters::scheduler_type() const {
  // @@protoc_insertion_point(field_get:onos.topo.RSMSliceParameters.scheduler_type)
  return _internal_scheduler_type();
}
inline void RSMSliceParameters::_internal_set_scheduler_type(::onos::topo::RSMSchedulerType value) {
  
  scheduler_type_ = value;
}
inline void RSMSliceParameters::set_scheduler_type(::onos::topo::RSMSchedulerType value) {
  _internal_set_scheduler_type(value);
  // @@protoc_insertion_point(field_set:onos.topo.RSMSliceParameters.scheduler_type)
}

// int32 weight = 2;
inline void RSMSliceParameters::clear_weight() {
  weight_ = 0;
}
inline int32_t RSMSliceParameters::_internal_weight() const {
  return weight_;
}
inline int32_t RSMSliceParameters::weight() const {
  // @@protoc_insertion_point(field_get:onos.topo.RSMSliceParameters.weight)
  return _internal_weight();
}
inline void RSMSliceParameters::_internal_set_weight(int32_t value) {
  
  weight_ = value;
}
inline void RSMSliceParameters::set_weight(int32_t value) {
  _internal_set_weight(value);
  // @@protoc_insertion_point(field_set:onos.topo.RSMSliceParameters.weight)
}

// int32 qos_level = 3;
inline void RSMSliceParameters::clear_qos_level() {
  qos_level_ = 0;
}
inline int32_t RSMSliceParameters::_internal_qos_level() const {
  return qos_level_;
}
inline int32_t RSMSliceParameters::qos_level() const {
  // @@protoc_insertion_point(field_get:onos.topo.RSMSliceParameters.qos_level)
  return _internal_qos_level();
}
inline void RSMSliceParameters::_internal_set_qos_level(int32_t value) {
  
  qos_level_ = value;
}
inline void RSMSliceParameters::set_qos_level(int32_t value) {
  _internal_set_qos_level(value);
  // @@protoc_insertion_point(field_set:onos.topo.RSMSliceParameters.qos_level)
}

// -------------------------------------------------------------------

// DuUeF1apID

// int64 value = 1;
inline void DuUeF1apID::clear_value() {
  value_ = int64_t{0};
}
inline int64_t DuUeF1apID::_internal_value() const {
  return value_;
}
inline int64_t DuUeF1apID::value() const {
  // @@protoc_insertion_point(field_get:onos.topo.DuUeF1apID.value)
  return _internal_value();
}
inline void DuUeF1apID::_internal_set_value(int64_t value) {
  
  value_ = value;
}
inline void DuUeF1apID::set_value(int64_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:onos.topo.DuUeF1apID.value)
}

// -------------------------------------------------------------------

// CuUeF1apID

// int64 value = 1;
inline void CuUeF1apID::clear_value() {
  value_ = int64_t{0};
}
inline int64_t CuUeF1apID::_internal_value() const {
  return value_;
}
inline int64_t CuUeF1apID::value() const {
  // @@protoc_insertion_point(field_get:onos.topo.CuUeF1apID.value)
  return _internal_value();
}
inline void CuUeF1apID::_internal_set_value(int64_t value) {
  
  value_ = value;
}
inline void CuUeF1apID::set_value(int64_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:onos.topo.CuUeF1apID.value)
}

// -------------------------------------------------------------------

// RanUeNgapID

// int64 value = 1;
inline void RanUeNgapID::clear_value() {
  value_ = int64_t{0};
}
inline int64_t RanUeNgapID::_internal_value() const {
  return value_;
}
inline int64_t RanUeNgapID::value() const {
  // @@protoc_insertion_point(field_get:onos.topo.RanUeNgapID.value)
  return _internal_value();
}
inline void RanUeNgapID::_internal_set_value(int64_t value) {
  
  value_ = value;
}
inline void RanUeNgapID::set_value(int64_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:onos.topo.RanUeNgapID.value)
}

// -------------------------------------------------------------------

// EnbUeS1apID

// int32 value = 1;
inline void EnbUeS1apID::clear_value() {
  value_ = 0;
}
inline int32_t EnbUeS1apID::_internal_value() const {
  return value_;
}
inline int32_t EnbUeS1apID::value() const {
  // @@protoc_insertion_point(field_get:onos.topo.EnbUeS1apID.value)
  return _internal_value();
}
inline void EnbUeS1apID::_internal_set_value(int32_t value) {
  
  value_ = value;
}
inline void EnbUeS1apID::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:onos.topo.EnbUeS1apID.value)
}

// -------------------------------------------------------------------

// AmfUeNgapID

// int64 value = 1;
inline void AmfUeNgapID::clear_value() {
  value_ = int64_t{0};
}
inline int64_t AmfUeNgapID::_internal_value() const {
  return value_;
}
inline int64_t AmfUeNgapID::value() const {
  // @@protoc_insertion_point(field_get:onos.topo.AmfUeNgapID.value)
  return _internal_value();
}
inline void AmfUeNgapID::_internal_set_value(int64_t value) {
  
  value_ = value;
}
inline void AmfUeNgapID::set_value(int64_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:onos.topo.AmfUeNgapID.value)
}

// -------------------------------------------------------------------

// UeIdentity

// .onos.topo.DuUeF1apID du_ue_f1ap_id = 1 [(.gogoproto.customname) = "DuUeF1apID"];
inline bool UeIdentity::_internal_has_du_ue_f1ap_id() const {
  return this != internal_default_instance() && du_ue_f1ap_id_ != nullptr;
}
inline bool UeIdentity::has_du_ue_f1ap_id() const {
  return _internal_has_du_ue_f1ap_id();
}
inline void UeIdentity::clear_du_ue_f1ap_id() {
  if (GetArenaForAllocation() == nullptr && du_ue_f1ap_id_ != nullptr) {
    delete du_ue_f1ap_id_;
  }
  du_ue_f1ap_id_ = nullptr;
}
inline const ::onos::topo::DuUeF1apID& UeIdentity::_internal_du_ue_f1ap_id() const {
  const ::onos::topo::DuUeF1apID* p = du_ue_f1ap_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::topo::DuUeF1apID&>(
      ::onos::topo::_DuUeF1apID_default_instance_);
}
inline const ::onos::topo::DuUeF1apID& UeIdentity::du_ue_f1ap_id() const {
  // @@protoc_insertion_point(field_get:onos.topo.UeIdentity.du_ue_f1ap_id)
  return _internal_du_ue_f1ap_id();
}
inline void UeIdentity::unsafe_arena_set_allocated_du_ue_f1ap_id(
    ::onos::topo::DuUeF1apID* du_ue_f1ap_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(du_ue_f1ap_id_);
  }
  du_ue_f1ap_id_ = du_ue_f1ap_id;
  if (du_ue_f1ap_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.topo.UeIdentity.du_ue_f1ap_id)
}
inline ::onos::topo::DuUeF1apID* UeIdentity::release_du_ue_f1ap_id() {
  
  ::onos::topo::DuUeF1apID* temp = du_ue_f1ap_id_;
  du_ue_f1ap_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::topo::DuUeF1apID* UeIdentity::unsafe_arena_release_du_ue_f1ap_id() {
  // @@protoc_insertion_point(field_release:onos.topo.UeIdentity.du_ue_f1ap_id)
  
  ::onos::topo::DuUeF1apID* temp = du_ue_f1ap_id_;
  du_ue_f1ap_id_ = nullptr;
  return temp;
}
inline ::onos::topo::DuUeF1apID* UeIdentity::_internal_mutable_du_ue_f1ap_id() {
  
  if (du_ue_f1ap_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::topo::DuUeF1apID>(GetArenaForAllocation());
    du_ue_f1ap_id_ = p;
  }
  return du_ue_f1ap_id_;
}
inline ::onos::topo::DuUeF1apID* UeIdentity::mutable_du_ue_f1ap_id() {
  ::onos::topo::DuUeF1apID* _msg = _internal_mutable_du_ue_f1ap_id();
  // @@protoc_insertion_point(field_mutable:onos.topo.UeIdentity.du_ue_f1ap_id)
  return _msg;
}
inline void UeIdentity::set_allocated_du_ue_f1ap_id(::onos::topo::DuUeF1apID* du_ue_f1ap_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete du_ue_f1ap_id_;
  }
  if (du_ue_f1ap_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::topo::DuUeF1apID>::GetOwningArena(du_ue_f1ap_id);
    if (message_arena != submessage_arena) {
      du_ue_f1ap_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, du_ue_f1ap_id, submessage_arena);
    }
    
  } else {
    
  }
  du_ue_f1ap_id_ = du_ue_f1ap_id;
  // @@protoc_insertion_point(field_set_allocated:onos.topo.UeIdentity.du_ue_f1ap_id)
}

// .onos.topo.CuUeF1apID cu_ue_f1ap_id = 2 [(.gogoproto.customname) = "CuUeF1apID"];
inline bool UeIdentity::_internal_has_cu_ue_f1ap_id() const {
  return this != internal_default_instance() && cu_ue_f1ap_id_ != nullptr;
}
inline bool UeIdentity::has_cu_ue_f1ap_id() const {
  return _internal_has_cu_ue_f1ap_id();
}
inline void UeIdentity::clear_cu_ue_f1ap_id() {
  if (GetArenaForAllocation() == nullptr && cu_ue_f1ap_id_ != nullptr) {
    delete cu_ue_f1ap_id_;
  }
  cu_ue_f1ap_id_ = nullptr;
}
inline const ::onos::topo::CuUeF1apID& UeIdentity::_internal_cu_ue_f1ap_id() const {
  const ::onos::topo::CuUeF1apID* p = cu_ue_f1ap_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::topo::CuUeF1apID&>(
      ::onos::topo::_CuUeF1apID_default_instance_);
}
inline const ::onos::topo::CuUeF1apID& UeIdentity::cu_ue_f1ap_id() const {
  // @@protoc_insertion_point(field_get:onos.topo.UeIdentity.cu_ue_f1ap_id)
  return _internal_cu_ue_f1ap_id();
}
inline void UeIdentity::unsafe_arena_set_allocated_cu_ue_f1ap_id(
    ::onos::topo::CuUeF1apID* cu_ue_f1ap_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cu_ue_f1ap_id_);
  }
  cu_ue_f1ap_id_ = cu_ue_f1ap_id;
  if (cu_ue_f1ap_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.topo.UeIdentity.cu_ue_f1ap_id)
}
inline ::onos::topo::CuUeF1apID* UeIdentity::release_cu_ue_f1ap_id() {
  
  ::onos::topo::CuUeF1apID* temp = cu_ue_f1ap_id_;
  cu_ue_f1ap_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::topo::CuUeF1apID* UeIdentity::unsafe_arena_release_cu_ue_f1ap_id() {
  // @@protoc_insertion_point(field_release:onos.topo.UeIdentity.cu_ue_f1ap_id)
  
  ::onos::topo::CuUeF1apID* temp = cu_ue_f1ap_id_;
  cu_ue_f1ap_id_ = nullptr;
  return temp;
}
inline ::onos::topo::CuUeF1apID* UeIdentity::_internal_mutable_cu_ue_f1ap_id() {
  
  if (cu_ue_f1ap_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::topo::CuUeF1apID>(GetArenaForAllocation());
    cu_ue_f1ap_id_ = p;
  }
  return cu_ue_f1ap_id_;
}
inline ::onos::topo::CuUeF1apID* UeIdentity::mutable_cu_ue_f1ap_id() {
  ::onos::topo::CuUeF1apID* _msg = _internal_mutable_cu_ue_f1ap_id();
  // @@protoc_insertion_point(field_mutable:onos.topo.UeIdentity.cu_ue_f1ap_id)
  return _msg;
}
inline void UeIdentity::set_allocated_cu_ue_f1ap_id(::onos::topo::CuUeF1apID* cu_ue_f1ap_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete cu_ue_f1ap_id_;
  }
  if (cu_ue_f1ap_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::topo::CuUeF1apID>::GetOwningArena(cu_ue_f1ap_id);
    if (message_arena != submessage_arena) {
      cu_ue_f1ap_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cu_ue_f1ap_id, submessage_arena);
    }
    
  } else {
    
  }
  cu_ue_f1ap_id_ = cu_ue_f1ap_id;
  // @@protoc_insertion_point(field_set_allocated:onos.topo.UeIdentity.cu_ue_f1ap_id)
}

// .onos.topo.RanUeNgapID ran_ue_ngap_id = 3 [(.gogoproto.customname) = "RANUeNgapID"];
inline bool UeIdentity::_internal_has_ran_ue_ngap_id() const {
  return this != internal_default_instance() && ran_ue_ngap_id_ != nullptr;
}
inline bool UeIdentity::has_ran_ue_ngap_id() const {
  return _internal_has_ran_ue_ngap_id();
}
inline void UeIdentity::clear_ran_ue_ngap_id() {
  if (GetArenaForAllocation() == nullptr && ran_ue_ngap_id_ != nullptr) {
    delete ran_ue_ngap_id_;
  }
  ran_ue_ngap_id_ = nullptr;
}
inline const ::onos::topo::RanUeNgapID& UeIdentity::_internal_ran_ue_ngap_id() const {
  const ::onos::topo::RanUeNgapID* p = ran_ue_ngap_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::topo::RanUeNgapID&>(
      ::onos::topo::_RanUeNgapID_default_instance_);
}
inline const ::onos::topo::RanUeNgapID& UeIdentity::ran_ue_ngap_id() const {
  // @@protoc_insertion_point(field_get:onos.topo.UeIdentity.ran_ue_ngap_id)
  return _internal_ran_ue_ngap_id();
}
inline void UeIdentity::unsafe_arena_set_allocated_ran_ue_ngap_id(
    ::onos::topo::RanUeNgapID* ran_ue_ngap_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ran_ue_ngap_id_);
  }
  ran_ue_ngap_id_ = ran_ue_ngap_id;
  if (ran_ue_ngap_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.topo.UeIdentity.ran_ue_ngap_id)
}
inline ::onos::topo::RanUeNgapID* UeIdentity::release_ran_ue_ngap_id() {
  
  ::onos::topo::RanUeNgapID* temp = ran_ue_ngap_id_;
  ran_ue_ngap_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::topo::RanUeNgapID* UeIdentity::unsafe_arena_release_ran_ue_ngap_id() {
  // @@protoc_insertion_point(field_release:onos.topo.UeIdentity.ran_ue_ngap_id)
  
  ::onos::topo::RanUeNgapID* temp = ran_ue_ngap_id_;
  ran_ue_ngap_id_ = nullptr;
  return temp;
}
inline ::onos::topo::RanUeNgapID* UeIdentity::_internal_mutable_ran_ue_ngap_id() {
  
  if (ran_ue_ngap_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::topo::RanUeNgapID>(GetArenaForAllocation());
    ran_ue_ngap_id_ = p;
  }
  return ran_ue_ngap_id_;
}
inline ::onos::topo::RanUeNgapID* UeIdentity::mutable_ran_ue_ngap_id() {
  ::onos::topo::RanUeNgapID* _msg = _internal_mutable_ran_ue_ngap_id();
  // @@protoc_insertion_point(field_mutable:onos.topo.UeIdentity.ran_ue_ngap_id)
  return _msg;
}
inline void UeIdentity::set_allocated_ran_ue_ngap_id(::onos::topo::RanUeNgapID* ran_ue_ngap_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete ran_ue_ngap_id_;
  }
  if (ran_ue_ngap_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::topo::RanUeNgapID>::GetOwningArena(ran_ue_ngap_id);
    if (message_arena != submessage_arena) {
      ran_ue_ngap_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ran_ue_ngap_id, submessage_arena);
    }
    
  } else {
    
  }
  ran_ue_ngap_id_ = ran_ue_ngap_id;
  // @@protoc_insertion_point(field_set_allocated:onos.topo.UeIdentity.ran_ue_ngap_id)
}

// .onos.topo.EnbUeS1apID enb_ue_s1ap_id = 4 [(.gogoproto.customname) = "EnbUeS1apID"];
inline bool UeIdentity::_internal_has_enb_ue_s1ap_id() const {
  return this != internal_default_instance() && enb_ue_s1ap_id_ != nullptr;
}
inline bool UeIdentity::has_enb_ue_s1ap_id() const {
  return _internal_has_enb_ue_s1ap_id();
}
inline void UeIdentity::clear_enb_ue_s1ap_id() {
  if (GetArenaForAllocation() == nullptr && enb_ue_s1ap_id_ != nullptr) {
    delete enb_ue_s1ap_id_;
  }
  enb_ue_s1ap_id_ = nullptr;
}
inline const ::onos::topo::EnbUeS1apID& UeIdentity::_internal_enb_ue_s1ap_id() const {
  const ::onos::topo::EnbUeS1apID* p = enb_ue_s1ap_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::topo::EnbUeS1apID&>(
      ::onos::topo::_EnbUeS1apID_default_instance_);
}
inline const ::onos::topo::EnbUeS1apID& UeIdentity::enb_ue_s1ap_id() const {
  // @@protoc_insertion_point(field_get:onos.topo.UeIdentity.enb_ue_s1ap_id)
  return _internal_enb_ue_s1ap_id();
}
inline void UeIdentity::unsafe_arena_set_allocated_enb_ue_s1ap_id(
    ::onos::topo::EnbUeS1apID* enb_ue_s1ap_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(enb_ue_s1ap_id_);
  }
  enb_ue_s1ap_id_ = enb_ue_s1ap_id;
  if (enb_ue_s1ap_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.topo.UeIdentity.enb_ue_s1ap_id)
}
inline ::onos::topo::EnbUeS1apID* UeIdentity::release_enb_ue_s1ap_id() {
  
  ::onos::topo::EnbUeS1apID* temp = enb_ue_s1ap_id_;
  enb_ue_s1ap_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::topo::EnbUeS1apID* UeIdentity::unsafe_arena_release_enb_ue_s1ap_id() {
  // @@protoc_insertion_point(field_release:onos.topo.UeIdentity.enb_ue_s1ap_id)
  
  ::onos::topo::EnbUeS1apID* temp = enb_ue_s1ap_id_;
  enb_ue_s1ap_id_ = nullptr;
  return temp;
}
inline ::onos::topo::EnbUeS1apID* UeIdentity::_internal_mutable_enb_ue_s1ap_id() {
  
  if (enb_ue_s1ap_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::topo::EnbUeS1apID>(GetArenaForAllocation());
    enb_ue_s1ap_id_ = p;
  }
  return enb_ue_s1ap_id_;
}
inline ::onos::topo::EnbUeS1apID* UeIdentity::mutable_enb_ue_s1ap_id() {
  ::onos::topo::EnbUeS1apID* _msg = _internal_mutable_enb_ue_s1ap_id();
  // @@protoc_insertion_point(field_mutable:onos.topo.UeIdentity.enb_ue_s1ap_id)
  return _msg;
}
inline void UeIdentity::set_allocated_enb_ue_s1ap_id(::onos::topo::EnbUeS1apID* enb_ue_s1ap_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete enb_ue_s1ap_id_;
  }
  if (enb_ue_s1ap_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::topo::EnbUeS1apID>::GetOwningArena(enb_ue_s1ap_id);
    if (message_arena != submessage_arena) {
      enb_ue_s1ap_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enb_ue_s1ap_id, submessage_arena);
    }
    
  } else {
    
  }
  enb_ue_s1ap_id_ = enb_ue_s1ap_id;
  // @@protoc_insertion_point(field_set_allocated:onos.topo.UeIdentity.enb_ue_s1ap_id)
}

// .onos.topo.AmfUeNgapID amf_ue_ngap_id = 5 [(.gogoproto.customname) = "AMFUeNgapID"];
inline bool UeIdentity::_internal_has_amf_ue_ngap_id() const {
  return this != internal_default_instance() && amf_ue_ngap_id_ != nullptr;
}
inline bool UeIdentity::has_amf_ue_ngap_id() const {
  return _internal_has_amf_ue_ngap_id();
}
inline void UeIdentity::clear_amf_ue_ngap_id() {
  if (GetArenaForAllocation() == nullptr && amf_ue_ngap_id_ != nullptr) {
    delete amf_ue_ngap_id_;
  }
  amf_ue_ngap_id_ = nullptr;
}
inline const ::onos::topo::AmfUeNgapID& UeIdentity::_internal_amf_ue_ngap_id() const {
  const ::onos::topo::AmfUeNgapID* p = amf_ue_ngap_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::topo::AmfUeNgapID&>(
      ::onos::topo::_AmfUeNgapID_default_instance_);
}
inline const ::onos::topo::AmfUeNgapID& UeIdentity::amf_ue_ngap_id() const {
  // @@protoc_insertion_point(field_get:onos.topo.UeIdentity.amf_ue_ngap_id)
  return _internal_amf_ue_ngap_id();
}
inline void UeIdentity::unsafe_arena_set_allocated_amf_ue_ngap_id(
    ::onos::topo::AmfUeNgapID* amf_ue_ngap_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(amf_ue_ngap_id_);
  }
  amf_ue_ngap_id_ = amf_ue_ngap_id;
  if (amf_ue_ngap_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.topo.UeIdentity.amf_ue_ngap_id)
}
inline ::onos::topo::AmfUeNgapID* UeIdentity::release_amf_ue_ngap_id() {
  
  ::onos::topo::AmfUeNgapID* temp = amf_ue_ngap_id_;
  amf_ue_ngap_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::topo::AmfUeNgapID* UeIdentity::unsafe_arena_release_amf_ue_ngap_id() {
  // @@protoc_insertion_point(field_release:onos.topo.UeIdentity.amf_ue_ngap_id)
  
  ::onos::topo::AmfUeNgapID* temp = amf_ue_ngap_id_;
  amf_ue_ngap_id_ = nullptr;
  return temp;
}
inline ::onos::topo::AmfUeNgapID* UeIdentity::_internal_mutable_amf_ue_ngap_id() {
  
  if (amf_ue_ngap_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::topo::AmfUeNgapID>(GetArenaForAllocation());
    amf_ue_ngap_id_ = p;
  }
  return amf_ue_ngap_id_;
}
inline ::onos::topo::AmfUeNgapID* UeIdentity::mutable_amf_ue_ngap_id() {
  ::onos::topo::AmfUeNgapID* _msg = _internal_mutable_amf_ue_ngap_id();
  // @@protoc_insertion_point(field_mutable:onos.topo.UeIdentity.amf_ue_ngap_id)
  return _msg;
}
inline void UeIdentity::set_allocated_amf_ue_ngap_id(::onos::topo::AmfUeNgapID* amf_ue_ngap_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete amf_ue_ngap_id_;
  }
  if (amf_ue_ngap_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::topo::AmfUeNgapID>::GetOwningArena(amf_ue_ngap_id);
    if (message_arena != submessage_arena) {
      amf_ue_ngap_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, amf_ue_ngap_id, submessage_arena);
    }
    
  } else {
    
  }
  amf_ue_ngap_id_ = amf_ue_ngap_id;
  // @@protoc_insertion_point(field_set_allocated:onos.topo.UeIdentity.amf_ue_ngap_id)
}

// .onos.topo.UeIdType preferred_id_type = 6 [(.gogoproto.customname) = "PreferredIDType"];
inline void UeIdentity::clear_preferred_id_type() {
  preferred_id_type_ = 0;
}
inline ::onos::topo::UeIdType UeIdentity::_internal_preferred_id_type() const {
  return static_cast< ::onos::topo::UeIdType >(preferred_id_type_);
}
inline ::onos::topo::UeIdType UeIdentity::preferred_id_type() const {
  // @@protoc_insertion_point(field_get:onos.topo.UeIdentity.preferred_id_type)
  return _internal_preferred_id_type();
}
inline void UeIdentity::_internal_set_preferred_id_type(::onos::topo::UeIdType value) {
  
  preferred_id_type_ = value;
}
inline void UeIdentity::set_preferred_id_type(::onos::topo::UeIdType value) {
  _internal_set_preferred_id_type(value);
  // @@protoc_insertion_point(field_set:onos.topo.UeIdentity.preferred_id_type)
}

// .onos.topo.DrbId drb_id = 7;
inline bool UeIdentity::_internal_has_drb_id() const {
  return this != internal_default_instance() && drb_id_ != nullptr;
}
inline bool UeIdentity::has_drb_id() const {
  return _internal_has_drb_id();
}
inline void UeIdentity::clear_drb_id() {
  if (GetArenaForAllocation() == nullptr && drb_id_ != nullptr) {
    delete drb_id_;
  }
  drb_id_ = nullptr;
}
inline const ::onos::topo::DrbId& UeIdentity::_internal_drb_id() const {
  const ::onos::topo::DrbId* p = drb_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::topo::DrbId&>(
      ::onos::topo::_DrbId_default_instance_);
}
inline const ::onos::topo::DrbId& UeIdentity::drb_id() const {
  // @@protoc_insertion_point(field_get:onos.topo.UeIdentity.drb_id)
  return _internal_drb_id();
}
inline void UeIdentity::unsafe_arena_set_allocated_drb_id(
    ::onos::topo::DrbId* drb_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(drb_id_);
  }
  drb_id_ = drb_id;
  if (drb_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.topo.UeIdentity.drb_id)
}
inline ::onos::topo::DrbId* UeIdentity::release_drb_id() {
  
  ::onos::topo::DrbId* temp = drb_id_;
  drb_id_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::topo::DrbId* UeIdentity::unsafe_arena_release_drb_id() {
  // @@protoc_insertion_point(field_release:onos.topo.UeIdentity.drb_id)
  
  ::onos::topo::DrbId* temp = drb_id_;
  drb_id_ = nullptr;
  return temp;
}
inline ::onos::topo::DrbId* UeIdentity::_internal_mutable_drb_id() {
  
  if (drb_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::topo::DrbId>(GetArenaForAllocation());
    drb_id_ = p;
  }
  return drb_id_;
}
inline ::onos::topo::DrbId* UeIdentity::mutable_drb_id() {
  ::onos::topo::DrbId* _msg = _internal_mutable_drb_id();
  // @@protoc_insertion_point(field_mutable:onos.topo.UeIdentity.drb_id)
  return _msg;
}
inline void UeIdentity::set_allocated_drb_id(::onos::topo::DrbId* drb_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete drb_id_;
  }
  if (drb_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::topo::DrbId>::GetOwningArena(drb_id);
    if (message_arena != submessage_arena) {
      drb_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, drb_id, submessage_arena);
    }
    
  } else {
    
  }
  drb_id_ = drb_id;
  // @@protoc_insertion_point(field_set_allocated:onos.topo.UeIdentity.drb_id)
}

// -------------------------------------------------------------------

// DrbId

// .onos.topo.FourGDrbId four_gdrb_id = 1 [json_name = "fourGDrbID"];
inline bool DrbId::_internal_has_four_gdrb_id() const {
  return drb_id_case() == kFourGdrbId;
}
inline bool DrbId::has_four_gdrb_id() const {
  return _internal_has_four_gdrb_id();
}
inline void DrbId::set_has_four_gdrb_id() {
  _oneof_case_[0] = kFourGdrbId;
}
inline void DrbId::clear_four_gdrb_id() {
  if (_internal_has_four_gdrb_id()) {
    if (GetArenaForAllocation() == nullptr) {
      delete drb_id_.four_gdrb_id_;
    }
    clear_has_drb_id();
  }
}
inline ::onos::topo::FourGDrbId* DrbId::release_four_gdrb_id() {
  // @@protoc_insertion_point(field_release:onos.topo.DrbId.four_gdrb_id)
  if (_internal_has_four_gdrb_id()) {
    clear_has_drb_id();
      ::onos::topo::FourGDrbId* temp = drb_id_.four_gdrb_id_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    drb_id_.four_gdrb_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::onos::topo::FourGDrbId& DrbId::_internal_four_gdrb_id() const {
  return _internal_has_four_gdrb_id()
      ? *drb_id_.four_gdrb_id_
      : reinterpret_cast< ::onos::topo::FourGDrbId&>(::onos::topo::_FourGDrbId_default_instance_);
}
inline const ::onos::topo::FourGDrbId& DrbId::four_gdrb_id() const {
  // @@protoc_insertion_point(field_get:onos.topo.DrbId.four_gdrb_id)
  return _internal_four_gdrb_id();
}
inline ::onos::topo::FourGDrbId* DrbId::unsafe_arena_release_four_gdrb_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:onos.topo.DrbId.four_gdrb_id)
  if (_internal_has_four_gdrb_id()) {
    clear_has_drb_id();
    ::onos::topo::FourGDrbId* temp = drb_id_.four_gdrb_id_;
    drb_id_.four_gdrb_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DrbId::unsafe_arena_set_allocated_four_gdrb_id(::onos::topo::FourGDrbId* four_gdrb_id) {
  clear_drb_id();
  if (four_gdrb_id) {
    set_has_four_gdrb_id();
    drb_id_.four_gdrb_id_ = four_gdrb_id;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.topo.DrbId.four_gdrb_id)
}
inline ::onos::topo::FourGDrbId* DrbId::_internal_mutable_four_gdrb_id() {
  if (!_internal_has_four_gdrb_id()) {
    clear_drb_id();
    set_has_four_gdrb_id();
    drb_id_.four_gdrb_id_ = CreateMaybeMessage< ::onos::topo::FourGDrbId >(GetArenaForAllocation());
  }
  return drb_id_.four_gdrb_id_;
}
inline ::onos::topo::FourGDrbId* DrbId::mutable_four_gdrb_id() {
  ::onos::topo::FourGDrbId* _msg = _internal_mutable_four_gdrb_id();
  // @@protoc_insertion_point(field_mutable:onos.topo.DrbId.four_gdrb_id)
  return _msg;
}

// .onos.topo.FiveGDrbId five_gdrb_id = 2 [json_name = "fiveGDrbID"];
inline bool DrbId::_internal_has_five_gdrb_id() const {
  return drb_id_case() == kFiveGdrbId;
}
inline bool DrbId::has_five_gdrb_id() const {
  return _internal_has_five_gdrb_id();
}
inline void DrbId::set_has_five_gdrb_id() {
  _oneof_case_[0] = kFiveGdrbId;
}
inline void DrbId::clear_five_gdrb_id() {
  if (_internal_has_five_gdrb_id()) {
    if (GetArenaForAllocation() == nullptr) {
      delete drb_id_.five_gdrb_id_;
    }
    clear_has_drb_id();
  }
}
inline ::onos::topo::FiveGDrbId* DrbId::release_five_gdrb_id() {
  // @@protoc_insertion_point(field_release:onos.topo.DrbId.five_gdrb_id)
  if (_internal_has_five_gdrb_id()) {
    clear_has_drb_id();
      ::onos::topo::FiveGDrbId* temp = drb_id_.five_gdrb_id_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    drb_id_.five_gdrb_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::onos::topo::FiveGDrbId& DrbId::_internal_five_gdrb_id() const {
  return _internal_has_five_gdrb_id()
      ? *drb_id_.five_gdrb_id_
      : reinterpret_cast< ::onos::topo::FiveGDrbId&>(::onos::topo::_FiveGDrbId_default_instance_);
}
inline const ::onos::topo::FiveGDrbId& DrbId::five_gdrb_id() const {
  // @@protoc_insertion_point(field_get:onos.topo.DrbId.five_gdrb_id)
  return _internal_five_gdrb_id();
}
inline ::onos::topo::FiveGDrbId* DrbId::unsafe_arena_release_five_gdrb_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:onos.topo.DrbId.five_gdrb_id)
  if (_internal_has_five_gdrb_id()) {
    clear_has_drb_id();
    ::onos::topo::FiveGDrbId* temp = drb_id_.five_gdrb_id_;
    drb_id_.five_gdrb_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DrbId::unsafe_arena_set_allocated_five_gdrb_id(::onos::topo::FiveGDrbId* five_gdrb_id) {
  clear_drb_id();
  if (five_gdrb_id) {
    set_has_five_gdrb_id();
    drb_id_.five_gdrb_id_ = five_gdrb_id;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.topo.DrbId.five_gdrb_id)
}
inline ::onos::topo::FiveGDrbId* DrbId::_internal_mutable_five_gdrb_id() {
  if (!_internal_has_five_gdrb_id()) {
    clear_drb_id();
    set_has_five_gdrb_id();
    drb_id_.five_gdrb_id_ = CreateMaybeMessage< ::onos::topo::FiveGDrbId >(GetArenaForAllocation());
  }
  return drb_id_.five_gdrb_id_;
}
inline ::onos::topo::FiveGDrbId* DrbId::mutable_five_gdrb_id() {
  ::onos::topo::FiveGDrbId* _msg = _internal_mutable_five_gdrb_id();
  // @@protoc_insertion_point(field_mutable:onos.topo.DrbId.five_gdrb_id)
  return _msg;
}

inline bool DrbId::has_drb_id() const {
  return drb_id_case() != DRB_ID_NOT_SET;
}
inline void DrbId::clear_has_drb_id() {
  _oneof_case_[0] = DRB_ID_NOT_SET;
}
inline DrbId::DrbIdCase DrbId::drb_id_case() const {
  return DrbId::DrbIdCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// FiveGDrbId

// int32 value = 1;
inline void FiveGDrbId::clear_value() {
  value_ = 0;
}
inline int32_t FiveGDrbId::_internal_value() const {
  return value_;
}
inline int32_t FiveGDrbId::value() const {
  // @@protoc_insertion_point(field_get:onos.topo.FiveGDrbId.value)
  return _internal_value();
}
inline void FiveGDrbId::_internal_set_value(int32_t value) {
  
  value_ = value;
}
inline void FiveGDrbId::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:onos.topo.FiveGDrbId.value)
}

// .onos.topo.Qfi qfi = 2;
inline bool FiveGDrbId::_internal_has_qfi() const {
  return this != internal_default_instance() && qfi_ != nullptr;
}
inline bool FiveGDrbId::has_qfi() const {
  return _internal_has_qfi();
}
inline void FiveGDrbId::clear_qfi() {
  if (GetArenaForAllocation() == nullptr && qfi_ != nullptr) {
    delete qfi_;
  }
  qfi_ = nullptr;
}
inline const ::onos::topo::Qfi& FiveGDrbId::_internal_qfi() const {
  const ::onos::topo::Qfi* p = qfi_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::topo::Qfi&>(
      ::onos::topo::_Qfi_default_instance_);
}
inline const ::onos::topo::Qfi& FiveGDrbId::qfi() const {
  // @@protoc_insertion_point(field_get:onos.topo.FiveGDrbId.qfi)
  return _internal_qfi();
}
inline void FiveGDrbId::unsafe_arena_set_allocated_qfi(
    ::onos::topo::Qfi* qfi) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(qfi_);
  }
  qfi_ = qfi;
  if (qfi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.topo.FiveGDrbId.qfi)
}
inline ::onos::topo::Qfi* FiveGDrbId::release_qfi() {
  
  ::onos::topo::Qfi* temp = qfi_;
  qfi_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::topo::Qfi* FiveGDrbId::unsafe_arena_release_qfi() {
  // @@protoc_insertion_point(field_release:onos.topo.FiveGDrbId.qfi)
  
  ::onos::topo::Qfi* temp = qfi_;
  qfi_ = nullptr;
  return temp;
}
inline ::onos::topo::Qfi* FiveGDrbId::_internal_mutable_qfi() {
  
  if (qfi_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::topo::Qfi>(GetArenaForAllocation());
    qfi_ = p;
  }
  return qfi_;
}
inline ::onos::topo::Qfi* FiveGDrbId::mutable_qfi() {
  ::onos::topo::Qfi* _msg = _internal_mutable_qfi();
  // @@protoc_insertion_point(field_mutable:onos.topo.FiveGDrbId.qfi)
  return _msg;
}
inline void FiveGDrbId::set_allocated_qfi(::onos::topo::Qfi* qfi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete qfi_;
  }
  if (qfi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::topo::Qfi>::GetOwningArena(qfi);
    if (message_arena != submessage_arena) {
      qfi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, qfi, submessage_arena);
    }
    
  } else {
    
  }
  qfi_ = qfi;
  // @@protoc_insertion_point(field_set_allocated:onos.topo.FiveGDrbId.qfi)
}

// repeated .onos.topo.QoSflowLevelParameters flows_map_to_drb = 3;
inline int FiveGDrbId::_internal_flows_map_to_drb_size() const {
  return flows_map_to_drb_.size();
}
inline int FiveGDrbId::flows_map_to_drb_size() const {
  return _internal_flows_map_to_drb_size();
}
inline void FiveGDrbId::clear_flows_map_to_drb() {
  flows_map_to_drb_.Clear();
}
inline ::onos::topo::QoSflowLevelParameters* FiveGDrbId::mutable_flows_map_to_drb(int index) {
  // @@protoc_insertion_point(field_mutable:onos.topo.FiveGDrbId.flows_map_to_drb)
  return flows_map_to_drb_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::QoSflowLevelParameters >*
FiveGDrbId::mutable_flows_map_to_drb() {
  // @@protoc_insertion_point(field_mutable_list:onos.topo.FiveGDrbId.flows_map_to_drb)
  return &flows_map_to_drb_;
}
inline const ::onos::topo::QoSflowLevelParameters& FiveGDrbId::_internal_flows_map_to_drb(int index) const {
  return flows_map_to_drb_.Get(index);
}
inline const ::onos::topo::QoSflowLevelParameters& FiveGDrbId::flows_map_to_drb(int index) const {
  // @@protoc_insertion_point(field_get:onos.topo.FiveGDrbId.flows_map_to_drb)
  return _internal_flows_map_to_drb(index);
}
inline ::onos::topo::QoSflowLevelParameters* FiveGDrbId::_internal_add_flows_map_to_drb() {
  return flows_map_to_drb_.Add();
}
inline ::onos::topo::QoSflowLevelParameters* FiveGDrbId::add_flows_map_to_drb() {
  ::onos::topo::QoSflowLevelParameters* _add = _internal_add_flows_map_to_drb();
  // @@protoc_insertion_point(field_add:onos.topo.FiveGDrbId.flows_map_to_drb)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::topo::QoSflowLevelParameters >&
FiveGDrbId::flows_map_to_drb() const {
  // @@protoc_insertion_point(field_list:onos.topo.FiveGDrbId.flows_map_to_drb)
  return flows_map_to_drb_;
}

// -------------------------------------------------------------------

// Qfi

// int32 value = 1;
inline void Qfi::clear_value() {
  value_ = 0;
}
inline int32_t Qfi::_internal_value() const {
  return value_;
}
inline int32_t Qfi::value() const {
  // @@protoc_insertion_point(field_get:onos.topo.Qfi.value)
  return _internal_value();
}
inline void Qfi::_internal_set_value(int32_t value) {
  
  value_ = value;
}
inline void Qfi::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:onos.topo.Qfi.value)
}

// -------------------------------------------------------------------

// QoSflowLevelParameters

// .onos.topo.DynamicFiveQi dynamic_five_qi = 1;
inline bool QoSflowLevelParameters::_internal_has_dynamic_five_qi() const {
  return qos_flow_level_parameters_case() == kDynamicFiveQi;
}
inline bool QoSflowLevelParameters::has_dynamic_five_qi() const {
  return _internal_has_dynamic_five_qi();
}
inline void QoSflowLevelParameters::set_has_dynamic_five_qi() {
  _oneof_case_[0] = kDynamicFiveQi;
}
inline void QoSflowLevelParameters::clear_dynamic_five_qi() {
  if (_internal_has_dynamic_five_qi()) {
    if (GetArenaForAllocation() == nullptr) {
      delete qos_flow_level_parameters_.dynamic_five_qi_;
    }
    clear_has_qos_flow_level_parameters();
  }
}
inline ::onos::topo::DynamicFiveQi* QoSflowLevelParameters::release_dynamic_five_qi() {
  // @@protoc_insertion_point(field_release:onos.topo.QoSflowLevelParameters.dynamic_five_qi)
  if (_internal_has_dynamic_five_qi()) {
    clear_has_qos_flow_level_parameters();
      ::onos::topo::DynamicFiveQi* temp = qos_flow_level_parameters_.dynamic_five_qi_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    qos_flow_level_parameters_.dynamic_five_qi_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::onos::topo::DynamicFiveQi& QoSflowLevelParameters::_internal_dynamic_five_qi() const {
  return _internal_has_dynamic_five_qi()
      ? *qos_flow_level_parameters_.dynamic_five_qi_
      : reinterpret_cast< ::onos::topo::DynamicFiveQi&>(::onos::topo::_DynamicFiveQi_default_instance_);
}
inline const ::onos::topo::DynamicFiveQi& QoSflowLevelParameters::dynamic_five_qi() const {
  // @@protoc_insertion_point(field_get:onos.topo.QoSflowLevelParameters.dynamic_five_qi)
  return _internal_dynamic_five_qi();
}
inline ::onos::topo::DynamicFiveQi* QoSflowLevelParameters::unsafe_arena_release_dynamic_five_qi() {
  // @@protoc_insertion_point(field_unsafe_arena_release:onos.topo.QoSflowLevelParameters.dynamic_five_qi)
  if (_internal_has_dynamic_five_qi()) {
    clear_has_qos_flow_level_parameters();
    ::onos::topo::DynamicFiveQi* temp = qos_flow_level_parameters_.dynamic_five_qi_;
    qos_flow_level_parameters_.dynamic_five_qi_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void QoSflowLevelParameters::unsafe_arena_set_allocated_dynamic_five_qi(::onos::topo::DynamicFiveQi* dynamic_five_qi) {
  clear_qos_flow_level_parameters();
  if (dynamic_five_qi) {
    set_has_dynamic_five_qi();
    qos_flow_level_parameters_.dynamic_five_qi_ = dynamic_five_qi;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.topo.QoSflowLevelParameters.dynamic_five_qi)
}
inline ::onos::topo::DynamicFiveQi* QoSflowLevelParameters::_internal_mutable_dynamic_five_qi() {
  if (!_internal_has_dynamic_five_qi()) {
    clear_qos_flow_level_parameters();
    set_has_dynamic_five_qi();
    qos_flow_level_parameters_.dynamic_five_qi_ = CreateMaybeMessage< ::onos::topo::DynamicFiveQi >(GetArenaForAllocation());
  }
  return qos_flow_level_parameters_.dynamic_five_qi_;
}
inline ::onos::topo::DynamicFiveQi* QoSflowLevelParameters::mutable_dynamic_five_qi() {
  ::onos::topo::DynamicFiveQi* _msg = _internal_mutable_dynamic_five_qi();
  // @@protoc_insertion_point(field_mutable:onos.topo.QoSflowLevelParameters.dynamic_five_qi)
  return _msg;
}

// .onos.topo.NonDynamicFiveQi non_dynamic_five_qi = 2;
inline bool QoSflowLevelParameters::_internal_has_non_dynamic_five_qi() const {
  return qos_flow_level_parameters_case() == kNonDynamicFiveQi;
}
inline bool QoSflowLevelParameters::has_non_dynamic_five_qi() const {
  return _internal_has_non_dynamic_five_qi();
}
inline void QoSflowLevelParameters::set_has_non_dynamic_five_qi() {
  _oneof_case_[0] = kNonDynamicFiveQi;
}
inline void QoSflowLevelParameters::clear_non_dynamic_five_qi() {
  if (_internal_has_non_dynamic_five_qi()) {
    if (GetArenaForAllocation() == nullptr) {
      delete qos_flow_level_parameters_.non_dynamic_five_qi_;
    }
    clear_has_qos_flow_level_parameters();
  }
}
inline ::onos::topo::NonDynamicFiveQi* QoSflowLevelParameters::release_non_dynamic_five_qi() {
  // @@protoc_insertion_point(field_release:onos.topo.QoSflowLevelParameters.non_dynamic_five_qi)
  if (_internal_has_non_dynamic_five_qi()) {
    clear_has_qos_flow_level_parameters();
      ::onos::topo::NonDynamicFiveQi* temp = qos_flow_level_parameters_.non_dynamic_five_qi_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    qos_flow_level_parameters_.non_dynamic_five_qi_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::onos::topo::NonDynamicFiveQi& QoSflowLevelParameters::_internal_non_dynamic_five_qi() const {
  return _internal_has_non_dynamic_five_qi()
      ? *qos_flow_level_parameters_.non_dynamic_five_qi_
      : reinterpret_cast< ::onos::topo::NonDynamicFiveQi&>(::onos::topo::_NonDynamicFiveQi_default_instance_);
}
inline const ::onos::topo::NonDynamicFiveQi& QoSflowLevelParameters::non_dynamic_five_qi() const {
  // @@protoc_insertion_point(field_get:onos.topo.QoSflowLevelParameters.non_dynamic_five_qi)
  return _internal_non_dynamic_five_qi();
}
inline ::onos::topo::NonDynamicFiveQi* QoSflowLevelParameters::unsafe_arena_release_non_dynamic_five_qi() {
  // @@protoc_insertion_point(field_unsafe_arena_release:onos.topo.QoSflowLevelParameters.non_dynamic_five_qi)
  if (_internal_has_non_dynamic_five_qi()) {
    clear_has_qos_flow_level_parameters();
    ::onos::topo::NonDynamicFiveQi* temp = qos_flow_level_parameters_.non_dynamic_five_qi_;
    qos_flow_level_parameters_.non_dynamic_five_qi_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void QoSflowLevelParameters::unsafe_arena_set_allocated_non_dynamic_five_qi(::onos::topo::NonDynamicFiveQi* non_dynamic_five_qi) {
  clear_qos_flow_level_parameters();
  if (non_dynamic_five_qi) {
    set_has_non_dynamic_five_qi();
    qos_flow_level_parameters_.non_dynamic_five_qi_ = non_dynamic_five_qi;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.topo.QoSflowLevelParameters.non_dynamic_five_qi)
}
inline ::onos::topo::NonDynamicFiveQi* QoSflowLevelParameters::_internal_mutable_non_dynamic_five_qi() {
  if (!_internal_has_non_dynamic_five_qi()) {
    clear_qos_flow_level_parameters();
    set_has_non_dynamic_five_qi();
    qos_flow_level_parameters_.non_dynamic_five_qi_ = CreateMaybeMessage< ::onos::topo::NonDynamicFiveQi >(GetArenaForAllocation());
  }
  return qos_flow_level_parameters_.non_dynamic_five_qi_;
}
inline ::onos::topo::NonDynamicFiveQi* QoSflowLevelParameters::mutable_non_dynamic_five_qi() {
  ::onos::topo::NonDynamicFiveQi* _msg = _internal_mutable_non_dynamic_five_qi();
  // @@protoc_insertion_point(field_mutable:onos.topo.QoSflowLevelParameters.non_dynamic_five_qi)
  return _msg;
}

inline bool QoSflowLevelParameters::has_qos_flow_level_parameters() const {
  return qos_flow_level_parameters_case() != QOS_FLOW_LEVEL_PARAMETERS_NOT_SET;
}
inline void QoSflowLevelParameters::clear_has_qos_flow_level_parameters() {
  _oneof_case_[0] = QOS_FLOW_LEVEL_PARAMETERS_NOT_SET;
}
inline QoSflowLevelParameters::QosFlowLevelParametersCase QoSflowLevelParameters::qos_flow_level_parameters_case() const {
  return QoSflowLevelParameters::QosFlowLevelParametersCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// DynamicFiveQi

// int32 priority_level = 1;
inline void DynamicFiveQi::clear_priority_level() {
  priority_level_ = 0;
}
inline int32_t DynamicFiveQi::_internal_priority_level() const {
  return priority_level_;
}
inline int32_t DynamicFiveQi::priority_level() const {
  // @@protoc_insertion_point(field_get:onos.topo.DynamicFiveQi.priority_level)
  return _internal_priority_level();
}
inline void DynamicFiveQi::_internal_set_priority_level(int32_t value) {
  
  priority_level_ = value;
}
inline void DynamicFiveQi::set_priority_level(int32_t value) {
  _internal_set_priority_level(value);
  // @@protoc_insertion_point(field_set:onos.topo.DynamicFiveQi.priority_level)
}

// int32 packet_delay_budge = 2;
inline void DynamicFiveQi::clear_packet_delay_budge() {
  packet_delay_budge_ = 0;
}
inline int32_t DynamicFiveQi::_internal_packet_delay_budge() const {
  return packet_delay_budge_;
}
inline int32_t DynamicFiveQi::packet_delay_budge() const {
  // @@protoc_insertion_point(field_get:onos.topo.DynamicFiveQi.packet_delay_budge)
  return _internal_packet_delay_budge();
}
inline void DynamicFiveQi::_internal_set_packet_delay_budge(int32_t value) {
  
  packet_delay_budge_ = value;
}
inline void DynamicFiveQi::set_packet_delay_budge(int32_t value) {
  _internal_set_packet_delay_budge(value);
  // @@protoc_insertion_point(field_set:onos.topo.DynamicFiveQi.packet_delay_budge)
}

// int32 packet_error_rate = 3;
inline void DynamicFiveQi::clear_packet_error_rate() {
  packet_error_rate_ = 0;
}
inline int32_t DynamicFiveQi::_internal_packet_error_rate() const {
  return packet_error_rate_;
}
inline int32_t DynamicFiveQi::packet_error_rate() const {
  // @@protoc_insertion_point(field_get:onos.topo.DynamicFiveQi.packet_error_rate)
  return _internal_packet_error_rate();
}
inline void DynamicFiveQi::_internal_set_packet_error_rate(int32_t value) {
  
  packet_error_rate_ = value;
}
inline void DynamicFiveQi::set_packet_error_rate(int32_t value) {
  _internal_set_packet_error_rate(value);
  // @@protoc_insertion_point(field_set:onos.topo.DynamicFiveQi.packet_error_rate)
}

// -------------------------------------------------------------------

// NonDynamicFiveQi

// .onos.topo.FiveQi five_qi = 1;
inline bool NonDynamicFiveQi::_internal_has_five_qi() const {
  return this != internal_default_instance() && five_qi_ != nullptr;
}
inline bool NonDynamicFiveQi::has_five_qi() const {
  return _internal_has_five_qi();
}
inline void NonDynamicFiveQi::clear_five_qi() {
  if (GetArenaForAllocation() == nullptr && five_qi_ != nullptr) {
    delete five_qi_;
  }
  five_qi_ = nullptr;
}
inline const ::onos::topo::FiveQi& NonDynamicFiveQi::_internal_five_qi() const {
  const ::onos::topo::FiveQi* p = five_qi_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::topo::FiveQi&>(
      ::onos::topo::_FiveQi_default_instance_);
}
inline const ::onos::topo::FiveQi& NonDynamicFiveQi::five_qi() const {
  // @@protoc_insertion_point(field_get:onos.topo.NonDynamicFiveQi.five_qi)
  return _internal_five_qi();
}
inline void NonDynamicFiveQi::unsafe_arena_set_allocated_five_qi(
    ::onos::topo::FiveQi* five_qi) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(five_qi_);
  }
  five_qi_ = five_qi;
  if (five_qi) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.topo.NonDynamicFiveQi.five_qi)
}
inline ::onos::topo::FiveQi* NonDynamicFiveQi::release_five_qi() {
  
  ::onos::topo::FiveQi* temp = five_qi_;
  five_qi_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::topo::FiveQi* NonDynamicFiveQi::unsafe_arena_release_five_qi() {
  // @@protoc_insertion_point(field_release:onos.topo.NonDynamicFiveQi.five_qi)
  
  ::onos::topo::FiveQi* temp = five_qi_;
  five_qi_ = nullptr;
  return temp;
}
inline ::onos::topo::FiveQi* NonDynamicFiveQi::_internal_mutable_five_qi() {
  
  if (five_qi_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::topo::FiveQi>(GetArenaForAllocation());
    five_qi_ = p;
  }
  return five_qi_;
}
inline ::onos::topo::FiveQi* NonDynamicFiveQi::mutable_five_qi() {
  ::onos::topo::FiveQi* _msg = _internal_mutable_five_qi();
  // @@protoc_insertion_point(field_mutable:onos.topo.NonDynamicFiveQi.five_qi)
  return _msg;
}
inline void NonDynamicFiveQi::set_allocated_five_qi(::onos::topo::FiveQi* five_qi) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete five_qi_;
  }
  if (five_qi) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::topo::FiveQi>::GetOwningArena(five_qi);
    if (message_arena != submessage_arena) {
      five_qi = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, five_qi, submessage_arena);
    }
    
  } else {
    
  }
  five_qi_ = five_qi;
  // @@protoc_insertion_point(field_set_allocated:onos.topo.NonDynamicFiveQi.five_qi)
}

// -------------------------------------------------------------------

// FiveQi

// int32 value = 1;
inline void FiveQi::clear_value() {
  value_ = 0;
}
inline int32_t FiveQi::_internal_value() const {
  return value_;
}
inline int32_t FiveQi::value() const {
  // @@protoc_insertion_point(field_get:onos.topo.FiveQi.value)
  return _internal_value();
}
inline void FiveQi::_internal_set_value(int32_t value) {
  
  value_ = value;
}
inline void FiveQi::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:onos.topo.FiveQi.value)
}

// -------------------------------------------------------------------

// FourGDrbId

// int32 value = 1;
inline void FourGDrbId::clear_value() {
  value_ = 0;
}
inline int32_t FourGDrbId::_internal_value() const {
  return value_;
}
inline int32_t FourGDrbId::value() const {
  // @@protoc_insertion_point(field_get:onos.topo.FourGDrbId.value)
  return _internal_value();
}
inline void FourGDrbId::_internal_set_value(int32_t value) {
  
  value_ = value;
}
inline void FourGDrbId::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:onos.topo.FourGDrbId.value)
}

// .onos.topo.Qci qci = 2;
inline bool FourGDrbId::_internal_has_qci() const {
  return this != internal_default_instance() && qci_ != nullptr;
}
inline bool FourGDrbId::has_qci() const {
  return _internal_has_qci();
}
inline void FourGDrbId::clear_qci() {
  if (GetArenaForAllocation() == nullptr && qci_ != nullptr) {
    delete qci_;
  }
  qci_ = nullptr;
}
inline const ::onos::topo::Qci& FourGDrbId::_internal_qci() const {
  const ::onos::topo::Qci* p = qci_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::topo::Qci&>(
      ::onos::topo::_Qci_default_instance_);
}
inline const ::onos::topo::Qci& FourGDrbId::qci() const {
  // @@protoc_insertion_point(field_get:onos.topo.FourGDrbId.qci)
  return _internal_qci();
}
inline void FourGDrbId::unsafe_arena_set_allocated_qci(
    ::onos::topo::Qci* qci) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(qci_);
  }
  qci_ = qci;
  if (qci) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.topo.FourGDrbId.qci)
}
inline ::onos::topo::Qci* FourGDrbId::release_qci() {
  
  ::onos::topo::Qci* temp = qci_;
  qci_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::topo::Qci* FourGDrbId::unsafe_arena_release_qci() {
  // @@protoc_insertion_point(field_release:onos.topo.FourGDrbId.qci)
  
  ::onos::topo::Qci* temp = qci_;
  qci_ = nullptr;
  return temp;
}
inline ::onos::topo::Qci* FourGDrbId::_internal_mutable_qci() {
  
  if (qci_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::topo::Qci>(GetArenaForAllocation());
    qci_ = p;
  }
  return qci_;
}
inline ::onos::topo::Qci* FourGDrbId::mutable_qci() {
  ::onos::topo::Qci* _msg = _internal_mutable_qci();
  // @@protoc_insertion_point(field_mutable:onos.topo.FourGDrbId.qci)
  return _msg;
}
inline void FourGDrbId::set_allocated_qci(::onos::topo::Qci* qci) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete qci_;
  }
  if (qci) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::topo::Qci>::GetOwningArena(qci);
    if (message_arena != submessage_arena) {
      qci = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, qci, submessage_arena);
    }
    
  } else {
    
  }
  qci_ = qci;
  // @@protoc_insertion_point(field_set_allocated:onos.topo.FourGDrbId.qci)
}

// -------------------------------------------------------------------

// Qci

// int32 value = 1;
inline void Qci::clear_value() {
  value_ = 0;
}
inline int32_t Qci::_internal_value() const {
  return value_;
}
inline int32_t Qci::value() const {
  // @@protoc_insertion_point(field_get:onos.topo.Qci.value)
  return _internal_value();
}
inline void Qci::_internal_set_value(int32_t value) {
  
  value_ = value;
}
inline void Qci::set_value(int32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:onos.topo.Qci.value)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace topo
}  // namespace onos

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::onos::topo::Interface_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::onos::topo::Interface_Type>() {
  return ::onos::topo::Interface_Type_descriptor();
}
template <> struct is_proto_enum< ::onos::topo::RANEntityKinds> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::onos::topo::RANEntityKinds>() {
  return ::onos::topo::RANEntityKinds_descriptor();
}
template <> struct is_proto_enum< ::onos::topo::RANRelationKinds> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::onos::topo::RANRelationKinds>() {
  return ::onos::topo::RANRelationKinds_descriptor();
}
template <> struct is_proto_enum< ::onos::topo::CellGlobalIDType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::onos::topo::CellGlobalIDType>() {
  return ::onos::topo::CellGlobalIDType_descriptor();
}
template <> struct is_proto_enum< ::onos::topo::NodeType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::onos::topo::NodeType>() {
  return ::onos::topo::NodeType_descriptor();
}
template <> struct is_proto_enum< ::onos::topo::ComponentType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::onos::topo::ComponentType>() {
  return ::onos::topo::ComponentType_descriptor();
}
template <> struct is_proto_enum< ::onos::topo::E2SmRsmCommand> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::onos::topo::E2SmRsmCommand>() {
  return ::onos::topo::E2SmRsmCommand_descriptor();
}
template <> struct is_proto_enum< ::onos::topo::RSMSlicingType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::onos::topo::RSMSlicingType>() {
  return ::onos::topo::RSMSlicingType_descriptor();
}
template <> struct is_proto_enum< ::onos::topo::RSMSchedulerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::onos::topo::RSMSchedulerType>() {
  return ::onos::topo::RSMSchedulerType_descriptor();
}
template <> struct is_proto_enum< ::onos::topo::RSMSliceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::onos::topo::RSMSliceType>() {
  return ::onos::topo::RSMSliceType_descriptor();
}
template <> struct is_proto_enum< ::onos::topo::UeIdType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::onos::topo::UeIdType>() {
  return ::onos::topo::UeIdType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_onos_2ftopo_2fran_2eproto
