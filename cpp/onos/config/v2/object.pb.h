// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onos/config/v2/object.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_onos_2fconfig_2fv2_2fobject_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_onos_2fconfig_2fv2_2fobject_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gogoproto/gogo.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_onos_2fconfig_2fv2_2fobject_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_onos_2fconfig_2fv2_2fobject_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_onos_2fconfig_2fv2_2fobject_2eproto;
namespace onos {
namespace config {
namespace v2 {
class ObjectMeta;
struct ObjectMetaDefaultTypeInternal;
extern ObjectMetaDefaultTypeInternal _ObjectMeta_default_instance_;
class TargetTypeVersion;
struct TargetTypeVersionDefaultTypeInternal;
extern TargetTypeVersionDefaultTypeInternal _TargetTypeVersion_default_instance_;
}  // namespace v2
}  // namespace config
}  // namespace onos
PROTOBUF_NAMESPACE_OPEN
template<> ::onos::config::v2::ObjectMeta* Arena::CreateMaybeMessage<::onos::config::v2::ObjectMeta>(Arena*);
template<> ::onos::config::v2::TargetTypeVersion* Arena::CreateMaybeMessage<::onos::config::v2::TargetTypeVersion>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace onos {
namespace config {
namespace v2 {

// ===================================================================

class ObjectMeta final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.config.v2.ObjectMeta) */ {
 public:
  inline ObjectMeta() : ObjectMeta(nullptr) {}
  ~ObjectMeta() override;
  explicit constexpr ObjectMeta(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectMeta(const ObjectMeta& from);
  ObjectMeta(ObjectMeta&& from) noexcept
    : ObjectMeta() {
    *this = ::std::move(from);
  }

  inline ObjectMeta& operator=(const ObjectMeta& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectMeta& operator=(ObjectMeta&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectMeta& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectMeta* internal_default_instance() {
    return reinterpret_cast<const ObjectMeta*>(
               &_ObjectMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ObjectMeta& a, ObjectMeta& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectMeta* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectMeta* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ObjectMeta* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ObjectMeta>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ObjectMeta& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ObjectMeta& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectMeta* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.config.v2.ObjectMeta";
  }
  protected:
  explicit ObjectMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kCreatedFieldNumber = 4,
    kUpdatedFieldNumber = 5,
    kDeletedFieldNumber = 6,
    kVersionFieldNumber = 2,
    kRevisionFieldNumber = 3,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_NODISCARD std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // .google.protobuf.Timestamp created = 4 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  bool has_created() const;
  private:
  bool _internal_has_created() const;
  public:
  void clear_created();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& created() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_created();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created();
  void set_allocated_created(::PROTOBUF_NAMESPACE_ID::Timestamp* created);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created();
  public:
  void unsafe_arena_set_allocated_created(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* created);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created();

  // .google.protobuf.Timestamp updated = 5 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
  bool has_updated() const;
  private:
  bool _internal_has_updated() const;
  public:
  void clear_updated();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& updated() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_updated();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated();
  void set_allocated_updated(::PROTOBUF_NAMESPACE_ID::Timestamp* updated);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated();
  public:
  void unsafe_arena_set_allocated_updated(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* updated);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated();

  // .google.protobuf.Timestamp deleted = 6 [(.gogoproto.stdtime) = true];
  bool has_deleted() const;
  private:
  bool _internal_has_deleted() const;
  public:
  void clear_deleted();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& deleted() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_deleted();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_deleted();
  void set_allocated_deleted(::PROTOBUF_NAMESPACE_ID::Timestamp* deleted);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_deleted() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_deleted();
  public:
  void unsafe_arena_set_allocated_deleted(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* deleted);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_deleted();

  // uint64 version = 2;
  void clear_version();
  uint64_t version() const;
  void set_version(uint64_t value);
  private:
  uint64_t _internal_version() const;
  void _internal_set_version(uint64_t value);
  public:

  // uint64 revision = 3 [(.gogoproto.casttype) = "Revision"];
  void clear_revision();
  uint64_t revision() const;
  void set_revision(uint64_t value);
  private:
  uint64_t _internal_revision() const;
  void _internal_set_revision(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.config.v2.ObjectMeta)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* created_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* updated_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* deleted_;
  uint64_t version_;
  uint64_t revision_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fconfig_2fv2_2fobject_2eproto;
};
// -------------------------------------------------------------------

class TargetTypeVersion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.config.v2.TargetTypeVersion) */ {
 public:
  inline TargetTypeVersion() : TargetTypeVersion(nullptr) {}
  ~TargetTypeVersion() override;
  explicit constexpr TargetTypeVersion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TargetTypeVersion(const TargetTypeVersion& from);
  TargetTypeVersion(TargetTypeVersion&& from) noexcept
    : TargetTypeVersion() {
    *this = ::std::move(from);
  }

  inline TargetTypeVersion& operator=(const TargetTypeVersion& from) {
    CopyFrom(from);
    return *this;
  }
  inline TargetTypeVersion& operator=(TargetTypeVersion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TargetTypeVersion& default_instance() {
    return *internal_default_instance();
  }
  static inline const TargetTypeVersion* internal_default_instance() {
    return reinterpret_cast<const TargetTypeVersion*>(
               &_TargetTypeVersion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TargetTypeVersion& a, TargetTypeVersion& b) {
    a.Swap(&b);
  }
  inline void Swap(TargetTypeVersion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TargetTypeVersion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TargetTypeVersion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TargetTypeVersion>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TargetTypeVersion& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TargetTypeVersion& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TargetTypeVersion* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.config.v2.TargetTypeVersion";
  }
  protected:
  explicit TargetTypeVersion(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetTypeFieldNumber = 1,
    kTargetVersionFieldNumber = 2,
  };
  // string target_type = 1 [(.gogoproto.casttype) = "TargetType"];
  void clear_target_type();
  const std::string& target_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_target_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_target_type();
  PROTOBUF_NODISCARD std::string* release_target_type();
  void set_allocated_target_type(std::string* target_type);
  private:
  const std::string& _internal_target_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_type(const std::string& value);
  std::string* _internal_mutable_target_type();
  public:

  // string target_version = 2 [(.gogoproto.casttype) = "TargetVersion"];
  void clear_target_version();
  const std::string& target_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_target_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_target_version();
  PROTOBUF_NODISCARD std::string* release_target_version();
  void set_allocated_target_version(std::string* target_version);
  private:
  const std::string& _internal_target_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_version(const std::string& value);
  std::string* _internal_mutable_target_version();
  public:

  // @@protoc_insertion_point(class_scope:onos.config.v2.TargetTypeVersion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fconfig_2fv2_2fobject_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ObjectMeta

// string key = 1;
inline void ObjectMeta::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& ObjectMeta::key() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.ObjectMeta.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectMeta::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.config.v2.ObjectMeta.key)
}
inline std::string* ObjectMeta::mutable_key() {
  std::string* _s = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:onos.config.v2.ObjectMeta.key)
  return _s;
}
inline const std::string& ObjectMeta::_internal_key() const {
  return key_.Get();
}
inline void ObjectMeta::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ObjectMeta::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ObjectMeta::release_key() {
  // @@protoc_insertion_point(field_release:onos.config.v2.ObjectMeta.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ObjectMeta::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (key_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.config.v2.ObjectMeta.key)
}

// uint64 version = 2;
inline void ObjectMeta::clear_version() {
  version_ = uint64_t{0u};
}
inline uint64_t ObjectMeta::_internal_version() const {
  return version_;
}
inline uint64_t ObjectMeta::version() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.ObjectMeta.version)
  return _internal_version();
}
inline void ObjectMeta::_internal_set_version(uint64_t value) {
  
  version_ = value;
}
inline void ObjectMeta::set_version(uint64_t value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:onos.config.v2.ObjectMeta.version)
}

// uint64 revision = 3 [(.gogoproto.casttype) = "Revision"];
inline void ObjectMeta::clear_revision() {
  revision_ = uint64_t{0u};
}
inline uint64_t ObjectMeta::_internal_revision() const {
  return revision_;
}
inline uint64_t ObjectMeta::revision() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.ObjectMeta.revision)
  return _internal_revision();
}
inline void ObjectMeta::_internal_set_revision(uint64_t value) {
  
  revision_ = value;
}
inline void ObjectMeta::set_revision(uint64_t value) {
  _internal_set_revision(value);
  // @@protoc_insertion_point(field_set:onos.config.v2.ObjectMeta.revision)
}

// .google.protobuf.Timestamp created = 4 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
inline bool ObjectMeta::_internal_has_created() const {
  return this != internal_default_instance() && created_ != nullptr;
}
inline bool ObjectMeta::has_created() const {
  return _internal_has_created();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ObjectMeta::_internal_created() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = created_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ObjectMeta::created() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.ObjectMeta.created)
  return _internal_created();
}
inline void ObjectMeta::unsafe_arena_set_allocated_created(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* created) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_);
  }
  created_ = created;
  if (created) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.config.v2.ObjectMeta.created)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ObjectMeta::release_created() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_;
  created_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ObjectMeta::unsafe_arena_release_created() {
  // @@protoc_insertion_point(field_release:onos.config.v2.ObjectMeta.created)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_;
  created_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ObjectMeta::_internal_mutable_created() {
  
  if (created_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    created_ = p;
  }
  return created_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ObjectMeta::mutable_created() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_created();
  // @@protoc_insertion_point(field_mutable:onos.config.v2.ObjectMeta.created)
  return _msg;
}
inline void ObjectMeta::set_allocated_created(::PROTOBUF_NAMESPACE_ID::Timestamp* created) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_);
  }
  if (created) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created));
    if (message_arena != submessage_arena) {
      created = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created, submessage_arena);
    }
    
  } else {
    
  }
  created_ = created;
  // @@protoc_insertion_point(field_set_allocated:onos.config.v2.ObjectMeta.created)
}

// .google.protobuf.Timestamp updated = 5 [(.gogoproto.nullable) = false, (.gogoproto.stdtime) = true];
inline bool ObjectMeta::_internal_has_updated() const {
  return this != internal_default_instance() && updated_ != nullptr;
}
inline bool ObjectMeta::has_updated() const {
  return _internal_has_updated();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ObjectMeta::_internal_updated() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = updated_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ObjectMeta::updated() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.ObjectMeta.updated)
  return _internal_updated();
}
inline void ObjectMeta::unsafe_arena_set_allocated_updated(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* updated) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_);
  }
  updated_ = updated;
  if (updated) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.config.v2.ObjectMeta.updated)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ObjectMeta::release_updated() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_;
  updated_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ObjectMeta::unsafe_arena_release_updated() {
  // @@protoc_insertion_point(field_release:onos.config.v2.ObjectMeta.updated)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_;
  updated_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ObjectMeta::_internal_mutable_updated() {
  
  if (updated_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    updated_ = p;
  }
  return updated_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ObjectMeta::mutable_updated() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_updated();
  // @@protoc_insertion_point(field_mutable:onos.config.v2.ObjectMeta.updated)
  return _msg;
}
inline void ObjectMeta::set_allocated_updated(::PROTOBUF_NAMESPACE_ID::Timestamp* updated) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_);
  }
  if (updated) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated));
    if (message_arena != submessage_arena) {
      updated = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated, submessage_arena);
    }
    
  } else {
    
  }
  updated_ = updated;
  // @@protoc_insertion_point(field_set_allocated:onos.config.v2.ObjectMeta.updated)
}

// .google.protobuf.Timestamp deleted = 6 [(.gogoproto.stdtime) = true];
inline bool ObjectMeta::_internal_has_deleted() const {
  return this != internal_default_instance() && deleted_ != nullptr;
}
inline bool ObjectMeta::has_deleted() const {
  return _internal_has_deleted();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ObjectMeta::_internal_deleted() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = deleted_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ObjectMeta::deleted() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.ObjectMeta.deleted)
  return _internal_deleted();
}
inline void ObjectMeta::unsafe_arena_set_allocated_deleted(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* deleted) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deleted_);
  }
  deleted_ = deleted;
  if (deleted) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.config.v2.ObjectMeta.deleted)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ObjectMeta::release_deleted() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = deleted_;
  deleted_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ObjectMeta::unsafe_arena_release_deleted() {
  // @@protoc_insertion_point(field_release:onos.config.v2.ObjectMeta.deleted)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = deleted_;
  deleted_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ObjectMeta::_internal_mutable_deleted() {
  
  if (deleted_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    deleted_ = p;
  }
  return deleted_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ObjectMeta::mutable_deleted() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_deleted();
  // @@protoc_insertion_point(field_mutable:onos.config.v2.ObjectMeta.deleted)
  return _msg;
}
inline void ObjectMeta::set_allocated_deleted(::PROTOBUF_NAMESPACE_ID::Timestamp* deleted) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(deleted_);
  }
  if (deleted) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(deleted));
    if (message_arena != submessage_arena) {
      deleted = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, deleted, submessage_arena);
    }
    
  } else {
    
  }
  deleted_ = deleted;
  // @@protoc_insertion_point(field_set_allocated:onos.config.v2.ObjectMeta.deleted)
}

// -------------------------------------------------------------------

// TargetTypeVersion

// string target_type = 1 [(.gogoproto.casttype) = "TargetType"];
inline void TargetTypeVersion::clear_target_type() {
  target_type_.ClearToEmpty();
}
inline const std::string& TargetTypeVersion::target_type() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.TargetTypeVersion.target_type)
  return _internal_target_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TargetTypeVersion::set_target_type(ArgT0&& arg0, ArgT... args) {
 
 target_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.config.v2.TargetTypeVersion.target_type)
}
inline std::string* TargetTypeVersion::mutable_target_type() {
  std::string* _s = _internal_mutable_target_type();
  // @@protoc_insertion_point(field_mutable:onos.config.v2.TargetTypeVersion.target_type)
  return _s;
}
inline const std::string& TargetTypeVersion::_internal_target_type() const {
  return target_type_.Get();
}
inline void TargetTypeVersion::_internal_set_target_type(const std::string& value) {
  
  target_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TargetTypeVersion::_internal_mutable_target_type() {
  
  return target_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TargetTypeVersion::release_target_type() {
  // @@protoc_insertion_point(field_release:onos.config.v2.TargetTypeVersion.target_type)
  return target_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TargetTypeVersion::set_allocated_target_type(std::string* target_type) {
  if (target_type != nullptr) {
    
  } else {
    
  }
  target_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_type,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (target_type_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    target_type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.config.v2.TargetTypeVersion.target_type)
}

// string target_version = 2 [(.gogoproto.casttype) = "TargetVersion"];
inline void TargetTypeVersion::clear_target_version() {
  target_version_.ClearToEmpty();
}
inline const std::string& TargetTypeVersion::target_version() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.TargetTypeVersion.target_version)
  return _internal_target_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TargetTypeVersion::set_target_version(ArgT0&& arg0, ArgT... args) {
 
 target_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.config.v2.TargetTypeVersion.target_version)
}
inline std::string* TargetTypeVersion::mutable_target_version() {
  std::string* _s = _internal_mutable_target_version();
  // @@protoc_insertion_point(field_mutable:onos.config.v2.TargetTypeVersion.target_version)
  return _s;
}
inline const std::string& TargetTypeVersion::_internal_target_version() const {
  return target_version_.Get();
}
inline void TargetTypeVersion::_internal_set_target_version(const std::string& value) {
  
  target_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TargetTypeVersion::_internal_mutable_target_version() {
  
  return target_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TargetTypeVersion::release_target_version() {
  // @@protoc_insertion_point(field_release:onos.config.v2.TargetTypeVersion.target_version)
  return target_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TargetTypeVersion::set_allocated_target_version(std::string* target_version) {
  if (target_version != nullptr) {
    
  } else {
    
  }
  target_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (target_version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    target_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.config.v2.TargetTypeVersion.target_version)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace config
}  // namespace onos

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_onos_2fconfig_2fv2_2fobject_2eproto
