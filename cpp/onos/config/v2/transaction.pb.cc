// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onos/config/v2/transaction.proto

#include "onos/config/v2/transaction.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace onos {
namespace config {
namespace v2 {
constexpr TransactionInfo::TransactionInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , index_(uint64_t{0u}){}
struct TransactionInfoDefaultTypeInternal {
  constexpr TransactionInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionInfoDefaultTypeInternal() {}
  union {
    TransactionInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionInfoDefaultTypeInternal _TransactionInfo_default_instance_;
constexpr Transaction::Transaction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , username_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , meta_(nullptr)
  , strategy_(nullptr)
  , status_(nullptr)
  , version_overrides_(nullptr)
  , index_(uint64_t{0u})
  , _oneof_case_{}{}
struct TransactionDefaultTypeInternal {
  constexpr TransactionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionDefaultTypeInternal() {}
  union {
    Transaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionDefaultTypeInternal _Transaction_default_instance_;
constexpr TransactionStrategy::TransactionStrategy(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : synchronicity_(0)

  , isolation_(0)
{}
struct TransactionStrategyDefaultTypeInternal {
  constexpr TransactionStrategyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionStrategyDefaultTypeInternal() {}
  union {
    TransactionStrategy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionStrategyDefaultTypeInternal _TransactionStrategy_default_instance_;
constexpr ChangeTransaction_ValuesEntry_DoNotUse::ChangeTransaction_ValuesEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ChangeTransaction_ValuesEntry_DoNotUseDefaultTypeInternal {
  constexpr ChangeTransaction_ValuesEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChangeTransaction_ValuesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ChangeTransaction_ValuesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChangeTransaction_ValuesEntry_DoNotUseDefaultTypeInternal _ChangeTransaction_ValuesEntry_DoNotUse_default_instance_;
constexpr ChangeTransaction::ChangeTransaction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : values_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct ChangeTransactionDefaultTypeInternal {
  constexpr ChangeTransactionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChangeTransactionDefaultTypeInternal() {}
  union {
    ChangeTransaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChangeTransactionDefaultTypeInternal _ChangeTransaction_default_instance_;
constexpr RollbackTransaction::RollbackTransaction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : rollback_index_(uint64_t{0u}){}
struct RollbackTransactionDefaultTypeInternal {
  constexpr RollbackTransactionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RollbackTransactionDefaultTypeInternal() {}
  union {
    RollbackTransaction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RollbackTransactionDefaultTypeInternal _RollbackTransaction_default_instance_;
constexpr TransactionStatus::TransactionStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : proposals_()
  , phases_(nullptr)
  , failure_(nullptr)
  , state_(0)
{}
struct TransactionStatusDefaultTypeInternal {
  constexpr TransactionStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionStatusDefaultTypeInternal() {}
  union {
    TransactionStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionStatusDefaultTypeInternal _TransactionStatus_default_instance_;
constexpr TransactionPhases::TransactionPhases(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : initialize_(nullptr)
  , validate_(nullptr)
  , commit_(nullptr)
  , apply_(nullptr)
  , abort_(nullptr){}
struct TransactionPhasesDefaultTypeInternal {
  constexpr TransactionPhasesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionPhasesDefaultTypeInternal() {}
  union {
    TransactionPhases _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionPhasesDefaultTypeInternal _TransactionPhases_default_instance_;
constexpr TransactionPhaseStatus::TransactionPhaseStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : start_(nullptr)
  , end_(nullptr){}
struct TransactionPhaseStatusDefaultTypeInternal {
  constexpr TransactionPhaseStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionPhaseStatusDefaultTypeInternal() {}
  union {
    TransactionPhaseStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionPhaseStatusDefaultTypeInternal _TransactionPhaseStatus_default_instance_;
constexpr TransactionInitializePhase::TransactionInitializePhase(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(nullptr)
  , failure_(nullptr)
  , state_(0)
{}
struct TransactionInitializePhaseDefaultTypeInternal {
  constexpr TransactionInitializePhaseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionInitializePhaseDefaultTypeInternal() {}
  union {
    TransactionInitializePhase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionInitializePhaseDefaultTypeInternal _TransactionInitializePhase_default_instance_;
constexpr TransactionValidatePhase::TransactionValidatePhase(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(nullptr)
  , failure_(nullptr)
  , state_(0)
{}
struct TransactionValidatePhaseDefaultTypeInternal {
  constexpr TransactionValidatePhaseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionValidatePhaseDefaultTypeInternal() {}
  union {
    TransactionValidatePhase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionValidatePhaseDefaultTypeInternal _TransactionValidatePhase_default_instance_;
constexpr TransactionCommitPhase::TransactionCommitPhase(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(nullptr)
  , state_(0)
{}
struct TransactionCommitPhaseDefaultTypeInternal {
  constexpr TransactionCommitPhaseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionCommitPhaseDefaultTypeInternal() {}
  union {
    TransactionCommitPhase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionCommitPhaseDefaultTypeInternal _TransactionCommitPhase_default_instance_;
constexpr TransactionApplyPhase::TransactionApplyPhase(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(nullptr)
  , failure_(nullptr)
  , state_(0)
{}
struct TransactionApplyPhaseDefaultTypeInternal {
  constexpr TransactionApplyPhaseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionApplyPhaseDefaultTypeInternal() {}
  union {
    TransactionApplyPhase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionApplyPhaseDefaultTypeInternal _TransactionApplyPhase_default_instance_;
constexpr TransactionAbortPhase::TransactionAbortPhase(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(nullptr)
  , state_(0)
{}
struct TransactionAbortPhaseDefaultTypeInternal {
  constexpr TransactionAbortPhaseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionAbortPhaseDefaultTypeInternal() {}
  union {
    TransactionAbortPhase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionAbortPhaseDefaultTypeInternal _TransactionAbortPhase_default_instance_;
constexpr TransactionEvent::TransactionEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transaction_(nullptr)
  , type_(0)
{}
struct TransactionEventDefaultTypeInternal {
  constexpr TransactionEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TransactionEventDefaultTypeInternal() {}
  union {
    TransactionEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TransactionEventDefaultTypeInternal _TransactionEvent_default_instance_;
constexpr TargetVersionOverrides_OverridesEntry_DoNotUse::TargetVersionOverrides_OverridesEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct TargetVersionOverrides_OverridesEntry_DoNotUseDefaultTypeInternal {
  constexpr TargetVersionOverrides_OverridesEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TargetVersionOverrides_OverridesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    TargetVersionOverrides_OverridesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TargetVersionOverrides_OverridesEntry_DoNotUseDefaultTypeInternal _TargetVersionOverrides_OverridesEntry_DoNotUse_default_instance_;
constexpr TargetVersionOverrides::TargetVersionOverrides(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : overrides_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct TargetVersionOverridesDefaultTypeInternal {
  constexpr TargetVersionOverridesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TargetVersionOverridesDefaultTypeInternal() {}
  union {
    TargetVersionOverrides _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TargetVersionOverridesDefaultTypeInternal _TargetVersionOverrides_default_instance_;
}  // namespace v2
}  // namespace config
}  // namespace onos
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_onos_2fconfig_2fv2_2ftransaction_2eproto[17];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_onos_2fconfig_2fv2_2ftransaction_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_onos_2fconfig_2fv2_2ftransaction_2eproto = nullptr;

const uint32_t TableStruct_onos_2fconfig_2fv2_2ftransaction_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::TransactionInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::TransactionInfo, id_),
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::TransactionInfo, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::Transaction, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::Transaction, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::Transaction, meta_),
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::Transaction, id_),
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::Transaction, index_),
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::Transaction, username_),
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::Transaction, strategy_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::Transaction, status_),
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::Transaction, version_overrides_),
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::Transaction, details_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::TransactionStrategy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::TransactionStrategy, synchronicity_),
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::TransactionStrategy, isolation_),
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::ChangeTransaction_ValuesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::ChangeTransaction_ValuesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::ChangeTransaction_ValuesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::ChangeTransaction_ValuesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::ChangeTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::ChangeTransaction, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::RollbackTransaction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::RollbackTransaction, rollback_index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::TransactionStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::TransactionStatus, phases_),
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::TransactionStatus, proposals_),
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::TransactionStatus, state_),
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::TransactionStatus, failure_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::TransactionPhases, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::TransactionPhases, initialize_),
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::TransactionPhases, validate_),
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::TransactionPhases, commit_),
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::TransactionPhases, apply_),
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::TransactionPhases, abort_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::TransactionPhaseStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::TransactionPhaseStatus, start_),
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::TransactionPhaseStatus, end_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::TransactionInitializePhase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::TransactionInitializePhase, status_),
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::TransactionInitializePhase, state_),
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::TransactionInitializePhase, failure_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::TransactionValidatePhase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::TransactionValidatePhase, status_),
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::TransactionValidatePhase, state_),
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::TransactionValidatePhase, failure_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::TransactionCommitPhase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::TransactionCommitPhase, status_),
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::TransactionCommitPhase, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::TransactionApplyPhase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::TransactionApplyPhase, status_),
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::TransactionApplyPhase, state_),
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::TransactionApplyPhase, failure_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::TransactionAbortPhase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::TransactionAbortPhase, status_),
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::TransactionAbortPhase, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::TransactionEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::TransactionEvent, type_),
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::TransactionEvent, transaction_),
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::TargetVersionOverrides_OverridesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::TargetVersionOverrides_OverridesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::TargetVersionOverrides_OverridesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::TargetVersionOverrides_OverridesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::TargetVersionOverrides, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::config::v2::TargetVersionOverrides, overrides_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::onos::config::v2::TransactionInfo)},
  { 8, -1, -1, sizeof(::onos::config::v2::Transaction)},
  { 24, -1, -1, sizeof(::onos::config::v2::TransactionStrategy)},
  { 32, 40, -1, sizeof(::onos::config::v2::ChangeTransaction_ValuesEntry_DoNotUse)},
  { 42, -1, -1, sizeof(::onos::config::v2::ChangeTransaction)},
  { 49, -1, -1, sizeof(::onos::config::v2::RollbackTransaction)},
  { 56, -1, -1, sizeof(::onos::config::v2::TransactionStatus)},
  { 66, -1, -1, sizeof(::onos::config::v2::TransactionPhases)},
  { 77, -1, -1, sizeof(::onos::config::v2::TransactionPhaseStatus)},
  { 85, -1, -1, sizeof(::onos::config::v2::TransactionInitializePhase)},
  { 94, -1, -1, sizeof(::onos::config::v2::TransactionValidatePhase)},
  { 103, -1, -1, sizeof(::onos::config::v2::TransactionCommitPhase)},
  { 111, -1, -1, sizeof(::onos::config::v2::TransactionApplyPhase)},
  { 120, -1, -1, sizeof(::onos::config::v2::TransactionAbortPhase)},
  { 128, -1, -1, sizeof(::onos::config::v2::TransactionEvent)},
  { 136, 144, -1, sizeof(::onos::config::v2::TargetVersionOverrides_OverridesEntry_DoNotUse)},
  { 146, -1, -1, sizeof(::onos::config::v2::TargetVersionOverrides)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::config::v2::_TransactionInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::config::v2::_Transaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::config::v2::_TransactionStrategy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::config::v2::_ChangeTransaction_ValuesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::config::v2::_ChangeTransaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::config::v2::_RollbackTransaction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::config::v2::_TransactionStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::config::v2::_TransactionPhases_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::config::v2::_TransactionPhaseStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::config::v2::_TransactionInitializePhase_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::config::v2::_TransactionValidatePhase_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::config::v2::_TransactionCommitPhase_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::config::v2::_TransactionApplyPhase_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::config::v2::_TransactionAbortPhase_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::config::v2::_TransactionEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::config::v2::_TargetVersionOverrides_OverridesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::config::v2::_TargetVersionOverrides_default_instance_),
};

const char descriptor_table_protodef_onos_2fconfig_2fv2_2ftransaction_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n onos/config/v2/transaction.proto\022\016onos"
  ".config.v2\032\024gogoproto/gogo.proto\032\033onos/c"
  "onfig/v2/object.proto\032\032onos/config/v2/va"
  "lue.proto\032\034onos/config/v2/failure.proto\032"
  "\037google/protobuf/timestamp.proto\"P\n\017Tran"
  "sactionInfo\022#\n\002id\030\001 \001(\tB\027\342\336\037\002ID\372\336\037\rTrans"
  "actionID\022\030\n\005index\030\002 \001(\004B\t\372\336\037\005Index\"\316\003\n\013T"
  "ransaction\0222\n\004meta\030\001 \001(\0132\032.onos.config.v"
  "2.ObjectMetaB\010\320\336\037\001\310\336\037\000\022#\n\002id\030\002 \001(\tB\027\342\336\037\002"
  "ID\372\336\037\rTransactionID\022\030\n\005index\030\003 \001(\004B\t\372\336\037\005"
  "Index\022\020\n\010username\030\004 \001(\t\022\?\n\010strategy\030\005 \001("
  "\0132#.onos.config.v2.TransactionStrategyB\010"
  "\320\336\037\001\310\336\037\000\0223\n\006change\030\006 \001(\0132!.onos.config.v"
  "2.ChangeTransactionH\000\0227\n\010rollback\030\007 \001(\0132"
  "#.onos.config.v2.RollbackTransactionH\000\0227"
  "\n\006status\030\010 \001(\0132!.onos.config.v2.Transact"
  "ionStatusB\004\310\336\037\000\022G\n\021version_overrides\030\t \001"
  "(\0132&.onos.config.v2.TargetVersionOverrid"
  "esB\004\320\336\037\001B\t\n\007details\"\201\002\n\023TransactionStrat"
  "egy\022H\n\rsynchronicity\030\001 \001(\01621.onos.config"
  ".v2.TransactionStrategy.Synchronicity\022@\n"
  "\tisolation\030\002 \001(\0162-.onos.config.v2.Transa"
  "ctionStrategy.Isolation\"2\n\rSynchronicity"
  "\022\020\n\014ASYNCHRONOUS\020\000\022\017\n\013SYNCHRONOUS\020\001\"*\n\tI"
  "solation\022\013\n\007DEFAULT\020\000\022\020\n\014SERIALIZABLE\020\001\""
  "\253\001\n\021ChangeTransaction\022K\n\006values\030\001 \003(\0132-."
  "onos.config.v2.ChangeTransaction.ValuesE"
  "ntryB\014\202\337\037\010TargetID\032I\n\013ValuesEntry\022\013\n\003key"
  "\030\001 \001(\t\022)\n\005value\030\002 \001(\0132\032.onos.config.v2.P"
  "athValues:\0028\001\"8\n\023RollbackTransaction\022!\n\016"
  "rollback_index\030\001 \001(\004B\t\372\336\037\005Index\"\236\002\n\021Tran"
  "sactionStatus\0227\n\006phases\030\001 \001(\0132!.onos.con"
  "fig.v2.TransactionPhasesB\004\310\336\037\000\022!\n\tpropos"
  "als\030\002 \003(\tB\016\372\336\037\nProposalID\0226\n\005state\030\003 \001(\016"
  "2\'.onos.config.v2.TransactionStatus.Stat"
  "e\022(\n\007failure\030\004 \001(\0132\027.onos.config.v2.Fail"
  "ure\"K\n\005State\022\013\n\007PENDING\020\000\022\r\n\tVALIDATED\020\001"
  "\022\r\n\tCOMMITTED\020\002\022\013\n\007APPLIED\020\003\022\n\n\006FAILED\020\004"
  "\"\263\002\n\021TransactionPhases\022>\n\ninitialize\030\001 \001"
  "(\0132*.onos.config.v2.TransactionInitializ"
  "ePhase\022:\n\010validate\030\002 \001(\0132(.onos.config.v"
  "2.TransactionValidatePhase\0226\n\006commit\030\003 \001"
  "(\0132&.onos.config.v2.TransactionCommitPha"
  "se\0224\n\005apply\030\004 \001(\0132%.onos.config.v2.Trans"
  "actionApplyPhase\0224\n\005abort\030\005 \001(\0132%.onos.c"
  "onfig.v2.TransactionAbortPhase\"x\n\026Transa"
  "ctionPhaseStatus\022/\n\005start\030\001 \001(\0132\032.google"
  ".protobuf.TimestampB\004\220\337\037\001\022-\n\003end\030\002 \001(\0132\032"
  ".google.protobuf.TimestampB\004\220\337\037\001\"\201\002\n\032Tra"
  "nsactionInitializePhase\022@\n\006status\030\001 \001(\0132"
  "&.onos.config.v2.TransactionPhaseStatusB"
  "\010\320\336\037\001\310\336\037\000\022\?\n\005state\030\002 \001(\01620.onos.config.v"
  "2.TransactionInitializePhase.State\022(\n\007fa"
  "ilure\030\003 \001(\0132\027.onos.config.v2.Failure\"6\n\005"
  "State\022\020\n\014INITIALIZING\020\000\022\017\n\013INITIALIZED\020\001"
  "\022\n\n\006FAILED\020\002\"\371\001\n\030TransactionValidatePhas"
  "e\022@\n\006status\030\001 \001(\0132&.onos.config.v2.Trans"
  "actionPhaseStatusB\010\320\336\037\001\310\336\037\000\022=\n\005state\030\002 \001"
  "(\0162..onos.config.v2.TransactionValidateP"
  "hase.State\022(\n\007failure\030\003 \001(\0132\027.onos.confi"
  "g.v2.Failure\"2\n\005State\022\016\n\nVALIDATING\020\000\022\r\n"
  "\tVALIDATED\020\001\022\n\n\006FAILED\020\002\"\277\001\n\026Transaction"
  "CommitPhase\022@\n\006status\030\001 \001(\0132&.onos.confi"
  "g.v2.TransactionPhaseStatusB\010\320\336\037\001\310\336\037\000\022;\n"
  "\005state\030\002 \001(\0162,.onos.config.v2.Transactio"
  "nCommitPhase.State\"&\n\005State\022\016\n\nCOMMITTIN"
  "G\020\000\022\r\n\tCOMMITTED\020\001\"\357\001\n\025TransactionApplyP"
  "hase\022@\n\006status\030\001 \001(\0132&.onos.config.v2.Tr"
  "ansactionPhaseStatusB\010\320\336\037\001\310\336\037\000\022:\n\005state\030"
  "\002 \001(\0162+.onos.config.v2.TransactionApplyP"
  "hase.State\022(\n\007failure\030\003 \001(\0132\027.onos.confi"
  "g.v2.Failure\".\n\005State\022\014\n\010APPLYING\020\000\022\013\n\007A"
  "PPLIED\020\001\022\n\n\006FAILED\020\002\"\271\001\n\025TransactionAbor"
  "tPhase\022@\n\006status\030\001 \001(\0132&.onos.config.v2."
  "TransactionPhaseStatusB\010\320\336\037\001\310\336\037\000\022:\n\005stat"
  "e\030\002 \001(\0162+.onos.config.v2.TransactionAbor"
  "tPhase.State\"\"\n\005State\022\014\n\010ABORTING\020\000\022\013\n\007A"
  "BORTED\020\001\"\323\001\n\020TransactionEvent\0228\n\004type\030\001 "
  "\001(\0162*.onos.config.v2.TransactionEvent.Ev"
  "entType\0226\n\013transaction\030\002 \001(\0132\033.onos.conf"
  "ig.v2.TransactionB\004\310\336\037\000\"M\n\tEventType\022\013\n\007"
  "UNKNOWN\020\000\022\013\n\007CREATED\020\001\022\013\n\007UPDATED\020\002\022\013\n\007D"
  "ELETED\020\003\022\014\n\010REPLAYED\020\004\"\267\001\n\026TargetVersion"
  "Overrides\022H\n\toverrides\030\001 \003(\01325.onos.conf"
  "ig.v2.TargetVersionOverrides.OverridesEn"
  "try\032S\n\016OverridesEntry\022\013\n\003key\030\001 \001(\t\0220\n\005va"
  "lue\030\002 \001(\0132!.onos.config.v2.TargetTypeVer"
  "sion:\0028\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_onos_2fconfig_2fv2_2ftransaction_2eproto_deps[5] = {
  &::descriptor_table_gogoproto_2fgogo_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_onos_2fconfig_2fv2_2ffailure_2eproto,
  &::descriptor_table_onos_2fconfig_2fv2_2fobject_2eproto,
  &::descriptor_table_onos_2fconfig_2fv2_2fvalue_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_onos_2fconfig_2fv2_2ftransaction_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_onos_2fconfig_2fv2_2ftransaction_2eproto = {
  false, false, 3496, descriptor_table_protodef_onos_2fconfig_2fv2_2ftransaction_2eproto, "onos/config/v2/transaction.proto", 
  &descriptor_table_onos_2fconfig_2fv2_2ftransaction_2eproto_once, descriptor_table_onos_2fconfig_2fv2_2ftransaction_2eproto_deps, 5, 17,
  schemas, file_default_instances, TableStruct_onos_2fconfig_2fv2_2ftransaction_2eproto::offsets,
  file_level_metadata_onos_2fconfig_2fv2_2ftransaction_2eproto, file_level_enum_descriptors_onos_2fconfig_2fv2_2ftransaction_2eproto, file_level_service_descriptors_onos_2fconfig_2fv2_2ftransaction_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_onos_2fconfig_2fv2_2ftransaction_2eproto_getter() {
  return &descriptor_table_onos_2fconfig_2fv2_2ftransaction_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_onos_2fconfig_2fv2_2ftransaction_2eproto(&descriptor_table_onos_2fconfig_2fv2_2ftransaction_2eproto);
namespace onos {
namespace config {
namespace v2 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransactionStrategy_Synchronicity_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_onos_2fconfig_2fv2_2ftransaction_2eproto);
  return file_level_enum_descriptors_onos_2fconfig_2fv2_2ftransaction_2eproto[0];
}
bool TransactionStrategy_Synchronicity_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TransactionStrategy_Synchronicity TransactionStrategy::ASYNCHRONOUS;
constexpr TransactionStrategy_Synchronicity TransactionStrategy::SYNCHRONOUS;
constexpr TransactionStrategy_Synchronicity TransactionStrategy::Synchronicity_MIN;
constexpr TransactionStrategy_Synchronicity TransactionStrategy::Synchronicity_MAX;
constexpr int TransactionStrategy::Synchronicity_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransactionStrategy_Isolation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_onos_2fconfig_2fv2_2ftransaction_2eproto);
  return file_level_enum_descriptors_onos_2fconfig_2fv2_2ftransaction_2eproto[1];
}
bool TransactionStrategy_Isolation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TransactionStrategy_Isolation TransactionStrategy::DEFAULT;
constexpr TransactionStrategy_Isolation TransactionStrategy::SERIALIZABLE;
constexpr TransactionStrategy_Isolation TransactionStrategy::Isolation_MIN;
constexpr TransactionStrategy_Isolation TransactionStrategy::Isolation_MAX;
constexpr int TransactionStrategy::Isolation_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransactionStatus_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_onos_2fconfig_2fv2_2ftransaction_2eproto);
  return file_level_enum_descriptors_onos_2fconfig_2fv2_2ftransaction_2eproto[2];
}
bool TransactionStatus_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TransactionStatus_State TransactionStatus::PENDING;
constexpr TransactionStatus_State TransactionStatus::VALIDATED;
constexpr TransactionStatus_State TransactionStatus::COMMITTED;
constexpr TransactionStatus_State TransactionStatus::APPLIED;
constexpr TransactionStatus_State TransactionStatus::FAILED;
constexpr TransactionStatus_State TransactionStatus::State_MIN;
constexpr TransactionStatus_State TransactionStatus::State_MAX;
constexpr int TransactionStatus::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransactionInitializePhase_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_onos_2fconfig_2fv2_2ftransaction_2eproto);
  return file_level_enum_descriptors_onos_2fconfig_2fv2_2ftransaction_2eproto[3];
}
bool TransactionInitializePhase_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TransactionInitializePhase_State TransactionInitializePhase::INITIALIZING;
constexpr TransactionInitializePhase_State TransactionInitializePhase::INITIALIZED;
constexpr TransactionInitializePhase_State TransactionInitializePhase::FAILED;
constexpr TransactionInitializePhase_State TransactionInitializePhase::State_MIN;
constexpr TransactionInitializePhase_State TransactionInitializePhase::State_MAX;
constexpr int TransactionInitializePhase::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransactionValidatePhase_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_onos_2fconfig_2fv2_2ftransaction_2eproto);
  return file_level_enum_descriptors_onos_2fconfig_2fv2_2ftransaction_2eproto[4];
}
bool TransactionValidatePhase_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TransactionValidatePhase_State TransactionValidatePhase::VALIDATING;
constexpr TransactionValidatePhase_State TransactionValidatePhase::VALIDATED;
constexpr TransactionValidatePhase_State TransactionValidatePhase::FAILED;
constexpr TransactionValidatePhase_State TransactionValidatePhase::State_MIN;
constexpr TransactionValidatePhase_State TransactionValidatePhase::State_MAX;
constexpr int TransactionValidatePhase::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransactionCommitPhase_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_onos_2fconfig_2fv2_2ftransaction_2eproto);
  return file_level_enum_descriptors_onos_2fconfig_2fv2_2ftransaction_2eproto[5];
}
bool TransactionCommitPhase_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TransactionCommitPhase_State TransactionCommitPhase::COMMITTING;
constexpr TransactionCommitPhase_State TransactionCommitPhase::COMMITTED;
constexpr TransactionCommitPhase_State TransactionCommitPhase::State_MIN;
constexpr TransactionCommitPhase_State TransactionCommitPhase::State_MAX;
constexpr int TransactionCommitPhase::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransactionApplyPhase_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_onos_2fconfig_2fv2_2ftransaction_2eproto);
  return file_level_enum_descriptors_onos_2fconfig_2fv2_2ftransaction_2eproto[6];
}
bool TransactionApplyPhase_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TransactionApplyPhase_State TransactionApplyPhase::APPLYING;
constexpr TransactionApplyPhase_State TransactionApplyPhase::APPLIED;
constexpr TransactionApplyPhase_State TransactionApplyPhase::FAILED;
constexpr TransactionApplyPhase_State TransactionApplyPhase::State_MIN;
constexpr TransactionApplyPhase_State TransactionApplyPhase::State_MAX;
constexpr int TransactionApplyPhase::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransactionAbortPhase_State_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_onos_2fconfig_2fv2_2ftransaction_2eproto);
  return file_level_enum_descriptors_onos_2fconfig_2fv2_2ftransaction_2eproto[7];
}
bool TransactionAbortPhase_State_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TransactionAbortPhase_State TransactionAbortPhase::ABORTING;
constexpr TransactionAbortPhase_State TransactionAbortPhase::ABORTED;
constexpr TransactionAbortPhase_State TransactionAbortPhase::State_MIN;
constexpr TransactionAbortPhase_State TransactionAbortPhase::State_MAX;
constexpr int TransactionAbortPhase::State_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TransactionEvent_EventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_onos_2fconfig_2fv2_2ftransaction_2eproto);
  return file_level_enum_descriptors_onos_2fconfig_2fv2_2ftransaction_2eproto[8];
}
bool TransactionEvent_EventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr TransactionEvent_EventType TransactionEvent::UNKNOWN;
constexpr TransactionEvent_EventType TransactionEvent::CREATED;
constexpr TransactionEvent_EventType TransactionEvent::UPDATED;
constexpr TransactionEvent_EventType TransactionEvent::DELETED;
constexpr TransactionEvent_EventType TransactionEvent::REPLAYED;
constexpr TransactionEvent_EventType TransactionEvent::EventType_MIN;
constexpr TransactionEvent_EventType TransactionEvent::EventType_MAX;
constexpr int TransactionEvent::EventType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class TransactionInfo::_Internal {
 public:
};

TransactionInfo::TransactionInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.config.v2.TransactionInfo)
}
TransactionInfo::TransactionInfo(const TransactionInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:onos.config.v2.TransactionInfo)
}

inline void TransactionInfo::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
index_ = uint64_t{0u};
}

TransactionInfo::~TransactionInfo() {
  // @@protoc_insertion_point(destructor:onos.config.v2.TransactionInfo)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransactionInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TransactionInfo::ArenaDtor(void* object) {
  TransactionInfo* _this = reinterpret_cast< TransactionInfo* >(object);
  (void)_this;
}
void TransactionInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.config.v2.TransactionInfo)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  index_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.casttype) = "TransactionID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.config.v2.TransactionInfo.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 index = 2 [(.gogoproto.casttype) = "Index"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransactionInfo::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.config.v2.TransactionInfo)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.casttype) = "TransactionID"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.config.v2.TransactionInfo.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // uint64 index = 2 [(.gogoproto.casttype) = "Index"];
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.config.v2.TransactionInfo)
  return target;
}

size_t TransactionInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.config.v2.TransactionInfo)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.casttype) = "TransactionID"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // uint64 index = 2 [(.gogoproto.casttype) = "Index"];
  if (this->_internal_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionInfo::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransactionInfo::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionInfo::GetClassData() const { return &_class_data_; }

void TransactionInfo::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TransactionInfo *>(to)->MergeFrom(
      static_cast<const TransactionInfo &>(from));
}


void TransactionInfo::MergeFrom(const TransactionInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.config.v2.TransactionInfo)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionInfo::CopyFrom(const TransactionInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.config.v2.TransactionInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionInfo::IsInitialized() const {
  return true;
}

void TransactionInfo::InternalSwap(TransactionInfo* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  swap(index_, other->index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fconfig_2fv2_2ftransaction_2eproto_getter, &descriptor_table_onos_2fconfig_2fv2_2ftransaction_2eproto_once,
      file_level_metadata_onos_2fconfig_2fv2_2ftransaction_2eproto[0]);
}

// ===================================================================

class Transaction::_Internal {
 public:
  static const ::onos::config::v2::ObjectMeta& meta(const Transaction* msg);
  static const ::onos::config::v2::TransactionStrategy& strategy(const Transaction* msg);
  static const ::onos::config::v2::ChangeTransaction& change(const Transaction* msg);
  static const ::onos::config::v2::RollbackTransaction& rollback(const Transaction* msg);
  static const ::onos::config::v2::TransactionStatus& status(const Transaction* msg);
  static const ::onos::config::v2::TargetVersionOverrides& version_overrides(const Transaction* msg);
};

const ::onos::config::v2::ObjectMeta&
Transaction::_Internal::meta(const Transaction* msg) {
  return *msg->meta_;
}
const ::onos::config::v2::TransactionStrategy&
Transaction::_Internal::strategy(const Transaction* msg) {
  return *msg->strategy_;
}
const ::onos::config::v2::ChangeTransaction&
Transaction::_Internal::change(const Transaction* msg) {
  return *msg->details_.change_;
}
const ::onos::config::v2::RollbackTransaction&
Transaction::_Internal::rollback(const Transaction* msg) {
  return *msg->details_.rollback_;
}
const ::onos::config::v2::TransactionStatus&
Transaction::_Internal::status(const Transaction* msg) {
  return *msg->status_;
}
const ::onos::config::v2::TargetVersionOverrides&
Transaction::_Internal::version_overrides(const Transaction* msg) {
  return *msg->version_overrides_;
}
void Transaction::clear_meta() {
  if (GetArenaForAllocation() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
}
void Transaction::set_allocated_change(::onos::config::v2::ChangeTransaction* change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_details();
  if (change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::config::v2::ChangeTransaction>::GetOwningArena(change);
    if (message_arena != submessage_arena) {
      change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, change, submessage_arena);
    }
    set_has_change();
    details_.change_ = change;
  }
  // @@protoc_insertion_point(field_set_allocated:onos.config.v2.Transaction.change)
}
void Transaction::set_allocated_rollback(::onos::config::v2::RollbackTransaction* rollback) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_details();
  if (rollback) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::config::v2::RollbackTransaction>::GetOwningArena(rollback);
    if (message_arena != submessage_arena) {
      rollback = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rollback, submessage_arena);
    }
    set_has_rollback();
    details_.rollback_ = rollback;
  }
  // @@protoc_insertion_point(field_set_allocated:onos.config.v2.Transaction.rollback)
}
Transaction::Transaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.config.v2.Transaction)
}
Transaction::Transaction(const Transaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_username().empty()) {
    username_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_username(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_meta()) {
    meta_ = new ::onos::config::v2::ObjectMeta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  if (from._internal_has_strategy()) {
    strategy_ = new ::onos::config::v2::TransactionStrategy(*from.strategy_);
  } else {
    strategy_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::onos::config::v2::TransactionStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_version_overrides()) {
    version_overrides_ = new ::onos::config::v2::TargetVersionOverrides(*from.version_overrides_);
  } else {
    version_overrides_ = nullptr;
  }
  index_ = from.index_;
  clear_has_details();
  switch (from.details_case()) {
    case kChange: {
      _internal_mutable_change()->::onos::config::v2::ChangeTransaction::MergeFrom(from._internal_change());
      break;
    }
    case kRollback: {
      _internal_mutable_rollback()->::onos::config::v2::RollbackTransaction::MergeFrom(from._internal_rollback());
      break;
    }
    case DETAILS_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:onos.config.v2.Transaction)
}

inline void Transaction::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
username_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  username_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&meta_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&meta_)) + sizeof(index_));
clear_has_details();
}

Transaction::~Transaction() {
  // @@protoc_insertion_point(destructor:onos.config.v2.Transaction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Transaction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  username_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete meta_;
  if (this != internal_default_instance()) delete strategy_;
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete version_overrides_;
  if (has_details()) {
    clear_details();
  }
}

void Transaction::ArenaDtor(void* object) {
  Transaction* _this = reinterpret_cast< Transaction* >(object);
  (void)_this;
}
void Transaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Transaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Transaction::clear_details() {
// @@protoc_insertion_point(one_of_clear_start:onos.config.v2.Transaction)
  switch (details_case()) {
    case kChange: {
      if (GetArenaForAllocation() == nullptr) {
        delete details_.change_;
      }
      break;
    }
    case kRollback: {
      if (GetArenaForAllocation() == nullptr) {
        delete details_.rollback_;
      }
      break;
    }
    case DETAILS_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = DETAILS_NOT_SET;
}


void Transaction::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.config.v2.Transaction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  username_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  if (GetArenaForAllocation() == nullptr && strategy_ != nullptr) {
    delete strategy_;
  }
  strategy_ = nullptr;
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && version_overrides_ != nullptr) {
    delete version_overrides_;
  }
  version_overrides_ = nullptr;
  index_ = uint64_t{0u};
  clear_details();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Transaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .onos.config.v2.ObjectMeta meta = 1 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_meta(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string id = 2 [(.gogoproto.customname) = "ID", (.gogoproto.casttype) = "TransactionID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.config.v2.Transaction.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 index = 3 [(.gogoproto.casttype) = "Index"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string username = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_username();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.config.v2.Transaction.username"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.config.v2.TransactionStrategy strategy = 5 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_strategy(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.config.v2.ChangeTransaction change = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_change(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.config.v2.RollbackTransaction rollback = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_rollback(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.config.v2.TransactionStatus status = 8 [(.gogoproto.nullable) = false];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.config.v2.TargetVersionOverrides version_overrides = 9 [(.gogoproto.embed) = true];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_version_overrides(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Transaction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.config.v2.Transaction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .onos.config.v2.ObjectMeta meta = 1 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
  if (this->_internal_has_meta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::meta(this), target, stream);
  }

  // string id = 2 [(.gogoproto.customname) = "ID", (.gogoproto.casttype) = "TransactionID"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.config.v2.Transaction.id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_id(), target);
  }

  // uint64 index = 3 [(.gogoproto.casttype) = "Index"];
  if (this->_internal_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_index(), target);
  }

  // string username = 4;
  if (!this->_internal_username().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_username().data(), static_cast<int>(this->_internal_username().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.config.v2.Transaction.username");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_username(), target);
  }

  // .onos.config.v2.TransactionStrategy strategy = 5 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
  if (this->_internal_has_strategy()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::strategy(this), target, stream);
  }

  // .onos.config.v2.ChangeTransaction change = 6;
  if (_internal_has_change()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::change(this), target, stream);
  }

  // .onos.config.v2.RollbackTransaction rollback = 7;
  if (_internal_has_rollback()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::rollback(this), target, stream);
  }

  // .onos.config.v2.TransactionStatus status = 8 [(.gogoproto.nullable) = false];
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::status(this), target, stream);
  }

  // .onos.config.v2.TargetVersionOverrides version_overrides = 9 [(.gogoproto.embed) = true];
  if (this->_internal_has_version_overrides()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::version_overrides(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.config.v2.Transaction)
  return target;
}

size_t Transaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.config.v2.Transaction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 2 [(.gogoproto.customname) = "ID", (.gogoproto.casttype) = "TransactionID"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string username = 4;
  if (!this->_internal_username().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_username());
  }

  // .onos.config.v2.ObjectMeta meta = 1 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
  if (this->_internal_has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  // .onos.config.v2.TransactionStrategy strategy = 5 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
  if (this->_internal_has_strategy()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *strategy_);
  }

  // .onos.config.v2.TransactionStatus status = 8 [(.gogoproto.nullable) = false];
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .onos.config.v2.TargetVersionOverrides version_overrides = 9 [(.gogoproto.embed) = true];
  if (this->_internal_has_version_overrides()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *version_overrides_);
  }

  // uint64 index = 3 [(.gogoproto.casttype) = "Index"];
  if (this->_internal_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_index());
  }

  switch (details_case()) {
    // .onos.config.v2.ChangeTransaction change = 6;
    case kChange: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *details_.change_);
      break;
    }
    // .onos.config.v2.RollbackTransaction rollback = 7;
    case kRollback: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *details_.rollback_);
      break;
    }
    case DETAILS_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Transaction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Transaction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Transaction::GetClassData() const { return &_class_data_; }

void Transaction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Transaction *>(to)->MergeFrom(
      static_cast<const Transaction &>(from));
}


void Transaction::MergeFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.config.v2.Transaction)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_username().empty()) {
    _internal_set_username(from._internal_username());
  }
  if (from._internal_has_meta()) {
    _internal_mutable_meta()->::onos::config::v2::ObjectMeta::MergeFrom(from._internal_meta());
  }
  if (from._internal_has_strategy()) {
    _internal_mutable_strategy()->::onos::config::v2::TransactionStrategy::MergeFrom(from._internal_strategy());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::onos::config::v2::TransactionStatus::MergeFrom(from._internal_status());
  }
  if (from._internal_has_version_overrides()) {
    _internal_mutable_version_overrides()->::onos::config::v2::TargetVersionOverrides::MergeFrom(from._internal_version_overrides());
  }
  if (from._internal_index() != 0) {
    _internal_set_index(from._internal_index());
  }
  switch (from.details_case()) {
    case kChange: {
      _internal_mutable_change()->::onos::config::v2::ChangeTransaction::MergeFrom(from._internal_change());
      break;
    }
    case kRollback: {
      _internal_mutable_rollback()->::onos::config::v2::RollbackTransaction::MergeFrom(from._internal_rollback());
      break;
    }
    case DETAILS_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Transaction::CopyFrom(const Transaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.config.v2.Transaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Transaction::IsInitialized() const {
  return true;
}

void Transaction::InternalSwap(Transaction* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &username_, lhs_arena,
      &other->username_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Transaction, index_)
      + sizeof(Transaction::index_)
      - PROTOBUF_FIELD_OFFSET(Transaction, meta_)>(
          reinterpret_cast<char*>(&meta_),
          reinterpret_cast<char*>(&other->meta_));
  swap(details_, other->details_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Transaction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fconfig_2fv2_2ftransaction_2eproto_getter, &descriptor_table_onos_2fconfig_2fv2_2ftransaction_2eproto_once,
      file_level_metadata_onos_2fconfig_2fv2_2ftransaction_2eproto[1]);
}

// ===================================================================

class TransactionStrategy::_Internal {
 public:
};

TransactionStrategy::TransactionStrategy(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.config.v2.TransactionStrategy)
}
TransactionStrategy::TransactionStrategy(const TransactionStrategy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&synchronicity_, &from.synchronicity_,
    static_cast<size_t>(reinterpret_cast<char*>(&isolation_) -
    reinterpret_cast<char*>(&synchronicity_)) + sizeof(isolation_));
  // @@protoc_insertion_point(copy_constructor:onos.config.v2.TransactionStrategy)
}

inline void TransactionStrategy::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&synchronicity_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&isolation_) -
    reinterpret_cast<char*>(&synchronicity_)) + sizeof(isolation_));
}

TransactionStrategy::~TransactionStrategy() {
  // @@protoc_insertion_point(destructor:onos.config.v2.TransactionStrategy)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransactionStrategy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TransactionStrategy::ArenaDtor(void* object) {
  TransactionStrategy* _this = reinterpret_cast< TransactionStrategy* >(object);
  (void)_this;
}
void TransactionStrategy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionStrategy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionStrategy::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.config.v2.TransactionStrategy)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&synchronicity_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&isolation_) -
      reinterpret_cast<char*>(&synchronicity_)) + sizeof(isolation_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionStrategy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .onos.config.v2.TransactionStrategy.Synchronicity synchronicity = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_synchronicity(static_cast<::onos::config::v2::TransactionStrategy_Synchronicity>(val));
        } else
          goto handle_unusual;
        continue;
      // .onos.config.v2.TransactionStrategy.Isolation isolation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_isolation(static_cast<::onos::config::v2::TransactionStrategy_Isolation>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransactionStrategy::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.config.v2.TransactionStrategy)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .onos.config.v2.TransactionStrategy.Synchronicity synchronicity = 1;
  if (this->_internal_synchronicity() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_synchronicity(), target);
  }

  // .onos.config.v2.TransactionStrategy.Isolation isolation = 2;
  if (this->_internal_isolation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_isolation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.config.v2.TransactionStrategy)
  return target;
}

size_t TransactionStrategy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.config.v2.TransactionStrategy)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .onos.config.v2.TransactionStrategy.Synchronicity synchronicity = 1;
  if (this->_internal_synchronicity() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_synchronicity());
  }

  // .onos.config.v2.TransactionStrategy.Isolation isolation = 2;
  if (this->_internal_isolation() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_isolation());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionStrategy::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransactionStrategy::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionStrategy::GetClassData() const { return &_class_data_; }

void TransactionStrategy::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TransactionStrategy *>(to)->MergeFrom(
      static_cast<const TransactionStrategy &>(from));
}


void TransactionStrategy::MergeFrom(const TransactionStrategy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.config.v2.TransactionStrategy)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_synchronicity() != 0) {
    _internal_set_synchronicity(from._internal_synchronicity());
  }
  if (from._internal_isolation() != 0) {
    _internal_set_isolation(from._internal_isolation());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionStrategy::CopyFrom(const TransactionStrategy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.config.v2.TransactionStrategy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionStrategy::IsInitialized() const {
  return true;
}

void TransactionStrategy::InternalSwap(TransactionStrategy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionStrategy, isolation_)
      + sizeof(TransactionStrategy::isolation_)
      - PROTOBUF_FIELD_OFFSET(TransactionStrategy, synchronicity_)>(
          reinterpret_cast<char*>(&synchronicity_),
          reinterpret_cast<char*>(&other->synchronicity_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionStrategy::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fconfig_2fv2_2ftransaction_2eproto_getter, &descriptor_table_onos_2fconfig_2fv2_2ftransaction_2eproto_once,
      file_level_metadata_onos_2fconfig_2fv2_2ftransaction_2eproto[2]);
}

// ===================================================================

ChangeTransaction_ValuesEntry_DoNotUse::ChangeTransaction_ValuesEntry_DoNotUse() {}
ChangeTransaction_ValuesEntry_DoNotUse::ChangeTransaction_ValuesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ChangeTransaction_ValuesEntry_DoNotUse::MergeFrom(const ChangeTransaction_ValuesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ChangeTransaction_ValuesEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fconfig_2fv2_2ftransaction_2eproto_getter, &descriptor_table_onos_2fconfig_2fv2_2ftransaction_2eproto_once,
      file_level_metadata_onos_2fconfig_2fv2_2ftransaction_2eproto[3]);
}

// ===================================================================

class ChangeTransaction::_Internal {
 public:
};

void ChangeTransaction::clear_values() {
  values_.Clear();
}
ChangeTransaction::ChangeTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  values_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.config.v2.ChangeTransaction)
}
ChangeTransaction::ChangeTransaction(const ChangeTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  values_.MergeFrom(from.values_);
  // @@protoc_insertion_point(copy_constructor:onos.config.v2.ChangeTransaction)
}

inline void ChangeTransaction::SharedCtor() {
}

ChangeTransaction::~ChangeTransaction() {
  // @@protoc_insertion_point(destructor:onos.config.v2.ChangeTransaction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChangeTransaction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChangeTransaction::ArenaDtor(void* object) {
  ChangeTransaction* _this = reinterpret_cast< ChangeTransaction* >(object);
  (void)_this;
  _this->values_. ~MapField();
}
inline void ChangeTransaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &ChangeTransaction::ArenaDtor);
  }
}
void ChangeTransaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChangeTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.config.v2.ChangeTransaction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeTransaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .onos.config.v2.PathValues> values = 1 [(.gogoproto.castkey) = "TargetID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&values_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChangeTransaction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.config.v2.ChangeTransaction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .onos.config.v2.PathValues> values = 1 [(.gogoproto.castkey) = "TargetID"];
  if (!this->_internal_values().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::config::v2::PathValues >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "onos.config.v2.ChangeTransaction.ValuesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_values().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_values().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::config::v2::PathValues >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::config::v2::PathValues >::const_iterator
          it = this->_internal_values().begin();
          it != this->_internal_values().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ChangeTransaction_ValuesEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::config::v2::PathValues >::const_iterator
          it = this->_internal_values().begin();
          it != this->_internal_values().end(); ++it) {
        target = ChangeTransaction_ValuesEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.config.v2.ChangeTransaction)
  return target;
}

size_t ChangeTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.config.v2.ChangeTransaction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .onos.config.v2.PathValues> values = 1 [(.gogoproto.castkey) = "TargetID"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_values_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::config::v2::PathValues >::const_iterator
      it = this->_internal_values().begin();
      it != this->_internal_values().end(); ++it) {
    total_size += ChangeTransaction_ValuesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChangeTransaction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChangeTransaction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChangeTransaction::GetClassData() const { return &_class_data_; }

void ChangeTransaction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChangeTransaction *>(to)->MergeFrom(
      static_cast<const ChangeTransaction &>(from));
}


void ChangeTransaction::MergeFrom(const ChangeTransaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.config.v2.ChangeTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChangeTransaction::CopyFrom(const ChangeTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.config.v2.ChangeTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeTransaction::IsInitialized() const {
  return true;
}

void ChangeTransaction::InternalSwap(ChangeTransaction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeTransaction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fconfig_2fv2_2ftransaction_2eproto_getter, &descriptor_table_onos_2fconfig_2fv2_2ftransaction_2eproto_once,
      file_level_metadata_onos_2fconfig_2fv2_2ftransaction_2eproto[4]);
}

// ===================================================================

class RollbackTransaction::_Internal {
 public:
};

RollbackTransaction::RollbackTransaction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.config.v2.RollbackTransaction)
}
RollbackTransaction::RollbackTransaction(const RollbackTransaction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  rollback_index_ = from.rollback_index_;
  // @@protoc_insertion_point(copy_constructor:onos.config.v2.RollbackTransaction)
}

inline void RollbackTransaction::SharedCtor() {
rollback_index_ = uint64_t{0u};
}

RollbackTransaction::~RollbackTransaction() {
  // @@protoc_insertion_point(destructor:onos.config.v2.RollbackTransaction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RollbackTransaction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RollbackTransaction::ArenaDtor(void* object) {
  RollbackTransaction* _this = reinterpret_cast< RollbackTransaction* >(object);
  (void)_this;
}
void RollbackTransaction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RollbackTransaction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RollbackTransaction::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.config.v2.RollbackTransaction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rollback_index_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RollbackTransaction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 rollback_index = 1 [(.gogoproto.casttype) = "Index"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          rollback_index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RollbackTransaction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.config.v2.RollbackTransaction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 rollback_index = 1 [(.gogoproto.casttype) = "Index"];
  if (this->_internal_rollback_index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_rollback_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.config.v2.RollbackTransaction)
  return target;
}

size_t RollbackTransaction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.config.v2.RollbackTransaction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint64 rollback_index = 1 [(.gogoproto.casttype) = "Index"];
  if (this->_internal_rollback_index() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_rollback_index());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RollbackTransaction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RollbackTransaction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RollbackTransaction::GetClassData() const { return &_class_data_; }

void RollbackTransaction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RollbackTransaction *>(to)->MergeFrom(
      static_cast<const RollbackTransaction &>(from));
}


void RollbackTransaction::MergeFrom(const RollbackTransaction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.config.v2.RollbackTransaction)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_rollback_index() != 0) {
    _internal_set_rollback_index(from._internal_rollback_index());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RollbackTransaction::CopyFrom(const RollbackTransaction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.config.v2.RollbackTransaction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RollbackTransaction::IsInitialized() const {
  return true;
}

void RollbackTransaction::InternalSwap(RollbackTransaction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(rollback_index_, other->rollback_index_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RollbackTransaction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fconfig_2fv2_2ftransaction_2eproto_getter, &descriptor_table_onos_2fconfig_2fv2_2ftransaction_2eproto_once,
      file_level_metadata_onos_2fconfig_2fv2_2ftransaction_2eproto[5]);
}

// ===================================================================

class TransactionStatus::_Internal {
 public:
  static const ::onos::config::v2::TransactionPhases& phases(const TransactionStatus* msg);
  static const ::onos::config::v2::Failure& failure(const TransactionStatus* msg);
};

const ::onos::config::v2::TransactionPhases&
TransactionStatus::_Internal::phases(const TransactionStatus* msg) {
  return *msg->phases_;
}
const ::onos::config::v2::Failure&
TransactionStatus::_Internal::failure(const TransactionStatus* msg) {
  return *msg->failure_;
}
void TransactionStatus::clear_failure() {
  if (GetArenaForAllocation() == nullptr && failure_ != nullptr) {
    delete failure_;
  }
  failure_ = nullptr;
}
TransactionStatus::TransactionStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  proposals_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.config.v2.TransactionStatus)
}
TransactionStatus::TransactionStatus(const TransactionStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      proposals_(from.proposals_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_phases()) {
    phases_ = new ::onos::config::v2::TransactionPhases(*from.phases_);
  } else {
    phases_ = nullptr;
  }
  if (from._internal_has_failure()) {
    failure_ = new ::onos::config::v2::Failure(*from.failure_);
  } else {
    failure_ = nullptr;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:onos.config.v2.TransactionStatus)
}

inline void TransactionStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&phases_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&phases_)) + sizeof(state_));
}

TransactionStatus::~TransactionStatus() {
  // @@protoc_insertion_point(destructor:onos.config.v2.TransactionStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransactionStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete phases_;
  if (this != internal_default_instance()) delete failure_;
}

void TransactionStatus::ArenaDtor(void* object) {
  TransactionStatus* _this = reinterpret_cast< TransactionStatus* >(object);
  (void)_this;
}
void TransactionStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.config.v2.TransactionStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  proposals_.Clear();
  if (GetArenaForAllocation() == nullptr && phases_ != nullptr) {
    delete phases_;
  }
  phases_ = nullptr;
  if (GetArenaForAllocation() == nullptr && failure_ != nullptr) {
    delete failure_;
  }
  failure_ = nullptr;
  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .onos.config.v2.TransactionPhases phases = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_phases(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string proposals = 2 [(.gogoproto.casttype) = "ProposalID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_proposals();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.config.v2.TransactionStatus.proposals"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .onos.config.v2.TransactionStatus.State state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::onos::config::v2::TransactionStatus_State>(val));
        } else
          goto handle_unusual;
        continue;
      // .onos.config.v2.Failure failure = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_failure(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransactionStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.config.v2.TransactionStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .onos.config.v2.TransactionPhases phases = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_phases()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::phases(this), target, stream);
  }

  // repeated string proposals = 2 [(.gogoproto.casttype) = "ProposalID"];
  for (int i = 0, n = this->_internal_proposals_size(); i < n; i++) {
    const auto& s = this->_internal_proposals(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.config.v2.TransactionStatus.proposals");
    target = stream->WriteString(2, s, target);
  }

  // .onos.config.v2.TransactionStatus.State state = 3;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_state(), target);
  }

  // .onos.config.v2.Failure failure = 4;
  if (this->_internal_has_failure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::failure(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.config.v2.TransactionStatus)
  return target;
}

size_t TransactionStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.config.v2.TransactionStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string proposals = 2 [(.gogoproto.casttype) = "ProposalID"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(proposals_.size());
  for (int i = 0, n = proposals_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      proposals_.Get(i));
  }

  // .onos.config.v2.TransactionPhases phases = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_phases()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *phases_);
  }

  // .onos.config.v2.Failure failure = 4;
  if (this->_internal_has_failure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *failure_);
  }

  // .onos.config.v2.TransactionStatus.State state = 3;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransactionStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionStatus::GetClassData() const { return &_class_data_; }

void TransactionStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TransactionStatus *>(to)->MergeFrom(
      static_cast<const TransactionStatus &>(from));
}


void TransactionStatus::MergeFrom(const TransactionStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.config.v2.TransactionStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  proposals_.MergeFrom(from.proposals_);
  if (from._internal_has_phases()) {
    _internal_mutable_phases()->::onos::config::v2::TransactionPhases::MergeFrom(from._internal_phases());
  }
  if (from._internal_has_failure()) {
    _internal_mutable_failure()->::onos::config::v2::Failure::MergeFrom(from._internal_failure());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionStatus::CopyFrom(const TransactionStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.config.v2.TransactionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionStatus::IsInitialized() const {
  return true;
}

void TransactionStatus::InternalSwap(TransactionStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  proposals_.InternalSwap(&other->proposals_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionStatus, state_)
      + sizeof(TransactionStatus::state_)
      - PROTOBUF_FIELD_OFFSET(TransactionStatus, phases_)>(
          reinterpret_cast<char*>(&phases_),
          reinterpret_cast<char*>(&other->phases_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fconfig_2fv2_2ftransaction_2eproto_getter, &descriptor_table_onos_2fconfig_2fv2_2ftransaction_2eproto_once,
      file_level_metadata_onos_2fconfig_2fv2_2ftransaction_2eproto[6]);
}

// ===================================================================

class TransactionPhases::_Internal {
 public:
  static const ::onos::config::v2::TransactionInitializePhase& initialize(const TransactionPhases* msg);
  static const ::onos::config::v2::TransactionValidatePhase& validate(const TransactionPhases* msg);
  static const ::onos::config::v2::TransactionCommitPhase& commit(const TransactionPhases* msg);
  static const ::onos::config::v2::TransactionApplyPhase& apply(const TransactionPhases* msg);
  static const ::onos::config::v2::TransactionAbortPhase& abort(const TransactionPhases* msg);
};

const ::onos::config::v2::TransactionInitializePhase&
TransactionPhases::_Internal::initialize(const TransactionPhases* msg) {
  return *msg->initialize_;
}
const ::onos::config::v2::TransactionValidatePhase&
TransactionPhases::_Internal::validate(const TransactionPhases* msg) {
  return *msg->validate_;
}
const ::onos::config::v2::TransactionCommitPhase&
TransactionPhases::_Internal::commit(const TransactionPhases* msg) {
  return *msg->commit_;
}
const ::onos::config::v2::TransactionApplyPhase&
TransactionPhases::_Internal::apply(const TransactionPhases* msg) {
  return *msg->apply_;
}
const ::onos::config::v2::TransactionAbortPhase&
TransactionPhases::_Internal::abort(const TransactionPhases* msg) {
  return *msg->abort_;
}
TransactionPhases::TransactionPhases(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.config.v2.TransactionPhases)
}
TransactionPhases::TransactionPhases(const TransactionPhases& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_initialize()) {
    initialize_ = new ::onos::config::v2::TransactionInitializePhase(*from.initialize_);
  } else {
    initialize_ = nullptr;
  }
  if (from._internal_has_validate()) {
    validate_ = new ::onos::config::v2::TransactionValidatePhase(*from.validate_);
  } else {
    validate_ = nullptr;
  }
  if (from._internal_has_commit()) {
    commit_ = new ::onos::config::v2::TransactionCommitPhase(*from.commit_);
  } else {
    commit_ = nullptr;
  }
  if (from._internal_has_apply()) {
    apply_ = new ::onos::config::v2::TransactionApplyPhase(*from.apply_);
  } else {
    apply_ = nullptr;
  }
  if (from._internal_has_abort()) {
    abort_ = new ::onos::config::v2::TransactionAbortPhase(*from.abort_);
  } else {
    abort_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:onos.config.v2.TransactionPhases)
}

inline void TransactionPhases::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&initialize_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&abort_) -
    reinterpret_cast<char*>(&initialize_)) + sizeof(abort_));
}

TransactionPhases::~TransactionPhases() {
  // @@protoc_insertion_point(destructor:onos.config.v2.TransactionPhases)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransactionPhases::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete initialize_;
  if (this != internal_default_instance()) delete validate_;
  if (this != internal_default_instance()) delete commit_;
  if (this != internal_default_instance()) delete apply_;
  if (this != internal_default_instance()) delete abort_;
}

void TransactionPhases::ArenaDtor(void* object) {
  TransactionPhases* _this = reinterpret_cast< TransactionPhases* >(object);
  (void)_this;
}
void TransactionPhases::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionPhases::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionPhases::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.config.v2.TransactionPhases)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && initialize_ != nullptr) {
    delete initialize_;
  }
  initialize_ = nullptr;
  if (GetArenaForAllocation() == nullptr && validate_ != nullptr) {
    delete validate_;
  }
  validate_ = nullptr;
  if (GetArenaForAllocation() == nullptr && commit_ != nullptr) {
    delete commit_;
  }
  commit_ = nullptr;
  if (GetArenaForAllocation() == nullptr && apply_ != nullptr) {
    delete apply_;
  }
  apply_ = nullptr;
  if (GetArenaForAllocation() == nullptr && abort_ != nullptr) {
    delete abort_;
  }
  abort_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionPhases::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .onos.config.v2.TransactionInitializePhase initialize = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_initialize(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.config.v2.TransactionValidatePhase validate = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_validate(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.config.v2.TransactionCommitPhase commit = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_commit(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.config.v2.TransactionApplyPhase apply = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_apply(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.config.v2.TransactionAbortPhase abort = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_abort(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransactionPhases::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.config.v2.TransactionPhases)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .onos.config.v2.TransactionInitializePhase initialize = 1;
  if (this->_internal_has_initialize()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::initialize(this), target, stream);
  }

  // .onos.config.v2.TransactionValidatePhase validate = 2;
  if (this->_internal_has_validate()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::validate(this), target, stream);
  }

  // .onos.config.v2.TransactionCommitPhase commit = 3;
  if (this->_internal_has_commit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::commit(this), target, stream);
  }

  // .onos.config.v2.TransactionApplyPhase apply = 4;
  if (this->_internal_has_apply()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::apply(this), target, stream);
  }

  // .onos.config.v2.TransactionAbortPhase abort = 5;
  if (this->_internal_has_abort()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::abort(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.config.v2.TransactionPhases)
  return target;
}

size_t TransactionPhases::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.config.v2.TransactionPhases)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .onos.config.v2.TransactionInitializePhase initialize = 1;
  if (this->_internal_has_initialize()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *initialize_);
  }

  // .onos.config.v2.TransactionValidatePhase validate = 2;
  if (this->_internal_has_validate()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *validate_);
  }

  // .onos.config.v2.TransactionCommitPhase commit = 3;
  if (this->_internal_has_commit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *commit_);
  }

  // .onos.config.v2.TransactionApplyPhase apply = 4;
  if (this->_internal_has_apply()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *apply_);
  }

  // .onos.config.v2.TransactionAbortPhase abort = 5;
  if (this->_internal_has_abort()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *abort_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionPhases::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransactionPhases::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionPhases::GetClassData() const { return &_class_data_; }

void TransactionPhases::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TransactionPhases *>(to)->MergeFrom(
      static_cast<const TransactionPhases &>(from));
}


void TransactionPhases::MergeFrom(const TransactionPhases& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.config.v2.TransactionPhases)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_initialize()) {
    _internal_mutable_initialize()->::onos::config::v2::TransactionInitializePhase::MergeFrom(from._internal_initialize());
  }
  if (from._internal_has_validate()) {
    _internal_mutable_validate()->::onos::config::v2::TransactionValidatePhase::MergeFrom(from._internal_validate());
  }
  if (from._internal_has_commit()) {
    _internal_mutable_commit()->::onos::config::v2::TransactionCommitPhase::MergeFrom(from._internal_commit());
  }
  if (from._internal_has_apply()) {
    _internal_mutable_apply()->::onos::config::v2::TransactionApplyPhase::MergeFrom(from._internal_apply());
  }
  if (from._internal_has_abort()) {
    _internal_mutable_abort()->::onos::config::v2::TransactionAbortPhase::MergeFrom(from._internal_abort());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionPhases::CopyFrom(const TransactionPhases& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.config.v2.TransactionPhases)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionPhases::IsInitialized() const {
  return true;
}

void TransactionPhases::InternalSwap(TransactionPhases* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionPhases, abort_)
      + sizeof(TransactionPhases::abort_)
      - PROTOBUF_FIELD_OFFSET(TransactionPhases, initialize_)>(
          reinterpret_cast<char*>(&initialize_),
          reinterpret_cast<char*>(&other->initialize_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionPhases::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fconfig_2fv2_2ftransaction_2eproto_getter, &descriptor_table_onos_2fconfig_2fv2_2ftransaction_2eproto_once,
      file_level_metadata_onos_2fconfig_2fv2_2ftransaction_2eproto[7]);
}

// ===================================================================

class TransactionPhaseStatus::_Internal {
 public:
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& start(const TransactionPhaseStatus* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& end(const TransactionPhaseStatus* msg);
};

const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TransactionPhaseStatus::_Internal::start(const TransactionPhaseStatus* msg) {
  return *msg->start_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
TransactionPhaseStatus::_Internal::end(const TransactionPhaseStatus* msg) {
  return *msg->end_;
}
void TransactionPhaseStatus::clear_start() {
  if (GetArenaForAllocation() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
}
void TransactionPhaseStatus::clear_end() {
  if (GetArenaForAllocation() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
}
TransactionPhaseStatus::TransactionPhaseStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.config.v2.TransactionPhaseStatus)
}
TransactionPhaseStatus::TransactionPhaseStatus(const TransactionPhaseStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_start()) {
    start_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.start_);
  } else {
    start_ = nullptr;
  }
  if (from._internal_has_end()) {
    end_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.end_);
  } else {
    end_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:onos.config.v2.TransactionPhaseStatus)
}

inline void TransactionPhaseStatus::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&start_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&end_) -
    reinterpret_cast<char*>(&start_)) + sizeof(end_));
}

TransactionPhaseStatus::~TransactionPhaseStatus() {
  // @@protoc_insertion_point(destructor:onos.config.v2.TransactionPhaseStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransactionPhaseStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete start_;
  if (this != internal_default_instance()) delete end_;
}

void TransactionPhaseStatus::ArenaDtor(void* object) {
  TransactionPhaseStatus* _this = reinterpret_cast< TransactionPhaseStatus* >(object);
  (void)_this;
}
void TransactionPhaseStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionPhaseStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionPhaseStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.config.v2.TransactionPhaseStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && start_ != nullptr) {
    delete start_;
  }
  start_ = nullptr;
  if (GetArenaForAllocation() == nullptr && end_ != nullptr) {
    delete end_;
  }
  end_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionPhaseStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp start = 1 [(.gogoproto.stdtime) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_start(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp end = 2 [(.gogoproto.stdtime) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_end(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransactionPhaseStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.config.v2.TransactionPhaseStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp start = 1 [(.gogoproto.stdtime) = true];
  if (this->_internal_has_start()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::start(this), target, stream);
  }

  // .google.protobuf.Timestamp end = 2 [(.gogoproto.stdtime) = true];
  if (this->_internal_has_end()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::end(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.config.v2.TransactionPhaseStatus)
  return target;
}

size_t TransactionPhaseStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.config.v2.TransactionPhaseStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp start = 1 [(.gogoproto.stdtime) = true];
  if (this->_internal_has_start()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *start_);
  }

  // .google.protobuf.Timestamp end = 2 [(.gogoproto.stdtime) = true];
  if (this->_internal_has_end()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *end_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionPhaseStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransactionPhaseStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionPhaseStatus::GetClassData() const { return &_class_data_; }

void TransactionPhaseStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TransactionPhaseStatus *>(to)->MergeFrom(
      static_cast<const TransactionPhaseStatus &>(from));
}


void TransactionPhaseStatus::MergeFrom(const TransactionPhaseStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.config.v2.TransactionPhaseStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_start()) {
    _internal_mutable_start()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_start());
  }
  if (from._internal_has_end()) {
    _internal_mutable_end()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_end());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionPhaseStatus::CopyFrom(const TransactionPhaseStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.config.v2.TransactionPhaseStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionPhaseStatus::IsInitialized() const {
  return true;
}

void TransactionPhaseStatus::InternalSwap(TransactionPhaseStatus* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionPhaseStatus, end_)
      + sizeof(TransactionPhaseStatus::end_)
      - PROTOBUF_FIELD_OFFSET(TransactionPhaseStatus, start_)>(
          reinterpret_cast<char*>(&start_),
          reinterpret_cast<char*>(&other->start_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionPhaseStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fconfig_2fv2_2ftransaction_2eproto_getter, &descriptor_table_onos_2fconfig_2fv2_2ftransaction_2eproto_once,
      file_level_metadata_onos_2fconfig_2fv2_2ftransaction_2eproto[8]);
}

// ===================================================================

class TransactionInitializePhase::_Internal {
 public:
  static const ::onos::config::v2::TransactionPhaseStatus& status(const TransactionInitializePhase* msg);
  static const ::onos::config::v2::Failure& failure(const TransactionInitializePhase* msg);
};

const ::onos::config::v2::TransactionPhaseStatus&
TransactionInitializePhase::_Internal::status(const TransactionInitializePhase* msg) {
  return *msg->status_;
}
const ::onos::config::v2::Failure&
TransactionInitializePhase::_Internal::failure(const TransactionInitializePhase* msg) {
  return *msg->failure_;
}
void TransactionInitializePhase::clear_failure() {
  if (GetArenaForAllocation() == nullptr && failure_ != nullptr) {
    delete failure_;
  }
  failure_ = nullptr;
}
TransactionInitializePhase::TransactionInitializePhase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.config.v2.TransactionInitializePhase)
}
TransactionInitializePhase::TransactionInitializePhase(const TransactionInitializePhase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::onos::config::v2::TransactionPhaseStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_failure()) {
    failure_ = new ::onos::config::v2::Failure(*from.failure_);
  } else {
    failure_ = nullptr;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:onos.config.v2.TransactionInitializePhase)
}

inline void TransactionInitializePhase::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&status_)) + sizeof(state_));
}

TransactionInitializePhase::~TransactionInitializePhase() {
  // @@protoc_insertion_point(destructor:onos.config.v2.TransactionInitializePhase)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransactionInitializePhase::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete failure_;
}

void TransactionInitializePhase::ArenaDtor(void* object) {
  TransactionInitializePhase* _this = reinterpret_cast< TransactionInitializePhase* >(object);
  (void)_this;
}
void TransactionInitializePhase::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionInitializePhase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionInitializePhase::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.config.v2.TransactionInitializePhase)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && failure_ != nullptr) {
    delete failure_;
  }
  failure_ = nullptr;
  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionInitializePhase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .onos.config.v2.TransactionPhaseStatus status = 1 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.config.v2.TransactionInitializePhase.State state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::onos::config::v2::TransactionInitializePhase_State>(val));
        } else
          goto handle_unusual;
        continue;
      // .onos.config.v2.Failure failure = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_failure(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransactionInitializePhase::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.config.v2.TransactionInitializePhase)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .onos.config.v2.TransactionPhaseStatus status = 1 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .onos.config.v2.TransactionInitializePhase.State state = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  // .onos.config.v2.Failure failure = 3;
  if (this->_internal_has_failure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::failure(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.config.v2.TransactionInitializePhase)
  return target;
}

size_t TransactionInitializePhase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.config.v2.TransactionInitializePhase)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .onos.config.v2.TransactionPhaseStatus status = 1 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .onos.config.v2.Failure failure = 3;
  if (this->_internal_has_failure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *failure_);
  }

  // .onos.config.v2.TransactionInitializePhase.State state = 2;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionInitializePhase::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransactionInitializePhase::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionInitializePhase::GetClassData() const { return &_class_data_; }

void TransactionInitializePhase::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TransactionInitializePhase *>(to)->MergeFrom(
      static_cast<const TransactionInitializePhase &>(from));
}


void TransactionInitializePhase::MergeFrom(const TransactionInitializePhase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.config.v2.TransactionInitializePhase)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_mutable_status()->::onos::config::v2::TransactionPhaseStatus::MergeFrom(from._internal_status());
  }
  if (from._internal_has_failure()) {
    _internal_mutable_failure()->::onos::config::v2::Failure::MergeFrom(from._internal_failure());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionInitializePhase::CopyFrom(const TransactionInitializePhase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.config.v2.TransactionInitializePhase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionInitializePhase::IsInitialized() const {
  return true;
}

void TransactionInitializePhase::InternalSwap(TransactionInitializePhase* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionInitializePhase, state_)
      + sizeof(TransactionInitializePhase::state_)
      - PROTOBUF_FIELD_OFFSET(TransactionInitializePhase, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionInitializePhase::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fconfig_2fv2_2ftransaction_2eproto_getter, &descriptor_table_onos_2fconfig_2fv2_2ftransaction_2eproto_once,
      file_level_metadata_onos_2fconfig_2fv2_2ftransaction_2eproto[9]);
}

// ===================================================================

class TransactionValidatePhase::_Internal {
 public:
  static const ::onos::config::v2::TransactionPhaseStatus& status(const TransactionValidatePhase* msg);
  static const ::onos::config::v2::Failure& failure(const TransactionValidatePhase* msg);
};

const ::onos::config::v2::TransactionPhaseStatus&
TransactionValidatePhase::_Internal::status(const TransactionValidatePhase* msg) {
  return *msg->status_;
}
const ::onos::config::v2::Failure&
TransactionValidatePhase::_Internal::failure(const TransactionValidatePhase* msg) {
  return *msg->failure_;
}
void TransactionValidatePhase::clear_failure() {
  if (GetArenaForAllocation() == nullptr && failure_ != nullptr) {
    delete failure_;
  }
  failure_ = nullptr;
}
TransactionValidatePhase::TransactionValidatePhase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.config.v2.TransactionValidatePhase)
}
TransactionValidatePhase::TransactionValidatePhase(const TransactionValidatePhase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::onos::config::v2::TransactionPhaseStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_failure()) {
    failure_ = new ::onos::config::v2::Failure(*from.failure_);
  } else {
    failure_ = nullptr;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:onos.config.v2.TransactionValidatePhase)
}

inline void TransactionValidatePhase::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&status_)) + sizeof(state_));
}

TransactionValidatePhase::~TransactionValidatePhase() {
  // @@protoc_insertion_point(destructor:onos.config.v2.TransactionValidatePhase)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransactionValidatePhase::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete failure_;
}

void TransactionValidatePhase::ArenaDtor(void* object) {
  TransactionValidatePhase* _this = reinterpret_cast< TransactionValidatePhase* >(object);
  (void)_this;
}
void TransactionValidatePhase::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionValidatePhase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionValidatePhase::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.config.v2.TransactionValidatePhase)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && failure_ != nullptr) {
    delete failure_;
  }
  failure_ = nullptr;
  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionValidatePhase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .onos.config.v2.TransactionPhaseStatus status = 1 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.config.v2.TransactionValidatePhase.State state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::onos::config::v2::TransactionValidatePhase_State>(val));
        } else
          goto handle_unusual;
        continue;
      // .onos.config.v2.Failure failure = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_failure(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransactionValidatePhase::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.config.v2.TransactionValidatePhase)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .onos.config.v2.TransactionPhaseStatus status = 1 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .onos.config.v2.TransactionValidatePhase.State state = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  // .onos.config.v2.Failure failure = 3;
  if (this->_internal_has_failure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::failure(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.config.v2.TransactionValidatePhase)
  return target;
}

size_t TransactionValidatePhase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.config.v2.TransactionValidatePhase)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .onos.config.v2.TransactionPhaseStatus status = 1 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .onos.config.v2.Failure failure = 3;
  if (this->_internal_has_failure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *failure_);
  }

  // .onos.config.v2.TransactionValidatePhase.State state = 2;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionValidatePhase::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransactionValidatePhase::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionValidatePhase::GetClassData() const { return &_class_data_; }

void TransactionValidatePhase::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TransactionValidatePhase *>(to)->MergeFrom(
      static_cast<const TransactionValidatePhase &>(from));
}


void TransactionValidatePhase::MergeFrom(const TransactionValidatePhase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.config.v2.TransactionValidatePhase)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_mutable_status()->::onos::config::v2::TransactionPhaseStatus::MergeFrom(from._internal_status());
  }
  if (from._internal_has_failure()) {
    _internal_mutable_failure()->::onos::config::v2::Failure::MergeFrom(from._internal_failure());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionValidatePhase::CopyFrom(const TransactionValidatePhase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.config.v2.TransactionValidatePhase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionValidatePhase::IsInitialized() const {
  return true;
}

void TransactionValidatePhase::InternalSwap(TransactionValidatePhase* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionValidatePhase, state_)
      + sizeof(TransactionValidatePhase::state_)
      - PROTOBUF_FIELD_OFFSET(TransactionValidatePhase, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionValidatePhase::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fconfig_2fv2_2ftransaction_2eproto_getter, &descriptor_table_onos_2fconfig_2fv2_2ftransaction_2eproto_once,
      file_level_metadata_onos_2fconfig_2fv2_2ftransaction_2eproto[10]);
}

// ===================================================================

class TransactionCommitPhase::_Internal {
 public:
  static const ::onos::config::v2::TransactionPhaseStatus& status(const TransactionCommitPhase* msg);
};

const ::onos::config::v2::TransactionPhaseStatus&
TransactionCommitPhase::_Internal::status(const TransactionCommitPhase* msg) {
  return *msg->status_;
}
TransactionCommitPhase::TransactionCommitPhase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.config.v2.TransactionCommitPhase)
}
TransactionCommitPhase::TransactionCommitPhase(const TransactionCommitPhase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::onos::config::v2::TransactionPhaseStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:onos.config.v2.TransactionCommitPhase)
}

inline void TransactionCommitPhase::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&status_)) + sizeof(state_));
}

TransactionCommitPhase::~TransactionCommitPhase() {
  // @@protoc_insertion_point(destructor:onos.config.v2.TransactionCommitPhase)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransactionCommitPhase::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void TransactionCommitPhase::ArenaDtor(void* object) {
  TransactionCommitPhase* _this = reinterpret_cast< TransactionCommitPhase* >(object);
  (void)_this;
}
void TransactionCommitPhase::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionCommitPhase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionCommitPhase::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.config.v2.TransactionCommitPhase)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionCommitPhase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .onos.config.v2.TransactionPhaseStatus status = 1 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.config.v2.TransactionCommitPhase.State state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::onos::config::v2::TransactionCommitPhase_State>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransactionCommitPhase::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.config.v2.TransactionCommitPhase)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .onos.config.v2.TransactionPhaseStatus status = 1 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .onos.config.v2.TransactionCommitPhase.State state = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.config.v2.TransactionCommitPhase)
  return target;
}

size_t TransactionCommitPhase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.config.v2.TransactionCommitPhase)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .onos.config.v2.TransactionPhaseStatus status = 1 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .onos.config.v2.TransactionCommitPhase.State state = 2;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionCommitPhase::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransactionCommitPhase::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionCommitPhase::GetClassData() const { return &_class_data_; }

void TransactionCommitPhase::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TransactionCommitPhase *>(to)->MergeFrom(
      static_cast<const TransactionCommitPhase &>(from));
}


void TransactionCommitPhase::MergeFrom(const TransactionCommitPhase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.config.v2.TransactionCommitPhase)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_mutable_status()->::onos::config::v2::TransactionPhaseStatus::MergeFrom(from._internal_status());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionCommitPhase::CopyFrom(const TransactionCommitPhase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.config.v2.TransactionCommitPhase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionCommitPhase::IsInitialized() const {
  return true;
}

void TransactionCommitPhase::InternalSwap(TransactionCommitPhase* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionCommitPhase, state_)
      + sizeof(TransactionCommitPhase::state_)
      - PROTOBUF_FIELD_OFFSET(TransactionCommitPhase, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionCommitPhase::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fconfig_2fv2_2ftransaction_2eproto_getter, &descriptor_table_onos_2fconfig_2fv2_2ftransaction_2eproto_once,
      file_level_metadata_onos_2fconfig_2fv2_2ftransaction_2eproto[11]);
}

// ===================================================================

class TransactionApplyPhase::_Internal {
 public:
  static const ::onos::config::v2::TransactionPhaseStatus& status(const TransactionApplyPhase* msg);
  static const ::onos::config::v2::Failure& failure(const TransactionApplyPhase* msg);
};

const ::onos::config::v2::TransactionPhaseStatus&
TransactionApplyPhase::_Internal::status(const TransactionApplyPhase* msg) {
  return *msg->status_;
}
const ::onos::config::v2::Failure&
TransactionApplyPhase::_Internal::failure(const TransactionApplyPhase* msg) {
  return *msg->failure_;
}
void TransactionApplyPhase::clear_failure() {
  if (GetArenaForAllocation() == nullptr && failure_ != nullptr) {
    delete failure_;
  }
  failure_ = nullptr;
}
TransactionApplyPhase::TransactionApplyPhase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.config.v2.TransactionApplyPhase)
}
TransactionApplyPhase::TransactionApplyPhase(const TransactionApplyPhase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::onos::config::v2::TransactionPhaseStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  if (from._internal_has_failure()) {
    failure_ = new ::onos::config::v2::Failure(*from.failure_);
  } else {
    failure_ = nullptr;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:onos.config.v2.TransactionApplyPhase)
}

inline void TransactionApplyPhase::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&status_)) + sizeof(state_));
}

TransactionApplyPhase::~TransactionApplyPhase() {
  // @@protoc_insertion_point(destructor:onos.config.v2.TransactionApplyPhase)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransactionApplyPhase::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete failure_;
}

void TransactionApplyPhase::ArenaDtor(void* object) {
  TransactionApplyPhase* _this = reinterpret_cast< TransactionApplyPhase* >(object);
  (void)_this;
}
void TransactionApplyPhase::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionApplyPhase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionApplyPhase::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.config.v2.TransactionApplyPhase)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  if (GetArenaForAllocation() == nullptr && failure_ != nullptr) {
    delete failure_;
  }
  failure_ = nullptr;
  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionApplyPhase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .onos.config.v2.TransactionPhaseStatus status = 1 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.config.v2.TransactionApplyPhase.State state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::onos::config::v2::TransactionApplyPhase_State>(val));
        } else
          goto handle_unusual;
        continue;
      // .onos.config.v2.Failure failure = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_failure(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransactionApplyPhase::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.config.v2.TransactionApplyPhase)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .onos.config.v2.TransactionPhaseStatus status = 1 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .onos.config.v2.TransactionApplyPhase.State state = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  // .onos.config.v2.Failure failure = 3;
  if (this->_internal_has_failure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::failure(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.config.v2.TransactionApplyPhase)
  return target;
}

size_t TransactionApplyPhase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.config.v2.TransactionApplyPhase)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .onos.config.v2.TransactionPhaseStatus status = 1 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .onos.config.v2.Failure failure = 3;
  if (this->_internal_has_failure()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *failure_);
  }

  // .onos.config.v2.TransactionApplyPhase.State state = 2;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionApplyPhase::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransactionApplyPhase::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionApplyPhase::GetClassData() const { return &_class_data_; }

void TransactionApplyPhase::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TransactionApplyPhase *>(to)->MergeFrom(
      static_cast<const TransactionApplyPhase &>(from));
}


void TransactionApplyPhase::MergeFrom(const TransactionApplyPhase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.config.v2.TransactionApplyPhase)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_mutable_status()->::onos::config::v2::TransactionPhaseStatus::MergeFrom(from._internal_status());
  }
  if (from._internal_has_failure()) {
    _internal_mutable_failure()->::onos::config::v2::Failure::MergeFrom(from._internal_failure());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionApplyPhase::CopyFrom(const TransactionApplyPhase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.config.v2.TransactionApplyPhase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionApplyPhase::IsInitialized() const {
  return true;
}

void TransactionApplyPhase::InternalSwap(TransactionApplyPhase* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionApplyPhase, state_)
      + sizeof(TransactionApplyPhase::state_)
      - PROTOBUF_FIELD_OFFSET(TransactionApplyPhase, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionApplyPhase::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fconfig_2fv2_2ftransaction_2eproto_getter, &descriptor_table_onos_2fconfig_2fv2_2ftransaction_2eproto_once,
      file_level_metadata_onos_2fconfig_2fv2_2ftransaction_2eproto[12]);
}

// ===================================================================

class TransactionAbortPhase::_Internal {
 public:
  static const ::onos::config::v2::TransactionPhaseStatus& status(const TransactionAbortPhase* msg);
};

const ::onos::config::v2::TransactionPhaseStatus&
TransactionAbortPhase::_Internal::status(const TransactionAbortPhase* msg) {
  return *msg->status_;
}
TransactionAbortPhase::TransactionAbortPhase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.config.v2.TransactionAbortPhase)
}
TransactionAbortPhase::TransactionAbortPhase(const TransactionAbortPhase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_status()) {
    status_ = new ::onos::config::v2::TransactionPhaseStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  state_ = from.state_;
  // @@protoc_insertion_point(copy_constructor:onos.config.v2.TransactionAbortPhase)
}

inline void TransactionAbortPhase::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&status_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&status_)) + sizeof(state_));
}

TransactionAbortPhase::~TransactionAbortPhase() {
  // @@protoc_insertion_point(destructor:onos.config.v2.TransactionAbortPhase)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransactionAbortPhase::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete status_;
}

void TransactionAbortPhase::ArenaDtor(void* object) {
  TransactionAbortPhase* _this = reinterpret_cast< TransactionAbortPhase* >(object);
  (void)_this;
}
void TransactionAbortPhase::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionAbortPhase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionAbortPhase::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.config.v2.TransactionAbortPhase)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  state_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionAbortPhase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .onos.config.v2.TransactionPhaseStatus status = 1 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.config.v2.TransactionAbortPhase.State state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::onos::config::v2::TransactionAbortPhase_State>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransactionAbortPhase::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.config.v2.TransactionAbortPhase)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .onos.config.v2.TransactionPhaseStatus status = 1 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::status(this), target, stream);
  }

  // .onos.config.v2.TransactionAbortPhase.State state = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.config.v2.TransactionAbortPhase)
  return target;
}

size_t TransactionAbortPhase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.config.v2.TransactionAbortPhase)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .onos.config.v2.TransactionPhaseStatus status = 1 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  // .onos.config.v2.TransactionAbortPhase.State state = 2;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionAbortPhase::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransactionAbortPhase::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionAbortPhase::GetClassData() const { return &_class_data_; }

void TransactionAbortPhase::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TransactionAbortPhase *>(to)->MergeFrom(
      static_cast<const TransactionAbortPhase &>(from));
}


void TransactionAbortPhase::MergeFrom(const TransactionAbortPhase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.config.v2.TransactionAbortPhase)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_status()) {
    _internal_mutable_status()->::onos::config::v2::TransactionPhaseStatus::MergeFrom(from._internal_status());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionAbortPhase::CopyFrom(const TransactionAbortPhase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.config.v2.TransactionAbortPhase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionAbortPhase::IsInitialized() const {
  return true;
}

void TransactionAbortPhase::InternalSwap(TransactionAbortPhase* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionAbortPhase, state_)
      + sizeof(TransactionAbortPhase::state_)
      - PROTOBUF_FIELD_OFFSET(TransactionAbortPhase, status_)>(
          reinterpret_cast<char*>(&status_),
          reinterpret_cast<char*>(&other->status_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionAbortPhase::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fconfig_2fv2_2ftransaction_2eproto_getter, &descriptor_table_onos_2fconfig_2fv2_2ftransaction_2eproto_once,
      file_level_metadata_onos_2fconfig_2fv2_2ftransaction_2eproto[13]);
}

// ===================================================================

class TransactionEvent::_Internal {
 public:
  static const ::onos::config::v2::Transaction& transaction(const TransactionEvent* msg);
};

const ::onos::config::v2::Transaction&
TransactionEvent::_Internal::transaction(const TransactionEvent* msg) {
  return *msg->transaction_;
}
TransactionEvent::TransactionEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.config.v2.TransactionEvent)
}
TransactionEvent::TransactionEvent(const TransactionEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_transaction()) {
    transaction_ = new ::onos::config::v2::Transaction(*from.transaction_);
  } else {
    transaction_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:onos.config.v2.TransactionEvent)
}

inline void TransactionEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transaction_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&transaction_)) + sizeof(type_));
}

TransactionEvent::~TransactionEvent() {
  // @@protoc_insertion_point(destructor:onos.config.v2.TransactionEvent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TransactionEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete transaction_;
}

void TransactionEvent::ArenaDtor(void* object) {
  TransactionEvent* _this = reinterpret_cast< TransactionEvent* >(object);
  (void)_this;
}
void TransactionEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TransactionEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TransactionEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.config.v2.TransactionEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && transaction_ != nullptr) {
    delete transaction_;
  }
  transaction_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TransactionEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .onos.config.v2.TransactionEvent.EventType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::onos::config::v2::TransactionEvent_EventType>(val));
        } else
          goto handle_unusual;
        continue;
      // .onos.config.v2.Transaction transaction = 2 [(.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TransactionEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.config.v2.TransactionEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .onos.config.v2.TransactionEvent.EventType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .onos.config.v2.Transaction transaction = 2 [(.gogoproto.nullable) = false];
  if (this->_internal_has_transaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::transaction(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.config.v2.TransactionEvent)
  return target;
}

size_t TransactionEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.config.v2.TransactionEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .onos.config.v2.Transaction transaction = 2 [(.gogoproto.nullable) = false];
  if (this->_internal_has_transaction()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_);
  }

  // .onos.config.v2.TransactionEvent.EventType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TransactionEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TransactionEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TransactionEvent::GetClassData() const { return &_class_data_; }

void TransactionEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TransactionEvent *>(to)->MergeFrom(
      static_cast<const TransactionEvent &>(from));
}


void TransactionEvent::MergeFrom(const TransactionEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.config.v2.TransactionEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_transaction()) {
    _internal_mutable_transaction()->::onos::config::v2::Transaction::MergeFrom(from._internal_transaction());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TransactionEvent::CopyFrom(const TransactionEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.config.v2.TransactionEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TransactionEvent::IsInitialized() const {
  return true;
}

void TransactionEvent::InternalSwap(TransactionEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TransactionEvent, type_)
      + sizeof(TransactionEvent::type_)
      - PROTOBUF_FIELD_OFFSET(TransactionEvent, transaction_)>(
          reinterpret_cast<char*>(&transaction_),
          reinterpret_cast<char*>(&other->transaction_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TransactionEvent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fconfig_2fv2_2ftransaction_2eproto_getter, &descriptor_table_onos_2fconfig_2fv2_2ftransaction_2eproto_once,
      file_level_metadata_onos_2fconfig_2fv2_2ftransaction_2eproto[14]);
}

// ===================================================================

TargetVersionOverrides_OverridesEntry_DoNotUse::TargetVersionOverrides_OverridesEntry_DoNotUse() {}
TargetVersionOverrides_OverridesEntry_DoNotUse::TargetVersionOverrides_OverridesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void TargetVersionOverrides_OverridesEntry_DoNotUse::MergeFrom(const TargetVersionOverrides_OverridesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata TargetVersionOverrides_OverridesEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fconfig_2fv2_2ftransaction_2eproto_getter, &descriptor_table_onos_2fconfig_2fv2_2ftransaction_2eproto_once,
      file_level_metadata_onos_2fconfig_2fv2_2ftransaction_2eproto[15]);
}

// ===================================================================

class TargetVersionOverrides::_Internal {
 public:
};

void TargetVersionOverrides::clear_overrides() {
  overrides_.Clear();
}
TargetVersionOverrides::TargetVersionOverrides(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  overrides_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.config.v2.TargetVersionOverrides)
}
TargetVersionOverrides::TargetVersionOverrides(const TargetVersionOverrides& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  overrides_.MergeFrom(from.overrides_);
  // @@protoc_insertion_point(copy_constructor:onos.config.v2.TargetVersionOverrides)
}

inline void TargetVersionOverrides::SharedCtor() {
}

TargetVersionOverrides::~TargetVersionOverrides() {
  // @@protoc_insertion_point(destructor:onos.config.v2.TargetVersionOverrides)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TargetVersionOverrides::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TargetVersionOverrides::ArenaDtor(void* object) {
  TargetVersionOverrides* _this = reinterpret_cast< TargetVersionOverrides* >(object);
  (void)_this;
  _this->overrides_. ~MapField();
}
inline void TargetVersionOverrides::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &TargetVersionOverrides::ArenaDtor);
  }
}
void TargetVersionOverrides::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TargetVersionOverrides::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.config.v2.TargetVersionOverrides)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  overrides_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TargetVersionOverrides::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .onos.config.v2.TargetTypeVersion> overrides = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&overrides_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TargetVersionOverrides::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.config.v2.TargetVersionOverrides)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .onos.config.v2.TargetTypeVersion> overrides = 1;
  if (!this->_internal_overrides().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::config::v2::TargetTypeVersion >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "onos.config.v2.TargetVersionOverrides.OverridesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_overrides().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_overrides().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::config::v2::TargetTypeVersion >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::config::v2::TargetTypeVersion >::const_iterator
          it = this->_internal_overrides().begin();
          it != this->_internal_overrides().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = TargetVersionOverrides_OverridesEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::config::v2::TargetTypeVersion >::const_iterator
          it = this->_internal_overrides().begin();
          it != this->_internal_overrides().end(); ++it) {
        target = TargetVersionOverrides_OverridesEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.config.v2.TargetVersionOverrides)
  return target;
}

size_t TargetVersionOverrides::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.config.v2.TargetVersionOverrides)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .onos.config.v2.TargetTypeVersion> overrides = 1;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_overrides_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::config::v2::TargetTypeVersion >::const_iterator
      it = this->_internal_overrides().begin();
      it != this->_internal_overrides().end(); ++it) {
    total_size += TargetVersionOverrides_OverridesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TargetVersionOverrides::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TargetVersionOverrides::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TargetVersionOverrides::GetClassData() const { return &_class_data_; }

void TargetVersionOverrides::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<TargetVersionOverrides *>(to)->MergeFrom(
      static_cast<const TargetVersionOverrides &>(from));
}


void TargetVersionOverrides::MergeFrom(const TargetVersionOverrides& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.config.v2.TargetVersionOverrides)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  overrides_.MergeFrom(from.overrides_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TargetVersionOverrides::CopyFrom(const TargetVersionOverrides& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.config.v2.TargetVersionOverrides)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetVersionOverrides::IsInitialized() const {
  return true;
}

void TargetVersionOverrides::InternalSwap(TargetVersionOverrides* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  overrides_.InternalSwap(&other->overrides_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TargetVersionOverrides::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fconfig_2fv2_2ftransaction_2eproto_getter, &descriptor_table_onos_2fconfig_2fv2_2ftransaction_2eproto_once,
      file_level_metadata_onos_2fconfig_2fv2_2ftransaction_2eproto[16]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v2
}  // namespace config
}  // namespace onos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::onos::config::v2::TransactionInfo* Arena::CreateMaybeMessage< ::onos::config::v2::TransactionInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::config::v2::TransactionInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::config::v2::Transaction* Arena::CreateMaybeMessage< ::onos::config::v2::Transaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::config::v2::Transaction >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::config::v2::TransactionStrategy* Arena::CreateMaybeMessage< ::onos::config::v2::TransactionStrategy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::config::v2::TransactionStrategy >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::config::v2::ChangeTransaction_ValuesEntry_DoNotUse* Arena::CreateMaybeMessage< ::onos::config::v2::ChangeTransaction_ValuesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::config::v2::ChangeTransaction_ValuesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::config::v2::ChangeTransaction* Arena::CreateMaybeMessage< ::onos::config::v2::ChangeTransaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::config::v2::ChangeTransaction >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::config::v2::RollbackTransaction* Arena::CreateMaybeMessage< ::onos::config::v2::RollbackTransaction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::config::v2::RollbackTransaction >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::config::v2::TransactionStatus* Arena::CreateMaybeMessage< ::onos::config::v2::TransactionStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::config::v2::TransactionStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::config::v2::TransactionPhases* Arena::CreateMaybeMessage< ::onos::config::v2::TransactionPhases >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::config::v2::TransactionPhases >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::config::v2::TransactionPhaseStatus* Arena::CreateMaybeMessage< ::onos::config::v2::TransactionPhaseStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::config::v2::TransactionPhaseStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::config::v2::TransactionInitializePhase* Arena::CreateMaybeMessage< ::onos::config::v2::TransactionInitializePhase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::config::v2::TransactionInitializePhase >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::config::v2::TransactionValidatePhase* Arena::CreateMaybeMessage< ::onos::config::v2::TransactionValidatePhase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::config::v2::TransactionValidatePhase >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::config::v2::TransactionCommitPhase* Arena::CreateMaybeMessage< ::onos::config::v2::TransactionCommitPhase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::config::v2::TransactionCommitPhase >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::config::v2::TransactionApplyPhase* Arena::CreateMaybeMessage< ::onos::config::v2::TransactionApplyPhase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::config::v2::TransactionApplyPhase >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::config::v2::TransactionAbortPhase* Arena::CreateMaybeMessage< ::onos::config::v2::TransactionAbortPhase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::config::v2::TransactionAbortPhase >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::config::v2::TransactionEvent* Arena::CreateMaybeMessage< ::onos::config::v2::TransactionEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::config::v2::TransactionEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::config::v2::TargetVersionOverrides_OverridesEntry_DoNotUse* Arena::CreateMaybeMessage< ::onos::config::v2::TargetVersionOverrides_OverridesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::config::v2::TargetVersionOverrides_OverridesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::config::v2::TargetVersionOverrides* Arena::CreateMaybeMessage< ::onos::config::v2::TargetVersionOverrides >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::config::v2::TargetVersionOverrides >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
