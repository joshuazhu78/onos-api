// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onos/config/v2/proposal.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_onos_2fconfig_2fv2_2fproposal_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_onos_2fconfig_2fv2_2fproposal_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "gogoproto/gogo.pb.h"
#include "onos/config/v2/object.pb.h"
#include "onos/config/v2/value.pb.h"
#include "onos/config/v2/failure.pb.h"
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_onos_2fconfig_2fv2_2fproposal_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_onos_2fconfig_2fv2_2fproposal_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[14]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_onos_2fconfig_2fv2_2fproposal_2eproto;
namespace onos {
namespace config {
namespace v2 {
class ChangeProposal;
struct ChangeProposalDefaultTypeInternal;
extern ChangeProposalDefaultTypeInternal _ChangeProposal_default_instance_;
class ChangeProposal_ValuesEntry_DoNotUse;
struct ChangeProposal_ValuesEntry_DoNotUseDefaultTypeInternal;
extern ChangeProposal_ValuesEntry_DoNotUseDefaultTypeInternal _ChangeProposal_ValuesEntry_DoNotUse_default_instance_;
class Proposal;
struct ProposalDefaultTypeInternal;
extern ProposalDefaultTypeInternal _Proposal_default_instance_;
class ProposalAbortPhase;
struct ProposalAbortPhaseDefaultTypeInternal;
extern ProposalAbortPhaseDefaultTypeInternal _ProposalAbortPhase_default_instance_;
class ProposalApplyPhase;
struct ProposalApplyPhaseDefaultTypeInternal;
extern ProposalApplyPhaseDefaultTypeInternal _ProposalApplyPhase_default_instance_;
class ProposalCommitPhase;
struct ProposalCommitPhaseDefaultTypeInternal;
extern ProposalCommitPhaseDefaultTypeInternal _ProposalCommitPhase_default_instance_;
class ProposalEvent;
struct ProposalEventDefaultTypeInternal;
extern ProposalEventDefaultTypeInternal _ProposalEvent_default_instance_;
class ProposalInitializePhase;
struct ProposalInitializePhaseDefaultTypeInternal;
extern ProposalInitializePhaseDefaultTypeInternal _ProposalInitializePhase_default_instance_;
class ProposalPhaseStatus;
struct ProposalPhaseStatusDefaultTypeInternal;
extern ProposalPhaseStatusDefaultTypeInternal _ProposalPhaseStatus_default_instance_;
class ProposalPhases;
struct ProposalPhasesDefaultTypeInternal;
extern ProposalPhasesDefaultTypeInternal _ProposalPhases_default_instance_;
class ProposalStatus;
struct ProposalStatusDefaultTypeInternal;
extern ProposalStatusDefaultTypeInternal _ProposalStatus_default_instance_;
class ProposalStatus_RollbackValuesEntry_DoNotUse;
struct ProposalStatus_RollbackValuesEntry_DoNotUseDefaultTypeInternal;
extern ProposalStatus_RollbackValuesEntry_DoNotUseDefaultTypeInternal _ProposalStatus_RollbackValuesEntry_DoNotUse_default_instance_;
class ProposalValidatePhase;
struct ProposalValidatePhaseDefaultTypeInternal;
extern ProposalValidatePhaseDefaultTypeInternal _ProposalValidatePhase_default_instance_;
class RollbackProposal;
struct RollbackProposalDefaultTypeInternal;
extern RollbackProposalDefaultTypeInternal _RollbackProposal_default_instance_;
}  // namespace v2
}  // namespace config
}  // namespace onos
PROTOBUF_NAMESPACE_OPEN
template<> ::onos::config::v2::ChangeProposal* Arena::CreateMaybeMessage<::onos::config::v2::ChangeProposal>(Arena*);
template<> ::onos::config::v2::ChangeProposal_ValuesEntry_DoNotUse* Arena::CreateMaybeMessage<::onos::config::v2::ChangeProposal_ValuesEntry_DoNotUse>(Arena*);
template<> ::onos::config::v2::Proposal* Arena::CreateMaybeMessage<::onos::config::v2::Proposal>(Arena*);
template<> ::onos::config::v2::ProposalAbortPhase* Arena::CreateMaybeMessage<::onos::config::v2::ProposalAbortPhase>(Arena*);
template<> ::onos::config::v2::ProposalApplyPhase* Arena::CreateMaybeMessage<::onos::config::v2::ProposalApplyPhase>(Arena*);
template<> ::onos::config::v2::ProposalCommitPhase* Arena::CreateMaybeMessage<::onos::config::v2::ProposalCommitPhase>(Arena*);
template<> ::onos::config::v2::ProposalEvent* Arena::CreateMaybeMessage<::onos::config::v2::ProposalEvent>(Arena*);
template<> ::onos::config::v2::ProposalInitializePhase* Arena::CreateMaybeMessage<::onos::config::v2::ProposalInitializePhase>(Arena*);
template<> ::onos::config::v2::ProposalPhaseStatus* Arena::CreateMaybeMessage<::onos::config::v2::ProposalPhaseStatus>(Arena*);
template<> ::onos::config::v2::ProposalPhases* Arena::CreateMaybeMessage<::onos::config::v2::ProposalPhases>(Arena*);
template<> ::onos::config::v2::ProposalStatus* Arena::CreateMaybeMessage<::onos::config::v2::ProposalStatus>(Arena*);
template<> ::onos::config::v2::ProposalStatus_RollbackValuesEntry_DoNotUse* Arena::CreateMaybeMessage<::onos::config::v2::ProposalStatus_RollbackValuesEntry_DoNotUse>(Arena*);
template<> ::onos::config::v2::ProposalValidatePhase* Arena::CreateMaybeMessage<::onos::config::v2::ProposalValidatePhase>(Arena*);
template<> ::onos::config::v2::RollbackProposal* Arena::CreateMaybeMessage<::onos::config::v2::RollbackProposal>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace onos {
namespace config {
namespace v2 {

enum ProposalInitializePhase_State : int {
  ProposalInitializePhase_State_INITIALIZING = 0,
  ProposalInitializePhase_State_INITIALIZED = 1,
  ProposalInitializePhase_State_ProposalInitializePhase_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ProposalInitializePhase_State_ProposalInitializePhase_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ProposalInitializePhase_State_IsValid(int value);
constexpr ProposalInitializePhase_State ProposalInitializePhase_State_State_MIN = ProposalInitializePhase_State_INITIALIZING;
constexpr ProposalInitializePhase_State ProposalInitializePhase_State_State_MAX = ProposalInitializePhase_State_INITIALIZED;
constexpr int ProposalInitializePhase_State_State_ARRAYSIZE = ProposalInitializePhase_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProposalInitializePhase_State_descriptor();
template<typename T>
inline const std::string& ProposalInitializePhase_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProposalInitializePhase_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProposalInitializePhase_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProposalInitializePhase_State_descriptor(), enum_t_value);
}
inline bool ProposalInitializePhase_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ProposalInitializePhase_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProposalInitializePhase_State>(
    ProposalInitializePhase_State_descriptor(), name, value);
}
enum ProposalValidatePhase_State : int {
  ProposalValidatePhase_State_VALIDATING = 0,
  ProposalValidatePhase_State_VALIDATED = 1,
  ProposalValidatePhase_State_FAILED = 2,
  ProposalValidatePhase_State_ProposalValidatePhase_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ProposalValidatePhase_State_ProposalValidatePhase_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ProposalValidatePhase_State_IsValid(int value);
constexpr ProposalValidatePhase_State ProposalValidatePhase_State_State_MIN = ProposalValidatePhase_State_VALIDATING;
constexpr ProposalValidatePhase_State ProposalValidatePhase_State_State_MAX = ProposalValidatePhase_State_FAILED;
constexpr int ProposalValidatePhase_State_State_ARRAYSIZE = ProposalValidatePhase_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProposalValidatePhase_State_descriptor();
template<typename T>
inline const std::string& ProposalValidatePhase_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProposalValidatePhase_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProposalValidatePhase_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProposalValidatePhase_State_descriptor(), enum_t_value);
}
inline bool ProposalValidatePhase_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ProposalValidatePhase_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProposalValidatePhase_State>(
    ProposalValidatePhase_State_descriptor(), name, value);
}
enum ProposalCommitPhase_State : int {
  ProposalCommitPhase_State_COMMITTING = 0,
  ProposalCommitPhase_State_COMMITTED = 1,
  ProposalCommitPhase_State_ProposalCommitPhase_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ProposalCommitPhase_State_ProposalCommitPhase_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ProposalCommitPhase_State_IsValid(int value);
constexpr ProposalCommitPhase_State ProposalCommitPhase_State_State_MIN = ProposalCommitPhase_State_COMMITTING;
constexpr ProposalCommitPhase_State ProposalCommitPhase_State_State_MAX = ProposalCommitPhase_State_COMMITTED;
constexpr int ProposalCommitPhase_State_State_ARRAYSIZE = ProposalCommitPhase_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProposalCommitPhase_State_descriptor();
template<typename T>
inline const std::string& ProposalCommitPhase_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProposalCommitPhase_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProposalCommitPhase_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProposalCommitPhase_State_descriptor(), enum_t_value);
}
inline bool ProposalCommitPhase_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ProposalCommitPhase_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProposalCommitPhase_State>(
    ProposalCommitPhase_State_descriptor(), name, value);
}
enum ProposalApplyPhase_State : int {
  ProposalApplyPhase_State_APPLYING = 0,
  ProposalApplyPhase_State_APPLIED = 1,
  ProposalApplyPhase_State_FAILED = 2,
  ProposalApplyPhase_State_ProposalApplyPhase_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ProposalApplyPhase_State_ProposalApplyPhase_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ProposalApplyPhase_State_IsValid(int value);
constexpr ProposalApplyPhase_State ProposalApplyPhase_State_State_MIN = ProposalApplyPhase_State_APPLYING;
constexpr ProposalApplyPhase_State ProposalApplyPhase_State_State_MAX = ProposalApplyPhase_State_FAILED;
constexpr int ProposalApplyPhase_State_State_ARRAYSIZE = ProposalApplyPhase_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProposalApplyPhase_State_descriptor();
template<typename T>
inline const std::string& ProposalApplyPhase_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProposalApplyPhase_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProposalApplyPhase_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProposalApplyPhase_State_descriptor(), enum_t_value);
}
inline bool ProposalApplyPhase_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ProposalApplyPhase_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProposalApplyPhase_State>(
    ProposalApplyPhase_State_descriptor(), name, value);
}
enum ProposalAbortPhase_State : int {
  ProposalAbortPhase_State_ABORTING = 0,
  ProposalAbortPhase_State_ABORTED = 1,
  ProposalAbortPhase_State_ProposalAbortPhase_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ProposalAbortPhase_State_ProposalAbortPhase_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ProposalAbortPhase_State_IsValid(int value);
constexpr ProposalAbortPhase_State ProposalAbortPhase_State_State_MIN = ProposalAbortPhase_State_ABORTING;
constexpr ProposalAbortPhase_State ProposalAbortPhase_State_State_MAX = ProposalAbortPhase_State_ABORTED;
constexpr int ProposalAbortPhase_State_State_ARRAYSIZE = ProposalAbortPhase_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProposalAbortPhase_State_descriptor();
template<typename T>
inline const std::string& ProposalAbortPhase_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProposalAbortPhase_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProposalAbortPhase_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProposalAbortPhase_State_descriptor(), enum_t_value);
}
inline bool ProposalAbortPhase_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ProposalAbortPhase_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProposalAbortPhase_State>(
    ProposalAbortPhase_State_descriptor(), name, value);
}
enum ProposalEvent_EventType : int {
  ProposalEvent_EventType_UNKNOWN = 0,
  ProposalEvent_EventType_CREATED = 1,
  ProposalEvent_EventType_UPDATED = 2,
  ProposalEvent_EventType_DELETED = 3,
  ProposalEvent_EventType_REPLAYED = 4,
  ProposalEvent_EventType_ProposalEvent_EventType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ProposalEvent_EventType_ProposalEvent_EventType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ProposalEvent_EventType_IsValid(int value);
constexpr ProposalEvent_EventType ProposalEvent_EventType_EventType_MIN = ProposalEvent_EventType_UNKNOWN;
constexpr ProposalEvent_EventType ProposalEvent_EventType_EventType_MAX = ProposalEvent_EventType_REPLAYED;
constexpr int ProposalEvent_EventType_EventType_ARRAYSIZE = ProposalEvent_EventType_EventType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProposalEvent_EventType_descriptor();
template<typename T>
inline const std::string& ProposalEvent_EventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProposalEvent_EventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProposalEvent_EventType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProposalEvent_EventType_descriptor(), enum_t_value);
}
inline bool ProposalEvent_EventType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ProposalEvent_EventType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProposalEvent_EventType>(
    ProposalEvent_EventType_descriptor(), name, value);
}
// ===================================================================

class Proposal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.config.v2.Proposal) */ {
 public:
  inline Proposal() : Proposal(nullptr) {}
  ~Proposal() override;
  explicit constexpr Proposal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Proposal(const Proposal& from);
  Proposal(Proposal&& from) noexcept
    : Proposal() {
    *this = ::std::move(from);
  }

  inline Proposal& operator=(const Proposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline Proposal& operator=(Proposal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Proposal& default_instance() {
    return *internal_default_instance();
  }
  enum DetailsCase {
    kChange = 5,
    kRollback = 6,
    DETAILS_NOT_SET = 0,
  };

  static inline const Proposal* internal_default_instance() {
    return reinterpret_cast<const Proposal*>(
               &_Proposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Proposal& a, Proposal& b) {
    a.Swap(&b);
  }
  inline void Swap(Proposal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Proposal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Proposal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Proposal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Proposal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Proposal& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Proposal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.config.v2.Proposal";
  }
  protected:
  explicit Proposal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 2,
    kTargetIdFieldNumber = 3,
    kMetaFieldNumber = 1,
    kStatusFieldNumber = 7,
    kTargetInfoFieldNumber = 8,
    kTransactionIndexFieldNumber = 4,
    kChangeFieldNumber = 5,
    kRollbackFieldNumber = 6,
  };
  // string id = 2 [(.gogoproto.customname) = "ID", (.gogoproto.casttype) = "ProposalID"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string target_id = 3 [(.gogoproto.customname) = "TargetID", (.gogoproto.casttype) = "TargetID"];
  void clear_target_id();
  const std::string& target_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_target_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_target_id();
  PROTOBUF_NODISCARD std::string* release_target_id();
  void set_allocated_target_id(std::string* target_id);
  private:
  const std::string& _internal_target_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_id(const std::string& value);
  std::string* _internal_mutable_target_id();
  public:

  // .onos.config.v2.ObjectMeta meta = 1 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::onos::config::v2::ObjectMeta& meta() const;
  PROTOBUF_NODISCARD ::onos::config::v2::ObjectMeta* release_meta();
  ::onos::config::v2::ObjectMeta* mutable_meta();
  void set_allocated_meta(::onos::config::v2::ObjectMeta* meta);
  private:
  const ::onos::config::v2::ObjectMeta& _internal_meta() const;
  ::onos::config::v2::ObjectMeta* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::onos::config::v2::ObjectMeta* meta);
  ::onos::config::v2::ObjectMeta* unsafe_arena_release_meta();

  // .onos.config.v2.ProposalStatus status = 7 [(.gogoproto.nullable) = false];
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::onos::config::v2::ProposalStatus& status() const;
  PROTOBUF_NODISCARD ::onos::config::v2::ProposalStatus* release_status();
  ::onos::config::v2::ProposalStatus* mutable_status();
  void set_allocated_status(::onos::config::v2::ProposalStatus* status);
  private:
  const ::onos::config::v2::ProposalStatus& _internal_status() const;
  ::onos::config::v2::ProposalStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::onos::config::v2::ProposalStatus* status);
  ::onos::config::v2::ProposalStatus* unsafe_arena_release_status();

  // .onos.config.v2.TargetTypeVersion target_info = 8 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
  bool has_target_info() const;
  private:
  bool _internal_has_target_info() const;
  public:
  void clear_target_info();
  const ::onos::config::v2::TargetTypeVersion& target_info() const;
  PROTOBUF_NODISCARD ::onos::config::v2::TargetTypeVersion* release_target_info();
  ::onos::config::v2::TargetTypeVersion* mutable_target_info();
  void set_allocated_target_info(::onos::config::v2::TargetTypeVersion* target_info);
  private:
  const ::onos::config::v2::TargetTypeVersion& _internal_target_info() const;
  ::onos::config::v2::TargetTypeVersion* _internal_mutable_target_info();
  public:
  void unsafe_arena_set_allocated_target_info(
      ::onos::config::v2::TargetTypeVersion* target_info);
  ::onos::config::v2::TargetTypeVersion* unsafe_arena_release_target_info();

  // uint64 transaction_index = 4 [(.gogoproto.casttype) = "Index"];
  void clear_transaction_index();
  uint64_t transaction_index() const;
  void set_transaction_index(uint64_t value);
  private:
  uint64_t _internal_transaction_index() const;
  void _internal_set_transaction_index(uint64_t value);
  public:

  // .onos.config.v2.ChangeProposal change = 5;
  bool has_change() const;
  private:
  bool _internal_has_change() const;
  public:
  void clear_change();
  const ::onos::config::v2::ChangeProposal& change() const;
  PROTOBUF_NODISCARD ::onos::config::v2::ChangeProposal* release_change();
  ::onos::config::v2::ChangeProposal* mutable_change();
  void set_allocated_change(::onos::config::v2::ChangeProposal* change);
  private:
  const ::onos::config::v2::ChangeProposal& _internal_change() const;
  ::onos::config::v2::ChangeProposal* _internal_mutable_change();
  public:
  void unsafe_arena_set_allocated_change(
      ::onos::config::v2::ChangeProposal* change);
  ::onos::config::v2::ChangeProposal* unsafe_arena_release_change();

  // .onos.config.v2.RollbackProposal rollback = 6;
  bool has_rollback() const;
  private:
  bool _internal_has_rollback() const;
  public:
  void clear_rollback();
  const ::onos::config::v2::RollbackProposal& rollback() const;
  PROTOBUF_NODISCARD ::onos::config::v2::RollbackProposal* release_rollback();
  ::onos::config::v2::RollbackProposal* mutable_rollback();
  void set_allocated_rollback(::onos::config::v2::RollbackProposal* rollback);
  private:
  const ::onos::config::v2::RollbackProposal& _internal_rollback() const;
  ::onos::config::v2::RollbackProposal* _internal_mutable_rollback();
  public:
  void unsafe_arena_set_allocated_rollback(
      ::onos::config::v2::RollbackProposal* rollback);
  ::onos::config::v2::RollbackProposal* unsafe_arena_release_rollback();

  void clear_details();
  DetailsCase details_case() const;
  // @@protoc_insertion_point(class_scope:onos.config.v2.Proposal)
 private:
  class _Internal;
  void set_has_change();
  void set_has_rollback();

  inline bool has_details() const;
  inline void clear_has_details();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_id_;
  ::onos::config::v2::ObjectMeta* meta_;
  ::onos::config::v2::ProposalStatus* status_;
  ::onos::config::v2::TargetTypeVersion* target_info_;
  uint64_t transaction_index_;
  union DetailsUnion {
    constexpr DetailsUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::onos::config::v2::ChangeProposal* change_;
    ::onos::config::v2::RollbackProposal* rollback_;
  } details_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_onos_2fconfig_2fv2_2fproposal_2eproto;
};
// -------------------------------------------------------------------

class ChangeProposal_ValuesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ChangeProposal_ValuesEntry_DoNotUse, 
    std::string, ::onos::config::v2::PathValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ChangeProposal_ValuesEntry_DoNotUse, 
    std::string, ::onos::config::v2::PathValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  ChangeProposal_ValuesEntry_DoNotUse();
  explicit constexpr ChangeProposal_ValuesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ChangeProposal_ValuesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ChangeProposal_ValuesEntry_DoNotUse& other);
  static const ChangeProposal_ValuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ChangeProposal_ValuesEntry_DoNotUse*>(&_ChangeProposal_ValuesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "onos.config.v2.ChangeProposal.ValuesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class ChangeProposal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.config.v2.ChangeProposal) */ {
 public:
  inline ChangeProposal() : ChangeProposal(nullptr) {}
  ~ChangeProposal() override;
  explicit constexpr ChangeProposal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChangeProposal(const ChangeProposal& from);
  ChangeProposal(ChangeProposal&& from) noexcept
    : ChangeProposal() {
    *this = ::std::move(from);
  }

  inline ChangeProposal& operator=(const ChangeProposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeProposal& operator=(ChangeProposal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChangeProposal& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChangeProposal* internal_default_instance() {
    return reinterpret_cast<const ChangeProposal*>(
               &_ChangeProposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ChangeProposal& a, ChangeProposal& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangeProposal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangeProposal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChangeProposal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChangeProposal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChangeProposal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChangeProposal& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeProposal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.config.v2.ChangeProposal";
  }
  protected:
  explicit ChangeProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 1,
  };
  // map<string, .onos.config.v2.PathValue> values = 1;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::config::v2::PathValue >&
      _internal_values() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::config::v2::PathValue >*
      _internal_mutable_values();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::config::v2::PathValue >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::config::v2::PathValue >*
      mutable_values();

  // @@protoc_insertion_point(class_scope:onos.config.v2.ChangeProposal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ChangeProposal_ValuesEntry_DoNotUse,
      std::string, ::onos::config::v2::PathValue,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fconfig_2fv2_2fproposal_2eproto;
};
// -------------------------------------------------------------------

class RollbackProposal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.config.v2.RollbackProposal) */ {
 public:
  inline RollbackProposal() : RollbackProposal(nullptr) {}
  ~RollbackProposal() override;
  explicit constexpr RollbackProposal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RollbackProposal(const RollbackProposal& from);
  RollbackProposal(RollbackProposal&& from) noexcept
    : RollbackProposal() {
    *this = ::std::move(from);
  }

  inline RollbackProposal& operator=(const RollbackProposal& from) {
    CopyFrom(from);
    return *this;
  }
  inline RollbackProposal& operator=(RollbackProposal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RollbackProposal& default_instance() {
    return *internal_default_instance();
  }
  static inline const RollbackProposal* internal_default_instance() {
    return reinterpret_cast<const RollbackProposal*>(
               &_RollbackProposal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RollbackProposal& a, RollbackProposal& b) {
    a.Swap(&b);
  }
  inline void Swap(RollbackProposal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RollbackProposal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RollbackProposal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RollbackProposal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RollbackProposal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RollbackProposal& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RollbackProposal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.config.v2.RollbackProposal";
  }
  protected:
  explicit RollbackProposal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRollbackIndexFieldNumber = 1,
  };
  // uint64 rollback_index = 1 [(.gogoproto.casttype) = "Index"];
  void clear_rollback_index();
  uint64_t rollback_index() const;
  void set_rollback_index(uint64_t value);
  private:
  uint64_t _internal_rollback_index() const;
  void _internal_set_rollback_index(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.config.v2.RollbackProposal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t rollback_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fconfig_2fv2_2fproposal_2eproto;
};
// -------------------------------------------------------------------

class ProposalStatus_RollbackValuesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ProposalStatus_RollbackValuesEntry_DoNotUse, 
    std::string, ::onos::config::v2::PathValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ProposalStatus_RollbackValuesEntry_DoNotUse, 
    std::string, ::onos::config::v2::PathValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  ProposalStatus_RollbackValuesEntry_DoNotUse();
  explicit constexpr ProposalStatus_RollbackValuesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ProposalStatus_RollbackValuesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ProposalStatus_RollbackValuesEntry_DoNotUse& other);
  static const ProposalStatus_RollbackValuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ProposalStatus_RollbackValuesEntry_DoNotUse*>(&_ProposalStatus_RollbackValuesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "onos.config.v2.ProposalStatus.RollbackValuesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class ProposalStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.config.v2.ProposalStatus) */ {
 public:
  inline ProposalStatus() : ProposalStatus(nullptr) {}
  ~ProposalStatus() override;
  explicit constexpr ProposalStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProposalStatus(const ProposalStatus& from);
  ProposalStatus(ProposalStatus&& from) noexcept
    : ProposalStatus() {
    *this = ::std::move(from);
  }

  inline ProposalStatus& operator=(const ProposalStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProposalStatus& operator=(ProposalStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProposalStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProposalStatus* internal_default_instance() {
    return reinterpret_cast<const ProposalStatus*>(
               &_ProposalStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ProposalStatus& a, ProposalStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ProposalStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProposalStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProposalStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProposalStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProposalStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProposalStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProposalStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.config.v2.ProposalStatus";
  }
  protected:
  explicit ProposalStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kRollbackValuesFieldNumber = 5,
    kPhasesFieldNumber = 1,
    kPrevIndexFieldNumber = 2,
    kNextIndexFieldNumber = 3,
    kRollbackIndexFieldNumber = 4,
  };
  // map<string, .onos.config.v2.PathValue> rollback_values = 5;
  int rollback_values_size() const;
  private:
  int _internal_rollback_values_size() const;
  public:
  void clear_rollback_values();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::config::v2::PathValue >&
      _internal_rollback_values() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::config::v2::PathValue >*
      _internal_mutable_rollback_values();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::config::v2::PathValue >&
      rollback_values() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::config::v2::PathValue >*
      mutable_rollback_values();

  // .onos.config.v2.ProposalPhases phases = 1 [(.gogoproto.nullable) = false];
  bool has_phases() const;
  private:
  bool _internal_has_phases() const;
  public:
  void clear_phases();
  const ::onos::config::v2::ProposalPhases& phases() const;
  PROTOBUF_NODISCARD ::onos::config::v2::ProposalPhases* release_phases();
  ::onos::config::v2::ProposalPhases* mutable_phases();
  void set_allocated_phases(::onos::config::v2::ProposalPhases* phases);
  private:
  const ::onos::config::v2::ProposalPhases& _internal_phases() const;
  ::onos::config::v2::ProposalPhases* _internal_mutable_phases();
  public:
  void unsafe_arena_set_allocated_phases(
      ::onos::config::v2::ProposalPhases* phases);
  ::onos::config::v2::ProposalPhases* unsafe_arena_release_phases();

  // uint64 prev_index = 2 [(.gogoproto.casttype) = "Index"];
  void clear_prev_index();
  uint64_t prev_index() const;
  void set_prev_index(uint64_t value);
  private:
  uint64_t _internal_prev_index() const;
  void _internal_set_prev_index(uint64_t value);
  public:

  // uint64 next_index = 3 [(.gogoproto.casttype) = "Index"];
  void clear_next_index();
  uint64_t next_index() const;
  void set_next_index(uint64_t value);
  private:
  uint64_t _internal_next_index() const;
  void _internal_set_next_index(uint64_t value);
  public:

  // uint64 rollback_index = 4 [(.gogoproto.casttype) = "Index"];
  void clear_rollback_index();
  uint64_t rollback_index() const;
  void set_rollback_index(uint64_t value);
  private:
  uint64_t _internal_rollback_index() const;
  void _internal_set_rollback_index(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.config.v2.ProposalStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ProposalStatus_RollbackValuesEntry_DoNotUse,
      std::string, ::onos::config::v2::PathValue,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> rollback_values_;
  ::onos::config::v2::ProposalPhases* phases_;
  uint64_t prev_index_;
  uint64_t next_index_;
  uint64_t rollback_index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fconfig_2fv2_2fproposal_2eproto;
};
// -------------------------------------------------------------------

class ProposalPhases final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.config.v2.ProposalPhases) */ {
 public:
  inline ProposalPhases() : ProposalPhases(nullptr) {}
  ~ProposalPhases() override;
  explicit constexpr ProposalPhases(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProposalPhases(const ProposalPhases& from);
  ProposalPhases(ProposalPhases&& from) noexcept
    : ProposalPhases() {
    *this = ::std::move(from);
  }

  inline ProposalPhases& operator=(const ProposalPhases& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProposalPhases& operator=(ProposalPhases&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProposalPhases& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProposalPhases* internal_default_instance() {
    return reinterpret_cast<const ProposalPhases*>(
               &_ProposalPhases_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ProposalPhases& a, ProposalPhases& b) {
    a.Swap(&b);
  }
  inline void Swap(ProposalPhases* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProposalPhases* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProposalPhases* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProposalPhases>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProposalPhases& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProposalPhases& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProposalPhases* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.config.v2.ProposalPhases";
  }
  protected:
  explicit ProposalPhases(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInitializeFieldNumber = 1,
    kValidateFieldNumber = 2,
    kCommitFieldNumber = 3,
    kApplyFieldNumber = 4,
    kAbortFieldNumber = 5,
  };
  // .onos.config.v2.ProposalInitializePhase initialize = 1;
  bool has_initialize() const;
  private:
  bool _internal_has_initialize() const;
  public:
  void clear_initialize();
  const ::onos::config::v2::ProposalInitializePhase& initialize() const;
  PROTOBUF_NODISCARD ::onos::config::v2::ProposalInitializePhase* release_initialize();
  ::onos::config::v2::ProposalInitializePhase* mutable_initialize();
  void set_allocated_initialize(::onos::config::v2::ProposalInitializePhase* initialize);
  private:
  const ::onos::config::v2::ProposalInitializePhase& _internal_initialize() const;
  ::onos::config::v2::ProposalInitializePhase* _internal_mutable_initialize();
  public:
  void unsafe_arena_set_allocated_initialize(
      ::onos::config::v2::ProposalInitializePhase* initialize);
  ::onos::config::v2::ProposalInitializePhase* unsafe_arena_release_initialize();

  // .onos.config.v2.ProposalValidatePhase validate = 2;
  bool has_validate() const;
  private:
  bool _internal_has_validate() const;
  public:
  void clear_validate();
  const ::onos::config::v2::ProposalValidatePhase& validate() const;
  PROTOBUF_NODISCARD ::onos::config::v2::ProposalValidatePhase* release_validate();
  ::onos::config::v2::ProposalValidatePhase* mutable_validate();
  void set_allocated_validate(::onos::config::v2::ProposalValidatePhase* validate);
  private:
  const ::onos::config::v2::ProposalValidatePhase& _internal_validate() const;
  ::onos::config::v2::ProposalValidatePhase* _internal_mutable_validate();
  public:
  void unsafe_arena_set_allocated_validate(
      ::onos::config::v2::ProposalValidatePhase* validate);
  ::onos::config::v2::ProposalValidatePhase* unsafe_arena_release_validate();

  // .onos.config.v2.ProposalCommitPhase commit = 3;
  bool has_commit() const;
  private:
  bool _internal_has_commit() const;
  public:
  void clear_commit();
  const ::onos::config::v2::ProposalCommitPhase& commit() const;
  PROTOBUF_NODISCARD ::onos::config::v2::ProposalCommitPhase* release_commit();
  ::onos::config::v2::ProposalCommitPhase* mutable_commit();
  void set_allocated_commit(::onos::config::v2::ProposalCommitPhase* commit);
  private:
  const ::onos::config::v2::ProposalCommitPhase& _internal_commit() const;
  ::onos::config::v2::ProposalCommitPhase* _internal_mutable_commit();
  public:
  void unsafe_arena_set_allocated_commit(
      ::onos::config::v2::ProposalCommitPhase* commit);
  ::onos::config::v2::ProposalCommitPhase* unsafe_arena_release_commit();

  // .onos.config.v2.ProposalApplyPhase apply = 4;
  bool has_apply() const;
  private:
  bool _internal_has_apply() const;
  public:
  void clear_apply();
  const ::onos::config::v2::ProposalApplyPhase& apply() const;
  PROTOBUF_NODISCARD ::onos::config::v2::ProposalApplyPhase* release_apply();
  ::onos::config::v2::ProposalApplyPhase* mutable_apply();
  void set_allocated_apply(::onos::config::v2::ProposalApplyPhase* apply);
  private:
  const ::onos::config::v2::ProposalApplyPhase& _internal_apply() const;
  ::onos::config::v2::ProposalApplyPhase* _internal_mutable_apply();
  public:
  void unsafe_arena_set_allocated_apply(
      ::onos::config::v2::ProposalApplyPhase* apply);
  ::onos::config::v2::ProposalApplyPhase* unsafe_arena_release_apply();

  // .onos.config.v2.ProposalAbortPhase abort = 5;
  bool has_abort() const;
  private:
  bool _internal_has_abort() const;
  public:
  void clear_abort();
  const ::onos::config::v2::ProposalAbortPhase& abort() const;
  PROTOBUF_NODISCARD ::onos::config::v2::ProposalAbortPhase* release_abort();
  ::onos::config::v2::ProposalAbortPhase* mutable_abort();
  void set_allocated_abort(::onos::config::v2::ProposalAbortPhase* abort);
  private:
  const ::onos::config::v2::ProposalAbortPhase& _internal_abort() const;
  ::onos::config::v2::ProposalAbortPhase* _internal_mutable_abort();
  public:
  void unsafe_arena_set_allocated_abort(
      ::onos::config::v2::ProposalAbortPhase* abort);
  ::onos::config::v2::ProposalAbortPhase* unsafe_arena_release_abort();

  // @@protoc_insertion_point(class_scope:onos.config.v2.ProposalPhases)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::config::v2::ProposalInitializePhase* initialize_;
  ::onos::config::v2::ProposalValidatePhase* validate_;
  ::onos::config::v2::ProposalCommitPhase* commit_;
  ::onos::config::v2::ProposalApplyPhase* apply_;
  ::onos::config::v2::ProposalAbortPhase* abort_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fconfig_2fv2_2fproposal_2eproto;
};
// -------------------------------------------------------------------

class ProposalPhaseStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.config.v2.ProposalPhaseStatus) */ {
 public:
  inline ProposalPhaseStatus() : ProposalPhaseStatus(nullptr) {}
  ~ProposalPhaseStatus() override;
  explicit constexpr ProposalPhaseStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProposalPhaseStatus(const ProposalPhaseStatus& from);
  ProposalPhaseStatus(ProposalPhaseStatus&& from) noexcept
    : ProposalPhaseStatus() {
    *this = ::std::move(from);
  }

  inline ProposalPhaseStatus& operator=(const ProposalPhaseStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProposalPhaseStatus& operator=(ProposalPhaseStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProposalPhaseStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProposalPhaseStatus* internal_default_instance() {
    return reinterpret_cast<const ProposalPhaseStatus*>(
               &_ProposalPhaseStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ProposalPhaseStatus& a, ProposalPhaseStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ProposalPhaseStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProposalPhaseStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProposalPhaseStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProposalPhaseStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProposalPhaseStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProposalPhaseStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProposalPhaseStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.config.v2.ProposalPhaseStatus";
  }
  protected:
  explicit ProposalPhaseStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartFieldNumber = 1,
    kEndFieldNumber = 2,
  };
  // .google.protobuf.Timestamp start = 1 [(.gogoproto.stdtime) = true];
  bool has_start() const;
  private:
  bool _internal_has_start() const;
  public:
  void clear_start();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& start() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_start();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_start();
  void set_allocated_start(::PROTOBUF_NAMESPACE_ID::Timestamp* start);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_start() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_start();
  public:
  void unsafe_arena_set_allocated_start(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* start);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_start();

  // .google.protobuf.Timestamp end = 2 [(.gogoproto.stdtime) = true];
  bool has_end() const;
  private:
  bool _internal_has_end() const;
  public:
  void clear_end();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& end() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_end();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_end();
  void set_allocated_end(::PROTOBUF_NAMESPACE_ID::Timestamp* end);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_end() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_end();
  public:
  void unsafe_arena_set_allocated_end(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* end);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_end();

  // @@protoc_insertion_point(class_scope:onos.config.v2.ProposalPhaseStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* start_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* end_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fconfig_2fv2_2fproposal_2eproto;
};
// -------------------------------------------------------------------

class ProposalInitializePhase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.config.v2.ProposalInitializePhase) */ {
 public:
  inline ProposalInitializePhase() : ProposalInitializePhase(nullptr) {}
  ~ProposalInitializePhase() override;
  explicit constexpr ProposalInitializePhase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProposalInitializePhase(const ProposalInitializePhase& from);
  ProposalInitializePhase(ProposalInitializePhase&& from) noexcept
    : ProposalInitializePhase() {
    *this = ::std::move(from);
  }

  inline ProposalInitializePhase& operator=(const ProposalInitializePhase& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProposalInitializePhase& operator=(ProposalInitializePhase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProposalInitializePhase& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProposalInitializePhase* internal_default_instance() {
    return reinterpret_cast<const ProposalInitializePhase*>(
               &_ProposalInitializePhase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ProposalInitializePhase& a, ProposalInitializePhase& b) {
    a.Swap(&b);
  }
  inline void Swap(ProposalInitializePhase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProposalInitializePhase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProposalInitializePhase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProposalInitializePhase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProposalInitializePhase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProposalInitializePhase& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProposalInitializePhase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.config.v2.ProposalInitializePhase";
  }
  protected:
  explicit ProposalInitializePhase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ProposalInitializePhase_State State;
  static constexpr State INITIALIZING =
    ProposalInitializePhase_State_INITIALIZING;
  static constexpr State INITIALIZED =
    ProposalInitializePhase_State_INITIALIZED;
  static inline bool State_IsValid(int value) {
    return ProposalInitializePhase_State_IsValid(value);
  }
  static constexpr State State_MIN =
    ProposalInitializePhase_State_State_MIN;
  static constexpr State State_MAX =
    ProposalInitializePhase_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    ProposalInitializePhase_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return ProposalInitializePhase_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return ProposalInitializePhase_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return ProposalInitializePhase_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // .onos.config.v2.ProposalPhaseStatus status = 1 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::onos::config::v2::ProposalPhaseStatus& status() const;
  PROTOBUF_NODISCARD ::onos::config::v2::ProposalPhaseStatus* release_status();
  ::onos::config::v2::ProposalPhaseStatus* mutable_status();
  void set_allocated_status(::onos::config::v2::ProposalPhaseStatus* status);
  private:
  const ::onos::config::v2::ProposalPhaseStatus& _internal_status() const;
  ::onos::config::v2::ProposalPhaseStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::onos::config::v2::ProposalPhaseStatus* status);
  ::onos::config::v2::ProposalPhaseStatus* unsafe_arena_release_status();

  // .onos.config.v2.ProposalInitializePhase.State state = 2;
  void clear_state();
  ::onos::config::v2::ProposalInitializePhase_State state() const;
  void set_state(::onos::config::v2::ProposalInitializePhase_State value);
  private:
  ::onos::config::v2::ProposalInitializePhase_State _internal_state() const;
  void _internal_set_state(::onos::config::v2::ProposalInitializePhase_State value);
  public:

  // @@protoc_insertion_point(class_scope:onos.config.v2.ProposalInitializePhase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::config::v2::ProposalPhaseStatus* status_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fconfig_2fv2_2fproposal_2eproto;
};
// -------------------------------------------------------------------

class ProposalValidatePhase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.config.v2.ProposalValidatePhase) */ {
 public:
  inline ProposalValidatePhase() : ProposalValidatePhase(nullptr) {}
  ~ProposalValidatePhase() override;
  explicit constexpr ProposalValidatePhase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProposalValidatePhase(const ProposalValidatePhase& from);
  ProposalValidatePhase(ProposalValidatePhase&& from) noexcept
    : ProposalValidatePhase() {
    *this = ::std::move(from);
  }

  inline ProposalValidatePhase& operator=(const ProposalValidatePhase& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProposalValidatePhase& operator=(ProposalValidatePhase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProposalValidatePhase& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProposalValidatePhase* internal_default_instance() {
    return reinterpret_cast<const ProposalValidatePhase*>(
               &_ProposalValidatePhase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ProposalValidatePhase& a, ProposalValidatePhase& b) {
    a.Swap(&b);
  }
  inline void Swap(ProposalValidatePhase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProposalValidatePhase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProposalValidatePhase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProposalValidatePhase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProposalValidatePhase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProposalValidatePhase& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProposalValidatePhase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.config.v2.ProposalValidatePhase";
  }
  protected:
  explicit ProposalValidatePhase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ProposalValidatePhase_State State;
  static constexpr State VALIDATING =
    ProposalValidatePhase_State_VALIDATING;
  static constexpr State VALIDATED =
    ProposalValidatePhase_State_VALIDATED;
  static constexpr State FAILED =
    ProposalValidatePhase_State_FAILED;
  static inline bool State_IsValid(int value) {
    return ProposalValidatePhase_State_IsValid(value);
  }
  static constexpr State State_MIN =
    ProposalValidatePhase_State_State_MIN;
  static constexpr State State_MAX =
    ProposalValidatePhase_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    ProposalValidatePhase_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return ProposalValidatePhase_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return ProposalValidatePhase_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return ProposalValidatePhase_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kFailureFieldNumber = 3,
    kStateFieldNumber = 2,
  };
  // .onos.config.v2.ProposalPhaseStatus status = 1 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::onos::config::v2::ProposalPhaseStatus& status() const;
  PROTOBUF_NODISCARD ::onos::config::v2::ProposalPhaseStatus* release_status();
  ::onos::config::v2::ProposalPhaseStatus* mutable_status();
  void set_allocated_status(::onos::config::v2::ProposalPhaseStatus* status);
  private:
  const ::onos::config::v2::ProposalPhaseStatus& _internal_status() const;
  ::onos::config::v2::ProposalPhaseStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::onos::config::v2::ProposalPhaseStatus* status);
  ::onos::config::v2::ProposalPhaseStatus* unsafe_arena_release_status();

  // .onos.config.v2.Failure failure = 3;
  bool has_failure() const;
  private:
  bool _internal_has_failure() const;
  public:
  void clear_failure();
  const ::onos::config::v2::Failure& failure() const;
  PROTOBUF_NODISCARD ::onos::config::v2::Failure* release_failure();
  ::onos::config::v2::Failure* mutable_failure();
  void set_allocated_failure(::onos::config::v2::Failure* failure);
  private:
  const ::onos::config::v2::Failure& _internal_failure() const;
  ::onos::config::v2::Failure* _internal_mutable_failure();
  public:
  void unsafe_arena_set_allocated_failure(
      ::onos::config::v2::Failure* failure);
  ::onos::config::v2::Failure* unsafe_arena_release_failure();

  // .onos.config.v2.ProposalValidatePhase.State state = 2;
  void clear_state();
  ::onos::config::v2::ProposalValidatePhase_State state() const;
  void set_state(::onos::config::v2::ProposalValidatePhase_State value);
  private:
  ::onos::config::v2::ProposalValidatePhase_State _internal_state() const;
  void _internal_set_state(::onos::config::v2::ProposalValidatePhase_State value);
  public:

  // @@protoc_insertion_point(class_scope:onos.config.v2.ProposalValidatePhase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::config::v2::ProposalPhaseStatus* status_;
  ::onos::config::v2::Failure* failure_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fconfig_2fv2_2fproposal_2eproto;
};
// -------------------------------------------------------------------

class ProposalCommitPhase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.config.v2.ProposalCommitPhase) */ {
 public:
  inline ProposalCommitPhase() : ProposalCommitPhase(nullptr) {}
  ~ProposalCommitPhase() override;
  explicit constexpr ProposalCommitPhase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProposalCommitPhase(const ProposalCommitPhase& from);
  ProposalCommitPhase(ProposalCommitPhase&& from) noexcept
    : ProposalCommitPhase() {
    *this = ::std::move(from);
  }

  inline ProposalCommitPhase& operator=(const ProposalCommitPhase& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProposalCommitPhase& operator=(ProposalCommitPhase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProposalCommitPhase& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProposalCommitPhase* internal_default_instance() {
    return reinterpret_cast<const ProposalCommitPhase*>(
               &_ProposalCommitPhase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ProposalCommitPhase& a, ProposalCommitPhase& b) {
    a.Swap(&b);
  }
  inline void Swap(ProposalCommitPhase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProposalCommitPhase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProposalCommitPhase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProposalCommitPhase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProposalCommitPhase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProposalCommitPhase& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProposalCommitPhase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.config.v2.ProposalCommitPhase";
  }
  protected:
  explicit ProposalCommitPhase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ProposalCommitPhase_State State;
  static constexpr State COMMITTING =
    ProposalCommitPhase_State_COMMITTING;
  static constexpr State COMMITTED =
    ProposalCommitPhase_State_COMMITTED;
  static inline bool State_IsValid(int value) {
    return ProposalCommitPhase_State_IsValid(value);
  }
  static constexpr State State_MIN =
    ProposalCommitPhase_State_State_MIN;
  static constexpr State State_MAX =
    ProposalCommitPhase_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    ProposalCommitPhase_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return ProposalCommitPhase_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return ProposalCommitPhase_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return ProposalCommitPhase_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // .onos.config.v2.ProposalPhaseStatus status = 1 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::onos::config::v2::ProposalPhaseStatus& status() const;
  PROTOBUF_NODISCARD ::onos::config::v2::ProposalPhaseStatus* release_status();
  ::onos::config::v2::ProposalPhaseStatus* mutable_status();
  void set_allocated_status(::onos::config::v2::ProposalPhaseStatus* status);
  private:
  const ::onos::config::v2::ProposalPhaseStatus& _internal_status() const;
  ::onos::config::v2::ProposalPhaseStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::onos::config::v2::ProposalPhaseStatus* status);
  ::onos::config::v2::ProposalPhaseStatus* unsafe_arena_release_status();

  // .onos.config.v2.ProposalCommitPhase.State state = 2;
  void clear_state();
  ::onos::config::v2::ProposalCommitPhase_State state() const;
  void set_state(::onos::config::v2::ProposalCommitPhase_State value);
  private:
  ::onos::config::v2::ProposalCommitPhase_State _internal_state() const;
  void _internal_set_state(::onos::config::v2::ProposalCommitPhase_State value);
  public:

  // @@protoc_insertion_point(class_scope:onos.config.v2.ProposalCommitPhase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::config::v2::ProposalPhaseStatus* status_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fconfig_2fv2_2fproposal_2eproto;
};
// -------------------------------------------------------------------

class ProposalApplyPhase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.config.v2.ProposalApplyPhase) */ {
 public:
  inline ProposalApplyPhase() : ProposalApplyPhase(nullptr) {}
  ~ProposalApplyPhase() override;
  explicit constexpr ProposalApplyPhase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProposalApplyPhase(const ProposalApplyPhase& from);
  ProposalApplyPhase(ProposalApplyPhase&& from) noexcept
    : ProposalApplyPhase() {
    *this = ::std::move(from);
  }

  inline ProposalApplyPhase& operator=(const ProposalApplyPhase& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProposalApplyPhase& operator=(ProposalApplyPhase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProposalApplyPhase& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProposalApplyPhase* internal_default_instance() {
    return reinterpret_cast<const ProposalApplyPhase*>(
               &_ProposalApplyPhase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ProposalApplyPhase& a, ProposalApplyPhase& b) {
    a.Swap(&b);
  }
  inline void Swap(ProposalApplyPhase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProposalApplyPhase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProposalApplyPhase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProposalApplyPhase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProposalApplyPhase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProposalApplyPhase& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProposalApplyPhase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.config.v2.ProposalApplyPhase";
  }
  protected:
  explicit ProposalApplyPhase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ProposalApplyPhase_State State;
  static constexpr State APPLYING =
    ProposalApplyPhase_State_APPLYING;
  static constexpr State APPLIED =
    ProposalApplyPhase_State_APPLIED;
  static constexpr State FAILED =
    ProposalApplyPhase_State_FAILED;
  static inline bool State_IsValid(int value) {
    return ProposalApplyPhase_State_IsValid(value);
  }
  static constexpr State State_MIN =
    ProposalApplyPhase_State_State_MIN;
  static constexpr State State_MAX =
    ProposalApplyPhase_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    ProposalApplyPhase_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return ProposalApplyPhase_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return ProposalApplyPhase_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return ProposalApplyPhase_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kFailureFieldNumber = 4,
    kTermFieldNumber = 3,
    kStateFieldNumber = 2,
  };
  // .onos.config.v2.ProposalPhaseStatus status = 1 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::onos::config::v2::ProposalPhaseStatus& status() const;
  PROTOBUF_NODISCARD ::onos::config::v2::ProposalPhaseStatus* release_status();
  ::onos::config::v2::ProposalPhaseStatus* mutable_status();
  void set_allocated_status(::onos::config::v2::ProposalPhaseStatus* status);
  private:
  const ::onos::config::v2::ProposalPhaseStatus& _internal_status() const;
  ::onos::config::v2::ProposalPhaseStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::onos::config::v2::ProposalPhaseStatus* status);
  ::onos::config::v2::ProposalPhaseStatus* unsafe_arena_release_status();

  // .onos.config.v2.Failure failure = 4;
  bool has_failure() const;
  private:
  bool _internal_has_failure() const;
  public:
  void clear_failure();
  const ::onos::config::v2::Failure& failure() const;
  PROTOBUF_NODISCARD ::onos::config::v2::Failure* release_failure();
  ::onos::config::v2::Failure* mutable_failure();
  void set_allocated_failure(::onos::config::v2::Failure* failure);
  private:
  const ::onos::config::v2::Failure& _internal_failure() const;
  ::onos::config::v2::Failure* _internal_mutable_failure();
  public:
  void unsafe_arena_set_allocated_failure(
      ::onos::config::v2::Failure* failure);
  ::onos::config::v2::Failure* unsafe_arena_release_failure();

  // uint64 term = 3 [(.gogoproto.casttype) = "MastershipTerm"];
  void clear_term();
  uint64_t term() const;
  void set_term(uint64_t value);
  private:
  uint64_t _internal_term() const;
  void _internal_set_term(uint64_t value);
  public:

  // .onos.config.v2.ProposalApplyPhase.State state = 2;
  void clear_state();
  ::onos::config::v2::ProposalApplyPhase_State state() const;
  void set_state(::onos::config::v2::ProposalApplyPhase_State value);
  private:
  ::onos::config::v2::ProposalApplyPhase_State _internal_state() const;
  void _internal_set_state(::onos::config::v2::ProposalApplyPhase_State value);
  public:

  // @@protoc_insertion_point(class_scope:onos.config.v2.ProposalApplyPhase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::config::v2::ProposalPhaseStatus* status_;
  ::onos::config::v2::Failure* failure_;
  uint64_t term_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fconfig_2fv2_2fproposal_2eproto;
};
// -------------------------------------------------------------------

class ProposalAbortPhase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.config.v2.ProposalAbortPhase) */ {
 public:
  inline ProposalAbortPhase() : ProposalAbortPhase(nullptr) {}
  ~ProposalAbortPhase() override;
  explicit constexpr ProposalAbortPhase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProposalAbortPhase(const ProposalAbortPhase& from);
  ProposalAbortPhase(ProposalAbortPhase&& from) noexcept
    : ProposalAbortPhase() {
    *this = ::std::move(from);
  }

  inline ProposalAbortPhase& operator=(const ProposalAbortPhase& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProposalAbortPhase& operator=(ProposalAbortPhase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProposalAbortPhase& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProposalAbortPhase* internal_default_instance() {
    return reinterpret_cast<const ProposalAbortPhase*>(
               &_ProposalAbortPhase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ProposalAbortPhase& a, ProposalAbortPhase& b) {
    a.Swap(&b);
  }
  inline void Swap(ProposalAbortPhase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProposalAbortPhase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProposalAbortPhase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProposalAbortPhase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProposalAbortPhase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProposalAbortPhase& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProposalAbortPhase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.config.v2.ProposalAbortPhase";
  }
  protected:
  explicit ProposalAbortPhase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ProposalAbortPhase_State State;
  static constexpr State ABORTING =
    ProposalAbortPhase_State_ABORTING;
  static constexpr State ABORTED =
    ProposalAbortPhase_State_ABORTED;
  static inline bool State_IsValid(int value) {
    return ProposalAbortPhase_State_IsValid(value);
  }
  static constexpr State State_MIN =
    ProposalAbortPhase_State_State_MIN;
  static constexpr State State_MAX =
    ProposalAbortPhase_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    ProposalAbortPhase_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return ProposalAbortPhase_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return ProposalAbortPhase_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return ProposalAbortPhase_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
    kStateFieldNumber = 2,
  };
  // .onos.config.v2.ProposalPhaseStatus status = 1 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::onos::config::v2::ProposalPhaseStatus& status() const;
  PROTOBUF_NODISCARD ::onos::config::v2::ProposalPhaseStatus* release_status();
  ::onos::config::v2::ProposalPhaseStatus* mutable_status();
  void set_allocated_status(::onos::config::v2::ProposalPhaseStatus* status);
  private:
  const ::onos::config::v2::ProposalPhaseStatus& _internal_status() const;
  ::onos::config::v2::ProposalPhaseStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::onos::config::v2::ProposalPhaseStatus* status);
  ::onos::config::v2::ProposalPhaseStatus* unsafe_arena_release_status();

  // .onos.config.v2.ProposalAbortPhase.State state = 2;
  void clear_state();
  ::onos::config::v2::ProposalAbortPhase_State state() const;
  void set_state(::onos::config::v2::ProposalAbortPhase_State value);
  private:
  ::onos::config::v2::ProposalAbortPhase_State _internal_state() const;
  void _internal_set_state(::onos::config::v2::ProposalAbortPhase_State value);
  public:

  // @@protoc_insertion_point(class_scope:onos.config.v2.ProposalAbortPhase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::config::v2::ProposalPhaseStatus* status_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fconfig_2fv2_2fproposal_2eproto;
};
// -------------------------------------------------------------------

class ProposalEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.config.v2.ProposalEvent) */ {
 public:
  inline ProposalEvent() : ProposalEvent(nullptr) {}
  ~ProposalEvent() override;
  explicit constexpr ProposalEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProposalEvent(const ProposalEvent& from);
  ProposalEvent(ProposalEvent&& from) noexcept
    : ProposalEvent() {
    *this = ::std::move(from);
  }

  inline ProposalEvent& operator=(const ProposalEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProposalEvent& operator=(ProposalEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProposalEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProposalEvent* internal_default_instance() {
    return reinterpret_cast<const ProposalEvent*>(
               &_ProposalEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ProposalEvent& a, ProposalEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(ProposalEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProposalEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProposalEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProposalEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProposalEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProposalEvent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProposalEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.config.v2.ProposalEvent";
  }
  protected:
  explicit ProposalEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ProposalEvent_EventType EventType;
  static constexpr EventType UNKNOWN =
    ProposalEvent_EventType_UNKNOWN;
  static constexpr EventType CREATED =
    ProposalEvent_EventType_CREATED;
  static constexpr EventType UPDATED =
    ProposalEvent_EventType_UPDATED;
  static constexpr EventType DELETED =
    ProposalEvent_EventType_DELETED;
  static constexpr EventType REPLAYED =
    ProposalEvent_EventType_REPLAYED;
  static inline bool EventType_IsValid(int value) {
    return ProposalEvent_EventType_IsValid(value);
  }
  static constexpr EventType EventType_MIN =
    ProposalEvent_EventType_EventType_MIN;
  static constexpr EventType EventType_MAX =
    ProposalEvent_EventType_EventType_MAX;
  static constexpr int EventType_ARRAYSIZE =
    ProposalEvent_EventType_EventType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EventType_descriptor() {
    return ProposalEvent_EventType_descriptor();
  }
  template<typename T>
  static inline const std::string& EventType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EventType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EventType_Name.");
    return ProposalEvent_EventType_Name(enum_t_value);
  }
  static inline bool EventType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EventType* value) {
    return ProposalEvent_EventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kProposalFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // .onos.config.v2.Proposal proposal = 2 [(.gogoproto.nullable) = false];
  bool has_proposal() const;
  private:
  bool _internal_has_proposal() const;
  public:
  void clear_proposal();
  const ::onos::config::v2::Proposal& proposal() const;
  PROTOBUF_NODISCARD ::onos::config::v2::Proposal* release_proposal();
  ::onos::config::v2::Proposal* mutable_proposal();
  void set_allocated_proposal(::onos::config::v2::Proposal* proposal);
  private:
  const ::onos::config::v2::Proposal& _internal_proposal() const;
  ::onos::config::v2::Proposal* _internal_mutable_proposal();
  public:
  void unsafe_arena_set_allocated_proposal(
      ::onos::config::v2::Proposal* proposal);
  ::onos::config::v2::Proposal* unsafe_arena_release_proposal();

  // .onos.config.v2.ProposalEvent.EventType type = 1;
  void clear_type();
  ::onos::config::v2::ProposalEvent_EventType type() const;
  void set_type(::onos::config::v2::ProposalEvent_EventType value);
  private:
  ::onos::config::v2::ProposalEvent_EventType _internal_type() const;
  void _internal_set_type(::onos::config::v2::ProposalEvent_EventType value);
  public:

  // @@protoc_insertion_point(class_scope:onos.config.v2.ProposalEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::config::v2::Proposal* proposal_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fconfig_2fv2_2fproposal_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Proposal

// .onos.config.v2.ObjectMeta meta = 1 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
inline bool Proposal::_internal_has_meta() const {
  return this != internal_default_instance() && meta_ != nullptr;
}
inline bool Proposal::has_meta() const {
  return _internal_has_meta();
}
inline const ::onos::config::v2::ObjectMeta& Proposal::_internal_meta() const {
  const ::onos::config::v2::ObjectMeta* p = meta_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::config::v2::ObjectMeta&>(
      ::onos::config::v2::_ObjectMeta_default_instance_);
}
inline const ::onos::config::v2::ObjectMeta& Proposal::meta() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.Proposal.meta)
  return _internal_meta();
}
inline void Proposal::unsafe_arena_set_allocated_meta(
    ::onos::config::v2::ObjectMeta* meta) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.config.v2.Proposal.meta)
}
inline ::onos::config::v2::ObjectMeta* Proposal::release_meta() {
  
  ::onos::config::v2::ObjectMeta* temp = meta_;
  meta_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::config::v2::ObjectMeta* Proposal::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:onos.config.v2.Proposal.meta)
  
  ::onos::config::v2::ObjectMeta* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::onos::config::v2::ObjectMeta* Proposal::_internal_mutable_meta() {
  
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::config::v2::ObjectMeta>(GetArenaForAllocation());
    meta_ = p;
  }
  return meta_;
}
inline ::onos::config::v2::ObjectMeta* Proposal::mutable_meta() {
  ::onos::config::v2::ObjectMeta* _msg = _internal_mutable_meta();
  // @@protoc_insertion_point(field_mutable:onos.config.v2.Proposal.meta)
  return _msg;
}
inline void Proposal::set_allocated_meta(::onos::config::v2::ObjectMeta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta));
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:onos.config.v2.Proposal.meta)
}

// string id = 2 [(.gogoproto.customname) = "ID", (.gogoproto.casttype) = "ProposalID"];
inline void Proposal::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Proposal::id() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.Proposal.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Proposal::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.config.v2.Proposal.id)
}
inline std::string* Proposal::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:onos.config.v2.Proposal.id)
  return _s;
}
inline const std::string& Proposal::_internal_id() const {
  return id_.Get();
}
inline void Proposal::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Proposal::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Proposal::release_id() {
  // @@protoc_insertion_point(field_release:onos.config.v2.Proposal.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Proposal::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.config.v2.Proposal.id)
}

// string target_id = 3 [(.gogoproto.customname) = "TargetID", (.gogoproto.casttype) = "TargetID"];
inline void Proposal::clear_target_id() {
  target_id_.ClearToEmpty();
}
inline const std::string& Proposal::target_id() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.Proposal.target_id)
  return _internal_target_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Proposal::set_target_id(ArgT0&& arg0, ArgT... args) {
 
 target_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.config.v2.Proposal.target_id)
}
inline std::string* Proposal::mutable_target_id() {
  std::string* _s = _internal_mutable_target_id();
  // @@protoc_insertion_point(field_mutable:onos.config.v2.Proposal.target_id)
  return _s;
}
inline const std::string& Proposal::_internal_target_id() const {
  return target_id_.Get();
}
inline void Proposal::_internal_set_target_id(const std::string& value) {
  
  target_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Proposal::_internal_mutable_target_id() {
  
  return target_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Proposal::release_target_id() {
  // @@protoc_insertion_point(field_release:onos.config.v2.Proposal.target_id)
  return target_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Proposal::set_allocated_target_id(std::string* target_id) {
  if (target_id != nullptr) {
    
  } else {
    
  }
  target_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (target_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    target_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.config.v2.Proposal.target_id)
}

// uint64 transaction_index = 4 [(.gogoproto.casttype) = "Index"];
inline void Proposal::clear_transaction_index() {
  transaction_index_ = uint64_t{0u};
}
inline uint64_t Proposal::_internal_transaction_index() const {
  return transaction_index_;
}
inline uint64_t Proposal::transaction_index() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.Proposal.transaction_index)
  return _internal_transaction_index();
}
inline void Proposal::_internal_set_transaction_index(uint64_t value) {
  
  transaction_index_ = value;
}
inline void Proposal::set_transaction_index(uint64_t value) {
  _internal_set_transaction_index(value);
  // @@protoc_insertion_point(field_set:onos.config.v2.Proposal.transaction_index)
}

// .onos.config.v2.ChangeProposal change = 5;
inline bool Proposal::_internal_has_change() const {
  return details_case() == kChange;
}
inline bool Proposal::has_change() const {
  return _internal_has_change();
}
inline void Proposal::set_has_change() {
  _oneof_case_[0] = kChange;
}
inline void Proposal::clear_change() {
  if (_internal_has_change()) {
    if (GetArenaForAllocation() == nullptr) {
      delete details_.change_;
    }
    clear_has_details();
  }
}
inline ::onos::config::v2::ChangeProposal* Proposal::release_change() {
  // @@protoc_insertion_point(field_release:onos.config.v2.Proposal.change)
  if (_internal_has_change()) {
    clear_has_details();
      ::onos::config::v2::ChangeProposal* temp = details_.change_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    details_.change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::onos::config::v2::ChangeProposal& Proposal::_internal_change() const {
  return _internal_has_change()
      ? *details_.change_
      : reinterpret_cast< ::onos::config::v2::ChangeProposal&>(::onos::config::v2::_ChangeProposal_default_instance_);
}
inline const ::onos::config::v2::ChangeProposal& Proposal::change() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.Proposal.change)
  return _internal_change();
}
inline ::onos::config::v2::ChangeProposal* Proposal::unsafe_arena_release_change() {
  // @@protoc_insertion_point(field_unsafe_arena_release:onos.config.v2.Proposal.change)
  if (_internal_has_change()) {
    clear_has_details();
    ::onos::config::v2::ChangeProposal* temp = details_.change_;
    details_.change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Proposal::unsafe_arena_set_allocated_change(::onos::config::v2::ChangeProposal* change) {
  clear_details();
  if (change) {
    set_has_change();
    details_.change_ = change;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.config.v2.Proposal.change)
}
inline ::onos::config::v2::ChangeProposal* Proposal::_internal_mutable_change() {
  if (!_internal_has_change()) {
    clear_details();
    set_has_change();
    details_.change_ = CreateMaybeMessage< ::onos::config::v2::ChangeProposal >(GetArenaForAllocation());
  }
  return details_.change_;
}
inline ::onos::config::v2::ChangeProposal* Proposal::mutable_change() {
  ::onos::config::v2::ChangeProposal* _msg = _internal_mutable_change();
  // @@protoc_insertion_point(field_mutable:onos.config.v2.Proposal.change)
  return _msg;
}

// .onos.config.v2.RollbackProposal rollback = 6;
inline bool Proposal::_internal_has_rollback() const {
  return details_case() == kRollback;
}
inline bool Proposal::has_rollback() const {
  return _internal_has_rollback();
}
inline void Proposal::set_has_rollback() {
  _oneof_case_[0] = kRollback;
}
inline void Proposal::clear_rollback() {
  if (_internal_has_rollback()) {
    if (GetArenaForAllocation() == nullptr) {
      delete details_.rollback_;
    }
    clear_has_details();
  }
}
inline ::onos::config::v2::RollbackProposal* Proposal::release_rollback() {
  // @@protoc_insertion_point(field_release:onos.config.v2.Proposal.rollback)
  if (_internal_has_rollback()) {
    clear_has_details();
      ::onos::config::v2::RollbackProposal* temp = details_.rollback_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    details_.rollback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::onos::config::v2::RollbackProposal& Proposal::_internal_rollback() const {
  return _internal_has_rollback()
      ? *details_.rollback_
      : reinterpret_cast< ::onos::config::v2::RollbackProposal&>(::onos::config::v2::_RollbackProposal_default_instance_);
}
inline const ::onos::config::v2::RollbackProposal& Proposal::rollback() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.Proposal.rollback)
  return _internal_rollback();
}
inline ::onos::config::v2::RollbackProposal* Proposal::unsafe_arena_release_rollback() {
  // @@protoc_insertion_point(field_unsafe_arena_release:onos.config.v2.Proposal.rollback)
  if (_internal_has_rollback()) {
    clear_has_details();
    ::onos::config::v2::RollbackProposal* temp = details_.rollback_;
    details_.rollback_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Proposal::unsafe_arena_set_allocated_rollback(::onos::config::v2::RollbackProposal* rollback) {
  clear_details();
  if (rollback) {
    set_has_rollback();
    details_.rollback_ = rollback;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.config.v2.Proposal.rollback)
}
inline ::onos::config::v2::RollbackProposal* Proposal::_internal_mutable_rollback() {
  if (!_internal_has_rollback()) {
    clear_details();
    set_has_rollback();
    details_.rollback_ = CreateMaybeMessage< ::onos::config::v2::RollbackProposal >(GetArenaForAllocation());
  }
  return details_.rollback_;
}
inline ::onos::config::v2::RollbackProposal* Proposal::mutable_rollback() {
  ::onos::config::v2::RollbackProposal* _msg = _internal_mutable_rollback();
  // @@protoc_insertion_point(field_mutable:onos.config.v2.Proposal.rollback)
  return _msg;
}

// .onos.config.v2.ProposalStatus status = 7 [(.gogoproto.nullable) = false];
inline bool Proposal::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool Proposal::has_status() const {
  return _internal_has_status();
}
inline void Proposal::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::onos::config::v2::ProposalStatus& Proposal::_internal_status() const {
  const ::onos::config::v2::ProposalStatus* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::config::v2::ProposalStatus&>(
      ::onos::config::v2::_ProposalStatus_default_instance_);
}
inline const ::onos::config::v2::ProposalStatus& Proposal::status() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.Proposal.status)
  return _internal_status();
}
inline void Proposal::unsafe_arena_set_allocated_status(
    ::onos::config::v2::ProposalStatus* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.config.v2.Proposal.status)
}
inline ::onos::config::v2::ProposalStatus* Proposal::release_status() {
  
  ::onos::config::v2::ProposalStatus* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::config::v2::ProposalStatus* Proposal::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:onos.config.v2.Proposal.status)
  
  ::onos::config::v2::ProposalStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::onos::config::v2::ProposalStatus* Proposal::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::config::v2::ProposalStatus>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::onos::config::v2::ProposalStatus* Proposal::mutable_status() {
  ::onos::config::v2::ProposalStatus* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:onos.config.v2.Proposal.status)
  return _msg;
}
inline void Proposal::set_allocated_status(::onos::config::v2::ProposalStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::config::v2::ProposalStatus>::GetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:onos.config.v2.Proposal.status)
}

// .onos.config.v2.TargetTypeVersion target_info = 8 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
inline bool Proposal::_internal_has_target_info() const {
  return this != internal_default_instance() && target_info_ != nullptr;
}
inline bool Proposal::has_target_info() const {
  return _internal_has_target_info();
}
inline const ::onos::config::v2::TargetTypeVersion& Proposal::_internal_target_info() const {
  const ::onos::config::v2::TargetTypeVersion* p = target_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::config::v2::TargetTypeVersion&>(
      ::onos::config::v2::_TargetTypeVersion_default_instance_);
}
inline const ::onos::config::v2::TargetTypeVersion& Proposal::target_info() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.Proposal.target_info)
  return _internal_target_info();
}
inline void Proposal::unsafe_arena_set_allocated_target_info(
    ::onos::config::v2::TargetTypeVersion* target_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_info_);
  }
  target_info_ = target_info;
  if (target_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.config.v2.Proposal.target_info)
}
inline ::onos::config::v2::TargetTypeVersion* Proposal::release_target_info() {
  
  ::onos::config::v2::TargetTypeVersion* temp = target_info_;
  target_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::config::v2::TargetTypeVersion* Proposal::unsafe_arena_release_target_info() {
  // @@protoc_insertion_point(field_release:onos.config.v2.Proposal.target_info)
  
  ::onos::config::v2::TargetTypeVersion* temp = target_info_;
  target_info_ = nullptr;
  return temp;
}
inline ::onos::config::v2::TargetTypeVersion* Proposal::_internal_mutable_target_info() {
  
  if (target_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::config::v2::TargetTypeVersion>(GetArenaForAllocation());
    target_info_ = p;
  }
  return target_info_;
}
inline ::onos::config::v2::TargetTypeVersion* Proposal::mutable_target_info() {
  ::onos::config::v2::TargetTypeVersion* _msg = _internal_mutable_target_info();
  // @@protoc_insertion_point(field_mutable:onos.config.v2.Proposal.target_info)
  return _msg;
}
inline void Proposal::set_allocated_target_info(::onos::config::v2::TargetTypeVersion* target_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_info_);
  }
  if (target_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_info));
    if (message_arena != submessage_arena) {
      target_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_info, submessage_arena);
    }
    
  } else {
    
  }
  target_info_ = target_info;
  // @@protoc_insertion_point(field_set_allocated:onos.config.v2.Proposal.target_info)
}

inline bool Proposal::has_details() const {
  return details_case() != DETAILS_NOT_SET;
}
inline void Proposal::clear_has_details() {
  _oneof_case_[0] = DETAILS_NOT_SET;
}
inline Proposal::DetailsCase Proposal::details_case() const {
  return Proposal::DetailsCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ChangeProposal

// map<string, .onos.config.v2.PathValue> values = 1;
inline int ChangeProposal::_internal_values_size() const {
  return values_.size();
}
inline int ChangeProposal::values_size() const {
  return _internal_values_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::config::v2::PathValue >&
ChangeProposal::_internal_values() const {
  return values_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::config::v2::PathValue >&
ChangeProposal::values() const {
  // @@protoc_insertion_point(field_map:onos.config.v2.ChangeProposal.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::config::v2::PathValue >*
ChangeProposal::_internal_mutable_values() {
  return values_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::config::v2::PathValue >*
ChangeProposal::mutable_values() {
  // @@protoc_insertion_point(field_mutable_map:onos.config.v2.ChangeProposal.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// RollbackProposal

// uint64 rollback_index = 1 [(.gogoproto.casttype) = "Index"];
inline void RollbackProposal::clear_rollback_index() {
  rollback_index_ = uint64_t{0u};
}
inline uint64_t RollbackProposal::_internal_rollback_index() const {
  return rollback_index_;
}
inline uint64_t RollbackProposal::rollback_index() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.RollbackProposal.rollback_index)
  return _internal_rollback_index();
}
inline void RollbackProposal::_internal_set_rollback_index(uint64_t value) {
  
  rollback_index_ = value;
}
inline void RollbackProposal::set_rollback_index(uint64_t value) {
  _internal_set_rollback_index(value);
  // @@protoc_insertion_point(field_set:onos.config.v2.RollbackProposal.rollback_index)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ProposalStatus

// .onos.config.v2.ProposalPhases phases = 1 [(.gogoproto.nullable) = false];
inline bool ProposalStatus::_internal_has_phases() const {
  return this != internal_default_instance() && phases_ != nullptr;
}
inline bool ProposalStatus::has_phases() const {
  return _internal_has_phases();
}
inline void ProposalStatus::clear_phases() {
  if (GetArenaForAllocation() == nullptr && phases_ != nullptr) {
    delete phases_;
  }
  phases_ = nullptr;
}
inline const ::onos::config::v2::ProposalPhases& ProposalStatus::_internal_phases() const {
  const ::onos::config::v2::ProposalPhases* p = phases_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::config::v2::ProposalPhases&>(
      ::onos::config::v2::_ProposalPhases_default_instance_);
}
inline const ::onos::config::v2::ProposalPhases& ProposalStatus::phases() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.ProposalStatus.phases)
  return _internal_phases();
}
inline void ProposalStatus::unsafe_arena_set_allocated_phases(
    ::onos::config::v2::ProposalPhases* phases) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(phases_);
  }
  phases_ = phases;
  if (phases) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.config.v2.ProposalStatus.phases)
}
inline ::onos::config::v2::ProposalPhases* ProposalStatus::release_phases() {
  
  ::onos::config::v2::ProposalPhases* temp = phases_;
  phases_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::config::v2::ProposalPhases* ProposalStatus::unsafe_arena_release_phases() {
  // @@protoc_insertion_point(field_release:onos.config.v2.ProposalStatus.phases)
  
  ::onos::config::v2::ProposalPhases* temp = phases_;
  phases_ = nullptr;
  return temp;
}
inline ::onos::config::v2::ProposalPhases* ProposalStatus::_internal_mutable_phases() {
  
  if (phases_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::config::v2::ProposalPhases>(GetArenaForAllocation());
    phases_ = p;
  }
  return phases_;
}
inline ::onos::config::v2::ProposalPhases* ProposalStatus::mutable_phases() {
  ::onos::config::v2::ProposalPhases* _msg = _internal_mutable_phases();
  // @@protoc_insertion_point(field_mutable:onos.config.v2.ProposalStatus.phases)
  return _msg;
}
inline void ProposalStatus::set_allocated_phases(::onos::config::v2::ProposalPhases* phases) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete phases_;
  }
  if (phases) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::config::v2::ProposalPhases>::GetOwningArena(phases);
    if (message_arena != submessage_arena) {
      phases = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, phases, submessage_arena);
    }
    
  } else {
    
  }
  phases_ = phases;
  // @@protoc_insertion_point(field_set_allocated:onos.config.v2.ProposalStatus.phases)
}

// uint64 prev_index = 2 [(.gogoproto.casttype) = "Index"];
inline void ProposalStatus::clear_prev_index() {
  prev_index_ = uint64_t{0u};
}
inline uint64_t ProposalStatus::_internal_prev_index() const {
  return prev_index_;
}
inline uint64_t ProposalStatus::prev_index() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.ProposalStatus.prev_index)
  return _internal_prev_index();
}
inline void ProposalStatus::_internal_set_prev_index(uint64_t value) {
  
  prev_index_ = value;
}
inline void ProposalStatus::set_prev_index(uint64_t value) {
  _internal_set_prev_index(value);
  // @@protoc_insertion_point(field_set:onos.config.v2.ProposalStatus.prev_index)
}

// uint64 next_index = 3 [(.gogoproto.casttype) = "Index"];
inline void ProposalStatus::clear_next_index() {
  next_index_ = uint64_t{0u};
}
inline uint64_t ProposalStatus::_internal_next_index() const {
  return next_index_;
}
inline uint64_t ProposalStatus::next_index() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.ProposalStatus.next_index)
  return _internal_next_index();
}
inline void ProposalStatus::_internal_set_next_index(uint64_t value) {
  
  next_index_ = value;
}
inline void ProposalStatus::set_next_index(uint64_t value) {
  _internal_set_next_index(value);
  // @@protoc_insertion_point(field_set:onos.config.v2.ProposalStatus.next_index)
}

// uint64 rollback_index = 4 [(.gogoproto.casttype) = "Index"];
inline void ProposalStatus::clear_rollback_index() {
  rollback_index_ = uint64_t{0u};
}
inline uint64_t ProposalStatus::_internal_rollback_index() const {
  return rollback_index_;
}
inline uint64_t ProposalStatus::rollback_index() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.ProposalStatus.rollback_index)
  return _internal_rollback_index();
}
inline void ProposalStatus::_internal_set_rollback_index(uint64_t value) {
  
  rollback_index_ = value;
}
inline void ProposalStatus::set_rollback_index(uint64_t value) {
  _internal_set_rollback_index(value);
  // @@protoc_insertion_point(field_set:onos.config.v2.ProposalStatus.rollback_index)
}

// map<string, .onos.config.v2.PathValue> rollback_values = 5;
inline int ProposalStatus::_internal_rollback_values_size() const {
  return rollback_values_.size();
}
inline int ProposalStatus::rollback_values_size() const {
  return _internal_rollback_values_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::config::v2::PathValue >&
ProposalStatus::_internal_rollback_values() const {
  return rollback_values_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::config::v2::PathValue >&
ProposalStatus::rollback_values() const {
  // @@protoc_insertion_point(field_map:onos.config.v2.ProposalStatus.rollback_values)
  return _internal_rollback_values();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::config::v2::PathValue >*
ProposalStatus::_internal_mutable_rollback_values() {
  return rollback_values_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::config::v2::PathValue >*
ProposalStatus::mutable_rollback_values() {
  // @@protoc_insertion_point(field_mutable_map:onos.config.v2.ProposalStatus.rollback_values)
  return _internal_mutable_rollback_values();
}

// -------------------------------------------------------------------

// ProposalPhases

// .onos.config.v2.ProposalInitializePhase initialize = 1;
inline bool ProposalPhases::_internal_has_initialize() const {
  return this != internal_default_instance() && initialize_ != nullptr;
}
inline bool ProposalPhases::has_initialize() const {
  return _internal_has_initialize();
}
inline void ProposalPhases::clear_initialize() {
  if (GetArenaForAllocation() == nullptr && initialize_ != nullptr) {
    delete initialize_;
  }
  initialize_ = nullptr;
}
inline const ::onos::config::v2::ProposalInitializePhase& ProposalPhases::_internal_initialize() const {
  const ::onos::config::v2::ProposalInitializePhase* p = initialize_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::config::v2::ProposalInitializePhase&>(
      ::onos::config::v2::_ProposalInitializePhase_default_instance_);
}
inline const ::onos::config::v2::ProposalInitializePhase& ProposalPhases::initialize() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.ProposalPhases.initialize)
  return _internal_initialize();
}
inline void ProposalPhases::unsafe_arena_set_allocated_initialize(
    ::onos::config::v2::ProposalInitializePhase* initialize) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(initialize_);
  }
  initialize_ = initialize;
  if (initialize) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.config.v2.ProposalPhases.initialize)
}
inline ::onos::config::v2::ProposalInitializePhase* ProposalPhases::release_initialize() {
  
  ::onos::config::v2::ProposalInitializePhase* temp = initialize_;
  initialize_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::config::v2::ProposalInitializePhase* ProposalPhases::unsafe_arena_release_initialize() {
  // @@protoc_insertion_point(field_release:onos.config.v2.ProposalPhases.initialize)
  
  ::onos::config::v2::ProposalInitializePhase* temp = initialize_;
  initialize_ = nullptr;
  return temp;
}
inline ::onos::config::v2::ProposalInitializePhase* ProposalPhases::_internal_mutable_initialize() {
  
  if (initialize_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::config::v2::ProposalInitializePhase>(GetArenaForAllocation());
    initialize_ = p;
  }
  return initialize_;
}
inline ::onos::config::v2::ProposalInitializePhase* ProposalPhases::mutable_initialize() {
  ::onos::config::v2::ProposalInitializePhase* _msg = _internal_mutable_initialize();
  // @@protoc_insertion_point(field_mutable:onos.config.v2.ProposalPhases.initialize)
  return _msg;
}
inline void ProposalPhases::set_allocated_initialize(::onos::config::v2::ProposalInitializePhase* initialize) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete initialize_;
  }
  if (initialize) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::config::v2::ProposalInitializePhase>::GetOwningArena(initialize);
    if (message_arena != submessage_arena) {
      initialize = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, initialize, submessage_arena);
    }
    
  } else {
    
  }
  initialize_ = initialize;
  // @@protoc_insertion_point(field_set_allocated:onos.config.v2.ProposalPhases.initialize)
}

// .onos.config.v2.ProposalValidatePhase validate = 2;
inline bool ProposalPhases::_internal_has_validate() const {
  return this != internal_default_instance() && validate_ != nullptr;
}
inline bool ProposalPhases::has_validate() const {
  return _internal_has_validate();
}
inline void ProposalPhases::clear_validate() {
  if (GetArenaForAllocation() == nullptr && validate_ != nullptr) {
    delete validate_;
  }
  validate_ = nullptr;
}
inline const ::onos::config::v2::ProposalValidatePhase& ProposalPhases::_internal_validate() const {
  const ::onos::config::v2::ProposalValidatePhase* p = validate_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::config::v2::ProposalValidatePhase&>(
      ::onos::config::v2::_ProposalValidatePhase_default_instance_);
}
inline const ::onos::config::v2::ProposalValidatePhase& ProposalPhases::validate() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.ProposalPhases.validate)
  return _internal_validate();
}
inline void ProposalPhases::unsafe_arena_set_allocated_validate(
    ::onos::config::v2::ProposalValidatePhase* validate) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(validate_);
  }
  validate_ = validate;
  if (validate) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.config.v2.ProposalPhases.validate)
}
inline ::onos::config::v2::ProposalValidatePhase* ProposalPhases::release_validate() {
  
  ::onos::config::v2::ProposalValidatePhase* temp = validate_;
  validate_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::config::v2::ProposalValidatePhase* ProposalPhases::unsafe_arena_release_validate() {
  // @@protoc_insertion_point(field_release:onos.config.v2.ProposalPhases.validate)
  
  ::onos::config::v2::ProposalValidatePhase* temp = validate_;
  validate_ = nullptr;
  return temp;
}
inline ::onos::config::v2::ProposalValidatePhase* ProposalPhases::_internal_mutable_validate() {
  
  if (validate_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::config::v2::ProposalValidatePhase>(GetArenaForAllocation());
    validate_ = p;
  }
  return validate_;
}
inline ::onos::config::v2::ProposalValidatePhase* ProposalPhases::mutable_validate() {
  ::onos::config::v2::ProposalValidatePhase* _msg = _internal_mutable_validate();
  // @@protoc_insertion_point(field_mutable:onos.config.v2.ProposalPhases.validate)
  return _msg;
}
inline void ProposalPhases::set_allocated_validate(::onos::config::v2::ProposalValidatePhase* validate) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete validate_;
  }
  if (validate) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::config::v2::ProposalValidatePhase>::GetOwningArena(validate);
    if (message_arena != submessage_arena) {
      validate = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, validate, submessage_arena);
    }
    
  } else {
    
  }
  validate_ = validate;
  // @@protoc_insertion_point(field_set_allocated:onos.config.v2.ProposalPhases.validate)
}

// .onos.config.v2.ProposalCommitPhase commit = 3;
inline bool ProposalPhases::_internal_has_commit() const {
  return this != internal_default_instance() && commit_ != nullptr;
}
inline bool ProposalPhases::has_commit() const {
  return _internal_has_commit();
}
inline void ProposalPhases::clear_commit() {
  if (GetArenaForAllocation() == nullptr && commit_ != nullptr) {
    delete commit_;
  }
  commit_ = nullptr;
}
inline const ::onos::config::v2::ProposalCommitPhase& ProposalPhases::_internal_commit() const {
  const ::onos::config::v2::ProposalCommitPhase* p = commit_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::config::v2::ProposalCommitPhase&>(
      ::onos::config::v2::_ProposalCommitPhase_default_instance_);
}
inline const ::onos::config::v2::ProposalCommitPhase& ProposalPhases::commit() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.ProposalPhases.commit)
  return _internal_commit();
}
inline void ProposalPhases::unsafe_arena_set_allocated_commit(
    ::onos::config::v2::ProposalCommitPhase* commit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(commit_);
  }
  commit_ = commit;
  if (commit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.config.v2.ProposalPhases.commit)
}
inline ::onos::config::v2::ProposalCommitPhase* ProposalPhases::release_commit() {
  
  ::onos::config::v2::ProposalCommitPhase* temp = commit_;
  commit_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::config::v2::ProposalCommitPhase* ProposalPhases::unsafe_arena_release_commit() {
  // @@protoc_insertion_point(field_release:onos.config.v2.ProposalPhases.commit)
  
  ::onos::config::v2::ProposalCommitPhase* temp = commit_;
  commit_ = nullptr;
  return temp;
}
inline ::onos::config::v2::ProposalCommitPhase* ProposalPhases::_internal_mutable_commit() {
  
  if (commit_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::config::v2::ProposalCommitPhase>(GetArenaForAllocation());
    commit_ = p;
  }
  return commit_;
}
inline ::onos::config::v2::ProposalCommitPhase* ProposalPhases::mutable_commit() {
  ::onos::config::v2::ProposalCommitPhase* _msg = _internal_mutable_commit();
  // @@protoc_insertion_point(field_mutable:onos.config.v2.ProposalPhases.commit)
  return _msg;
}
inline void ProposalPhases::set_allocated_commit(::onos::config::v2::ProposalCommitPhase* commit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete commit_;
  }
  if (commit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::config::v2::ProposalCommitPhase>::GetOwningArena(commit);
    if (message_arena != submessage_arena) {
      commit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commit, submessage_arena);
    }
    
  } else {
    
  }
  commit_ = commit;
  // @@protoc_insertion_point(field_set_allocated:onos.config.v2.ProposalPhases.commit)
}

// .onos.config.v2.ProposalApplyPhase apply = 4;
inline bool ProposalPhases::_internal_has_apply() const {
  return this != internal_default_instance() && apply_ != nullptr;
}
inline bool ProposalPhases::has_apply() const {
  return _internal_has_apply();
}
inline void ProposalPhases::clear_apply() {
  if (GetArenaForAllocation() == nullptr && apply_ != nullptr) {
    delete apply_;
  }
  apply_ = nullptr;
}
inline const ::onos::config::v2::ProposalApplyPhase& ProposalPhases::_internal_apply() const {
  const ::onos::config::v2::ProposalApplyPhase* p = apply_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::config::v2::ProposalApplyPhase&>(
      ::onos::config::v2::_ProposalApplyPhase_default_instance_);
}
inline const ::onos::config::v2::ProposalApplyPhase& ProposalPhases::apply() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.ProposalPhases.apply)
  return _internal_apply();
}
inline void ProposalPhases::unsafe_arena_set_allocated_apply(
    ::onos::config::v2::ProposalApplyPhase* apply) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(apply_);
  }
  apply_ = apply;
  if (apply) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.config.v2.ProposalPhases.apply)
}
inline ::onos::config::v2::ProposalApplyPhase* ProposalPhases::release_apply() {
  
  ::onos::config::v2::ProposalApplyPhase* temp = apply_;
  apply_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::config::v2::ProposalApplyPhase* ProposalPhases::unsafe_arena_release_apply() {
  // @@protoc_insertion_point(field_release:onos.config.v2.ProposalPhases.apply)
  
  ::onos::config::v2::ProposalApplyPhase* temp = apply_;
  apply_ = nullptr;
  return temp;
}
inline ::onos::config::v2::ProposalApplyPhase* ProposalPhases::_internal_mutable_apply() {
  
  if (apply_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::config::v2::ProposalApplyPhase>(GetArenaForAllocation());
    apply_ = p;
  }
  return apply_;
}
inline ::onos::config::v2::ProposalApplyPhase* ProposalPhases::mutable_apply() {
  ::onos::config::v2::ProposalApplyPhase* _msg = _internal_mutable_apply();
  // @@protoc_insertion_point(field_mutable:onos.config.v2.ProposalPhases.apply)
  return _msg;
}
inline void ProposalPhases::set_allocated_apply(::onos::config::v2::ProposalApplyPhase* apply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete apply_;
  }
  if (apply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::config::v2::ProposalApplyPhase>::GetOwningArena(apply);
    if (message_arena != submessage_arena) {
      apply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, apply, submessage_arena);
    }
    
  } else {
    
  }
  apply_ = apply;
  // @@protoc_insertion_point(field_set_allocated:onos.config.v2.ProposalPhases.apply)
}

// .onos.config.v2.ProposalAbortPhase abort = 5;
inline bool ProposalPhases::_internal_has_abort() const {
  return this != internal_default_instance() && abort_ != nullptr;
}
inline bool ProposalPhases::has_abort() const {
  return _internal_has_abort();
}
inline void ProposalPhases::clear_abort() {
  if (GetArenaForAllocation() == nullptr && abort_ != nullptr) {
    delete abort_;
  }
  abort_ = nullptr;
}
inline const ::onos::config::v2::ProposalAbortPhase& ProposalPhases::_internal_abort() const {
  const ::onos::config::v2::ProposalAbortPhase* p = abort_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::config::v2::ProposalAbortPhase&>(
      ::onos::config::v2::_ProposalAbortPhase_default_instance_);
}
inline const ::onos::config::v2::ProposalAbortPhase& ProposalPhases::abort() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.ProposalPhases.abort)
  return _internal_abort();
}
inline void ProposalPhases::unsafe_arena_set_allocated_abort(
    ::onos::config::v2::ProposalAbortPhase* abort) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(abort_);
  }
  abort_ = abort;
  if (abort) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.config.v2.ProposalPhases.abort)
}
inline ::onos::config::v2::ProposalAbortPhase* ProposalPhases::release_abort() {
  
  ::onos::config::v2::ProposalAbortPhase* temp = abort_;
  abort_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::config::v2::ProposalAbortPhase* ProposalPhases::unsafe_arena_release_abort() {
  // @@protoc_insertion_point(field_release:onos.config.v2.ProposalPhases.abort)
  
  ::onos::config::v2::ProposalAbortPhase* temp = abort_;
  abort_ = nullptr;
  return temp;
}
inline ::onos::config::v2::ProposalAbortPhase* ProposalPhases::_internal_mutable_abort() {
  
  if (abort_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::config::v2::ProposalAbortPhase>(GetArenaForAllocation());
    abort_ = p;
  }
  return abort_;
}
inline ::onos::config::v2::ProposalAbortPhase* ProposalPhases::mutable_abort() {
  ::onos::config::v2::ProposalAbortPhase* _msg = _internal_mutable_abort();
  // @@protoc_insertion_point(field_mutable:onos.config.v2.ProposalPhases.abort)
  return _msg;
}
inline void ProposalPhases::set_allocated_abort(::onos::config::v2::ProposalAbortPhase* abort) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete abort_;
  }
  if (abort) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::config::v2::ProposalAbortPhase>::GetOwningArena(abort);
    if (message_arena != submessage_arena) {
      abort = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, abort, submessage_arena);
    }
    
  } else {
    
  }
  abort_ = abort;
  // @@protoc_insertion_point(field_set_allocated:onos.config.v2.ProposalPhases.abort)
}

// -------------------------------------------------------------------

// ProposalPhaseStatus

// .google.protobuf.Timestamp start = 1 [(.gogoproto.stdtime) = true];
inline bool ProposalPhaseStatus::_internal_has_start() const {
  return this != internal_default_instance() && start_ != nullptr;
}
inline bool ProposalPhaseStatus::has_start() const {
  return _internal_has_start();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ProposalPhaseStatus::_internal_start() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = start_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ProposalPhaseStatus::start() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.ProposalPhaseStatus.start)
  return _internal_start();
}
inline void ProposalPhaseStatus::unsafe_arena_set_allocated_start(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* start) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_);
  }
  start_ = start;
  if (start) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.config.v2.ProposalPhaseStatus.start)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ProposalPhaseStatus::release_start() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_;
  start_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ProposalPhaseStatus::unsafe_arena_release_start() {
  // @@protoc_insertion_point(field_release:onos.config.v2.ProposalPhaseStatus.start)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = start_;
  start_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ProposalPhaseStatus::_internal_mutable_start() {
  
  if (start_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    start_ = p;
  }
  return start_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ProposalPhaseStatus::mutable_start() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_start();
  // @@protoc_insertion_point(field_mutable:onos.config.v2.ProposalPhaseStatus.start)
  return _msg;
}
inline void ProposalPhaseStatus::set_allocated_start(::PROTOBUF_NAMESPACE_ID::Timestamp* start) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(start_);
  }
  if (start) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(start));
    if (message_arena != submessage_arena) {
      start = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, start, submessage_arena);
    }
    
  } else {
    
  }
  start_ = start;
  // @@protoc_insertion_point(field_set_allocated:onos.config.v2.ProposalPhaseStatus.start)
}

// .google.protobuf.Timestamp end = 2 [(.gogoproto.stdtime) = true];
inline bool ProposalPhaseStatus::_internal_has_end() const {
  return this != internal_default_instance() && end_ != nullptr;
}
inline bool ProposalPhaseStatus::has_end() const {
  return _internal_has_end();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ProposalPhaseStatus::_internal_end() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = end_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ProposalPhaseStatus::end() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.ProposalPhaseStatus.end)
  return _internal_end();
}
inline void ProposalPhaseStatus::unsafe_arena_set_allocated_end(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* end) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_);
  }
  end_ = end;
  if (end) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.config.v2.ProposalPhaseStatus.end)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ProposalPhaseStatus::release_end() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_;
  end_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ProposalPhaseStatus::unsafe_arena_release_end() {
  // @@protoc_insertion_point(field_release:onos.config.v2.ProposalPhaseStatus.end)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = end_;
  end_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ProposalPhaseStatus::_internal_mutable_end() {
  
  if (end_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    end_ = p;
  }
  return end_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ProposalPhaseStatus::mutable_end() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_end();
  // @@protoc_insertion_point(field_mutable:onos.config.v2.ProposalPhaseStatus.end)
  return _msg;
}
inline void ProposalPhaseStatus::set_allocated_end(::PROTOBUF_NAMESPACE_ID::Timestamp* end) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(end_);
  }
  if (end) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(end));
    if (message_arena != submessage_arena) {
      end = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, end, submessage_arena);
    }
    
  } else {
    
  }
  end_ = end;
  // @@protoc_insertion_point(field_set_allocated:onos.config.v2.ProposalPhaseStatus.end)
}

// -------------------------------------------------------------------

// ProposalInitializePhase

// .onos.config.v2.ProposalPhaseStatus status = 1 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
inline bool ProposalInitializePhase::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool ProposalInitializePhase::has_status() const {
  return _internal_has_status();
}
inline void ProposalInitializePhase::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::onos::config::v2::ProposalPhaseStatus& ProposalInitializePhase::_internal_status() const {
  const ::onos::config::v2::ProposalPhaseStatus* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::config::v2::ProposalPhaseStatus&>(
      ::onos::config::v2::_ProposalPhaseStatus_default_instance_);
}
inline const ::onos::config::v2::ProposalPhaseStatus& ProposalInitializePhase::status() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.ProposalInitializePhase.status)
  return _internal_status();
}
inline void ProposalInitializePhase::unsafe_arena_set_allocated_status(
    ::onos::config::v2::ProposalPhaseStatus* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.config.v2.ProposalInitializePhase.status)
}
inline ::onos::config::v2::ProposalPhaseStatus* ProposalInitializePhase::release_status() {
  
  ::onos::config::v2::ProposalPhaseStatus* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::config::v2::ProposalPhaseStatus* ProposalInitializePhase::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:onos.config.v2.ProposalInitializePhase.status)
  
  ::onos::config::v2::ProposalPhaseStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::onos::config::v2::ProposalPhaseStatus* ProposalInitializePhase::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::config::v2::ProposalPhaseStatus>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::onos::config::v2::ProposalPhaseStatus* ProposalInitializePhase::mutable_status() {
  ::onos::config::v2::ProposalPhaseStatus* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:onos.config.v2.ProposalInitializePhase.status)
  return _msg;
}
inline void ProposalInitializePhase::set_allocated_status(::onos::config::v2::ProposalPhaseStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::config::v2::ProposalPhaseStatus>::GetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:onos.config.v2.ProposalInitializePhase.status)
}

// .onos.config.v2.ProposalInitializePhase.State state = 2;
inline void ProposalInitializePhase::clear_state() {
  state_ = 0;
}
inline ::onos::config::v2::ProposalInitializePhase_State ProposalInitializePhase::_internal_state() const {
  return static_cast< ::onos::config::v2::ProposalInitializePhase_State >(state_);
}
inline ::onos::config::v2::ProposalInitializePhase_State ProposalInitializePhase::state() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.ProposalInitializePhase.state)
  return _internal_state();
}
inline void ProposalInitializePhase::_internal_set_state(::onos::config::v2::ProposalInitializePhase_State value) {
  
  state_ = value;
}
inline void ProposalInitializePhase::set_state(::onos::config::v2::ProposalInitializePhase_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:onos.config.v2.ProposalInitializePhase.state)
}

// -------------------------------------------------------------------

// ProposalValidatePhase

// .onos.config.v2.ProposalPhaseStatus status = 1 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
inline bool ProposalValidatePhase::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool ProposalValidatePhase::has_status() const {
  return _internal_has_status();
}
inline void ProposalValidatePhase::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::onos::config::v2::ProposalPhaseStatus& ProposalValidatePhase::_internal_status() const {
  const ::onos::config::v2::ProposalPhaseStatus* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::config::v2::ProposalPhaseStatus&>(
      ::onos::config::v2::_ProposalPhaseStatus_default_instance_);
}
inline const ::onos::config::v2::ProposalPhaseStatus& ProposalValidatePhase::status() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.ProposalValidatePhase.status)
  return _internal_status();
}
inline void ProposalValidatePhase::unsafe_arena_set_allocated_status(
    ::onos::config::v2::ProposalPhaseStatus* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.config.v2.ProposalValidatePhase.status)
}
inline ::onos::config::v2::ProposalPhaseStatus* ProposalValidatePhase::release_status() {
  
  ::onos::config::v2::ProposalPhaseStatus* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::config::v2::ProposalPhaseStatus* ProposalValidatePhase::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:onos.config.v2.ProposalValidatePhase.status)
  
  ::onos::config::v2::ProposalPhaseStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::onos::config::v2::ProposalPhaseStatus* ProposalValidatePhase::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::config::v2::ProposalPhaseStatus>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::onos::config::v2::ProposalPhaseStatus* ProposalValidatePhase::mutable_status() {
  ::onos::config::v2::ProposalPhaseStatus* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:onos.config.v2.ProposalValidatePhase.status)
  return _msg;
}
inline void ProposalValidatePhase::set_allocated_status(::onos::config::v2::ProposalPhaseStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::config::v2::ProposalPhaseStatus>::GetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:onos.config.v2.ProposalValidatePhase.status)
}

// .onos.config.v2.ProposalValidatePhase.State state = 2;
inline void ProposalValidatePhase::clear_state() {
  state_ = 0;
}
inline ::onos::config::v2::ProposalValidatePhase_State ProposalValidatePhase::_internal_state() const {
  return static_cast< ::onos::config::v2::ProposalValidatePhase_State >(state_);
}
inline ::onos::config::v2::ProposalValidatePhase_State ProposalValidatePhase::state() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.ProposalValidatePhase.state)
  return _internal_state();
}
inline void ProposalValidatePhase::_internal_set_state(::onos::config::v2::ProposalValidatePhase_State value) {
  
  state_ = value;
}
inline void ProposalValidatePhase::set_state(::onos::config::v2::ProposalValidatePhase_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:onos.config.v2.ProposalValidatePhase.state)
}

// .onos.config.v2.Failure failure = 3;
inline bool ProposalValidatePhase::_internal_has_failure() const {
  return this != internal_default_instance() && failure_ != nullptr;
}
inline bool ProposalValidatePhase::has_failure() const {
  return _internal_has_failure();
}
inline const ::onos::config::v2::Failure& ProposalValidatePhase::_internal_failure() const {
  const ::onos::config::v2::Failure* p = failure_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::config::v2::Failure&>(
      ::onos::config::v2::_Failure_default_instance_);
}
inline const ::onos::config::v2::Failure& ProposalValidatePhase::failure() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.ProposalValidatePhase.failure)
  return _internal_failure();
}
inline void ProposalValidatePhase::unsafe_arena_set_allocated_failure(
    ::onos::config::v2::Failure* failure) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(failure_);
  }
  failure_ = failure;
  if (failure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.config.v2.ProposalValidatePhase.failure)
}
inline ::onos::config::v2::Failure* ProposalValidatePhase::release_failure() {
  
  ::onos::config::v2::Failure* temp = failure_;
  failure_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::config::v2::Failure* ProposalValidatePhase::unsafe_arena_release_failure() {
  // @@protoc_insertion_point(field_release:onos.config.v2.ProposalValidatePhase.failure)
  
  ::onos::config::v2::Failure* temp = failure_;
  failure_ = nullptr;
  return temp;
}
inline ::onos::config::v2::Failure* ProposalValidatePhase::_internal_mutable_failure() {
  
  if (failure_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::config::v2::Failure>(GetArenaForAllocation());
    failure_ = p;
  }
  return failure_;
}
inline ::onos::config::v2::Failure* ProposalValidatePhase::mutable_failure() {
  ::onos::config::v2::Failure* _msg = _internal_mutable_failure();
  // @@protoc_insertion_point(field_mutable:onos.config.v2.ProposalValidatePhase.failure)
  return _msg;
}
inline void ProposalValidatePhase::set_allocated_failure(::onos::config::v2::Failure* failure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(failure_);
  }
  if (failure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(failure));
    if (message_arena != submessage_arena) {
      failure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, failure, submessage_arena);
    }
    
  } else {
    
  }
  failure_ = failure;
  // @@protoc_insertion_point(field_set_allocated:onos.config.v2.ProposalValidatePhase.failure)
}

// -------------------------------------------------------------------

// ProposalCommitPhase

// .onos.config.v2.ProposalPhaseStatus status = 1 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
inline bool ProposalCommitPhase::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool ProposalCommitPhase::has_status() const {
  return _internal_has_status();
}
inline void ProposalCommitPhase::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::onos::config::v2::ProposalPhaseStatus& ProposalCommitPhase::_internal_status() const {
  const ::onos::config::v2::ProposalPhaseStatus* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::config::v2::ProposalPhaseStatus&>(
      ::onos::config::v2::_ProposalPhaseStatus_default_instance_);
}
inline const ::onos::config::v2::ProposalPhaseStatus& ProposalCommitPhase::status() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.ProposalCommitPhase.status)
  return _internal_status();
}
inline void ProposalCommitPhase::unsafe_arena_set_allocated_status(
    ::onos::config::v2::ProposalPhaseStatus* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.config.v2.ProposalCommitPhase.status)
}
inline ::onos::config::v2::ProposalPhaseStatus* ProposalCommitPhase::release_status() {
  
  ::onos::config::v2::ProposalPhaseStatus* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::config::v2::ProposalPhaseStatus* ProposalCommitPhase::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:onos.config.v2.ProposalCommitPhase.status)
  
  ::onos::config::v2::ProposalPhaseStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::onos::config::v2::ProposalPhaseStatus* ProposalCommitPhase::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::config::v2::ProposalPhaseStatus>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::onos::config::v2::ProposalPhaseStatus* ProposalCommitPhase::mutable_status() {
  ::onos::config::v2::ProposalPhaseStatus* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:onos.config.v2.ProposalCommitPhase.status)
  return _msg;
}
inline void ProposalCommitPhase::set_allocated_status(::onos::config::v2::ProposalPhaseStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::config::v2::ProposalPhaseStatus>::GetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:onos.config.v2.ProposalCommitPhase.status)
}

// .onos.config.v2.ProposalCommitPhase.State state = 2;
inline void ProposalCommitPhase::clear_state() {
  state_ = 0;
}
inline ::onos::config::v2::ProposalCommitPhase_State ProposalCommitPhase::_internal_state() const {
  return static_cast< ::onos::config::v2::ProposalCommitPhase_State >(state_);
}
inline ::onos::config::v2::ProposalCommitPhase_State ProposalCommitPhase::state() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.ProposalCommitPhase.state)
  return _internal_state();
}
inline void ProposalCommitPhase::_internal_set_state(::onos::config::v2::ProposalCommitPhase_State value) {
  
  state_ = value;
}
inline void ProposalCommitPhase::set_state(::onos::config::v2::ProposalCommitPhase_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:onos.config.v2.ProposalCommitPhase.state)
}

// -------------------------------------------------------------------

// ProposalApplyPhase

// .onos.config.v2.ProposalPhaseStatus status = 1 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
inline bool ProposalApplyPhase::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool ProposalApplyPhase::has_status() const {
  return _internal_has_status();
}
inline void ProposalApplyPhase::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::onos::config::v2::ProposalPhaseStatus& ProposalApplyPhase::_internal_status() const {
  const ::onos::config::v2::ProposalPhaseStatus* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::config::v2::ProposalPhaseStatus&>(
      ::onos::config::v2::_ProposalPhaseStatus_default_instance_);
}
inline const ::onos::config::v2::ProposalPhaseStatus& ProposalApplyPhase::status() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.ProposalApplyPhase.status)
  return _internal_status();
}
inline void ProposalApplyPhase::unsafe_arena_set_allocated_status(
    ::onos::config::v2::ProposalPhaseStatus* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.config.v2.ProposalApplyPhase.status)
}
inline ::onos::config::v2::ProposalPhaseStatus* ProposalApplyPhase::release_status() {
  
  ::onos::config::v2::ProposalPhaseStatus* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::config::v2::ProposalPhaseStatus* ProposalApplyPhase::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:onos.config.v2.ProposalApplyPhase.status)
  
  ::onos::config::v2::ProposalPhaseStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::onos::config::v2::ProposalPhaseStatus* ProposalApplyPhase::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::config::v2::ProposalPhaseStatus>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::onos::config::v2::ProposalPhaseStatus* ProposalApplyPhase::mutable_status() {
  ::onos::config::v2::ProposalPhaseStatus* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:onos.config.v2.ProposalApplyPhase.status)
  return _msg;
}
inline void ProposalApplyPhase::set_allocated_status(::onos::config::v2::ProposalPhaseStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::config::v2::ProposalPhaseStatus>::GetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:onos.config.v2.ProposalApplyPhase.status)
}

// .onos.config.v2.ProposalApplyPhase.State state = 2;
inline void ProposalApplyPhase::clear_state() {
  state_ = 0;
}
inline ::onos::config::v2::ProposalApplyPhase_State ProposalApplyPhase::_internal_state() const {
  return static_cast< ::onos::config::v2::ProposalApplyPhase_State >(state_);
}
inline ::onos::config::v2::ProposalApplyPhase_State ProposalApplyPhase::state() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.ProposalApplyPhase.state)
  return _internal_state();
}
inline void ProposalApplyPhase::_internal_set_state(::onos::config::v2::ProposalApplyPhase_State value) {
  
  state_ = value;
}
inline void ProposalApplyPhase::set_state(::onos::config::v2::ProposalApplyPhase_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:onos.config.v2.ProposalApplyPhase.state)
}

// uint64 term = 3 [(.gogoproto.casttype) = "MastershipTerm"];
inline void ProposalApplyPhase::clear_term() {
  term_ = uint64_t{0u};
}
inline uint64_t ProposalApplyPhase::_internal_term() const {
  return term_;
}
inline uint64_t ProposalApplyPhase::term() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.ProposalApplyPhase.term)
  return _internal_term();
}
inline void ProposalApplyPhase::_internal_set_term(uint64_t value) {
  
  term_ = value;
}
inline void ProposalApplyPhase::set_term(uint64_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:onos.config.v2.ProposalApplyPhase.term)
}

// .onos.config.v2.Failure failure = 4;
inline bool ProposalApplyPhase::_internal_has_failure() const {
  return this != internal_default_instance() && failure_ != nullptr;
}
inline bool ProposalApplyPhase::has_failure() const {
  return _internal_has_failure();
}
inline const ::onos::config::v2::Failure& ProposalApplyPhase::_internal_failure() const {
  const ::onos::config::v2::Failure* p = failure_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::config::v2::Failure&>(
      ::onos::config::v2::_Failure_default_instance_);
}
inline const ::onos::config::v2::Failure& ProposalApplyPhase::failure() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.ProposalApplyPhase.failure)
  return _internal_failure();
}
inline void ProposalApplyPhase::unsafe_arena_set_allocated_failure(
    ::onos::config::v2::Failure* failure) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(failure_);
  }
  failure_ = failure;
  if (failure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.config.v2.ProposalApplyPhase.failure)
}
inline ::onos::config::v2::Failure* ProposalApplyPhase::release_failure() {
  
  ::onos::config::v2::Failure* temp = failure_;
  failure_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::config::v2::Failure* ProposalApplyPhase::unsafe_arena_release_failure() {
  // @@protoc_insertion_point(field_release:onos.config.v2.ProposalApplyPhase.failure)
  
  ::onos::config::v2::Failure* temp = failure_;
  failure_ = nullptr;
  return temp;
}
inline ::onos::config::v2::Failure* ProposalApplyPhase::_internal_mutable_failure() {
  
  if (failure_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::config::v2::Failure>(GetArenaForAllocation());
    failure_ = p;
  }
  return failure_;
}
inline ::onos::config::v2::Failure* ProposalApplyPhase::mutable_failure() {
  ::onos::config::v2::Failure* _msg = _internal_mutable_failure();
  // @@protoc_insertion_point(field_mutable:onos.config.v2.ProposalApplyPhase.failure)
  return _msg;
}
inline void ProposalApplyPhase::set_allocated_failure(::onos::config::v2::Failure* failure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(failure_);
  }
  if (failure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(failure));
    if (message_arena != submessage_arena) {
      failure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, failure, submessage_arena);
    }
    
  } else {
    
  }
  failure_ = failure;
  // @@protoc_insertion_point(field_set_allocated:onos.config.v2.ProposalApplyPhase.failure)
}

// -------------------------------------------------------------------

// ProposalAbortPhase

// .onos.config.v2.ProposalPhaseStatus status = 1 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
inline bool ProposalAbortPhase::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool ProposalAbortPhase::has_status() const {
  return _internal_has_status();
}
inline void ProposalAbortPhase::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::onos::config::v2::ProposalPhaseStatus& ProposalAbortPhase::_internal_status() const {
  const ::onos::config::v2::ProposalPhaseStatus* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::config::v2::ProposalPhaseStatus&>(
      ::onos::config::v2::_ProposalPhaseStatus_default_instance_);
}
inline const ::onos::config::v2::ProposalPhaseStatus& ProposalAbortPhase::status() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.ProposalAbortPhase.status)
  return _internal_status();
}
inline void ProposalAbortPhase::unsafe_arena_set_allocated_status(
    ::onos::config::v2::ProposalPhaseStatus* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.config.v2.ProposalAbortPhase.status)
}
inline ::onos::config::v2::ProposalPhaseStatus* ProposalAbortPhase::release_status() {
  
  ::onos::config::v2::ProposalPhaseStatus* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::config::v2::ProposalPhaseStatus* ProposalAbortPhase::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:onos.config.v2.ProposalAbortPhase.status)
  
  ::onos::config::v2::ProposalPhaseStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::onos::config::v2::ProposalPhaseStatus* ProposalAbortPhase::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::config::v2::ProposalPhaseStatus>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::onos::config::v2::ProposalPhaseStatus* ProposalAbortPhase::mutable_status() {
  ::onos::config::v2::ProposalPhaseStatus* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:onos.config.v2.ProposalAbortPhase.status)
  return _msg;
}
inline void ProposalAbortPhase::set_allocated_status(::onos::config::v2::ProposalPhaseStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::config::v2::ProposalPhaseStatus>::GetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:onos.config.v2.ProposalAbortPhase.status)
}

// .onos.config.v2.ProposalAbortPhase.State state = 2;
inline void ProposalAbortPhase::clear_state() {
  state_ = 0;
}
inline ::onos::config::v2::ProposalAbortPhase_State ProposalAbortPhase::_internal_state() const {
  return static_cast< ::onos::config::v2::ProposalAbortPhase_State >(state_);
}
inline ::onos::config::v2::ProposalAbortPhase_State ProposalAbortPhase::state() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.ProposalAbortPhase.state)
  return _internal_state();
}
inline void ProposalAbortPhase::_internal_set_state(::onos::config::v2::ProposalAbortPhase_State value) {
  
  state_ = value;
}
inline void ProposalAbortPhase::set_state(::onos::config::v2::ProposalAbortPhase_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:onos.config.v2.ProposalAbortPhase.state)
}

// -------------------------------------------------------------------

// ProposalEvent

// .onos.config.v2.ProposalEvent.EventType type = 1;
inline void ProposalEvent::clear_type() {
  type_ = 0;
}
inline ::onos::config::v2::ProposalEvent_EventType ProposalEvent::_internal_type() const {
  return static_cast< ::onos::config::v2::ProposalEvent_EventType >(type_);
}
inline ::onos::config::v2::ProposalEvent_EventType ProposalEvent::type() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.ProposalEvent.type)
  return _internal_type();
}
inline void ProposalEvent::_internal_set_type(::onos::config::v2::ProposalEvent_EventType value) {
  
  type_ = value;
}
inline void ProposalEvent::set_type(::onos::config::v2::ProposalEvent_EventType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:onos.config.v2.ProposalEvent.type)
}

// .onos.config.v2.Proposal proposal = 2 [(.gogoproto.nullable) = false];
inline bool ProposalEvent::_internal_has_proposal() const {
  return this != internal_default_instance() && proposal_ != nullptr;
}
inline bool ProposalEvent::has_proposal() const {
  return _internal_has_proposal();
}
inline void ProposalEvent::clear_proposal() {
  if (GetArenaForAllocation() == nullptr && proposal_ != nullptr) {
    delete proposal_;
  }
  proposal_ = nullptr;
}
inline const ::onos::config::v2::Proposal& ProposalEvent::_internal_proposal() const {
  const ::onos::config::v2::Proposal* p = proposal_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::config::v2::Proposal&>(
      ::onos::config::v2::_Proposal_default_instance_);
}
inline const ::onos::config::v2::Proposal& ProposalEvent::proposal() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.ProposalEvent.proposal)
  return _internal_proposal();
}
inline void ProposalEvent::unsafe_arena_set_allocated_proposal(
    ::onos::config::v2::Proposal* proposal) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proposal_);
  }
  proposal_ = proposal;
  if (proposal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.config.v2.ProposalEvent.proposal)
}
inline ::onos::config::v2::Proposal* ProposalEvent::release_proposal() {
  
  ::onos::config::v2::Proposal* temp = proposal_;
  proposal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::config::v2::Proposal* ProposalEvent::unsafe_arena_release_proposal() {
  // @@protoc_insertion_point(field_release:onos.config.v2.ProposalEvent.proposal)
  
  ::onos::config::v2::Proposal* temp = proposal_;
  proposal_ = nullptr;
  return temp;
}
inline ::onos::config::v2::Proposal* ProposalEvent::_internal_mutable_proposal() {
  
  if (proposal_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::config::v2::Proposal>(GetArenaForAllocation());
    proposal_ = p;
  }
  return proposal_;
}
inline ::onos::config::v2::Proposal* ProposalEvent::mutable_proposal() {
  ::onos::config::v2::Proposal* _msg = _internal_mutable_proposal();
  // @@protoc_insertion_point(field_mutable:onos.config.v2.ProposalEvent.proposal)
  return _msg;
}
inline void ProposalEvent::set_allocated_proposal(::onos::config::v2::Proposal* proposal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete proposal_;
  }
  if (proposal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::config::v2::Proposal>::GetOwningArena(proposal);
    if (message_arena != submessage_arena) {
      proposal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proposal, submessage_arena);
    }
    
  } else {
    
  }
  proposal_ = proposal;
  // @@protoc_insertion_point(field_set_allocated:onos.config.v2.ProposalEvent.proposal)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace config
}  // namespace onos

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::onos::config::v2::ProposalInitializePhase_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::onos::config::v2::ProposalInitializePhase_State>() {
  return ::onos::config::v2::ProposalInitializePhase_State_descriptor();
}
template <> struct is_proto_enum< ::onos::config::v2::ProposalValidatePhase_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::onos::config::v2::ProposalValidatePhase_State>() {
  return ::onos::config::v2::ProposalValidatePhase_State_descriptor();
}
template <> struct is_proto_enum< ::onos::config::v2::ProposalCommitPhase_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::onos::config::v2::ProposalCommitPhase_State>() {
  return ::onos::config::v2::ProposalCommitPhase_State_descriptor();
}
template <> struct is_proto_enum< ::onos::config::v2::ProposalApplyPhase_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::onos::config::v2::ProposalApplyPhase_State>() {
  return ::onos::config::v2::ProposalApplyPhase_State_descriptor();
}
template <> struct is_proto_enum< ::onos::config::v2::ProposalAbortPhase_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::onos::config::v2::ProposalAbortPhase_State>() {
  return ::onos::config::v2::ProposalAbortPhase_State_descriptor();
}
template <> struct is_proto_enum< ::onos::config::v2::ProposalEvent_EventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::onos::config::v2::ProposalEvent_EventType>() {
  return ::onos::config::v2::ProposalEvent_EventType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_onos_2fconfig_2fv2_2fproposal_2eproto
