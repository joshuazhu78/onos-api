// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onos/config/v2/configuration.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_onos_2fconfig_2fv2_2fconfiguration_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_onos_2fconfig_2fv2_2fconfiguration_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "gogoproto/gogo.pb.h"
#include "onos/config/v2/object.pb.h"
#include "onos/config/v2/value.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_onos_2fconfig_2fv2_2fconfiguration_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_onos_2fconfig_2fv2_2fconfiguration_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_onos_2fconfig_2fv2_2fconfiguration_2eproto;
namespace onos {
namespace config {
namespace v2 {
class AppliedConfigurationStatus;
struct AppliedConfigurationStatusDefaultTypeInternal;
extern AppliedConfigurationStatusDefaultTypeInternal _AppliedConfigurationStatus_default_instance_;
class AppliedConfigurationStatus_ValuesEntry_DoNotUse;
struct AppliedConfigurationStatus_ValuesEntry_DoNotUseDefaultTypeInternal;
extern AppliedConfigurationStatus_ValuesEntry_DoNotUseDefaultTypeInternal _AppliedConfigurationStatus_ValuesEntry_DoNotUse_default_instance_;
class CommittedConfigurationStatus;
struct CommittedConfigurationStatusDefaultTypeInternal;
extern CommittedConfigurationStatusDefaultTypeInternal _CommittedConfigurationStatus_default_instance_;
class Configuration;
struct ConfigurationDefaultTypeInternal;
extern ConfigurationDefaultTypeInternal _Configuration_default_instance_;
class ConfigurationEvent;
struct ConfigurationEventDefaultTypeInternal;
extern ConfigurationEventDefaultTypeInternal _ConfigurationEvent_default_instance_;
class ConfigurationStatus;
struct ConfigurationStatusDefaultTypeInternal;
extern ConfigurationStatusDefaultTypeInternal _ConfigurationStatus_default_instance_;
class Configuration_ValuesEntry_DoNotUse;
struct Configuration_ValuesEntry_DoNotUseDefaultTypeInternal;
extern Configuration_ValuesEntry_DoNotUseDefaultTypeInternal _Configuration_ValuesEntry_DoNotUse_default_instance_;
class MastershipInfo;
struct MastershipInfoDefaultTypeInternal;
extern MastershipInfoDefaultTypeInternal _MastershipInfo_default_instance_;
class ProposedConfigurationStatus;
struct ProposedConfigurationStatusDefaultTypeInternal;
extern ProposedConfigurationStatusDefaultTypeInternal _ProposedConfigurationStatus_default_instance_;
}  // namespace v2
}  // namespace config
}  // namespace onos
PROTOBUF_NAMESPACE_OPEN
template<> ::onos::config::v2::AppliedConfigurationStatus* Arena::CreateMaybeMessage<::onos::config::v2::AppliedConfigurationStatus>(Arena*);
template<> ::onos::config::v2::AppliedConfigurationStatus_ValuesEntry_DoNotUse* Arena::CreateMaybeMessage<::onos::config::v2::AppliedConfigurationStatus_ValuesEntry_DoNotUse>(Arena*);
template<> ::onos::config::v2::CommittedConfigurationStatus* Arena::CreateMaybeMessage<::onos::config::v2::CommittedConfigurationStatus>(Arena*);
template<> ::onos::config::v2::Configuration* Arena::CreateMaybeMessage<::onos::config::v2::Configuration>(Arena*);
template<> ::onos::config::v2::ConfigurationEvent* Arena::CreateMaybeMessage<::onos::config::v2::ConfigurationEvent>(Arena*);
template<> ::onos::config::v2::ConfigurationStatus* Arena::CreateMaybeMessage<::onos::config::v2::ConfigurationStatus>(Arena*);
template<> ::onos::config::v2::Configuration_ValuesEntry_DoNotUse* Arena::CreateMaybeMessage<::onos::config::v2::Configuration_ValuesEntry_DoNotUse>(Arena*);
template<> ::onos::config::v2::MastershipInfo* Arena::CreateMaybeMessage<::onos::config::v2::MastershipInfo>(Arena*);
template<> ::onos::config::v2::ProposedConfigurationStatus* Arena::CreateMaybeMessage<::onos::config::v2::ProposedConfigurationStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace onos {
namespace config {
namespace v2 {

enum ConfigurationStatus_State : int {
  ConfigurationStatus_State_UNKNOWN = 0,
  ConfigurationStatus_State_SYNCHRONIZING = 1,
  ConfigurationStatus_State_SYNCHRONIZED = 2,
  ConfigurationStatus_State_PERSISTED = 3,
  ConfigurationStatus_State_ConfigurationStatus_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ConfigurationStatus_State_ConfigurationStatus_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ConfigurationStatus_State_IsValid(int value);
constexpr ConfigurationStatus_State ConfigurationStatus_State_State_MIN = ConfigurationStatus_State_UNKNOWN;
constexpr ConfigurationStatus_State ConfigurationStatus_State_State_MAX = ConfigurationStatus_State_PERSISTED;
constexpr int ConfigurationStatus_State_State_ARRAYSIZE = ConfigurationStatus_State_State_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConfigurationStatus_State_descriptor();
template<typename T>
inline const std::string& ConfigurationStatus_State_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConfigurationStatus_State>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConfigurationStatus_State_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConfigurationStatus_State_descriptor(), enum_t_value);
}
inline bool ConfigurationStatus_State_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ConfigurationStatus_State* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConfigurationStatus_State>(
    ConfigurationStatus_State_descriptor(), name, value);
}
enum ConfigurationEvent_EventType : int {
  ConfigurationEvent_EventType_UNKNOWN = 0,
  ConfigurationEvent_EventType_CREATED = 1,
  ConfigurationEvent_EventType_UPDATED = 2,
  ConfigurationEvent_EventType_DELETED = 3,
  ConfigurationEvent_EventType_REPLAYED = 4,
  ConfigurationEvent_EventType_ConfigurationEvent_EventType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  ConfigurationEvent_EventType_ConfigurationEvent_EventType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool ConfigurationEvent_EventType_IsValid(int value);
constexpr ConfigurationEvent_EventType ConfigurationEvent_EventType_EventType_MIN = ConfigurationEvent_EventType_UNKNOWN;
constexpr ConfigurationEvent_EventType ConfigurationEvent_EventType_EventType_MAX = ConfigurationEvent_EventType_REPLAYED;
constexpr int ConfigurationEvent_EventType_EventType_ARRAYSIZE = ConfigurationEvent_EventType_EventType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ConfigurationEvent_EventType_descriptor();
template<typename T>
inline const std::string& ConfigurationEvent_EventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ConfigurationEvent_EventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ConfigurationEvent_EventType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ConfigurationEvent_EventType_descriptor(), enum_t_value);
}
inline bool ConfigurationEvent_EventType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ConfigurationEvent_EventType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ConfigurationEvent_EventType>(
    ConfigurationEvent_EventType_descriptor(), name, value);
}
// ===================================================================

class Configuration_ValuesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Configuration_ValuesEntry_DoNotUse, 
    std::string, ::onos::config::v2::PathValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Configuration_ValuesEntry_DoNotUse, 
    std::string, ::onos::config::v2::PathValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  Configuration_ValuesEntry_DoNotUse();
  explicit constexpr Configuration_ValuesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Configuration_ValuesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Configuration_ValuesEntry_DoNotUse& other);
  static const Configuration_ValuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Configuration_ValuesEntry_DoNotUse*>(&_Configuration_ValuesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "onos.config.v2.Configuration.ValuesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Configuration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.config.v2.Configuration) */ {
 public:
  inline Configuration() : Configuration(nullptr) {}
  ~Configuration() override;
  explicit constexpr Configuration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Configuration(const Configuration& from);
  Configuration(Configuration&& from) noexcept
    : Configuration() {
    *this = ::std::move(from);
  }

  inline Configuration& operator=(const Configuration& from) {
    CopyFrom(from);
    return *this;
  }
  inline Configuration& operator=(Configuration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Configuration& default_instance() {
    return *internal_default_instance();
  }
  static inline const Configuration* internal_default_instance() {
    return reinterpret_cast<const Configuration*>(
               &_Configuration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Configuration& a, Configuration& b) {
    a.Swap(&b);
  }
  inline void Swap(Configuration* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Configuration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Configuration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Configuration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Configuration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Configuration& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Configuration* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.config.v2.Configuration";
  }
  protected:
  explicit Configuration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 4,
    kIdFieldNumber = 2,
    kTargetIdFieldNumber = 3,
    kMetaFieldNumber = 1,
    kStatusFieldNumber = 6,
    kTargetInfoFieldNumber = 7,
    kIndexFieldNumber = 5,
  };
  // map<string, .onos.config.v2.PathValue> values = 4;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::config::v2::PathValue >&
      _internal_values() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::config::v2::PathValue >*
      _internal_mutable_values();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::config::v2::PathValue >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::config::v2::PathValue >*
      mutable_values();

  // string id = 2 [(.gogoproto.customname) = "ID", (.gogoproto.casttype) = "ConfigurationID"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string target_id = 3 [(.gogoproto.customname) = "TargetID", (.gogoproto.casttype) = "TargetID"];
  void clear_target_id();
  const std::string& target_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_target_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_target_id();
  PROTOBUF_NODISCARD std::string* release_target_id();
  void set_allocated_target_id(std::string* target_id);
  private:
  const std::string& _internal_target_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_id(const std::string& value);
  std::string* _internal_mutable_target_id();
  public:

  // .onos.config.v2.ObjectMeta meta = 1 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
  bool has_meta() const;
  private:
  bool _internal_has_meta() const;
  public:
  void clear_meta();
  const ::onos::config::v2::ObjectMeta& meta() const;
  PROTOBUF_NODISCARD ::onos::config::v2::ObjectMeta* release_meta();
  ::onos::config::v2::ObjectMeta* mutable_meta();
  void set_allocated_meta(::onos::config::v2::ObjectMeta* meta);
  private:
  const ::onos::config::v2::ObjectMeta& _internal_meta() const;
  ::onos::config::v2::ObjectMeta* _internal_mutable_meta();
  public:
  void unsafe_arena_set_allocated_meta(
      ::onos::config::v2::ObjectMeta* meta);
  ::onos::config::v2::ObjectMeta* unsafe_arena_release_meta();

  // .onos.config.v2.ConfigurationStatus status = 6 [(.gogoproto.nullable) = false];
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::onos::config::v2::ConfigurationStatus& status() const;
  PROTOBUF_NODISCARD ::onos::config::v2::ConfigurationStatus* release_status();
  ::onos::config::v2::ConfigurationStatus* mutable_status();
  void set_allocated_status(::onos::config::v2::ConfigurationStatus* status);
  private:
  const ::onos::config::v2::ConfigurationStatus& _internal_status() const;
  ::onos::config::v2::ConfigurationStatus* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::onos::config::v2::ConfigurationStatus* status);
  ::onos::config::v2::ConfigurationStatus* unsafe_arena_release_status();

  // .onos.config.v2.TargetTypeVersion target_info = 7 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
  bool has_target_info() const;
  private:
  bool _internal_has_target_info() const;
  public:
  void clear_target_info();
  const ::onos::config::v2::TargetTypeVersion& target_info() const;
  PROTOBUF_NODISCARD ::onos::config::v2::TargetTypeVersion* release_target_info();
  ::onos::config::v2::TargetTypeVersion* mutable_target_info();
  void set_allocated_target_info(::onos::config::v2::TargetTypeVersion* target_info);
  private:
  const ::onos::config::v2::TargetTypeVersion& _internal_target_info() const;
  ::onos::config::v2::TargetTypeVersion* _internal_mutable_target_info();
  public:
  void unsafe_arena_set_allocated_target_info(
      ::onos::config::v2::TargetTypeVersion* target_info);
  ::onos::config::v2::TargetTypeVersion* unsafe_arena_release_target_info();

  // uint64 index = 5 [(.gogoproto.casttype) = "Index"];
  void clear_index();
  uint64_t index() const;
  void set_index(uint64_t value);
  private:
  uint64_t _internal_index() const;
  void _internal_set_index(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.config.v2.Configuration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Configuration_ValuesEntry_DoNotUse,
      std::string, ::onos::config::v2::PathValue,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> values_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_id_;
  ::onos::config::v2::ObjectMeta* meta_;
  ::onos::config::v2::ConfigurationStatus* status_;
  ::onos::config::v2::TargetTypeVersion* target_info_;
  uint64_t index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fconfig_2fv2_2fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class ConfigurationStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.config.v2.ConfigurationStatus) */ {
 public:
  inline ConfigurationStatus() : ConfigurationStatus(nullptr) {}
  ~ConfigurationStatus() override;
  explicit constexpr ConfigurationStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConfigurationStatus(const ConfigurationStatus& from);
  ConfigurationStatus(ConfigurationStatus&& from) noexcept
    : ConfigurationStatus() {
    *this = ::std::move(from);
  }

  inline ConfigurationStatus& operator=(const ConfigurationStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigurationStatus& operator=(ConfigurationStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigurationStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfigurationStatus* internal_default_instance() {
    return reinterpret_cast<const ConfigurationStatus*>(
               &_ConfigurationStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ConfigurationStatus& a, ConfigurationStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigurationStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigurationStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigurationStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConfigurationStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConfigurationStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ConfigurationStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigurationStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.config.v2.ConfigurationStatus";
  }
  protected:
  explicit ConfigurationStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ConfigurationStatus_State State;
  static constexpr State UNKNOWN =
    ConfigurationStatus_State_UNKNOWN;
  static constexpr State SYNCHRONIZING =
    ConfigurationStatus_State_SYNCHRONIZING;
  static constexpr State SYNCHRONIZED =
    ConfigurationStatus_State_SYNCHRONIZED;
  static constexpr State PERSISTED =
    ConfigurationStatus_State_PERSISTED;
  static inline bool State_IsValid(int value) {
    return ConfigurationStatus_State_IsValid(value);
  }
  static constexpr State State_MIN =
    ConfigurationStatus_State_State_MIN;
  static constexpr State State_MAX =
    ConfigurationStatus_State_State_MAX;
  static constexpr int State_ARRAYSIZE =
    ConfigurationStatus_State_State_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  State_descriptor() {
    return ConfigurationStatus_State_descriptor();
  }
  template<typename T>
  static inline const std::string& State_Name(T enum_t_value) {
    static_assert(::std::is_same<T, State>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function State_Name.");
    return ConfigurationStatus_State_Name(enum_t_value);
  }
  static inline bool State_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      State* value) {
    return ConfigurationStatus_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMastershipFieldNumber = 2,
    kProposedFieldNumber = 3,
    kCommittedFieldNumber = 4,
    kAppliedFieldNumber = 5,
    kStateFieldNumber = 1,
  };
  // .onos.config.v2.MastershipInfo mastership = 2 [(.gogoproto.nullable) = false];
  bool has_mastership() const;
  private:
  bool _internal_has_mastership() const;
  public:
  void clear_mastership();
  const ::onos::config::v2::MastershipInfo& mastership() const;
  PROTOBUF_NODISCARD ::onos::config::v2::MastershipInfo* release_mastership();
  ::onos::config::v2::MastershipInfo* mutable_mastership();
  void set_allocated_mastership(::onos::config::v2::MastershipInfo* mastership);
  private:
  const ::onos::config::v2::MastershipInfo& _internal_mastership() const;
  ::onos::config::v2::MastershipInfo* _internal_mutable_mastership();
  public:
  void unsafe_arena_set_allocated_mastership(
      ::onos::config::v2::MastershipInfo* mastership);
  ::onos::config::v2::MastershipInfo* unsafe_arena_release_mastership();

  // .onos.config.v2.ProposedConfigurationStatus proposed = 3 [(.gogoproto.nullable) = false];
  bool has_proposed() const;
  private:
  bool _internal_has_proposed() const;
  public:
  void clear_proposed();
  const ::onos::config::v2::ProposedConfigurationStatus& proposed() const;
  PROTOBUF_NODISCARD ::onos::config::v2::ProposedConfigurationStatus* release_proposed();
  ::onos::config::v2::ProposedConfigurationStatus* mutable_proposed();
  void set_allocated_proposed(::onos::config::v2::ProposedConfigurationStatus* proposed);
  private:
  const ::onos::config::v2::ProposedConfigurationStatus& _internal_proposed() const;
  ::onos::config::v2::ProposedConfigurationStatus* _internal_mutable_proposed();
  public:
  void unsafe_arena_set_allocated_proposed(
      ::onos::config::v2::ProposedConfigurationStatus* proposed);
  ::onos::config::v2::ProposedConfigurationStatus* unsafe_arena_release_proposed();

  // .onos.config.v2.CommittedConfigurationStatus committed = 4 [(.gogoproto.nullable) = false];
  bool has_committed() const;
  private:
  bool _internal_has_committed() const;
  public:
  void clear_committed();
  const ::onos::config::v2::CommittedConfigurationStatus& committed() const;
  PROTOBUF_NODISCARD ::onos::config::v2::CommittedConfigurationStatus* release_committed();
  ::onos::config::v2::CommittedConfigurationStatus* mutable_committed();
  void set_allocated_committed(::onos::config::v2::CommittedConfigurationStatus* committed);
  private:
  const ::onos::config::v2::CommittedConfigurationStatus& _internal_committed() const;
  ::onos::config::v2::CommittedConfigurationStatus* _internal_mutable_committed();
  public:
  void unsafe_arena_set_allocated_committed(
      ::onos::config::v2::CommittedConfigurationStatus* committed);
  ::onos::config::v2::CommittedConfigurationStatus* unsafe_arena_release_committed();

  // .onos.config.v2.AppliedConfigurationStatus applied = 5 [(.gogoproto.nullable) = false];
  bool has_applied() const;
  private:
  bool _internal_has_applied() const;
  public:
  void clear_applied();
  const ::onos::config::v2::AppliedConfigurationStatus& applied() const;
  PROTOBUF_NODISCARD ::onos::config::v2::AppliedConfigurationStatus* release_applied();
  ::onos::config::v2::AppliedConfigurationStatus* mutable_applied();
  void set_allocated_applied(::onos::config::v2::AppliedConfigurationStatus* applied);
  private:
  const ::onos::config::v2::AppliedConfigurationStatus& _internal_applied() const;
  ::onos::config::v2::AppliedConfigurationStatus* _internal_mutable_applied();
  public:
  void unsafe_arena_set_allocated_applied(
      ::onos::config::v2::AppliedConfigurationStatus* applied);
  ::onos::config::v2::AppliedConfigurationStatus* unsafe_arena_release_applied();

  // .onos.config.v2.ConfigurationStatus.State state = 1;
  void clear_state();
  ::onos::config::v2::ConfigurationStatus_State state() const;
  void set_state(::onos::config::v2::ConfigurationStatus_State value);
  private:
  ::onos::config::v2::ConfigurationStatus_State _internal_state() const;
  void _internal_set_state(::onos::config::v2::ConfigurationStatus_State value);
  public:

  // @@protoc_insertion_point(class_scope:onos.config.v2.ConfigurationStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::config::v2::MastershipInfo* mastership_;
  ::onos::config::v2::ProposedConfigurationStatus* proposed_;
  ::onos::config::v2::CommittedConfigurationStatus* committed_;
  ::onos::config::v2::AppliedConfigurationStatus* applied_;
  int state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fconfig_2fv2_2fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class ProposedConfigurationStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.config.v2.ProposedConfigurationStatus) */ {
 public:
  inline ProposedConfigurationStatus() : ProposedConfigurationStatus(nullptr) {}
  ~ProposedConfigurationStatus() override;
  explicit constexpr ProposedConfigurationStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProposedConfigurationStatus(const ProposedConfigurationStatus& from);
  ProposedConfigurationStatus(ProposedConfigurationStatus&& from) noexcept
    : ProposedConfigurationStatus() {
    *this = ::std::move(from);
  }

  inline ProposedConfigurationStatus& operator=(const ProposedConfigurationStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProposedConfigurationStatus& operator=(ProposedConfigurationStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProposedConfigurationStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProposedConfigurationStatus* internal_default_instance() {
    return reinterpret_cast<const ProposedConfigurationStatus*>(
               &_ProposedConfigurationStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ProposedConfigurationStatus& a, ProposedConfigurationStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ProposedConfigurationStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProposedConfigurationStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ProposedConfigurationStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ProposedConfigurationStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ProposedConfigurationStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ProposedConfigurationStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProposedConfigurationStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.config.v2.ProposedConfigurationStatus";
  }
  protected:
  explicit ProposedConfigurationStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
  };
  // uint64 index = 1 [(.gogoproto.casttype) = "Index"];
  void clear_index();
  uint64_t index() const;
  void set_index(uint64_t value);
  private:
  uint64_t _internal_index() const;
  void _internal_set_index(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.config.v2.ProposedConfigurationStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fconfig_2fv2_2fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class CommittedConfigurationStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.config.v2.CommittedConfigurationStatus) */ {
 public:
  inline CommittedConfigurationStatus() : CommittedConfigurationStatus(nullptr) {}
  ~CommittedConfigurationStatus() override;
  explicit constexpr CommittedConfigurationStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommittedConfigurationStatus(const CommittedConfigurationStatus& from);
  CommittedConfigurationStatus(CommittedConfigurationStatus&& from) noexcept
    : CommittedConfigurationStatus() {
    *this = ::std::move(from);
  }

  inline CommittedConfigurationStatus& operator=(const CommittedConfigurationStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommittedConfigurationStatus& operator=(CommittedConfigurationStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommittedConfigurationStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommittedConfigurationStatus* internal_default_instance() {
    return reinterpret_cast<const CommittedConfigurationStatus*>(
               &_CommittedConfigurationStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(CommittedConfigurationStatus& a, CommittedConfigurationStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(CommittedConfigurationStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommittedConfigurationStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommittedConfigurationStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommittedConfigurationStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommittedConfigurationStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CommittedConfigurationStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommittedConfigurationStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.config.v2.CommittedConfigurationStatus";
  }
  protected:
  explicit CommittedConfigurationStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
  };
  // uint64 index = 1 [(.gogoproto.casttype) = "Index"];
  void clear_index();
  uint64_t index() const;
  void set_index(uint64_t value);
  private:
  uint64_t _internal_index() const;
  void _internal_set_index(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.config.v2.CommittedConfigurationStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fconfig_2fv2_2fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class AppliedConfigurationStatus_ValuesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AppliedConfigurationStatus_ValuesEntry_DoNotUse, 
    std::string, ::onos::config::v2::PathValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AppliedConfigurationStatus_ValuesEntry_DoNotUse, 
    std::string, ::onos::config::v2::PathValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  AppliedConfigurationStatus_ValuesEntry_DoNotUse();
  explicit constexpr AppliedConfigurationStatus_ValuesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit AppliedConfigurationStatus_ValuesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AppliedConfigurationStatus_ValuesEntry_DoNotUse& other);
  static const AppliedConfigurationStatus_ValuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AppliedConfigurationStatus_ValuesEntry_DoNotUse*>(&_AppliedConfigurationStatus_ValuesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "onos.config.v2.AppliedConfigurationStatus.ValuesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class AppliedConfigurationStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.config.v2.AppliedConfigurationStatus) */ {
 public:
  inline AppliedConfigurationStatus() : AppliedConfigurationStatus(nullptr) {}
  ~AppliedConfigurationStatus() override;
  explicit constexpr AppliedConfigurationStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppliedConfigurationStatus(const AppliedConfigurationStatus& from);
  AppliedConfigurationStatus(AppliedConfigurationStatus&& from) noexcept
    : AppliedConfigurationStatus() {
    *this = ::std::move(from);
  }

  inline AppliedConfigurationStatus& operator=(const AppliedConfigurationStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppliedConfigurationStatus& operator=(AppliedConfigurationStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppliedConfigurationStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppliedConfigurationStatus* internal_default_instance() {
    return reinterpret_cast<const AppliedConfigurationStatus*>(
               &_AppliedConfigurationStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AppliedConfigurationStatus& a, AppliedConfigurationStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(AppliedConfigurationStatus* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppliedConfigurationStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  AppliedConfigurationStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<AppliedConfigurationStatus>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AppliedConfigurationStatus& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AppliedConfigurationStatus& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppliedConfigurationStatus* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.config.v2.AppliedConfigurationStatus";
  }
  protected:
  explicit AppliedConfigurationStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 3,
    kMastershipFieldNumber = 2,
    kIndexFieldNumber = 1,
  };
  // map<string, .onos.config.v2.PathValue> values = 3;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::config::v2::PathValue >&
      _internal_values() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::config::v2::PathValue >*
      _internal_mutable_values();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::config::v2::PathValue >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::config::v2::PathValue >*
      mutable_values();

  // .onos.config.v2.MastershipInfo mastership = 2 [(.gogoproto.nullable) = false];
  bool has_mastership() const;
  private:
  bool _internal_has_mastership() const;
  public:
  void clear_mastership();
  const ::onos::config::v2::MastershipInfo& mastership() const;
  PROTOBUF_NODISCARD ::onos::config::v2::MastershipInfo* release_mastership();
  ::onos::config::v2::MastershipInfo* mutable_mastership();
  void set_allocated_mastership(::onos::config::v2::MastershipInfo* mastership);
  private:
  const ::onos::config::v2::MastershipInfo& _internal_mastership() const;
  ::onos::config::v2::MastershipInfo* _internal_mutable_mastership();
  public:
  void unsafe_arena_set_allocated_mastership(
      ::onos::config::v2::MastershipInfo* mastership);
  ::onos::config::v2::MastershipInfo* unsafe_arena_release_mastership();

  // uint64 index = 1 [(.gogoproto.casttype) = "Index"];
  void clear_index();
  uint64_t index() const;
  void set_index(uint64_t value);
  private:
  uint64_t _internal_index() const;
  void _internal_set_index(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.config.v2.AppliedConfigurationStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AppliedConfigurationStatus_ValuesEntry_DoNotUse,
      std::string, ::onos::config::v2::PathValue,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> values_;
  ::onos::config::v2::MastershipInfo* mastership_;
  uint64_t index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fconfig_2fv2_2fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class MastershipInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.config.v2.MastershipInfo) */ {
 public:
  inline MastershipInfo() : MastershipInfo(nullptr) {}
  ~MastershipInfo() override;
  explicit constexpr MastershipInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MastershipInfo(const MastershipInfo& from);
  MastershipInfo(MastershipInfo&& from) noexcept
    : MastershipInfo() {
    *this = ::std::move(from);
  }

  inline MastershipInfo& operator=(const MastershipInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MastershipInfo& operator=(MastershipInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MastershipInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const MastershipInfo* internal_default_instance() {
    return reinterpret_cast<const MastershipInfo*>(
               &_MastershipInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MastershipInfo& a, MastershipInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MastershipInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MastershipInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MastershipInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MastershipInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MastershipInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MastershipInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MastershipInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.config.v2.MastershipInfo";
  }
  protected:
  explicit MastershipInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMasterFieldNumber = 1,
    kTermFieldNumber = 2,
  };
  // string master = 1;
  void clear_master();
  const std::string& master() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_master(ArgT0&& arg0, ArgT... args);
  std::string* mutable_master();
  PROTOBUF_NODISCARD std::string* release_master();
  void set_allocated_master(std::string* master);
  private:
  const std::string& _internal_master() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_master(const std::string& value);
  std::string* _internal_mutable_master();
  public:

  // uint64 term = 2 [(.gogoproto.casttype) = "MastershipTerm"];
  void clear_term();
  uint64_t term() const;
  void set_term(uint64_t value);
  private:
  uint64_t _internal_term() const;
  void _internal_set_term(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.config.v2.MastershipInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr master_;
  uint64_t term_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fconfig_2fv2_2fconfiguration_2eproto;
};
// -------------------------------------------------------------------

class ConfigurationEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.config.v2.ConfigurationEvent) */ {
 public:
  inline ConfigurationEvent() : ConfigurationEvent(nullptr) {}
  ~ConfigurationEvent() override;
  explicit constexpr ConfigurationEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ConfigurationEvent(const ConfigurationEvent& from);
  ConfigurationEvent(ConfigurationEvent&& from) noexcept
    : ConfigurationEvent() {
    *this = ::std::move(from);
  }

  inline ConfigurationEvent& operator=(const ConfigurationEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ConfigurationEvent& operator=(ConfigurationEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ConfigurationEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const ConfigurationEvent* internal_default_instance() {
    return reinterpret_cast<const ConfigurationEvent*>(
               &_ConfigurationEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ConfigurationEvent& a, ConfigurationEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(ConfigurationEvent* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ConfigurationEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ConfigurationEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ConfigurationEvent>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ConfigurationEvent& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ConfigurationEvent& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigurationEvent* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.config.v2.ConfigurationEvent";
  }
  protected:
  explicit ConfigurationEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ConfigurationEvent_EventType EventType;
  static constexpr EventType UNKNOWN =
    ConfigurationEvent_EventType_UNKNOWN;
  static constexpr EventType CREATED =
    ConfigurationEvent_EventType_CREATED;
  static constexpr EventType UPDATED =
    ConfigurationEvent_EventType_UPDATED;
  static constexpr EventType DELETED =
    ConfigurationEvent_EventType_DELETED;
  static constexpr EventType REPLAYED =
    ConfigurationEvent_EventType_REPLAYED;
  static inline bool EventType_IsValid(int value) {
    return ConfigurationEvent_EventType_IsValid(value);
  }
  static constexpr EventType EventType_MIN =
    ConfigurationEvent_EventType_EventType_MIN;
  static constexpr EventType EventType_MAX =
    ConfigurationEvent_EventType_EventType_MAX;
  static constexpr int EventType_ARRAYSIZE =
    ConfigurationEvent_EventType_EventType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EventType_descriptor() {
    return ConfigurationEvent_EventType_descriptor();
  }
  template<typename T>
  static inline const std::string& EventType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EventType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EventType_Name.");
    return ConfigurationEvent_EventType_Name(enum_t_value);
  }
  static inline bool EventType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EventType* value) {
    return ConfigurationEvent_EventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kConfigurationFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // .onos.config.v2.Configuration configuration = 2 [(.gogoproto.nullable) = false];
  bool has_configuration() const;
  private:
  bool _internal_has_configuration() const;
  public:
  void clear_configuration();
  const ::onos::config::v2::Configuration& configuration() const;
  PROTOBUF_NODISCARD ::onos::config::v2::Configuration* release_configuration();
  ::onos::config::v2::Configuration* mutable_configuration();
  void set_allocated_configuration(::onos::config::v2::Configuration* configuration);
  private:
  const ::onos::config::v2::Configuration& _internal_configuration() const;
  ::onos::config::v2::Configuration* _internal_mutable_configuration();
  public:
  void unsafe_arena_set_allocated_configuration(
      ::onos::config::v2::Configuration* configuration);
  ::onos::config::v2::Configuration* unsafe_arena_release_configuration();

  // .onos.config.v2.ConfigurationEvent.EventType type = 1;
  void clear_type();
  ::onos::config::v2::ConfigurationEvent_EventType type() const;
  void set_type(::onos::config::v2::ConfigurationEvent_EventType value);
  private:
  ::onos::config::v2::ConfigurationEvent_EventType _internal_type() const;
  void _internal_set_type(::onos::config::v2::ConfigurationEvent_EventType value);
  public:

  // @@protoc_insertion_point(class_scope:onos.config.v2.ConfigurationEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::config::v2::Configuration* configuration_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fconfig_2fv2_2fconfiguration_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// Configuration

// .onos.config.v2.ObjectMeta meta = 1 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
inline bool Configuration::_internal_has_meta() const {
  return this != internal_default_instance() && meta_ != nullptr;
}
inline bool Configuration::has_meta() const {
  return _internal_has_meta();
}
inline const ::onos::config::v2::ObjectMeta& Configuration::_internal_meta() const {
  const ::onos::config::v2::ObjectMeta* p = meta_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::config::v2::ObjectMeta&>(
      ::onos::config::v2::_ObjectMeta_default_instance_);
}
inline const ::onos::config::v2::ObjectMeta& Configuration::meta() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.Configuration.meta)
  return _internal_meta();
}
inline void Configuration::unsafe_arena_set_allocated_meta(
    ::onos::config::v2::ObjectMeta* meta) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  meta_ = meta;
  if (meta) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.config.v2.Configuration.meta)
}
inline ::onos::config::v2::ObjectMeta* Configuration::release_meta() {
  
  ::onos::config::v2::ObjectMeta* temp = meta_;
  meta_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::config::v2::ObjectMeta* Configuration::unsafe_arena_release_meta() {
  // @@protoc_insertion_point(field_release:onos.config.v2.Configuration.meta)
  
  ::onos::config::v2::ObjectMeta* temp = meta_;
  meta_ = nullptr;
  return temp;
}
inline ::onos::config::v2::ObjectMeta* Configuration::_internal_mutable_meta() {
  
  if (meta_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::config::v2::ObjectMeta>(GetArenaForAllocation());
    meta_ = p;
  }
  return meta_;
}
inline ::onos::config::v2::ObjectMeta* Configuration::mutable_meta() {
  ::onos::config::v2::ObjectMeta* _msg = _internal_mutable_meta();
  // @@protoc_insertion_point(field_mutable:onos.config.v2.Configuration.meta)
  return _msg;
}
inline void Configuration::set_allocated_meta(::onos::config::v2::ObjectMeta* meta) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta_);
  }
  if (meta) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(meta));
    if (message_arena != submessage_arena) {
      meta = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, meta, submessage_arena);
    }
    
  } else {
    
  }
  meta_ = meta;
  // @@protoc_insertion_point(field_set_allocated:onos.config.v2.Configuration.meta)
}

// string id = 2 [(.gogoproto.customname) = "ID", (.gogoproto.casttype) = "ConfigurationID"];
inline void Configuration::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Configuration::id() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.Configuration.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Configuration::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.config.v2.Configuration.id)
}
inline std::string* Configuration::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:onos.config.v2.Configuration.id)
  return _s;
}
inline const std::string& Configuration::_internal_id() const {
  return id_.Get();
}
inline void Configuration::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Configuration::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Configuration::release_id() {
  // @@protoc_insertion_point(field_release:onos.config.v2.Configuration.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Configuration::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.config.v2.Configuration.id)
}

// string target_id = 3 [(.gogoproto.customname) = "TargetID", (.gogoproto.casttype) = "TargetID"];
inline void Configuration::clear_target_id() {
  target_id_.ClearToEmpty();
}
inline const std::string& Configuration::target_id() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.Configuration.target_id)
  return _internal_target_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Configuration::set_target_id(ArgT0&& arg0, ArgT... args) {
 
 target_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.config.v2.Configuration.target_id)
}
inline std::string* Configuration::mutable_target_id() {
  std::string* _s = _internal_mutable_target_id();
  // @@protoc_insertion_point(field_mutable:onos.config.v2.Configuration.target_id)
  return _s;
}
inline const std::string& Configuration::_internal_target_id() const {
  return target_id_.Get();
}
inline void Configuration::_internal_set_target_id(const std::string& value) {
  
  target_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Configuration::_internal_mutable_target_id() {
  
  return target_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Configuration::release_target_id() {
  // @@protoc_insertion_point(field_release:onos.config.v2.Configuration.target_id)
  return target_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Configuration::set_allocated_target_id(std::string* target_id) {
  if (target_id != nullptr) {
    
  } else {
    
  }
  target_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (target_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    target_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.config.v2.Configuration.target_id)
}

// map<string, .onos.config.v2.PathValue> values = 4;
inline int Configuration::_internal_values_size() const {
  return values_.size();
}
inline int Configuration::values_size() const {
  return _internal_values_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::config::v2::PathValue >&
Configuration::_internal_values() const {
  return values_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::config::v2::PathValue >&
Configuration::values() const {
  // @@protoc_insertion_point(field_map:onos.config.v2.Configuration.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::config::v2::PathValue >*
Configuration::_internal_mutable_values() {
  return values_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::config::v2::PathValue >*
Configuration::mutable_values() {
  // @@protoc_insertion_point(field_mutable_map:onos.config.v2.Configuration.values)
  return _internal_mutable_values();
}

// uint64 index = 5 [(.gogoproto.casttype) = "Index"];
inline void Configuration::clear_index() {
  index_ = uint64_t{0u};
}
inline uint64_t Configuration::_internal_index() const {
  return index_;
}
inline uint64_t Configuration::index() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.Configuration.index)
  return _internal_index();
}
inline void Configuration::_internal_set_index(uint64_t value) {
  
  index_ = value;
}
inline void Configuration::set_index(uint64_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:onos.config.v2.Configuration.index)
}

// .onos.config.v2.ConfigurationStatus status = 6 [(.gogoproto.nullable) = false];
inline bool Configuration::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool Configuration::has_status() const {
  return _internal_has_status();
}
inline void Configuration::clear_status() {
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
}
inline const ::onos::config::v2::ConfigurationStatus& Configuration::_internal_status() const {
  const ::onos::config::v2::ConfigurationStatus* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::config::v2::ConfigurationStatus&>(
      ::onos::config::v2::_ConfigurationStatus_default_instance_);
}
inline const ::onos::config::v2::ConfigurationStatus& Configuration::status() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.Configuration.status)
  return _internal_status();
}
inline void Configuration::unsafe_arena_set_allocated_status(
    ::onos::config::v2::ConfigurationStatus* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.config.v2.Configuration.status)
}
inline ::onos::config::v2::ConfigurationStatus* Configuration::release_status() {
  
  ::onos::config::v2::ConfigurationStatus* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::config::v2::ConfigurationStatus* Configuration::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:onos.config.v2.Configuration.status)
  
  ::onos::config::v2::ConfigurationStatus* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::onos::config::v2::ConfigurationStatus* Configuration::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::config::v2::ConfigurationStatus>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::onos::config::v2::ConfigurationStatus* Configuration::mutable_status() {
  ::onos::config::v2::ConfigurationStatus* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:onos.config.v2.Configuration.status)
  return _msg;
}
inline void Configuration::set_allocated_status(::onos::config::v2::ConfigurationStatus* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete status_;
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::config::v2::ConfigurationStatus>::GetOwningArena(status);
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:onos.config.v2.Configuration.status)
}

// .onos.config.v2.TargetTypeVersion target_info = 7 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
inline bool Configuration::_internal_has_target_info() const {
  return this != internal_default_instance() && target_info_ != nullptr;
}
inline bool Configuration::has_target_info() const {
  return _internal_has_target_info();
}
inline const ::onos::config::v2::TargetTypeVersion& Configuration::_internal_target_info() const {
  const ::onos::config::v2::TargetTypeVersion* p = target_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::config::v2::TargetTypeVersion&>(
      ::onos::config::v2::_TargetTypeVersion_default_instance_);
}
inline const ::onos::config::v2::TargetTypeVersion& Configuration::target_info() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.Configuration.target_info)
  return _internal_target_info();
}
inline void Configuration::unsafe_arena_set_allocated_target_info(
    ::onos::config::v2::TargetTypeVersion* target_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_info_);
  }
  target_info_ = target_info;
  if (target_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.config.v2.Configuration.target_info)
}
inline ::onos::config::v2::TargetTypeVersion* Configuration::release_target_info() {
  
  ::onos::config::v2::TargetTypeVersion* temp = target_info_;
  target_info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::config::v2::TargetTypeVersion* Configuration::unsafe_arena_release_target_info() {
  // @@protoc_insertion_point(field_release:onos.config.v2.Configuration.target_info)
  
  ::onos::config::v2::TargetTypeVersion* temp = target_info_;
  target_info_ = nullptr;
  return temp;
}
inline ::onos::config::v2::TargetTypeVersion* Configuration::_internal_mutable_target_info() {
  
  if (target_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::config::v2::TargetTypeVersion>(GetArenaForAllocation());
    target_info_ = p;
  }
  return target_info_;
}
inline ::onos::config::v2::TargetTypeVersion* Configuration::mutable_target_info() {
  ::onos::config::v2::TargetTypeVersion* _msg = _internal_mutable_target_info();
  // @@protoc_insertion_point(field_mutable:onos.config.v2.Configuration.target_info)
  return _msg;
}
inline void Configuration::set_allocated_target_info(::onos::config::v2::TargetTypeVersion* target_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_info_);
  }
  if (target_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_info));
    if (message_arena != submessage_arena) {
      target_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_info, submessage_arena);
    }
    
  } else {
    
  }
  target_info_ = target_info;
  // @@protoc_insertion_point(field_set_allocated:onos.config.v2.Configuration.target_info)
}

// -------------------------------------------------------------------

// ConfigurationStatus

// .onos.config.v2.ConfigurationStatus.State state = 1;
inline void ConfigurationStatus::clear_state() {
  state_ = 0;
}
inline ::onos::config::v2::ConfigurationStatus_State ConfigurationStatus::_internal_state() const {
  return static_cast< ::onos::config::v2::ConfigurationStatus_State >(state_);
}
inline ::onos::config::v2::ConfigurationStatus_State ConfigurationStatus::state() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.ConfigurationStatus.state)
  return _internal_state();
}
inline void ConfigurationStatus::_internal_set_state(::onos::config::v2::ConfigurationStatus_State value) {
  
  state_ = value;
}
inline void ConfigurationStatus::set_state(::onos::config::v2::ConfigurationStatus_State value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:onos.config.v2.ConfigurationStatus.state)
}

// .onos.config.v2.MastershipInfo mastership = 2 [(.gogoproto.nullable) = false];
inline bool ConfigurationStatus::_internal_has_mastership() const {
  return this != internal_default_instance() && mastership_ != nullptr;
}
inline bool ConfigurationStatus::has_mastership() const {
  return _internal_has_mastership();
}
inline void ConfigurationStatus::clear_mastership() {
  if (GetArenaForAllocation() == nullptr && mastership_ != nullptr) {
    delete mastership_;
  }
  mastership_ = nullptr;
}
inline const ::onos::config::v2::MastershipInfo& ConfigurationStatus::_internal_mastership() const {
  const ::onos::config::v2::MastershipInfo* p = mastership_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::config::v2::MastershipInfo&>(
      ::onos::config::v2::_MastershipInfo_default_instance_);
}
inline const ::onos::config::v2::MastershipInfo& ConfigurationStatus::mastership() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.ConfigurationStatus.mastership)
  return _internal_mastership();
}
inline void ConfigurationStatus::unsafe_arena_set_allocated_mastership(
    ::onos::config::v2::MastershipInfo* mastership) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mastership_);
  }
  mastership_ = mastership;
  if (mastership) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.config.v2.ConfigurationStatus.mastership)
}
inline ::onos::config::v2::MastershipInfo* ConfigurationStatus::release_mastership() {
  
  ::onos::config::v2::MastershipInfo* temp = mastership_;
  mastership_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::config::v2::MastershipInfo* ConfigurationStatus::unsafe_arena_release_mastership() {
  // @@protoc_insertion_point(field_release:onos.config.v2.ConfigurationStatus.mastership)
  
  ::onos::config::v2::MastershipInfo* temp = mastership_;
  mastership_ = nullptr;
  return temp;
}
inline ::onos::config::v2::MastershipInfo* ConfigurationStatus::_internal_mutable_mastership() {
  
  if (mastership_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::config::v2::MastershipInfo>(GetArenaForAllocation());
    mastership_ = p;
  }
  return mastership_;
}
inline ::onos::config::v2::MastershipInfo* ConfigurationStatus::mutable_mastership() {
  ::onos::config::v2::MastershipInfo* _msg = _internal_mutable_mastership();
  // @@protoc_insertion_point(field_mutable:onos.config.v2.ConfigurationStatus.mastership)
  return _msg;
}
inline void ConfigurationStatus::set_allocated_mastership(::onos::config::v2::MastershipInfo* mastership) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mastership_;
  }
  if (mastership) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::config::v2::MastershipInfo>::GetOwningArena(mastership);
    if (message_arena != submessage_arena) {
      mastership = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mastership, submessage_arena);
    }
    
  } else {
    
  }
  mastership_ = mastership;
  // @@protoc_insertion_point(field_set_allocated:onos.config.v2.ConfigurationStatus.mastership)
}

// .onos.config.v2.ProposedConfigurationStatus proposed = 3 [(.gogoproto.nullable) = false];
inline bool ConfigurationStatus::_internal_has_proposed() const {
  return this != internal_default_instance() && proposed_ != nullptr;
}
inline bool ConfigurationStatus::has_proposed() const {
  return _internal_has_proposed();
}
inline void ConfigurationStatus::clear_proposed() {
  if (GetArenaForAllocation() == nullptr && proposed_ != nullptr) {
    delete proposed_;
  }
  proposed_ = nullptr;
}
inline const ::onos::config::v2::ProposedConfigurationStatus& ConfigurationStatus::_internal_proposed() const {
  const ::onos::config::v2::ProposedConfigurationStatus* p = proposed_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::config::v2::ProposedConfigurationStatus&>(
      ::onos::config::v2::_ProposedConfigurationStatus_default_instance_);
}
inline const ::onos::config::v2::ProposedConfigurationStatus& ConfigurationStatus::proposed() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.ConfigurationStatus.proposed)
  return _internal_proposed();
}
inline void ConfigurationStatus::unsafe_arena_set_allocated_proposed(
    ::onos::config::v2::ProposedConfigurationStatus* proposed) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(proposed_);
  }
  proposed_ = proposed;
  if (proposed) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.config.v2.ConfigurationStatus.proposed)
}
inline ::onos::config::v2::ProposedConfigurationStatus* ConfigurationStatus::release_proposed() {
  
  ::onos::config::v2::ProposedConfigurationStatus* temp = proposed_;
  proposed_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::config::v2::ProposedConfigurationStatus* ConfigurationStatus::unsafe_arena_release_proposed() {
  // @@protoc_insertion_point(field_release:onos.config.v2.ConfigurationStatus.proposed)
  
  ::onos::config::v2::ProposedConfigurationStatus* temp = proposed_;
  proposed_ = nullptr;
  return temp;
}
inline ::onos::config::v2::ProposedConfigurationStatus* ConfigurationStatus::_internal_mutable_proposed() {
  
  if (proposed_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::config::v2::ProposedConfigurationStatus>(GetArenaForAllocation());
    proposed_ = p;
  }
  return proposed_;
}
inline ::onos::config::v2::ProposedConfigurationStatus* ConfigurationStatus::mutable_proposed() {
  ::onos::config::v2::ProposedConfigurationStatus* _msg = _internal_mutable_proposed();
  // @@protoc_insertion_point(field_mutable:onos.config.v2.ConfigurationStatus.proposed)
  return _msg;
}
inline void ConfigurationStatus::set_allocated_proposed(::onos::config::v2::ProposedConfigurationStatus* proposed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete proposed_;
  }
  if (proposed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::config::v2::ProposedConfigurationStatus>::GetOwningArena(proposed);
    if (message_arena != submessage_arena) {
      proposed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, proposed, submessage_arena);
    }
    
  } else {
    
  }
  proposed_ = proposed;
  // @@protoc_insertion_point(field_set_allocated:onos.config.v2.ConfigurationStatus.proposed)
}

// .onos.config.v2.CommittedConfigurationStatus committed = 4 [(.gogoproto.nullable) = false];
inline bool ConfigurationStatus::_internal_has_committed() const {
  return this != internal_default_instance() && committed_ != nullptr;
}
inline bool ConfigurationStatus::has_committed() const {
  return _internal_has_committed();
}
inline void ConfigurationStatus::clear_committed() {
  if (GetArenaForAllocation() == nullptr && committed_ != nullptr) {
    delete committed_;
  }
  committed_ = nullptr;
}
inline const ::onos::config::v2::CommittedConfigurationStatus& ConfigurationStatus::_internal_committed() const {
  const ::onos::config::v2::CommittedConfigurationStatus* p = committed_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::config::v2::CommittedConfigurationStatus&>(
      ::onos::config::v2::_CommittedConfigurationStatus_default_instance_);
}
inline const ::onos::config::v2::CommittedConfigurationStatus& ConfigurationStatus::committed() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.ConfigurationStatus.committed)
  return _internal_committed();
}
inline void ConfigurationStatus::unsafe_arena_set_allocated_committed(
    ::onos::config::v2::CommittedConfigurationStatus* committed) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(committed_);
  }
  committed_ = committed;
  if (committed) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.config.v2.ConfigurationStatus.committed)
}
inline ::onos::config::v2::CommittedConfigurationStatus* ConfigurationStatus::release_committed() {
  
  ::onos::config::v2::CommittedConfigurationStatus* temp = committed_;
  committed_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::config::v2::CommittedConfigurationStatus* ConfigurationStatus::unsafe_arena_release_committed() {
  // @@protoc_insertion_point(field_release:onos.config.v2.ConfigurationStatus.committed)
  
  ::onos::config::v2::CommittedConfigurationStatus* temp = committed_;
  committed_ = nullptr;
  return temp;
}
inline ::onos::config::v2::CommittedConfigurationStatus* ConfigurationStatus::_internal_mutable_committed() {
  
  if (committed_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::config::v2::CommittedConfigurationStatus>(GetArenaForAllocation());
    committed_ = p;
  }
  return committed_;
}
inline ::onos::config::v2::CommittedConfigurationStatus* ConfigurationStatus::mutable_committed() {
  ::onos::config::v2::CommittedConfigurationStatus* _msg = _internal_mutable_committed();
  // @@protoc_insertion_point(field_mutable:onos.config.v2.ConfigurationStatus.committed)
  return _msg;
}
inline void ConfigurationStatus::set_allocated_committed(::onos::config::v2::CommittedConfigurationStatus* committed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete committed_;
  }
  if (committed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::config::v2::CommittedConfigurationStatus>::GetOwningArena(committed);
    if (message_arena != submessage_arena) {
      committed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, committed, submessage_arena);
    }
    
  } else {
    
  }
  committed_ = committed;
  // @@protoc_insertion_point(field_set_allocated:onos.config.v2.ConfigurationStatus.committed)
}

// .onos.config.v2.AppliedConfigurationStatus applied = 5 [(.gogoproto.nullable) = false];
inline bool ConfigurationStatus::_internal_has_applied() const {
  return this != internal_default_instance() && applied_ != nullptr;
}
inline bool ConfigurationStatus::has_applied() const {
  return _internal_has_applied();
}
inline void ConfigurationStatus::clear_applied() {
  if (GetArenaForAllocation() == nullptr && applied_ != nullptr) {
    delete applied_;
  }
  applied_ = nullptr;
}
inline const ::onos::config::v2::AppliedConfigurationStatus& ConfigurationStatus::_internal_applied() const {
  const ::onos::config::v2::AppliedConfigurationStatus* p = applied_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::config::v2::AppliedConfigurationStatus&>(
      ::onos::config::v2::_AppliedConfigurationStatus_default_instance_);
}
inline const ::onos::config::v2::AppliedConfigurationStatus& ConfigurationStatus::applied() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.ConfigurationStatus.applied)
  return _internal_applied();
}
inline void ConfigurationStatus::unsafe_arena_set_allocated_applied(
    ::onos::config::v2::AppliedConfigurationStatus* applied) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(applied_);
  }
  applied_ = applied;
  if (applied) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.config.v2.ConfigurationStatus.applied)
}
inline ::onos::config::v2::AppliedConfigurationStatus* ConfigurationStatus::release_applied() {
  
  ::onos::config::v2::AppliedConfigurationStatus* temp = applied_;
  applied_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::config::v2::AppliedConfigurationStatus* ConfigurationStatus::unsafe_arena_release_applied() {
  // @@protoc_insertion_point(field_release:onos.config.v2.ConfigurationStatus.applied)
  
  ::onos::config::v2::AppliedConfigurationStatus* temp = applied_;
  applied_ = nullptr;
  return temp;
}
inline ::onos::config::v2::AppliedConfigurationStatus* ConfigurationStatus::_internal_mutable_applied() {
  
  if (applied_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::config::v2::AppliedConfigurationStatus>(GetArenaForAllocation());
    applied_ = p;
  }
  return applied_;
}
inline ::onos::config::v2::AppliedConfigurationStatus* ConfigurationStatus::mutable_applied() {
  ::onos::config::v2::AppliedConfigurationStatus* _msg = _internal_mutable_applied();
  // @@protoc_insertion_point(field_mutable:onos.config.v2.ConfigurationStatus.applied)
  return _msg;
}
inline void ConfigurationStatus::set_allocated_applied(::onos::config::v2::AppliedConfigurationStatus* applied) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete applied_;
  }
  if (applied) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::config::v2::AppliedConfigurationStatus>::GetOwningArena(applied);
    if (message_arena != submessage_arena) {
      applied = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, applied, submessage_arena);
    }
    
  } else {
    
  }
  applied_ = applied;
  // @@protoc_insertion_point(field_set_allocated:onos.config.v2.ConfigurationStatus.applied)
}

// -------------------------------------------------------------------

// ProposedConfigurationStatus

// uint64 index = 1 [(.gogoproto.casttype) = "Index"];
inline void ProposedConfigurationStatus::clear_index() {
  index_ = uint64_t{0u};
}
inline uint64_t ProposedConfigurationStatus::_internal_index() const {
  return index_;
}
inline uint64_t ProposedConfigurationStatus::index() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.ProposedConfigurationStatus.index)
  return _internal_index();
}
inline void ProposedConfigurationStatus::_internal_set_index(uint64_t value) {
  
  index_ = value;
}
inline void ProposedConfigurationStatus::set_index(uint64_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:onos.config.v2.ProposedConfigurationStatus.index)
}

// -------------------------------------------------------------------

// CommittedConfigurationStatus

// uint64 index = 1 [(.gogoproto.casttype) = "Index"];
inline void CommittedConfigurationStatus::clear_index() {
  index_ = uint64_t{0u};
}
inline uint64_t CommittedConfigurationStatus::_internal_index() const {
  return index_;
}
inline uint64_t CommittedConfigurationStatus::index() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.CommittedConfigurationStatus.index)
  return _internal_index();
}
inline void CommittedConfigurationStatus::_internal_set_index(uint64_t value) {
  
  index_ = value;
}
inline void CommittedConfigurationStatus::set_index(uint64_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:onos.config.v2.CommittedConfigurationStatus.index)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AppliedConfigurationStatus

// uint64 index = 1 [(.gogoproto.casttype) = "Index"];
inline void AppliedConfigurationStatus::clear_index() {
  index_ = uint64_t{0u};
}
inline uint64_t AppliedConfigurationStatus::_internal_index() const {
  return index_;
}
inline uint64_t AppliedConfigurationStatus::index() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.AppliedConfigurationStatus.index)
  return _internal_index();
}
inline void AppliedConfigurationStatus::_internal_set_index(uint64_t value) {
  
  index_ = value;
}
inline void AppliedConfigurationStatus::set_index(uint64_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:onos.config.v2.AppliedConfigurationStatus.index)
}

// .onos.config.v2.MastershipInfo mastership = 2 [(.gogoproto.nullable) = false];
inline bool AppliedConfigurationStatus::_internal_has_mastership() const {
  return this != internal_default_instance() && mastership_ != nullptr;
}
inline bool AppliedConfigurationStatus::has_mastership() const {
  return _internal_has_mastership();
}
inline void AppliedConfigurationStatus::clear_mastership() {
  if (GetArenaForAllocation() == nullptr && mastership_ != nullptr) {
    delete mastership_;
  }
  mastership_ = nullptr;
}
inline const ::onos::config::v2::MastershipInfo& AppliedConfigurationStatus::_internal_mastership() const {
  const ::onos::config::v2::MastershipInfo* p = mastership_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::config::v2::MastershipInfo&>(
      ::onos::config::v2::_MastershipInfo_default_instance_);
}
inline const ::onos::config::v2::MastershipInfo& AppliedConfigurationStatus::mastership() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.AppliedConfigurationStatus.mastership)
  return _internal_mastership();
}
inline void AppliedConfigurationStatus::unsafe_arena_set_allocated_mastership(
    ::onos::config::v2::MastershipInfo* mastership) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mastership_);
  }
  mastership_ = mastership;
  if (mastership) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.config.v2.AppliedConfigurationStatus.mastership)
}
inline ::onos::config::v2::MastershipInfo* AppliedConfigurationStatus::release_mastership() {
  
  ::onos::config::v2::MastershipInfo* temp = mastership_;
  mastership_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::config::v2::MastershipInfo* AppliedConfigurationStatus::unsafe_arena_release_mastership() {
  // @@protoc_insertion_point(field_release:onos.config.v2.AppliedConfigurationStatus.mastership)
  
  ::onos::config::v2::MastershipInfo* temp = mastership_;
  mastership_ = nullptr;
  return temp;
}
inline ::onos::config::v2::MastershipInfo* AppliedConfigurationStatus::_internal_mutable_mastership() {
  
  if (mastership_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::config::v2::MastershipInfo>(GetArenaForAllocation());
    mastership_ = p;
  }
  return mastership_;
}
inline ::onos::config::v2::MastershipInfo* AppliedConfigurationStatus::mutable_mastership() {
  ::onos::config::v2::MastershipInfo* _msg = _internal_mutable_mastership();
  // @@protoc_insertion_point(field_mutable:onos.config.v2.AppliedConfigurationStatus.mastership)
  return _msg;
}
inline void AppliedConfigurationStatus::set_allocated_mastership(::onos::config::v2::MastershipInfo* mastership) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mastership_;
  }
  if (mastership) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::config::v2::MastershipInfo>::GetOwningArena(mastership);
    if (message_arena != submessage_arena) {
      mastership = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mastership, submessage_arena);
    }
    
  } else {
    
  }
  mastership_ = mastership;
  // @@protoc_insertion_point(field_set_allocated:onos.config.v2.AppliedConfigurationStatus.mastership)
}

// map<string, .onos.config.v2.PathValue> values = 3;
inline int AppliedConfigurationStatus::_internal_values_size() const {
  return values_.size();
}
inline int AppliedConfigurationStatus::values_size() const {
  return _internal_values_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::config::v2::PathValue >&
AppliedConfigurationStatus::_internal_values() const {
  return values_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::config::v2::PathValue >&
AppliedConfigurationStatus::values() const {
  // @@protoc_insertion_point(field_map:onos.config.v2.AppliedConfigurationStatus.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::config::v2::PathValue >*
AppliedConfigurationStatus::_internal_mutable_values() {
  return values_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::onos::config::v2::PathValue >*
AppliedConfigurationStatus::mutable_values() {
  // @@protoc_insertion_point(field_mutable_map:onos.config.v2.AppliedConfigurationStatus.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// MastershipInfo

// string master = 1;
inline void MastershipInfo::clear_master() {
  master_.ClearToEmpty();
}
inline const std::string& MastershipInfo::master() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.MastershipInfo.master)
  return _internal_master();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MastershipInfo::set_master(ArgT0&& arg0, ArgT... args) {
 
 master_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.config.v2.MastershipInfo.master)
}
inline std::string* MastershipInfo::mutable_master() {
  std::string* _s = _internal_mutable_master();
  // @@protoc_insertion_point(field_mutable:onos.config.v2.MastershipInfo.master)
  return _s;
}
inline const std::string& MastershipInfo::_internal_master() const {
  return master_.Get();
}
inline void MastershipInfo::_internal_set_master(const std::string& value) {
  
  master_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MastershipInfo::_internal_mutable_master() {
  
  return master_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MastershipInfo::release_master() {
  // @@protoc_insertion_point(field_release:onos.config.v2.MastershipInfo.master)
  return master_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MastershipInfo::set_allocated_master(std::string* master) {
  if (master != nullptr) {
    
  } else {
    
  }
  master_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), master,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (master_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    master_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.config.v2.MastershipInfo.master)
}

// uint64 term = 2 [(.gogoproto.casttype) = "MastershipTerm"];
inline void MastershipInfo::clear_term() {
  term_ = uint64_t{0u};
}
inline uint64_t MastershipInfo::_internal_term() const {
  return term_;
}
inline uint64_t MastershipInfo::term() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.MastershipInfo.term)
  return _internal_term();
}
inline void MastershipInfo::_internal_set_term(uint64_t value) {
  
  term_ = value;
}
inline void MastershipInfo::set_term(uint64_t value) {
  _internal_set_term(value);
  // @@protoc_insertion_point(field_set:onos.config.v2.MastershipInfo.term)
}

// -------------------------------------------------------------------

// ConfigurationEvent

// .onos.config.v2.ConfigurationEvent.EventType type = 1;
inline void ConfigurationEvent::clear_type() {
  type_ = 0;
}
inline ::onos::config::v2::ConfigurationEvent_EventType ConfigurationEvent::_internal_type() const {
  return static_cast< ::onos::config::v2::ConfigurationEvent_EventType >(type_);
}
inline ::onos::config::v2::ConfigurationEvent_EventType ConfigurationEvent::type() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.ConfigurationEvent.type)
  return _internal_type();
}
inline void ConfigurationEvent::_internal_set_type(::onos::config::v2::ConfigurationEvent_EventType value) {
  
  type_ = value;
}
inline void ConfigurationEvent::set_type(::onos::config::v2::ConfigurationEvent_EventType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:onos.config.v2.ConfigurationEvent.type)
}

// .onos.config.v2.Configuration configuration = 2 [(.gogoproto.nullable) = false];
inline bool ConfigurationEvent::_internal_has_configuration() const {
  return this != internal_default_instance() && configuration_ != nullptr;
}
inline bool ConfigurationEvent::has_configuration() const {
  return _internal_has_configuration();
}
inline void ConfigurationEvent::clear_configuration() {
  if (GetArenaForAllocation() == nullptr && configuration_ != nullptr) {
    delete configuration_;
  }
  configuration_ = nullptr;
}
inline const ::onos::config::v2::Configuration& ConfigurationEvent::_internal_configuration() const {
  const ::onos::config::v2::Configuration* p = configuration_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::config::v2::Configuration&>(
      ::onos::config::v2::_Configuration_default_instance_);
}
inline const ::onos::config::v2::Configuration& ConfigurationEvent::configuration() const {
  // @@protoc_insertion_point(field_get:onos.config.v2.ConfigurationEvent.configuration)
  return _internal_configuration();
}
inline void ConfigurationEvent::unsafe_arena_set_allocated_configuration(
    ::onos::config::v2::Configuration* configuration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(configuration_);
  }
  configuration_ = configuration;
  if (configuration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.config.v2.ConfigurationEvent.configuration)
}
inline ::onos::config::v2::Configuration* ConfigurationEvent::release_configuration() {
  
  ::onos::config::v2::Configuration* temp = configuration_;
  configuration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::config::v2::Configuration* ConfigurationEvent::unsafe_arena_release_configuration() {
  // @@protoc_insertion_point(field_release:onos.config.v2.ConfigurationEvent.configuration)
  
  ::onos::config::v2::Configuration* temp = configuration_;
  configuration_ = nullptr;
  return temp;
}
inline ::onos::config::v2::Configuration* ConfigurationEvent::_internal_mutable_configuration() {
  
  if (configuration_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::config::v2::Configuration>(GetArenaForAllocation());
    configuration_ = p;
  }
  return configuration_;
}
inline ::onos::config::v2::Configuration* ConfigurationEvent::mutable_configuration() {
  ::onos::config::v2::Configuration* _msg = _internal_mutable_configuration();
  // @@protoc_insertion_point(field_mutable:onos.config.v2.ConfigurationEvent.configuration)
  return _msg;
}
inline void ConfigurationEvent::set_allocated_configuration(::onos::config::v2::Configuration* configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete configuration_;
  }
  if (configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::config::v2::Configuration>::GetOwningArena(configuration);
    if (message_arena != submessage_arena) {
      configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, configuration, submessage_arena);
    }
    
  } else {
    
  }
  configuration_ = configuration;
  // @@protoc_insertion_point(field_set_allocated:onos.config.v2.ConfigurationEvent.configuration)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v2
}  // namespace config
}  // namespace onos

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::onos::config::v2::ConfigurationStatus_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::onos::config::v2::ConfigurationStatus_State>() {
  return ::onos::config::v2::ConfigurationStatus_State_descriptor();
}
template <> struct is_proto_enum< ::onos::config::v2::ConfigurationEvent_EventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::onos::config::v2::ConfigurationEvent_EventType>() {
  return ::onos::config::v2::ConfigurationEvent_EventType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_onos_2fconfig_2fv2_2fconfiguration_2eproto
