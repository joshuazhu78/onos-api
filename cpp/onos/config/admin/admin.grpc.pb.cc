// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: onos/config/admin/admin.proto

#include "onos/config/admin/admin.pb.h"
#include "onos/config/admin/admin.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace onos {
namespace config {
namespace admin {

static const char* ConfigAdminService_method_names[] = {
  "/onos.config.admin.ConfigAdminService/ListRegisteredModels",
  "/onos.config.admin.ConfigAdminService/RollbackTransaction",
};

std::unique_ptr< ConfigAdminService::Stub> ConfigAdminService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ConfigAdminService::Stub> stub(new ConfigAdminService::Stub(channel, options));
  return stub;
}

ConfigAdminService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ListRegisteredModels_(ConfigAdminService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_RollbackTransaction_(ConfigAdminService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::onos::config::admin::ModelPlugin>* ConfigAdminService::Stub::ListRegisteredModelsRaw(::grpc::ClientContext* context, const ::onos::config::admin::ListModelsRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::onos::config::admin::ModelPlugin>::Create(channel_.get(), rpcmethod_ListRegisteredModels_, context, request);
}

void ConfigAdminService::Stub::async::ListRegisteredModels(::grpc::ClientContext* context, const ::onos::config::admin::ListModelsRequest* request, ::grpc::ClientReadReactor< ::onos::config::admin::ModelPlugin>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::onos::config::admin::ModelPlugin>::Create(stub_->channel_.get(), stub_->rpcmethod_ListRegisteredModels_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::onos::config::admin::ModelPlugin>* ConfigAdminService::Stub::AsyncListRegisteredModelsRaw(::grpc::ClientContext* context, const ::onos::config::admin::ListModelsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::onos::config::admin::ModelPlugin>::Create(channel_.get(), cq, rpcmethod_ListRegisteredModels_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::onos::config::admin::ModelPlugin>* ConfigAdminService::Stub::PrepareAsyncListRegisteredModelsRaw(::grpc::ClientContext* context, const ::onos::config::admin::ListModelsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::onos::config::admin::ModelPlugin>::Create(channel_.get(), cq, rpcmethod_ListRegisteredModels_, context, request, false, nullptr);
}

::grpc::Status ConfigAdminService::Stub::RollbackTransaction(::grpc::ClientContext* context, const ::onos::config::admin::RollbackRequest& request, ::onos::config::admin::RollbackResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::config::admin::RollbackRequest, ::onos::config::admin::RollbackResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RollbackTransaction_, context, request, response);
}

void ConfigAdminService::Stub::async::RollbackTransaction(::grpc::ClientContext* context, const ::onos::config::admin::RollbackRequest* request, ::onos::config::admin::RollbackResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::config::admin::RollbackRequest, ::onos::config::admin::RollbackResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RollbackTransaction_, context, request, response, std::move(f));
}

void ConfigAdminService::Stub::async::RollbackTransaction(::grpc::ClientContext* context, const ::onos::config::admin::RollbackRequest* request, ::onos::config::admin::RollbackResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RollbackTransaction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::config::admin::RollbackResponse>* ConfigAdminService::Stub::PrepareAsyncRollbackTransactionRaw(::grpc::ClientContext* context, const ::onos::config::admin::RollbackRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::config::admin::RollbackResponse, ::onos::config::admin::RollbackRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RollbackTransaction_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::config::admin::RollbackResponse>* ConfigAdminService::Stub::AsyncRollbackTransactionRaw(::grpc::ClientContext* context, const ::onos::config::admin::RollbackRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRollbackTransactionRaw(context, request, cq);
  result->StartCall();
  return result;
}

ConfigAdminService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigAdminService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ConfigAdminService::Service, ::onos::config::admin::ListModelsRequest, ::onos::config::admin::ModelPlugin>(
          [](ConfigAdminService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::config::admin::ListModelsRequest* req,
             ::grpc::ServerWriter<::onos::config::admin::ModelPlugin>* writer) {
               return service->ListRegisteredModels(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigAdminService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigAdminService::Service, ::onos::config::admin::RollbackRequest, ::onos::config::admin::RollbackResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConfigAdminService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::config::admin::RollbackRequest* req,
             ::onos::config::admin::RollbackResponse* resp) {
               return service->RollbackTransaction(ctx, req, resp);
             }, this)));
}

ConfigAdminService::Service::~Service() {
}

::grpc::Status ConfigAdminService::Service::ListRegisteredModels(::grpc::ServerContext* context, const ::onos::config::admin::ListModelsRequest* request, ::grpc::ServerWriter< ::onos::config::admin::ModelPlugin>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigAdminService::Service::RollbackTransaction(::grpc::ServerContext* context, const ::onos::config::admin::RollbackRequest* request, ::onos::config::admin::RollbackResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* ModelPluginService_method_names[] = {
  "/onos.config.admin.ModelPluginService/GetModelInfo",
  "/onos.config.admin.ModelPluginService/ValidateConfig",
  "/onos.config.admin.ModelPluginService/GetPathValues",
};

std::unique_ptr< ModelPluginService::Stub> ModelPluginService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ModelPluginService::Stub> stub(new ModelPluginService::Stub(channel, options));
  return stub;
}

ModelPluginService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetModelInfo_(ModelPluginService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ValidateConfig_(ModelPluginService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPathValues_(ModelPluginService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ModelPluginService::Stub::GetModelInfo(::grpc::ClientContext* context, const ::onos::config::admin::ModelInfoRequest& request, ::onos::config::admin::ModelInfoResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::config::admin::ModelInfoRequest, ::onos::config::admin::ModelInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetModelInfo_, context, request, response);
}

void ModelPluginService::Stub::async::GetModelInfo(::grpc::ClientContext* context, const ::onos::config::admin::ModelInfoRequest* request, ::onos::config::admin::ModelInfoResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::config::admin::ModelInfoRequest, ::onos::config::admin::ModelInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetModelInfo_, context, request, response, std::move(f));
}

void ModelPluginService::Stub::async::GetModelInfo(::grpc::ClientContext* context, const ::onos::config::admin::ModelInfoRequest* request, ::onos::config::admin::ModelInfoResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetModelInfo_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::config::admin::ModelInfoResponse>* ModelPluginService::Stub::PrepareAsyncGetModelInfoRaw(::grpc::ClientContext* context, const ::onos::config::admin::ModelInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::config::admin::ModelInfoResponse, ::onos::config::admin::ModelInfoRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetModelInfo_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::config::admin::ModelInfoResponse>* ModelPluginService::Stub::AsyncGetModelInfoRaw(::grpc::ClientContext* context, const ::onos::config::admin::ModelInfoRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetModelInfoRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ModelPluginService::Stub::ValidateConfig(::grpc::ClientContext* context, const ::onos::config::admin::ValidateConfigRequest& request, ::onos::config::admin::ValidateConfigResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::config::admin::ValidateConfigRequest, ::onos::config::admin::ValidateConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ValidateConfig_, context, request, response);
}

void ModelPluginService::Stub::async::ValidateConfig(::grpc::ClientContext* context, const ::onos::config::admin::ValidateConfigRequest* request, ::onos::config::admin::ValidateConfigResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::config::admin::ValidateConfigRequest, ::onos::config::admin::ValidateConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValidateConfig_, context, request, response, std::move(f));
}

void ModelPluginService::Stub::async::ValidateConfig(::grpc::ClientContext* context, const ::onos::config::admin::ValidateConfigRequest* request, ::onos::config::admin::ValidateConfigResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ValidateConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::config::admin::ValidateConfigResponse>* ModelPluginService::Stub::PrepareAsyncValidateConfigRaw(::grpc::ClientContext* context, const ::onos::config::admin::ValidateConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::config::admin::ValidateConfigResponse, ::onos::config::admin::ValidateConfigRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ValidateConfig_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::config::admin::ValidateConfigResponse>* ModelPluginService::Stub::AsyncValidateConfigRaw(::grpc::ClientContext* context, const ::onos::config::admin::ValidateConfigRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncValidateConfigRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ModelPluginService::Stub::GetPathValues(::grpc::ClientContext* context, const ::onos::config::admin::PathValuesRequest& request, ::onos::config::admin::PathValuesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::config::admin::PathValuesRequest, ::onos::config::admin::PathValuesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetPathValues_, context, request, response);
}

void ModelPluginService::Stub::async::GetPathValues(::grpc::ClientContext* context, const ::onos::config::admin::PathValuesRequest* request, ::onos::config::admin::PathValuesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::config::admin::PathValuesRequest, ::onos::config::admin::PathValuesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPathValues_, context, request, response, std::move(f));
}

void ModelPluginService::Stub::async::GetPathValues(::grpc::ClientContext* context, const ::onos::config::admin::PathValuesRequest* request, ::onos::config::admin::PathValuesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetPathValues_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::config::admin::PathValuesResponse>* ModelPluginService::Stub::PrepareAsyncGetPathValuesRaw(::grpc::ClientContext* context, const ::onos::config::admin::PathValuesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::config::admin::PathValuesResponse, ::onos::config::admin::PathValuesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetPathValues_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::config::admin::PathValuesResponse>* ModelPluginService::Stub::AsyncGetPathValuesRaw(::grpc::ClientContext* context, const ::onos::config::admin::PathValuesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetPathValuesRaw(context, request, cq);
  result->StartCall();
  return result;
}

ModelPluginService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ModelPluginService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ModelPluginService::Service, ::onos::config::admin::ModelInfoRequest, ::onos::config::admin::ModelInfoResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ModelPluginService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::config::admin::ModelInfoRequest* req,
             ::onos::config::admin::ModelInfoResponse* resp) {
               return service->GetModelInfo(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ModelPluginService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ModelPluginService::Service, ::onos::config::admin::ValidateConfigRequest, ::onos::config::admin::ValidateConfigResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ModelPluginService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::config::admin::ValidateConfigRequest* req,
             ::onos::config::admin::ValidateConfigResponse* resp) {
               return service->ValidateConfig(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ModelPluginService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ModelPluginService::Service, ::onos::config::admin::PathValuesRequest, ::onos::config::admin::PathValuesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ModelPluginService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::config::admin::PathValuesRequest* req,
             ::onos::config::admin::PathValuesResponse* resp) {
               return service->GetPathValues(ctx, req, resp);
             }, this)));
}

ModelPluginService::Service::~Service() {
}

::grpc::Status ModelPluginService::Service::GetModelInfo(::grpc::ServerContext* context, const ::onos::config::admin::ModelInfoRequest* request, ::onos::config::admin::ModelInfoResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ModelPluginService::Service::ValidateConfig(::grpc::ServerContext* context, const ::onos::config::admin::ValidateConfigRequest* request, ::onos::config::admin::ValidateConfigResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ModelPluginService::Service::GetPathValues(::grpc::ServerContext* context, const ::onos::config::admin::PathValuesRequest* request, ::onos::config::admin::PathValuesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* TransactionService_method_names[] = {
  "/onos.config.admin.TransactionService/GetTransaction",
  "/onos.config.admin.TransactionService/ListTransactions",
  "/onos.config.admin.TransactionService/WatchTransactions",
};

std::unique_ptr< TransactionService::Stub> TransactionService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TransactionService::Stub> stub(new TransactionService::Stub(channel, options));
  return stub;
}

TransactionService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetTransaction_(TransactionService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListTransactions_(TransactionService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_WatchTransactions_(TransactionService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status TransactionService::Stub::GetTransaction(::grpc::ClientContext* context, const ::onos::config::admin::GetTransactionRequest& request, ::onos::config::admin::GetTransactionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::config::admin::GetTransactionRequest, ::onos::config::admin::GetTransactionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetTransaction_, context, request, response);
}

void TransactionService::Stub::async::GetTransaction(::grpc::ClientContext* context, const ::onos::config::admin::GetTransactionRequest* request, ::onos::config::admin::GetTransactionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::config::admin::GetTransactionRequest, ::onos::config::admin::GetTransactionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTransaction_, context, request, response, std::move(f));
}

void TransactionService::Stub::async::GetTransaction(::grpc::ClientContext* context, const ::onos::config::admin::GetTransactionRequest* request, ::onos::config::admin::GetTransactionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetTransaction_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::config::admin::GetTransactionResponse>* TransactionService::Stub::PrepareAsyncGetTransactionRaw(::grpc::ClientContext* context, const ::onos::config::admin::GetTransactionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::config::admin::GetTransactionResponse, ::onos::config::admin::GetTransactionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetTransaction_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::config::admin::GetTransactionResponse>* TransactionService::Stub::AsyncGetTransactionRaw(::grpc::ClientContext* context, const ::onos::config::admin::GetTransactionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetTransactionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::onos::config::admin::ListTransactionsResponse>* TransactionService::Stub::ListTransactionsRaw(::grpc::ClientContext* context, const ::onos::config::admin::ListTransactionsRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::onos::config::admin::ListTransactionsResponse>::Create(channel_.get(), rpcmethod_ListTransactions_, context, request);
}

void TransactionService::Stub::async::ListTransactions(::grpc::ClientContext* context, const ::onos::config::admin::ListTransactionsRequest* request, ::grpc::ClientReadReactor< ::onos::config::admin::ListTransactionsResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::onos::config::admin::ListTransactionsResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_ListTransactions_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::onos::config::admin::ListTransactionsResponse>* TransactionService::Stub::AsyncListTransactionsRaw(::grpc::ClientContext* context, const ::onos::config::admin::ListTransactionsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::onos::config::admin::ListTransactionsResponse>::Create(channel_.get(), cq, rpcmethod_ListTransactions_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::onos::config::admin::ListTransactionsResponse>* TransactionService::Stub::PrepareAsyncListTransactionsRaw(::grpc::ClientContext* context, const ::onos::config::admin::ListTransactionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::onos::config::admin::ListTransactionsResponse>::Create(channel_.get(), cq, rpcmethod_ListTransactions_, context, request, false, nullptr);
}

::grpc::ClientReader< ::onos::config::admin::WatchTransactionsResponse>* TransactionService::Stub::WatchTransactionsRaw(::grpc::ClientContext* context, const ::onos::config::admin::WatchTransactionsRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::onos::config::admin::WatchTransactionsResponse>::Create(channel_.get(), rpcmethod_WatchTransactions_, context, request);
}

void TransactionService::Stub::async::WatchTransactions(::grpc::ClientContext* context, const ::onos::config::admin::WatchTransactionsRequest* request, ::grpc::ClientReadReactor< ::onos::config::admin::WatchTransactionsResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::onos::config::admin::WatchTransactionsResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_WatchTransactions_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::onos::config::admin::WatchTransactionsResponse>* TransactionService::Stub::AsyncWatchTransactionsRaw(::grpc::ClientContext* context, const ::onos::config::admin::WatchTransactionsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::onos::config::admin::WatchTransactionsResponse>::Create(channel_.get(), cq, rpcmethod_WatchTransactions_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::onos::config::admin::WatchTransactionsResponse>* TransactionService::Stub::PrepareAsyncWatchTransactionsRaw(::grpc::ClientContext* context, const ::onos::config::admin::WatchTransactionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::onos::config::admin::WatchTransactionsResponse>::Create(channel_.get(), cq, rpcmethod_WatchTransactions_, context, request, false, nullptr);
}

TransactionService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TransactionService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TransactionService::Service, ::onos::config::admin::GetTransactionRequest, ::onos::config::admin::GetTransactionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](TransactionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::config::admin::GetTransactionRequest* req,
             ::onos::config::admin::GetTransactionResponse* resp) {
               return service->GetTransaction(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TransactionService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< TransactionService::Service, ::onos::config::admin::ListTransactionsRequest, ::onos::config::admin::ListTransactionsResponse>(
          [](TransactionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::config::admin::ListTransactionsRequest* req,
             ::grpc::ServerWriter<::onos::config::admin::ListTransactionsResponse>* writer) {
               return service->ListTransactions(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TransactionService_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< TransactionService::Service, ::onos::config::admin::WatchTransactionsRequest, ::onos::config::admin::WatchTransactionsResponse>(
          [](TransactionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::config::admin::WatchTransactionsRequest* req,
             ::grpc::ServerWriter<::onos::config::admin::WatchTransactionsResponse>* writer) {
               return service->WatchTransactions(ctx, req, writer);
             }, this)));
}

TransactionService::Service::~Service() {
}

::grpc::Status TransactionService::Service::GetTransaction(::grpc::ServerContext* context, const ::onos::config::admin::GetTransactionRequest* request, ::onos::config::admin::GetTransactionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TransactionService::Service::ListTransactions(::grpc::ServerContext* context, const ::onos::config::admin::ListTransactionsRequest* request, ::grpc::ServerWriter< ::onos::config::admin::ListTransactionsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TransactionService::Service::WatchTransactions(::grpc::ServerContext* context, const ::onos::config::admin::WatchTransactionsRequest* request, ::grpc::ServerWriter< ::onos::config::admin::WatchTransactionsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* ConfigurationService_method_names[] = {
  "/onos.config.admin.ConfigurationService/GetConfiguration",
  "/onos.config.admin.ConfigurationService/ListConfigurations",
  "/onos.config.admin.ConfigurationService/WatchConfigurations",
};

std::unique_ptr< ConfigurationService::Stub> ConfigurationService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ConfigurationService::Stub> stub(new ConfigurationService::Stub(channel, options));
  return stub;
}

ConfigurationService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetConfiguration_(ConfigurationService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListConfigurations_(ConfigurationService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_WatchConfigurations_(ConfigurationService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status ConfigurationService::Stub::GetConfiguration(::grpc::ClientContext* context, const ::onos::config::admin::GetConfigurationRequest& request, ::onos::config::admin::GetConfigurationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::config::admin::GetConfigurationRequest, ::onos::config::admin::GetConfigurationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetConfiguration_, context, request, response);
}

void ConfigurationService::Stub::async::GetConfiguration(::grpc::ClientContext* context, const ::onos::config::admin::GetConfigurationRequest* request, ::onos::config::admin::GetConfigurationResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::config::admin::GetConfigurationRequest, ::onos::config::admin::GetConfigurationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetConfiguration_, context, request, response, std::move(f));
}

void ConfigurationService::Stub::async::GetConfiguration(::grpc::ClientContext* context, const ::onos::config::admin::GetConfigurationRequest* request, ::onos::config::admin::GetConfigurationResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetConfiguration_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::config::admin::GetConfigurationResponse>* ConfigurationService::Stub::PrepareAsyncGetConfigurationRaw(::grpc::ClientContext* context, const ::onos::config::admin::GetConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::config::admin::GetConfigurationResponse, ::onos::config::admin::GetConfigurationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetConfiguration_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::config::admin::GetConfigurationResponse>* ConfigurationService::Stub::AsyncGetConfigurationRaw(::grpc::ClientContext* context, const ::onos::config::admin::GetConfigurationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetConfigurationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::onos::config::admin::ListConfigurationsResponse>* ConfigurationService::Stub::ListConfigurationsRaw(::grpc::ClientContext* context, const ::onos::config::admin::ListConfigurationsRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::onos::config::admin::ListConfigurationsResponse>::Create(channel_.get(), rpcmethod_ListConfigurations_, context, request);
}

void ConfigurationService::Stub::async::ListConfigurations(::grpc::ClientContext* context, const ::onos::config::admin::ListConfigurationsRequest* request, ::grpc::ClientReadReactor< ::onos::config::admin::ListConfigurationsResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::onos::config::admin::ListConfigurationsResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_ListConfigurations_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::onos::config::admin::ListConfigurationsResponse>* ConfigurationService::Stub::AsyncListConfigurationsRaw(::grpc::ClientContext* context, const ::onos::config::admin::ListConfigurationsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::onos::config::admin::ListConfigurationsResponse>::Create(channel_.get(), cq, rpcmethod_ListConfigurations_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::onos::config::admin::ListConfigurationsResponse>* ConfigurationService::Stub::PrepareAsyncListConfigurationsRaw(::grpc::ClientContext* context, const ::onos::config::admin::ListConfigurationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::onos::config::admin::ListConfigurationsResponse>::Create(channel_.get(), cq, rpcmethod_ListConfigurations_, context, request, false, nullptr);
}

::grpc::ClientReader< ::onos::config::admin::WatchConfigurationsResponse>* ConfigurationService::Stub::WatchConfigurationsRaw(::grpc::ClientContext* context, const ::onos::config::admin::WatchConfigurationsRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::onos::config::admin::WatchConfigurationsResponse>::Create(channel_.get(), rpcmethod_WatchConfigurations_, context, request);
}

void ConfigurationService::Stub::async::WatchConfigurations(::grpc::ClientContext* context, const ::onos::config::admin::WatchConfigurationsRequest* request, ::grpc::ClientReadReactor< ::onos::config::admin::WatchConfigurationsResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::onos::config::admin::WatchConfigurationsResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_WatchConfigurations_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::onos::config::admin::WatchConfigurationsResponse>* ConfigurationService::Stub::AsyncWatchConfigurationsRaw(::grpc::ClientContext* context, const ::onos::config::admin::WatchConfigurationsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::onos::config::admin::WatchConfigurationsResponse>::Create(channel_.get(), cq, rpcmethod_WatchConfigurations_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::onos::config::admin::WatchConfigurationsResponse>* ConfigurationService::Stub::PrepareAsyncWatchConfigurationsRaw(::grpc::ClientContext* context, const ::onos::config::admin::WatchConfigurationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::onos::config::admin::WatchConfigurationsResponse>::Create(channel_.get(), cq, rpcmethod_WatchConfigurations_, context, request, false, nullptr);
}

ConfigurationService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigurationService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ConfigurationService::Service, ::onos::config::admin::GetConfigurationRequest, ::onos::config::admin::GetConfigurationResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ConfigurationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::config::admin::GetConfigurationRequest* req,
             ::onos::config::admin::GetConfigurationResponse* resp) {
               return service->GetConfiguration(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigurationService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ConfigurationService::Service, ::onos::config::admin::ListConfigurationsRequest, ::onos::config::admin::ListConfigurationsResponse>(
          [](ConfigurationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::config::admin::ListConfigurationsRequest* req,
             ::grpc::ServerWriter<::onos::config::admin::ListConfigurationsResponse>* writer) {
               return service->ListConfigurations(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ConfigurationService_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< ConfigurationService::Service, ::onos::config::admin::WatchConfigurationsRequest, ::onos::config::admin::WatchConfigurationsResponse>(
          [](ConfigurationService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::config::admin::WatchConfigurationsRequest* req,
             ::grpc::ServerWriter<::onos::config::admin::WatchConfigurationsResponse>* writer) {
               return service->WatchConfigurations(ctx, req, writer);
             }, this)));
}

ConfigurationService::Service::~Service() {
}

::grpc::Status ConfigurationService::Service::GetConfiguration(::grpc::ServerContext* context, const ::onos::config::admin::GetConfigurationRequest* request, ::onos::config::admin::GetConfigurationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigurationService::Service::ListConfigurations(::grpc::ServerContext* context, const ::onos::config::admin::ListConfigurationsRequest* request, ::grpc::ServerWriter< ::onos::config::admin::ListConfigurationsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ConfigurationService::Service::WatchConfigurations(::grpc::ServerContext* context, const ::onos::config::admin::WatchConfigurationsRequest* request, ::grpc::ServerWriter< ::onos::config::admin::WatchConfigurationsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace onos
}  // namespace config
}  // namespace admin

