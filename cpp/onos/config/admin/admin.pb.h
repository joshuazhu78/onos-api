// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onos/config/admin/admin.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_onos_2fconfig_2fadmin_2fadmin_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_onos_2fconfig_2fadmin_2fadmin_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gogoproto/gogo.pb.h"
#include "github.com/openconfig/gnmi/proto/gnmi/gnmi.pb.h"
#include "onos/config/v2/value.pb.h"
#include "onos/config/v2/transaction.pb.h"
#include "onos/config/v2/configuration.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_onos_2fconfig_2fadmin_2fadmin_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_onos_2fconfig_2fadmin_2fadmin_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[26]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_onos_2fconfig_2fadmin_2fadmin_2eproto;
namespace onos {
namespace config {
namespace admin {
class GetConfigurationRequest;
struct GetConfigurationRequestDefaultTypeInternal;
extern GetConfigurationRequestDefaultTypeInternal _GetConfigurationRequest_default_instance_;
class GetConfigurationResponse;
struct GetConfigurationResponseDefaultTypeInternal;
extern GetConfigurationResponseDefaultTypeInternal _GetConfigurationResponse_default_instance_;
class GetTransactionRequest;
struct GetTransactionRequestDefaultTypeInternal;
extern GetTransactionRequestDefaultTypeInternal _GetTransactionRequest_default_instance_;
class GetTransactionResponse;
struct GetTransactionResponseDefaultTypeInternal;
extern GetTransactionResponseDefaultTypeInternal _GetTransactionResponse_default_instance_;
class ListConfigurationsRequest;
struct ListConfigurationsRequestDefaultTypeInternal;
extern ListConfigurationsRequestDefaultTypeInternal _ListConfigurationsRequest_default_instance_;
class ListConfigurationsResponse;
struct ListConfigurationsResponseDefaultTypeInternal;
extern ListConfigurationsResponseDefaultTypeInternal _ListConfigurationsResponse_default_instance_;
class ListModelsRequest;
struct ListModelsRequestDefaultTypeInternal;
extern ListModelsRequestDefaultTypeInternal _ListModelsRequest_default_instance_;
class ListTransactionsRequest;
struct ListTransactionsRequestDefaultTypeInternal;
extern ListTransactionsRequestDefaultTypeInternal _ListTransactionsRequest_default_instance_;
class ListTransactionsResponse;
struct ListTransactionsResponseDefaultTypeInternal;
extern ListTransactionsResponseDefaultTypeInternal _ListTransactionsResponse_default_instance_;
class ModelInfo;
struct ModelInfoDefaultTypeInternal;
extern ModelInfoDefaultTypeInternal _ModelInfo_default_instance_;
class ModelInfoRequest;
struct ModelInfoRequestDefaultTypeInternal;
extern ModelInfoRequestDefaultTypeInternal _ModelInfoRequest_default_instance_;
class ModelInfoResponse;
struct ModelInfoResponseDefaultTypeInternal;
extern ModelInfoResponseDefaultTypeInternal _ModelInfoResponse_default_instance_;
class ModelPlugin;
struct ModelPluginDefaultTypeInternal;
extern ModelPluginDefaultTypeInternal _ModelPlugin_default_instance_;
class PathValuesRequest;
struct PathValuesRequestDefaultTypeInternal;
extern PathValuesRequestDefaultTypeInternal _PathValuesRequest_default_instance_;
class PathValuesResponse;
struct PathValuesResponseDefaultTypeInternal;
extern PathValuesResponseDefaultTypeInternal _PathValuesResponse_default_instance_;
class ReadOnlyPath;
struct ReadOnlyPathDefaultTypeInternal;
extern ReadOnlyPathDefaultTypeInternal _ReadOnlyPath_default_instance_;
class ReadOnlySubPath;
struct ReadOnlySubPathDefaultTypeInternal;
extern ReadOnlySubPathDefaultTypeInternal _ReadOnlySubPath_default_instance_;
class ReadWritePath;
struct ReadWritePathDefaultTypeInternal;
extern ReadWritePathDefaultTypeInternal _ReadWritePath_default_instance_;
class RollbackRequest;
struct RollbackRequestDefaultTypeInternal;
extern RollbackRequestDefaultTypeInternal _RollbackRequest_default_instance_;
class RollbackResponse;
struct RollbackResponseDefaultTypeInternal;
extern RollbackResponseDefaultTypeInternal _RollbackResponse_default_instance_;
class ValidateConfigRequest;
struct ValidateConfigRequestDefaultTypeInternal;
extern ValidateConfigRequestDefaultTypeInternal _ValidateConfigRequest_default_instance_;
class ValidateConfigResponse;
struct ValidateConfigResponseDefaultTypeInternal;
extern ValidateConfigResponseDefaultTypeInternal _ValidateConfigResponse_default_instance_;
class WatchConfigurationsRequest;
struct WatchConfigurationsRequestDefaultTypeInternal;
extern WatchConfigurationsRequestDefaultTypeInternal _WatchConfigurationsRequest_default_instance_;
class WatchConfigurationsResponse;
struct WatchConfigurationsResponseDefaultTypeInternal;
extern WatchConfigurationsResponseDefaultTypeInternal _WatchConfigurationsResponse_default_instance_;
class WatchTransactionsRequest;
struct WatchTransactionsRequestDefaultTypeInternal;
extern WatchTransactionsRequestDefaultTypeInternal _WatchTransactionsRequest_default_instance_;
class WatchTransactionsResponse;
struct WatchTransactionsResponseDefaultTypeInternal;
extern WatchTransactionsResponseDefaultTypeInternal _WatchTransactionsResponse_default_instance_;
}  // namespace admin
}  // namespace config
}  // namespace onos
PROTOBUF_NAMESPACE_OPEN
template<> ::onos::config::admin::GetConfigurationRequest* Arena::CreateMaybeMessage<::onos::config::admin::GetConfigurationRequest>(Arena*);
template<> ::onos::config::admin::GetConfigurationResponse* Arena::CreateMaybeMessage<::onos::config::admin::GetConfigurationResponse>(Arena*);
template<> ::onos::config::admin::GetTransactionRequest* Arena::CreateMaybeMessage<::onos::config::admin::GetTransactionRequest>(Arena*);
template<> ::onos::config::admin::GetTransactionResponse* Arena::CreateMaybeMessage<::onos::config::admin::GetTransactionResponse>(Arena*);
template<> ::onos::config::admin::ListConfigurationsRequest* Arena::CreateMaybeMessage<::onos::config::admin::ListConfigurationsRequest>(Arena*);
template<> ::onos::config::admin::ListConfigurationsResponse* Arena::CreateMaybeMessage<::onos::config::admin::ListConfigurationsResponse>(Arena*);
template<> ::onos::config::admin::ListModelsRequest* Arena::CreateMaybeMessage<::onos::config::admin::ListModelsRequest>(Arena*);
template<> ::onos::config::admin::ListTransactionsRequest* Arena::CreateMaybeMessage<::onos::config::admin::ListTransactionsRequest>(Arena*);
template<> ::onos::config::admin::ListTransactionsResponse* Arena::CreateMaybeMessage<::onos::config::admin::ListTransactionsResponse>(Arena*);
template<> ::onos::config::admin::ModelInfo* Arena::CreateMaybeMessage<::onos::config::admin::ModelInfo>(Arena*);
template<> ::onos::config::admin::ModelInfoRequest* Arena::CreateMaybeMessage<::onos::config::admin::ModelInfoRequest>(Arena*);
template<> ::onos::config::admin::ModelInfoResponse* Arena::CreateMaybeMessage<::onos::config::admin::ModelInfoResponse>(Arena*);
template<> ::onos::config::admin::ModelPlugin* Arena::CreateMaybeMessage<::onos::config::admin::ModelPlugin>(Arena*);
template<> ::onos::config::admin::PathValuesRequest* Arena::CreateMaybeMessage<::onos::config::admin::PathValuesRequest>(Arena*);
template<> ::onos::config::admin::PathValuesResponse* Arena::CreateMaybeMessage<::onos::config::admin::PathValuesResponse>(Arena*);
template<> ::onos::config::admin::ReadOnlyPath* Arena::CreateMaybeMessage<::onos::config::admin::ReadOnlyPath>(Arena*);
template<> ::onos::config::admin::ReadOnlySubPath* Arena::CreateMaybeMessage<::onos::config::admin::ReadOnlySubPath>(Arena*);
template<> ::onos::config::admin::ReadWritePath* Arena::CreateMaybeMessage<::onos::config::admin::ReadWritePath>(Arena*);
template<> ::onos::config::admin::RollbackRequest* Arena::CreateMaybeMessage<::onos::config::admin::RollbackRequest>(Arena*);
template<> ::onos::config::admin::RollbackResponse* Arena::CreateMaybeMessage<::onos::config::admin::RollbackResponse>(Arena*);
template<> ::onos::config::admin::ValidateConfigRequest* Arena::CreateMaybeMessage<::onos::config::admin::ValidateConfigRequest>(Arena*);
template<> ::onos::config::admin::ValidateConfigResponse* Arena::CreateMaybeMessage<::onos::config::admin::ValidateConfigResponse>(Arena*);
template<> ::onos::config::admin::WatchConfigurationsRequest* Arena::CreateMaybeMessage<::onos::config::admin::WatchConfigurationsRequest>(Arena*);
template<> ::onos::config::admin::WatchConfigurationsResponse* Arena::CreateMaybeMessage<::onos::config::admin::WatchConfigurationsResponse>(Arena*);
template<> ::onos::config::admin::WatchTransactionsRequest* Arena::CreateMaybeMessage<::onos::config::admin::WatchTransactionsRequest>(Arena*);
template<> ::onos::config::admin::WatchTransactionsResponse* Arena::CreateMaybeMessage<::onos::config::admin::WatchTransactionsResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace onos {
namespace config {
namespace admin {

// ===================================================================

class ReadOnlySubPath final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.config.admin.ReadOnlySubPath) */ {
 public:
  inline ReadOnlySubPath() : ReadOnlySubPath(nullptr) {}
  ~ReadOnlySubPath() override;
  explicit constexpr ReadOnlySubPath(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadOnlySubPath(const ReadOnlySubPath& from);
  ReadOnlySubPath(ReadOnlySubPath&& from) noexcept
    : ReadOnlySubPath() {
    *this = ::std::move(from);
  }

  inline ReadOnlySubPath& operator=(const ReadOnlySubPath& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadOnlySubPath& operator=(ReadOnlySubPath&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadOnlySubPath& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadOnlySubPath* internal_default_instance() {
    return reinterpret_cast<const ReadOnlySubPath*>(
               &_ReadOnlySubPath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReadOnlySubPath& a, ReadOnlySubPath& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadOnlySubPath* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadOnlySubPath* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadOnlySubPath* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadOnlySubPath>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadOnlySubPath& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReadOnlySubPath& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadOnlySubPath* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.config.admin.ReadOnlySubPath";
  }
  protected:
  explicit ReadOnlySubPath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeOptsFieldNumber = 3,
    kSubPathFieldNumber = 1,
    kDescriptionFieldNumber = 4,
    kUnitsFieldNumber = 5,
    kAttrNameFieldNumber = 7,
    kValueTypeFieldNumber = 2,
    kIsAKeyFieldNumber = 6,
  };
  // repeated uint64 type_opts = 3;
  int type_opts_size() const;
  private:
  int _internal_type_opts_size() const;
  public:
  void clear_type_opts();
  private:
  uint64_t _internal_type_opts(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_type_opts() const;
  void _internal_add_type_opts(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_type_opts();
  public:
  uint64_t type_opts(int index) const;
  void set_type_opts(int index, uint64_t value);
  void add_type_opts(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      type_opts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_type_opts();

  // string sub_path = 1;
  void clear_sub_path();
  const std::string& sub_path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sub_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sub_path();
  PROTOBUF_NODISCARD std::string* release_sub_path();
  void set_allocated_sub_path(std::string* sub_path);
  private:
  const std::string& _internal_sub_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sub_path(const std::string& value);
  std::string* _internal_mutable_sub_path();
  public:

  // string description = 4;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string units = 5;
  void clear_units();
  const std::string& units() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_units(ArgT0&& arg0, ArgT... args);
  std::string* mutable_units();
  PROTOBUF_NODISCARD std::string* release_units();
  void set_allocated_units(std::string* units);
  private:
  const std::string& _internal_units() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_units(const std::string& value);
  std::string* _internal_mutable_units();
  public:

  // string AttrName = 7;
  void clear_attrname();
  const std::string& attrname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attrname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attrname();
  PROTOBUF_NODISCARD std::string* release_attrname();
  void set_allocated_attrname(std::string* attrname);
  private:
  const std::string& _internal_attrname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attrname(const std::string& value);
  std::string* _internal_mutable_attrname();
  public:

  // .onos.config.v2.ValueType value_type = 2;
  void clear_value_type();
  ::onos::config::v2::ValueType value_type() const;
  void set_value_type(::onos::config::v2::ValueType value);
  private:
  ::onos::config::v2::ValueType _internal_value_type() const;
  void _internal_set_value_type(::onos::config::v2::ValueType value);
  public:

  // bool IsAKey = 6;
  void clear_isakey();
  bool isakey() const;
  void set_isakey(bool value);
  private:
  bool _internal_isakey() const;
  void _internal_set_isakey(bool value);
  public:

  // @@protoc_insertion_point(class_scope:onos.config.admin.ReadOnlySubPath)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > type_opts_;
  mutable std::atomic<int> _type_opts_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sub_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr units_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attrname_;
  int value_type_;
  bool isakey_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fconfig_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class ReadOnlyPath final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.config.admin.ReadOnlyPath) */ {
 public:
  inline ReadOnlyPath() : ReadOnlyPath(nullptr) {}
  ~ReadOnlyPath() override;
  explicit constexpr ReadOnlyPath(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadOnlyPath(const ReadOnlyPath& from);
  ReadOnlyPath(ReadOnlyPath&& from) noexcept
    : ReadOnlyPath() {
    *this = ::std::move(from);
  }

  inline ReadOnlyPath& operator=(const ReadOnlyPath& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadOnlyPath& operator=(ReadOnlyPath&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadOnlyPath& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadOnlyPath* internal_default_instance() {
    return reinterpret_cast<const ReadOnlyPath*>(
               &_ReadOnlyPath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReadOnlyPath& a, ReadOnlyPath& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadOnlyPath* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadOnlyPath* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadOnlyPath* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadOnlyPath>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadOnlyPath& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReadOnlyPath& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadOnlyPath* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.config.admin.ReadOnlyPath";
  }
  protected:
  explicit ReadOnlyPath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubPathFieldNumber = 2,
    kPathFieldNumber = 1,
  };
  // repeated .onos.config.admin.ReadOnlySubPath sub_path = 2;
  int sub_path_size() const;
  private:
  int _internal_sub_path_size() const;
  public:
  void clear_sub_path();
  ::onos::config::admin::ReadOnlySubPath* mutable_sub_path(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::config::admin::ReadOnlySubPath >*
      mutable_sub_path();
  private:
  const ::onos::config::admin::ReadOnlySubPath& _internal_sub_path(int index) const;
  ::onos::config::admin::ReadOnlySubPath* _internal_add_sub_path();
  public:
  const ::onos::config::admin::ReadOnlySubPath& sub_path(int index) const;
  ::onos::config::admin::ReadOnlySubPath* add_sub_path();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::config::admin::ReadOnlySubPath >&
      sub_path() const;

  // string path = 1;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // @@protoc_insertion_point(class_scope:onos.config.admin.ReadOnlyPath)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::config::admin::ReadOnlySubPath > sub_path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fconfig_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class ReadWritePath final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.config.admin.ReadWritePath) */ {
 public:
  inline ReadWritePath() : ReadWritePath(nullptr) {}
  ~ReadWritePath() override;
  explicit constexpr ReadWritePath(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReadWritePath(const ReadWritePath& from);
  ReadWritePath(ReadWritePath&& from) noexcept
    : ReadWritePath() {
    *this = ::std::move(from);
  }

  inline ReadWritePath& operator=(const ReadWritePath& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReadWritePath& operator=(ReadWritePath&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReadWritePath& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReadWritePath* internal_default_instance() {
    return reinterpret_cast<const ReadWritePath*>(
               &_ReadWritePath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ReadWritePath& a, ReadWritePath& b) {
    a.Swap(&b);
  }
  inline void Swap(ReadWritePath* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReadWritePath* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ReadWritePath* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ReadWritePath>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ReadWritePath& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ReadWritePath& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReadWritePath* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.config.admin.ReadWritePath";
  }
  protected:
  explicit ReadWritePath(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRangeFieldNumber = 7,
    kLengthFieldNumber = 8,
    kTypeOptsFieldNumber = 9,
    kPathFieldNumber = 1,
    kUnitsFieldNumber = 3,
    kDescriptionFieldNumber = 4,
    kDefaultFieldNumber = 6,
    kAttrNameFieldNumber = 11,
    kValueTypeFieldNumber = 2,
    kMandatoryFieldNumber = 5,
    kIsAKeyFieldNumber = 10,
  };
  // repeated string range = 7;
  int range_size() const;
  private:
  int _internal_range_size() const;
  public:
  void clear_range();
  const std::string& range(int index) const;
  std::string* mutable_range(int index);
  void set_range(int index, const std::string& value);
  void set_range(int index, std::string&& value);
  void set_range(int index, const char* value);
  void set_range(int index, const char* value, size_t size);
  std::string* add_range();
  void add_range(const std::string& value);
  void add_range(std::string&& value);
  void add_range(const char* value);
  void add_range(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& range() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_range();
  private:
  const std::string& _internal_range(int index) const;
  std::string* _internal_add_range();
  public:

  // repeated string length = 8;
  int length_size() const;
  private:
  int _internal_length_size() const;
  public:
  void clear_length();
  const std::string& length(int index) const;
  std::string* mutable_length(int index);
  void set_length(int index, const std::string& value);
  void set_length(int index, std::string&& value);
  void set_length(int index, const char* value);
  void set_length(int index, const char* value, size_t size);
  std::string* add_length();
  void add_length(const std::string& value);
  void add_length(std::string&& value);
  void add_length(const char* value);
  void add_length(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& length() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_length();
  private:
  const std::string& _internal_length(int index) const;
  std::string* _internal_add_length();
  public:

  // repeated uint64 type_opts = 9;
  int type_opts_size() const;
  private:
  int _internal_type_opts_size() const;
  public:
  void clear_type_opts();
  private:
  uint64_t _internal_type_opts(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      _internal_type_opts() const;
  void _internal_add_type_opts(uint64_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      _internal_mutable_type_opts();
  public:
  uint64_t type_opts(int index) const;
  void set_type_opts(int index, uint64_t value);
  void add_type_opts(uint64_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
      type_opts() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
      mutable_type_opts();

  // string path = 1;
  void clear_path();
  const std::string& path() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_path(ArgT0&& arg0, ArgT... args);
  std::string* mutable_path();
  PROTOBUF_NODISCARD std::string* release_path();
  void set_allocated_path(std::string* path);
  private:
  const std::string& _internal_path() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_path(const std::string& value);
  std::string* _internal_mutable_path();
  public:

  // string units = 3;
  void clear_units();
  const std::string& units() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_units(ArgT0&& arg0, ArgT... args);
  std::string* mutable_units();
  PROTOBUF_NODISCARD std::string* release_units();
  void set_allocated_units(std::string* units);
  private:
  const std::string& _internal_units() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_units(const std::string& value);
  std::string* _internal_mutable_units();
  public:

  // string description = 4;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string default = 6;
  void clear_default_();
  const std::string& default_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_default_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_default_();
  PROTOBUF_NODISCARD std::string* release_default_();
  void set_allocated_default_(std::string* default_);
  private:
  const std::string& _internal_default_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_default_(const std::string& value);
  std::string* _internal_mutable_default_();
  public:

  // string AttrName = 11;
  void clear_attrname();
  const std::string& attrname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attrname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attrname();
  PROTOBUF_NODISCARD std::string* release_attrname();
  void set_allocated_attrname(std::string* attrname);
  private:
  const std::string& _internal_attrname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attrname(const std::string& value);
  std::string* _internal_mutable_attrname();
  public:

  // .onos.config.v2.ValueType value_type = 2;
  void clear_value_type();
  ::onos::config::v2::ValueType value_type() const;
  void set_value_type(::onos::config::v2::ValueType value);
  private:
  ::onos::config::v2::ValueType _internal_value_type() const;
  void _internal_set_value_type(::onos::config::v2::ValueType value);
  public:

  // bool mandatory = 5;
  void clear_mandatory();
  bool mandatory() const;
  void set_mandatory(bool value);
  private:
  bool _internal_mandatory() const;
  void _internal_set_mandatory(bool value);
  public:

  // bool IsAKey = 10;
  void clear_isakey();
  bool isakey() const;
  void set_isakey(bool value);
  private:
  bool _internal_isakey() const;
  void _internal_set_isakey(bool value);
  public:

  // @@protoc_insertion_point(class_scope:onos.config.admin.ReadWritePath)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> range_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> length_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t > type_opts_;
  mutable std::atomic<int> _type_opts_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr path_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr units_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr default__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attrname_;
  int value_type_;
  bool mandatory_;
  bool isakey_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fconfig_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class ModelInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.config.admin.ModelInfo) */ {
 public:
  inline ModelInfo() : ModelInfo(nullptr) {}
  ~ModelInfo() override;
  explicit constexpr ModelInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModelInfo(const ModelInfo& from);
  ModelInfo(ModelInfo&& from) noexcept
    : ModelInfo() {
    *this = ::std::move(from);
  }

  inline ModelInfo& operator=(const ModelInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelInfo& operator=(ModelInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModelInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModelInfo* internal_default_instance() {
    return reinterpret_cast<const ModelInfo*>(
               &_ModelInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ModelInfo& a, ModelInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelInfo* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModelInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModelInfo>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModelInfo& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModelInfo& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelInfo* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.config.admin.ModelInfo";
  }
  protected:
  explicit ModelInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelDataFieldNumber = 3,
    kReadOnlyPathFieldNumber = 7,
    kReadWritePathFieldNumber = 8,
    kSupportedEncodingsFieldNumber = 9,
    kNameFieldNumber = 1,
    kVersionFieldNumber = 2,
    kModuleFieldNumber = 4,
    kGetStateModeFieldNumber = 5,
  };
  // repeated .gnmi.ModelData model_data = 3;
  int model_data_size() const;
  private:
  int _internal_model_data_size() const;
  public:
  void clear_model_data();
  ::gnmi::ModelData* mutable_model_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::ModelData >*
      mutable_model_data();
  private:
  const ::gnmi::ModelData& _internal_model_data(int index) const;
  ::gnmi::ModelData* _internal_add_model_data();
  public:
  const ::gnmi::ModelData& model_data(int index) const;
  ::gnmi::ModelData* add_model_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::ModelData >&
      model_data() const;

  // repeated .onos.config.admin.ReadOnlyPath read_only_path = 7;
  int read_only_path_size() const;
  private:
  int _internal_read_only_path_size() const;
  public:
  void clear_read_only_path();
  ::onos::config::admin::ReadOnlyPath* mutable_read_only_path(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::config::admin::ReadOnlyPath >*
      mutable_read_only_path();
  private:
  const ::onos::config::admin::ReadOnlyPath& _internal_read_only_path(int index) const;
  ::onos::config::admin::ReadOnlyPath* _internal_add_read_only_path();
  public:
  const ::onos::config::admin::ReadOnlyPath& read_only_path(int index) const;
  ::onos::config::admin::ReadOnlyPath* add_read_only_path();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::config::admin::ReadOnlyPath >&
      read_only_path() const;

  // repeated .onos.config.admin.ReadWritePath read_write_path = 8;
  int read_write_path_size() const;
  private:
  int _internal_read_write_path_size() const;
  public:
  void clear_read_write_path();
  ::onos::config::admin::ReadWritePath* mutable_read_write_path(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::config::admin::ReadWritePath >*
      mutable_read_write_path();
  private:
  const ::onos::config::admin::ReadWritePath& _internal_read_write_path(int index) const;
  ::onos::config::admin::ReadWritePath* _internal_add_read_write_path();
  public:
  const ::onos::config::admin::ReadWritePath& read_write_path(int index) const;
  ::onos::config::admin::ReadWritePath* add_read_write_path();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::config::admin::ReadWritePath >&
      read_write_path() const;

  // repeated .gnmi.Encoding supported_encodings = 9;
  int supported_encodings_size() const;
  private:
  int _internal_supported_encodings_size() const;
  public:
  void clear_supported_encodings();
  private:
  ::gnmi::Encoding _internal_supported_encodings(int index) const;
  void _internal_add_supported_encodings(::gnmi::Encoding value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_supported_encodings();
  public:
  ::gnmi::Encoding supported_encodings(int index) const;
  void set_supported_encodings(int index, ::gnmi::Encoding value);
  void add_supported_encodings(::gnmi::Encoding value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& supported_encodings() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_supported_encodings();

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string version = 2;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string module = 4;
  void clear_module();
  const std::string& module() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_module(ArgT0&& arg0, ArgT... args);
  std::string* mutable_module();
  PROTOBUF_NODISCARD std::string* release_module();
  void set_allocated_module(std::string* module);
  private:
  const std::string& _internal_module() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_module(const std::string& value);
  std::string* _internal_mutable_module();
  public:

  // uint32 getStateMode = 5;
  void clear_getstatemode();
  uint32_t getstatemode() const;
  void set_getstatemode(uint32_t value);
  private:
  uint32_t _internal_getstatemode() const;
  void _internal_set_getstatemode(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.config.admin.ModelInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::ModelData > model_data_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::config::admin::ReadOnlyPath > read_only_path_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::config::admin::ReadWritePath > read_write_path_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> supported_encodings_;
  mutable std::atomic<int> _supported_encodings_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr module_;
  uint32_t getstatemode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fconfig_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class ModelPlugin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.config.admin.ModelPlugin) */ {
 public:
  inline ModelPlugin() : ModelPlugin(nullptr) {}
  ~ModelPlugin() override;
  explicit constexpr ModelPlugin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModelPlugin(const ModelPlugin& from);
  ModelPlugin(ModelPlugin&& from) noexcept
    : ModelPlugin() {
    *this = ::std::move(from);
  }

  inline ModelPlugin& operator=(const ModelPlugin& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelPlugin& operator=(ModelPlugin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModelPlugin& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModelPlugin* internal_default_instance() {
    return reinterpret_cast<const ModelPlugin*>(
               &_ModelPlugin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ModelPlugin& a, ModelPlugin& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelPlugin* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelPlugin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModelPlugin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModelPlugin>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModelPlugin& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModelPlugin& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelPlugin* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.config.admin.ModelPlugin";
  }
  protected:
  explicit ModelPlugin(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kEndpointFieldNumber = 2,
    kStatusFieldNumber = 10,
    kErrorFieldNumber = 11,
    kInfoFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string endpoint = 2;
  void clear_endpoint();
  const std::string& endpoint() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_endpoint(ArgT0&& arg0, ArgT... args);
  std::string* mutable_endpoint();
  PROTOBUF_NODISCARD std::string* release_endpoint();
  void set_allocated_endpoint(std::string* endpoint);
  private:
  const std::string& _internal_endpoint() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_endpoint(const std::string& value);
  std::string* _internal_mutable_endpoint();
  public:

  // string status = 10;
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_NODISCARD std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string error = 11;
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_NODISCARD std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // .onos.config.admin.ModelInfo info = 3;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::onos::config::admin::ModelInfo& info() const;
  PROTOBUF_NODISCARD ::onos::config::admin::ModelInfo* release_info();
  ::onos::config::admin::ModelInfo* mutable_info();
  void set_allocated_info(::onos::config::admin::ModelInfo* info);
  private:
  const ::onos::config::admin::ModelInfo& _internal_info() const;
  ::onos::config::admin::ModelInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::onos::config::admin::ModelInfo* info);
  ::onos::config::admin::ModelInfo* unsafe_arena_release_info();

  // @@protoc_insertion_point(class_scope:onos.config.admin.ModelPlugin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endpoint_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  ::onos::config::admin::ModelInfo* info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fconfig_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class ListModelsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.config.admin.ListModelsRequest) */ {
 public:
  inline ListModelsRequest() : ListModelsRequest(nullptr) {}
  ~ListModelsRequest() override;
  explicit constexpr ListModelsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListModelsRequest(const ListModelsRequest& from);
  ListModelsRequest(ListModelsRequest&& from) noexcept
    : ListModelsRequest() {
    *this = ::std::move(from);
  }

  inline ListModelsRequest& operator=(const ListModelsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListModelsRequest& operator=(ListModelsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListModelsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListModelsRequest* internal_default_instance() {
    return reinterpret_cast<const ListModelsRequest*>(
               &_ListModelsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ListModelsRequest& a, ListModelsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListModelsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListModelsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListModelsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListModelsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListModelsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListModelsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListModelsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.config.admin.ListModelsRequest";
  }
  protected:
  explicit ListModelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelNameFieldNumber = 2,
    kModelVersionFieldNumber = 3,
    kVerboseFieldNumber = 1,
  };
  // string model_name = 2;
  void clear_model_name();
  const std::string& model_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_name();
  PROTOBUF_NODISCARD std::string* release_model_name();
  void set_allocated_model_name(std::string* model_name);
  private:
  const std::string& _internal_model_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_name(const std::string& value);
  std::string* _internal_mutable_model_name();
  public:

  // string model_version = 3;
  void clear_model_version();
  const std::string& model_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_version();
  PROTOBUF_NODISCARD std::string* release_model_version();
  void set_allocated_model_version(std::string* model_version);
  private:
  const std::string& _internal_model_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_version(const std::string& value);
  std::string* _internal_mutable_model_version();
  public:

  // bool verbose = 1;
  void clear_verbose();
  bool verbose() const;
  void set_verbose(bool value);
  private:
  bool _internal_verbose() const;
  void _internal_set_verbose(bool value);
  public:

  // @@protoc_insertion_point(class_scope:onos.config.admin.ListModelsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_version_;
  bool verbose_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fconfig_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class RollbackRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.config.admin.RollbackRequest) */ {
 public:
  inline RollbackRequest() : RollbackRequest(nullptr) {}
  ~RollbackRequest() override;
  explicit constexpr RollbackRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RollbackRequest(const RollbackRequest& from);
  RollbackRequest(RollbackRequest&& from) noexcept
    : RollbackRequest() {
    *this = ::std::move(from);
  }

  inline RollbackRequest& operator=(const RollbackRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RollbackRequest& operator=(RollbackRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RollbackRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RollbackRequest* internal_default_instance() {
    return reinterpret_cast<const RollbackRequest*>(
               &_RollbackRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RollbackRequest& a, RollbackRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RollbackRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RollbackRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RollbackRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RollbackRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RollbackRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RollbackRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RollbackRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.config.admin.RollbackRequest";
  }
  protected:
  explicit RollbackRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
  };
  // uint64 index = 1 [(.gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/config/v2.Index"];
  void clear_index();
  uint64_t index() const;
  void set_index(uint64_t value);
  private:
  uint64_t _internal_index() const;
  void _internal_set_index(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.config.admin.RollbackRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  uint64_t index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fconfig_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class RollbackResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.config.admin.RollbackResponse) */ {
 public:
  inline RollbackResponse() : RollbackResponse(nullptr) {}
  ~RollbackResponse() override;
  explicit constexpr RollbackResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RollbackResponse(const RollbackResponse& from);
  RollbackResponse(RollbackResponse&& from) noexcept
    : RollbackResponse() {
    *this = ::std::move(from);
  }

  inline RollbackResponse& operator=(const RollbackResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RollbackResponse& operator=(RollbackResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RollbackResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RollbackResponse* internal_default_instance() {
    return reinterpret_cast<const RollbackResponse*>(
               &_RollbackResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RollbackResponse& a, RollbackResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RollbackResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RollbackResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RollbackResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RollbackResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RollbackResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RollbackResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RollbackResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.config.admin.RollbackResponse";
  }
  protected:
  explicit RollbackResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/config/v2.TransactionID"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // uint64 index = 2 [(.gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/config/v2.Index"];
  void clear_index();
  uint64_t index() const;
  void set_index(uint64_t value);
  private:
  uint64_t _internal_index() const;
  void _internal_set_index(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.config.admin.RollbackResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  uint64_t index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fconfig_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class ModelInfoRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:onos.config.admin.ModelInfoRequest) */ {
 public:
  inline ModelInfoRequest() : ModelInfoRequest(nullptr) {}
  explicit constexpr ModelInfoRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModelInfoRequest(const ModelInfoRequest& from);
  ModelInfoRequest(ModelInfoRequest&& from) noexcept
    : ModelInfoRequest() {
    *this = ::std::move(from);
  }

  inline ModelInfoRequest& operator=(const ModelInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelInfoRequest& operator=(ModelInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModelInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModelInfoRequest* internal_default_instance() {
    return reinterpret_cast<const ModelInfoRequest*>(
               &_ModelInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ModelInfoRequest& a, ModelInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelInfoRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelInfoRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModelInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModelInfoRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ModelInfoRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ModelInfoRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.config.admin.ModelInfoRequest";
  }
  protected:
  explicit ModelInfoRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onos.config.admin.ModelInfoRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fconfig_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class ModelInfoResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.config.admin.ModelInfoResponse) */ {
 public:
  inline ModelInfoResponse() : ModelInfoResponse(nullptr) {}
  ~ModelInfoResponse() override;
  explicit constexpr ModelInfoResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ModelInfoResponse(const ModelInfoResponse& from);
  ModelInfoResponse(ModelInfoResponse&& from) noexcept
    : ModelInfoResponse() {
    *this = ::std::move(from);
  }

  inline ModelInfoResponse& operator=(const ModelInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModelInfoResponse& operator=(ModelInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ModelInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ModelInfoResponse* internal_default_instance() {
    return reinterpret_cast<const ModelInfoResponse*>(
               &_ModelInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ModelInfoResponse& a, ModelInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ModelInfoResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ModelInfoResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ModelInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ModelInfoResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ModelInfoResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ModelInfoResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModelInfoResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.config.admin.ModelInfoResponse";
  }
  protected:
  explicit ModelInfoResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelInfoFieldNumber = 1,
  };
  // .onos.config.admin.ModelInfo modelInfo = 1;
  bool has_modelinfo() const;
  private:
  bool _internal_has_modelinfo() const;
  public:
  void clear_modelinfo();
  const ::onos::config::admin::ModelInfo& modelinfo() const;
  PROTOBUF_NODISCARD ::onos::config::admin::ModelInfo* release_modelinfo();
  ::onos::config::admin::ModelInfo* mutable_modelinfo();
  void set_allocated_modelinfo(::onos::config::admin::ModelInfo* modelinfo);
  private:
  const ::onos::config::admin::ModelInfo& _internal_modelinfo() const;
  ::onos::config::admin::ModelInfo* _internal_mutable_modelinfo();
  public:
  void unsafe_arena_set_allocated_modelinfo(
      ::onos::config::admin::ModelInfo* modelinfo);
  ::onos::config::admin::ModelInfo* unsafe_arena_release_modelinfo();

  // @@protoc_insertion_point(class_scope:onos.config.admin.ModelInfoResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::config::admin::ModelInfo* modelinfo_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fconfig_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class ValidateConfigRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.config.admin.ValidateConfigRequest) */ {
 public:
  inline ValidateConfigRequest() : ValidateConfigRequest(nullptr) {}
  ~ValidateConfigRequest() override;
  explicit constexpr ValidateConfigRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ValidateConfigRequest(const ValidateConfigRequest& from);
  ValidateConfigRequest(ValidateConfigRequest&& from) noexcept
    : ValidateConfigRequest() {
    *this = ::std::move(from);
  }

  inline ValidateConfigRequest& operator=(const ValidateConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidateConfigRequest& operator=(ValidateConfigRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValidateConfigRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ValidateConfigRequest* internal_default_instance() {
    return reinterpret_cast<const ValidateConfigRequest*>(
               &_ValidateConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ValidateConfigRequest& a, ValidateConfigRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidateConfigRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidateConfigRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ValidateConfigRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ValidateConfigRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ValidateConfigRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ValidateConfigRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidateConfigRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.config.admin.ValidateConfigRequest";
  }
  protected:
  explicit ValidateConfigRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJsonFieldNumber = 1,
  };
  // bytes json = 1;
  void clear_json();
  const std::string& json() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_json(ArgT0&& arg0, ArgT... args);
  std::string* mutable_json();
  PROTOBUF_NODISCARD std::string* release_json();
  void set_allocated_json(std::string* json);
  private:
  const std::string& _internal_json() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_json(const std::string& value);
  std::string* _internal_mutable_json();
  public:

  // @@protoc_insertion_point(class_scope:onos.config.admin.ValidateConfigRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr json_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fconfig_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class ValidateConfigResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.config.admin.ValidateConfigResponse) */ {
 public:
  inline ValidateConfigResponse() : ValidateConfigResponse(nullptr) {}
  ~ValidateConfigResponse() override;
  explicit constexpr ValidateConfigResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ValidateConfigResponse(const ValidateConfigResponse& from);
  ValidateConfigResponse(ValidateConfigResponse&& from) noexcept
    : ValidateConfigResponse() {
    *this = ::std::move(from);
  }

  inline ValidateConfigResponse& operator=(const ValidateConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ValidateConfigResponse& operator=(ValidateConfigResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ValidateConfigResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ValidateConfigResponse* internal_default_instance() {
    return reinterpret_cast<const ValidateConfigResponse*>(
               &_ValidateConfigResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ValidateConfigResponse& a, ValidateConfigResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ValidateConfigResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ValidateConfigResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ValidateConfigResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ValidateConfigResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ValidateConfigResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ValidateConfigResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ValidateConfigResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.config.admin.ValidateConfigResponse";
  }
  protected:
  explicit ValidateConfigResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 2,
    kValidFieldNumber = 1,
  };
  // string message = 2;
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_NODISCARD std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // bool valid = 1;
  void clear_valid();
  bool valid() const;
  void set_valid(bool value);
  private:
  bool _internal_valid() const;
  void _internal_set_valid(bool value);
  public:

  // @@protoc_insertion_point(class_scope:onos.config.admin.ValidateConfigResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  bool valid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fconfig_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class PathValuesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.config.admin.PathValuesRequest) */ {
 public:
  inline PathValuesRequest() : PathValuesRequest(nullptr) {}
  ~PathValuesRequest() override;
  explicit constexpr PathValuesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PathValuesRequest(const PathValuesRequest& from);
  PathValuesRequest(PathValuesRequest&& from) noexcept
    : PathValuesRequest() {
    *this = ::std::move(from);
  }

  inline PathValuesRequest& operator=(const PathValuesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline PathValuesRequest& operator=(PathValuesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PathValuesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const PathValuesRequest* internal_default_instance() {
    return reinterpret_cast<const PathValuesRequest*>(
               &_PathValuesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PathValuesRequest& a, PathValuesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(PathValuesRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PathValuesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PathValuesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PathValuesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PathValuesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PathValuesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PathValuesRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.config.admin.PathValuesRequest";
  }
  protected:
  explicit PathValuesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathPrefixFieldNumber = 1,
    kJsonFieldNumber = 2,
  };
  // string pathPrefix = 1;
  void clear_pathprefix();
  const std::string& pathprefix() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pathprefix(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pathprefix();
  PROTOBUF_NODISCARD std::string* release_pathprefix();
  void set_allocated_pathprefix(std::string* pathprefix);
  private:
  const std::string& _internal_pathprefix() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pathprefix(const std::string& value);
  std::string* _internal_mutable_pathprefix();
  public:

  // bytes json = 2;
  void clear_json();
  const std::string& json() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_json(ArgT0&& arg0, ArgT... args);
  std::string* mutable_json();
  PROTOBUF_NODISCARD std::string* release_json();
  void set_allocated_json(std::string* json);
  private:
  const std::string& _internal_json() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_json(const std::string& value);
  std::string* _internal_mutable_json();
  public:

  // @@protoc_insertion_point(class_scope:onos.config.admin.PathValuesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pathprefix_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr json_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fconfig_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class PathValuesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.config.admin.PathValuesResponse) */ {
 public:
  inline PathValuesResponse() : PathValuesResponse(nullptr) {}
  ~PathValuesResponse() override;
  explicit constexpr PathValuesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PathValuesResponse(const PathValuesResponse& from);
  PathValuesResponse(PathValuesResponse&& from) noexcept
    : PathValuesResponse() {
    *this = ::std::move(from);
  }

  inline PathValuesResponse& operator=(const PathValuesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline PathValuesResponse& operator=(PathValuesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PathValuesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const PathValuesResponse* internal_default_instance() {
    return reinterpret_cast<const PathValuesResponse*>(
               &_PathValuesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(PathValuesResponse& a, PathValuesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(PathValuesResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PathValuesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  PathValuesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<PathValuesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PathValuesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PathValuesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PathValuesResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.config.admin.PathValuesResponse";
  }
  protected:
  explicit PathValuesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathValuesFieldNumber = 1,
  };
  // repeated .onos.config.v2.PathValue pathValues = 1;
  int pathvalues_size() const;
  private:
  int _internal_pathvalues_size() const;
  public:
  void clear_pathvalues();
  ::onos::config::v2::PathValue* mutable_pathvalues(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::config::v2::PathValue >*
      mutable_pathvalues();
  private:
  const ::onos::config::v2::PathValue& _internal_pathvalues(int index) const;
  ::onos::config::v2::PathValue* _internal_add_pathvalues();
  public:
  const ::onos::config::v2::PathValue& pathvalues(int index) const;
  ::onos::config::v2::PathValue* add_pathvalues();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::config::v2::PathValue >&
      pathvalues() const;

  // @@protoc_insertion_point(class_scope:onos.config.admin.PathValuesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::config::v2::PathValue > pathvalues_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fconfig_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetTransactionRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.config.admin.GetTransactionRequest) */ {
 public:
  inline GetTransactionRequest() : GetTransactionRequest(nullptr) {}
  ~GetTransactionRequest() override;
  explicit constexpr GetTransactionRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTransactionRequest(const GetTransactionRequest& from);
  GetTransactionRequest(GetTransactionRequest&& from) noexcept
    : GetTransactionRequest() {
    *this = ::std::move(from);
  }

  inline GetTransactionRequest& operator=(const GetTransactionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTransactionRequest& operator=(GetTransactionRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTransactionRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTransactionRequest* internal_default_instance() {
    return reinterpret_cast<const GetTransactionRequest*>(
               &_GetTransactionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GetTransactionRequest& a, GetTransactionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTransactionRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTransactionRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTransactionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetTransactionRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetTransactionRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetTransactionRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTransactionRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.config.admin.GetTransactionRequest";
  }
  protected:
  explicit GetTransactionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/config/v2.TransactionID"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // uint64 index = 2 [(.gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/config/v2.Index"];
  void clear_index();
  uint64_t index() const;
  void set_index(uint64_t value);
  private:
  uint64_t _internal_index() const;
  void _internal_set_index(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.config.admin.GetTransactionRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  uint64_t index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fconfig_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetTransactionResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.config.admin.GetTransactionResponse) */ {
 public:
  inline GetTransactionResponse() : GetTransactionResponse(nullptr) {}
  ~GetTransactionResponse() override;
  explicit constexpr GetTransactionResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetTransactionResponse(const GetTransactionResponse& from);
  GetTransactionResponse(GetTransactionResponse&& from) noexcept
    : GetTransactionResponse() {
    *this = ::std::move(from);
  }

  inline GetTransactionResponse& operator=(const GetTransactionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTransactionResponse& operator=(GetTransactionResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTransactionResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTransactionResponse* internal_default_instance() {
    return reinterpret_cast<const GetTransactionResponse*>(
               &_GetTransactionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GetTransactionResponse& a, GetTransactionResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetTransactionResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTransactionResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTransactionResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetTransactionResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetTransactionResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetTransactionResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTransactionResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.config.admin.GetTransactionResponse";
  }
  protected:
  explicit GetTransactionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionFieldNumber = 1,
  };
  // .onos.config.v2.Transaction transaction = 1;
  bool has_transaction() const;
  private:
  bool _internal_has_transaction() const;
  public:
  void clear_transaction();
  const ::onos::config::v2::Transaction& transaction() const;
  PROTOBUF_NODISCARD ::onos::config::v2::Transaction* release_transaction();
  ::onos::config::v2::Transaction* mutable_transaction();
  void set_allocated_transaction(::onos::config::v2::Transaction* transaction);
  private:
  const ::onos::config::v2::Transaction& _internal_transaction() const;
  ::onos::config::v2::Transaction* _internal_mutable_transaction();
  public:
  void unsafe_arena_set_allocated_transaction(
      ::onos::config::v2::Transaction* transaction);
  ::onos::config::v2::Transaction* unsafe_arena_release_transaction();

  // @@protoc_insertion_point(class_scope:onos.config.admin.GetTransactionResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::config::v2::Transaction* transaction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fconfig_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class ListTransactionsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:onos.config.admin.ListTransactionsRequest) */ {
 public:
  inline ListTransactionsRequest() : ListTransactionsRequest(nullptr) {}
  explicit constexpr ListTransactionsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListTransactionsRequest(const ListTransactionsRequest& from);
  ListTransactionsRequest(ListTransactionsRequest&& from) noexcept
    : ListTransactionsRequest() {
    *this = ::std::move(from);
  }

  inline ListTransactionsRequest& operator=(const ListTransactionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListTransactionsRequest& operator=(ListTransactionsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListTransactionsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListTransactionsRequest* internal_default_instance() {
    return reinterpret_cast<const ListTransactionsRequest*>(
               &_ListTransactionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ListTransactionsRequest& a, ListTransactionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListTransactionsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListTransactionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListTransactionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListTransactionsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ListTransactionsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ListTransactionsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.config.admin.ListTransactionsRequest";
  }
  protected:
  explicit ListTransactionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onos.config.admin.ListTransactionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fconfig_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class ListTransactionsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.config.admin.ListTransactionsResponse) */ {
 public:
  inline ListTransactionsResponse() : ListTransactionsResponse(nullptr) {}
  ~ListTransactionsResponse() override;
  explicit constexpr ListTransactionsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListTransactionsResponse(const ListTransactionsResponse& from);
  ListTransactionsResponse(ListTransactionsResponse&& from) noexcept
    : ListTransactionsResponse() {
    *this = ::std::move(from);
  }

  inline ListTransactionsResponse& operator=(const ListTransactionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListTransactionsResponse& operator=(ListTransactionsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListTransactionsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListTransactionsResponse* internal_default_instance() {
    return reinterpret_cast<const ListTransactionsResponse*>(
               &_ListTransactionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ListTransactionsResponse& a, ListTransactionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListTransactionsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListTransactionsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListTransactionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListTransactionsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListTransactionsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListTransactionsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTransactionsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.config.admin.ListTransactionsResponse";
  }
  protected:
  explicit ListTransactionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionFieldNumber = 1,
  };
  // .onos.config.v2.Transaction transaction = 1;
  bool has_transaction() const;
  private:
  bool _internal_has_transaction() const;
  public:
  void clear_transaction();
  const ::onos::config::v2::Transaction& transaction() const;
  PROTOBUF_NODISCARD ::onos::config::v2::Transaction* release_transaction();
  ::onos::config::v2::Transaction* mutable_transaction();
  void set_allocated_transaction(::onos::config::v2::Transaction* transaction);
  private:
  const ::onos::config::v2::Transaction& _internal_transaction() const;
  ::onos::config::v2::Transaction* _internal_mutable_transaction();
  public:
  void unsafe_arena_set_allocated_transaction(
      ::onos::config::v2::Transaction* transaction);
  ::onos::config::v2::Transaction* unsafe_arena_release_transaction();

  // @@protoc_insertion_point(class_scope:onos.config.admin.ListTransactionsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::config::v2::Transaction* transaction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fconfig_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class WatchTransactionsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.config.admin.WatchTransactionsRequest) */ {
 public:
  inline WatchTransactionsRequest() : WatchTransactionsRequest(nullptr) {}
  ~WatchTransactionsRequest() override;
  explicit constexpr WatchTransactionsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WatchTransactionsRequest(const WatchTransactionsRequest& from);
  WatchTransactionsRequest(WatchTransactionsRequest&& from) noexcept
    : WatchTransactionsRequest() {
    *this = ::std::move(from);
  }

  inline WatchTransactionsRequest& operator=(const WatchTransactionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchTransactionsRequest& operator=(WatchTransactionsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WatchTransactionsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WatchTransactionsRequest* internal_default_instance() {
    return reinterpret_cast<const WatchTransactionsRequest*>(
               &_WatchTransactionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(WatchTransactionsRequest& a, WatchTransactionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchTransactionsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchTransactionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WatchTransactionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WatchTransactionsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WatchTransactionsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WatchTransactionsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchTransactionsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.config.admin.WatchTransactionsRequest";
  }
  protected:
  explicit WatchTransactionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNoreplayFieldNumber = 2,
  };
  // string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/config/v2.TransactionID"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // bool noreplay = 2;
  void clear_noreplay();
  bool noreplay() const;
  void set_noreplay(bool value);
  private:
  bool _internal_noreplay() const;
  void _internal_set_noreplay(bool value);
  public:

  // @@protoc_insertion_point(class_scope:onos.config.admin.WatchTransactionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  bool noreplay_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fconfig_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class WatchTransactionsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.config.admin.WatchTransactionsResponse) */ {
 public:
  inline WatchTransactionsResponse() : WatchTransactionsResponse(nullptr) {}
  ~WatchTransactionsResponse() override;
  explicit constexpr WatchTransactionsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WatchTransactionsResponse(const WatchTransactionsResponse& from);
  WatchTransactionsResponse(WatchTransactionsResponse&& from) noexcept
    : WatchTransactionsResponse() {
    *this = ::std::move(from);
  }

  inline WatchTransactionsResponse& operator=(const WatchTransactionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchTransactionsResponse& operator=(WatchTransactionsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WatchTransactionsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WatchTransactionsResponse* internal_default_instance() {
    return reinterpret_cast<const WatchTransactionsResponse*>(
               &_WatchTransactionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(WatchTransactionsResponse& a, WatchTransactionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchTransactionsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchTransactionsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WatchTransactionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WatchTransactionsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WatchTransactionsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WatchTransactionsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchTransactionsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.config.admin.WatchTransactionsResponse";
  }
  protected:
  explicit WatchTransactionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventFieldNumber = 1,
  };
  // .onos.config.v2.TransactionEvent event = 1 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
  bool has_event() const;
  private:
  bool _internal_has_event() const;
  public:
  void clear_event();
  const ::onos::config::v2::TransactionEvent& event() const;
  PROTOBUF_NODISCARD ::onos::config::v2::TransactionEvent* release_event();
  ::onos::config::v2::TransactionEvent* mutable_event();
  void set_allocated_event(::onos::config::v2::TransactionEvent* event);
  private:
  const ::onos::config::v2::TransactionEvent& _internal_event() const;
  ::onos::config::v2::TransactionEvent* _internal_mutable_event();
  public:
  void unsafe_arena_set_allocated_event(
      ::onos::config::v2::TransactionEvent* event);
  ::onos::config::v2::TransactionEvent* unsafe_arena_release_event();

  // @@protoc_insertion_point(class_scope:onos.config.admin.WatchTransactionsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::config::v2::TransactionEvent* event_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fconfig_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetConfigurationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.config.admin.GetConfigurationRequest) */ {
 public:
  inline GetConfigurationRequest() : GetConfigurationRequest(nullptr) {}
  ~GetConfigurationRequest() override;
  explicit constexpr GetConfigurationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetConfigurationRequest(const GetConfigurationRequest& from);
  GetConfigurationRequest(GetConfigurationRequest&& from) noexcept
    : GetConfigurationRequest() {
    *this = ::std::move(from);
  }

  inline GetConfigurationRequest& operator=(const GetConfigurationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConfigurationRequest& operator=(GetConfigurationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetConfigurationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetConfigurationRequest* internal_default_instance() {
    return reinterpret_cast<const GetConfigurationRequest*>(
               &_GetConfigurationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(GetConfigurationRequest& a, GetConfigurationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConfigurationRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetConfigurationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetConfigurationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetConfigurationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetConfigurationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetConfigurationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConfigurationRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.config.admin.GetConfigurationRequest";
  }
  protected:
  explicit GetConfigurationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigurationIdFieldNumber = 1,
  };
  // string configuration_id = 1 [(.gogoproto.customname) = "ConfigurationID", (.gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/config/v2.ConfigurationID"];
  void clear_configuration_id();
  const std::string& configuration_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_configuration_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_configuration_id();
  PROTOBUF_NODISCARD std::string* release_configuration_id();
  void set_allocated_configuration_id(std::string* configuration_id);
  private:
  const std::string& _internal_configuration_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_configuration_id(const std::string& value);
  std::string* _internal_mutable_configuration_id();
  public:

  // @@protoc_insertion_point(class_scope:onos.config.admin.GetConfigurationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr configuration_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fconfig_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class GetConfigurationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.config.admin.GetConfigurationResponse) */ {
 public:
  inline GetConfigurationResponse() : GetConfigurationResponse(nullptr) {}
  ~GetConfigurationResponse() override;
  explicit constexpr GetConfigurationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetConfigurationResponse(const GetConfigurationResponse& from);
  GetConfigurationResponse(GetConfigurationResponse&& from) noexcept
    : GetConfigurationResponse() {
    *this = ::std::move(from);
  }

  inline GetConfigurationResponse& operator=(const GetConfigurationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetConfigurationResponse& operator=(GetConfigurationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetConfigurationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetConfigurationResponse* internal_default_instance() {
    return reinterpret_cast<const GetConfigurationResponse*>(
               &_GetConfigurationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(GetConfigurationResponse& a, GetConfigurationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetConfigurationResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetConfigurationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetConfigurationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetConfigurationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetConfigurationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetConfigurationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetConfigurationResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.config.admin.GetConfigurationResponse";
  }
  protected:
  explicit GetConfigurationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigurationFieldNumber = 1,
  };
  // .onos.config.v2.Configuration configuration = 1;
  bool has_configuration() const;
  private:
  bool _internal_has_configuration() const;
  public:
  void clear_configuration();
  const ::onos::config::v2::Configuration& configuration() const;
  PROTOBUF_NODISCARD ::onos::config::v2::Configuration* release_configuration();
  ::onos::config::v2::Configuration* mutable_configuration();
  void set_allocated_configuration(::onos::config::v2::Configuration* configuration);
  private:
  const ::onos::config::v2::Configuration& _internal_configuration() const;
  ::onos::config::v2::Configuration* _internal_mutable_configuration();
  public:
  void unsafe_arena_set_allocated_configuration(
      ::onos::config::v2::Configuration* configuration);
  ::onos::config::v2::Configuration* unsafe_arena_release_configuration();

  // @@protoc_insertion_point(class_scope:onos.config.admin.GetConfigurationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::config::v2::Configuration* configuration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fconfig_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class ListConfigurationsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:onos.config.admin.ListConfigurationsRequest) */ {
 public:
  inline ListConfigurationsRequest() : ListConfigurationsRequest(nullptr) {}
  explicit constexpr ListConfigurationsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListConfigurationsRequest(const ListConfigurationsRequest& from);
  ListConfigurationsRequest(ListConfigurationsRequest&& from) noexcept
    : ListConfigurationsRequest() {
    *this = ::std::move(from);
  }

  inline ListConfigurationsRequest& operator=(const ListConfigurationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListConfigurationsRequest& operator=(ListConfigurationsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListConfigurationsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListConfigurationsRequest* internal_default_instance() {
    return reinterpret_cast<const ListConfigurationsRequest*>(
               &_ListConfigurationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ListConfigurationsRequest& a, ListConfigurationsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListConfigurationsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListConfigurationsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListConfigurationsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListConfigurationsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ListConfigurationsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ListConfigurationsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.config.admin.ListConfigurationsRequest";
  }
  protected:
  explicit ListConfigurationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onos.config.admin.ListConfigurationsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fconfig_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class ListConfigurationsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.config.admin.ListConfigurationsResponse) */ {
 public:
  inline ListConfigurationsResponse() : ListConfigurationsResponse(nullptr) {}
  ~ListConfigurationsResponse() override;
  explicit constexpr ListConfigurationsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListConfigurationsResponse(const ListConfigurationsResponse& from);
  ListConfigurationsResponse(ListConfigurationsResponse&& from) noexcept
    : ListConfigurationsResponse() {
    *this = ::std::move(from);
  }

  inline ListConfigurationsResponse& operator=(const ListConfigurationsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListConfigurationsResponse& operator=(ListConfigurationsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListConfigurationsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListConfigurationsResponse* internal_default_instance() {
    return reinterpret_cast<const ListConfigurationsResponse*>(
               &_ListConfigurationsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ListConfigurationsResponse& a, ListConfigurationsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListConfigurationsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListConfigurationsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListConfigurationsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListConfigurationsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListConfigurationsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListConfigurationsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListConfigurationsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.config.admin.ListConfigurationsResponse";
  }
  protected:
  explicit ListConfigurationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigurationFieldNumber = 1,
  };
  // .onos.config.v2.Configuration configuration = 1;
  bool has_configuration() const;
  private:
  bool _internal_has_configuration() const;
  public:
  void clear_configuration();
  const ::onos::config::v2::Configuration& configuration() const;
  PROTOBUF_NODISCARD ::onos::config::v2::Configuration* release_configuration();
  ::onos::config::v2::Configuration* mutable_configuration();
  void set_allocated_configuration(::onos::config::v2::Configuration* configuration);
  private:
  const ::onos::config::v2::Configuration& _internal_configuration() const;
  ::onos::config::v2::Configuration* _internal_mutable_configuration();
  public:
  void unsafe_arena_set_allocated_configuration(
      ::onos::config::v2::Configuration* configuration);
  ::onos::config::v2::Configuration* unsafe_arena_release_configuration();

  // @@protoc_insertion_point(class_scope:onos.config.admin.ListConfigurationsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::config::v2::Configuration* configuration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fconfig_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class WatchConfigurationsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.config.admin.WatchConfigurationsRequest) */ {
 public:
  inline WatchConfigurationsRequest() : WatchConfigurationsRequest(nullptr) {}
  ~WatchConfigurationsRequest() override;
  explicit constexpr WatchConfigurationsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WatchConfigurationsRequest(const WatchConfigurationsRequest& from);
  WatchConfigurationsRequest(WatchConfigurationsRequest&& from) noexcept
    : WatchConfigurationsRequest() {
    *this = ::std::move(from);
  }

  inline WatchConfigurationsRequest& operator=(const WatchConfigurationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchConfigurationsRequest& operator=(WatchConfigurationsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WatchConfigurationsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const WatchConfigurationsRequest* internal_default_instance() {
    return reinterpret_cast<const WatchConfigurationsRequest*>(
               &_WatchConfigurationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(WatchConfigurationsRequest& a, WatchConfigurationsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchConfigurationsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchConfigurationsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WatchConfigurationsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WatchConfigurationsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WatchConfigurationsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WatchConfigurationsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchConfigurationsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.config.admin.WatchConfigurationsRequest";
  }
  protected:
  explicit WatchConfigurationsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigurationIdFieldNumber = 1,
    kNoreplayFieldNumber = 2,
  };
  // string configuration_id = 1 [(.gogoproto.customname) = "ConfigurationID", (.gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/config/v2.ConfigurationID"];
  void clear_configuration_id();
  const std::string& configuration_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_configuration_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_configuration_id();
  PROTOBUF_NODISCARD std::string* release_configuration_id();
  void set_allocated_configuration_id(std::string* configuration_id);
  private:
  const std::string& _internal_configuration_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_configuration_id(const std::string& value);
  std::string* _internal_mutable_configuration_id();
  public:

  // bool noreplay = 2;
  void clear_noreplay();
  bool noreplay() const;
  void set_noreplay(bool value);
  private:
  bool _internal_noreplay() const;
  void _internal_set_noreplay(bool value);
  public:

  // @@protoc_insertion_point(class_scope:onos.config.admin.WatchConfigurationsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr configuration_id_;
  bool noreplay_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fconfig_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class WatchConfigurationsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.config.admin.WatchConfigurationsResponse) */ {
 public:
  inline WatchConfigurationsResponse() : WatchConfigurationsResponse(nullptr) {}
  ~WatchConfigurationsResponse() override;
  explicit constexpr WatchConfigurationsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WatchConfigurationsResponse(const WatchConfigurationsResponse& from);
  WatchConfigurationsResponse(WatchConfigurationsResponse&& from) noexcept
    : WatchConfigurationsResponse() {
    *this = ::std::move(from);
  }

  inline WatchConfigurationsResponse& operator=(const WatchConfigurationsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline WatchConfigurationsResponse& operator=(WatchConfigurationsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WatchConfigurationsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const WatchConfigurationsResponse* internal_default_instance() {
    return reinterpret_cast<const WatchConfigurationsResponse*>(
               &_WatchConfigurationsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(WatchConfigurationsResponse& a, WatchConfigurationsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(WatchConfigurationsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WatchConfigurationsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  WatchConfigurationsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<WatchConfigurationsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const WatchConfigurationsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const WatchConfigurationsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WatchConfigurationsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.config.admin.WatchConfigurationsResponse";
  }
  protected:
  explicit WatchConfigurationsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventFieldNumber = 1,
  };
  // .onos.config.v2.ConfigurationEvent event = 1 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
  bool has_event() const;
  private:
  bool _internal_has_event() const;
  public:
  void clear_event();
  const ::onos::config::v2::ConfigurationEvent& event() const;
  PROTOBUF_NODISCARD ::onos::config::v2::ConfigurationEvent* release_event();
  ::onos::config::v2::ConfigurationEvent* mutable_event();
  void set_allocated_event(::onos::config::v2::ConfigurationEvent* event);
  private:
  const ::onos::config::v2::ConfigurationEvent& _internal_event() const;
  ::onos::config::v2::ConfigurationEvent* _internal_mutable_event();
  public:
  void unsafe_arena_set_allocated_event(
      ::onos::config::v2::ConfigurationEvent* event);
  ::onos::config::v2::ConfigurationEvent* unsafe_arena_release_event();

  // @@protoc_insertion_point(class_scope:onos.config.admin.WatchConfigurationsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::config::v2::ConfigurationEvent* event_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fconfig_2fadmin_2fadmin_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReadOnlySubPath

// string sub_path = 1;
inline void ReadOnlySubPath::clear_sub_path() {
  sub_path_.ClearToEmpty();
}
inline const std::string& ReadOnlySubPath::sub_path() const {
  // @@protoc_insertion_point(field_get:onos.config.admin.ReadOnlySubPath.sub_path)
  return _internal_sub_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadOnlySubPath::set_sub_path(ArgT0&& arg0, ArgT... args) {
 
 sub_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.config.admin.ReadOnlySubPath.sub_path)
}
inline std::string* ReadOnlySubPath::mutable_sub_path() {
  std::string* _s = _internal_mutable_sub_path();
  // @@protoc_insertion_point(field_mutable:onos.config.admin.ReadOnlySubPath.sub_path)
  return _s;
}
inline const std::string& ReadOnlySubPath::_internal_sub_path() const {
  return sub_path_.Get();
}
inline void ReadOnlySubPath::_internal_set_sub_path(const std::string& value) {
  
  sub_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReadOnlySubPath::_internal_mutable_sub_path() {
  
  return sub_path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReadOnlySubPath::release_sub_path() {
  // @@protoc_insertion_point(field_release:onos.config.admin.ReadOnlySubPath.sub_path)
  return sub_path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReadOnlySubPath::set_allocated_sub_path(std::string* sub_path) {
  if (sub_path != nullptr) {
    
  } else {
    
  }
  sub_path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sub_path,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (sub_path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    sub_path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.config.admin.ReadOnlySubPath.sub_path)
}

// .onos.config.v2.ValueType value_type = 2;
inline void ReadOnlySubPath::clear_value_type() {
  value_type_ = 0;
}
inline ::onos::config::v2::ValueType ReadOnlySubPath::_internal_value_type() const {
  return static_cast< ::onos::config::v2::ValueType >(value_type_);
}
inline ::onos::config::v2::ValueType ReadOnlySubPath::value_type() const {
  // @@protoc_insertion_point(field_get:onos.config.admin.ReadOnlySubPath.value_type)
  return _internal_value_type();
}
inline void ReadOnlySubPath::_internal_set_value_type(::onos::config::v2::ValueType value) {
  
  value_type_ = value;
}
inline void ReadOnlySubPath::set_value_type(::onos::config::v2::ValueType value) {
  _internal_set_value_type(value);
  // @@protoc_insertion_point(field_set:onos.config.admin.ReadOnlySubPath.value_type)
}

// repeated uint64 type_opts = 3;
inline int ReadOnlySubPath::_internal_type_opts_size() const {
  return type_opts_.size();
}
inline int ReadOnlySubPath::type_opts_size() const {
  return _internal_type_opts_size();
}
inline void ReadOnlySubPath::clear_type_opts() {
  type_opts_.Clear();
}
inline uint64_t ReadOnlySubPath::_internal_type_opts(int index) const {
  return type_opts_.Get(index);
}
inline uint64_t ReadOnlySubPath::type_opts(int index) const {
  // @@protoc_insertion_point(field_get:onos.config.admin.ReadOnlySubPath.type_opts)
  return _internal_type_opts(index);
}
inline void ReadOnlySubPath::set_type_opts(int index, uint64_t value) {
  type_opts_.Set(index, value);
  // @@protoc_insertion_point(field_set:onos.config.admin.ReadOnlySubPath.type_opts)
}
inline void ReadOnlySubPath::_internal_add_type_opts(uint64_t value) {
  type_opts_.Add(value);
}
inline void ReadOnlySubPath::add_type_opts(uint64_t value) {
  _internal_add_type_opts(value);
  // @@protoc_insertion_point(field_add:onos.config.admin.ReadOnlySubPath.type_opts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
ReadOnlySubPath::_internal_type_opts() const {
  return type_opts_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
ReadOnlySubPath::type_opts() const {
  // @@protoc_insertion_point(field_list:onos.config.admin.ReadOnlySubPath.type_opts)
  return _internal_type_opts();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
ReadOnlySubPath::_internal_mutable_type_opts() {
  return &type_opts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
ReadOnlySubPath::mutable_type_opts() {
  // @@protoc_insertion_point(field_mutable_list:onos.config.admin.ReadOnlySubPath.type_opts)
  return _internal_mutable_type_opts();
}

// string description = 4;
inline void ReadOnlySubPath::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& ReadOnlySubPath::description() const {
  // @@protoc_insertion_point(field_get:onos.config.admin.ReadOnlySubPath.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadOnlySubPath::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.config.admin.ReadOnlySubPath.description)
}
inline std::string* ReadOnlySubPath::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:onos.config.admin.ReadOnlySubPath.description)
  return _s;
}
inline const std::string& ReadOnlySubPath::_internal_description() const {
  return description_.Get();
}
inline void ReadOnlySubPath::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReadOnlySubPath::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReadOnlySubPath::release_description() {
  // @@protoc_insertion_point(field_release:onos.config.admin.ReadOnlySubPath.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReadOnlySubPath::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.config.admin.ReadOnlySubPath.description)
}

// string units = 5;
inline void ReadOnlySubPath::clear_units() {
  units_.ClearToEmpty();
}
inline const std::string& ReadOnlySubPath::units() const {
  // @@protoc_insertion_point(field_get:onos.config.admin.ReadOnlySubPath.units)
  return _internal_units();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadOnlySubPath::set_units(ArgT0&& arg0, ArgT... args) {
 
 units_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.config.admin.ReadOnlySubPath.units)
}
inline std::string* ReadOnlySubPath::mutable_units() {
  std::string* _s = _internal_mutable_units();
  // @@protoc_insertion_point(field_mutable:onos.config.admin.ReadOnlySubPath.units)
  return _s;
}
inline const std::string& ReadOnlySubPath::_internal_units() const {
  return units_.Get();
}
inline void ReadOnlySubPath::_internal_set_units(const std::string& value) {
  
  units_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReadOnlySubPath::_internal_mutable_units() {
  
  return units_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReadOnlySubPath::release_units() {
  // @@protoc_insertion_point(field_release:onos.config.admin.ReadOnlySubPath.units)
  return units_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReadOnlySubPath::set_allocated_units(std::string* units) {
  if (units != nullptr) {
    
  } else {
    
  }
  units_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), units,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (units_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    units_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.config.admin.ReadOnlySubPath.units)
}

// bool IsAKey = 6;
inline void ReadOnlySubPath::clear_isakey() {
  isakey_ = false;
}
inline bool ReadOnlySubPath::_internal_isakey() const {
  return isakey_;
}
inline bool ReadOnlySubPath::isakey() const {
  // @@protoc_insertion_point(field_get:onos.config.admin.ReadOnlySubPath.IsAKey)
  return _internal_isakey();
}
inline void ReadOnlySubPath::_internal_set_isakey(bool value) {
  
  isakey_ = value;
}
inline void ReadOnlySubPath::set_isakey(bool value) {
  _internal_set_isakey(value);
  // @@protoc_insertion_point(field_set:onos.config.admin.ReadOnlySubPath.IsAKey)
}

// string AttrName = 7;
inline void ReadOnlySubPath::clear_attrname() {
  attrname_.ClearToEmpty();
}
inline const std::string& ReadOnlySubPath::attrname() const {
  // @@protoc_insertion_point(field_get:onos.config.admin.ReadOnlySubPath.AttrName)
  return _internal_attrname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadOnlySubPath::set_attrname(ArgT0&& arg0, ArgT... args) {
 
 attrname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.config.admin.ReadOnlySubPath.AttrName)
}
inline std::string* ReadOnlySubPath::mutable_attrname() {
  std::string* _s = _internal_mutable_attrname();
  // @@protoc_insertion_point(field_mutable:onos.config.admin.ReadOnlySubPath.AttrName)
  return _s;
}
inline const std::string& ReadOnlySubPath::_internal_attrname() const {
  return attrname_.Get();
}
inline void ReadOnlySubPath::_internal_set_attrname(const std::string& value) {
  
  attrname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReadOnlySubPath::_internal_mutable_attrname() {
  
  return attrname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReadOnlySubPath::release_attrname() {
  // @@protoc_insertion_point(field_release:onos.config.admin.ReadOnlySubPath.AttrName)
  return attrname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReadOnlySubPath::set_allocated_attrname(std::string* attrname) {
  if (attrname != nullptr) {
    
  } else {
    
  }
  attrname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attrname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (attrname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    attrname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.config.admin.ReadOnlySubPath.AttrName)
}

// -------------------------------------------------------------------

// ReadOnlyPath

// string path = 1;
inline void ReadOnlyPath::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& ReadOnlyPath::path() const {
  // @@protoc_insertion_point(field_get:onos.config.admin.ReadOnlyPath.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadOnlyPath::set_path(ArgT0&& arg0, ArgT... args) {
 
 path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.config.admin.ReadOnlyPath.path)
}
inline std::string* ReadOnlyPath::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:onos.config.admin.ReadOnlyPath.path)
  return _s;
}
inline const std::string& ReadOnlyPath::_internal_path() const {
  return path_.Get();
}
inline void ReadOnlyPath::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReadOnlyPath::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReadOnlyPath::release_path() {
  // @@protoc_insertion_point(field_release:onos.config.admin.ReadOnlyPath.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReadOnlyPath::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.config.admin.ReadOnlyPath.path)
}

// repeated .onos.config.admin.ReadOnlySubPath sub_path = 2;
inline int ReadOnlyPath::_internal_sub_path_size() const {
  return sub_path_.size();
}
inline int ReadOnlyPath::sub_path_size() const {
  return _internal_sub_path_size();
}
inline void ReadOnlyPath::clear_sub_path() {
  sub_path_.Clear();
}
inline ::onos::config::admin::ReadOnlySubPath* ReadOnlyPath::mutable_sub_path(int index) {
  // @@protoc_insertion_point(field_mutable:onos.config.admin.ReadOnlyPath.sub_path)
  return sub_path_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::config::admin::ReadOnlySubPath >*
ReadOnlyPath::mutable_sub_path() {
  // @@protoc_insertion_point(field_mutable_list:onos.config.admin.ReadOnlyPath.sub_path)
  return &sub_path_;
}
inline const ::onos::config::admin::ReadOnlySubPath& ReadOnlyPath::_internal_sub_path(int index) const {
  return sub_path_.Get(index);
}
inline const ::onos::config::admin::ReadOnlySubPath& ReadOnlyPath::sub_path(int index) const {
  // @@protoc_insertion_point(field_get:onos.config.admin.ReadOnlyPath.sub_path)
  return _internal_sub_path(index);
}
inline ::onos::config::admin::ReadOnlySubPath* ReadOnlyPath::_internal_add_sub_path() {
  return sub_path_.Add();
}
inline ::onos::config::admin::ReadOnlySubPath* ReadOnlyPath::add_sub_path() {
  ::onos::config::admin::ReadOnlySubPath* _add = _internal_add_sub_path();
  // @@protoc_insertion_point(field_add:onos.config.admin.ReadOnlyPath.sub_path)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::config::admin::ReadOnlySubPath >&
ReadOnlyPath::sub_path() const {
  // @@protoc_insertion_point(field_list:onos.config.admin.ReadOnlyPath.sub_path)
  return sub_path_;
}

// -------------------------------------------------------------------

// ReadWritePath

// string path = 1;
inline void ReadWritePath::clear_path() {
  path_.ClearToEmpty();
}
inline const std::string& ReadWritePath::path() const {
  // @@protoc_insertion_point(field_get:onos.config.admin.ReadWritePath.path)
  return _internal_path();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadWritePath::set_path(ArgT0&& arg0, ArgT... args) {
 
 path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.config.admin.ReadWritePath.path)
}
inline std::string* ReadWritePath::mutable_path() {
  std::string* _s = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:onos.config.admin.ReadWritePath.path)
  return _s;
}
inline const std::string& ReadWritePath::_internal_path() const {
  return path_.Get();
}
inline void ReadWritePath::_internal_set_path(const std::string& value) {
  
  path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReadWritePath::_internal_mutable_path() {
  
  return path_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReadWritePath::release_path() {
  // @@protoc_insertion_point(field_release:onos.config.admin.ReadWritePath.path)
  return path_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReadWritePath::set_allocated_path(std::string* path) {
  if (path != nullptr) {
    
  } else {
    
  }
  path_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), path,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (path_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    path_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.config.admin.ReadWritePath.path)
}

// .onos.config.v2.ValueType value_type = 2;
inline void ReadWritePath::clear_value_type() {
  value_type_ = 0;
}
inline ::onos::config::v2::ValueType ReadWritePath::_internal_value_type() const {
  return static_cast< ::onos::config::v2::ValueType >(value_type_);
}
inline ::onos::config::v2::ValueType ReadWritePath::value_type() const {
  // @@protoc_insertion_point(field_get:onos.config.admin.ReadWritePath.value_type)
  return _internal_value_type();
}
inline void ReadWritePath::_internal_set_value_type(::onos::config::v2::ValueType value) {
  
  value_type_ = value;
}
inline void ReadWritePath::set_value_type(::onos::config::v2::ValueType value) {
  _internal_set_value_type(value);
  // @@protoc_insertion_point(field_set:onos.config.admin.ReadWritePath.value_type)
}

// string units = 3;
inline void ReadWritePath::clear_units() {
  units_.ClearToEmpty();
}
inline const std::string& ReadWritePath::units() const {
  // @@protoc_insertion_point(field_get:onos.config.admin.ReadWritePath.units)
  return _internal_units();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadWritePath::set_units(ArgT0&& arg0, ArgT... args) {
 
 units_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.config.admin.ReadWritePath.units)
}
inline std::string* ReadWritePath::mutable_units() {
  std::string* _s = _internal_mutable_units();
  // @@protoc_insertion_point(field_mutable:onos.config.admin.ReadWritePath.units)
  return _s;
}
inline const std::string& ReadWritePath::_internal_units() const {
  return units_.Get();
}
inline void ReadWritePath::_internal_set_units(const std::string& value) {
  
  units_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReadWritePath::_internal_mutable_units() {
  
  return units_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReadWritePath::release_units() {
  // @@protoc_insertion_point(field_release:onos.config.admin.ReadWritePath.units)
  return units_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReadWritePath::set_allocated_units(std::string* units) {
  if (units != nullptr) {
    
  } else {
    
  }
  units_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), units,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (units_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    units_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.config.admin.ReadWritePath.units)
}

// string description = 4;
inline void ReadWritePath::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& ReadWritePath::description() const {
  // @@protoc_insertion_point(field_get:onos.config.admin.ReadWritePath.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadWritePath::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.config.admin.ReadWritePath.description)
}
inline std::string* ReadWritePath::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:onos.config.admin.ReadWritePath.description)
  return _s;
}
inline const std::string& ReadWritePath::_internal_description() const {
  return description_.Get();
}
inline void ReadWritePath::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReadWritePath::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReadWritePath::release_description() {
  // @@protoc_insertion_point(field_release:onos.config.admin.ReadWritePath.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReadWritePath::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.config.admin.ReadWritePath.description)
}

// bool mandatory = 5;
inline void ReadWritePath::clear_mandatory() {
  mandatory_ = false;
}
inline bool ReadWritePath::_internal_mandatory() const {
  return mandatory_;
}
inline bool ReadWritePath::mandatory() const {
  // @@protoc_insertion_point(field_get:onos.config.admin.ReadWritePath.mandatory)
  return _internal_mandatory();
}
inline void ReadWritePath::_internal_set_mandatory(bool value) {
  
  mandatory_ = value;
}
inline void ReadWritePath::set_mandatory(bool value) {
  _internal_set_mandatory(value);
  // @@protoc_insertion_point(field_set:onos.config.admin.ReadWritePath.mandatory)
}

// string default = 6;
inline void ReadWritePath::clear_default_() {
  default__.ClearToEmpty();
}
inline const std::string& ReadWritePath::default_() const {
  // @@protoc_insertion_point(field_get:onos.config.admin.ReadWritePath.default)
  return _internal_default_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadWritePath::set_default_(ArgT0&& arg0, ArgT... args) {
 
 default__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.config.admin.ReadWritePath.default)
}
inline std::string* ReadWritePath::mutable_default_() {
  std::string* _s = _internal_mutable_default_();
  // @@protoc_insertion_point(field_mutable:onos.config.admin.ReadWritePath.default)
  return _s;
}
inline const std::string& ReadWritePath::_internal_default_() const {
  return default__.Get();
}
inline void ReadWritePath::_internal_set_default_(const std::string& value) {
  
  default__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReadWritePath::_internal_mutable_default_() {
  
  return default__.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReadWritePath::release_default_() {
  // @@protoc_insertion_point(field_release:onos.config.admin.ReadWritePath.default)
  return default__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReadWritePath::set_allocated_default_(std::string* default_) {
  if (default_ != nullptr) {
    
  } else {
    
  }
  default__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), default_,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (default__.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    default__.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.config.admin.ReadWritePath.default)
}

// repeated string range = 7;
inline int ReadWritePath::_internal_range_size() const {
  return range_.size();
}
inline int ReadWritePath::range_size() const {
  return _internal_range_size();
}
inline void ReadWritePath::clear_range() {
  range_.Clear();
}
inline std::string* ReadWritePath::add_range() {
  std::string* _s = _internal_add_range();
  // @@protoc_insertion_point(field_add_mutable:onos.config.admin.ReadWritePath.range)
  return _s;
}
inline const std::string& ReadWritePath::_internal_range(int index) const {
  return range_.Get(index);
}
inline const std::string& ReadWritePath::range(int index) const {
  // @@protoc_insertion_point(field_get:onos.config.admin.ReadWritePath.range)
  return _internal_range(index);
}
inline std::string* ReadWritePath::mutable_range(int index) {
  // @@protoc_insertion_point(field_mutable:onos.config.admin.ReadWritePath.range)
  return range_.Mutable(index);
}
inline void ReadWritePath::set_range(int index, const std::string& value) {
  range_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:onos.config.admin.ReadWritePath.range)
}
inline void ReadWritePath::set_range(int index, std::string&& value) {
  range_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:onos.config.admin.ReadWritePath.range)
}
inline void ReadWritePath::set_range(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  range_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:onos.config.admin.ReadWritePath.range)
}
inline void ReadWritePath::set_range(int index, const char* value, size_t size) {
  range_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onos.config.admin.ReadWritePath.range)
}
inline std::string* ReadWritePath::_internal_add_range() {
  return range_.Add();
}
inline void ReadWritePath::add_range(const std::string& value) {
  range_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:onos.config.admin.ReadWritePath.range)
}
inline void ReadWritePath::add_range(std::string&& value) {
  range_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:onos.config.admin.ReadWritePath.range)
}
inline void ReadWritePath::add_range(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  range_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:onos.config.admin.ReadWritePath.range)
}
inline void ReadWritePath::add_range(const char* value, size_t size) {
  range_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:onos.config.admin.ReadWritePath.range)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ReadWritePath::range() const {
  // @@protoc_insertion_point(field_list:onos.config.admin.ReadWritePath.range)
  return range_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ReadWritePath::mutable_range() {
  // @@protoc_insertion_point(field_mutable_list:onos.config.admin.ReadWritePath.range)
  return &range_;
}

// repeated string length = 8;
inline int ReadWritePath::_internal_length_size() const {
  return length_.size();
}
inline int ReadWritePath::length_size() const {
  return _internal_length_size();
}
inline void ReadWritePath::clear_length() {
  length_.Clear();
}
inline std::string* ReadWritePath::add_length() {
  std::string* _s = _internal_add_length();
  // @@protoc_insertion_point(field_add_mutable:onos.config.admin.ReadWritePath.length)
  return _s;
}
inline const std::string& ReadWritePath::_internal_length(int index) const {
  return length_.Get(index);
}
inline const std::string& ReadWritePath::length(int index) const {
  // @@protoc_insertion_point(field_get:onos.config.admin.ReadWritePath.length)
  return _internal_length(index);
}
inline std::string* ReadWritePath::mutable_length(int index) {
  // @@protoc_insertion_point(field_mutable:onos.config.admin.ReadWritePath.length)
  return length_.Mutable(index);
}
inline void ReadWritePath::set_length(int index, const std::string& value) {
  length_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:onos.config.admin.ReadWritePath.length)
}
inline void ReadWritePath::set_length(int index, std::string&& value) {
  length_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:onos.config.admin.ReadWritePath.length)
}
inline void ReadWritePath::set_length(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  length_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:onos.config.admin.ReadWritePath.length)
}
inline void ReadWritePath::set_length(int index, const char* value, size_t size) {
  length_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onos.config.admin.ReadWritePath.length)
}
inline std::string* ReadWritePath::_internal_add_length() {
  return length_.Add();
}
inline void ReadWritePath::add_length(const std::string& value) {
  length_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:onos.config.admin.ReadWritePath.length)
}
inline void ReadWritePath::add_length(std::string&& value) {
  length_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:onos.config.admin.ReadWritePath.length)
}
inline void ReadWritePath::add_length(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  length_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:onos.config.admin.ReadWritePath.length)
}
inline void ReadWritePath::add_length(const char* value, size_t size) {
  length_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:onos.config.admin.ReadWritePath.length)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ReadWritePath::length() const {
  // @@protoc_insertion_point(field_list:onos.config.admin.ReadWritePath.length)
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ReadWritePath::mutable_length() {
  // @@protoc_insertion_point(field_mutable_list:onos.config.admin.ReadWritePath.length)
  return &length_;
}

// repeated uint64 type_opts = 9;
inline int ReadWritePath::_internal_type_opts_size() const {
  return type_opts_.size();
}
inline int ReadWritePath::type_opts_size() const {
  return _internal_type_opts_size();
}
inline void ReadWritePath::clear_type_opts() {
  type_opts_.Clear();
}
inline uint64_t ReadWritePath::_internal_type_opts(int index) const {
  return type_opts_.Get(index);
}
inline uint64_t ReadWritePath::type_opts(int index) const {
  // @@protoc_insertion_point(field_get:onos.config.admin.ReadWritePath.type_opts)
  return _internal_type_opts(index);
}
inline void ReadWritePath::set_type_opts(int index, uint64_t value) {
  type_opts_.Set(index, value);
  // @@protoc_insertion_point(field_set:onos.config.admin.ReadWritePath.type_opts)
}
inline void ReadWritePath::_internal_add_type_opts(uint64_t value) {
  type_opts_.Add(value);
}
inline void ReadWritePath::add_type_opts(uint64_t value) {
  _internal_add_type_opts(value);
  // @@protoc_insertion_point(field_add:onos.config.admin.ReadWritePath.type_opts)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
ReadWritePath::_internal_type_opts() const {
  return type_opts_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >&
ReadWritePath::type_opts() const {
  // @@protoc_insertion_point(field_list:onos.config.admin.ReadWritePath.type_opts)
  return _internal_type_opts();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
ReadWritePath::_internal_mutable_type_opts() {
  return &type_opts_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< uint64_t >*
ReadWritePath::mutable_type_opts() {
  // @@protoc_insertion_point(field_mutable_list:onos.config.admin.ReadWritePath.type_opts)
  return _internal_mutable_type_opts();
}

// bool IsAKey = 10;
inline void ReadWritePath::clear_isakey() {
  isakey_ = false;
}
inline bool ReadWritePath::_internal_isakey() const {
  return isakey_;
}
inline bool ReadWritePath::isakey() const {
  // @@protoc_insertion_point(field_get:onos.config.admin.ReadWritePath.IsAKey)
  return _internal_isakey();
}
inline void ReadWritePath::_internal_set_isakey(bool value) {
  
  isakey_ = value;
}
inline void ReadWritePath::set_isakey(bool value) {
  _internal_set_isakey(value);
  // @@protoc_insertion_point(field_set:onos.config.admin.ReadWritePath.IsAKey)
}

// string AttrName = 11;
inline void ReadWritePath::clear_attrname() {
  attrname_.ClearToEmpty();
}
inline const std::string& ReadWritePath::attrname() const {
  // @@protoc_insertion_point(field_get:onos.config.admin.ReadWritePath.AttrName)
  return _internal_attrname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReadWritePath::set_attrname(ArgT0&& arg0, ArgT... args) {
 
 attrname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.config.admin.ReadWritePath.AttrName)
}
inline std::string* ReadWritePath::mutable_attrname() {
  std::string* _s = _internal_mutable_attrname();
  // @@protoc_insertion_point(field_mutable:onos.config.admin.ReadWritePath.AttrName)
  return _s;
}
inline const std::string& ReadWritePath::_internal_attrname() const {
  return attrname_.Get();
}
inline void ReadWritePath::_internal_set_attrname(const std::string& value) {
  
  attrname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReadWritePath::_internal_mutable_attrname() {
  
  return attrname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReadWritePath::release_attrname() {
  // @@protoc_insertion_point(field_release:onos.config.admin.ReadWritePath.AttrName)
  return attrname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReadWritePath::set_allocated_attrname(std::string* attrname) {
  if (attrname != nullptr) {
    
  } else {
    
  }
  attrname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attrname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (attrname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    attrname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.config.admin.ReadWritePath.AttrName)
}

// -------------------------------------------------------------------

// ModelInfo

// string name = 1;
inline void ModelInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ModelInfo::name() const {
  // @@protoc_insertion_point(field_get:onos.config.admin.ModelInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.config.admin.ModelInfo.name)
}
inline std::string* ModelInfo::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:onos.config.admin.ModelInfo.name)
  return _s;
}
inline const std::string& ModelInfo::_internal_name() const {
  return name_.Get();
}
inline void ModelInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ModelInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ModelInfo::release_name() {
  // @@protoc_insertion_point(field_release:onos.config.admin.ModelInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ModelInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.config.admin.ModelInfo.name)
}

// string version = 2;
inline void ModelInfo::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& ModelInfo::version() const {
  // @@protoc_insertion_point(field_get:onos.config.admin.ModelInfo.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelInfo::set_version(ArgT0&& arg0, ArgT... args) {
 
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.config.admin.ModelInfo.version)
}
inline std::string* ModelInfo::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:onos.config.admin.ModelInfo.version)
  return _s;
}
inline const std::string& ModelInfo::_internal_version() const {
  return version_.Get();
}
inline void ModelInfo::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ModelInfo::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ModelInfo::release_version() {
  // @@protoc_insertion_point(field_release:onos.config.admin.ModelInfo.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ModelInfo::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.config.admin.ModelInfo.version)
}

// repeated .gnmi.ModelData model_data = 3;
inline int ModelInfo::_internal_model_data_size() const {
  return model_data_.size();
}
inline int ModelInfo::model_data_size() const {
  return _internal_model_data_size();
}
inline ::gnmi::ModelData* ModelInfo::mutable_model_data(int index) {
  // @@protoc_insertion_point(field_mutable:onos.config.admin.ModelInfo.model_data)
  return model_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::ModelData >*
ModelInfo::mutable_model_data() {
  // @@protoc_insertion_point(field_mutable_list:onos.config.admin.ModelInfo.model_data)
  return &model_data_;
}
inline const ::gnmi::ModelData& ModelInfo::_internal_model_data(int index) const {
  return model_data_.Get(index);
}
inline const ::gnmi::ModelData& ModelInfo::model_data(int index) const {
  // @@protoc_insertion_point(field_get:onos.config.admin.ModelInfo.model_data)
  return _internal_model_data(index);
}
inline ::gnmi::ModelData* ModelInfo::_internal_add_model_data() {
  return model_data_.Add();
}
inline ::gnmi::ModelData* ModelInfo::add_model_data() {
  ::gnmi::ModelData* _add = _internal_add_model_data();
  // @@protoc_insertion_point(field_add:onos.config.admin.ModelInfo.model_data)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::gnmi::ModelData >&
ModelInfo::model_data() const {
  // @@protoc_insertion_point(field_list:onos.config.admin.ModelInfo.model_data)
  return model_data_;
}

// string module = 4;
inline void ModelInfo::clear_module() {
  module_.ClearToEmpty();
}
inline const std::string& ModelInfo::module() const {
  // @@protoc_insertion_point(field_get:onos.config.admin.ModelInfo.module)
  return _internal_module();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelInfo::set_module(ArgT0&& arg0, ArgT... args) {
 
 module_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.config.admin.ModelInfo.module)
}
inline std::string* ModelInfo::mutable_module() {
  std::string* _s = _internal_mutable_module();
  // @@protoc_insertion_point(field_mutable:onos.config.admin.ModelInfo.module)
  return _s;
}
inline const std::string& ModelInfo::_internal_module() const {
  return module_.Get();
}
inline void ModelInfo::_internal_set_module(const std::string& value) {
  
  module_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ModelInfo::_internal_mutable_module() {
  
  return module_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ModelInfo::release_module() {
  // @@protoc_insertion_point(field_release:onos.config.admin.ModelInfo.module)
  return module_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ModelInfo::set_allocated_module(std::string* module) {
  if (module != nullptr) {
    
  } else {
    
  }
  module_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), module,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (module_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    module_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.config.admin.ModelInfo.module)
}

// uint32 getStateMode = 5;
inline void ModelInfo::clear_getstatemode() {
  getstatemode_ = 0u;
}
inline uint32_t ModelInfo::_internal_getstatemode() const {
  return getstatemode_;
}
inline uint32_t ModelInfo::getstatemode() const {
  // @@protoc_insertion_point(field_get:onos.config.admin.ModelInfo.getStateMode)
  return _internal_getstatemode();
}
inline void ModelInfo::_internal_set_getstatemode(uint32_t value) {
  
  getstatemode_ = value;
}
inline void ModelInfo::set_getstatemode(uint32_t value) {
  _internal_set_getstatemode(value);
  // @@protoc_insertion_point(field_set:onos.config.admin.ModelInfo.getStateMode)
}

// repeated .onos.config.admin.ReadOnlyPath read_only_path = 7;
inline int ModelInfo::_internal_read_only_path_size() const {
  return read_only_path_.size();
}
inline int ModelInfo::read_only_path_size() const {
  return _internal_read_only_path_size();
}
inline void ModelInfo::clear_read_only_path() {
  read_only_path_.Clear();
}
inline ::onos::config::admin::ReadOnlyPath* ModelInfo::mutable_read_only_path(int index) {
  // @@protoc_insertion_point(field_mutable:onos.config.admin.ModelInfo.read_only_path)
  return read_only_path_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::config::admin::ReadOnlyPath >*
ModelInfo::mutable_read_only_path() {
  // @@protoc_insertion_point(field_mutable_list:onos.config.admin.ModelInfo.read_only_path)
  return &read_only_path_;
}
inline const ::onos::config::admin::ReadOnlyPath& ModelInfo::_internal_read_only_path(int index) const {
  return read_only_path_.Get(index);
}
inline const ::onos::config::admin::ReadOnlyPath& ModelInfo::read_only_path(int index) const {
  // @@protoc_insertion_point(field_get:onos.config.admin.ModelInfo.read_only_path)
  return _internal_read_only_path(index);
}
inline ::onos::config::admin::ReadOnlyPath* ModelInfo::_internal_add_read_only_path() {
  return read_only_path_.Add();
}
inline ::onos::config::admin::ReadOnlyPath* ModelInfo::add_read_only_path() {
  ::onos::config::admin::ReadOnlyPath* _add = _internal_add_read_only_path();
  // @@protoc_insertion_point(field_add:onos.config.admin.ModelInfo.read_only_path)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::config::admin::ReadOnlyPath >&
ModelInfo::read_only_path() const {
  // @@protoc_insertion_point(field_list:onos.config.admin.ModelInfo.read_only_path)
  return read_only_path_;
}

// repeated .onos.config.admin.ReadWritePath read_write_path = 8;
inline int ModelInfo::_internal_read_write_path_size() const {
  return read_write_path_.size();
}
inline int ModelInfo::read_write_path_size() const {
  return _internal_read_write_path_size();
}
inline void ModelInfo::clear_read_write_path() {
  read_write_path_.Clear();
}
inline ::onos::config::admin::ReadWritePath* ModelInfo::mutable_read_write_path(int index) {
  // @@protoc_insertion_point(field_mutable:onos.config.admin.ModelInfo.read_write_path)
  return read_write_path_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::config::admin::ReadWritePath >*
ModelInfo::mutable_read_write_path() {
  // @@protoc_insertion_point(field_mutable_list:onos.config.admin.ModelInfo.read_write_path)
  return &read_write_path_;
}
inline const ::onos::config::admin::ReadWritePath& ModelInfo::_internal_read_write_path(int index) const {
  return read_write_path_.Get(index);
}
inline const ::onos::config::admin::ReadWritePath& ModelInfo::read_write_path(int index) const {
  // @@protoc_insertion_point(field_get:onos.config.admin.ModelInfo.read_write_path)
  return _internal_read_write_path(index);
}
inline ::onos::config::admin::ReadWritePath* ModelInfo::_internal_add_read_write_path() {
  return read_write_path_.Add();
}
inline ::onos::config::admin::ReadWritePath* ModelInfo::add_read_write_path() {
  ::onos::config::admin::ReadWritePath* _add = _internal_add_read_write_path();
  // @@protoc_insertion_point(field_add:onos.config.admin.ModelInfo.read_write_path)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::config::admin::ReadWritePath >&
ModelInfo::read_write_path() const {
  // @@protoc_insertion_point(field_list:onos.config.admin.ModelInfo.read_write_path)
  return read_write_path_;
}

// repeated .gnmi.Encoding supported_encodings = 9;
inline int ModelInfo::_internal_supported_encodings_size() const {
  return supported_encodings_.size();
}
inline int ModelInfo::supported_encodings_size() const {
  return _internal_supported_encodings_size();
}
inline void ModelInfo::clear_supported_encodings() {
  supported_encodings_.Clear();
}
inline ::gnmi::Encoding ModelInfo::_internal_supported_encodings(int index) const {
  return static_cast< ::gnmi::Encoding >(supported_encodings_.Get(index));
}
inline ::gnmi::Encoding ModelInfo::supported_encodings(int index) const {
  // @@protoc_insertion_point(field_get:onos.config.admin.ModelInfo.supported_encodings)
  return _internal_supported_encodings(index);
}
inline void ModelInfo::set_supported_encodings(int index, ::gnmi::Encoding value) {
  supported_encodings_.Set(index, value);
  // @@protoc_insertion_point(field_set:onos.config.admin.ModelInfo.supported_encodings)
}
inline void ModelInfo::_internal_add_supported_encodings(::gnmi::Encoding value) {
  supported_encodings_.Add(value);
}
inline void ModelInfo::add_supported_encodings(::gnmi::Encoding value) {
  _internal_add_supported_encodings(value);
  // @@protoc_insertion_point(field_add:onos.config.admin.ModelInfo.supported_encodings)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
ModelInfo::supported_encodings() const {
  // @@protoc_insertion_point(field_list:onos.config.admin.ModelInfo.supported_encodings)
  return supported_encodings_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ModelInfo::_internal_mutable_supported_encodings() {
  return &supported_encodings_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ModelInfo::mutable_supported_encodings() {
  // @@protoc_insertion_point(field_mutable_list:onos.config.admin.ModelInfo.supported_encodings)
  return _internal_mutable_supported_encodings();
}

// -------------------------------------------------------------------

// ModelPlugin

// string id = 1;
inline void ModelPlugin::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& ModelPlugin::id() const {
  // @@protoc_insertion_point(field_get:onos.config.admin.ModelPlugin.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelPlugin::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.config.admin.ModelPlugin.id)
}
inline std::string* ModelPlugin::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:onos.config.admin.ModelPlugin.id)
  return _s;
}
inline const std::string& ModelPlugin::_internal_id() const {
  return id_.Get();
}
inline void ModelPlugin::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ModelPlugin::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ModelPlugin::release_id() {
  // @@protoc_insertion_point(field_release:onos.config.admin.ModelPlugin.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ModelPlugin::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.config.admin.ModelPlugin.id)
}

// string endpoint = 2;
inline void ModelPlugin::clear_endpoint() {
  endpoint_.ClearToEmpty();
}
inline const std::string& ModelPlugin::endpoint() const {
  // @@protoc_insertion_point(field_get:onos.config.admin.ModelPlugin.endpoint)
  return _internal_endpoint();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelPlugin::set_endpoint(ArgT0&& arg0, ArgT... args) {
 
 endpoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.config.admin.ModelPlugin.endpoint)
}
inline std::string* ModelPlugin::mutable_endpoint() {
  std::string* _s = _internal_mutable_endpoint();
  // @@protoc_insertion_point(field_mutable:onos.config.admin.ModelPlugin.endpoint)
  return _s;
}
inline const std::string& ModelPlugin::_internal_endpoint() const {
  return endpoint_.Get();
}
inline void ModelPlugin::_internal_set_endpoint(const std::string& value) {
  
  endpoint_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ModelPlugin::_internal_mutable_endpoint() {
  
  return endpoint_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ModelPlugin::release_endpoint() {
  // @@protoc_insertion_point(field_release:onos.config.admin.ModelPlugin.endpoint)
  return endpoint_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ModelPlugin::set_allocated_endpoint(std::string* endpoint) {
  if (endpoint != nullptr) {
    
  } else {
    
  }
  endpoint_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), endpoint,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (endpoint_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    endpoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.config.admin.ModelPlugin.endpoint)
}

// .onos.config.admin.ModelInfo info = 3;
inline bool ModelPlugin::_internal_has_info() const {
  return this != internal_default_instance() && info_ != nullptr;
}
inline bool ModelPlugin::has_info() const {
  return _internal_has_info();
}
inline void ModelPlugin::clear_info() {
  if (GetArenaForAllocation() == nullptr && info_ != nullptr) {
    delete info_;
  }
  info_ = nullptr;
}
inline const ::onos::config::admin::ModelInfo& ModelPlugin::_internal_info() const {
  const ::onos::config::admin::ModelInfo* p = info_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::config::admin::ModelInfo&>(
      ::onos::config::admin::_ModelInfo_default_instance_);
}
inline const ::onos::config::admin::ModelInfo& ModelPlugin::info() const {
  // @@protoc_insertion_point(field_get:onos.config.admin.ModelPlugin.info)
  return _internal_info();
}
inline void ModelPlugin::unsafe_arena_set_allocated_info(
    ::onos::config::admin::ModelInfo* info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(info_);
  }
  info_ = info;
  if (info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.config.admin.ModelPlugin.info)
}
inline ::onos::config::admin::ModelInfo* ModelPlugin::release_info() {
  
  ::onos::config::admin::ModelInfo* temp = info_;
  info_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::config::admin::ModelInfo* ModelPlugin::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_release:onos.config.admin.ModelPlugin.info)
  
  ::onos::config::admin::ModelInfo* temp = info_;
  info_ = nullptr;
  return temp;
}
inline ::onos::config::admin::ModelInfo* ModelPlugin::_internal_mutable_info() {
  
  if (info_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::config::admin::ModelInfo>(GetArenaForAllocation());
    info_ = p;
  }
  return info_;
}
inline ::onos::config::admin::ModelInfo* ModelPlugin::mutable_info() {
  ::onos::config::admin::ModelInfo* _msg = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:onos.config.admin.ModelPlugin.info)
  return _msg;
}
inline void ModelPlugin::set_allocated_info(::onos::config::admin::ModelInfo* info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete info_;
  }
  if (info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::config::admin::ModelInfo>::GetOwningArena(info);
    if (message_arena != submessage_arena) {
      info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, info, submessage_arena);
    }
    
  } else {
    
  }
  info_ = info;
  // @@protoc_insertion_point(field_set_allocated:onos.config.admin.ModelPlugin.info)
}

// string status = 10;
inline void ModelPlugin::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& ModelPlugin::status() const {
  // @@protoc_insertion_point(field_get:onos.config.admin.ModelPlugin.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelPlugin::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.config.admin.ModelPlugin.status)
}
inline std::string* ModelPlugin::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:onos.config.admin.ModelPlugin.status)
  return _s;
}
inline const std::string& ModelPlugin::_internal_status() const {
  return status_.Get();
}
inline void ModelPlugin::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ModelPlugin::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ModelPlugin::release_status() {
  // @@protoc_insertion_point(field_release:onos.config.admin.ModelPlugin.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ModelPlugin::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (status_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    status_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.config.admin.ModelPlugin.status)
}

// string error = 11;
inline void ModelPlugin::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& ModelPlugin::error() const {
  // @@protoc_insertion_point(field_get:onos.config.admin.ModelPlugin.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ModelPlugin::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.config.admin.ModelPlugin.error)
}
inline std::string* ModelPlugin::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:onos.config.admin.ModelPlugin.error)
  return _s;
}
inline const std::string& ModelPlugin::_internal_error() const {
  return error_.Get();
}
inline void ModelPlugin::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ModelPlugin::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ModelPlugin::release_error() {
  // @@protoc_insertion_point(field_release:onos.config.admin.ModelPlugin.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ModelPlugin::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (error_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.config.admin.ModelPlugin.error)
}

// -------------------------------------------------------------------

// ListModelsRequest

// bool verbose = 1;
inline void ListModelsRequest::clear_verbose() {
  verbose_ = false;
}
inline bool ListModelsRequest::_internal_verbose() const {
  return verbose_;
}
inline bool ListModelsRequest::verbose() const {
  // @@protoc_insertion_point(field_get:onos.config.admin.ListModelsRequest.verbose)
  return _internal_verbose();
}
inline void ListModelsRequest::_internal_set_verbose(bool value) {
  
  verbose_ = value;
}
inline void ListModelsRequest::set_verbose(bool value) {
  _internal_set_verbose(value);
  // @@protoc_insertion_point(field_set:onos.config.admin.ListModelsRequest.verbose)
}

// string model_name = 2;
inline void ListModelsRequest::clear_model_name() {
  model_name_.ClearToEmpty();
}
inline const std::string& ListModelsRequest::model_name() const {
  // @@protoc_insertion_point(field_get:onos.config.admin.ListModelsRequest.model_name)
  return _internal_model_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListModelsRequest::set_model_name(ArgT0&& arg0, ArgT... args) {
 
 model_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.config.admin.ListModelsRequest.model_name)
}
inline std::string* ListModelsRequest::mutable_model_name() {
  std::string* _s = _internal_mutable_model_name();
  // @@protoc_insertion_point(field_mutable:onos.config.admin.ListModelsRequest.model_name)
  return _s;
}
inline const std::string& ListModelsRequest::_internal_model_name() const {
  return model_name_.Get();
}
inline void ListModelsRequest::_internal_set_model_name(const std::string& value) {
  
  model_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListModelsRequest::_internal_mutable_model_name() {
  
  return model_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListModelsRequest::release_model_name() {
  // @@protoc_insertion_point(field_release:onos.config.admin.ListModelsRequest.model_name)
  return model_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListModelsRequest::set_allocated_model_name(std::string* model_name) {
  if (model_name != nullptr) {
    
  } else {
    
  }
  model_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.config.admin.ListModelsRequest.model_name)
}

// string model_version = 3;
inline void ListModelsRequest::clear_model_version() {
  model_version_.ClearToEmpty();
}
inline const std::string& ListModelsRequest::model_version() const {
  // @@protoc_insertion_point(field_get:onos.config.admin.ListModelsRequest.model_version)
  return _internal_model_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListModelsRequest::set_model_version(ArgT0&& arg0, ArgT... args) {
 
 model_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.config.admin.ListModelsRequest.model_version)
}
inline std::string* ListModelsRequest::mutable_model_version() {
  std::string* _s = _internal_mutable_model_version();
  // @@protoc_insertion_point(field_mutable:onos.config.admin.ListModelsRequest.model_version)
  return _s;
}
inline const std::string& ListModelsRequest::_internal_model_version() const {
  return model_version_.Get();
}
inline void ListModelsRequest::_internal_set_model_version(const std::string& value) {
  
  model_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListModelsRequest::_internal_mutable_model_version() {
  
  return model_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListModelsRequest::release_model_version() {
  // @@protoc_insertion_point(field_release:onos.config.admin.ListModelsRequest.model_version)
  return model_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListModelsRequest::set_allocated_model_version(std::string* model_version) {
  if (model_version != nullptr) {
    
  } else {
    
  }
  model_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.config.admin.ListModelsRequest.model_version)
}

// -------------------------------------------------------------------

// RollbackRequest

// uint64 index = 1 [(.gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/config/v2.Index"];
inline void RollbackRequest::clear_index() {
  index_ = uint64_t{0u};
}
inline uint64_t RollbackRequest::_internal_index() const {
  return index_;
}
inline uint64_t RollbackRequest::index() const {
  // @@protoc_insertion_point(field_get:onos.config.admin.RollbackRequest.index)
  return _internal_index();
}
inline void RollbackRequest::_internal_set_index(uint64_t value) {
  
  index_ = value;
}
inline void RollbackRequest::set_index(uint64_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:onos.config.admin.RollbackRequest.index)
}

// -------------------------------------------------------------------

// RollbackResponse

// string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/config/v2.TransactionID"];
inline void RollbackResponse::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& RollbackResponse::id() const {
  // @@protoc_insertion_point(field_get:onos.config.admin.RollbackResponse.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RollbackResponse::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.config.admin.RollbackResponse.id)
}
inline std::string* RollbackResponse::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:onos.config.admin.RollbackResponse.id)
  return _s;
}
inline const std::string& RollbackResponse::_internal_id() const {
  return id_.Get();
}
inline void RollbackResponse::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RollbackResponse::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RollbackResponse::release_id() {
  // @@protoc_insertion_point(field_release:onos.config.admin.RollbackResponse.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RollbackResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.config.admin.RollbackResponse.id)
}

// uint64 index = 2 [(.gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/config/v2.Index"];
inline void RollbackResponse::clear_index() {
  index_ = uint64_t{0u};
}
inline uint64_t RollbackResponse::_internal_index() const {
  return index_;
}
inline uint64_t RollbackResponse::index() const {
  // @@protoc_insertion_point(field_get:onos.config.admin.RollbackResponse.index)
  return _internal_index();
}
inline void RollbackResponse::_internal_set_index(uint64_t value) {
  
  index_ = value;
}
inline void RollbackResponse::set_index(uint64_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:onos.config.admin.RollbackResponse.index)
}

// -------------------------------------------------------------------

// ModelInfoRequest

// -------------------------------------------------------------------

// ModelInfoResponse

// .onos.config.admin.ModelInfo modelInfo = 1;
inline bool ModelInfoResponse::_internal_has_modelinfo() const {
  return this != internal_default_instance() && modelinfo_ != nullptr;
}
inline bool ModelInfoResponse::has_modelinfo() const {
  return _internal_has_modelinfo();
}
inline void ModelInfoResponse::clear_modelinfo() {
  if (GetArenaForAllocation() == nullptr && modelinfo_ != nullptr) {
    delete modelinfo_;
  }
  modelinfo_ = nullptr;
}
inline const ::onos::config::admin::ModelInfo& ModelInfoResponse::_internal_modelinfo() const {
  const ::onos::config::admin::ModelInfo* p = modelinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::config::admin::ModelInfo&>(
      ::onos::config::admin::_ModelInfo_default_instance_);
}
inline const ::onos::config::admin::ModelInfo& ModelInfoResponse::modelinfo() const {
  // @@protoc_insertion_point(field_get:onos.config.admin.ModelInfoResponse.modelInfo)
  return _internal_modelinfo();
}
inline void ModelInfoResponse::unsafe_arena_set_allocated_modelinfo(
    ::onos::config::admin::ModelInfo* modelinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(modelinfo_);
  }
  modelinfo_ = modelinfo;
  if (modelinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.config.admin.ModelInfoResponse.modelInfo)
}
inline ::onos::config::admin::ModelInfo* ModelInfoResponse::release_modelinfo() {
  
  ::onos::config::admin::ModelInfo* temp = modelinfo_;
  modelinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::config::admin::ModelInfo* ModelInfoResponse::unsafe_arena_release_modelinfo() {
  // @@protoc_insertion_point(field_release:onos.config.admin.ModelInfoResponse.modelInfo)
  
  ::onos::config::admin::ModelInfo* temp = modelinfo_;
  modelinfo_ = nullptr;
  return temp;
}
inline ::onos::config::admin::ModelInfo* ModelInfoResponse::_internal_mutable_modelinfo() {
  
  if (modelinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::config::admin::ModelInfo>(GetArenaForAllocation());
    modelinfo_ = p;
  }
  return modelinfo_;
}
inline ::onos::config::admin::ModelInfo* ModelInfoResponse::mutable_modelinfo() {
  ::onos::config::admin::ModelInfo* _msg = _internal_mutable_modelinfo();
  // @@protoc_insertion_point(field_mutable:onos.config.admin.ModelInfoResponse.modelInfo)
  return _msg;
}
inline void ModelInfoResponse::set_allocated_modelinfo(::onos::config::admin::ModelInfo* modelinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete modelinfo_;
  }
  if (modelinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::config::admin::ModelInfo>::GetOwningArena(modelinfo);
    if (message_arena != submessage_arena) {
      modelinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, modelinfo, submessage_arena);
    }
    
  } else {
    
  }
  modelinfo_ = modelinfo;
  // @@protoc_insertion_point(field_set_allocated:onos.config.admin.ModelInfoResponse.modelInfo)
}

// -------------------------------------------------------------------

// ValidateConfigRequest

// bytes json = 1;
inline void ValidateConfigRequest::clear_json() {
  json_.ClearToEmpty();
}
inline const std::string& ValidateConfigRequest::json() const {
  // @@protoc_insertion_point(field_get:onos.config.admin.ValidateConfigRequest.json)
  return _internal_json();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ValidateConfigRequest::set_json(ArgT0&& arg0, ArgT... args) {
 
 json_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.config.admin.ValidateConfigRequest.json)
}
inline std::string* ValidateConfigRequest::mutable_json() {
  std::string* _s = _internal_mutable_json();
  // @@protoc_insertion_point(field_mutable:onos.config.admin.ValidateConfigRequest.json)
  return _s;
}
inline const std::string& ValidateConfigRequest::_internal_json() const {
  return json_.Get();
}
inline void ValidateConfigRequest::_internal_set_json(const std::string& value) {
  
  json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ValidateConfigRequest::_internal_mutable_json() {
  
  return json_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ValidateConfigRequest::release_json() {
  // @@protoc_insertion_point(field_release:onos.config.admin.ValidateConfigRequest.json)
  return json_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ValidateConfigRequest::set_allocated_json(std::string* json) {
  if (json != nullptr) {
    
  } else {
    
  }
  json_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), json,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (json_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.config.admin.ValidateConfigRequest.json)
}

// -------------------------------------------------------------------

// ValidateConfigResponse

// bool valid = 1;
inline void ValidateConfigResponse::clear_valid() {
  valid_ = false;
}
inline bool ValidateConfigResponse::_internal_valid() const {
  return valid_;
}
inline bool ValidateConfigResponse::valid() const {
  // @@protoc_insertion_point(field_get:onos.config.admin.ValidateConfigResponse.valid)
  return _internal_valid();
}
inline void ValidateConfigResponse::_internal_set_valid(bool value) {
  
  valid_ = value;
}
inline void ValidateConfigResponse::set_valid(bool value) {
  _internal_set_valid(value);
  // @@protoc_insertion_point(field_set:onos.config.admin.ValidateConfigResponse.valid)
}

// string message = 2;
inline void ValidateConfigResponse::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& ValidateConfigResponse::message() const {
  // @@protoc_insertion_point(field_get:onos.config.admin.ValidateConfigResponse.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ValidateConfigResponse::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.config.admin.ValidateConfigResponse.message)
}
inline std::string* ValidateConfigResponse::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:onos.config.admin.ValidateConfigResponse.message)
  return _s;
}
inline const std::string& ValidateConfigResponse::_internal_message() const {
  return message_.Get();
}
inline void ValidateConfigResponse::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ValidateConfigResponse::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ValidateConfigResponse::release_message() {
  // @@protoc_insertion_point(field_release:onos.config.admin.ValidateConfigResponse.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ValidateConfigResponse::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (message_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.config.admin.ValidateConfigResponse.message)
}

// -------------------------------------------------------------------

// PathValuesRequest

// string pathPrefix = 1;
inline void PathValuesRequest::clear_pathprefix() {
  pathprefix_.ClearToEmpty();
}
inline const std::string& PathValuesRequest::pathprefix() const {
  // @@protoc_insertion_point(field_get:onos.config.admin.PathValuesRequest.pathPrefix)
  return _internal_pathprefix();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PathValuesRequest::set_pathprefix(ArgT0&& arg0, ArgT... args) {
 
 pathprefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.config.admin.PathValuesRequest.pathPrefix)
}
inline std::string* PathValuesRequest::mutable_pathprefix() {
  std::string* _s = _internal_mutable_pathprefix();
  // @@protoc_insertion_point(field_mutable:onos.config.admin.PathValuesRequest.pathPrefix)
  return _s;
}
inline const std::string& PathValuesRequest::_internal_pathprefix() const {
  return pathprefix_.Get();
}
inline void PathValuesRequest::_internal_set_pathprefix(const std::string& value) {
  
  pathprefix_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PathValuesRequest::_internal_mutable_pathprefix() {
  
  return pathprefix_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PathValuesRequest::release_pathprefix() {
  // @@protoc_insertion_point(field_release:onos.config.admin.PathValuesRequest.pathPrefix)
  return pathprefix_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PathValuesRequest::set_allocated_pathprefix(std::string* pathprefix) {
  if (pathprefix != nullptr) {
    
  } else {
    
  }
  pathprefix_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pathprefix,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (pathprefix_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    pathprefix_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.config.admin.PathValuesRequest.pathPrefix)
}

// bytes json = 2;
inline void PathValuesRequest::clear_json() {
  json_.ClearToEmpty();
}
inline const std::string& PathValuesRequest::json() const {
  // @@protoc_insertion_point(field_get:onos.config.admin.PathValuesRequest.json)
  return _internal_json();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PathValuesRequest::set_json(ArgT0&& arg0, ArgT... args) {
 
 json_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.config.admin.PathValuesRequest.json)
}
inline std::string* PathValuesRequest::mutable_json() {
  std::string* _s = _internal_mutable_json();
  // @@protoc_insertion_point(field_mutable:onos.config.admin.PathValuesRequest.json)
  return _s;
}
inline const std::string& PathValuesRequest::_internal_json() const {
  return json_.Get();
}
inline void PathValuesRequest::_internal_set_json(const std::string& value) {
  
  json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PathValuesRequest::_internal_mutable_json() {
  
  return json_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PathValuesRequest::release_json() {
  // @@protoc_insertion_point(field_release:onos.config.admin.PathValuesRequest.json)
  return json_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PathValuesRequest::set_allocated_json(std::string* json) {
  if (json != nullptr) {
    
  } else {
    
  }
  json_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), json,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (json_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    json_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.config.admin.PathValuesRequest.json)
}

// -------------------------------------------------------------------

// PathValuesResponse

// repeated .onos.config.v2.PathValue pathValues = 1;
inline int PathValuesResponse::_internal_pathvalues_size() const {
  return pathvalues_.size();
}
inline int PathValuesResponse::pathvalues_size() const {
  return _internal_pathvalues_size();
}
inline ::onos::config::v2::PathValue* PathValuesResponse::mutable_pathvalues(int index) {
  // @@protoc_insertion_point(field_mutable:onos.config.admin.PathValuesResponse.pathValues)
  return pathvalues_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::config::v2::PathValue >*
PathValuesResponse::mutable_pathvalues() {
  // @@protoc_insertion_point(field_mutable_list:onos.config.admin.PathValuesResponse.pathValues)
  return &pathvalues_;
}
inline const ::onos::config::v2::PathValue& PathValuesResponse::_internal_pathvalues(int index) const {
  return pathvalues_.Get(index);
}
inline const ::onos::config::v2::PathValue& PathValuesResponse::pathvalues(int index) const {
  // @@protoc_insertion_point(field_get:onos.config.admin.PathValuesResponse.pathValues)
  return _internal_pathvalues(index);
}
inline ::onos::config::v2::PathValue* PathValuesResponse::_internal_add_pathvalues() {
  return pathvalues_.Add();
}
inline ::onos::config::v2::PathValue* PathValuesResponse::add_pathvalues() {
  ::onos::config::v2::PathValue* _add = _internal_add_pathvalues();
  // @@protoc_insertion_point(field_add:onos.config.admin.PathValuesResponse.pathValues)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::config::v2::PathValue >&
PathValuesResponse::pathvalues() const {
  // @@protoc_insertion_point(field_list:onos.config.admin.PathValuesResponse.pathValues)
  return pathvalues_;
}

// -------------------------------------------------------------------

// GetTransactionRequest

// string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/config/v2.TransactionID"];
inline void GetTransactionRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& GetTransactionRequest::id() const {
  // @@protoc_insertion_point(field_get:onos.config.admin.GetTransactionRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetTransactionRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.config.admin.GetTransactionRequest.id)
}
inline std::string* GetTransactionRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:onos.config.admin.GetTransactionRequest.id)
  return _s;
}
inline const std::string& GetTransactionRequest::_internal_id() const {
  return id_.Get();
}
inline void GetTransactionRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetTransactionRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetTransactionRequest::release_id() {
  // @@protoc_insertion_point(field_release:onos.config.admin.GetTransactionRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetTransactionRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.config.admin.GetTransactionRequest.id)
}

// uint64 index = 2 [(.gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/config/v2.Index"];
inline void GetTransactionRequest::clear_index() {
  index_ = uint64_t{0u};
}
inline uint64_t GetTransactionRequest::_internal_index() const {
  return index_;
}
inline uint64_t GetTransactionRequest::index() const {
  // @@protoc_insertion_point(field_get:onos.config.admin.GetTransactionRequest.index)
  return _internal_index();
}
inline void GetTransactionRequest::_internal_set_index(uint64_t value) {
  
  index_ = value;
}
inline void GetTransactionRequest::set_index(uint64_t value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:onos.config.admin.GetTransactionRequest.index)
}

// -------------------------------------------------------------------

// GetTransactionResponse

// .onos.config.v2.Transaction transaction = 1;
inline bool GetTransactionResponse::_internal_has_transaction() const {
  return this != internal_default_instance() && transaction_ != nullptr;
}
inline bool GetTransactionResponse::has_transaction() const {
  return _internal_has_transaction();
}
inline const ::onos::config::v2::Transaction& GetTransactionResponse::_internal_transaction() const {
  const ::onos::config::v2::Transaction* p = transaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::config::v2::Transaction&>(
      ::onos::config::v2::_Transaction_default_instance_);
}
inline const ::onos::config::v2::Transaction& GetTransactionResponse::transaction() const {
  // @@protoc_insertion_point(field_get:onos.config.admin.GetTransactionResponse.transaction)
  return _internal_transaction();
}
inline void GetTransactionResponse::unsafe_arena_set_allocated_transaction(
    ::onos::config::v2::Transaction* transaction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction_);
  }
  transaction_ = transaction;
  if (transaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.config.admin.GetTransactionResponse.transaction)
}
inline ::onos::config::v2::Transaction* GetTransactionResponse::release_transaction() {
  
  ::onos::config::v2::Transaction* temp = transaction_;
  transaction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::config::v2::Transaction* GetTransactionResponse::unsafe_arena_release_transaction() {
  // @@protoc_insertion_point(field_release:onos.config.admin.GetTransactionResponse.transaction)
  
  ::onos::config::v2::Transaction* temp = transaction_;
  transaction_ = nullptr;
  return temp;
}
inline ::onos::config::v2::Transaction* GetTransactionResponse::_internal_mutable_transaction() {
  
  if (transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::config::v2::Transaction>(GetArenaForAllocation());
    transaction_ = p;
  }
  return transaction_;
}
inline ::onos::config::v2::Transaction* GetTransactionResponse::mutable_transaction() {
  ::onos::config::v2::Transaction* _msg = _internal_mutable_transaction();
  // @@protoc_insertion_point(field_mutable:onos.config.admin.GetTransactionResponse.transaction)
  return _msg;
}
inline void GetTransactionResponse::set_allocated_transaction(::onos::config::v2::Transaction* transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction_);
  }
  if (transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction));
    if (message_arena != submessage_arena) {
      transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction, submessage_arena);
    }
    
  } else {
    
  }
  transaction_ = transaction;
  // @@protoc_insertion_point(field_set_allocated:onos.config.admin.GetTransactionResponse.transaction)
}

// -------------------------------------------------------------------

// ListTransactionsRequest

// -------------------------------------------------------------------

// ListTransactionsResponse

// .onos.config.v2.Transaction transaction = 1;
inline bool ListTransactionsResponse::_internal_has_transaction() const {
  return this != internal_default_instance() && transaction_ != nullptr;
}
inline bool ListTransactionsResponse::has_transaction() const {
  return _internal_has_transaction();
}
inline const ::onos::config::v2::Transaction& ListTransactionsResponse::_internal_transaction() const {
  const ::onos::config::v2::Transaction* p = transaction_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::config::v2::Transaction&>(
      ::onos::config::v2::_Transaction_default_instance_);
}
inline const ::onos::config::v2::Transaction& ListTransactionsResponse::transaction() const {
  // @@protoc_insertion_point(field_get:onos.config.admin.ListTransactionsResponse.transaction)
  return _internal_transaction();
}
inline void ListTransactionsResponse::unsafe_arena_set_allocated_transaction(
    ::onos::config::v2::Transaction* transaction) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction_);
  }
  transaction_ = transaction;
  if (transaction) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.config.admin.ListTransactionsResponse.transaction)
}
inline ::onos::config::v2::Transaction* ListTransactionsResponse::release_transaction() {
  
  ::onos::config::v2::Transaction* temp = transaction_;
  transaction_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::config::v2::Transaction* ListTransactionsResponse::unsafe_arena_release_transaction() {
  // @@protoc_insertion_point(field_release:onos.config.admin.ListTransactionsResponse.transaction)
  
  ::onos::config::v2::Transaction* temp = transaction_;
  transaction_ = nullptr;
  return temp;
}
inline ::onos::config::v2::Transaction* ListTransactionsResponse::_internal_mutable_transaction() {
  
  if (transaction_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::config::v2::Transaction>(GetArenaForAllocation());
    transaction_ = p;
  }
  return transaction_;
}
inline ::onos::config::v2::Transaction* ListTransactionsResponse::mutable_transaction() {
  ::onos::config::v2::Transaction* _msg = _internal_mutable_transaction();
  // @@protoc_insertion_point(field_mutable:onos.config.admin.ListTransactionsResponse.transaction)
  return _msg;
}
inline void ListTransactionsResponse::set_allocated_transaction(::onos::config::v2::Transaction* transaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction_);
  }
  if (transaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction));
    if (message_arena != submessage_arena) {
      transaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction, submessage_arena);
    }
    
  } else {
    
  }
  transaction_ = transaction;
  // @@protoc_insertion_point(field_set_allocated:onos.config.admin.ListTransactionsResponse.transaction)
}

// -------------------------------------------------------------------

// WatchTransactionsRequest

// string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/config/v2.TransactionID"];
inline void WatchTransactionsRequest::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& WatchTransactionsRequest::id() const {
  // @@protoc_insertion_point(field_get:onos.config.admin.WatchTransactionsRequest.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WatchTransactionsRequest::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.config.admin.WatchTransactionsRequest.id)
}
inline std::string* WatchTransactionsRequest::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:onos.config.admin.WatchTransactionsRequest.id)
  return _s;
}
inline const std::string& WatchTransactionsRequest::_internal_id() const {
  return id_.Get();
}
inline void WatchTransactionsRequest::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WatchTransactionsRequest::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WatchTransactionsRequest::release_id() {
  // @@protoc_insertion_point(field_release:onos.config.admin.WatchTransactionsRequest.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WatchTransactionsRequest::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.config.admin.WatchTransactionsRequest.id)
}

// bool noreplay = 2;
inline void WatchTransactionsRequest::clear_noreplay() {
  noreplay_ = false;
}
inline bool WatchTransactionsRequest::_internal_noreplay() const {
  return noreplay_;
}
inline bool WatchTransactionsRequest::noreplay() const {
  // @@protoc_insertion_point(field_get:onos.config.admin.WatchTransactionsRequest.noreplay)
  return _internal_noreplay();
}
inline void WatchTransactionsRequest::_internal_set_noreplay(bool value) {
  
  noreplay_ = value;
}
inline void WatchTransactionsRequest::set_noreplay(bool value) {
  _internal_set_noreplay(value);
  // @@protoc_insertion_point(field_set:onos.config.admin.WatchTransactionsRequest.noreplay)
}

// -------------------------------------------------------------------

// WatchTransactionsResponse

// .onos.config.v2.TransactionEvent event = 1 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
inline bool WatchTransactionsResponse::_internal_has_event() const {
  return this != internal_default_instance() && event_ != nullptr;
}
inline bool WatchTransactionsResponse::has_event() const {
  return _internal_has_event();
}
inline const ::onos::config::v2::TransactionEvent& WatchTransactionsResponse::_internal_event() const {
  const ::onos::config::v2::TransactionEvent* p = event_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::config::v2::TransactionEvent&>(
      ::onos::config::v2::_TransactionEvent_default_instance_);
}
inline const ::onos::config::v2::TransactionEvent& WatchTransactionsResponse::event() const {
  // @@protoc_insertion_point(field_get:onos.config.admin.WatchTransactionsResponse.event)
  return _internal_event();
}
inline void WatchTransactionsResponse::unsafe_arena_set_allocated_event(
    ::onos::config::v2::TransactionEvent* event) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(event_);
  }
  event_ = event;
  if (event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.config.admin.WatchTransactionsResponse.event)
}
inline ::onos::config::v2::TransactionEvent* WatchTransactionsResponse::release_event() {
  
  ::onos::config::v2::TransactionEvent* temp = event_;
  event_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::config::v2::TransactionEvent* WatchTransactionsResponse::unsafe_arena_release_event() {
  // @@protoc_insertion_point(field_release:onos.config.admin.WatchTransactionsResponse.event)
  
  ::onos::config::v2::TransactionEvent* temp = event_;
  event_ = nullptr;
  return temp;
}
inline ::onos::config::v2::TransactionEvent* WatchTransactionsResponse::_internal_mutable_event() {
  
  if (event_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::config::v2::TransactionEvent>(GetArenaForAllocation());
    event_ = p;
  }
  return event_;
}
inline ::onos::config::v2::TransactionEvent* WatchTransactionsResponse::mutable_event() {
  ::onos::config::v2::TransactionEvent* _msg = _internal_mutable_event();
  // @@protoc_insertion_point(field_mutable:onos.config.admin.WatchTransactionsResponse.event)
  return _msg;
}
inline void WatchTransactionsResponse::set_allocated_event(::onos::config::v2::TransactionEvent* event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(event_);
  }
  if (event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(event));
    if (message_arena != submessage_arena) {
      event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    
  } else {
    
  }
  event_ = event;
  // @@protoc_insertion_point(field_set_allocated:onos.config.admin.WatchTransactionsResponse.event)
}

// -------------------------------------------------------------------

// GetConfigurationRequest

// string configuration_id = 1 [(.gogoproto.customname) = "ConfigurationID", (.gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/config/v2.ConfigurationID"];
inline void GetConfigurationRequest::clear_configuration_id() {
  configuration_id_.ClearToEmpty();
}
inline const std::string& GetConfigurationRequest::configuration_id() const {
  // @@protoc_insertion_point(field_get:onos.config.admin.GetConfigurationRequest.configuration_id)
  return _internal_configuration_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetConfigurationRequest::set_configuration_id(ArgT0&& arg0, ArgT... args) {
 
 configuration_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.config.admin.GetConfigurationRequest.configuration_id)
}
inline std::string* GetConfigurationRequest::mutable_configuration_id() {
  std::string* _s = _internal_mutable_configuration_id();
  // @@protoc_insertion_point(field_mutable:onos.config.admin.GetConfigurationRequest.configuration_id)
  return _s;
}
inline const std::string& GetConfigurationRequest::_internal_configuration_id() const {
  return configuration_id_.Get();
}
inline void GetConfigurationRequest::_internal_set_configuration_id(const std::string& value) {
  
  configuration_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetConfigurationRequest::_internal_mutable_configuration_id() {
  
  return configuration_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetConfigurationRequest::release_configuration_id() {
  // @@protoc_insertion_point(field_release:onos.config.admin.GetConfigurationRequest.configuration_id)
  return configuration_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetConfigurationRequest::set_allocated_configuration_id(std::string* configuration_id) {
  if (configuration_id != nullptr) {
    
  } else {
    
  }
  configuration_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), configuration_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (configuration_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    configuration_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.config.admin.GetConfigurationRequest.configuration_id)
}

// -------------------------------------------------------------------

// GetConfigurationResponse

// .onos.config.v2.Configuration configuration = 1;
inline bool GetConfigurationResponse::_internal_has_configuration() const {
  return this != internal_default_instance() && configuration_ != nullptr;
}
inline bool GetConfigurationResponse::has_configuration() const {
  return _internal_has_configuration();
}
inline const ::onos::config::v2::Configuration& GetConfigurationResponse::_internal_configuration() const {
  const ::onos::config::v2::Configuration* p = configuration_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::config::v2::Configuration&>(
      ::onos::config::v2::_Configuration_default_instance_);
}
inline const ::onos::config::v2::Configuration& GetConfigurationResponse::configuration() const {
  // @@protoc_insertion_point(field_get:onos.config.admin.GetConfigurationResponse.configuration)
  return _internal_configuration();
}
inline void GetConfigurationResponse::unsafe_arena_set_allocated_configuration(
    ::onos::config::v2::Configuration* configuration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(configuration_);
  }
  configuration_ = configuration;
  if (configuration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.config.admin.GetConfigurationResponse.configuration)
}
inline ::onos::config::v2::Configuration* GetConfigurationResponse::release_configuration() {
  
  ::onos::config::v2::Configuration* temp = configuration_;
  configuration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::config::v2::Configuration* GetConfigurationResponse::unsafe_arena_release_configuration() {
  // @@protoc_insertion_point(field_release:onos.config.admin.GetConfigurationResponse.configuration)
  
  ::onos::config::v2::Configuration* temp = configuration_;
  configuration_ = nullptr;
  return temp;
}
inline ::onos::config::v2::Configuration* GetConfigurationResponse::_internal_mutable_configuration() {
  
  if (configuration_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::config::v2::Configuration>(GetArenaForAllocation());
    configuration_ = p;
  }
  return configuration_;
}
inline ::onos::config::v2::Configuration* GetConfigurationResponse::mutable_configuration() {
  ::onos::config::v2::Configuration* _msg = _internal_mutable_configuration();
  // @@protoc_insertion_point(field_mutable:onos.config.admin.GetConfigurationResponse.configuration)
  return _msg;
}
inline void GetConfigurationResponse::set_allocated_configuration(::onos::config::v2::Configuration* configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(configuration_);
  }
  if (configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(configuration));
    if (message_arena != submessage_arena) {
      configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, configuration, submessage_arena);
    }
    
  } else {
    
  }
  configuration_ = configuration;
  // @@protoc_insertion_point(field_set_allocated:onos.config.admin.GetConfigurationResponse.configuration)
}

// -------------------------------------------------------------------

// ListConfigurationsRequest

// -------------------------------------------------------------------

// ListConfigurationsResponse

// .onos.config.v2.Configuration configuration = 1;
inline bool ListConfigurationsResponse::_internal_has_configuration() const {
  return this != internal_default_instance() && configuration_ != nullptr;
}
inline bool ListConfigurationsResponse::has_configuration() const {
  return _internal_has_configuration();
}
inline const ::onos::config::v2::Configuration& ListConfigurationsResponse::_internal_configuration() const {
  const ::onos::config::v2::Configuration* p = configuration_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::config::v2::Configuration&>(
      ::onos::config::v2::_Configuration_default_instance_);
}
inline const ::onos::config::v2::Configuration& ListConfigurationsResponse::configuration() const {
  // @@protoc_insertion_point(field_get:onos.config.admin.ListConfigurationsResponse.configuration)
  return _internal_configuration();
}
inline void ListConfigurationsResponse::unsafe_arena_set_allocated_configuration(
    ::onos::config::v2::Configuration* configuration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(configuration_);
  }
  configuration_ = configuration;
  if (configuration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.config.admin.ListConfigurationsResponse.configuration)
}
inline ::onos::config::v2::Configuration* ListConfigurationsResponse::release_configuration() {
  
  ::onos::config::v2::Configuration* temp = configuration_;
  configuration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::config::v2::Configuration* ListConfigurationsResponse::unsafe_arena_release_configuration() {
  // @@protoc_insertion_point(field_release:onos.config.admin.ListConfigurationsResponse.configuration)
  
  ::onos::config::v2::Configuration* temp = configuration_;
  configuration_ = nullptr;
  return temp;
}
inline ::onos::config::v2::Configuration* ListConfigurationsResponse::_internal_mutable_configuration() {
  
  if (configuration_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::config::v2::Configuration>(GetArenaForAllocation());
    configuration_ = p;
  }
  return configuration_;
}
inline ::onos::config::v2::Configuration* ListConfigurationsResponse::mutable_configuration() {
  ::onos::config::v2::Configuration* _msg = _internal_mutable_configuration();
  // @@protoc_insertion_point(field_mutable:onos.config.admin.ListConfigurationsResponse.configuration)
  return _msg;
}
inline void ListConfigurationsResponse::set_allocated_configuration(::onos::config::v2::Configuration* configuration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(configuration_);
  }
  if (configuration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(configuration));
    if (message_arena != submessage_arena) {
      configuration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, configuration, submessage_arena);
    }
    
  } else {
    
  }
  configuration_ = configuration;
  // @@protoc_insertion_point(field_set_allocated:onos.config.admin.ListConfigurationsResponse.configuration)
}

// -------------------------------------------------------------------

// WatchConfigurationsRequest

// string configuration_id = 1 [(.gogoproto.customname) = "ConfigurationID", (.gogoproto.casttype) = "github.com/onosproject/onos-api/go/onos/config/v2.ConfigurationID"];
inline void WatchConfigurationsRequest::clear_configuration_id() {
  configuration_id_.ClearToEmpty();
}
inline const std::string& WatchConfigurationsRequest::configuration_id() const {
  // @@protoc_insertion_point(field_get:onos.config.admin.WatchConfigurationsRequest.configuration_id)
  return _internal_configuration_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WatchConfigurationsRequest::set_configuration_id(ArgT0&& arg0, ArgT... args) {
 
 configuration_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.config.admin.WatchConfigurationsRequest.configuration_id)
}
inline std::string* WatchConfigurationsRequest::mutable_configuration_id() {
  std::string* _s = _internal_mutable_configuration_id();
  // @@protoc_insertion_point(field_mutable:onos.config.admin.WatchConfigurationsRequest.configuration_id)
  return _s;
}
inline const std::string& WatchConfigurationsRequest::_internal_configuration_id() const {
  return configuration_id_.Get();
}
inline void WatchConfigurationsRequest::_internal_set_configuration_id(const std::string& value) {
  
  configuration_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WatchConfigurationsRequest::_internal_mutable_configuration_id() {
  
  return configuration_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WatchConfigurationsRequest::release_configuration_id() {
  // @@protoc_insertion_point(field_release:onos.config.admin.WatchConfigurationsRequest.configuration_id)
  return configuration_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WatchConfigurationsRequest::set_allocated_configuration_id(std::string* configuration_id) {
  if (configuration_id != nullptr) {
    
  } else {
    
  }
  configuration_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), configuration_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (configuration_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    configuration_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.config.admin.WatchConfigurationsRequest.configuration_id)
}

// bool noreplay = 2;
inline void WatchConfigurationsRequest::clear_noreplay() {
  noreplay_ = false;
}
inline bool WatchConfigurationsRequest::_internal_noreplay() const {
  return noreplay_;
}
inline bool WatchConfigurationsRequest::noreplay() const {
  // @@protoc_insertion_point(field_get:onos.config.admin.WatchConfigurationsRequest.noreplay)
  return _internal_noreplay();
}
inline void WatchConfigurationsRequest::_internal_set_noreplay(bool value) {
  
  noreplay_ = value;
}
inline void WatchConfigurationsRequest::set_noreplay(bool value) {
  _internal_set_noreplay(value);
  // @@protoc_insertion_point(field_set:onos.config.admin.WatchConfigurationsRequest.noreplay)
}

// -------------------------------------------------------------------

// WatchConfigurationsResponse

// .onos.config.v2.ConfigurationEvent event = 1 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
inline bool WatchConfigurationsResponse::_internal_has_event() const {
  return this != internal_default_instance() && event_ != nullptr;
}
inline bool WatchConfigurationsResponse::has_event() const {
  return _internal_has_event();
}
inline const ::onos::config::v2::ConfigurationEvent& WatchConfigurationsResponse::_internal_event() const {
  const ::onos::config::v2::ConfigurationEvent* p = event_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::config::v2::ConfigurationEvent&>(
      ::onos::config::v2::_ConfigurationEvent_default_instance_);
}
inline const ::onos::config::v2::ConfigurationEvent& WatchConfigurationsResponse::event() const {
  // @@protoc_insertion_point(field_get:onos.config.admin.WatchConfigurationsResponse.event)
  return _internal_event();
}
inline void WatchConfigurationsResponse::unsafe_arena_set_allocated_event(
    ::onos::config::v2::ConfigurationEvent* event) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(event_);
  }
  event_ = event;
  if (event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.config.admin.WatchConfigurationsResponse.event)
}
inline ::onos::config::v2::ConfigurationEvent* WatchConfigurationsResponse::release_event() {
  
  ::onos::config::v2::ConfigurationEvent* temp = event_;
  event_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::config::v2::ConfigurationEvent* WatchConfigurationsResponse::unsafe_arena_release_event() {
  // @@protoc_insertion_point(field_release:onos.config.admin.WatchConfigurationsResponse.event)
  
  ::onos::config::v2::ConfigurationEvent* temp = event_;
  event_ = nullptr;
  return temp;
}
inline ::onos::config::v2::ConfigurationEvent* WatchConfigurationsResponse::_internal_mutable_event() {
  
  if (event_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::config::v2::ConfigurationEvent>(GetArenaForAllocation());
    event_ = p;
  }
  return event_;
}
inline ::onos::config::v2::ConfigurationEvent* WatchConfigurationsResponse::mutable_event() {
  ::onos::config::v2::ConfigurationEvent* _msg = _internal_mutable_event();
  // @@protoc_insertion_point(field_mutable:onos.config.admin.WatchConfigurationsResponse.event)
  return _msg;
}
inline void WatchConfigurationsResponse::set_allocated_event(::onos::config::v2::ConfigurationEvent* event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(event_);
  }
  if (event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(event));
    if (message_arena != submessage_arena) {
      event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event, submessage_arena);
    }
    
  } else {
    
  }
  event_ = event;
  // @@protoc_insertion_point(field_set_allocated:onos.config.admin.WatchConfigurationsResponse.event)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace admin
}  // namespace config
}  // namespace onos

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_onos_2fconfig_2fadmin_2fadmin_2eproto
