// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: onos/e2t/admin/admin.proto

#include "onos/e2t/admin/admin.pb.h"
#include "onos/e2t/admin/admin.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace onos {
namespace e2t {
namespace admin {

static const char* E2TAdminService_method_names[] = {
  "/onos.e2t.admin.E2TAdminService/UploadRegisterServiceModel",
  "/onos.e2t.admin.E2TAdminService/ListRegisteredServiceModels",
  "/onos.e2t.admin.E2TAdminService/ListE2NodeConnections",
  "/onos.e2t.admin.E2TAdminService/DropE2NodeConnections",
};

std::unique_ptr< E2TAdminService::Stub> E2TAdminService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< E2TAdminService::Stub> stub(new E2TAdminService::Stub(channel, options));
  return stub;
}

E2TAdminService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_UploadRegisterServiceModel_(E2TAdminService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_ListRegisteredServiceModels_(E2TAdminService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ListE2NodeConnections_(E2TAdminService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_DropE2NodeConnections_(E2TAdminService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientWriter< ::onos::e2t::admin::UploadRegisterServiceModelRequest>* E2TAdminService::Stub::UploadRegisterServiceModelRaw(::grpc::ClientContext* context, ::onos::e2t::admin::UploadRegisterServiceModelResponse* response) {
  return ::grpc::internal::ClientWriterFactory< ::onos::e2t::admin::UploadRegisterServiceModelRequest>::Create(channel_.get(), rpcmethod_UploadRegisterServiceModel_, context, response);
}

void E2TAdminService::Stub::async::UploadRegisterServiceModel(::grpc::ClientContext* context, ::onos::e2t::admin::UploadRegisterServiceModelResponse* response, ::grpc::ClientWriteReactor< ::onos::e2t::admin::UploadRegisterServiceModelRequest>* reactor) {
  ::grpc::internal::ClientCallbackWriterFactory< ::onos::e2t::admin::UploadRegisterServiceModelRequest>::Create(stub_->channel_.get(), stub_->rpcmethod_UploadRegisterServiceModel_, context, response, reactor);
}

::grpc::ClientAsyncWriter< ::onos::e2t::admin::UploadRegisterServiceModelRequest>* E2TAdminService::Stub::AsyncUploadRegisterServiceModelRaw(::grpc::ClientContext* context, ::onos::e2t::admin::UploadRegisterServiceModelResponse* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::onos::e2t::admin::UploadRegisterServiceModelRequest>::Create(channel_.get(), cq, rpcmethod_UploadRegisterServiceModel_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::onos::e2t::admin::UploadRegisterServiceModelRequest>* E2TAdminService::Stub::PrepareAsyncUploadRegisterServiceModelRaw(::grpc::ClientContext* context, ::onos::e2t::admin::UploadRegisterServiceModelResponse* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::onos::e2t::admin::UploadRegisterServiceModelRequest>::Create(channel_.get(), cq, rpcmethod_UploadRegisterServiceModel_, context, response, false, nullptr);
}

::grpc::ClientReader< ::onos::e2t::admin::ListRegisteredServiceModelsResponse>* E2TAdminService::Stub::ListRegisteredServiceModelsRaw(::grpc::ClientContext* context, const ::onos::e2t::admin::ListRegisteredServiceModelsRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::onos::e2t::admin::ListRegisteredServiceModelsResponse>::Create(channel_.get(), rpcmethod_ListRegisteredServiceModels_, context, request);
}

void E2TAdminService::Stub::async::ListRegisteredServiceModels(::grpc::ClientContext* context, const ::onos::e2t::admin::ListRegisteredServiceModelsRequest* request, ::grpc::ClientReadReactor< ::onos::e2t::admin::ListRegisteredServiceModelsResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::onos::e2t::admin::ListRegisteredServiceModelsResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_ListRegisteredServiceModels_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::onos::e2t::admin::ListRegisteredServiceModelsResponse>* E2TAdminService::Stub::AsyncListRegisteredServiceModelsRaw(::grpc::ClientContext* context, const ::onos::e2t::admin::ListRegisteredServiceModelsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::onos::e2t::admin::ListRegisteredServiceModelsResponse>::Create(channel_.get(), cq, rpcmethod_ListRegisteredServiceModels_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::onos::e2t::admin::ListRegisteredServiceModelsResponse>* E2TAdminService::Stub::PrepareAsyncListRegisteredServiceModelsRaw(::grpc::ClientContext* context, const ::onos::e2t::admin::ListRegisteredServiceModelsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::onos::e2t::admin::ListRegisteredServiceModelsResponse>::Create(channel_.get(), cq, rpcmethod_ListRegisteredServiceModels_, context, request, false, nullptr);
}

::grpc::ClientReader< ::onos::e2t::admin::ListE2NodeConnectionsResponse>* E2TAdminService::Stub::ListE2NodeConnectionsRaw(::grpc::ClientContext* context, const ::onos::e2t::admin::ListE2NodeConnectionsRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::onos::e2t::admin::ListE2NodeConnectionsResponse>::Create(channel_.get(), rpcmethod_ListE2NodeConnections_, context, request);
}

void E2TAdminService::Stub::async::ListE2NodeConnections(::grpc::ClientContext* context, const ::onos::e2t::admin::ListE2NodeConnectionsRequest* request, ::grpc::ClientReadReactor< ::onos::e2t::admin::ListE2NodeConnectionsResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::onos::e2t::admin::ListE2NodeConnectionsResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_ListE2NodeConnections_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::onos::e2t::admin::ListE2NodeConnectionsResponse>* E2TAdminService::Stub::AsyncListE2NodeConnectionsRaw(::grpc::ClientContext* context, const ::onos::e2t::admin::ListE2NodeConnectionsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::onos::e2t::admin::ListE2NodeConnectionsResponse>::Create(channel_.get(), cq, rpcmethod_ListE2NodeConnections_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::onos::e2t::admin::ListE2NodeConnectionsResponse>* E2TAdminService::Stub::PrepareAsyncListE2NodeConnectionsRaw(::grpc::ClientContext* context, const ::onos::e2t::admin::ListE2NodeConnectionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::onos::e2t::admin::ListE2NodeConnectionsResponse>::Create(channel_.get(), cq, rpcmethod_ListE2NodeConnections_, context, request, false, nullptr);
}

::grpc::Status E2TAdminService::Stub::DropE2NodeConnections(::grpc::ClientContext* context, const ::onos::e2t::admin::DropE2NodeConnectionsRequest& request, ::onos::e2t::admin::DropE2NodeConnectionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::e2t::admin::DropE2NodeConnectionsRequest, ::onos::e2t::admin::DropE2NodeConnectionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DropE2NodeConnections_, context, request, response);
}

void E2TAdminService::Stub::async::DropE2NodeConnections(::grpc::ClientContext* context, const ::onos::e2t::admin::DropE2NodeConnectionsRequest* request, ::onos::e2t::admin::DropE2NodeConnectionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::e2t::admin::DropE2NodeConnectionsRequest, ::onos::e2t::admin::DropE2NodeConnectionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DropE2NodeConnections_, context, request, response, std::move(f));
}

void E2TAdminService::Stub::async::DropE2NodeConnections(::grpc::ClientContext* context, const ::onos::e2t::admin::DropE2NodeConnectionsRequest* request, ::onos::e2t::admin::DropE2NodeConnectionsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DropE2NodeConnections_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::e2t::admin::DropE2NodeConnectionsResponse>* E2TAdminService::Stub::PrepareAsyncDropE2NodeConnectionsRaw(::grpc::ClientContext* context, const ::onos::e2t::admin::DropE2NodeConnectionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::e2t::admin::DropE2NodeConnectionsResponse, ::onos::e2t::admin::DropE2NodeConnectionsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DropE2NodeConnections_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::e2t::admin::DropE2NodeConnectionsResponse>* E2TAdminService::Stub::AsyncDropE2NodeConnectionsRaw(::grpc::ClientContext* context, const ::onos::e2t::admin::DropE2NodeConnectionsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDropE2NodeConnectionsRaw(context, request, cq);
  result->StartCall();
  return result;
}

E2TAdminService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      E2TAdminService_method_names[0],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< E2TAdminService::Service, ::onos::e2t::admin::UploadRegisterServiceModelRequest, ::onos::e2t::admin::UploadRegisterServiceModelResponse>(
          [](E2TAdminService::Service* service,
             ::grpc::ServerContext* ctx,
             ::grpc::ServerReader<::onos::e2t::admin::UploadRegisterServiceModelRequest>* reader,
             ::onos::e2t::admin::UploadRegisterServiceModelResponse* resp) {
               return service->UploadRegisterServiceModel(ctx, reader, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      E2TAdminService_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< E2TAdminService::Service, ::onos::e2t::admin::ListRegisteredServiceModelsRequest, ::onos::e2t::admin::ListRegisteredServiceModelsResponse>(
          [](E2TAdminService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::e2t::admin::ListRegisteredServiceModelsRequest* req,
             ::grpc::ServerWriter<::onos::e2t::admin::ListRegisteredServiceModelsResponse>* writer) {
               return service->ListRegisteredServiceModels(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      E2TAdminService_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< E2TAdminService::Service, ::onos::e2t::admin::ListE2NodeConnectionsRequest, ::onos::e2t::admin::ListE2NodeConnectionsResponse>(
          [](E2TAdminService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::e2t::admin::ListE2NodeConnectionsRequest* req,
             ::grpc::ServerWriter<::onos::e2t::admin::ListE2NodeConnectionsResponse>* writer) {
               return service->ListE2NodeConnections(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      E2TAdminService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< E2TAdminService::Service, ::onos::e2t::admin::DropE2NodeConnectionsRequest, ::onos::e2t::admin::DropE2NodeConnectionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](E2TAdminService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::e2t::admin::DropE2NodeConnectionsRequest* req,
             ::onos::e2t::admin::DropE2NodeConnectionsResponse* resp) {
               return service->DropE2NodeConnections(ctx, req, resp);
             }, this)));
}

E2TAdminService::Service::~Service() {
}

::grpc::Status E2TAdminService::Service::UploadRegisterServiceModel(::grpc::ServerContext* context, ::grpc::ServerReader< ::onos::e2t::admin::UploadRegisterServiceModelRequest>* reader, ::onos::e2t::admin::UploadRegisterServiceModelResponse* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status E2TAdminService::Service::ListRegisteredServiceModels(::grpc::ServerContext* context, const ::onos::e2t::admin::ListRegisteredServiceModelsRequest* request, ::grpc::ServerWriter< ::onos::e2t::admin::ListRegisteredServiceModelsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status E2TAdminService::Service::ListE2NodeConnections(::grpc::ServerContext* context, const ::onos::e2t::admin::ListE2NodeConnectionsRequest* request, ::grpc::ServerWriter< ::onos::e2t::admin::ListE2NodeConnectionsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status E2TAdminService::Service::DropE2NodeConnections(::grpc::ServerContext* context, const ::onos::e2t::admin::DropE2NodeConnectionsRequest* request, ::onos::e2t::admin::DropE2NodeConnectionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace onos
}  // namespace e2t
}  // namespace admin

