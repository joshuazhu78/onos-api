// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onos/e2t/admin/admin.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_onos_2fe2t_2fadmin_2fadmin_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_onos_2fe2t_2fadmin_2fadmin_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_onos_2fe2t_2fadmin_2fadmin_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_onos_2fe2t_2fadmin_2fadmin_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_onos_2fe2t_2fadmin_2fadmin_2eproto;
namespace onos {
namespace e2t {
namespace admin {
class DropE2NodeConnectionsRequest;
struct DropE2NodeConnectionsRequestDefaultTypeInternal;
extern DropE2NodeConnectionsRequestDefaultTypeInternal _DropE2NodeConnectionsRequest_default_instance_;
class DropE2NodeConnectionsResponse;
struct DropE2NodeConnectionsResponseDefaultTypeInternal;
extern DropE2NodeConnectionsResponseDefaultTypeInternal _DropE2NodeConnectionsResponse_default_instance_;
class ListE2NodeConnectionsRequest;
struct ListE2NodeConnectionsRequestDefaultTypeInternal;
extern ListE2NodeConnectionsRequestDefaultTypeInternal _ListE2NodeConnectionsRequest_default_instance_;
class ListE2NodeConnectionsResponse;
struct ListE2NodeConnectionsResponseDefaultTypeInternal;
extern ListE2NodeConnectionsResponseDefaultTypeInternal _ListE2NodeConnectionsResponse_default_instance_;
class ListRegisteredServiceModelsRequest;
struct ListRegisteredServiceModelsRequestDefaultTypeInternal;
extern ListRegisteredServiceModelsRequestDefaultTypeInternal _ListRegisteredServiceModelsRequest_default_instance_;
class ListRegisteredServiceModelsResponse;
struct ListRegisteredServiceModelsResponseDefaultTypeInternal;
extern ListRegisteredServiceModelsResponseDefaultTypeInternal _ListRegisteredServiceModelsResponse_default_instance_;
class RANFunction;
struct RANFunctionDefaultTypeInternal;
extern RANFunctionDefaultTypeInternal _RANFunction_default_instance_;
class UploadRegisterServiceModelRequest;
struct UploadRegisterServiceModelRequestDefaultTypeInternal;
extern UploadRegisterServiceModelRequestDefaultTypeInternal _UploadRegisterServiceModelRequest_default_instance_;
class UploadRegisterServiceModelResponse;
struct UploadRegisterServiceModelResponseDefaultTypeInternal;
extern UploadRegisterServiceModelResponseDefaultTypeInternal _UploadRegisterServiceModelResponse_default_instance_;
}  // namespace admin
}  // namespace e2t
}  // namespace onos
PROTOBUF_NAMESPACE_OPEN
template<> ::onos::e2t::admin::DropE2NodeConnectionsRequest* Arena::CreateMaybeMessage<::onos::e2t::admin::DropE2NodeConnectionsRequest>(Arena*);
template<> ::onos::e2t::admin::DropE2NodeConnectionsResponse* Arena::CreateMaybeMessage<::onos::e2t::admin::DropE2NodeConnectionsResponse>(Arena*);
template<> ::onos::e2t::admin::ListE2NodeConnectionsRequest* Arena::CreateMaybeMessage<::onos::e2t::admin::ListE2NodeConnectionsRequest>(Arena*);
template<> ::onos::e2t::admin::ListE2NodeConnectionsResponse* Arena::CreateMaybeMessage<::onos::e2t::admin::ListE2NodeConnectionsResponse>(Arena*);
template<> ::onos::e2t::admin::ListRegisteredServiceModelsRequest* Arena::CreateMaybeMessage<::onos::e2t::admin::ListRegisteredServiceModelsRequest>(Arena*);
template<> ::onos::e2t::admin::ListRegisteredServiceModelsResponse* Arena::CreateMaybeMessage<::onos::e2t::admin::ListRegisteredServiceModelsResponse>(Arena*);
template<> ::onos::e2t::admin::RANFunction* Arena::CreateMaybeMessage<::onos::e2t::admin::RANFunction>(Arena*);
template<> ::onos::e2t::admin::UploadRegisterServiceModelRequest* Arena::CreateMaybeMessage<::onos::e2t::admin::UploadRegisterServiceModelRequest>(Arena*);
template<> ::onos::e2t::admin::UploadRegisterServiceModelResponse* Arena::CreateMaybeMessage<::onos::e2t::admin::UploadRegisterServiceModelResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace onos {
namespace e2t {
namespace admin {

enum E2NodeConnectionType : int {
  UNKNOWN = 0,
  G_NB = 1,
  E_NB = 2,
  ENG_MB = 3,
  NGE_NB = 4,
  E2NodeConnectionType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  E2NodeConnectionType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool E2NodeConnectionType_IsValid(int value);
constexpr E2NodeConnectionType E2NodeConnectionType_MIN = UNKNOWN;
constexpr E2NodeConnectionType E2NodeConnectionType_MAX = NGE_NB;
constexpr int E2NodeConnectionType_ARRAYSIZE = E2NodeConnectionType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* E2NodeConnectionType_descriptor();
template<typename T>
inline const std::string& E2NodeConnectionType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, E2NodeConnectionType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function E2NodeConnectionType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    E2NodeConnectionType_descriptor(), enum_t_value);
}
inline bool E2NodeConnectionType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, E2NodeConnectionType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<E2NodeConnectionType>(
    E2NodeConnectionType_descriptor(), name, value);
}
// ===================================================================

class UploadRegisterServiceModelRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.e2t.admin.UploadRegisterServiceModelRequest) */ {
 public:
  inline UploadRegisterServiceModelRequest() : UploadRegisterServiceModelRequest(nullptr) {}
  ~UploadRegisterServiceModelRequest() override;
  explicit constexpr UploadRegisterServiceModelRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UploadRegisterServiceModelRequest(const UploadRegisterServiceModelRequest& from);
  UploadRegisterServiceModelRequest(UploadRegisterServiceModelRequest&& from) noexcept
    : UploadRegisterServiceModelRequest() {
    *this = ::std::move(from);
  }

  inline UploadRegisterServiceModelRequest& operator=(const UploadRegisterServiceModelRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadRegisterServiceModelRequest& operator=(UploadRegisterServiceModelRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UploadRegisterServiceModelRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UploadRegisterServiceModelRequest* internal_default_instance() {
    return reinterpret_cast<const UploadRegisterServiceModelRequest*>(
               &_UploadRegisterServiceModelRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(UploadRegisterServiceModelRequest& a, UploadRegisterServiceModelRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadRegisterServiceModelRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadRegisterServiceModelRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UploadRegisterServiceModelRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UploadRegisterServiceModelRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UploadRegisterServiceModelRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UploadRegisterServiceModelRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadRegisterServiceModelRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.e2t.admin.UploadRegisterServiceModelRequest";
  }
  protected:
  explicit UploadRegisterServiceModelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSoFileFieldNumber = 1,
    kContentFieldNumber = 2,
  };
  // string so_file = 1;
  void clear_so_file();
  const std::string& so_file() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_so_file(ArgT0&& arg0, ArgT... args);
  std::string* mutable_so_file();
  PROTOBUF_NODISCARD std::string* release_so_file();
  void set_allocated_so_file(std::string* so_file);
  private:
  const std::string& _internal_so_file() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_so_file(const std::string& value);
  std::string* _internal_mutable_so_file();
  public:

  // bytes content = 2;
  void clear_content();
  const std::string& content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_content();
  PROTOBUF_NODISCARD std::string* release_content();
  void set_allocated_content(std::string* content);
  private:
  const std::string& _internal_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_content(const std::string& value);
  std::string* _internal_mutable_content();
  public:

  // @@protoc_insertion_point(class_scope:onos.e2t.admin.UploadRegisterServiceModelRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr so_file_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr content_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fe2t_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class UploadRegisterServiceModelResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.e2t.admin.UploadRegisterServiceModelResponse) */ {
 public:
  inline UploadRegisterServiceModelResponse() : UploadRegisterServiceModelResponse(nullptr) {}
  ~UploadRegisterServiceModelResponse() override;
  explicit constexpr UploadRegisterServiceModelResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UploadRegisterServiceModelResponse(const UploadRegisterServiceModelResponse& from);
  UploadRegisterServiceModelResponse(UploadRegisterServiceModelResponse&& from) noexcept
    : UploadRegisterServiceModelResponse() {
    *this = ::std::move(from);
  }

  inline UploadRegisterServiceModelResponse& operator=(const UploadRegisterServiceModelResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UploadRegisterServiceModelResponse& operator=(UploadRegisterServiceModelResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UploadRegisterServiceModelResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UploadRegisterServiceModelResponse* internal_default_instance() {
    return reinterpret_cast<const UploadRegisterServiceModelResponse*>(
               &_UploadRegisterServiceModelResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(UploadRegisterServiceModelResponse& a, UploadRegisterServiceModelResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UploadRegisterServiceModelResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UploadRegisterServiceModelResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UploadRegisterServiceModelResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UploadRegisterServiceModelResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UploadRegisterServiceModelResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UploadRegisterServiceModelResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UploadRegisterServiceModelResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.e2t.admin.UploadRegisterServiceModelResponse";
  }
  protected:
  explicit UploadRegisterServiceModelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string version = 2;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:onos.e2t.admin.UploadRegisterServiceModelResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fe2t_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class ListRegisteredServiceModelsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.e2t.admin.ListRegisteredServiceModelsResponse) */ {
 public:
  inline ListRegisteredServiceModelsResponse() : ListRegisteredServiceModelsResponse(nullptr) {}
  ~ListRegisteredServiceModelsResponse() override;
  explicit constexpr ListRegisteredServiceModelsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListRegisteredServiceModelsResponse(const ListRegisteredServiceModelsResponse& from);
  ListRegisteredServiceModelsResponse(ListRegisteredServiceModelsResponse&& from) noexcept
    : ListRegisteredServiceModelsResponse() {
    *this = ::std::move(from);
  }

  inline ListRegisteredServiceModelsResponse& operator=(const ListRegisteredServiceModelsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListRegisteredServiceModelsResponse& operator=(ListRegisteredServiceModelsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListRegisteredServiceModelsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListRegisteredServiceModelsResponse* internal_default_instance() {
    return reinterpret_cast<const ListRegisteredServiceModelsResponse*>(
               &_ListRegisteredServiceModelsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ListRegisteredServiceModelsResponse& a, ListRegisteredServiceModelsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListRegisteredServiceModelsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListRegisteredServiceModelsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListRegisteredServiceModelsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListRegisteredServiceModelsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListRegisteredServiceModelsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListRegisteredServiceModelsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListRegisteredServiceModelsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.e2t.admin.ListRegisteredServiceModelsResponse";
  }
  protected:
  explicit ListRegisteredServiceModelsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string version = 2;
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:onos.e2t.admin.ListRegisteredServiceModelsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fe2t_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class ListRegisteredServiceModelsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.e2t.admin.ListRegisteredServiceModelsRequest) */ {
 public:
  inline ListRegisteredServiceModelsRequest() : ListRegisteredServiceModelsRequest(nullptr) {}
  ~ListRegisteredServiceModelsRequest() override;
  explicit constexpr ListRegisteredServiceModelsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListRegisteredServiceModelsRequest(const ListRegisteredServiceModelsRequest& from);
  ListRegisteredServiceModelsRequest(ListRegisteredServiceModelsRequest&& from) noexcept
    : ListRegisteredServiceModelsRequest() {
    *this = ::std::move(from);
  }

  inline ListRegisteredServiceModelsRequest& operator=(const ListRegisteredServiceModelsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListRegisteredServiceModelsRequest& operator=(ListRegisteredServiceModelsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListRegisteredServiceModelsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListRegisteredServiceModelsRequest* internal_default_instance() {
    return reinterpret_cast<const ListRegisteredServiceModelsRequest*>(
               &_ListRegisteredServiceModelsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ListRegisteredServiceModelsRequest& a, ListRegisteredServiceModelsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListRegisteredServiceModelsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListRegisteredServiceModelsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListRegisteredServiceModelsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListRegisteredServiceModelsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListRegisteredServiceModelsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListRegisteredServiceModelsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListRegisteredServiceModelsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.e2t.admin.ListRegisteredServiceModelsRequest";
  }
  protected:
  explicit ListRegisteredServiceModelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelNameFieldNumber = 1,
    kModelVersionFieldNumber = 2,
  };
  // string model_name = 1;
  void clear_model_name();
  const std::string& model_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_name();
  PROTOBUF_NODISCARD std::string* release_model_name();
  void set_allocated_model_name(std::string* model_name);
  private:
  const std::string& _internal_model_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_name(const std::string& value);
  std::string* _internal_mutable_model_name();
  public:

  // string model_version = 2;
  void clear_model_version();
  const std::string& model_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_model_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_model_version();
  PROTOBUF_NODISCARD std::string* release_model_version();
  void set_allocated_model_version(std::string* model_version);
  private:
  const std::string& _internal_model_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_model_version(const std::string& value);
  std::string* _internal_mutable_model_version();
  public:

  // @@protoc_insertion_point(class_scope:onos.e2t.admin.ListRegisteredServiceModelsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr model_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fe2t_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class ListE2NodeConnectionsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:onos.e2t.admin.ListE2NodeConnectionsRequest) */ {
 public:
  inline ListE2NodeConnectionsRequest() : ListE2NodeConnectionsRequest(nullptr) {}
  explicit constexpr ListE2NodeConnectionsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListE2NodeConnectionsRequest(const ListE2NodeConnectionsRequest& from);
  ListE2NodeConnectionsRequest(ListE2NodeConnectionsRequest&& from) noexcept
    : ListE2NodeConnectionsRequest() {
    *this = ::std::move(from);
  }

  inline ListE2NodeConnectionsRequest& operator=(const ListE2NodeConnectionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListE2NodeConnectionsRequest& operator=(ListE2NodeConnectionsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListE2NodeConnectionsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListE2NodeConnectionsRequest* internal_default_instance() {
    return reinterpret_cast<const ListE2NodeConnectionsRequest*>(
               &_ListE2NodeConnectionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ListE2NodeConnectionsRequest& a, ListE2NodeConnectionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListE2NodeConnectionsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListE2NodeConnectionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListE2NodeConnectionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListE2NodeConnectionsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const ListE2NodeConnectionsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const ListE2NodeConnectionsRequest& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.e2t.admin.ListE2NodeConnectionsRequest";
  }
  protected:
  explicit ListE2NodeConnectionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onos.e2t.admin.ListE2NodeConnectionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fe2t_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class RANFunction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.e2t.admin.RANFunction) */ {
 public:
  inline RANFunction() : RANFunction(nullptr) {}
  ~RANFunction() override;
  explicit constexpr RANFunction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RANFunction(const RANFunction& from);
  RANFunction(RANFunction&& from) noexcept
    : RANFunction() {
    *this = ::std::move(from);
  }

  inline RANFunction& operator=(const RANFunction& from) {
    CopyFrom(from);
    return *this;
  }
  inline RANFunction& operator=(RANFunction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RANFunction& default_instance() {
    return *internal_default_instance();
  }
  static inline const RANFunction* internal_default_instance() {
    return reinterpret_cast<const RANFunction*>(
               &_RANFunction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RANFunction& a, RANFunction& b) {
    a.Swap(&b);
  }
  inline void Swap(RANFunction* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RANFunction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RANFunction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RANFunction>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RANFunction& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RANFunction& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RANFunction* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.e2t.admin.RANFunction";
  }
  protected:
  explicit RANFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOidFieldNumber = 1,
    kRanFunctionIdFieldNumber = 2,
    kDescriptionFieldNumber = 3,
  };
  // string oid = 1;
  void clear_oid();
  const std::string& oid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_oid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_oid();
  PROTOBUF_NODISCARD std::string* release_oid();
  void set_allocated_oid(std::string* oid);
  private:
  const std::string& _internal_oid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_oid(const std::string& value);
  std::string* _internal_mutable_oid();
  public:

  // string ran_function_id = 2;
  void clear_ran_function_id();
  const std::string& ran_function_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ran_function_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ran_function_id();
  PROTOBUF_NODISCARD std::string* release_ran_function_id();
  void set_allocated_ran_function_id(std::string* ran_function_id);
  private:
  const std::string& _internal_ran_function_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ran_function_id(const std::string& value);
  std::string* _internal_mutable_ran_function_id();
  public:

  // bytes description = 3;
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_NODISCARD std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // @@protoc_insertion_point(class_scope:onos.e2t.admin.RANFunction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr oid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ran_function_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fe2t_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class ListE2NodeConnectionsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.e2t.admin.ListE2NodeConnectionsResponse) */ {
 public:
  inline ListE2NodeConnectionsResponse() : ListE2NodeConnectionsResponse(nullptr) {}
  ~ListE2NodeConnectionsResponse() override;
  explicit constexpr ListE2NodeConnectionsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListE2NodeConnectionsResponse(const ListE2NodeConnectionsResponse& from);
  ListE2NodeConnectionsResponse(ListE2NodeConnectionsResponse&& from) noexcept
    : ListE2NodeConnectionsResponse() {
    *this = ::std::move(from);
  }

  inline ListE2NodeConnectionsResponse& operator=(const ListE2NodeConnectionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListE2NodeConnectionsResponse& operator=(ListE2NodeConnectionsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListE2NodeConnectionsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListE2NodeConnectionsResponse* internal_default_instance() {
    return reinterpret_cast<const ListE2NodeConnectionsResponse*>(
               &_ListE2NodeConnectionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ListE2NodeConnectionsResponse& a, ListE2NodeConnectionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListE2NodeConnectionsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListE2NodeConnectionsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListE2NodeConnectionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListE2NodeConnectionsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListE2NodeConnectionsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListE2NodeConnectionsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListE2NodeConnectionsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.e2t.admin.ListE2NodeConnectionsResponse";
  }
  protected:
  explicit ListE2NodeConnectionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemoteIpFieldNumber = 1,
    kRanFunctionsFieldNumber = 6,
    kIdFieldNumber = 3,
    kPlmnIdFieldNumber = 4,
    kNodeIdFieldNumber = 7,
    kRemotePortFieldNumber = 2,
    kConnectionTypeFieldNumber = 5,
    kAgeMsFieldNumber = 8,
  };
  // repeated string remote_ip = 1;
  int remote_ip_size() const;
  private:
  int _internal_remote_ip_size() const;
  public:
  void clear_remote_ip();
  const std::string& remote_ip(int index) const;
  std::string* mutable_remote_ip(int index);
  void set_remote_ip(int index, const std::string& value);
  void set_remote_ip(int index, std::string&& value);
  void set_remote_ip(int index, const char* value);
  void set_remote_ip(int index, const char* value, size_t size);
  std::string* add_remote_ip();
  void add_remote_ip(const std::string& value);
  void add_remote_ip(std::string&& value);
  void add_remote_ip(const char* value);
  void add_remote_ip(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& remote_ip() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_remote_ip();
  private:
  const std::string& _internal_remote_ip(int index) const;
  std::string* _internal_add_remote_ip();
  public:

  // repeated .onos.e2t.admin.RANFunction ran_functions = 6;
  int ran_functions_size() const;
  private:
  int _internal_ran_functions_size() const;
  public:
  void clear_ran_functions();
  ::onos::e2t::admin::RANFunction* mutable_ran_functions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::e2t::admin::RANFunction >*
      mutable_ran_functions();
  private:
  const ::onos::e2t::admin::RANFunction& _internal_ran_functions(int index) const;
  ::onos::e2t::admin::RANFunction* _internal_add_ran_functions();
  public:
  const ::onos::e2t::admin::RANFunction& ran_functions(int index) const;
  ::onos::e2t::admin::RANFunction* add_ran_functions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::e2t::admin::RANFunction >&
      ran_functions() const;

  // string id = 3;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string plmn_id = 4;
  void clear_plmn_id();
  const std::string& plmn_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_plmn_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_plmn_id();
  PROTOBUF_NODISCARD std::string* release_plmn_id();
  void set_allocated_plmn_id(std::string* plmn_id);
  private:
  const std::string& _internal_plmn_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_plmn_id(const std::string& value);
  std::string* _internal_mutable_plmn_id();
  public:

  // string node_id = 7;
  void clear_node_id();
  const std::string& node_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_node_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_node_id();
  PROTOBUF_NODISCARD std::string* release_node_id();
  void set_allocated_node_id(std::string* node_id);
  private:
  const std::string& _internal_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_node_id(const std::string& value);
  std::string* _internal_mutable_node_id();
  public:

  // uint32 remote_port = 2;
  void clear_remote_port();
  uint32_t remote_port() const;
  void set_remote_port(uint32_t value);
  private:
  uint32_t _internal_remote_port() const;
  void _internal_set_remote_port(uint32_t value);
  public:

  // .onos.e2t.admin.E2NodeConnectionType connection_type = 5;
  void clear_connection_type();
  ::onos::e2t::admin::E2NodeConnectionType connection_type() const;
  void set_connection_type(::onos::e2t::admin::E2NodeConnectionType value);
  private:
  ::onos::e2t::admin::E2NodeConnectionType _internal_connection_type() const;
  void _internal_set_connection_type(::onos::e2t::admin::E2NodeConnectionType value);
  public:

  // int32 age_ms = 8;
  void clear_age_ms();
  int32_t age_ms() const;
  void set_age_ms(int32_t value);
  private:
  int32_t _internal_age_ms() const;
  void _internal_set_age_ms(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:onos.e2t.admin.ListE2NodeConnectionsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> remote_ip_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::e2t::admin::RANFunction > ran_functions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr plmn_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_id_;
  uint32_t remote_port_;
  int connection_type_;
  int32_t age_ms_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fe2t_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class DropE2NodeConnectionsRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.e2t.admin.DropE2NodeConnectionsRequest) */ {
 public:
  inline DropE2NodeConnectionsRequest() : DropE2NodeConnectionsRequest(nullptr) {}
  ~DropE2NodeConnectionsRequest() override;
  explicit constexpr DropE2NodeConnectionsRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DropE2NodeConnectionsRequest(const DropE2NodeConnectionsRequest& from);
  DropE2NodeConnectionsRequest(DropE2NodeConnectionsRequest&& from) noexcept
    : DropE2NodeConnectionsRequest() {
    *this = ::std::move(from);
  }

  inline DropE2NodeConnectionsRequest& operator=(const DropE2NodeConnectionsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DropE2NodeConnectionsRequest& operator=(DropE2NodeConnectionsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DropE2NodeConnectionsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DropE2NodeConnectionsRequest* internal_default_instance() {
    return reinterpret_cast<const DropE2NodeConnectionsRequest*>(
               &_DropE2NodeConnectionsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DropE2NodeConnectionsRequest& a, DropE2NodeConnectionsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DropE2NodeConnectionsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DropE2NodeConnectionsRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DropE2NodeConnectionsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DropE2NodeConnectionsRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DropE2NodeConnectionsRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DropE2NodeConnectionsRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropE2NodeConnectionsRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.e2t.admin.DropE2NodeConnectionsRequest";
  }
  protected:
  explicit DropE2NodeConnectionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConnectionsFieldNumber = 1,
  };
  // repeated .onos.e2t.admin.ListE2NodeConnectionsResponse connections = 1;
  int connections_size() const;
  private:
  int _internal_connections_size() const;
  public:
  void clear_connections();
  ::onos::e2t::admin::ListE2NodeConnectionsResponse* mutable_connections(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::e2t::admin::ListE2NodeConnectionsResponse >*
      mutable_connections();
  private:
  const ::onos::e2t::admin::ListE2NodeConnectionsResponse& _internal_connections(int index) const;
  ::onos::e2t::admin::ListE2NodeConnectionsResponse* _internal_add_connections();
  public:
  const ::onos::e2t::admin::ListE2NodeConnectionsResponse& connections(int index) const;
  ::onos::e2t::admin::ListE2NodeConnectionsResponse* add_connections();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::e2t::admin::ListE2NodeConnectionsResponse >&
      connections() const;

  // @@protoc_insertion_point(class_scope:onos.e2t.admin.DropE2NodeConnectionsRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::e2t::admin::ListE2NodeConnectionsResponse > connections_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fe2t_2fadmin_2fadmin_2eproto;
};
// -------------------------------------------------------------------

class DropE2NodeConnectionsResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.e2t.admin.DropE2NodeConnectionsResponse) */ {
 public:
  inline DropE2NodeConnectionsResponse() : DropE2NodeConnectionsResponse(nullptr) {}
  ~DropE2NodeConnectionsResponse() override;
  explicit constexpr DropE2NodeConnectionsResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DropE2NodeConnectionsResponse(const DropE2NodeConnectionsResponse& from);
  DropE2NodeConnectionsResponse(DropE2NodeConnectionsResponse&& from) noexcept
    : DropE2NodeConnectionsResponse() {
    *this = ::std::move(from);
  }

  inline DropE2NodeConnectionsResponse& operator=(const DropE2NodeConnectionsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DropE2NodeConnectionsResponse& operator=(DropE2NodeConnectionsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DropE2NodeConnectionsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DropE2NodeConnectionsResponse* internal_default_instance() {
    return reinterpret_cast<const DropE2NodeConnectionsResponse*>(
               &_DropE2NodeConnectionsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DropE2NodeConnectionsResponse& a, DropE2NodeConnectionsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DropE2NodeConnectionsResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DropE2NodeConnectionsResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  DropE2NodeConnectionsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<DropE2NodeConnectionsResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DropE2NodeConnectionsResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DropE2NodeConnectionsResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropE2NodeConnectionsResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.e2t.admin.DropE2NodeConnectionsResponse";
  }
  protected:
  explicit DropE2NodeConnectionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
  };
  // repeated bool success = 1;
  int success_size() const;
  private:
  int _internal_success_size() const;
  public:
  void clear_success();
  private:
  bool _internal_success(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      _internal_success() const;
  void _internal_add_success(bool value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      _internal_mutable_success();
  public:
  bool success(int index) const;
  void set_success(int index, bool value);
  void add_success(bool value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
      success() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
      mutable_success();

  // @@protoc_insertion_point(class_scope:onos.e2t.admin.DropE2NodeConnectionsResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool > success_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fe2t_2fadmin_2fadmin_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// UploadRegisterServiceModelRequest

// string so_file = 1;
inline void UploadRegisterServiceModelRequest::clear_so_file() {
  so_file_.ClearToEmpty();
}
inline const std::string& UploadRegisterServiceModelRequest::so_file() const {
  // @@protoc_insertion_point(field_get:onos.e2t.admin.UploadRegisterServiceModelRequest.so_file)
  return _internal_so_file();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UploadRegisterServiceModelRequest::set_so_file(ArgT0&& arg0, ArgT... args) {
 
 so_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.e2t.admin.UploadRegisterServiceModelRequest.so_file)
}
inline std::string* UploadRegisterServiceModelRequest::mutable_so_file() {
  std::string* _s = _internal_mutable_so_file();
  // @@protoc_insertion_point(field_mutable:onos.e2t.admin.UploadRegisterServiceModelRequest.so_file)
  return _s;
}
inline const std::string& UploadRegisterServiceModelRequest::_internal_so_file() const {
  return so_file_.Get();
}
inline void UploadRegisterServiceModelRequest::_internal_set_so_file(const std::string& value) {
  
  so_file_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UploadRegisterServiceModelRequest::_internal_mutable_so_file() {
  
  return so_file_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UploadRegisterServiceModelRequest::release_so_file() {
  // @@protoc_insertion_point(field_release:onos.e2t.admin.UploadRegisterServiceModelRequest.so_file)
  return so_file_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UploadRegisterServiceModelRequest::set_allocated_so_file(std::string* so_file) {
  if (so_file != nullptr) {
    
  } else {
    
  }
  so_file_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), so_file,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (so_file_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    so_file_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.e2t.admin.UploadRegisterServiceModelRequest.so_file)
}

// bytes content = 2;
inline void UploadRegisterServiceModelRequest::clear_content() {
  content_.ClearToEmpty();
}
inline const std::string& UploadRegisterServiceModelRequest::content() const {
  // @@protoc_insertion_point(field_get:onos.e2t.admin.UploadRegisterServiceModelRequest.content)
  return _internal_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UploadRegisterServiceModelRequest::set_content(ArgT0&& arg0, ArgT... args) {
 
 content_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.e2t.admin.UploadRegisterServiceModelRequest.content)
}
inline std::string* UploadRegisterServiceModelRequest::mutable_content() {
  std::string* _s = _internal_mutable_content();
  // @@protoc_insertion_point(field_mutable:onos.e2t.admin.UploadRegisterServiceModelRequest.content)
  return _s;
}
inline const std::string& UploadRegisterServiceModelRequest::_internal_content() const {
  return content_.Get();
}
inline void UploadRegisterServiceModelRequest::_internal_set_content(const std::string& value) {
  
  content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UploadRegisterServiceModelRequest::_internal_mutable_content() {
  
  return content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UploadRegisterServiceModelRequest::release_content() {
  // @@protoc_insertion_point(field_release:onos.e2t.admin.UploadRegisterServiceModelRequest.content)
  return content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UploadRegisterServiceModelRequest::set_allocated_content(std::string* content) {
  if (content != nullptr) {
    
  } else {
    
  }
  content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), content,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (content_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    content_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.e2t.admin.UploadRegisterServiceModelRequest.content)
}

// -------------------------------------------------------------------

// UploadRegisterServiceModelResponse

// string name = 1;
inline void UploadRegisterServiceModelResponse::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& UploadRegisterServiceModelResponse::name() const {
  // @@protoc_insertion_point(field_get:onos.e2t.admin.UploadRegisterServiceModelResponse.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UploadRegisterServiceModelResponse::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.e2t.admin.UploadRegisterServiceModelResponse.name)
}
inline std::string* UploadRegisterServiceModelResponse::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:onos.e2t.admin.UploadRegisterServiceModelResponse.name)
  return _s;
}
inline const std::string& UploadRegisterServiceModelResponse::_internal_name() const {
  return name_.Get();
}
inline void UploadRegisterServiceModelResponse::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UploadRegisterServiceModelResponse::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UploadRegisterServiceModelResponse::release_name() {
  // @@protoc_insertion_point(field_release:onos.e2t.admin.UploadRegisterServiceModelResponse.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UploadRegisterServiceModelResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.e2t.admin.UploadRegisterServiceModelResponse.name)
}

// string version = 2;
inline void UploadRegisterServiceModelResponse::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& UploadRegisterServiceModelResponse::version() const {
  // @@protoc_insertion_point(field_get:onos.e2t.admin.UploadRegisterServiceModelResponse.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UploadRegisterServiceModelResponse::set_version(ArgT0&& arg0, ArgT... args) {
 
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.e2t.admin.UploadRegisterServiceModelResponse.version)
}
inline std::string* UploadRegisterServiceModelResponse::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:onos.e2t.admin.UploadRegisterServiceModelResponse.version)
  return _s;
}
inline const std::string& UploadRegisterServiceModelResponse::_internal_version() const {
  return version_.Get();
}
inline void UploadRegisterServiceModelResponse::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UploadRegisterServiceModelResponse::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UploadRegisterServiceModelResponse::release_version() {
  // @@protoc_insertion_point(field_release:onos.e2t.admin.UploadRegisterServiceModelResponse.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UploadRegisterServiceModelResponse::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.e2t.admin.UploadRegisterServiceModelResponse.version)
}

// -------------------------------------------------------------------

// ListRegisteredServiceModelsResponse

// string name = 1;
inline void ListRegisteredServiceModelsResponse::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ListRegisteredServiceModelsResponse::name() const {
  // @@protoc_insertion_point(field_get:onos.e2t.admin.ListRegisteredServiceModelsResponse.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListRegisteredServiceModelsResponse::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.e2t.admin.ListRegisteredServiceModelsResponse.name)
}
inline std::string* ListRegisteredServiceModelsResponse::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:onos.e2t.admin.ListRegisteredServiceModelsResponse.name)
  return _s;
}
inline const std::string& ListRegisteredServiceModelsResponse::_internal_name() const {
  return name_.Get();
}
inline void ListRegisteredServiceModelsResponse::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListRegisteredServiceModelsResponse::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListRegisteredServiceModelsResponse::release_name() {
  // @@protoc_insertion_point(field_release:onos.e2t.admin.ListRegisteredServiceModelsResponse.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListRegisteredServiceModelsResponse::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.e2t.admin.ListRegisteredServiceModelsResponse.name)
}

// string version = 2;
inline void ListRegisteredServiceModelsResponse::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& ListRegisteredServiceModelsResponse::version() const {
  // @@protoc_insertion_point(field_get:onos.e2t.admin.ListRegisteredServiceModelsResponse.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListRegisteredServiceModelsResponse::set_version(ArgT0&& arg0, ArgT... args) {
 
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.e2t.admin.ListRegisteredServiceModelsResponse.version)
}
inline std::string* ListRegisteredServiceModelsResponse::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:onos.e2t.admin.ListRegisteredServiceModelsResponse.version)
  return _s;
}
inline const std::string& ListRegisteredServiceModelsResponse::_internal_version() const {
  return version_.Get();
}
inline void ListRegisteredServiceModelsResponse::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListRegisteredServiceModelsResponse::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListRegisteredServiceModelsResponse::release_version() {
  // @@protoc_insertion_point(field_release:onos.e2t.admin.ListRegisteredServiceModelsResponse.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListRegisteredServiceModelsResponse::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.e2t.admin.ListRegisteredServiceModelsResponse.version)
}

// -------------------------------------------------------------------

// ListRegisteredServiceModelsRequest

// string model_name = 1;
inline void ListRegisteredServiceModelsRequest::clear_model_name() {
  model_name_.ClearToEmpty();
}
inline const std::string& ListRegisteredServiceModelsRequest::model_name() const {
  // @@protoc_insertion_point(field_get:onos.e2t.admin.ListRegisteredServiceModelsRequest.model_name)
  return _internal_model_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListRegisteredServiceModelsRequest::set_model_name(ArgT0&& arg0, ArgT... args) {
 
 model_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.e2t.admin.ListRegisteredServiceModelsRequest.model_name)
}
inline std::string* ListRegisteredServiceModelsRequest::mutable_model_name() {
  std::string* _s = _internal_mutable_model_name();
  // @@protoc_insertion_point(field_mutable:onos.e2t.admin.ListRegisteredServiceModelsRequest.model_name)
  return _s;
}
inline const std::string& ListRegisteredServiceModelsRequest::_internal_model_name() const {
  return model_name_.Get();
}
inline void ListRegisteredServiceModelsRequest::_internal_set_model_name(const std::string& value) {
  
  model_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListRegisteredServiceModelsRequest::_internal_mutable_model_name() {
  
  return model_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListRegisteredServiceModelsRequest::release_model_name() {
  // @@protoc_insertion_point(field_release:onos.e2t.admin.ListRegisteredServiceModelsRequest.model_name)
  return model_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListRegisteredServiceModelsRequest::set_allocated_model_name(std::string* model_name) {
  if (model_name != nullptr) {
    
  } else {
    
  }
  model_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.e2t.admin.ListRegisteredServiceModelsRequest.model_name)
}

// string model_version = 2;
inline void ListRegisteredServiceModelsRequest::clear_model_version() {
  model_version_.ClearToEmpty();
}
inline const std::string& ListRegisteredServiceModelsRequest::model_version() const {
  // @@protoc_insertion_point(field_get:onos.e2t.admin.ListRegisteredServiceModelsRequest.model_version)
  return _internal_model_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListRegisteredServiceModelsRequest::set_model_version(ArgT0&& arg0, ArgT... args) {
 
 model_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.e2t.admin.ListRegisteredServiceModelsRequest.model_version)
}
inline std::string* ListRegisteredServiceModelsRequest::mutable_model_version() {
  std::string* _s = _internal_mutable_model_version();
  // @@protoc_insertion_point(field_mutable:onos.e2t.admin.ListRegisteredServiceModelsRequest.model_version)
  return _s;
}
inline const std::string& ListRegisteredServiceModelsRequest::_internal_model_version() const {
  return model_version_.Get();
}
inline void ListRegisteredServiceModelsRequest::_internal_set_model_version(const std::string& value) {
  
  model_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListRegisteredServiceModelsRequest::_internal_mutable_model_version() {
  
  return model_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListRegisteredServiceModelsRequest::release_model_version() {
  // @@protoc_insertion_point(field_release:onos.e2t.admin.ListRegisteredServiceModelsRequest.model_version)
  return model_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListRegisteredServiceModelsRequest::set_allocated_model_version(std::string* model_version) {
  if (model_version != nullptr) {
    
  } else {
    
  }
  model_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), model_version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (model_version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    model_version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.e2t.admin.ListRegisteredServiceModelsRequest.model_version)
}

// -------------------------------------------------------------------

// ListE2NodeConnectionsRequest

// -------------------------------------------------------------------

// RANFunction

// string oid = 1;
inline void RANFunction::clear_oid() {
  oid_.ClearToEmpty();
}
inline const std::string& RANFunction::oid() const {
  // @@protoc_insertion_point(field_get:onos.e2t.admin.RANFunction.oid)
  return _internal_oid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RANFunction::set_oid(ArgT0&& arg0, ArgT... args) {
 
 oid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.e2t.admin.RANFunction.oid)
}
inline std::string* RANFunction::mutable_oid() {
  std::string* _s = _internal_mutable_oid();
  // @@protoc_insertion_point(field_mutable:onos.e2t.admin.RANFunction.oid)
  return _s;
}
inline const std::string& RANFunction::_internal_oid() const {
  return oid_.Get();
}
inline void RANFunction::_internal_set_oid(const std::string& value) {
  
  oid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RANFunction::_internal_mutable_oid() {
  
  return oid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RANFunction::release_oid() {
  // @@protoc_insertion_point(field_release:onos.e2t.admin.RANFunction.oid)
  return oid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RANFunction::set_allocated_oid(std::string* oid) {
  if (oid != nullptr) {
    
  } else {
    
  }
  oid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), oid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (oid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    oid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.e2t.admin.RANFunction.oid)
}

// string ran_function_id = 2;
inline void RANFunction::clear_ran_function_id() {
  ran_function_id_.ClearToEmpty();
}
inline const std::string& RANFunction::ran_function_id() const {
  // @@protoc_insertion_point(field_get:onos.e2t.admin.RANFunction.ran_function_id)
  return _internal_ran_function_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RANFunction::set_ran_function_id(ArgT0&& arg0, ArgT... args) {
 
 ran_function_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.e2t.admin.RANFunction.ran_function_id)
}
inline std::string* RANFunction::mutable_ran_function_id() {
  std::string* _s = _internal_mutable_ran_function_id();
  // @@protoc_insertion_point(field_mutable:onos.e2t.admin.RANFunction.ran_function_id)
  return _s;
}
inline const std::string& RANFunction::_internal_ran_function_id() const {
  return ran_function_id_.Get();
}
inline void RANFunction::_internal_set_ran_function_id(const std::string& value) {
  
  ran_function_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RANFunction::_internal_mutable_ran_function_id() {
  
  return ran_function_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RANFunction::release_ran_function_id() {
  // @@protoc_insertion_point(field_release:onos.e2t.admin.RANFunction.ran_function_id)
  return ran_function_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RANFunction::set_allocated_ran_function_id(std::string* ran_function_id) {
  if (ran_function_id != nullptr) {
    
  } else {
    
  }
  ran_function_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ran_function_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (ran_function_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    ran_function_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.e2t.admin.RANFunction.ran_function_id)
}

// bytes description = 3;
inline void RANFunction::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& RANFunction::description() const {
  // @@protoc_insertion_point(field_get:onos.e2t.admin.RANFunction.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RANFunction::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.e2t.admin.RANFunction.description)
}
inline std::string* RANFunction::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:onos.e2t.admin.RANFunction.description)
  return _s;
}
inline const std::string& RANFunction::_internal_description() const {
  return description_.Get();
}
inline void RANFunction::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RANFunction::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RANFunction::release_description() {
  // @@protoc_insertion_point(field_release:onos.e2t.admin.RANFunction.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RANFunction::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (description_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    description_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.e2t.admin.RANFunction.description)
}

// -------------------------------------------------------------------

// ListE2NodeConnectionsResponse

// string id = 3;
inline void ListE2NodeConnectionsResponse::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& ListE2NodeConnectionsResponse::id() const {
  // @@protoc_insertion_point(field_get:onos.e2t.admin.ListE2NodeConnectionsResponse.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListE2NodeConnectionsResponse::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.e2t.admin.ListE2NodeConnectionsResponse.id)
}
inline std::string* ListE2NodeConnectionsResponse::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:onos.e2t.admin.ListE2NodeConnectionsResponse.id)
  return _s;
}
inline const std::string& ListE2NodeConnectionsResponse::_internal_id() const {
  return id_.Get();
}
inline void ListE2NodeConnectionsResponse::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListE2NodeConnectionsResponse::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListE2NodeConnectionsResponse::release_id() {
  // @@protoc_insertion_point(field_release:onos.e2t.admin.ListE2NodeConnectionsResponse.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListE2NodeConnectionsResponse::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.e2t.admin.ListE2NodeConnectionsResponse.id)
}

// repeated string remote_ip = 1;
inline int ListE2NodeConnectionsResponse::_internal_remote_ip_size() const {
  return remote_ip_.size();
}
inline int ListE2NodeConnectionsResponse::remote_ip_size() const {
  return _internal_remote_ip_size();
}
inline void ListE2NodeConnectionsResponse::clear_remote_ip() {
  remote_ip_.Clear();
}
inline std::string* ListE2NodeConnectionsResponse::add_remote_ip() {
  std::string* _s = _internal_add_remote_ip();
  // @@protoc_insertion_point(field_add_mutable:onos.e2t.admin.ListE2NodeConnectionsResponse.remote_ip)
  return _s;
}
inline const std::string& ListE2NodeConnectionsResponse::_internal_remote_ip(int index) const {
  return remote_ip_.Get(index);
}
inline const std::string& ListE2NodeConnectionsResponse::remote_ip(int index) const {
  // @@protoc_insertion_point(field_get:onos.e2t.admin.ListE2NodeConnectionsResponse.remote_ip)
  return _internal_remote_ip(index);
}
inline std::string* ListE2NodeConnectionsResponse::mutable_remote_ip(int index) {
  // @@protoc_insertion_point(field_mutable:onos.e2t.admin.ListE2NodeConnectionsResponse.remote_ip)
  return remote_ip_.Mutable(index);
}
inline void ListE2NodeConnectionsResponse::set_remote_ip(int index, const std::string& value) {
  remote_ip_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:onos.e2t.admin.ListE2NodeConnectionsResponse.remote_ip)
}
inline void ListE2NodeConnectionsResponse::set_remote_ip(int index, std::string&& value) {
  remote_ip_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:onos.e2t.admin.ListE2NodeConnectionsResponse.remote_ip)
}
inline void ListE2NodeConnectionsResponse::set_remote_ip(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  remote_ip_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:onos.e2t.admin.ListE2NodeConnectionsResponse.remote_ip)
}
inline void ListE2NodeConnectionsResponse::set_remote_ip(int index, const char* value, size_t size) {
  remote_ip_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:onos.e2t.admin.ListE2NodeConnectionsResponse.remote_ip)
}
inline std::string* ListE2NodeConnectionsResponse::_internal_add_remote_ip() {
  return remote_ip_.Add();
}
inline void ListE2NodeConnectionsResponse::add_remote_ip(const std::string& value) {
  remote_ip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:onos.e2t.admin.ListE2NodeConnectionsResponse.remote_ip)
}
inline void ListE2NodeConnectionsResponse::add_remote_ip(std::string&& value) {
  remote_ip_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:onos.e2t.admin.ListE2NodeConnectionsResponse.remote_ip)
}
inline void ListE2NodeConnectionsResponse::add_remote_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  remote_ip_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:onos.e2t.admin.ListE2NodeConnectionsResponse.remote_ip)
}
inline void ListE2NodeConnectionsResponse::add_remote_ip(const char* value, size_t size) {
  remote_ip_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:onos.e2t.admin.ListE2NodeConnectionsResponse.remote_ip)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ListE2NodeConnectionsResponse::remote_ip() const {
  // @@protoc_insertion_point(field_list:onos.e2t.admin.ListE2NodeConnectionsResponse.remote_ip)
  return remote_ip_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ListE2NodeConnectionsResponse::mutable_remote_ip() {
  // @@protoc_insertion_point(field_mutable_list:onos.e2t.admin.ListE2NodeConnectionsResponse.remote_ip)
  return &remote_ip_;
}

// uint32 remote_port = 2;
inline void ListE2NodeConnectionsResponse::clear_remote_port() {
  remote_port_ = 0u;
}
inline uint32_t ListE2NodeConnectionsResponse::_internal_remote_port() const {
  return remote_port_;
}
inline uint32_t ListE2NodeConnectionsResponse::remote_port() const {
  // @@protoc_insertion_point(field_get:onos.e2t.admin.ListE2NodeConnectionsResponse.remote_port)
  return _internal_remote_port();
}
inline void ListE2NodeConnectionsResponse::_internal_set_remote_port(uint32_t value) {
  
  remote_port_ = value;
}
inline void ListE2NodeConnectionsResponse::set_remote_port(uint32_t value) {
  _internal_set_remote_port(value);
  // @@protoc_insertion_point(field_set:onos.e2t.admin.ListE2NodeConnectionsResponse.remote_port)
}

// string node_id = 7;
inline void ListE2NodeConnectionsResponse::clear_node_id() {
  node_id_.ClearToEmpty();
}
inline const std::string& ListE2NodeConnectionsResponse::node_id() const {
  // @@protoc_insertion_point(field_get:onos.e2t.admin.ListE2NodeConnectionsResponse.node_id)
  return _internal_node_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListE2NodeConnectionsResponse::set_node_id(ArgT0&& arg0, ArgT... args) {
 
 node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.e2t.admin.ListE2NodeConnectionsResponse.node_id)
}
inline std::string* ListE2NodeConnectionsResponse::mutable_node_id() {
  std::string* _s = _internal_mutable_node_id();
  // @@protoc_insertion_point(field_mutable:onos.e2t.admin.ListE2NodeConnectionsResponse.node_id)
  return _s;
}
inline const std::string& ListE2NodeConnectionsResponse::_internal_node_id() const {
  return node_id_.Get();
}
inline void ListE2NodeConnectionsResponse::_internal_set_node_id(const std::string& value) {
  
  node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListE2NodeConnectionsResponse::_internal_mutable_node_id() {
  
  return node_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListE2NodeConnectionsResponse::release_node_id() {
  // @@protoc_insertion_point(field_release:onos.e2t.admin.ListE2NodeConnectionsResponse.node_id)
  return node_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListE2NodeConnectionsResponse::set_allocated_node_id(std::string* node_id) {
  if (node_id != nullptr) {
    
  } else {
    
  }
  node_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (node_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.e2t.admin.ListE2NodeConnectionsResponse.node_id)
}

// string plmn_id = 4;
inline void ListE2NodeConnectionsResponse::clear_plmn_id() {
  plmn_id_.ClearToEmpty();
}
inline const std::string& ListE2NodeConnectionsResponse::plmn_id() const {
  // @@protoc_insertion_point(field_get:onos.e2t.admin.ListE2NodeConnectionsResponse.plmn_id)
  return _internal_plmn_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListE2NodeConnectionsResponse::set_plmn_id(ArgT0&& arg0, ArgT... args) {
 
 plmn_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.e2t.admin.ListE2NodeConnectionsResponse.plmn_id)
}
inline std::string* ListE2NodeConnectionsResponse::mutable_plmn_id() {
  std::string* _s = _internal_mutable_plmn_id();
  // @@protoc_insertion_point(field_mutable:onos.e2t.admin.ListE2NodeConnectionsResponse.plmn_id)
  return _s;
}
inline const std::string& ListE2NodeConnectionsResponse::_internal_plmn_id() const {
  return plmn_id_.Get();
}
inline void ListE2NodeConnectionsResponse::_internal_set_plmn_id(const std::string& value) {
  
  plmn_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListE2NodeConnectionsResponse::_internal_mutable_plmn_id() {
  
  return plmn_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListE2NodeConnectionsResponse::release_plmn_id() {
  // @@protoc_insertion_point(field_release:onos.e2t.admin.ListE2NodeConnectionsResponse.plmn_id)
  return plmn_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListE2NodeConnectionsResponse::set_allocated_plmn_id(std::string* plmn_id) {
  if (plmn_id != nullptr) {
    
  } else {
    
  }
  plmn_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), plmn_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (plmn_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    plmn_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.e2t.admin.ListE2NodeConnectionsResponse.plmn_id)
}

// .onos.e2t.admin.E2NodeConnectionType connection_type = 5;
inline void ListE2NodeConnectionsResponse::clear_connection_type() {
  connection_type_ = 0;
}
inline ::onos::e2t::admin::E2NodeConnectionType ListE2NodeConnectionsResponse::_internal_connection_type() const {
  return static_cast< ::onos::e2t::admin::E2NodeConnectionType >(connection_type_);
}
inline ::onos::e2t::admin::E2NodeConnectionType ListE2NodeConnectionsResponse::connection_type() const {
  // @@protoc_insertion_point(field_get:onos.e2t.admin.ListE2NodeConnectionsResponse.connection_type)
  return _internal_connection_type();
}
inline void ListE2NodeConnectionsResponse::_internal_set_connection_type(::onos::e2t::admin::E2NodeConnectionType value) {
  
  connection_type_ = value;
}
inline void ListE2NodeConnectionsResponse::set_connection_type(::onos::e2t::admin::E2NodeConnectionType value) {
  _internal_set_connection_type(value);
  // @@protoc_insertion_point(field_set:onos.e2t.admin.ListE2NodeConnectionsResponse.connection_type)
}

// repeated .onos.e2t.admin.RANFunction ran_functions = 6;
inline int ListE2NodeConnectionsResponse::_internal_ran_functions_size() const {
  return ran_functions_.size();
}
inline int ListE2NodeConnectionsResponse::ran_functions_size() const {
  return _internal_ran_functions_size();
}
inline void ListE2NodeConnectionsResponse::clear_ran_functions() {
  ran_functions_.Clear();
}
inline ::onos::e2t::admin::RANFunction* ListE2NodeConnectionsResponse::mutable_ran_functions(int index) {
  // @@protoc_insertion_point(field_mutable:onos.e2t.admin.ListE2NodeConnectionsResponse.ran_functions)
  return ran_functions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::e2t::admin::RANFunction >*
ListE2NodeConnectionsResponse::mutable_ran_functions() {
  // @@protoc_insertion_point(field_mutable_list:onos.e2t.admin.ListE2NodeConnectionsResponse.ran_functions)
  return &ran_functions_;
}
inline const ::onos::e2t::admin::RANFunction& ListE2NodeConnectionsResponse::_internal_ran_functions(int index) const {
  return ran_functions_.Get(index);
}
inline const ::onos::e2t::admin::RANFunction& ListE2NodeConnectionsResponse::ran_functions(int index) const {
  // @@protoc_insertion_point(field_get:onos.e2t.admin.ListE2NodeConnectionsResponse.ran_functions)
  return _internal_ran_functions(index);
}
inline ::onos::e2t::admin::RANFunction* ListE2NodeConnectionsResponse::_internal_add_ran_functions() {
  return ran_functions_.Add();
}
inline ::onos::e2t::admin::RANFunction* ListE2NodeConnectionsResponse::add_ran_functions() {
  ::onos::e2t::admin::RANFunction* _add = _internal_add_ran_functions();
  // @@protoc_insertion_point(field_add:onos.e2t.admin.ListE2NodeConnectionsResponse.ran_functions)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::e2t::admin::RANFunction >&
ListE2NodeConnectionsResponse::ran_functions() const {
  // @@protoc_insertion_point(field_list:onos.e2t.admin.ListE2NodeConnectionsResponse.ran_functions)
  return ran_functions_;
}

// int32 age_ms = 8;
inline void ListE2NodeConnectionsResponse::clear_age_ms() {
  age_ms_ = 0;
}
inline int32_t ListE2NodeConnectionsResponse::_internal_age_ms() const {
  return age_ms_;
}
inline int32_t ListE2NodeConnectionsResponse::age_ms() const {
  // @@protoc_insertion_point(field_get:onos.e2t.admin.ListE2NodeConnectionsResponse.age_ms)
  return _internal_age_ms();
}
inline void ListE2NodeConnectionsResponse::_internal_set_age_ms(int32_t value) {
  
  age_ms_ = value;
}
inline void ListE2NodeConnectionsResponse::set_age_ms(int32_t value) {
  _internal_set_age_ms(value);
  // @@protoc_insertion_point(field_set:onos.e2t.admin.ListE2NodeConnectionsResponse.age_ms)
}

// -------------------------------------------------------------------

// DropE2NodeConnectionsRequest

// repeated .onos.e2t.admin.ListE2NodeConnectionsResponse connections = 1;
inline int DropE2NodeConnectionsRequest::_internal_connections_size() const {
  return connections_.size();
}
inline int DropE2NodeConnectionsRequest::connections_size() const {
  return _internal_connections_size();
}
inline void DropE2NodeConnectionsRequest::clear_connections() {
  connections_.Clear();
}
inline ::onos::e2t::admin::ListE2NodeConnectionsResponse* DropE2NodeConnectionsRequest::mutable_connections(int index) {
  // @@protoc_insertion_point(field_mutable:onos.e2t.admin.DropE2NodeConnectionsRequest.connections)
  return connections_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::e2t::admin::ListE2NodeConnectionsResponse >*
DropE2NodeConnectionsRequest::mutable_connections() {
  // @@protoc_insertion_point(field_mutable_list:onos.e2t.admin.DropE2NodeConnectionsRequest.connections)
  return &connections_;
}
inline const ::onos::e2t::admin::ListE2NodeConnectionsResponse& DropE2NodeConnectionsRequest::_internal_connections(int index) const {
  return connections_.Get(index);
}
inline const ::onos::e2t::admin::ListE2NodeConnectionsResponse& DropE2NodeConnectionsRequest::connections(int index) const {
  // @@protoc_insertion_point(field_get:onos.e2t.admin.DropE2NodeConnectionsRequest.connections)
  return _internal_connections(index);
}
inline ::onos::e2t::admin::ListE2NodeConnectionsResponse* DropE2NodeConnectionsRequest::_internal_add_connections() {
  return connections_.Add();
}
inline ::onos::e2t::admin::ListE2NodeConnectionsResponse* DropE2NodeConnectionsRequest::add_connections() {
  ::onos::e2t::admin::ListE2NodeConnectionsResponse* _add = _internal_add_connections();
  // @@protoc_insertion_point(field_add:onos.e2t.admin.DropE2NodeConnectionsRequest.connections)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::onos::e2t::admin::ListE2NodeConnectionsResponse >&
DropE2NodeConnectionsRequest::connections() const {
  // @@protoc_insertion_point(field_list:onos.e2t.admin.DropE2NodeConnectionsRequest.connections)
  return connections_;
}

// -------------------------------------------------------------------

// DropE2NodeConnectionsResponse

// repeated bool success = 1;
inline int DropE2NodeConnectionsResponse::_internal_success_size() const {
  return success_.size();
}
inline int DropE2NodeConnectionsResponse::success_size() const {
  return _internal_success_size();
}
inline void DropE2NodeConnectionsResponse::clear_success() {
  success_.Clear();
}
inline bool DropE2NodeConnectionsResponse::_internal_success(int index) const {
  return success_.Get(index);
}
inline bool DropE2NodeConnectionsResponse::success(int index) const {
  // @@protoc_insertion_point(field_get:onos.e2t.admin.DropE2NodeConnectionsResponse.success)
  return _internal_success(index);
}
inline void DropE2NodeConnectionsResponse::set_success(int index, bool value) {
  success_.Set(index, value);
  // @@protoc_insertion_point(field_set:onos.e2t.admin.DropE2NodeConnectionsResponse.success)
}
inline void DropE2NodeConnectionsResponse::_internal_add_success(bool value) {
  success_.Add(value);
}
inline void DropE2NodeConnectionsResponse::add_success(bool value) {
  _internal_add_success(value);
  // @@protoc_insertion_point(field_add:onos.e2t.admin.DropE2NodeConnectionsResponse.success)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
DropE2NodeConnectionsResponse::_internal_success() const {
  return success_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >&
DropE2NodeConnectionsResponse::success() const {
  // @@protoc_insertion_point(field_list:onos.e2t.admin.DropE2NodeConnectionsResponse.success)
  return _internal_success();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
DropE2NodeConnectionsResponse::_internal_mutable_success() {
  return &success_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< bool >*
DropE2NodeConnectionsResponse::mutable_success() {
  // @@protoc_insertion_point(field_mutable_list:onos.e2t.admin.DropE2NodeConnectionsResponse.success)
  return _internal_mutable_success();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace admin
}  // namespace e2t
}  // namespace onos

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::onos::e2t::admin::E2NodeConnectionType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::onos::e2t::admin::E2NodeConnectionType>() {
  return ::onos::e2t::admin::E2NodeConnectionType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_onos_2fe2t_2fadmin_2fadmin_2eproto
