// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onos/e2t/e2/e2.proto

#include "onos/e2t/e2/e2.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace onos {
namespace e2t {
namespace e2 {
constexpr ServiceModel::ServiceModel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , version_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ServiceModelDefaultTypeInternal {
  constexpr ServiceModelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ServiceModelDefaultTypeInternal() {}
  union {
    ServiceModel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ServiceModelDefaultTypeInternal _ServiceModel_default_instance_;
constexpr RequestHeader::RequestHeader(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : service_model_(nullptr)
  , encoding_type_(0)
{}
struct RequestHeaderDefaultTypeInternal {
  constexpr RequestHeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestHeaderDefaultTypeInternal() {}
  union {
    RequestHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestHeaderDefaultTypeInternal _RequestHeader_default_instance_;
constexpr ResponseHeader::ResponseHeader(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : service_model_(nullptr)
  , encoding_type_(0)

  , response_status_(0)
{}
struct ResponseHeaderDefaultTypeInternal {
  constexpr ResponseHeaderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResponseHeaderDefaultTypeInternal() {}
  union {
    ResponseHeader _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResponseHeaderDefaultTypeInternal _ResponseHeader_default_instance_;
constexpr StreamRequest::StreamRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : app_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , instance_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , subscription_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , header_(nullptr){}
struct StreamRequestDefaultTypeInternal {
  constexpr StreamRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamRequestDefaultTypeInternal() {}
  union {
    StreamRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamRequestDefaultTypeInternal _StreamRequest_default_instance_;
constexpr StreamResponse::StreamResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : indication_header_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , indication_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , header_(nullptr){}
struct StreamResponseDefaultTypeInternal {
  constexpr StreamResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~StreamResponseDefaultTypeInternal() {}
  union {
    StreamResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT StreamResponseDefaultTypeInternal _StreamResponse_default_instance_;
constexpr ControlRequest::ControlRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : e2_node_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , control_header_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , control_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , header_(nullptr)
  , control_ack_request_(0)
{}
struct ControlRequestDefaultTypeInternal {
  constexpr ControlRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlRequestDefaultTypeInternal() {}
  union {
    ControlRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlRequestDefaultTypeInternal _ControlRequest_default_instance_;
constexpr ControlResponse::ControlResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(nullptr)
  , _oneof_case_{}{}
struct ControlResponseDefaultTypeInternal {
  constexpr ControlResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlResponseDefaultTypeInternal() {}
  union {
    ControlResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlResponseDefaultTypeInternal _ControlResponse_default_instance_;
constexpr ControlAcknowledge::ControlAcknowledge(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : control_outcome_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ControlAcknowledgeDefaultTypeInternal {
  constexpr ControlAcknowledgeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlAcknowledgeDefaultTypeInternal() {}
  union {
    ControlAcknowledge _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlAcknowledgeDefaultTypeInternal _ControlAcknowledge_default_instance_;
constexpr ControlFailure::ControlFailure(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : control_outcome_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cause_(0)
{}
struct ControlFailureDefaultTypeInternal {
  constexpr ControlFailureDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ControlFailureDefaultTypeInternal() {}
  union {
    ControlFailure _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ControlFailureDefaultTypeInternal _ControlFailure_default_instance_;
}  // namespace e2
}  // namespace e2t
}  // namespace onos
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_onos_2fe2t_2fe2_2fe2_2eproto[9];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_onos_2fe2t_2fe2_2fe2_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_onos_2fe2t_2fe2_2fe2_2eproto = nullptr;

const uint32_t TableStruct_onos_2fe2t_2fe2_2fe2_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::ServiceModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::ServiceModel, name_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::ServiceModel, version_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::RequestHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::RequestHeader, encoding_type_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::RequestHeader, service_model_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::ResponseHeader, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::ResponseHeader, encoding_type_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::ResponseHeader, service_model_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::ResponseHeader, response_status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::StreamRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::StreamRequest, header_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::StreamRequest, app_id_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::StreamRequest, instance_id_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::StreamRequest, subscription_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::StreamResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::StreamResponse, header_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::StreamResponse, indication_header_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::StreamResponse, indication_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::ControlRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::ControlRequest, header_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::ControlRequest, e2_node_id_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::ControlRequest, control_header_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::ControlRequest, control_message_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::ControlRequest, control_ack_request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::ControlResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::ControlResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::ControlResponse, header_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::ControlResponse, response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::ControlAcknowledge, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::ControlAcknowledge, control_outcome_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::ControlFailure, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::ControlFailure, cause_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::ControlFailure, control_outcome_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::ControlFailure, message_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::onos::e2t::e2::ServiceModel)},
  { 8, -1, -1, sizeof(::onos::e2t::e2::RequestHeader)},
  { 16, -1, -1, sizeof(::onos::e2t::e2::ResponseHeader)},
  { 25, -1, -1, sizeof(::onos::e2t::e2::StreamRequest)},
  { 35, -1, -1, sizeof(::onos::e2t::e2::StreamResponse)},
  { 44, -1, -1, sizeof(::onos::e2t::e2::ControlRequest)},
  { 55, -1, -1, sizeof(::onos::e2t::e2::ControlResponse)},
  { 65, -1, -1, sizeof(::onos::e2t::e2::ControlAcknowledge)},
  { 72, -1, -1, sizeof(::onos::e2t::e2::ControlFailure)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::e2t::e2::_ServiceModel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::e2t::e2::_RequestHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::e2t::e2::_ResponseHeader_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::e2t::e2::_StreamRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::e2t::e2::_StreamResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::e2t::e2::_ControlRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::e2t::e2::_ControlResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::e2t::e2::_ControlAcknowledge_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::e2t::e2::_ControlFailure_default_instance_),
};

const char descriptor_table_protodef_onos_2fe2t_2fe2_2fe2_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024onos/e2t/e2/e2.proto\022\013onos.e2t.e2\032\024gog"
  "oproto/gogo.proto\"o\n\014ServiceModel\022*\n\004nam"
  "e\030\001 \001(\tB\034\372\336\037\020ServiceModelName\342\336\037\004Name\0223\n"
  "\007version\030\002 \001(\tB\"\372\336\037\023ServiceModelVersion\342"
  "\336\037\007Version\"s\n\rRequestHeader\0220\n\rencoding_"
  "type\030\001 \001(\0162\031.onos.e2t.e2.EncodingType\0220\n"
  "\rservice_model\030\002 \001(\0132\031.onos.e2t.e2.Servi"
  "ceModel\"\252\001\n\016ResponseHeader\0220\n\rencoding_t"
  "ype\030\001 \001(\0162\031.onos.e2t.e2.EncodingType\0220\n\r"
  "service_model\030\002 \001(\0132\031.onos.e2t.e2.Servic"
  "eModel\0224\n\017response_status\030\003 \001(\0162\033.onos.e"
  "2t.e2.ResponseStatus\"\321\001\n\rStreamRequest\022*"
  "\n\006header\030\001 \001(\0132\032.onos.e2t.e2.RequestHead"
  "er\022\"\n\006app_id\030\002 \001(\tB\022\372\336\037\005AppID\342\336\037\005AppID\0221"
  "\n\013instance_id\030\003 \001(\tB\034\372\336\037\nInstanceID\342\336\037\nI"
  "nstanceID\022=\n\017subscription_id\030\004 \001(\tB$\372\336\037\016"
  "SubscriptionID\342\336\037\016SubscriptionID\"t\n\016Stre"
  "amResponse\022+\n\006header\030\001 \001(\0132\033.onos.e2t.e2"
  ".ResponseHeader\022\031\n\021indication_header\030\002 \001"
  "(\014\022\032\n\022indication_message\030\003 \001(\014\"\330\001\n\016Contr"
  "olRequest\022*\n\006header\030\001 \001(\0132\032.onos.e2t.e2."
  "RequestHeader\022,\n\ne2_node_id\030\002 \001(\tB\030\372\336\037\010E"
  "2NodeID\342\336\037\010E2NodeID\022\026\n\016control_header\030\003 "
  "\001(\014\022\027\n\017control_message\030\004 \001(\014\022;\n\023control_"
  "ack_request\030\005 \001(\0162\036.onos.e2t.e2.ControlA"
  "ckRequest\"\302\001\n\017ControlResponse\022+\n\006header\030"
  "\001 \001(\0132\033.onos.e2t.e2.ResponseHeader\022>\n\023co"
  "ntrol_acknowledge\030\002 \001(\0132\037.onos.e2t.e2.Co"
  "ntrolAcknowledgeH\000\0226\n\017control_failure\030\003 "
  "\001(\0132\033.onos.e2t.e2.ControlFailureH\000B\n\n\010re"
  "sponse\"-\n\022ControlAcknowledge\022\027\n\017control_"
  "outcome\030\001 \001(\014\"]\n\016ControlFailure\022!\n\005cause"
  "\030\001 \001(\0162\022.onos.e2t.e2.Cause\022\027\n\017control_ou"
  "tcome\030\002 \001(\014\022\017\n\007message\030\003 \001(\t*5\n\014Encoding"
  "Type\022\t\n\005PROTO\020\000\022\014\n\010ASN1_PER\020\001\022\014\n\010ASN1_XE"
  "R\020\002*9\n\016ResponseStatus\022\n\n\006FAILED\020\000\022\r\n\tSUC"
  "CEEDED\020\001\022\014\n\010REJECTED\020\002*\361\010\n\005Cause\022\021\n\rCAUS"
  "E_UNKNOWN\020\000\022*\n&CAUSE_MISC_CONTROL_PROCES"
  "SING_OVERLOAD\020\001\022\037\n\033CAUSE_MISC_HARDWARE_F"
  "AILURE\020\002\022\036\n\032CAUSE_MISC_OM_INTERVENTION\020\003"
  "\022\032\n\026CAUSE_MISC_UNSPECIFIED\020\004\022(\n$CAUSE_PR"
  "OTOCOL_TRANSFER_SYNTAX_ERROR\020\005\022/\n+CAUSE_"
  "PROTOCOL_ABSTRACT_SYNTAX_ERROR_REJECT\020\006\022"
  ":\n6CAUSE_PROTOCOL_ABSTRACT_SYNTAX_ERROR_"
  "IGNORE_AND_NOTIFY\020\007\022=\n9CAUSE_PROTOCOL_ME"
  "SSAGE_NOT_COMPATIBLE_WITH_RECEIVER_STATE"
  "\020\010\022!\n\035CAUSE_PROTOCOL_SEMANTIC_ERROR\020\t\022D\n"
  "@CAUSE_PROTOCOL_ABSTRACT_SYNTAX_ERROR_FA"
  "LSELY_CONSTRUCTED_MESSAGE\020\n\022\036\n\032CAUSE_PRO"
  "TOCOL_UNSPECIFIED\020\013\022%\n!CAUSE_RIC_RAN_FUN"
  "CTION_ID_INVALID\020\014\022\"\n\036CAUSE_RIC_ACTION_N"
  "OT_SUPPORTED\020\r\022\037\n\033CAUSE_RIC_EXCESSIVE_AC"
  "TIONS\020\016\022\036\n\032CAUSE_RIC_DUPLICATE_ACTION\020\017\022"
  "\035\n\031CAUSE_RIC_DUPLICATE_EVENT\020\020\022%\n!CAUSE_"
  "RIC_FUNCTION_RESOURCE_LIMIT\020\021\022 \n\034CAUSE_R"
  "IC_REQUEST_ID_UNKNOWN\020\022\022<\n8CAUSE_RIC_INC"
  "ONSISTENT_ACTION_SUBSEQUENT_ACTION_SEQUE"
  "NCE\020\023\022%\n!CAUSE_RIC_CONTROL_MESSAGE_INVAL"
  "ID\020\024\022%\n!CAUSE_RIC_CALL_PROCESS_ID_INVALI"
  "D\020\025\022\031\n\025CAUSE_RIC_UNSPECIFIED\020\026\022*\n&CAUSE_"
  "RICSERVICE_FUNCTION_NOT_REQUIRED\020\027\022(\n$CA"
  "USE_RICSERVICE_EXCESSIVE_FUNCTIONS\020\030\022\'\n#"
  "CAUSE_RICSERVICE_RIC_RESOURCE_LIMIT\020\031\022\037\n"
  "\033CAUSE_TRANSPORT_UNSPECIFIED\020\032\0222\n.CAUSE_"
  "TRANSPORT_TRANSPORT_RESOURCE_UNAVAILABLE"
  "\020\033*2\n\021ControlAckRequest\022\007\n\003ACK\020\000\022\n\n\006NO_A"
  "CK\020\001\022\010\n\004NACK\020\0022\231\001\n\nE2TService\022E\n\006Stream\022"
  "\032.onos.e2t.e2.StreamRequest\032\033.onos.e2t.e"
  "2.StreamResponse(\0010\001\022D\n\007Control\022\033.onos.e"
  "2t.e2.ControlRequest\032\034.onos.e2t.e2.Contr"
  "olResponseb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_onos_2fe2t_2fe2_2fe2_2eproto_deps[1] = {
  &::descriptor_table_gogoproto_2fgogo_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_onos_2fe2t_2fe2_2fe2_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_onos_2fe2t_2fe2_2fe2_2eproto = {
  false, false, 2818, descriptor_table_protodef_onos_2fe2t_2fe2_2fe2_2eproto, "onos/e2t/e2/e2.proto", 
  &descriptor_table_onos_2fe2t_2fe2_2fe2_2eproto_once, descriptor_table_onos_2fe2t_2fe2_2fe2_2eproto_deps, 1, 9,
  schemas, file_default_instances, TableStruct_onos_2fe2t_2fe2_2fe2_2eproto::offsets,
  file_level_metadata_onos_2fe2t_2fe2_2fe2_2eproto, file_level_enum_descriptors_onos_2fe2t_2fe2_2fe2_2eproto, file_level_service_descriptors_onos_2fe2t_2fe2_2fe2_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_onos_2fe2t_2fe2_2fe2_2eproto_getter() {
  return &descriptor_table_onos_2fe2t_2fe2_2fe2_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_onos_2fe2t_2fe2_2fe2_2eproto(&descriptor_table_onos_2fe2t_2fe2_2fe2_2eproto);
namespace onos {
namespace e2t {
namespace e2 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EncodingType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_onos_2fe2t_2fe2_2fe2_2eproto);
  return file_level_enum_descriptors_onos_2fe2t_2fe2_2fe2_2eproto[0];
}
bool EncodingType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ResponseStatus_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_onos_2fe2t_2fe2_2fe2_2eproto);
  return file_level_enum_descriptors_onos_2fe2t_2fe2_2fe2_2eproto[1];
}
bool ResponseStatus_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Cause_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_onos_2fe2t_2fe2_2fe2_2eproto);
  return file_level_enum_descriptors_onos_2fe2t_2fe2_2fe2_2eproto[2];
}
bool Cause_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ControlAckRequest_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_onos_2fe2t_2fe2_2fe2_2eproto);
  return file_level_enum_descriptors_onos_2fe2t_2fe2_2fe2_2eproto[3];
}
bool ControlAckRequest_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class ServiceModel::_Internal {
 public:
};

ServiceModel::ServiceModel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.e2t.e2.ServiceModel)
}
ServiceModel::ServiceModel(const ServiceModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_version().empty()) {
    version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_version(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:onos.e2t.e2.ServiceModel)
}

inline void ServiceModel::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
version_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ServiceModel::~ServiceModel() {
  // @@protoc_insertion_point(destructor:onos.e2t.e2.ServiceModel)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ServiceModel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ServiceModel::ArenaDtor(void* object) {
  ServiceModel* _this = reinterpret_cast< ServiceModel* >(object);
  (void)_this;
}
void ServiceModel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServiceModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ServiceModel::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.e2t.e2.ServiceModel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  version_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServiceModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [(.gogoproto.customname) = "Name", (.gogoproto.casttype) = "ServiceModelName"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.e2t.e2.ServiceModel.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string version = 2 [(.gogoproto.customname) = "Version", (.gogoproto.casttype) = "ServiceModelVersion"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_version();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.e2t.e2.ServiceModel.version"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ServiceModel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.e2t.e2.ServiceModel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.gogoproto.customname) = "Name", (.gogoproto.casttype) = "ServiceModelName"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.e2t.e2.ServiceModel.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string version = 2 [(.gogoproto.customname) = "Version", (.gogoproto.casttype) = "ServiceModelVersion"];
  if (!this->_internal_version().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_version().data(), static_cast<int>(this->_internal_version().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.e2t.e2.ServiceModel.version");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_version(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.e2t.e2.ServiceModel)
  return target;
}

size_t ServiceModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.e2t.e2.ServiceModel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [(.gogoproto.customname) = "Name", (.gogoproto.casttype) = "ServiceModelName"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string version = 2 [(.gogoproto.customname) = "Version", (.gogoproto.casttype) = "ServiceModelVersion"];
  if (!this->_internal_version().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_version());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ServiceModel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ServiceModel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ServiceModel::GetClassData() const { return &_class_data_; }

void ServiceModel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ServiceModel *>(to)->MergeFrom(
      static_cast<const ServiceModel &>(from));
}


void ServiceModel::MergeFrom(const ServiceModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.e2t.e2.ServiceModel)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_version().empty()) {
    _internal_set_version(from._internal_version());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ServiceModel::CopyFrom(const ServiceModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.e2t.e2.ServiceModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceModel::IsInitialized() const {
  return true;
}

void ServiceModel::InternalSwap(ServiceModel* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &version_, lhs_arena,
      &other->version_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceModel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fe2t_2fe2_2fe2_2eproto_getter, &descriptor_table_onos_2fe2t_2fe2_2fe2_2eproto_once,
      file_level_metadata_onos_2fe2t_2fe2_2fe2_2eproto[0]);
}

// ===================================================================

class RequestHeader::_Internal {
 public:
  static const ::onos::e2t::e2::ServiceModel& service_model(const RequestHeader* msg);
};

const ::onos::e2t::e2::ServiceModel&
RequestHeader::_Internal::service_model(const RequestHeader* msg) {
  return *msg->service_model_;
}
RequestHeader::RequestHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.e2t.e2.RequestHeader)
}
RequestHeader::RequestHeader(const RequestHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_service_model()) {
    service_model_ = new ::onos::e2t::e2::ServiceModel(*from.service_model_);
  } else {
    service_model_ = nullptr;
  }
  encoding_type_ = from.encoding_type_;
  // @@protoc_insertion_point(copy_constructor:onos.e2t.e2.RequestHeader)
}

inline void RequestHeader::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&service_model_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&encoding_type_) -
    reinterpret_cast<char*>(&service_model_)) + sizeof(encoding_type_));
}

RequestHeader::~RequestHeader() {
  // @@protoc_insertion_point(destructor:onos.e2t.e2.RequestHeader)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RequestHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete service_model_;
}

void RequestHeader::ArenaDtor(void* object) {
  RequestHeader* _this = reinterpret_cast< RequestHeader* >(object);
  (void)_this;
}
void RequestHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RequestHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RequestHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.e2t.e2.RequestHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && service_model_ != nullptr) {
    delete service_model_;
  }
  service_model_ = nullptr;
  encoding_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RequestHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .onos.e2t.e2.EncodingType encoding_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_encoding_type(static_cast<::onos::e2t::e2::EncodingType>(val));
        } else
          goto handle_unusual;
        continue;
      // .onos.e2t.e2.ServiceModel service_model = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_service_model(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* RequestHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.e2t.e2.RequestHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .onos.e2t.e2.EncodingType encoding_type = 1;
  if (this->_internal_encoding_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_encoding_type(), target);
  }

  // .onos.e2t.e2.ServiceModel service_model = 2;
  if (this->_internal_has_service_model()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::service_model(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.e2t.e2.RequestHeader)
  return target;
}

size_t RequestHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.e2t.e2.RequestHeader)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .onos.e2t.e2.ServiceModel service_model = 2;
  if (this->_internal_has_service_model()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *service_model_);
  }

  // .onos.e2t.e2.EncodingType encoding_type = 1;
  if (this->_internal_encoding_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_encoding_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RequestHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RequestHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RequestHeader::GetClassData() const { return &_class_data_; }

void RequestHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<RequestHeader *>(to)->MergeFrom(
      static_cast<const RequestHeader &>(from));
}


void RequestHeader::MergeFrom(const RequestHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.e2t.e2.RequestHeader)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_service_model()) {
    _internal_mutable_service_model()->::onos::e2t::e2::ServiceModel::MergeFrom(from._internal_service_model());
  }
  if (from._internal_encoding_type() != 0) {
    _internal_set_encoding_type(from._internal_encoding_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RequestHeader::CopyFrom(const RequestHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.e2t.e2.RequestHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestHeader::IsInitialized() const {
  return true;
}

void RequestHeader::InternalSwap(RequestHeader* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RequestHeader, encoding_type_)
      + sizeof(RequestHeader::encoding_type_)
      - PROTOBUF_FIELD_OFFSET(RequestHeader, service_model_)>(
          reinterpret_cast<char*>(&service_model_),
          reinterpret_cast<char*>(&other->service_model_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestHeader::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fe2t_2fe2_2fe2_2eproto_getter, &descriptor_table_onos_2fe2t_2fe2_2fe2_2eproto_once,
      file_level_metadata_onos_2fe2t_2fe2_2fe2_2eproto[1]);
}

// ===================================================================

class ResponseHeader::_Internal {
 public:
  static const ::onos::e2t::e2::ServiceModel& service_model(const ResponseHeader* msg);
};

const ::onos::e2t::e2::ServiceModel&
ResponseHeader::_Internal::service_model(const ResponseHeader* msg) {
  return *msg->service_model_;
}
ResponseHeader::ResponseHeader(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.e2t.e2.ResponseHeader)
}
ResponseHeader::ResponseHeader(const ResponseHeader& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_service_model()) {
    service_model_ = new ::onos::e2t::e2::ServiceModel(*from.service_model_);
  } else {
    service_model_ = nullptr;
  }
  ::memcpy(&encoding_type_, &from.encoding_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&response_status_) -
    reinterpret_cast<char*>(&encoding_type_)) + sizeof(response_status_));
  // @@protoc_insertion_point(copy_constructor:onos.e2t.e2.ResponseHeader)
}

inline void ResponseHeader::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&service_model_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&response_status_) -
    reinterpret_cast<char*>(&service_model_)) + sizeof(response_status_));
}

ResponseHeader::~ResponseHeader() {
  // @@protoc_insertion_point(destructor:onos.e2t.e2.ResponseHeader)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResponseHeader::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete service_model_;
}

void ResponseHeader::ArenaDtor(void* object) {
  ResponseHeader* _this = reinterpret_cast< ResponseHeader* >(object);
  (void)_this;
}
void ResponseHeader::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResponseHeader::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResponseHeader::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.e2t.e2.ResponseHeader)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && service_model_ != nullptr) {
    delete service_model_;
  }
  service_model_ = nullptr;
  ::memset(&encoding_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&response_status_) -
      reinterpret_cast<char*>(&encoding_type_)) + sizeof(response_status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResponseHeader::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .onos.e2t.e2.EncodingType encoding_type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_encoding_type(static_cast<::onos::e2t::e2::EncodingType>(val));
        } else
          goto handle_unusual;
        continue;
      // .onos.e2t.e2.ServiceModel service_model = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_service_model(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.e2t.e2.ResponseStatus response_status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_response_status(static_cast<::onos::e2t::e2::ResponseStatus>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ResponseHeader::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.e2t.e2.ResponseHeader)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .onos.e2t.e2.EncodingType encoding_type = 1;
  if (this->_internal_encoding_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_encoding_type(), target);
  }

  // .onos.e2t.e2.ServiceModel service_model = 2;
  if (this->_internal_has_service_model()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::service_model(this), target, stream);
  }

  // .onos.e2t.e2.ResponseStatus response_status = 3;
  if (this->_internal_response_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_response_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.e2t.e2.ResponseHeader)
  return target;
}

size_t ResponseHeader::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.e2t.e2.ResponseHeader)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .onos.e2t.e2.ServiceModel service_model = 2;
  if (this->_internal_has_service_model()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *service_model_);
  }

  // .onos.e2t.e2.EncodingType encoding_type = 1;
  if (this->_internal_encoding_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_encoding_type());
  }

  // .onos.e2t.e2.ResponseStatus response_status = 3;
  if (this->_internal_response_status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_response_status());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResponseHeader::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResponseHeader::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResponseHeader::GetClassData() const { return &_class_data_; }

void ResponseHeader::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ResponseHeader *>(to)->MergeFrom(
      static_cast<const ResponseHeader &>(from));
}


void ResponseHeader::MergeFrom(const ResponseHeader& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.e2t.e2.ResponseHeader)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_service_model()) {
    _internal_mutable_service_model()->::onos::e2t::e2::ServiceModel::MergeFrom(from._internal_service_model());
  }
  if (from._internal_encoding_type() != 0) {
    _internal_set_encoding_type(from._internal_encoding_type());
  }
  if (from._internal_response_status() != 0) {
    _internal_set_response_status(from._internal_response_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResponseHeader::CopyFrom(const ResponseHeader& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.e2t.e2.ResponseHeader)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseHeader::IsInitialized() const {
  return true;
}

void ResponseHeader::InternalSwap(ResponseHeader* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ResponseHeader, response_status_)
      + sizeof(ResponseHeader::response_status_)
      - PROTOBUF_FIELD_OFFSET(ResponseHeader, service_model_)>(
          reinterpret_cast<char*>(&service_model_),
          reinterpret_cast<char*>(&other->service_model_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ResponseHeader::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fe2t_2fe2_2fe2_2eproto_getter, &descriptor_table_onos_2fe2t_2fe2_2fe2_2eproto_once,
      file_level_metadata_onos_2fe2t_2fe2_2fe2_2eproto[2]);
}

// ===================================================================

class StreamRequest::_Internal {
 public:
  static const ::onos::e2t::e2::RequestHeader& header(const StreamRequest* msg);
};

const ::onos::e2t::e2::RequestHeader&
StreamRequest::_Internal::header(const StreamRequest* msg) {
  return *msg->header_;
}
StreamRequest::StreamRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.e2t.e2.StreamRequest)
}
StreamRequest::StreamRequest(const StreamRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_id(), 
      GetArenaForAllocation());
  }
  instance_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    instance_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_instance_id().empty()) {
    instance_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_instance_id(), 
      GetArenaForAllocation());
  }
  subscription_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subscription_id().empty()) {
    subscription_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_subscription_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::onos::e2t::e2::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:onos.e2t.e2.StreamRequest)
}

inline void StreamRequest::SharedCtor() {
app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
instance_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  instance_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
subscription_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
header_ = nullptr;
}

StreamRequest::~StreamRequest() {
  // @@protoc_insertion_point(destructor:onos.e2t.e2.StreamRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StreamRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  instance_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subscription_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void StreamRequest::ArenaDtor(void* object) {
  StreamRequest* _this = reinterpret_cast< StreamRequest* >(object);
  (void)_this;
}
void StreamRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.e2t.e2.StreamRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_id_.ClearToEmpty();
  instance_id_.ClearToEmpty();
  subscription_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .onos.e2t.e2.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string app_id = 2 [(.gogoproto.customname) = "AppID", (.gogoproto.casttype) = "AppID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.e2t.e2.StreamRequest.app_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string instance_id = 3 [(.gogoproto.customname) = "InstanceID", (.gogoproto.casttype) = "InstanceID"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_instance_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.e2t.e2.StreamRequest.instance_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string subscription_id = 4 [(.gogoproto.customname) = "SubscriptionID", (.gogoproto.casttype) = "SubscriptionID"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_subscription_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.e2t.e2.StreamRequest.subscription_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.e2t.e2.StreamRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .onos.e2t.e2.RequestHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // string app_id = 2 [(.gogoproto.customname) = "AppID", (.gogoproto.casttype) = "AppID"];
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.e2t.e2.StreamRequest.app_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_app_id(), target);
  }

  // string instance_id = 3 [(.gogoproto.customname) = "InstanceID", (.gogoproto.casttype) = "InstanceID"];
  if (!this->_internal_instance_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instance_id().data(), static_cast<int>(this->_internal_instance_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.e2t.e2.StreamRequest.instance_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_instance_id(), target);
  }

  // string subscription_id = 4 [(.gogoproto.customname) = "SubscriptionID", (.gogoproto.casttype) = "SubscriptionID"];
  if (!this->_internal_subscription_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subscription_id().data(), static_cast<int>(this->_internal_subscription_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.e2t.e2.StreamRequest.subscription_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_subscription_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.e2t.e2.StreamRequest)
  return target;
}

size_t StreamRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.e2t.e2.StreamRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string app_id = 2 [(.gogoproto.customname) = "AppID", (.gogoproto.casttype) = "AppID"];
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string instance_id = 3 [(.gogoproto.customname) = "InstanceID", (.gogoproto.casttype) = "InstanceID"];
  if (!this->_internal_instance_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instance_id());
  }

  // string subscription_id = 4 [(.gogoproto.customname) = "SubscriptionID", (.gogoproto.casttype) = "SubscriptionID"];
  if (!this->_internal_subscription_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subscription_id());
  }

  // .onos.e2t.e2.RequestHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StreamRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamRequest::GetClassData() const { return &_class_data_; }

void StreamRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StreamRequest *>(to)->MergeFrom(
      static_cast<const StreamRequest &>(from));
}


void StreamRequest::MergeFrom(const StreamRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.e2t.e2.StreamRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_app_id().empty()) {
    _internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_instance_id().empty()) {
    _internal_set_instance_id(from._internal_instance_id());
  }
  if (!from._internal_subscription_id().empty()) {
    _internal_set_subscription_id(from._internal_subscription_id());
  }
  if (from._internal_has_header()) {
    _internal_mutable_header()->::onos::e2t::e2::RequestHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamRequest::CopyFrom(const StreamRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.e2t.e2.StreamRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamRequest::IsInitialized() const {
  return true;
}

void StreamRequest::InternalSwap(StreamRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &app_id_, lhs_arena,
      &other->app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &instance_id_, lhs_arena,
      &other->instance_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &subscription_id_, lhs_arena,
      &other->subscription_id_, rhs_arena
  );
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fe2t_2fe2_2fe2_2eproto_getter, &descriptor_table_onos_2fe2t_2fe2_2fe2_2eproto_once,
      file_level_metadata_onos_2fe2t_2fe2_2fe2_2eproto[3]);
}

// ===================================================================

class StreamResponse::_Internal {
 public:
  static const ::onos::e2t::e2::ResponseHeader& header(const StreamResponse* msg);
};

const ::onos::e2t::e2::ResponseHeader&
StreamResponse::_Internal::header(const StreamResponse* msg) {
  return *msg->header_;
}
StreamResponse::StreamResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.e2t.e2.StreamResponse)
}
StreamResponse::StreamResponse(const StreamResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  indication_header_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    indication_header_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_indication_header().empty()) {
    indication_header_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_indication_header(), 
      GetArenaForAllocation());
  }
  indication_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    indication_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_indication_message().empty()) {
    indication_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_indication_message(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::onos::e2t::e2::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:onos.e2t.e2.StreamResponse)
}

inline void StreamResponse::SharedCtor() {
indication_header_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  indication_header_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
indication_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  indication_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
header_ = nullptr;
}

StreamResponse::~StreamResponse() {
  // @@protoc_insertion_point(destructor:onos.e2t.e2.StreamResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void StreamResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  indication_header_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  indication_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void StreamResponse::ArenaDtor(void* object) {
  StreamResponse* _this = reinterpret_cast< StreamResponse* >(object);
  (void)_this;
}
void StreamResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void StreamResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void StreamResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.e2t.e2.StreamResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  indication_header_.ClearToEmpty();
  indication_message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* StreamResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .onos.e2t.e2.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes indication_header = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_indication_header();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes indication_message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_indication_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* StreamResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.e2t.e2.StreamResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .onos.e2t.e2.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // bytes indication_header = 2;
  if (!this->_internal_indication_header().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_indication_header(), target);
  }

  // bytes indication_message = 3;
  if (!this->_internal_indication_message().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_indication_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.e2t.e2.StreamResponse)
  return target;
}

size_t StreamResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.e2t.e2.StreamResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes indication_header = 2;
  if (!this->_internal_indication_header().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_indication_header());
  }

  // bytes indication_message = 3;
  if (!this->_internal_indication_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_indication_message());
  }

  // .onos.e2t.e2.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData StreamResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    StreamResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*StreamResponse::GetClassData() const { return &_class_data_; }

void StreamResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<StreamResponse *>(to)->MergeFrom(
      static_cast<const StreamResponse &>(from));
}


void StreamResponse::MergeFrom(const StreamResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.e2t.e2.StreamResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_indication_header().empty()) {
    _internal_set_indication_header(from._internal_indication_header());
  }
  if (!from._internal_indication_message().empty()) {
    _internal_set_indication_message(from._internal_indication_message());
  }
  if (from._internal_has_header()) {
    _internal_mutable_header()->::onos::e2t::e2::ResponseHeader::MergeFrom(from._internal_header());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void StreamResponse::CopyFrom(const StreamResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.e2t.e2.StreamResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StreamResponse::IsInitialized() const {
  return true;
}

void StreamResponse::InternalSwap(StreamResponse* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &indication_header_, lhs_arena,
      &other->indication_header_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &indication_message_, lhs_arena,
      &other->indication_message_, rhs_arena
  );
  swap(header_, other->header_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StreamResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fe2t_2fe2_2fe2_2eproto_getter, &descriptor_table_onos_2fe2t_2fe2_2fe2_2eproto_once,
      file_level_metadata_onos_2fe2t_2fe2_2fe2_2eproto[4]);
}

// ===================================================================

class ControlRequest::_Internal {
 public:
  static const ::onos::e2t::e2::RequestHeader& header(const ControlRequest* msg);
};

const ::onos::e2t::e2::RequestHeader&
ControlRequest::_Internal::header(const ControlRequest* msg) {
  return *msg->header_;
}
ControlRequest::ControlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.e2t.e2.ControlRequest)
}
ControlRequest::ControlRequest(const ControlRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  e2_node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    e2_node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_e2_node_id().empty()) {
    e2_node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_e2_node_id(), 
      GetArenaForAllocation());
  }
  control_header_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    control_header_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_control_header().empty()) {
    control_header_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_control_header(), 
      GetArenaForAllocation());
  }
  control_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    control_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_control_message().empty()) {
    control_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_control_message(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_header()) {
    header_ = new ::onos::e2t::e2::RequestHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  control_ack_request_ = from.control_ack_request_;
  // @@protoc_insertion_point(copy_constructor:onos.e2t.e2.ControlRequest)
}

inline void ControlRequest::SharedCtor() {
e2_node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  e2_node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
control_header_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  control_header_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
control_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  control_message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&header_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&control_ack_request_) -
    reinterpret_cast<char*>(&header_)) + sizeof(control_ack_request_));
}

ControlRequest::~ControlRequest() {
  // @@protoc_insertion_point(destructor:onos.e2t.e2.ControlRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  e2_node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  control_header_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  control_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete header_;
}

void ControlRequest::ArenaDtor(void* object) {
  ControlRequest* _this = reinterpret_cast< ControlRequest* >(object);
  (void)_this;
}
void ControlRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.e2t.e2.ControlRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  e2_node_id_.ClearToEmpty();
  control_header_.ClearToEmpty();
  control_message_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  control_ack_request_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .onos.e2t.e2.RequestHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string e2_node_id = 2 [(.gogoproto.customname) = "E2NodeID", (.gogoproto.casttype) = "E2NodeID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_e2_node_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.e2t.e2.ControlRequest.e2_node_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes control_header = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_control_header();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes control_message = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_control_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.e2t.e2.ControlAckRequest control_ack_request = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_control_ack_request(static_cast<::onos::e2t::e2::ControlAckRequest>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.e2t.e2.ControlRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .onos.e2t.e2.RequestHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // string e2_node_id = 2 [(.gogoproto.customname) = "E2NodeID", (.gogoproto.casttype) = "E2NodeID"];
  if (!this->_internal_e2_node_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_e2_node_id().data(), static_cast<int>(this->_internal_e2_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.e2t.e2.ControlRequest.e2_node_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_e2_node_id(), target);
  }

  // bytes control_header = 3;
  if (!this->_internal_control_header().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_control_header(), target);
  }

  // bytes control_message = 4;
  if (!this->_internal_control_message().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_control_message(), target);
  }

  // .onos.e2t.e2.ControlAckRequest control_ack_request = 5;
  if (this->_internal_control_ack_request() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_control_ack_request(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.e2t.e2.ControlRequest)
  return target;
}

size_t ControlRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.e2t.e2.ControlRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string e2_node_id = 2 [(.gogoproto.customname) = "E2NodeID", (.gogoproto.casttype) = "E2NodeID"];
  if (!this->_internal_e2_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_e2_node_id());
  }

  // bytes control_header = 3;
  if (!this->_internal_control_header().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_control_header());
  }

  // bytes control_message = 4;
  if (!this->_internal_control_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_control_message());
  }

  // .onos.e2t.e2.RequestHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  // .onos.e2t.e2.ControlAckRequest control_ack_request = 5;
  if (this->_internal_control_ack_request() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_control_ack_request());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlRequest::GetClassData() const { return &_class_data_; }

void ControlRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlRequest *>(to)->MergeFrom(
      static_cast<const ControlRequest &>(from));
}


void ControlRequest::MergeFrom(const ControlRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.e2t.e2.ControlRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_e2_node_id().empty()) {
    _internal_set_e2_node_id(from._internal_e2_node_id());
  }
  if (!from._internal_control_header().empty()) {
    _internal_set_control_header(from._internal_control_header());
  }
  if (!from._internal_control_message().empty()) {
    _internal_set_control_message(from._internal_control_message());
  }
  if (from._internal_has_header()) {
    _internal_mutable_header()->::onos::e2t::e2::RequestHeader::MergeFrom(from._internal_header());
  }
  if (from._internal_control_ack_request() != 0) {
    _internal_set_control_ack_request(from._internal_control_ack_request());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlRequest::CopyFrom(const ControlRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.e2t.e2.ControlRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlRequest::IsInitialized() const {
  return true;
}

void ControlRequest::InternalSwap(ControlRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &e2_node_id_, lhs_arena,
      &other->e2_node_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &control_header_, lhs_arena,
      &other->control_header_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &control_message_, lhs_arena,
      &other->control_message_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ControlRequest, control_ack_request_)
      + sizeof(ControlRequest::control_ack_request_)
      - PROTOBUF_FIELD_OFFSET(ControlRequest, header_)>(
          reinterpret_cast<char*>(&header_),
          reinterpret_cast<char*>(&other->header_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fe2t_2fe2_2fe2_2eproto_getter, &descriptor_table_onos_2fe2t_2fe2_2fe2_2eproto_once,
      file_level_metadata_onos_2fe2t_2fe2_2fe2_2eproto[5]);
}

// ===================================================================

class ControlResponse::_Internal {
 public:
  static const ::onos::e2t::e2::ResponseHeader& header(const ControlResponse* msg);
  static const ::onos::e2t::e2::ControlAcknowledge& control_acknowledge(const ControlResponse* msg);
  static const ::onos::e2t::e2::ControlFailure& control_failure(const ControlResponse* msg);
};

const ::onos::e2t::e2::ResponseHeader&
ControlResponse::_Internal::header(const ControlResponse* msg) {
  return *msg->header_;
}
const ::onos::e2t::e2::ControlAcknowledge&
ControlResponse::_Internal::control_acknowledge(const ControlResponse* msg) {
  return *msg->response_.control_acknowledge_;
}
const ::onos::e2t::e2::ControlFailure&
ControlResponse::_Internal::control_failure(const ControlResponse* msg) {
  return *msg->response_.control_failure_;
}
void ControlResponse::set_allocated_control_acknowledge(::onos::e2t::e2::ControlAcknowledge* control_acknowledge) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (control_acknowledge) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::e2t::e2::ControlAcknowledge>::GetOwningArena(control_acknowledge);
    if (message_arena != submessage_arena) {
      control_acknowledge = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, control_acknowledge, submessage_arena);
    }
    set_has_control_acknowledge();
    response_.control_acknowledge_ = control_acknowledge;
  }
  // @@protoc_insertion_point(field_set_allocated:onos.e2t.e2.ControlResponse.control_acknowledge)
}
void ControlResponse::set_allocated_control_failure(::onos::e2t::e2::ControlFailure* control_failure) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_response();
  if (control_failure) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::e2t::e2::ControlFailure>::GetOwningArena(control_failure);
    if (message_arena != submessage_arena) {
      control_failure = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, control_failure, submessage_arena);
    }
    set_has_control_failure();
    response_.control_failure_ = control_failure;
  }
  // @@protoc_insertion_point(field_set_allocated:onos.e2t.e2.ControlResponse.control_failure)
}
ControlResponse::ControlResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.e2t.e2.ControlResponse)
}
ControlResponse::ControlResponse(const ControlResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_header()) {
    header_ = new ::onos::e2t::e2::ResponseHeader(*from.header_);
  } else {
    header_ = nullptr;
  }
  clear_has_response();
  switch (from.response_case()) {
    case kControlAcknowledge: {
      _internal_mutable_control_acknowledge()->::onos::e2t::e2::ControlAcknowledge::MergeFrom(from._internal_control_acknowledge());
      break;
    }
    case kControlFailure: {
      _internal_mutable_control_failure()->::onos::e2t::e2::ControlFailure::MergeFrom(from._internal_control_failure());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:onos.e2t.e2.ControlResponse)
}

inline void ControlResponse::SharedCtor() {
header_ = nullptr;
clear_has_response();
}

ControlResponse::~ControlResponse() {
  // @@protoc_insertion_point(destructor:onos.e2t.e2.ControlResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete header_;
  if (has_response()) {
    clear_response();
  }
}

void ControlResponse::ArenaDtor(void* object) {
  ControlResponse* _this = reinterpret_cast< ControlResponse* >(object);
  (void)_this;
}
void ControlResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlResponse::clear_response() {
// @@protoc_insertion_point(one_of_clear_start:onos.e2t.e2.ControlResponse)
  switch (response_case()) {
    case kControlAcknowledge: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.control_acknowledge_;
      }
      break;
    }
    case kControlFailure: {
      if (GetArenaForAllocation() == nullptr) {
        delete response_.control_failure_;
      }
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = RESPONSE_NOT_SET;
}


void ControlResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.e2t.e2.ControlResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && header_ != nullptr) {
    delete header_;
  }
  header_ = nullptr;
  clear_response();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .onos.e2t.e2.ResponseHeader header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_header(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.e2t.e2.ControlAcknowledge control_acknowledge = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_control_acknowledge(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.e2t.e2.ControlFailure control_failure = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_control_failure(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.e2t.e2.ControlResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .onos.e2t.e2.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::header(this), target, stream);
  }

  // .onos.e2t.e2.ControlAcknowledge control_acknowledge = 2;
  if (_internal_has_control_acknowledge()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::control_acknowledge(this), target, stream);
  }

  // .onos.e2t.e2.ControlFailure control_failure = 3;
  if (_internal_has_control_failure()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::control_failure(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.e2t.e2.ControlResponse)
  return target;
}

size_t ControlResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.e2t.e2.ControlResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .onos.e2t.e2.ResponseHeader header = 1;
  if (this->_internal_has_header()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *header_);
  }

  switch (response_case()) {
    // .onos.e2t.e2.ControlAcknowledge control_acknowledge = 2;
    case kControlAcknowledge: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.control_acknowledge_);
      break;
    }
    // .onos.e2t.e2.ControlFailure control_failure = 3;
    case kControlFailure: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *response_.control_failure_);
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlResponse::GetClassData() const { return &_class_data_; }

void ControlResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlResponse *>(to)->MergeFrom(
      static_cast<const ControlResponse &>(from));
}


void ControlResponse::MergeFrom(const ControlResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.e2t.e2.ControlResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_header()) {
    _internal_mutable_header()->::onos::e2t::e2::ResponseHeader::MergeFrom(from._internal_header());
  }
  switch (from.response_case()) {
    case kControlAcknowledge: {
      _internal_mutable_control_acknowledge()->::onos::e2t::e2::ControlAcknowledge::MergeFrom(from._internal_control_acknowledge());
      break;
    }
    case kControlFailure: {
      _internal_mutable_control_failure()->::onos::e2t::e2::ControlFailure::MergeFrom(from._internal_control_failure());
      break;
    }
    case RESPONSE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlResponse::CopyFrom(const ControlResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.e2t.e2.ControlResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlResponse::IsInitialized() const {
  return true;
}

void ControlResponse::InternalSwap(ControlResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(header_, other->header_);
  swap(response_, other->response_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fe2t_2fe2_2fe2_2eproto_getter, &descriptor_table_onos_2fe2t_2fe2_2fe2_2eproto_once,
      file_level_metadata_onos_2fe2t_2fe2_2fe2_2eproto[6]);
}

// ===================================================================

class ControlAcknowledge::_Internal {
 public:
};

ControlAcknowledge::ControlAcknowledge(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.e2t.e2.ControlAcknowledge)
}
ControlAcknowledge::ControlAcknowledge(const ControlAcknowledge& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  control_outcome_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    control_outcome_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_control_outcome().empty()) {
    control_outcome_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_control_outcome(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:onos.e2t.e2.ControlAcknowledge)
}

inline void ControlAcknowledge::SharedCtor() {
control_outcome_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  control_outcome_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ControlAcknowledge::~ControlAcknowledge() {
  // @@protoc_insertion_point(destructor:onos.e2t.e2.ControlAcknowledge)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlAcknowledge::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  control_outcome_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ControlAcknowledge::ArenaDtor(void* object) {
  ControlAcknowledge* _this = reinterpret_cast< ControlAcknowledge* >(object);
  (void)_this;
}
void ControlAcknowledge::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlAcknowledge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlAcknowledge::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.e2t.e2.ControlAcknowledge)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  control_outcome_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlAcknowledge::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes control_outcome = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_control_outcome();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlAcknowledge::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.e2t.e2.ControlAcknowledge)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes control_outcome = 1;
  if (!this->_internal_control_outcome().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_control_outcome(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.e2t.e2.ControlAcknowledge)
  return target;
}

size_t ControlAcknowledge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.e2t.e2.ControlAcknowledge)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes control_outcome = 1;
  if (!this->_internal_control_outcome().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_control_outcome());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlAcknowledge::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlAcknowledge::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlAcknowledge::GetClassData() const { return &_class_data_; }

void ControlAcknowledge::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlAcknowledge *>(to)->MergeFrom(
      static_cast<const ControlAcknowledge &>(from));
}


void ControlAcknowledge::MergeFrom(const ControlAcknowledge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.e2t.e2.ControlAcknowledge)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_control_outcome().empty()) {
    _internal_set_control_outcome(from._internal_control_outcome());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlAcknowledge::CopyFrom(const ControlAcknowledge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.e2t.e2.ControlAcknowledge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlAcknowledge::IsInitialized() const {
  return true;
}

void ControlAcknowledge::InternalSwap(ControlAcknowledge* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &control_outcome_, lhs_arena,
      &other->control_outcome_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlAcknowledge::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fe2t_2fe2_2fe2_2eproto_getter, &descriptor_table_onos_2fe2t_2fe2_2fe2_2eproto_once,
      file_level_metadata_onos_2fe2t_2fe2_2fe2_2eproto[7]);
}

// ===================================================================

class ControlFailure::_Internal {
 public:
};

ControlFailure::ControlFailure(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.e2t.e2.ControlFailure)
}
ControlFailure::ControlFailure(const ControlFailure& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  control_outcome_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    control_outcome_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_control_outcome().empty()) {
    control_outcome_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_control_outcome(), 
      GetArenaForAllocation());
  }
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_message().empty()) {
    message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message(), 
      GetArenaForAllocation());
  }
  cause_ = from.cause_;
  // @@protoc_insertion_point(copy_constructor:onos.e2t.e2.ControlFailure)
}

inline void ControlFailure::SharedCtor() {
control_outcome_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  control_outcome_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
cause_ = 0;
}

ControlFailure::~ControlFailure() {
  // @@protoc_insertion_point(destructor:onos.e2t.e2.ControlFailure)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ControlFailure::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  control_outcome_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ControlFailure::ArenaDtor(void* object) {
  ControlFailure* _this = reinterpret_cast< ControlFailure* >(object);
  (void)_this;
}
void ControlFailure::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ControlFailure::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ControlFailure::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.e2t.e2.ControlFailure)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  control_outcome_.ClearToEmpty();
  message_.ClearToEmpty();
  cause_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ControlFailure::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .onos.e2t.e2.Cause cause = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_cause(static_cast<::onos::e2t::e2::Cause>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes control_outcome = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_control_outcome();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.e2t.e2.ControlFailure.message"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ControlFailure::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.e2t.e2.ControlFailure)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .onos.e2t.e2.Cause cause = 1;
  if (this->_internal_cause() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_cause(), target);
  }

  // bytes control_outcome = 2;
  if (!this->_internal_control_outcome().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_control_outcome(), target);
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.e2t.e2.ControlFailure.message");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.e2t.e2.ControlFailure)
  return target;
}

size_t ControlFailure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.e2t.e2.ControlFailure)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes control_outcome = 2;
  if (!this->_internal_control_outcome().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_control_outcome());
  }

  // string message = 3;
  if (!this->_internal_message().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }

  // .onos.e2t.e2.Cause cause = 1;
  if (this->_internal_cause() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_cause());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ControlFailure::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ControlFailure::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ControlFailure::GetClassData() const { return &_class_data_; }

void ControlFailure::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ControlFailure *>(to)->MergeFrom(
      static_cast<const ControlFailure &>(from));
}


void ControlFailure::MergeFrom(const ControlFailure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.e2t.e2.ControlFailure)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_control_outcome().empty()) {
    _internal_set_control_outcome(from._internal_control_outcome());
  }
  if (!from._internal_message().empty()) {
    _internal_set_message(from._internal_message());
  }
  if (from._internal_cause() != 0) {
    _internal_set_cause(from._internal_cause());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ControlFailure::CopyFrom(const ControlFailure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.e2t.e2.ControlFailure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ControlFailure::IsInitialized() const {
  return true;
}

void ControlFailure::InternalSwap(ControlFailure* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &control_outcome_, lhs_arena,
      &other->control_outcome_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &message_, lhs_arena,
      &other->message_, rhs_arena
  );
  swap(cause_, other->cause_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ControlFailure::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fe2t_2fe2_2fe2_2eproto_getter, &descriptor_table_onos_2fe2t_2fe2_2fe2_2eproto_once,
      file_level_metadata_onos_2fe2t_2fe2_2fe2_2eproto[8]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace e2
}  // namespace e2t
}  // namespace onos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::onos::e2t::e2::ServiceModel* Arena::CreateMaybeMessage< ::onos::e2t::e2::ServiceModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::e2t::e2::ServiceModel >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::e2t::e2::RequestHeader* Arena::CreateMaybeMessage< ::onos::e2t::e2::RequestHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::e2t::e2::RequestHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::e2t::e2::ResponseHeader* Arena::CreateMaybeMessage< ::onos::e2t::e2::ResponseHeader >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::e2t::e2::ResponseHeader >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::e2t::e2::StreamRequest* Arena::CreateMaybeMessage< ::onos::e2t::e2::StreamRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::e2t::e2::StreamRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::e2t::e2::StreamResponse* Arena::CreateMaybeMessage< ::onos::e2t::e2::StreamResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::e2t::e2::StreamResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::e2t::e2::ControlRequest* Arena::CreateMaybeMessage< ::onos::e2t::e2::ControlRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::e2t::e2::ControlRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::e2t::e2::ControlResponse* Arena::CreateMaybeMessage< ::onos::e2t::e2::ControlResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::e2t::e2::ControlResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::e2t::e2::ControlAcknowledge* Arena::CreateMaybeMessage< ::onos::e2t::e2::ControlAcknowledge >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::e2t::e2::ControlAcknowledge >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::e2t::e2::ControlFailure* Arena::CreateMaybeMessage< ::onos::e2t::e2::ControlFailure >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::e2t::e2::ControlFailure >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
