// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onos/e2t/e2/v1beta1/control.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_onos_2fe2t_2fe2_2fv1beta1_2fcontrol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_onos_2fe2t_2fe2_2fv1beta1_2fcontrol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "gogoproto/gogo.pb.h"
#include "onos/e2t/e2/v1beta1/e2.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_onos_2fe2t_2fe2_2fv1beta1_2fcontrol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_onos_2fe2t_2fe2_2fv1beta1_2fcontrol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fcontrol_2eproto;
namespace onos {
namespace e2t {
namespace e2 {
namespace v1beta1 {
class ControlMessage;
struct ControlMessageDefaultTypeInternal;
extern ControlMessageDefaultTypeInternal _ControlMessage_default_instance_;
class ControlOutcome;
struct ControlOutcomeDefaultTypeInternal;
extern ControlOutcomeDefaultTypeInternal _ControlOutcome_default_instance_;
class ControlRequest;
struct ControlRequestDefaultTypeInternal;
extern ControlRequestDefaultTypeInternal _ControlRequest_default_instance_;
class ControlResponse;
struct ControlResponseDefaultTypeInternal;
extern ControlResponseDefaultTypeInternal _ControlResponse_default_instance_;
}  // namespace v1beta1
}  // namespace e2
}  // namespace e2t
}  // namespace onos
PROTOBUF_NAMESPACE_OPEN
template<> ::onos::e2t::e2::v1beta1::ControlMessage* Arena::CreateMaybeMessage<::onos::e2t::e2::v1beta1::ControlMessage>(Arena*);
template<> ::onos::e2t::e2::v1beta1::ControlOutcome* Arena::CreateMaybeMessage<::onos::e2t::e2::v1beta1::ControlOutcome>(Arena*);
template<> ::onos::e2t::e2::v1beta1::ControlRequest* Arena::CreateMaybeMessage<::onos::e2t::e2::v1beta1::ControlRequest>(Arena*);
template<> ::onos::e2t::e2::v1beta1::ControlResponse* Arena::CreateMaybeMessage<::onos::e2t::e2::v1beta1::ControlResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace onos {
namespace e2t {
namespace e2 {
namespace v1beta1 {

// ===================================================================

class ControlRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.e2t.e2.v1beta1.ControlRequest) */ {
 public:
  inline ControlRequest() : ControlRequest(nullptr) {}
  ~ControlRequest() override;
  explicit constexpr ControlRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlRequest(const ControlRequest& from);
  ControlRequest(ControlRequest&& from) noexcept
    : ControlRequest() {
    *this = ::std::move(from);
  }

  inline ControlRequest& operator=(const ControlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlRequest& operator=(ControlRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlRequest* internal_default_instance() {
    return reinterpret_cast<const ControlRequest*>(
               &_ControlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ControlRequest& a, ControlRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ControlRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.e2t.e2.v1beta1.ControlRequest";
  }
  protected:
  explicit ControlRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeadersFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // .onos.e2t.e2.v1beta1.RequestHeaders headers = 1 [(.gogoproto.nullable) = false];
  bool has_headers() const;
  private:
  bool _internal_has_headers() const;
  public:
  void clear_headers();
  const ::onos::e2t::e2::v1beta1::RequestHeaders& headers() const;
  PROTOBUF_NODISCARD ::onos::e2t::e2::v1beta1::RequestHeaders* release_headers();
  ::onos::e2t::e2::v1beta1::RequestHeaders* mutable_headers();
  void set_allocated_headers(::onos::e2t::e2::v1beta1::RequestHeaders* headers);
  private:
  const ::onos::e2t::e2::v1beta1::RequestHeaders& _internal_headers() const;
  ::onos::e2t::e2::v1beta1::RequestHeaders* _internal_mutable_headers();
  public:
  void unsafe_arena_set_allocated_headers(
      ::onos::e2t::e2::v1beta1::RequestHeaders* headers);
  ::onos::e2t::e2::v1beta1::RequestHeaders* unsafe_arena_release_headers();

  // .onos.e2t.e2.v1beta1.ControlMessage message = 2 [(.gogoproto.nullable) = false];
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::onos::e2t::e2::v1beta1::ControlMessage& message() const;
  PROTOBUF_NODISCARD ::onos::e2t::e2::v1beta1::ControlMessage* release_message();
  ::onos::e2t::e2::v1beta1::ControlMessage* mutable_message();
  void set_allocated_message(::onos::e2t::e2::v1beta1::ControlMessage* message);
  private:
  const ::onos::e2t::e2::v1beta1::ControlMessage& _internal_message() const;
  ::onos::e2t::e2::v1beta1::ControlMessage* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::onos::e2t::e2::v1beta1::ControlMessage* message);
  ::onos::e2t::e2::v1beta1::ControlMessage* unsafe_arena_release_message();

  // @@protoc_insertion_point(class_scope:onos.e2t.e2.v1beta1.ControlRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::e2t::e2::v1beta1::RequestHeaders* headers_;
  ::onos::e2t::e2::v1beta1::ControlMessage* message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fe2t_2fe2_2fv1beta1_2fcontrol_2eproto;
};
// -------------------------------------------------------------------

class ControlMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.e2t.e2.v1beta1.ControlMessage) */ {
 public:
  inline ControlMessage() : ControlMessage(nullptr) {}
  ~ControlMessage() override;
  explicit constexpr ControlMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlMessage(const ControlMessage& from);
  ControlMessage(ControlMessage&& from) noexcept
    : ControlMessage() {
    *this = ::std::move(from);
  }

  inline ControlMessage& operator=(const ControlMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlMessage& operator=(ControlMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlMessage* internal_default_instance() {
    return reinterpret_cast<const ControlMessage*>(
               &_ControlMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ControlMessage& a, ControlMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ControlMessage& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.e2t.e2.v1beta1.ControlMessage";
  }
  protected:
  explicit ControlMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeaderFieldNumber = 1,
    kPayloadFieldNumber = 2,
  };
  // bytes header = 1;
  void clear_header();
  const std::string& header() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_header(ArgT0&& arg0, ArgT... args);
  std::string* mutable_header();
  PROTOBUF_NODISCARD std::string* release_header();
  void set_allocated_header(std::string* header);
  private:
  const std::string& _internal_header() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_header(const std::string& value);
  std::string* _internal_mutable_header();
  public:

  // bytes payload = 2;
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // @@protoc_insertion_point(class_scope:onos.e2t.e2.v1beta1.ControlMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr header_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fe2t_2fe2_2fv1beta1_2fcontrol_2eproto;
};
// -------------------------------------------------------------------

class ControlResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.e2t.e2.v1beta1.ControlResponse) */ {
 public:
  inline ControlResponse() : ControlResponse(nullptr) {}
  ~ControlResponse() override;
  explicit constexpr ControlResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlResponse(const ControlResponse& from);
  ControlResponse(ControlResponse&& from) noexcept
    : ControlResponse() {
    *this = ::std::move(from);
  }

  inline ControlResponse& operator=(const ControlResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlResponse& operator=(ControlResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlResponse* internal_default_instance() {
    return reinterpret_cast<const ControlResponse*>(
               &_ControlResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ControlResponse& a, ControlResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ControlResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.e2t.e2.v1beta1.ControlResponse";
  }
  protected:
  explicit ControlResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHeadersFieldNumber = 1,
    kOutcomeFieldNumber = 2,
  };
  // .onos.e2t.e2.v1beta1.ResponseHeaders headers = 1 [(.gogoproto.nullable) = false];
  bool has_headers() const;
  private:
  bool _internal_has_headers() const;
  public:
  void clear_headers();
  const ::onos::e2t::e2::v1beta1::ResponseHeaders& headers() const;
  PROTOBUF_NODISCARD ::onos::e2t::e2::v1beta1::ResponseHeaders* release_headers();
  ::onos::e2t::e2::v1beta1::ResponseHeaders* mutable_headers();
  void set_allocated_headers(::onos::e2t::e2::v1beta1::ResponseHeaders* headers);
  private:
  const ::onos::e2t::e2::v1beta1::ResponseHeaders& _internal_headers() const;
  ::onos::e2t::e2::v1beta1::ResponseHeaders* _internal_mutable_headers();
  public:
  void unsafe_arena_set_allocated_headers(
      ::onos::e2t::e2::v1beta1::ResponseHeaders* headers);
  ::onos::e2t::e2::v1beta1::ResponseHeaders* unsafe_arena_release_headers();

  // .onos.e2t.e2.v1beta1.ControlOutcome outcome = 2 [(.gogoproto.nullable) = false];
  bool has_outcome() const;
  private:
  bool _internal_has_outcome() const;
  public:
  void clear_outcome();
  const ::onos::e2t::e2::v1beta1::ControlOutcome& outcome() const;
  PROTOBUF_NODISCARD ::onos::e2t::e2::v1beta1::ControlOutcome* release_outcome();
  ::onos::e2t::e2::v1beta1::ControlOutcome* mutable_outcome();
  void set_allocated_outcome(::onos::e2t::e2::v1beta1::ControlOutcome* outcome);
  private:
  const ::onos::e2t::e2::v1beta1::ControlOutcome& _internal_outcome() const;
  ::onos::e2t::e2::v1beta1::ControlOutcome* _internal_mutable_outcome();
  public:
  void unsafe_arena_set_allocated_outcome(
      ::onos::e2t::e2::v1beta1::ControlOutcome* outcome);
  ::onos::e2t::e2::v1beta1::ControlOutcome* unsafe_arena_release_outcome();

  // @@protoc_insertion_point(class_scope:onos.e2t.e2.v1beta1.ControlResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::e2t::e2::v1beta1::ResponseHeaders* headers_;
  ::onos::e2t::e2::v1beta1::ControlOutcome* outcome_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fe2t_2fe2_2fv1beta1_2fcontrol_2eproto;
};
// -------------------------------------------------------------------

class ControlOutcome final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.e2t.e2.v1beta1.ControlOutcome) */ {
 public:
  inline ControlOutcome() : ControlOutcome(nullptr) {}
  ~ControlOutcome() override;
  explicit constexpr ControlOutcome(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ControlOutcome(const ControlOutcome& from);
  ControlOutcome(ControlOutcome&& from) noexcept
    : ControlOutcome() {
    *this = ::std::move(from);
  }

  inline ControlOutcome& operator=(const ControlOutcome& from) {
    CopyFrom(from);
    return *this;
  }
  inline ControlOutcome& operator=(ControlOutcome&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ControlOutcome& default_instance() {
    return *internal_default_instance();
  }
  static inline const ControlOutcome* internal_default_instance() {
    return reinterpret_cast<const ControlOutcome*>(
               &_ControlOutcome_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ControlOutcome& a, ControlOutcome& b) {
    a.Swap(&b);
  }
  inline void Swap(ControlOutcome* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ControlOutcome* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ControlOutcome* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ControlOutcome>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ControlOutcome& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ControlOutcome& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ControlOutcome* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.e2t.e2.v1beta1.ControlOutcome";
  }
  protected:
  explicit ControlOutcome(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPayloadFieldNumber = 1,
  };
  // bytes payload = 1;
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_NODISCARD std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // @@protoc_insertion_point(class_scope:onos.e2t.e2.v1beta1.ControlOutcome)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fe2t_2fe2_2fv1beta1_2fcontrol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ControlRequest

// .onos.e2t.e2.v1beta1.RequestHeaders headers = 1 [(.gogoproto.nullable) = false];
inline bool ControlRequest::_internal_has_headers() const {
  return this != internal_default_instance() && headers_ != nullptr;
}
inline bool ControlRequest::has_headers() const {
  return _internal_has_headers();
}
inline const ::onos::e2t::e2::v1beta1::RequestHeaders& ControlRequest::_internal_headers() const {
  const ::onos::e2t::e2::v1beta1::RequestHeaders* p = headers_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::e2t::e2::v1beta1::RequestHeaders&>(
      ::onos::e2t::e2::v1beta1::_RequestHeaders_default_instance_);
}
inline const ::onos::e2t::e2::v1beta1::RequestHeaders& ControlRequest::headers() const {
  // @@protoc_insertion_point(field_get:onos.e2t.e2.v1beta1.ControlRequest.headers)
  return _internal_headers();
}
inline void ControlRequest::unsafe_arena_set_allocated_headers(
    ::onos::e2t::e2::v1beta1::RequestHeaders* headers) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(headers_);
  }
  headers_ = headers;
  if (headers) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.e2t.e2.v1beta1.ControlRequest.headers)
}
inline ::onos::e2t::e2::v1beta1::RequestHeaders* ControlRequest::release_headers() {
  
  ::onos::e2t::e2::v1beta1::RequestHeaders* temp = headers_;
  headers_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::e2t::e2::v1beta1::RequestHeaders* ControlRequest::unsafe_arena_release_headers() {
  // @@protoc_insertion_point(field_release:onos.e2t.e2.v1beta1.ControlRequest.headers)
  
  ::onos::e2t::e2::v1beta1::RequestHeaders* temp = headers_;
  headers_ = nullptr;
  return temp;
}
inline ::onos::e2t::e2::v1beta1::RequestHeaders* ControlRequest::_internal_mutable_headers() {
  
  if (headers_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::e2t::e2::v1beta1::RequestHeaders>(GetArenaForAllocation());
    headers_ = p;
  }
  return headers_;
}
inline ::onos::e2t::e2::v1beta1::RequestHeaders* ControlRequest::mutable_headers() {
  ::onos::e2t::e2::v1beta1::RequestHeaders* _msg = _internal_mutable_headers();
  // @@protoc_insertion_point(field_mutable:onos.e2t.e2.v1beta1.ControlRequest.headers)
  return _msg;
}
inline void ControlRequest::set_allocated_headers(::onos::e2t::e2::v1beta1::RequestHeaders* headers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(headers_);
  }
  if (headers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(headers));
    if (message_arena != submessage_arena) {
      headers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, headers, submessage_arena);
    }
    
  } else {
    
  }
  headers_ = headers;
  // @@protoc_insertion_point(field_set_allocated:onos.e2t.e2.v1beta1.ControlRequest.headers)
}

// .onos.e2t.e2.v1beta1.ControlMessage message = 2 [(.gogoproto.nullable) = false];
inline bool ControlRequest::_internal_has_message() const {
  return this != internal_default_instance() && message_ != nullptr;
}
inline bool ControlRequest::has_message() const {
  return _internal_has_message();
}
inline void ControlRequest::clear_message() {
  if (GetArenaForAllocation() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
}
inline const ::onos::e2t::e2::v1beta1::ControlMessage& ControlRequest::_internal_message() const {
  const ::onos::e2t::e2::v1beta1::ControlMessage* p = message_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::e2t::e2::v1beta1::ControlMessage&>(
      ::onos::e2t::e2::v1beta1::_ControlMessage_default_instance_);
}
inline const ::onos::e2t::e2::v1beta1::ControlMessage& ControlRequest::message() const {
  // @@protoc_insertion_point(field_get:onos.e2t.e2.v1beta1.ControlRequest.message)
  return _internal_message();
}
inline void ControlRequest::unsafe_arena_set_allocated_message(
    ::onos::e2t::e2::v1beta1::ControlMessage* message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.e2t.e2.v1beta1.ControlRequest.message)
}
inline ::onos::e2t::e2::v1beta1::ControlMessage* ControlRequest::release_message() {
  
  ::onos::e2t::e2::v1beta1::ControlMessage* temp = message_;
  message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::e2t::e2::v1beta1::ControlMessage* ControlRequest::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:onos.e2t.e2.v1beta1.ControlRequest.message)
  
  ::onos::e2t::e2::v1beta1::ControlMessage* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::onos::e2t::e2::v1beta1::ControlMessage* ControlRequest::_internal_mutable_message() {
  
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::e2t::e2::v1beta1::ControlMessage>(GetArenaForAllocation());
    message_ = p;
  }
  return message_;
}
inline ::onos::e2t::e2::v1beta1::ControlMessage* ControlRequest::mutable_message() {
  ::onos::e2t::e2::v1beta1::ControlMessage* _msg = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:onos.e2t.e2.v1beta1.ControlRequest.message)
  return _msg;
}
inline void ControlRequest::set_allocated_message(::onos::e2t::e2::v1beta1::ControlMessage* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete message_;
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::e2t::e2::v1beta1::ControlMessage>::GetOwningArena(message);
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:onos.e2t.e2.v1beta1.ControlRequest.message)
}

// -------------------------------------------------------------------

// ControlMessage

// bytes header = 1;
inline void ControlMessage::clear_header() {
  header_.ClearToEmpty();
}
inline const std::string& ControlMessage::header() const {
  // @@protoc_insertion_point(field_get:onos.e2t.e2.v1beta1.ControlMessage.header)
  return _internal_header();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ControlMessage::set_header(ArgT0&& arg0, ArgT... args) {
 
 header_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.e2t.e2.v1beta1.ControlMessage.header)
}
inline std::string* ControlMessage::mutable_header() {
  std::string* _s = _internal_mutable_header();
  // @@protoc_insertion_point(field_mutable:onos.e2t.e2.v1beta1.ControlMessage.header)
  return _s;
}
inline const std::string& ControlMessage::_internal_header() const {
  return header_.Get();
}
inline void ControlMessage::_internal_set_header(const std::string& value) {
  
  header_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ControlMessage::_internal_mutable_header() {
  
  return header_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ControlMessage::release_header() {
  // @@protoc_insertion_point(field_release:onos.e2t.e2.v1beta1.ControlMessage.header)
  return header_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ControlMessage::set_allocated_header(std::string* header) {
  if (header != nullptr) {
    
  } else {
    
  }
  header_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), header,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (header_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    header_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.e2t.e2.v1beta1.ControlMessage.header)
}

// bytes payload = 2;
inline void ControlMessage::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& ControlMessage::payload() const {
  // @@protoc_insertion_point(field_get:onos.e2t.e2.v1beta1.ControlMessage.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ControlMessage::set_payload(ArgT0&& arg0, ArgT... args) {
 
 payload_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.e2t.e2.v1beta1.ControlMessage.payload)
}
inline std::string* ControlMessage::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:onos.e2t.e2.v1beta1.ControlMessage.payload)
  return _s;
}
inline const std::string& ControlMessage::_internal_payload() const {
  return payload_.Get();
}
inline void ControlMessage::_internal_set_payload(const std::string& value) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ControlMessage::_internal_mutable_payload() {
  
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ControlMessage::release_payload() {
  // @@protoc_insertion_point(field_release:onos.e2t.e2.v1beta1.ControlMessage.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ControlMessage::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (payload_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.e2t.e2.v1beta1.ControlMessage.payload)
}

// -------------------------------------------------------------------

// ControlResponse

// .onos.e2t.e2.v1beta1.ResponseHeaders headers = 1 [(.gogoproto.nullable) = false];
inline bool ControlResponse::_internal_has_headers() const {
  return this != internal_default_instance() && headers_ != nullptr;
}
inline bool ControlResponse::has_headers() const {
  return _internal_has_headers();
}
inline const ::onos::e2t::e2::v1beta1::ResponseHeaders& ControlResponse::_internal_headers() const {
  const ::onos::e2t::e2::v1beta1::ResponseHeaders* p = headers_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::e2t::e2::v1beta1::ResponseHeaders&>(
      ::onos::e2t::e2::v1beta1::_ResponseHeaders_default_instance_);
}
inline const ::onos::e2t::e2::v1beta1::ResponseHeaders& ControlResponse::headers() const {
  // @@protoc_insertion_point(field_get:onos.e2t.e2.v1beta1.ControlResponse.headers)
  return _internal_headers();
}
inline void ControlResponse::unsafe_arena_set_allocated_headers(
    ::onos::e2t::e2::v1beta1::ResponseHeaders* headers) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(headers_);
  }
  headers_ = headers;
  if (headers) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.e2t.e2.v1beta1.ControlResponse.headers)
}
inline ::onos::e2t::e2::v1beta1::ResponseHeaders* ControlResponse::release_headers() {
  
  ::onos::e2t::e2::v1beta1::ResponseHeaders* temp = headers_;
  headers_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::e2t::e2::v1beta1::ResponseHeaders* ControlResponse::unsafe_arena_release_headers() {
  // @@protoc_insertion_point(field_release:onos.e2t.e2.v1beta1.ControlResponse.headers)
  
  ::onos::e2t::e2::v1beta1::ResponseHeaders* temp = headers_;
  headers_ = nullptr;
  return temp;
}
inline ::onos::e2t::e2::v1beta1::ResponseHeaders* ControlResponse::_internal_mutable_headers() {
  
  if (headers_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::e2t::e2::v1beta1::ResponseHeaders>(GetArenaForAllocation());
    headers_ = p;
  }
  return headers_;
}
inline ::onos::e2t::e2::v1beta1::ResponseHeaders* ControlResponse::mutable_headers() {
  ::onos::e2t::e2::v1beta1::ResponseHeaders* _msg = _internal_mutable_headers();
  // @@protoc_insertion_point(field_mutable:onos.e2t.e2.v1beta1.ControlResponse.headers)
  return _msg;
}
inline void ControlResponse::set_allocated_headers(::onos::e2t::e2::v1beta1::ResponseHeaders* headers) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(headers_);
  }
  if (headers) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(headers));
    if (message_arena != submessage_arena) {
      headers = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, headers, submessage_arena);
    }
    
  } else {
    
  }
  headers_ = headers;
  // @@protoc_insertion_point(field_set_allocated:onos.e2t.e2.v1beta1.ControlResponse.headers)
}

// .onos.e2t.e2.v1beta1.ControlOutcome outcome = 2 [(.gogoproto.nullable) = false];
inline bool ControlResponse::_internal_has_outcome() const {
  return this != internal_default_instance() && outcome_ != nullptr;
}
inline bool ControlResponse::has_outcome() const {
  return _internal_has_outcome();
}
inline void ControlResponse::clear_outcome() {
  if (GetArenaForAllocation() == nullptr && outcome_ != nullptr) {
    delete outcome_;
  }
  outcome_ = nullptr;
}
inline const ::onos::e2t::e2::v1beta1::ControlOutcome& ControlResponse::_internal_outcome() const {
  const ::onos::e2t::e2::v1beta1::ControlOutcome* p = outcome_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::e2t::e2::v1beta1::ControlOutcome&>(
      ::onos::e2t::e2::v1beta1::_ControlOutcome_default_instance_);
}
inline const ::onos::e2t::e2::v1beta1::ControlOutcome& ControlResponse::outcome() const {
  // @@protoc_insertion_point(field_get:onos.e2t.e2.v1beta1.ControlResponse.outcome)
  return _internal_outcome();
}
inline void ControlResponse::unsafe_arena_set_allocated_outcome(
    ::onos::e2t::e2::v1beta1::ControlOutcome* outcome) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(outcome_);
  }
  outcome_ = outcome;
  if (outcome) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.e2t.e2.v1beta1.ControlResponse.outcome)
}
inline ::onos::e2t::e2::v1beta1::ControlOutcome* ControlResponse::release_outcome() {
  
  ::onos::e2t::e2::v1beta1::ControlOutcome* temp = outcome_;
  outcome_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::e2t::e2::v1beta1::ControlOutcome* ControlResponse::unsafe_arena_release_outcome() {
  // @@protoc_insertion_point(field_release:onos.e2t.e2.v1beta1.ControlResponse.outcome)
  
  ::onos::e2t::e2::v1beta1::ControlOutcome* temp = outcome_;
  outcome_ = nullptr;
  return temp;
}
inline ::onos::e2t::e2::v1beta1::ControlOutcome* ControlResponse::_internal_mutable_outcome() {
  
  if (outcome_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::e2t::e2::v1beta1::ControlOutcome>(GetArenaForAllocation());
    outcome_ = p;
  }
  return outcome_;
}
inline ::onos::e2t::e2::v1beta1::ControlOutcome* ControlResponse::mutable_outcome() {
  ::onos::e2t::e2::v1beta1::ControlOutcome* _msg = _internal_mutable_outcome();
  // @@protoc_insertion_point(field_mutable:onos.e2t.e2.v1beta1.ControlResponse.outcome)
  return _msg;
}
inline void ControlResponse::set_allocated_outcome(::onos::e2t::e2::v1beta1::ControlOutcome* outcome) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete outcome_;
  }
  if (outcome) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::e2t::e2::v1beta1::ControlOutcome>::GetOwningArena(outcome);
    if (message_arena != submessage_arena) {
      outcome = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, outcome, submessage_arena);
    }
    
  } else {
    
  }
  outcome_ = outcome;
  // @@protoc_insertion_point(field_set_allocated:onos.e2t.e2.v1beta1.ControlResponse.outcome)
}

// -------------------------------------------------------------------

// ControlOutcome

// bytes payload = 1;
inline void ControlOutcome::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& ControlOutcome::payload() const {
  // @@protoc_insertion_point(field_get:onos.e2t.e2.v1beta1.ControlOutcome.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ControlOutcome::set_payload(ArgT0&& arg0, ArgT... args) {
 
 payload_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.e2t.e2.v1beta1.ControlOutcome.payload)
}
inline std::string* ControlOutcome::mutable_payload() {
  std::string* _s = _internal_mutable_payload();
  // @@protoc_insertion_point(field_mutable:onos.e2t.e2.v1beta1.ControlOutcome.payload)
  return _s;
}
inline const std::string& ControlOutcome::_internal_payload() const {
  return payload_.Get();
}
inline void ControlOutcome::_internal_set_payload(const std::string& value) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ControlOutcome::_internal_mutable_payload() {
  
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ControlOutcome::release_payload() {
  // @@protoc_insertion_point(field_release:onos.e2t.e2.v1beta1.ControlOutcome.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ControlOutcome::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (payload_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.e2t.e2.v1beta1.ControlOutcome.payload)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1beta1
}  // namespace e2
}  // namespace e2t
}  // namespace onos

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_onos_2fe2t_2fe2_2fv1beta1_2fcontrol_2eproto
