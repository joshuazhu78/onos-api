// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: onos/e2t/e2/v1beta1/subscription.proto

#include "onos/e2t/e2/v1beta1/subscription.pb.h"
#include "onos/e2t/e2/v1beta1/subscription.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace onos {
namespace e2t {
namespace e2 {
namespace v1beta1 {

static const char* SubscriptionService_method_names[] = {
  "/onos.e2t.e2.v1beta1.SubscriptionService/Subscribe",
  "/onos.e2t.e2.v1beta1.SubscriptionService/Unsubscribe",
};

std::unique_ptr< SubscriptionService::Stub> SubscriptionService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SubscriptionService::Stub> stub(new SubscriptionService::Stub(channel, options));
  return stub;
}

SubscriptionService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_Subscribe_(SubscriptionService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_Unsubscribe_(SubscriptionService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::ClientReader< ::onos::e2t::e2::v1beta1::SubscribeResponse>* SubscriptionService::Stub::SubscribeRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::SubscribeRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::onos::e2t::e2::v1beta1::SubscribeResponse>::Create(channel_.get(), rpcmethod_Subscribe_, context, request);
}

void SubscriptionService::Stub::async::Subscribe(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::SubscribeRequest* request, ::grpc::ClientReadReactor< ::onos::e2t::e2::v1beta1::SubscribeResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::onos::e2t::e2::v1beta1::SubscribeResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_Subscribe_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::onos::e2t::e2::v1beta1::SubscribeResponse>* SubscriptionService::Stub::AsyncSubscribeRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::onos::e2t::e2::v1beta1::SubscribeResponse>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::onos::e2t::e2::v1beta1::SubscribeResponse>* SubscriptionService::Stub::PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::SubscribeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::onos::e2t::e2::v1beta1::SubscribeResponse>::Create(channel_.get(), cq, rpcmethod_Subscribe_, context, request, false, nullptr);
}

::grpc::Status SubscriptionService::Stub::Unsubscribe(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::UnsubscribeRequest& request, ::onos::e2t::e2::v1beta1::UnsubscribeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::e2t::e2::v1beta1::UnsubscribeRequest, ::onos::e2t::e2::v1beta1::UnsubscribeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_Unsubscribe_, context, request, response);
}

void SubscriptionService::Stub::async::Unsubscribe(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::UnsubscribeRequest* request, ::onos::e2t::e2::v1beta1::UnsubscribeResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::e2t::e2::v1beta1::UnsubscribeRequest, ::onos::e2t::e2::v1beta1::UnsubscribeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Unsubscribe_, context, request, response, std::move(f));
}

void SubscriptionService::Stub::async::Unsubscribe(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::UnsubscribeRequest* request, ::onos::e2t::e2::v1beta1::UnsubscribeResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_Unsubscribe_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::e2t::e2::v1beta1::UnsubscribeResponse>* SubscriptionService::Stub::PrepareAsyncUnsubscribeRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::UnsubscribeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::e2t::e2::v1beta1::UnsubscribeResponse, ::onos::e2t::e2::v1beta1::UnsubscribeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_Unsubscribe_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::e2t::e2::v1beta1::UnsubscribeResponse>* SubscriptionService::Stub::AsyncUnsubscribeRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::UnsubscribeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUnsubscribeRaw(context, request, cq);
  result->StartCall();
  return result;
}

SubscriptionService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SubscriptionService_method_names[0],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< SubscriptionService::Service, ::onos::e2t::e2::v1beta1::SubscribeRequest, ::onos::e2t::e2::v1beta1::SubscribeResponse>(
          [](SubscriptionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::e2t::e2::v1beta1::SubscribeRequest* req,
             ::grpc::ServerWriter<::onos::e2t::e2::v1beta1::SubscribeResponse>* writer) {
               return service->Subscribe(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SubscriptionService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SubscriptionService::Service, ::onos::e2t::e2::v1beta1::UnsubscribeRequest, ::onos::e2t::e2::v1beta1::UnsubscribeResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SubscriptionService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::e2t::e2::v1beta1::UnsubscribeRequest* req,
             ::onos::e2t::e2::v1beta1::UnsubscribeResponse* resp) {
               return service->Unsubscribe(ctx, req, resp);
             }, this)));
}

SubscriptionService::Service::~Service() {
}

::grpc::Status SubscriptionService::Service::Subscribe(::grpc::ServerContext* context, const ::onos::e2t::e2::v1beta1::SubscribeRequest* request, ::grpc::ServerWriter< ::onos::e2t::e2::v1beta1::SubscribeResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SubscriptionService::Service::Unsubscribe(::grpc::ServerContext* context, const ::onos::e2t::e2::v1beta1::UnsubscribeRequest* request, ::onos::e2t::e2::v1beta1::UnsubscribeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


static const char* SubscriptionAdminService_method_names[] = {
  "/onos.e2t.e2.v1beta1.SubscriptionAdminService/GetChannel",
  "/onos.e2t.e2.v1beta1.SubscriptionAdminService/ListChannels",
  "/onos.e2t.e2.v1beta1.SubscriptionAdminService/WatchChannels",
  "/onos.e2t.e2.v1beta1.SubscriptionAdminService/GetSubscription",
  "/onos.e2t.e2.v1beta1.SubscriptionAdminService/ListSubscriptions",
  "/onos.e2t.e2.v1beta1.SubscriptionAdminService/WatchSubscriptions",
};

std::unique_ptr< SubscriptionAdminService::Stub> SubscriptionAdminService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SubscriptionAdminService::Stub> stub(new SubscriptionAdminService::Stub(channel, options));
  return stub;
}

SubscriptionAdminService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetChannel_(SubscriptionAdminService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListChannels_(SubscriptionAdminService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WatchChannels_(SubscriptionAdminService_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_GetSubscription_(SubscriptionAdminService_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListSubscriptions_(SubscriptionAdminService_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_WatchSubscriptions_(SubscriptionAdminService_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status SubscriptionAdminService::Stub::GetChannel(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::GetChannelRequest& request, ::onos::e2t::e2::v1beta1::GetChannelResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::e2t::e2::v1beta1::GetChannelRequest, ::onos::e2t::e2::v1beta1::GetChannelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetChannel_, context, request, response);
}

void SubscriptionAdminService::Stub::async::GetChannel(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::GetChannelRequest* request, ::onos::e2t::e2::v1beta1::GetChannelResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::e2t::e2::v1beta1::GetChannelRequest, ::onos::e2t::e2::v1beta1::GetChannelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetChannel_, context, request, response, std::move(f));
}

void SubscriptionAdminService::Stub::async::GetChannel(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::GetChannelRequest* request, ::onos::e2t::e2::v1beta1::GetChannelResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetChannel_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::e2t::e2::v1beta1::GetChannelResponse>* SubscriptionAdminService::Stub::PrepareAsyncGetChannelRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::GetChannelRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::e2t::e2::v1beta1::GetChannelResponse, ::onos::e2t::e2::v1beta1::GetChannelRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetChannel_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::e2t::e2::v1beta1::GetChannelResponse>* SubscriptionAdminService::Stub::AsyncGetChannelRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::GetChannelRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetChannelRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SubscriptionAdminService::Stub::ListChannels(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::ListChannelsRequest& request, ::onos::e2t::e2::v1beta1::ListChannelsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::e2t::e2::v1beta1::ListChannelsRequest, ::onos::e2t::e2::v1beta1::ListChannelsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListChannels_, context, request, response);
}

void SubscriptionAdminService::Stub::async::ListChannels(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::ListChannelsRequest* request, ::onos::e2t::e2::v1beta1::ListChannelsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::e2t::e2::v1beta1::ListChannelsRequest, ::onos::e2t::e2::v1beta1::ListChannelsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListChannels_, context, request, response, std::move(f));
}

void SubscriptionAdminService::Stub::async::ListChannels(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::ListChannelsRequest* request, ::onos::e2t::e2::v1beta1::ListChannelsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListChannels_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::e2t::e2::v1beta1::ListChannelsResponse>* SubscriptionAdminService::Stub::PrepareAsyncListChannelsRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::ListChannelsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::e2t::e2::v1beta1::ListChannelsResponse, ::onos::e2t::e2::v1beta1::ListChannelsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListChannels_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::e2t::e2::v1beta1::ListChannelsResponse>* SubscriptionAdminService::Stub::AsyncListChannelsRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::ListChannelsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListChannelsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::onos::e2t::e2::v1beta1::WatchChannelsResponse>* SubscriptionAdminService::Stub::WatchChannelsRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::WatchChannelsRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::onos::e2t::e2::v1beta1::WatchChannelsResponse>::Create(channel_.get(), rpcmethod_WatchChannels_, context, request);
}

void SubscriptionAdminService::Stub::async::WatchChannels(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::WatchChannelsRequest* request, ::grpc::ClientReadReactor< ::onos::e2t::e2::v1beta1::WatchChannelsResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::onos::e2t::e2::v1beta1::WatchChannelsResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_WatchChannels_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::onos::e2t::e2::v1beta1::WatchChannelsResponse>* SubscriptionAdminService::Stub::AsyncWatchChannelsRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::WatchChannelsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::onos::e2t::e2::v1beta1::WatchChannelsResponse>::Create(channel_.get(), cq, rpcmethod_WatchChannels_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::onos::e2t::e2::v1beta1::WatchChannelsResponse>* SubscriptionAdminService::Stub::PrepareAsyncWatchChannelsRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::WatchChannelsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::onos::e2t::e2::v1beta1::WatchChannelsResponse>::Create(channel_.get(), cq, rpcmethod_WatchChannels_, context, request, false, nullptr);
}

::grpc::Status SubscriptionAdminService::Stub::GetSubscription(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::GetSubscriptionRequest& request, ::onos::e2t::e2::v1beta1::GetSubscriptionResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::e2t::e2::v1beta1::GetSubscriptionRequest, ::onos::e2t::e2::v1beta1::GetSubscriptionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSubscription_, context, request, response);
}

void SubscriptionAdminService::Stub::async::GetSubscription(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::GetSubscriptionRequest* request, ::onos::e2t::e2::v1beta1::GetSubscriptionResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::e2t::e2::v1beta1::GetSubscriptionRequest, ::onos::e2t::e2::v1beta1::GetSubscriptionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSubscription_, context, request, response, std::move(f));
}

void SubscriptionAdminService::Stub::async::GetSubscription(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::GetSubscriptionRequest* request, ::onos::e2t::e2::v1beta1::GetSubscriptionResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSubscription_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::e2t::e2::v1beta1::GetSubscriptionResponse>* SubscriptionAdminService::Stub::PrepareAsyncGetSubscriptionRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::GetSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::e2t::e2::v1beta1::GetSubscriptionResponse, ::onos::e2t::e2::v1beta1::GetSubscriptionRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSubscription_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::e2t::e2::v1beta1::GetSubscriptionResponse>* SubscriptionAdminService::Stub::AsyncGetSubscriptionRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::GetSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSubscriptionRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SubscriptionAdminService::Stub::ListSubscriptions(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::ListSubscriptionsRequest& request, ::onos::e2t::e2::v1beta1::ListSubscriptionsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::onos::e2t::e2::v1beta1::ListSubscriptionsRequest, ::onos::e2t::e2::v1beta1::ListSubscriptionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListSubscriptions_, context, request, response);
}

void SubscriptionAdminService::Stub::async::ListSubscriptions(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::ListSubscriptionsRequest* request, ::onos::e2t::e2::v1beta1::ListSubscriptionsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::onos::e2t::e2::v1beta1::ListSubscriptionsRequest, ::onos::e2t::e2::v1beta1::ListSubscriptionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListSubscriptions_, context, request, response, std::move(f));
}

void SubscriptionAdminService::Stub::async::ListSubscriptions(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::ListSubscriptionsRequest* request, ::onos::e2t::e2::v1beta1::ListSubscriptionsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListSubscriptions_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::onos::e2t::e2::v1beta1::ListSubscriptionsResponse>* SubscriptionAdminService::Stub::PrepareAsyncListSubscriptionsRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::ListSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::onos::e2t::e2::v1beta1::ListSubscriptionsResponse, ::onos::e2t::e2::v1beta1::ListSubscriptionsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListSubscriptions_, context, request);
}

::grpc::ClientAsyncResponseReader< ::onos::e2t::e2::v1beta1::ListSubscriptionsResponse>* SubscriptionAdminService::Stub::AsyncListSubscriptionsRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::ListSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListSubscriptionsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::onos::e2t::e2::v1beta1::WatchSubscriptionsResponse>* SubscriptionAdminService::Stub::WatchSubscriptionsRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::WatchSubscriptionsRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::onos::e2t::e2::v1beta1::WatchSubscriptionsResponse>::Create(channel_.get(), rpcmethod_WatchSubscriptions_, context, request);
}

void SubscriptionAdminService::Stub::async::WatchSubscriptions(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::WatchSubscriptionsRequest* request, ::grpc::ClientReadReactor< ::onos::e2t::e2::v1beta1::WatchSubscriptionsResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::onos::e2t::e2::v1beta1::WatchSubscriptionsResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_WatchSubscriptions_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::onos::e2t::e2::v1beta1::WatchSubscriptionsResponse>* SubscriptionAdminService::Stub::AsyncWatchSubscriptionsRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::WatchSubscriptionsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::onos::e2t::e2::v1beta1::WatchSubscriptionsResponse>::Create(channel_.get(), cq, rpcmethod_WatchSubscriptions_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::onos::e2t::e2::v1beta1::WatchSubscriptionsResponse>* SubscriptionAdminService::Stub::PrepareAsyncWatchSubscriptionsRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::WatchSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::onos::e2t::e2::v1beta1::WatchSubscriptionsResponse>::Create(channel_.get(), cq, rpcmethod_WatchSubscriptions_, context, request, false, nullptr);
}

SubscriptionAdminService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SubscriptionAdminService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SubscriptionAdminService::Service, ::onos::e2t::e2::v1beta1::GetChannelRequest, ::onos::e2t::e2::v1beta1::GetChannelResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SubscriptionAdminService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::e2t::e2::v1beta1::GetChannelRequest* req,
             ::onos::e2t::e2::v1beta1::GetChannelResponse* resp) {
               return service->GetChannel(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SubscriptionAdminService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SubscriptionAdminService::Service, ::onos::e2t::e2::v1beta1::ListChannelsRequest, ::onos::e2t::e2::v1beta1::ListChannelsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SubscriptionAdminService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::e2t::e2::v1beta1::ListChannelsRequest* req,
             ::onos::e2t::e2::v1beta1::ListChannelsResponse* resp) {
               return service->ListChannels(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SubscriptionAdminService_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< SubscriptionAdminService::Service, ::onos::e2t::e2::v1beta1::WatchChannelsRequest, ::onos::e2t::e2::v1beta1::WatchChannelsResponse>(
          [](SubscriptionAdminService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::e2t::e2::v1beta1::WatchChannelsRequest* req,
             ::grpc::ServerWriter<::onos::e2t::e2::v1beta1::WatchChannelsResponse>* writer) {
               return service->WatchChannels(ctx, req, writer);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SubscriptionAdminService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SubscriptionAdminService::Service, ::onos::e2t::e2::v1beta1::GetSubscriptionRequest, ::onos::e2t::e2::v1beta1::GetSubscriptionResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SubscriptionAdminService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::e2t::e2::v1beta1::GetSubscriptionRequest* req,
             ::onos::e2t::e2::v1beta1::GetSubscriptionResponse* resp) {
               return service->GetSubscription(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SubscriptionAdminService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SubscriptionAdminService::Service, ::onos::e2t::e2::v1beta1::ListSubscriptionsRequest, ::onos::e2t::e2::v1beta1::ListSubscriptionsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SubscriptionAdminService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::e2t::e2::v1beta1::ListSubscriptionsRequest* req,
             ::onos::e2t::e2::v1beta1::ListSubscriptionsResponse* resp) {
               return service->ListSubscriptions(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SubscriptionAdminService_method_names[5],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< SubscriptionAdminService::Service, ::onos::e2t::e2::v1beta1::WatchSubscriptionsRequest, ::onos::e2t::e2::v1beta1::WatchSubscriptionsResponse>(
          [](SubscriptionAdminService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::onos::e2t::e2::v1beta1::WatchSubscriptionsRequest* req,
             ::grpc::ServerWriter<::onos::e2t::e2::v1beta1::WatchSubscriptionsResponse>* writer) {
               return service->WatchSubscriptions(ctx, req, writer);
             }, this)));
}

SubscriptionAdminService::Service::~Service() {
}

::grpc::Status SubscriptionAdminService::Service::GetChannel(::grpc::ServerContext* context, const ::onos::e2t::e2::v1beta1::GetChannelRequest* request, ::onos::e2t::e2::v1beta1::GetChannelResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SubscriptionAdminService::Service::ListChannels(::grpc::ServerContext* context, const ::onos::e2t::e2::v1beta1::ListChannelsRequest* request, ::onos::e2t::e2::v1beta1::ListChannelsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SubscriptionAdminService::Service::WatchChannels(::grpc::ServerContext* context, const ::onos::e2t::e2::v1beta1::WatchChannelsRequest* request, ::grpc::ServerWriter< ::onos::e2t::e2::v1beta1::WatchChannelsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SubscriptionAdminService::Service::GetSubscription(::grpc::ServerContext* context, const ::onos::e2t::e2::v1beta1::GetSubscriptionRequest* request, ::onos::e2t::e2::v1beta1::GetSubscriptionResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SubscriptionAdminService::Service::ListSubscriptions(::grpc::ServerContext* context, const ::onos::e2t::e2::v1beta1::ListSubscriptionsRequest* request, ::onos::e2t::e2::v1beta1::ListSubscriptionsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SubscriptionAdminService::Service::WatchSubscriptions(::grpc::ServerContext* context, const ::onos::e2t::e2::v1beta1::WatchSubscriptionsRequest* request, ::grpc::ServerWriter< ::onos::e2t::e2::v1beta1::WatchSubscriptionsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace onos
}  // namespace e2t
}  // namespace e2
}  // namespace v1beta1

