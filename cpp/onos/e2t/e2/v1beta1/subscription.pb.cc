// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onos/e2t/e2/v1beta1/subscription.proto

#include "onos/e2t/e2/v1beta1/subscription.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace onos {
namespace e2t {
namespace e2 {
namespace v1beta1 {
constexpr SubscribeRequest::SubscribeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transaction_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , headers_(nullptr)
  , subscription_(nullptr)
  , transaction_timeout_(nullptr){}
struct SubscribeRequestDefaultTypeInternal {
  constexpr SubscribeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscribeRequestDefaultTypeInternal() {}
  union {
    SubscribeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscribeRequestDefaultTypeInternal _SubscribeRequest_default_instance_;
constexpr SubscribeResponse::SubscribeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : headers_(nullptr)
  , _oneof_case_{}{}
struct SubscribeResponseDefaultTypeInternal {
  constexpr SubscribeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscribeResponseDefaultTypeInternal() {}
  union {
    SubscribeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscribeResponseDefaultTypeInternal _SubscribeResponse_default_instance_;
constexpr UnsubscribeRequest::UnsubscribeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : transaction_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , headers_(nullptr){}
struct UnsubscribeRequestDefaultTypeInternal {
  constexpr UnsubscribeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UnsubscribeRequestDefaultTypeInternal() {}
  union {
    UnsubscribeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UnsubscribeRequestDefaultTypeInternal _UnsubscribeRequest_default_instance_;
constexpr UnsubscribeResponse::UnsubscribeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : headers_(nullptr){}
struct UnsubscribeResponseDefaultTypeInternal {
  constexpr UnsubscribeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UnsubscribeResponseDefaultTypeInternal() {}
  union {
    UnsubscribeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UnsubscribeResponseDefaultTypeInternal _UnsubscribeResponse_default_instance_;
constexpr SubscriptionSpec::SubscriptionSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : actions_()
  , event_trigger_(nullptr){}
struct SubscriptionSpecDefaultTypeInternal {
  constexpr SubscriptionSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscriptionSpecDefaultTypeInternal() {}
  union {
    SubscriptionSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscriptionSpecDefaultTypeInternal _SubscriptionSpec_default_instance_;
constexpr EventTrigger::EventTrigger(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : payload_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct EventTriggerDefaultTypeInternal {
  constexpr EventTriggerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EventTriggerDefaultTypeInternal() {}
  union {
    EventTrigger _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EventTriggerDefaultTypeInternal _EventTrigger_default_instance_;
constexpr Action::Action(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : payload_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , subsequent_action_(nullptr)
  , id_(0)
  , type_(0)
{}
struct ActionDefaultTypeInternal {
  constexpr ActionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActionDefaultTypeInternal() {}
  union {
    Action _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActionDefaultTypeInternal _Action_default_instance_;
constexpr SubsequentAction::SubsequentAction(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)

  , time_to_wait_(0)
{}
struct SubsequentActionDefaultTypeInternal {
  constexpr SubsequentActionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubsequentActionDefaultTypeInternal() {}
  union {
    SubsequentAction _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubsequentActionDefaultTypeInternal _SubsequentAction_default_instance_;
constexpr Acknowledgement::Acknowledgement(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AcknowledgementDefaultTypeInternal {
  constexpr AcknowledgementDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AcknowledgementDefaultTypeInternal() {}
  union {
    Acknowledgement _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AcknowledgementDefaultTypeInternal _Acknowledgement_default_instance_;
constexpr Indication::Indication(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : header_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , payload_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct IndicationDefaultTypeInternal {
  constexpr IndicationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IndicationDefaultTypeInternal() {}
  union {
    Indication _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IndicationDefaultTypeInternal _Indication_default_instance_;
constexpr GetChannelRequest::GetChannelRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetChannelRequestDefaultTypeInternal {
  constexpr GetChannelRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetChannelRequestDefaultTypeInternal() {}
  union {
    GetChannelRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetChannelRequestDefaultTypeInternal _GetChannelRequest_default_instance_;
constexpr GetChannelResponse::GetChannelResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel_(nullptr){}
struct GetChannelResponseDefaultTypeInternal {
  constexpr GetChannelResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetChannelResponseDefaultTypeInternal() {}
  union {
    GetChannelResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetChannelResponseDefaultTypeInternal _GetChannelResponse_default_instance_;
constexpr ListChannelsRequest::ListChannelsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ListChannelsRequestDefaultTypeInternal {
  constexpr ListChannelsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListChannelsRequestDefaultTypeInternal() {}
  union {
    ListChannelsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListChannelsRequestDefaultTypeInternal _ListChannelsRequest_default_instance_;
constexpr ListChannelsResponse::ListChannelsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channels_(){}
struct ListChannelsResponseDefaultTypeInternal {
  constexpr ListChannelsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListChannelsResponseDefaultTypeInternal() {}
  union {
    ListChannelsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListChannelsResponseDefaultTypeInternal _ListChannelsResponse_default_instance_;
constexpr WatchChannelsRequest::WatchChannelsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : no_replay_(false){}
struct WatchChannelsRequestDefaultTypeInternal {
  constexpr WatchChannelsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WatchChannelsRequestDefaultTypeInternal() {}
  union {
    WatchChannelsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WatchChannelsRequestDefaultTypeInternal _WatchChannelsRequest_default_instance_;
constexpr WatchChannelsResponse::WatchChannelsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_(nullptr){}
struct WatchChannelsResponseDefaultTypeInternal {
  constexpr WatchChannelsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WatchChannelsResponseDefaultTypeInternal() {}
  union {
    WatchChannelsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WatchChannelsResponseDefaultTypeInternal _WatchChannelsResponse_default_instance_;
constexpr ChannelEvent::ChannelEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channel_(nullptr)
  , type_(0)
{}
struct ChannelEventDefaultTypeInternal {
  constexpr ChannelEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChannelEventDefaultTypeInternal() {}
  union {
    ChannelEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChannelEventDefaultTypeInternal _ChannelEvent_default_instance_;
constexpr GetSubscriptionRequest::GetSubscriptionRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : subscription_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetSubscriptionRequestDefaultTypeInternal {
  constexpr GetSubscriptionRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetSubscriptionRequestDefaultTypeInternal() {}
  union {
    GetSubscriptionRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetSubscriptionRequestDefaultTypeInternal _GetSubscriptionRequest_default_instance_;
constexpr GetSubscriptionResponse::GetSubscriptionResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : subscription_(nullptr){}
struct GetSubscriptionResponseDefaultTypeInternal {
  constexpr GetSubscriptionResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetSubscriptionResponseDefaultTypeInternal() {}
  union {
    GetSubscriptionResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetSubscriptionResponseDefaultTypeInternal _GetSubscriptionResponse_default_instance_;
constexpr ListSubscriptionsRequest::ListSubscriptionsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ListSubscriptionsRequestDefaultTypeInternal {
  constexpr ListSubscriptionsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListSubscriptionsRequestDefaultTypeInternal() {}
  union {
    ListSubscriptionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListSubscriptionsRequestDefaultTypeInternal _ListSubscriptionsRequest_default_instance_;
constexpr ListSubscriptionsResponse::ListSubscriptionsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : subscriptions_(){}
struct ListSubscriptionsResponseDefaultTypeInternal {
  constexpr ListSubscriptionsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListSubscriptionsResponseDefaultTypeInternal() {}
  union {
    ListSubscriptionsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListSubscriptionsResponseDefaultTypeInternal _ListSubscriptionsResponse_default_instance_;
constexpr WatchSubscriptionsRequest::WatchSubscriptionsRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : no_replay_(false){}
struct WatchSubscriptionsRequestDefaultTypeInternal {
  constexpr WatchSubscriptionsRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WatchSubscriptionsRequestDefaultTypeInternal() {}
  union {
    WatchSubscriptionsRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WatchSubscriptionsRequestDefaultTypeInternal _WatchSubscriptionsRequest_default_instance_;
constexpr WatchSubscriptionsResponse::WatchSubscriptionsResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_(nullptr){}
struct WatchSubscriptionsResponseDefaultTypeInternal {
  constexpr WatchSubscriptionsResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~WatchSubscriptionsResponseDefaultTypeInternal() {}
  union {
    WatchSubscriptionsResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT WatchSubscriptionsResponseDefaultTypeInternal _WatchSubscriptionsResponse_default_instance_;
constexpr SubscriptionEvent::SubscriptionEvent(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : subscription_(nullptr)
  , type_(0)
{}
struct SubscriptionEventDefaultTypeInternal {
  constexpr SubscriptionEventDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscriptionEventDefaultTypeInternal() {}
  union {
    SubscriptionEvent _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscriptionEventDefaultTypeInternal _SubscriptionEvent_default_instance_;
constexpr ChannelMeta::ChannelMeta(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : finalizers_()
  , app_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_instance_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , e2_node_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , transaction_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , subscription_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , service_model_(nullptr)
  , revision_(uint64_t{0u})
  , encoding_(0)
{}
struct ChannelMetaDefaultTypeInternal {
  constexpr ChannelMetaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChannelMetaDefaultTypeInternal() {}
  union {
    ChannelMeta _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChannelMetaDefaultTypeInternal _ChannelMeta_default_instance_;
constexpr Channel::Channel(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , meta_(nullptr)
  , spec_(nullptr)
  , status_(nullptr){}
struct ChannelDefaultTypeInternal {
  constexpr ChannelDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChannelDefaultTypeInternal() {}
  union {
    Channel _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChannelDefaultTypeInternal _Channel_default_instance_;
constexpr ChannelSpec::ChannelSpec(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : subscription_(nullptr)
  , transaction_timeout_(nullptr){}
struct ChannelSpecDefaultTypeInternal {
  constexpr ChannelSpecDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChannelSpecDefaultTypeInternal() {}
  union {
    ChannelSpec _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChannelSpecDefaultTypeInternal _ChannelSpec_default_instance_;
constexpr ChannelStatus::ChannelStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : master_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(nullptr)
  , timestamp_(nullptr)
  , phase_(0)

  , state_(0)

  , term_(uint64_t{0u}){}
struct ChannelStatusDefaultTypeInternal {
  constexpr ChannelStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChannelStatusDefaultTypeInternal() {}
  union {
    ChannelStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChannelStatusDefaultTypeInternal _ChannelStatus_default_instance_;
constexpr SubscriptionMeta::SubscriptionMeta(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : finalizers_()
  , e2_node_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , service_model_(nullptr)
  , revision_(uint64_t{0u})
  , encoding_(0)
{}
struct SubscriptionMetaDefaultTypeInternal {
  constexpr SubscriptionMetaDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscriptionMetaDefaultTypeInternal() {}
  union {
    SubscriptionMeta _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscriptionMetaDefaultTypeInternal _SubscriptionMeta_default_instance_;
constexpr Subscription::Subscription(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , meta_(nullptr)
  , spec_(nullptr)
  , status_(nullptr){}
struct SubscriptionDefaultTypeInternal {
  constexpr SubscriptionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscriptionDefaultTypeInternal() {}
  union {
    Subscription _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscriptionDefaultTypeInternal _Subscription_default_instance_;
constexpr SubscriptionStatus::SubscriptionStatus(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : channels_()
  , master_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(nullptr)
  , phase_(0)

  , state_(0)

  , term_(uint64_t{0u}){}
struct SubscriptionStatusDefaultTypeInternal {
  constexpr SubscriptionStatusDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubscriptionStatusDefaultTypeInternal() {}
  union {
    SubscriptionStatus _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubscriptionStatusDefaultTypeInternal _SubscriptionStatus_default_instance_;
}  // namespace v1beta1
}  // namespace e2
}  // namespace e2t
}  // namespace onos
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto[31];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto = nullptr;

const uint32_t TableStruct_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::SubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::SubscribeRequest, headers_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::SubscribeRequest, transaction_id_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::SubscribeRequest, subscription_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::SubscribeRequest, transaction_timeout_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::SubscribeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::SubscribeResponse, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::SubscribeResponse, headers_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::SubscribeResponse, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::UnsubscribeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::UnsubscribeRequest, headers_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::UnsubscribeRequest, transaction_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::UnsubscribeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::UnsubscribeResponse, headers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::SubscriptionSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::SubscriptionSpec, event_trigger_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::SubscriptionSpec, actions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::EventTrigger, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::EventTrigger, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::Action, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::Action, id_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::Action, type_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::Action, payload_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::Action, subsequent_action_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::SubsequentAction, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::SubsequentAction, type_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::SubsequentAction, time_to_wait_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::Acknowledgement, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::Acknowledgement, channel_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::Indication, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::Indication, header_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::Indication, payload_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::GetChannelRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::GetChannelRequest, channel_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::GetChannelResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::GetChannelResponse, channel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::ListChannelsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::ListChannelsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::ListChannelsResponse, channels_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::WatchChannelsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::WatchChannelsRequest, no_replay_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::WatchChannelsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::WatchChannelsResponse, event_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::ChannelEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::ChannelEvent, type_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::ChannelEvent, channel_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::GetSubscriptionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::GetSubscriptionRequest, subscription_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::GetSubscriptionResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::GetSubscriptionResponse, subscription_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::ListSubscriptionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::ListSubscriptionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::ListSubscriptionsResponse, subscriptions_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::WatchSubscriptionsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::WatchSubscriptionsRequest, no_replay_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::WatchSubscriptionsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::WatchSubscriptionsResponse, event_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::SubscriptionEvent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::SubscriptionEvent, type_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::SubscriptionEvent, subscription_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::ChannelMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::ChannelMeta, app_id_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::ChannelMeta, app_instance_id_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::ChannelMeta, e2_node_id_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::ChannelMeta, transaction_id_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::ChannelMeta, subscription_id_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::ChannelMeta, service_model_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::ChannelMeta, encoding_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::ChannelMeta, revision_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::ChannelMeta, finalizers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::Channel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::Channel, id_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::Channel, meta_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::Channel, spec_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::Channel, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::ChannelSpec, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::ChannelSpec, subscription_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::ChannelSpec, transaction_timeout_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::ChannelStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::ChannelStatus, phase_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::ChannelStatus, state_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::ChannelStatus, error_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::ChannelStatus, timestamp_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::ChannelStatus, term_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::ChannelStatus, master_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::SubscriptionMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::SubscriptionMeta, e2_node_id_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::SubscriptionMeta, service_model_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::SubscriptionMeta, encoding_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::SubscriptionMeta, revision_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::SubscriptionMeta, finalizers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::Subscription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::Subscription, id_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::Subscription, meta_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::Subscription, spec_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::Subscription, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::SubscriptionStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::SubscriptionStatus, phase_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::SubscriptionStatus, state_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::SubscriptionStatus, error_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::SubscriptionStatus, channels_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::SubscriptionStatus, term_),
  PROTOBUF_FIELD_OFFSET(::onos::e2t::e2::v1beta1::SubscriptionStatus, master_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::onos::e2t::e2::v1beta1::SubscribeRequest)},
  { 10, -1, -1, sizeof(::onos::e2t::e2::v1beta1::SubscribeResponse)},
  { 20, -1, -1, sizeof(::onos::e2t::e2::v1beta1::UnsubscribeRequest)},
  { 28, -1, -1, sizeof(::onos::e2t::e2::v1beta1::UnsubscribeResponse)},
  { 35, -1, -1, sizeof(::onos::e2t::e2::v1beta1::SubscriptionSpec)},
  { 43, -1, -1, sizeof(::onos::e2t::e2::v1beta1::EventTrigger)},
  { 50, -1, -1, sizeof(::onos::e2t::e2::v1beta1::Action)},
  { 60, -1, -1, sizeof(::onos::e2t::e2::v1beta1::SubsequentAction)},
  { 68, -1, -1, sizeof(::onos::e2t::e2::v1beta1::Acknowledgement)},
  { 75, -1, -1, sizeof(::onos::e2t::e2::v1beta1::Indication)},
  { 83, -1, -1, sizeof(::onos::e2t::e2::v1beta1::GetChannelRequest)},
  { 90, -1, -1, sizeof(::onos::e2t::e2::v1beta1::GetChannelResponse)},
  { 97, -1, -1, sizeof(::onos::e2t::e2::v1beta1::ListChannelsRequest)},
  { 103, -1, -1, sizeof(::onos::e2t::e2::v1beta1::ListChannelsResponse)},
  { 110, -1, -1, sizeof(::onos::e2t::e2::v1beta1::WatchChannelsRequest)},
  { 117, -1, -1, sizeof(::onos::e2t::e2::v1beta1::WatchChannelsResponse)},
  { 124, -1, -1, sizeof(::onos::e2t::e2::v1beta1::ChannelEvent)},
  { 132, -1, -1, sizeof(::onos::e2t::e2::v1beta1::GetSubscriptionRequest)},
  { 139, -1, -1, sizeof(::onos::e2t::e2::v1beta1::GetSubscriptionResponse)},
  { 146, -1, -1, sizeof(::onos::e2t::e2::v1beta1::ListSubscriptionsRequest)},
  { 152, -1, -1, sizeof(::onos::e2t::e2::v1beta1::ListSubscriptionsResponse)},
  { 159, -1, -1, sizeof(::onos::e2t::e2::v1beta1::WatchSubscriptionsRequest)},
  { 166, -1, -1, sizeof(::onos::e2t::e2::v1beta1::WatchSubscriptionsResponse)},
  { 173, -1, -1, sizeof(::onos::e2t::e2::v1beta1::SubscriptionEvent)},
  { 181, -1, -1, sizeof(::onos::e2t::e2::v1beta1::ChannelMeta)},
  { 196, -1, -1, sizeof(::onos::e2t::e2::v1beta1::Channel)},
  { 206, -1, -1, sizeof(::onos::e2t::e2::v1beta1::ChannelSpec)},
  { 214, -1, -1, sizeof(::onos::e2t::e2::v1beta1::ChannelStatus)},
  { 226, -1, -1, sizeof(::onos::e2t::e2::v1beta1::SubscriptionMeta)},
  { 237, -1, -1, sizeof(::onos::e2t::e2::v1beta1::Subscription)},
  { 247, -1, -1, sizeof(::onos::e2t::e2::v1beta1::SubscriptionStatus)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::e2t::e2::v1beta1::_SubscribeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::e2t::e2::v1beta1::_SubscribeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::e2t::e2::v1beta1::_UnsubscribeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::e2t::e2::v1beta1::_UnsubscribeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::e2t::e2::v1beta1::_SubscriptionSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::e2t::e2::v1beta1::_EventTrigger_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::e2t::e2::v1beta1::_Action_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::e2t::e2::v1beta1::_SubsequentAction_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::e2t::e2::v1beta1::_Acknowledgement_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::e2t::e2::v1beta1::_Indication_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::e2t::e2::v1beta1::_GetChannelRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::e2t::e2::v1beta1::_GetChannelResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::e2t::e2::v1beta1::_ListChannelsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::e2t::e2::v1beta1::_ListChannelsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::e2t::e2::v1beta1::_WatchChannelsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::e2t::e2::v1beta1::_WatchChannelsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::e2t::e2::v1beta1::_ChannelEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::e2t::e2::v1beta1::_GetSubscriptionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::e2t::e2::v1beta1::_GetSubscriptionResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::e2t::e2::v1beta1::_ListSubscriptionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::e2t::e2::v1beta1::_ListSubscriptionsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::e2t::e2::v1beta1::_WatchSubscriptionsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::e2t::e2::v1beta1::_WatchSubscriptionsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::e2t::e2::v1beta1::_SubscriptionEvent_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::e2t::e2::v1beta1::_ChannelMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::e2t::e2::v1beta1::_Channel_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::e2t::e2::v1beta1::_ChannelSpec_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::e2t::e2::v1beta1::_ChannelStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::e2t::e2::v1beta1::_SubscriptionMeta_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::e2t::e2::v1beta1::_Subscription_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::onos::e2t::e2::v1beta1::_SubscriptionStatus_default_instance_),
};

const char descriptor_table_protodef_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n&onos/e2t/e2/v1beta1/subscription.proto"
  "\022\023onos.e2t.e2.v1beta1\032\024gogoproto/gogo.pr"
  "oto\032\034onos/e2t/e2/v1beta1/e2.proto\032\037googl"
  "e/protobuf/timestamp.proto\032\036google/proto"
  "buf/duration.proto\"\213\002\n\020SubscribeRequest\022"
  ":\n\007headers\030\001 \001(\0132#.onos.e2t.e2.v1beta1.R"
  "equestHeadersB\004\310\336\037\000\022:\n\016transaction_id\030\002 "
  "\001(\tB\"\342\336\037\rTransactionID\372\336\037\rTransactionID\022"
  "A\n\014subscription\030\003 \001(\0132%.onos.e2t.e2.v1be"
  "ta1.SubscriptionSpecB\004\310\336\037\000\022<\n\023transactio"
  "n_timeout\030\004 \001(\0132\031.google.protobuf.Durati"
  "onB\004\230\337\037\001\"\307\001\n\021SubscribeResponse\022;\n\007header"
  "s\030\001 \001(\0132$.onos.e2t.e2.v1beta1.ResponseHe"
  "adersB\004\310\336\037\000\0223\n\003ack\030\002 \001(\0132$.onos.e2t.e2.v"
  "1beta1.AcknowledgementH\000\0225\n\nindication\030\003"
  " \001(\0132\037.onos.e2t.e2.v1beta1.IndicationH\000B"
  "\t\n\007message\"\214\001\n\022UnsubscribeRequest\022:\n\007hea"
  "ders\030\001 \001(\0132#.onos.e2t.e2.v1beta1.Request"
  "HeadersB\004\310\336\037\000\022:\n\016transaction_id\030\002 \001(\tB\"\342"
  "\336\037\rTransactionID\372\336\037\rTransactionID\"R\n\023Uns"
  "ubscribeResponse\022;\n\007headers\030\001 \001(\0132$.onos"
  ".e2t.e2.v1beta1.ResponseHeadersB\004\310\336\037\000\"\206\001"
  "\n\020SubscriptionSpec\022>\n\revent_trigger\030\001 \001("
  "\0132!.onos.e2t.e2.v1beta1.EventTriggerB\004\310\336"
  "\037\000\0222\n\007actions\030\002 \003(\0132\033.onos.e2t.e2.v1beta"
  "1.ActionB\004\310\336\037\000\"\037\n\014EventTrigger\022\017\n\007payloa"
  "d\030\001 \001(\014\"\236\001\n\006Action\022\022\n\002id\030\001 \001(\005B\006\342\336\037\002ID\022-"
  "\n\004type\030\002 \001(\0162\037.onos.e2t.e2.v1beta1.Actio"
  "nType\022\017\n\007payload\030\003 \001(\014\022@\n\021subsequent_act"
  "ion\030\004 \001(\0132%.onos.e2t.e2.v1beta1.Subseque"
  "ntAction\"\202\001\n\020SubsequentAction\0227\n\004type\030\001 "
  "\001(\0162).onos.e2t.e2.v1beta1.SubsequentActi"
  "onType\0225\n\014time_to_wait\030\002 \001(\0162\037.onos.e2t."
  "e2.v1beta1.TimeToWait\"A\n\017Acknowledgement"
  "\022.\n\nchannel_id\030\001 \001(\tB\032\342\336\037\tChannelID\372\336\037\tC"
  "hannelID\"-\n\nIndication\022\016\n\006header\030\001 \001(\014\022\017"
  "\n\007payload\030\002 \001(\014\"C\n\021GetChannelRequest\022.\n\n"
  "channel_id\030\001 \001(\tB\032\342\336\037\tChannelID\372\336\037\tChann"
  "elID\"I\n\022GetChannelResponse\0223\n\007channel\030\001 "
  "\001(\0132\034.onos.e2t.e2.v1beta1.ChannelB\004\310\336\037\000\""
  "\025\n\023ListChannelsRequest\"L\n\024ListChannelsRe"
  "sponse\0224\n\010channels\030\001 \003(\0132\034.onos.e2t.e2.v"
  "1beta1.ChannelB\004\310\336\037\000\")\n\024WatchChannelsReq"
  "uest\022\021\n\tno_replay\030\001 \001(\010\"O\n\025WatchChannels"
  "Response\0226\n\005event\030\001 \001(\0132!.onos.e2t.e2.v1"
  "beta1.ChannelEventB\004\310\336\037\000\"x\n\014ChannelEvent"
  "\0223\n\004type\030\001 \001(\0162%.onos.e2t.e2.v1beta1.Cha"
  "nnelEventType\0223\n\007channel\030\002 \001(\0132\034.onos.e2"
  "t.e2.v1beta1.ChannelB\004\310\336\037\000\"W\n\026GetSubscri"
  "ptionRequest\022=\n\017subscription_id\030\001 \001(\tB$\342"
  "\336\037\016SubscriptionID\372\336\037\016SubscriptionID\"X\n\027G"
  "etSubscriptionResponse\022=\n\014subscription\030\001"
  " \001(\0132!.onos.e2t.e2.v1beta1.SubscriptionB"
  "\004\310\336\037\000\"\032\n\030ListSubscriptionsRequest\"[\n\031Lis"
  "tSubscriptionsResponse\022>\n\rsubscriptions\030"
  "\001 \003(\0132!.onos.e2t.e2.v1beta1.Subscription"
  "B\004\310\336\037\000\".\n\031WatchSubscriptionsRequest\022\021\n\tn"
  "o_replay\030\001 \001(\010\"Y\n\032WatchSubscriptionsResp"
  "onse\022;\n\005event\030\001 \001(\0132&.onos.e2t.e2.v1beta"
  "1.SubscriptionEventB\004\310\336\037\000\"\214\001\n\021Subscripti"
  "onEvent\0228\n\004type\030\001 \001(\0162*.onos.e2t.e2.v1be"
  "ta1.SubscriptionEventType\022=\n\014subscriptio"
  "n\030\002 \001(\0132!.onos.e2t.e2.v1beta1.Subscripti"
  "onB\004\310\336\037\000\"\274\003\n\013ChannelMeta\022\"\n\006app_id\030\001 \001(\t"
  "B\022\342\336\037\005AppID\372\336\037\005AppID\022;\n\017app_instance_id\030"
  "\002 \001(\tB\"\342\336\037\rAppInstanceID\372\336\037\rAppInstanceI"
  "D\022,\n\ne2_node_id\030\003 \001(\tB\030\372\336\037\010E2NodeID\342\336\037\010E"
  "2NodeID\022:\n\016transaction_id\030\004 \001(\tB\"\342\336\037\rTra"
  "nsactionID\372\336\037\rTransactionID\022=\n\017subscript"
  "ion_id\030\005 \001(\tB$\342\336\037\016SubscriptionID\372\336\037\016Subs"
  "criptionID\022>\n\rservice_model\030\006 \001(\0132!.onos"
  ".e2t.e2.v1beta1.ServiceModelB\004\310\336\037\000\022/\n\010en"
  "coding\030\007 \001(\0162\035.onos.e2t.e2.v1beta1.Encod"
  "ing\022\036\n\010revision\030\010 \001(\004B\014\372\336\037\010Revision\022\022\n\nf"
  "inalizers\030\t \003(\t\"\324\001\n\007Channel\022\037\n\002id\030\001 \001(\tB"
  "\023\342\336\037\002ID\372\336\037\tChannelID\0228\n\004meta\030\002 \001(\0132 .ono"
  "s.e2t.e2.v1beta1.ChannelMetaB\010\310\336\037\000\320\336\037\001\0224"
  "\n\004spec\030\003 \001(\0132 .onos.e2t.e2.v1beta1.Chann"
  "elSpecB\004\310\336\037\000\0228\n\006status\030\004 \001(\0132\".onos.e2t."
  "e2.v1beta1.ChannelStatusB\004\310\336\037\000\"\222\001\n\013Chann"
  "elSpec\022E\n\014subscription\030\001 \001(\0132%.onos.e2t."
  "e2.v1beta1.SubscriptionSpecB\010\310\336\037\000\320\336\037\001\022<\n"
  "\023transaction_timeout\030\002 \001(\0132\031.google.prot"
  "obuf.DurationB\004\230\337\037\001\"\213\002\n\rChannelStatus\0220\n"
  "\005phase\030\001 \001(\0162!.onos.e2t.e2.v1beta1.Chann"
  "elPhase\0220\n\005state\030\002 \001(\0162!.onos.e2t.e2.v1b"
  "eta1.ChannelState\022)\n\005error\030\003 \001(\0132\032.onos."
  "e2t.e2.v1beta1.Error\0223\n\ttimestamp\030\004 \001(\0132"
  "\032.google.protobuf.TimestampB\004\220\337\037\001\022\030\n\004ter"
  "m\030\005 \001(\004B\n\372\336\037\006TermID\022\034\n\006master\030\006 \001(\tB\014\372\336\037"
  "\010MasterID\"\345\001\n\020SubscriptionMeta\022,\n\ne2_nod"
  "e_id\030\001 \001(\tB\030\372\336\037\010E2NodeID\342\336\037\010E2NodeID\022>\n\r"
  "service_model\030\002 \001(\0132!.onos.e2t.e2.v1beta"
  "1.ServiceModelB\004\310\336\037\000\022/\n\010encoding\030\003 \001(\0162\035"
  ".onos.e2t.e2.v1beta1.Encoding\022\036\n\010revisio"
  "n\030\004 \001(\004B\014\372\336\037\010Revision\022\022\n\nfinalizers\030\005 \003("
  "\t\"\355\001\n\014Subscription\022$\n\002id\030\001 \001(\tB\030\342\336\037\002ID\372\336"
  "\037\016SubscriptionID\022=\n\004meta\030\002 \001(\0132%.onos.e2"
  "t.e2.v1beta1.SubscriptionMetaB\010\310\336\037\000\320\336\037\001\022"
  "9\n\004spec\030\003 \001(\0132%.onos.e2t.e2.v1beta1.Subs"
  "criptionSpecB\004\310\336\037\000\022=\n\006status\030\004 \001(\0132\'.ono"
  "s.e2t.e2.v1beta1.SubscriptionStatusB\004\310\336\037"
  "\000\"\206\002\n\022SubscriptionStatus\0225\n\005phase\030\001 \001(\0162"
  "&.onos.e2t.e2.v1beta1.SubscriptionPhase\022"
  "5\n\005state\030\002 \001(\0162&.onos.e2t.e2.v1beta1.Sub"
  "scriptionState\022)\n\005error\030\003 \001(\0132\032.onos.e2t"
  ".e2.v1beta1.Error\022\037\n\010channels\030\004 \003(\tB\r\372\336\037"
  "\tChannelID\022\030\n\004term\030\005 \001(\004B\n\372\336\037\006TermID\022\034\n\006"
  "master\030\006 \001(\tB\014\372\336\037\010MasterID*T\n\nActionType"
  "\022\026\n\022ACTION_TYPE_REPORT\020\000\022\026\n\022ACTION_TYPE_"
  "INSERT\020\001\022\026\n\022ACTION_TYPE_POLICY\020\002*\\\n\024Subs"
  "equentActionType\022#\n\037SUBSEQUENT_ACTION_TY"
  "PE_CONTINUE\020\000\022\037\n\033SUBSEQUENT_ACTION_TYPE_"
  "WAIT\020\001*\262\003\n\nTimeToWait\022\025\n\021TIME_TO_WAIT_ZE"
  "RO\020\000\022\025\n\021TIME_TO_WAIT_W1MS\020\001\022\025\n\021TIME_TO_W"
  "AIT_W2MS\020\002\022\025\n\021TIME_TO_WAIT_W5MS\020\003\022\026\n\022TIM"
  "E_TO_WAIT_W10MS\020\004\022\026\n\022TIME_TO_WAIT_W20MS\020"
  "\005\022\026\n\022TIME_TO_WAIT_W30MS\020\006\022\026\n\022TIME_TO_WAI"
  "T_W40MS\020\007\022\026\n\022TIME_TO_WAIT_W50MS\020\010\022\027\n\023TIM"
  "E_TO_WAIT_W100MS\020\t\022\027\n\023TIME_TO_WAIT_W200M"
  "S\020\n\022\027\n\023TIME_TO_WAIT_W500MS\020\013\022\024\n\020TIME_TO_"
  "WAIT_W1S\020\014\022\024\n\020TIME_TO_WAIT_W2S\020\r\022\024\n\020TIME"
  "_TO_WAIT_W5S\020\016\022\025\n\021TIME_TO_WAIT_W10S\020\017\022\025\n"
  "\021TIME_TO_WAIT_W20S\020\020\022\025\n\021TIME_TO_WAIT_W60"
  "S\020\021*\202\001\n\020ChannelEventType\022\031\n\025CHANNEL_EVEN"
  "T_UNKNOWN\020\000\022\023\n\017CHANNEL_CREATED\020\001\022\023\n\017CHAN"
  "NEL_UPDATED\020\002\022\023\n\017CHANNEL_DELETED\020\003\022\024\n\020CH"
  "ANNEL_REPLAYED\020\004*\240\001\n\025SubscriptionEventTy"
  "pe\022\036\n\032SUBSCRIPTION_EVENT_UNKNOWN\020\000\022\030\n\024SU"
  "BSCRIPTION_CREATED\020\001\022\030\n\024SUBSCRIPTION_UPD"
  "ATED\020\002\022\030\n\024SUBSCRIPTION_DELETED\020\003\022\031\n\025SUBS"
  "CRIPTION_REPLAYED\020\004*4\n\014ChannelPhase\022\022\n\016C"
  "HANNEL_CLOSED\020\000\022\020\n\014CHANNEL_OPEN\020\001*M\n\014Cha"
  "nnelState\022\023\n\017CHANNEL_PENDING\020\000\022\024\n\020CHANNE"
  "L_COMPLETE\020\001\022\022\n\016CHANNEL_FAILED\020\002*C\n\021Subs"
  "criptionPhase\022\027\n\023SUBSCRIPTION_CLOSED\020\000\022\025"
  "\n\021SUBSCRIPTION_OPEN\020\001*a\n\021SubscriptionSta"
  "te\022\030\n\024SUBSCRIPTION_PENDING\020\000\022\031\n\025SUBSCRIP"
  "TION_COMPLETE\020\001\022\027\n\023SUBSCRIPTION_FAILED\020\002"
  "2\325\001\n\023SubscriptionService\022\\\n\tSubscribe\022%."
  "onos.e2t.e2.v1beta1.SubscribeRequest\032&.o"
  "nos.e2t.e2.v1beta1.SubscribeResponse0\001\022`"
  "\n\013Unsubscribe\022\'.onos.e2t.e2.v1beta1.Unsu"
  "bscribeRequest\032(.onos.e2t.e2.v1beta1.Uns"
  "ubscribeResponse2\243\005\n\030SubscriptionAdminSe"
  "rvice\022]\n\nGetChannel\022&.onos.e2t.e2.v1beta"
  "1.GetChannelRequest\032\'.onos.e2t.e2.v1beta"
  "1.GetChannelResponse\022c\n\014ListChannels\022(.o"
  "nos.e2t.e2.v1beta1.ListChannelsRequest\032)"
  ".onos.e2t.e2.v1beta1.ListChannelsRespons"
  "e\022h\n\rWatchChannels\022).onos.e2t.e2.v1beta1"
  ".WatchChannelsRequest\032*.onos.e2t.e2.v1be"
  "ta1.WatchChannelsResponse0\001\022l\n\017GetSubscr"
  "iption\022+.onos.e2t.e2.v1beta1.GetSubscrip"
  "tionRequest\032,.onos.e2t.e2.v1beta1.GetSub"
  "scriptionResponse\022r\n\021ListSubscriptions\022-"
  ".onos.e2t.e2.v1beta1.ListSubscriptionsRe"
  "quest\032..onos.e2t.e2.v1beta1.ListSubscrip"
  "tionsResponse\022w\n\022WatchSubscriptions\022..on"
  "os.e2t.e2.v1beta1.WatchSubscriptionsRequ"
  "est\032/.onos.e2t.e2.v1beta1.WatchSubscript"
  "ionsResponse0\001B\004\300\343\036\001b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_deps[4] = {
  &::descriptor_table_gogoproto_2fgogo_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fe2_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto = {
  false, false, 6468, descriptor_table_protodef_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto, "onos/e2t/e2/v1beta1/subscription.proto", 
  &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_once, descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_deps, 4, 31,
  schemas, file_default_instances, TableStruct_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto::offsets,
  file_level_metadata_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto, file_level_enum_descriptors_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto, file_level_service_descriptors_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_getter() {
  return &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto(&descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto);
namespace onos {
namespace e2t {
namespace e2 {
namespace v1beta1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto);
  return file_level_enum_descriptors_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto[0];
}
bool ActionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SubsequentActionType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto);
  return file_level_enum_descriptors_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto[1];
}
bool SubsequentActionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TimeToWait_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto);
  return file_level_enum_descriptors_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto[2];
}
bool TimeToWait_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChannelEventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto);
  return file_level_enum_descriptors_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto[3];
}
bool ChannelEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SubscriptionEventType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto);
  return file_level_enum_descriptors_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto[4];
}
bool SubscriptionEventType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChannelPhase_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto);
  return file_level_enum_descriptors_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto[5];
}
bool ChannelPhase_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ChannelState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto);
  return file_level_enum_descriptors_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto[6];
}
bool ChannelState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SubscriptionPhase_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto);
  return file_level_enum_descriptors_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto[7];
}
bool SubscriptionPhase_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SubscriptionState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto);
  return file_level_enum_descriptors_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto[8];
}
bool SubscriptionState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class SubscribeRequest::_Internal {
 public:
  static const ::onos::e2t::e2::v1beta1::RequestHeaders& headers(const SubscribeRequest* msg);
  static const ::onos::e2t::e2::v1beta1::SubscriptionSpec& subscription(const SubscribeRequest* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& transaction_timeout(const SubscribeRequest* msg);
};

const ::onos::e2t::e2::v1beta1::RequestHeaders&
SubscribeRequest::_Internal::headers(const SubscribeRequest* msg) {
  return *msg->headers_;
}
const ::onos::e2t::e2::v1beta1::SubscriptionSpec&
SubscribeRequest::_Internal::subscription(const SubscribeRequest* msg) {
  return *msg->subscription_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
SubscribeRequest::_Internal::transaction_timeout(const SubscribeRequest* msg) {
  return *msg->transaction_timeout_;
}
void SubscribeRequest::clear_headers() {
  if (GetArenaForAllocation() == nullptr && headers_ != nullptr) {
    delete headers_;
  }
  headers_ = nullptr;
}
void SubscribeRequest::clear_transaction_timeout() {
  if (GetArenaForAllocation() == nullptr && transaction_timeout_ != nullptr) {
    delete transaction_timeout_;
  }
  transaction_timeout_ = nullptr;
}
SubscribeRequest::SubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.e2t.e2.v1beta1.SubscribeRequest)
}
SubscribeRequest::SubscribeRequest(const SubscribeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    transaction_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_transaction_id().empty()) {
    transaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_transaction_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_headers()) {
    headers_ = new ::onos::e2t::e2::v1beta1::RequestHeaders(*from.headers_);
  } else {
    headers_ = nullptr;
  }
  if (from._internal_has_subscription()) {
    subscription_ = new ::onos::e2t::e2::v1beta1::SubscriptionSpec(*from.subscription_);
  } else {
    subscription_ = nullptr;
  }
  if (from._internal_has_transaction_timeout()) {
    transaction_timeout_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.transaction_timeout_);
  } else {
    transaction_timeout_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:onos.e2t.e2.v1beta1.SubscribeRequest)
}

inline void SubscribeRequest::SharedCtor() {
transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  transaction_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&headers_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&transaction_timeout_) -
    reinterpret_cast<char*>(&headers_)) + sizeof(transaction_timeout_));
}

SubscribeRequest::~SubscribeRequest() {
  // @@protoc_insertion_point(destructor:onos.e2t.e2.v1beta1.SubscribeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SubscribeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  transaction_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete headers_;
  if (this != internal_default_instance()) delete subscription_;
  if (this != internal_default_instance()) delete transaction_timeout_;
}

void SubscribeRequest::ArenaDtor(void* object) {
  SubscribeRequest* _this = reinterpret_cast< SubscribeRequest* >(object);
  (void)_this;
}
void SubscribeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.e2t.e2.v1beta1.SubscribeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transaction_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && headers_ != nullptr) {
    delete headers_;
  }
  headers_ = nullptr;
  if (GetArenaForAllocation() == nullptr && subscription_ != nullptr) {
    delete subscription_;
  }
  subscription_ = nullptr;
  if (GetArenaForAllocation() == nullptr && transaction_timeout_ != nullptr) {
    delete transaction_timeout_;
  }
  transaction_timeout_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .onos.e2t.e2.v1beta1.RequestHeaders headers = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_headers(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string transaction_id = 2 [(.gogoproto.customname) = "TransactionID", (.gogoproto.casttype) = "TransactionID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_transaction_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.e2t.e2.v1beta1.SubscribeRequest.transaction_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.e2t.e2.v1beta1.SubscriptionSpec subscription = 3 [(.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscription(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration transaction_timeout = 4 [(.gogoproto.stdduration) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction_timeout(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscribeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.e2t.e2.v1beta1.SubscribeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .onos.e2t.e2.v1beta1.RequestHeaders headers = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_headers()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::headers(this), target, stream);
  }

  // string transaction_id = 2 [(.gogoproto.customname) = "TransactionID", (.gogoproto.casttype) = "TransactionID"];
  if (!this->_internal_transaction_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_transaction_id().data(), static_cast<int>(this->_internal_transaction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.e2t.e2.v1beta1.SubscribeRequest.transaction_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_transaction_id(), target);
  }

  // .onos.e2t.e2.v1beta1.SubscriptionSpec subscription = 3 [(.gogoproto.nullable) = false];
  if (this->_internal_has_subscription()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::subscription(this), target, stream);
  }

  // .google.protobuf.Duration transaction_timeout = 4 [(.gogoproto.stdduration) = true];
  if (this->_internal_has_transaction_timeout()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::transaction_timeout(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.e2t.e2.v1beta1.SubscribeRequest)
  return target;
}

size_t SubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.e2t.e2.v1beta1.SubscribeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string transaction_id = 2 [(.gogoproto.customname) = "TransactionID", (.gogoproto.casttype) = "TransactionID"];
  if (!this->_internal_transaction_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transaction_id());
  }

  // .onos.e2t.e2.v1beta1.RequestHeaders headers = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_headers()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *headers_);
  }

  // .onos.e2t.e2.v1beta1.SubscriptionSpec subscription = 3 [(.gogoproto.nullable) = false];
  if (this->_internal_has_subscription()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *subscription_);
  }

  // .google.protobuf.Duration transaction_timeout = 4 [(.gogoproto.stdduration) = true];
  if (this->_internal_has_transaction_timeout()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_timeout_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SubscribeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeRequest::GetClassData() const { return &_class_data_; }

void SubscribeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SubscribeRequest *>(to)->MergeFrom(
      static_cast<const SubscribeRequest &>(from));
}


void SubscribeRequest::MergeFrom(const SubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.e2t.e2.v1beta1.SubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_transaction_id().empty()) {
    _internal_set_transaction_id(from._internal_transaction_id());
  }
  if (from._internal_has_headers()) {
    _internal_mutable_headers()->::onos::e2t::e2::v1beta1::RequestHeaders::MergeFrom(from._internal_headers());
  }
  if (from._internal_has_subscription()) {
    _internal_mutable_subscription()->::onos::e2t::e2::v1beta1::SubscriptionSpec::MergeFrom(from._internal_subscription());
  }
  if (from._internal_has_transaction_timeout()) {
    _internal_mutable_transaction_timeout()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_transaction_timeout());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribeRequest::CopyFrom(const SubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.e2t.e2.v1beta1.SubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeRequest::IsInitialized() const {
  return true;
}

void SubscribeRequest::InternalSwap(SubscribeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &transaction_id_, lhs_arena,
      &other->transaction_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubscribeRequest, transaction_timeout_)
      + sizeof(SubscribeRequest::transaction_timeout_)
      - PROTOBUF_FIELD_OFFSET(SubscribeRequest, headers_)>(
          reinterpret_cast<char*>(&headers_),
          reinterpret_cast<char*>(&other->headers_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_getter, &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_once,
      file_level_metadata_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto[0]);
}

// ===================================================================

class SubscribeResponse::_Internal {
 public:
  static const ::onos::e2t::e2::v1beta1::ResponseHeaders& headers(const SubscribeResponse* msg);
  static const ::onos::e2t::e2::v1beta1::Acknowledgement& ack(const SubscribeResponse* msg);
  static const ::onos::e2t::e2::v1beta1::Indication& indication(const SubscribeResponse* msg);
};

const ::onos::e2t::e2::v1beta1::ResponseHeaders&
SubscribeResponse::_Internal::headers(const SubscribeResponse* msg) {
  return *msg->headers_;
}
const ::onos::e2t::e2::v1beta1::Acknowledgement&
SubscribeResponse::_Internal::ack(const SubscribeResponse* msg) {
  return *msg->message_.ack_;
}
const ::onos::e2t::e2::v1beta1::Indication&
SubscribeResponse::_Internal::indication(const SubscribeResponse* msg) {
  return *msg->message_.indication_;
}
void SubscribeResponse::clear_headers() {
  if (GetArenaForAllocation() == nullptr && headers_ != nullptr) {
    delete headers_;
  }
  headers_ = nullptr;
}
void SubscribeResponse::set_allocated_ack(::onos::e2t::e2::v1beta1::Acknowledgement* ack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (ack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::e2t::e2::v1beta1::Acknowledgement>::GetOwningArena(ack);
    if (message_arena != submessage_arena) {
      ack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ack, submessage_arena);
    }
    set_has_ack();
    message_.ack_ = ack;
  }
  // @@protoc_insertion_point(field_set_allocated:onos.e2t.e2.v1beta1.SubscribeResponse.ack)
}
void SubscribeResponse::set_allocated_indication(::onos::e2t::e2::v1beta1::Indication* indication) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_message();
  if (indication) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::e2t::e2::v1beta1::Indication>::GetOwningArena(indication);
    if (message_arena != submessage_arena) {
      indication = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, indication, submessage_arena);
    }
    set_has_indication();
    message_.indication_ = indication;
  }
  // @@protoc_insertion_point(field_set_allocated:onos.e2t.e2.v1beta1.SubscribeResponse.indication)
}
SubscribeResponse::SubscribeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.e2t.e2.v1beta1.SubscribeResponse)
}
SubscribeResponse::SubscribeResponse(const SubscribeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_headers()) {
    headers_ = new ::onos::e2t::e2::v1beta1::ResponseHeaders(*from.headers_);
  } else {
    headers_ = nullptr;
  }
  clear_has_message();
  switch (from.message_case()) {
    case kAck: {
      _internal_mutable_ack()->::onos::e2t::e2::v1beta1::Acknowledgement::MergeFrom(from._internal_ack());
      break;
    }
    case kIndication: {
      _internal_mutable_indication()->::onos::e2t::e2::v1beta1::Indication::MergeFrom(from._internal_indication());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:onos.e2t.e2.v1beta1.SubscribeResponse)
}

inline void SubscribeResponse::SharedCtor() {
headers_ = nullptr;
clear_has_message();
}

SubscribeResponse::~SubscribeResponse() {
  // @@protoc_insertion_point(destructor:onos.e2t.e2.v1beta1.SubscribeResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SubscribeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete headers_;
  if (has_message()) {
    clear_message();
  }
}

void SubscribeResponse::ArenaDtor(void* object) {
  SubscribeResponse* _this = reinterpret_cast< SubscribeResponse* >(object);
  (void)_this;
}
void SubscribeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscribeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscribeResponse::clear_message() {
// @@protoc_insertion_point(one_of_clear_start:onos.e2t.e2.v1beta1.SubscribeResponse)
  switch (message_case()) {
    case kAck: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.ack_;
      }
      break;
    }
    case kIndication: {
      if (GetArenaForAllocation() == nullptr) {
        delete message_.indication_;
      }
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = MESSAGE_NOT_SET;
}


void SubscribeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.e2t.e2.v1beta1.SubscribeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && headers_ != nullptr) {
    delete headers_;
  }
  headers_ = nullptr;
  clear_message();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscribeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .onos.e2t.e2.v1beta1.ResponseHeaders headers = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_headers(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.e2t.e2.v1beta1.Acknowledgement ack = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ack(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.e2t.e2.v1beta1.Indication indication = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_indication(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscribeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.e2t.e2.v1beta1.SubscribeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .onos.e2t.e2.v1beta1.ResponseHeaders headers = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_headers()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::headers(this), target, stream);
  }

  // .onos.e2t.e2.v1beta1.Acknowledgement ack = 2;
  if (_internal_has_ack()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ack(this), target, stream);
  }

  // .onos.e2t.e2.v1beta1.Indication indication = 3;
  if (_internal_has_indication()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::indication(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.e2t.e2.v1beta1.SubscribeResponse)
  return target;
}

size_t SubscribeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.e2t.e2.v1beta1.SubscribeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .onos.e2t.e2.v1beta1.ResponseHeaders headers = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_headers()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *headers_);
  }

  switch (message_case()) {
    // .onos.e2t.e2.v1beta1.Acknowledgement ack = 2;
    case kAck: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.ack_);
      break;
    }
    // .onos.e2t.e2.v1beta1.Indication indication = 3;
    case kIndication: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *message_.indication_);
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscribeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SubscribeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscribeResponse::GetClassData() const { return &_class_data_; }

void SubscribeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SubscribeResponse *>(to)->MergeFrom(
      static_cast<const SubscribeResponse &>(from));
}


void SubscribeResponse::MergeFrom(const SubscribeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.e2t.e2.v1beta1.SubscribeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_headers()) {
    _internal_mutable_headers()->::onos::e2t::e2::v1beta1::ResponseHeaders::MergeFrom(from._internal_headers());
  }
  switch (from.message_case()) {
    case kAck: {
      _internal_mutable_ack()->::onos::e2t::e2::v1beta1::Acknowledgement::MergeFrom(from._internal_ack());
      break;
    }
    case kIndication: {
      _internal_mutable_indication()->::onos::e2t::e2::v1beta1::Indication::MergeFrom(from._internal_indication());
      break;
    }
    case MESSAGE_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscribeResponse::CopyFrom(const SubscribeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.e2t.e2.v1beta1.SubscribeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeResponse::IsInitialized() const {
  return true;
}

void SubscribeResponse::InternalSwap(SubscribeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(headers_, other->headers_);
  swap(message_, other->message_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_getter, &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_once,
      file_level_metadata_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto[1]);
}

// ===================================================================

class UnsubscribeRequest::_Internal {
 public:
  static const ::onos::e2t::e2::v1beta1::RequestHeaders& headers(const UnsubscribeRequest* msg);
};

const ::onos::e2t::e2::v1beta1::RequestHeaders&
UnsubscribeRequest::_Internal::headers(const UnsubscribeRequest* msg) {
  return *msg->headers_;
}
void UnsubscribeRequest::clear_headers() {
  if (GetArenaForAllocation() == nullptr && headers_ != nullptr) {
    delete headers_;
  }
  headers_ = nullptr;
}
UnsubscribeRequest::UnsubscribeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.e2t.e2.v1beta1.UnsubscribeRequest)
}
UnsubscribeRequest::UnsubscribeRequest(const UnsubscribeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    transaction_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_transaction_id().empty()) {
    transaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_transaction_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_headers()) {
    headers_ = new ::onos::e2t::e2::v1beta1::RequestHeaders(*from.headers_);
  } else {
    headers_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:onos.e2t.e2.v1beta1.UnsubscribeRequest)
}

inline void UnsubscribeRequest::SharedCtor() {
transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  transaction_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
headers_ = nullptr;
}

UnsubscribeRequest::~UnsubscribeRequest() {
  // @@protoc_insertion_point(destructor:onos.e2t.e2.v1beta1.UnsubscribeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UnsubscribeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  transaction_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete headers_;
}

void UnsubscribeRequest::ArenaDtor(void* object) {
  UnsubscribeRequest* _this = reinterpret_cast< UnsubscribeRequest* >(object);
  (void)_this;
}
void UnsubscribeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnsubscribeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UnsubscribeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.e2t.e2.v1beta1.UnsubscribeRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transaction_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && headers_ != nullptr) {
    delete headers_;
  }
  headers_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnsubscribeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .onos.e2t.e2.v1beta1.RequestHeaders headers = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_headers(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string transaction_id = 2 [(.gogoproto.customname) = "TransactionID", (.gogoproto.casttype) = "TransactionID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_transaction_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.e2t.e2.v1beta1.UnsubscribeRequest.transaction_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnsubscribeRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.e2t.e2.v1beta1.UnsubscribeRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .onos.e2t.e2.v1beta1.RequestHeaders headers = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_headers()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::headers(this), target, stream);
  }

  // string transaction_id = 2 [(.gogoproto.customname) = "TransactionID", (.gogoproto.casttype) = "TransactionID"];
  if (!this->_internal_transaction_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_transaction_id().data(), static_cast<int>(this->_internal_transaction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.e2t.e2.v1beta1.UnsubscribeRequest.transaction_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_transaction_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.e2t.e2.v1beta1.UnsubscribeRequest)
  return target;
}

size_t UnsubscribeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.e2t.e2.v1beta1.UnsubscribeRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string transaction_id = 2 [(.gogoproto.customname) = "TransactionID", (.gogoproto.casttype) = "TransactionID"];
  if (!this->_internal_transaction_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transaction_id());
  }

  // .onos.e2t.e2.v1beta1.RequestHeaders headers = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_headers()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *headers_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnsubscribeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UnsubscribeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnsubscribeRequest::GetClassData() const { return &_class_data_; }

void UnsubscribeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UnsubscribeRequest *>(to)->MergeFrom(
      static_cast<const UnsubscribeRequest &>(from));
}


void UnsubscribeRequest::MergeFrom(const UnsubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.e2t.e2.v1beta1.UnsubscribeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_transaction_id().empty()) {
    _internal_set_transaction_id(from._internal_transaction_id());
  }
  if (from._internal_has_headers()) {
    _internal_mutable_headers()->::onos::e2t::e2::v1beta1::RequestHeaders::MergeFrom(from._internal_headers());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnsubscribeRequest::CopyFrom(const UnsubscribeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.e2t.e2.v1beta1.UnsubscribeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsubscribeRequest::IsInitialized() const {
  return true;
}

void UnsubscribeRequest::InternalSwap(UnsubscribeRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &transaction_id_, lhs_arena,
      &other->transaction_id_, rhs_arena
  );
  swap(headers_, other->headers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnsubscribeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_getter, &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_once,
      file_level_metadata_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto[2]);
}

// ===================================================================

class UnsubscribeResponse::_Internal {
 public:
  static const ::onos::e2t::e2::v1beta1::ResponseHeaders& headers(const UnsubscribeResponse* msg);
};

const ::onos::e2t::e2::v1beta1::ResponseHeaders&
UnsubscribeResponse::_Internal::headers(const UnsubscribeResponse* msg) {
  return *msg->headers_;
}
void UnsubscribeResponse::clear_headers() {
  if (GetArenaForAllocation() == nullptr && headers_ != nullptr) {
    delete headers_;
  }
  headers_ = nullptr;
}
UnsubscribeResponse::UnsubscribeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.e2t.e2.v1beta1.UnsubscribeResponse)
}
UnsubscribeResponse::UnsubscribeResponse(const UnsubscribeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_headers()) {
    headers_ = new ::onos::e2t::e2::v1beta1::ResponseHeaders(*from.headers_);
  } else {
    headers_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:onos.e2t.e2.v1beta1.UnsubscribeResponse)
}

inline void UnsubscribeResponse::SharedCtor() {
headers_ = nullptr;
}

UnsubscribeResponse::~UnsubscribeResponse() {
  // @@protoc_insertion_point(destructor:onos.e2t.e2.v1beta1.UnsubscribeResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UnsubscribeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete headers_;
}

void UnsubscribeResponse::ArenaDtor(void* object) {
  UnsubscribeResponse* _this = reinterpret_cast< UnsubscribeResponse* >(object);
  (void)_this;
}
void UnsubscribeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UnsubscribeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UnsubscribeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.e2t.e2.v1beta1.UnsubscribeResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && headers_ != nullptr) {
    delete headers_;
  }
  headers_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UnsubscribeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .onos.e2t.e2.v1beta1.ResponseHeaders headers = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_headers(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* UnsubscribeResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.e2t.e2.v1beta1.UnsubscribeResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .onos.e2t.e2.v1beta1.ResponseHeaders headers = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_headers()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::headers(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.e2t.e2.v1beta1.UnsubscribeResponse)
  return target;
}

size_t UnsubscribeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.e2t.e2.v1beta1.UnsubscribeResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .onos.e2t.e2.v1beta1.ResponseHeaders headers = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_headers()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *headers_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UnsubscribeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UnsubscribeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UnsubscribeResponse::GetClassData() const { return &_class_data_; }

void UnsubscribeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<UnsubscribeResponse *>(to)->MergeFrom(
      static_cast<const UnsubscribeResponse &>(from));
}


void UnsubscribeResponse::MergeFrom(const UnsubscribeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.e2t.e2.v1beta1.UnsubscribeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_headers()) {
    _internal_mutable_headers()->::onos::e2t::e2::v1beta1::ResponseHeaders::MergeFrom(from._internal_headers());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UnsubscribeResponse::CopyFrom(const UnsubscribeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.e2t.e2.v1beta1.UnsubscribeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnsubscribeResponse::IsInitialized() const {
  return true;
}

void UnsubscribeResponse::InternalSwap(UnsubscribeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(headers_, other->headers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UnsubscribeResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_getter, &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_once,
      file_level_metadata_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto[3]);
}

// ===================================================================

class SubscriptionSpec::_Internal {
 public:
  static const ::onos::e2t::e2::v1beta1::EventTrigger& event_trigger(const SubscriptionSpec* msg);
};

const ::onos::e2t::e2::v1beta1::EventTrigger&
SubscriptionSpec::_Internal::event_trigger(const SubscriptionSpec* msg) {
  return *msg->event_trigger_;
}
SubscriptionSpec::SubscriptionSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  actions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.e2t.e2.v1beta1.SubscriptionSpec)
}
SubscriptionSpec::SubscriptionSpec(const SubscriptionSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      actions_(from.actions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_event_trigger()) {
    event_trigger_ = new ::onos::e2t::e2::v1beta1::EventTrigger(*from.event_trigger_);
  } else {
    event_trigger_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:onos.e2t.e2.v1beta1.SubscriptionSpec)
}

inline void SubscriptionSpec::SharedCtor() {
event_trigger_ = nullptr;
}

SubscriptionSpec::~SubscriptionSpec() {
  // @@protoc_insertion_point(destructor:onos.e2t.e2.v1beta1.SubscriptionSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SubscriptionSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete event_trigger_;
}

void SubscriptionSpec::ArenaDtor(void* object) {
  SubscriptionSpec* _this = reinterpret_cast< SubscriptionSpec* >(object);
  (void)_this;
}
void SubscriptionSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscriptionSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscriptionSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.e2t.e2.v1beta1.SubscriptionSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  actions_.Clear();
  if (GetArenaForAllocation() == nullptr && event_trigger_ != nullptr) {
    delete event_trigger_;
  }
  event_trigger_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscriptionSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .onos.e2t.e2.v1beta1.EventTrigger event_trigger = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_event_trigger(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .onos.e2t.e2.v1beta1.Action actions = 2 [(.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_actions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscriptionSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.e2t.e2.v1beta1.SubscriptionSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .onos.e2t.e2.v1beta1.EventTrigger event_trigger = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_event_trigger()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::event_trigger(this), target, stream);
  }

  // repeated .onos.e2t.e2.v1beta1.Action actions = 2 [(.gogoproto.nullable) = false];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_actions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_actions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.e2t.e2.v1beta1.SubscriptionSpec)
  return target;
}

size_t SubscriptionSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.e2t.e2.v1beta1.SubscriptionSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .onos.e2t.e2.v1beta1.Action actions = 2 [(.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_actions_size();
  for (const auto& msg : this->actions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .onos.e2t.e2.v1beta1.EventTrigger event_trigger = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_event_trigger()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *event_trigger_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscriptionSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SubscriptionSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscriptionSpec::GetClassData() const { return &_class_data_; }

void SubscriptionSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SubscriptionSpec *>(to)->MergeFrom(
      static_cast<const SubscriptionSpec &>(from));
}


void SubscriptionSpec::MergeFrom(const SubscriptionSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.e2t.e2.v1beta1.SubscriptionSpec)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  actions_.MergeFrom(from.actions_);
  if (from._internal_has_event_trigger()) {
    _internal_mutable_event_trigger()->::onos::e2t::e2::v1beta1::EventTrigger::MergeFrom(from._internal_event_trigger());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscriptionSpec::CopyFrom(const SubscriptionSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.e2t.e2.v1beta1.SubscriptionSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionSpec::IsInitialized() const {
  return true;
}

void SubscriptionSpec::InternalSwap(SubscriptionSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  actions_.InternalSwap(&other->actions_);
  swap(event_trigger_, other->event_trigger_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscriptionSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_getter, &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_once,
      file_level_metadata_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto[4]);
}

// ===================================================================

class EventTrigger::_Internal {
 public:
};

EventTrigger::EventTrigger(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.e2t.e2.v1beta1.EventTrigger)
}
EventTrigger::EventTrigger(const EventTrigger& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:onos.e2t.e2.v1beta1.EventTrigger)
}

inline void EventTrigger::SharedCtor() {
payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EventTrigger::~EventTrigger() {
  // @@protoc_insertion_point(destructor:onos.e2t.e2.v1beta1.EventTrigger)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void EventTrigger::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EventTrigger::ArenaDtor(void* object) {
  EventTrigger* _this = reinterpret_cast< EventTrigger* >(object);
  (void)_this;
}
void EventTrigger::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void EventTrigger::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void EventTrigger::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.e2t.e2.v1beta1.EventTrigger)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payload_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventTrigger::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes payload = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EventTrigger::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.e2t.e2.v1beta1.EventTrigger)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes payload = 1;
  if (!this->_internal_payload().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.e2t.e2.v1beta1.EventTrigger)
  return target;
}

size_t EventTrigger::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.e2t.e2.v1beta1.EventTrigger)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes payload = 1;
  if (!this->_internal_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventTrigger::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    EventTrigger::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventTrigger::GetClassData() const { return &_class_data_; }

void EventTrigger::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<EventTrigger *>(to)->MergeFrom(
      static_cast<const EventTrigger &>(from));
}


void EventTrigger::MergeFrom(const EventTrigger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.e2t.e2.v1beta1.EventTrigger)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_payload().empty()) {
    _internal_set_payload(from._internal_payload());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventTrigger::CopyFrom(const EventTrigger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.e2t.e2.v1beta1.EventTrigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventTrigger::IsInitialized() const {
  return true;
}

void EventTrigger::InternalSwap(EventTrigger* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &payload_, lhs_arena,
      &other->payload_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata EventTrigger::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_getter, &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_once,
      file_level_metadata_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto[5]);
}

// ===================================================================

class Action::_Internal {
 public:
  static const ::onos::e2t::e2::v1beta1::SubsequentAction& subsequent_action(const Action* msg);
};

const ::onos::e2t::e2::v1beta1::SubsequentAction&
Action::_Internal::subsequent_action(const Action* msg) {
  return *msg->subsequent_action_;
}
Action::Action(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.e2t.e2.v1beta1.Action)
}
Action::Action(const Action& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_subsequent_action()) {
    subsequent_action_ = new ::onos::e2t::e2::v1beta1::SubsequentAction(*from.subsequent_action_);
  } else {
    subsequent_action_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:onos.e2t.e2.v1beta1.Action)
}

inline void Action::SharedCtor() {
payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&subsequent_action_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&subsequent_action_)) + sizeof(type_));
}

Action::~Action() {
  // @@protoc_insertion_point(destructor:onos.e2t.e2.v1beta1.Action)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Action::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete subsequent_action_;
}

void Action::ArenaDtor(void* object) {
  Action* _this = reinterpret_cast< Action* >(object);
  (void)_this;
}
void Action::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Action::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Action::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.e2t.e2.v1beta1.Action)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  payload_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && subsequent_action_ != nullptr) {
    delete subsequent_action_;
  }
  subsequent_action_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Action::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 id = 1 [(.gogoproto.customname) = "ID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.e2t.e2.v1beta1.ActionType type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::onos::e2t::e2::v1beta1::ActionType>(val));
        } else
          goto handle_unusual;
        continue;
      // bytes payload = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.e2t.e2.v1beta1.SubsequentAction subsequent_action = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_subsequent_action(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Action::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.e2t.e2.v1beta1.Action)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 id = 1 [(.gogoproto.customname) = "ID"];
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // .onos.e2t.e2.v1beta1.ActionType type = 2;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_type(), target);
  }

  // bytes payload = 3;
  if (!this->_internal_payload().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_payload(), target);
  }

  // .onos.e2t.e2.v1beta1.SubsequentAction subsequent_action = 4;
  if (this->_internal_has_subsequent_action()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::subsequent_action(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.e2t.e2.v1beta1.Action)
  return target;
}

size_t Action::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.e2t.e2.v1beta1.Action)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes payload = 3;
  if (!this->_internal_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  // .onos.e2t.e2.v1beta1.SubsequentAction subsequent_action = 4;
  if (this->_internal_has_subsequent_action()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *subsequent_action_);
  }

  // int32 id = 1 [(.gogoproto.customname) = "ID"];
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_id());
  }

  // .onos.e2t.e2.v1beta1.ActionType type = 2;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Action::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Action::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Action::GetClassData() const { return &_class_data_; }

void Action::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Action *>(to)->MergeFrom(
      static_cast<const Action &>(from));
}


void Action::MergeFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.e2t.e2.v1beta1.Action)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_payload().empty()) {
    _internal_set_payload(from._internal_payload());
  }
  if (from._internal_has_subsequent_action()) {
    _internal_mutable_subsequent_action()->::onos::e2t::e2::v1beta1::SubsequentAction::MergeFrom(from._internal_subsequent_action());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Action::CopyFrom(const Action& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.e2t.e2.v1beta1.Action)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action::IsInitialized() const {
  return true;
}

void Action::InternalSwap(Action* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &payload_, lhs_arena,
      &other->payload_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Action, type_)
      + sizeof(Action::type_)
      - PROTOBUF_FIELD_OFFSET(Action, subsequent_action_)>(
          reinterpret_cast<char*>(&subsequent_action_),
          reinterpret_cast<char*>(&other->subsequent_action_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Action::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_getter, &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_once,
      file_level_metadata_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto[6]);
}

// ===================================================================

class SubsequentAction::_Internal {
 public:
};

SubsequentAction::SubsequentAction(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.e2t.e2.v1beta1.SubsequentAction)
}
SubsequentAction::SubsequentAction(const SubsequentAction& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&time_to_wait_) -
    reinterpret_cast<char*>(&type_)) + sizeof(time_to_wait_));
  // @@protoc_insertion_point(copy_constructor:onos.e2t.e2.v1beta1.SubsequentAction)
}

inline void SubsequentAction::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&type_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&time_to_wait_) -
    reinterpret_cast<char*>(&type_)) + sizeof(time_to_wait_));
}

SubsequentAction::~SubsequentAction() {
  // @@protoc_insertion_point(destructor:onos.e2t.e2.v1beta1.SubsequentAction)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SubsequentAction::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SubsequentAction::ArenaDtor(void* object) {
  SubsequentAction* _this = reinterpret_cast< SubsequentAction* >(object);
  (void)_this;
}
void SubsequentAction::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubsequentAction::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubsequentAction::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.e2t.e2.v1beta1.SubsequentAction)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&time_to_wait_) -
      reinterpret_cast<char*>(&type_)) + sizeof(time_to_wait_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubsequentAction::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .onos.e2t.e2.v1beta1.SubsequentActionType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::onos::e2t::e2::v1beta1::SubsequentActionType>(val));
        } else
          goto handle_unusual;
        continue;
      // .onos.e2t.e2.v1beta1.TimeToWait time_to_wait = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_time_to_wait(static_cast<::onos::e2t::e2::v1beta1::TimeToWait>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubsequentAction::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.e2t.e2.v1beta1.SubsequentAction)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .onos.e2t.e2.v1beta1.SubsequentActionType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .onos.e2t.e2.v1beta1.TimeToWait time_to_wait = 2;
  if (this->_internal_time_to_wait() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_time_to_wait(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.e2t.e2.v1beta1.SubsequentAction)
  return target;
}

size_t SubsequentAction::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.e2t.e2.v1beta1.SubsequentAction)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .onos.e2t.e2.v1beta1.SubsequentActionType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  // .onos.e2t.e2.v1beta1.TimeToWait time_to_wait = 2;
  if (this->_internal_time_to_wait() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_time_to_wait());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubsequentAction::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SubsequentAction::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubsequentAction::GetClassData() const { return &_class_data_; }

void SubsequentAction::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SubsequentAction *>(to)->MergeFrom(
      static_cast<const SubsequentAction &>(from));
}


void SubsequentAction::MergeFrom(const SubsequentAction& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.e2t.e2.v1beta1.SubsequentAction)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from._internal_time_to_wait() != 0) {
    _internal_set_time_to_wait(from._internal_time_to_wait());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubsequentAction::CopyFrom(const SubsequentAction& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.e2t.e2.v1beta1.SubsequentAction)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubsequentAction::IsInitialized() const {
  return true;
}

void SubsequentAction::InternalSwap(SubsequentAction* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubsequentAction, time_to_wait_)
      + sizeof(SubsequentAction::time_to_wait_)
      - PROTOBUF_FIELD_OFFSET(SubsequentAction, type_)>(
          reinterpret_cast<char*>(&type_),
          reinterpret_cast<char*>(&other->type_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubsequentAction::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_getter, &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_once,
      file_level_metadata_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto[7]);
}

// ===================================================================

class Acknowledgement::_Internal {
 public:
};

Acknowledgement::Acknowledgement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.e2t.e2.v1beta1.Acknowledgement)
}
Acknowledgement::Acknowledgement(const Acknowledgement& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  channel_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    channel_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel_id().empty()) {
    channel_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_channel_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:onos.e2t.e2.v1beta1.Acknowledgement)
}

inline void Acknowledgement::SharedCtor() {
channel_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  channel_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Acknowledgement::~Acknowledgement() {
  // @@protoc_insertion_point(destructor:onos.e2t.e2.v1beta1.Acknowledgement)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Acknowledgement::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  channel_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Acknowledgement::ArenaDtor(void* object) {
  Acknowledgement* _this = reinterpret_cast< Acknowledgement* >(object);
  (void)_this;
}
void Acknowledgement::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Acknowledgement::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Acknowledgement::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.e2t.e2.v1beta1.Acknowledgement)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Acknowledgement::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string channel_id = 1 [(.gogoproto.customname) = "ChannelID", (.gogoproto.casttype) = "ChannelID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.e2t.e2.v1beta1.Acknowledgement.channel_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Acknowledgement::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.e2t.e2.v1beta1.Acknowledgement)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel_id = 1 [(.gogoproto.customname) = "ChannelID", (.gogoproto.casttype) = "ChannelID"];
  if (!this->_internal_channel_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channel_id().data(), static_cast<int>(this->_internal_channel_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.e2t.e2.v1beta1.Acknowledgement.channel_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_channel_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.e2t.e2.v1beta1.Acknowledgement)
  return target;
}

size_t Acknowledgement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.e2t.e2.v1beta1.Acknowledgement)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channel_id = 1 [(.gogoproto.customname) = "ChannelID", (.gogoproto.casttype) = "ChannelID"];
  if (!this->_internal_channel_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channel_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Acknowledgement::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Acknowledgement::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Acknowledgement::GetClassData() const { return &_class_data_; }

void Acknowledgement::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Acknowledgement *>(to)->MergeFrom(
      static_cast<const Acknowledgement &>(from));
}


void Acknowledgement::MergeFrom(const Acknowledgement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.e2t.e2.v1beta1.Acknowledgement)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_channel_id().empty()) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Acknowledgement::CopyFrom(const Acknowledgement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.e2t.e2.v1beta1.Acknowledgement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Acknowledgement::IsInitialized() const {
  return true;
}

void Acknowledgement::InternalSwap(Acknowledgement* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &channel_id_, lhs_arena,
      &other->channel_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Acknowledgement::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_getter, &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_once,
      file_level_metadata_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto[8]);
}

// ===================================================================

class Indication::_Internal {
 public:
};

Indication::Indication(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.e2t.e2.v1beta1.Indication)
}
Indication::Indication(const Indication& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  header_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    header_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_header().empty()) {
    header_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_header(), 
      GetArenaForAllocation());
  }
  payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_payload().empty()) {
    payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_payload(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:onos.e2t.e2.v1beta1.Indication)
}

inline void Indication::SharedCtor() {
header_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  header_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
payload_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  payload_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Indication::~Indication() {
  // @@protoc_insertion_point(destructor:onos.e2t.e2.v1beta1.Indication)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Indication::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  header_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  payload_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Indication::ArenaDtor(void* object) {
  Indication* _this = reinterpret_cast< Indication* >(object);
  (void)_this;
}
void Indication::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Indication::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Indication::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.e2t.e2.v1beta1.Indication)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  header_.ClearToEmpty();
  payload_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Indication::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes header = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_header();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes payload = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_payload();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Indication::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.e2t.e2.v1beta1.Indication)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes header = 1;
  if (!this->_internal_header().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_header(), target);
  }

  // bytes payload = 2;
  if (!this->_internal_payload().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_payload(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.e2t.e2.v1beta1.Indication)
  return target;
}

size_t Indication::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.e2t.e2.v1beta1.Indication)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes header = 1;
  if (!this->_internal_header().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_header());
  }

  // bytes payload = 2;
  if (!this->_internal_payload().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_payload());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Indication::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Indication::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Indication::GetClassData() const { return &_class_data_; }

void Indication::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Indication *>(to)->MergeFrom(
      static_cast<const Indication &>(from));
}


void Indication::MergeFrom(const Indication& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.e2t.e2.v1beta1.Indication)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_header().empty()) {
    _internal_set_header(from._internal_header());
  }
  if (!from._internal_payload().empty()) {
    _internal_set_payload(from._internal_payload());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Indication::CopyFrom(const Indication& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.e2t.e2.v1beta1.Indication)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Indication::IsInitialized() const {
  return true;
}

void Indication::InternalSwap(Indication* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &header_, lhs_arena,
      &other->header_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &payload_, lhs_arena,
      &other->payload_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Indication::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_getter, &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_once,
      file_level_metadata_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto[9]);
}

// ===================================================================

class GetChannelRequest::_Internal {
 public:
};

GetChannelRequest::GetChannelRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.e2t.e2.v1beta1.GetChannelRequest)
}
GetChannelRequest::GetChannelRequest(const GetChannelRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  channel_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    channel_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_channel_id().empty()) {
    channel_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_channel_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:onos.e2t.e2.v1beta1.GetChannelRequest)
}

inline void GetChannelRequest::SharedCtor() {
channel_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  channel_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetChannelRequest::~GetChannelRequest() {
  // @@protoc_insertion_point(destructor:onos.e2t.e2.v1beta1.GetChannelRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetChannelRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  channel_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetChannelRequest::ArenaDtor(void* object) {
  GetChannelRequest* _this = reinterpret_cast< GetChannelRequest* >(object);
  (void)_this;
}
void GetChannelRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetChannelRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetChannelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.e2t.e2.v1beta1.GetChannelRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channel_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetChannelRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string channel_id = 1 [(.gogoproto.customname) = "ChannelID", (.gogoproto.casttype) = "ChannelID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_channel_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.e2t.e2.v1beta1.GetChannelRequest.channel_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetChannelRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.e2t.e2.v1beta1.GetChannelRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string channel_id = 1 [(.gogoproto.customname) = "ChannelID", (.gogoproto.casttype) = "ChannelID"];
  if (!this->_internal_channel_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_channel_id().data(), static_cast<int>(this->_internal_channel_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.e2t.e2.v1beta1.GetChannelRequest.channel_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_channel_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.e2t.e2.v1beta1.GetChannelRequest)
  return target;
}

size_t GetChannelRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.e2t.e2.v1beta1.GetChannelRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string channel_id = 1 [(.gogoproto.customname) = "ChannelID", (.gogoproto.casttype) = "ChannelID"];
  if (!this->_internal_channel_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_channel_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetChannelRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetChannelRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetChannelRequest::GetClassData() const { return &_class_data_; }

void GetChannelRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetChannelRequest *>(to)->MergeFrom(
      static_cast<const GetChannelRequest &>(from));
}


void GetChannelRequest::MergeFrom(const GetChannelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.e2t.e2.v1beta1.GetChannelRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_channel_id().empty()) {
    _internal_set_channel_id(from._internal_channel_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetChannelRequest::CopyFrom(const GetChannelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.e2t.e2.v1beta1.GetChannelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChannelRequest::IsInitialized() const {
  return true;
}

void GetChannelRequest::InternalSwap(GetChannelRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &channel_id_, lhs_arena,
      &other->channel_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetChannelRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_getter, &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_once,
      file_level_metadata_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto[10]);
}

// ===================================================================

class GetChannelResponse::_Internal {
 public:
  static const ::onos::e2t::e2::v1beta1::Channel& channel(const GetChannelResponse* msg);
};

const ::onos::e2t::e2::v1beta1::Channel&
GetChannelResponse::_Internal::channel(const GetChannelResponse* msg) {
  return *msg->channel_;
}
GetChannelResponse::GetChannelResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.e2t.e2.v1beta1.GetChannelResponse)
}
GetChannelResponse::GetChannelResponse(const GetChannelResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_channel()) {
    channel_ = new ::onos::e2t::e2::v1beta1::Channel(*from.channel_);
  } else {
    channel_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:onos.e2t.e2.v1beta1.GetChannelResponse)
}

inline void GetChannelResponse::SharedCtor() {
channel_ = nullptr;
}

GetChannelResponse::~GetChannelResponse() {
  // @@protoc_insertion_point(destructor:onos.e2t.e2.v1beta1.GetChannelResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetChannelResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete channel_;
}

void GetChannelResponse::ArenaDtor(void* object) {
  GetChannelResponse* _this = reinterpret_cast< GetChannelResponse* >(object);
  (void)_this;
}
void GetChannelResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetChannelResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetChannelResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.e2t.e2.v1beta1.GetChannelResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && channel_ != nullptr) {
    delete channel_;
  }
  channel_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetChannelResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .onos.e2t.e2.v1beta1.Channel channel = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetChannelResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.e2t.e2.v1beta1.GetChannelResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .onos.e2t.e2.v1beta1.Channel channel = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_channel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::channel(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.e2t.e2.v1beta1.GetChannelResponse)
  return target;
}

size_t GetChannelResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.e2t.e2.v1beta1.GetChannelResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .onos.e2t.e2.v1beta1.Channel channel = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_channel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetChannelResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetChannelResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetChannelResponse::GetClassData() const { return &_class_data_; }

void GetChannelResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetChannelResponse *>(to)->MergeFrom(
      static_cast<const GetChannelResponse &>(from));
}


void GetChannelResponse::MergeFrom(const GetChannelResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.e2t.e2.v1beta1.GetChannelResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_channel()) {
    _internal_mutable_channel()->::onos::e2t::e2::v1beta1::Channel::MergeFrom(from._internal_channel());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetChannelResponse::CopyFrom(const GetChannelResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.e2t.e2.v1beta1.GetChannelResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetChannelResponse::IsInitialized() const {
  return true;
}

void GetChannelResponse::InternalSwap(GetChannelResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(channel_, other->channel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetChannelResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_getter, &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_once,
      file_level_metadata_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto[11]);
}

// ===================================================================

class ListChannelsRequest::_Internal {
 public:
};

ListChannelsRequest::ListChannelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:onos.e2t.e2.v1beta1.ListChannelsRequest)
}
ListChannelsRequest::ListChannelsRequest(const ListChannelsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:onos.e2t.e2.v1beta1.ListChannelsRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListChannelsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListChannelsRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ListChannelsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_getter, &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_once,
      file_level_metadata_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto[12]);
}

// ===================================================================

class ListChannelsResponse::_Internal {
 public:
};

ListChannelsResponse::ListChannelsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  channels_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.e2t.e2.v1beta1.ListChannelsResponse)
}
ListChannelsResponse::ListChannelsResponse(const ListChannelsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      channels_(from.channels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:onos.e2t.e2.v1beta1.ListChannelsResponse)
}

inline void ListChannelsResponse::SharedCtor() {
}

ListChannelsResponse::~ListChannelsResponse() {
  // @@protoc_insertion_point(destructor:onos.e2t.e2.v1beta1.ListChannelsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListChannelsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListChannelsResponse::ArenaDtor(void* object) {
  ListChannelsResponse* _this = reinterpret_cast< ListChannelsResponse* >(object);
  (void)_this;
}
void ListChannelsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListChannelsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListChannelsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.e2t.e2.v1beta1.ListChannelsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListChannelsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .onos.e2t.e2.v1beta1.Channel channels = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListChannelsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.e2t.e2.v1beta1.ListChannelsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .onos.e2t.e2.v1beta1.Channel channels = 1 [(.gogoproto.nullable) = false];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_channels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_channels(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.e2t.e2.v1beta1.ListChannelsResponse)
  return target;
}

size_t ListChannelsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.e2t.e2.v1beta1.ListChannelsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .onos.e2t.e2.v1beta1.Channel channels = 1 [(.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_channels_size();
  for (const auto& msg : this->channels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListChannelsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListChannelsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListChannelsResponse::GetClassData() const { return &_class_data_; }

void ListChannelsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListChannelsResponse *>(to)->MergeFrom(
      static_cast<const ListChannelsResponse &>(from));
}


void ListChannelsResponse::MergeFrom(const ListChannelsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.e2t.e2.v1beta1.ListChannelsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListChannelsResponse::CopyFrom(const ListChannelsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.e2t.e2.v1beta1.ListChannelsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListChannelsResponse::IsInitialized() const {
  return true;
}

void ListChannelsResponse::InternalSwap(ListChannelsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  channels_.InternalSwap(&other->channels_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListChannelsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_getter, &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_once,
      file_level_metadata_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto[13]);
}

// ===================================================================

class WatchChannelsRequest::_Internal {
 public:
};

WatchChannelsRequest::WatchChannelsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.e2t.e2.v1beta1.WatchChannelsRequest)
}
WatchChannelsRequest::WatchChannelsRequest(const WatchChannelsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  no_replay_ = from.no_replay_;
  // @@protoc_insertion_point(copy_constructor:onos.e2t.e2.v1beta1.WatchChannelsRequest)
}

inline void WatchChannelsRequest::SharedCtor() {
no_replay_ = false;
}

WatchChannelsRequest::~WatchChannelsRequest() {
  // @@protoc_insertion_point(destructor:onos.e2t.e2.v1beta1.WatchChannelsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WatchChannelsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WatchChannelsRequest::ArenaDtor(void* object) {
  WatchChannelsRequest* _this = reinterpret_cast< WatchChannelsRequest* >(object);
  (void)_this;
}
void WatchChannelsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WatchChannelsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WatchChannelsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.e2t.e2.v1beta1.WatchChannelsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  no_replay_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WatchChannelsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool no_replay = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          no_replay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WatchChannelsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.e2t.e2.v1beta1.WatchChannelsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool no_replay = 1;
  if (this->_internal_no_replay() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_no_replay(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.e2t.e2.v1beta1.WatchChannelsRequest)
  return target;
}

size_t WatchChannelsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.e2t.e2.v1beta1.WatchChannelsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool no_replay = 1;
  if (this->_internal_no_replay() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WatchChannelsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WatchChannelsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WatchChannelsRequest::GetClassData() const { return &_class_data_; }

void WatchChannelsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WatchChannelsRequest *>(to)->MergeFrom(
      static_cast<const WatchChannelsRequest &>(from));
}


void WatchChannelsRequest::MergeFrom(const WatchChannelsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.e2t.e2.v1beta1.WatchChannelsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_no_replay() != 0) {
    _internal_set_no_replay(from._internal_no_replay());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WatchChannelsRequest::CopyFrom(const WatchChannelsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.e2t.e2.v1beta1.WatchChannelsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchChannelsRequest::IsInitialized() const {
  return true;
}

void WatchChannelsRequest::InternalSwap(WatchChannelsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(no_replay_, other->no_replay_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchChannelsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_getter, &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_once,
      file_level_metadata_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto[14]);
}

// ===================================================================

class WatchChannelsResponse::_Internal {
 public:
  static const ::onos::e2t::e2::v1beta1::ChannelEvent& event(const WatchChannelsResponse* msg);
};

const ::onos::e2t::e2::v1beta1::ChannelEvent&
WatchChannelsResponse::_Internal::event(const WatchChannelsResponse* msg) {
  return *msg->event_;
}
WatchChannelsResponse::WatchChannelsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.e2t.e2.v1beta1.WatchChannelsResponse)
}
WatchChannelsResponse::WatchChannelsResponse(const WatchChannelsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_event()) {
    event_ = new ::onos::e2t::e2::v1beta1::ChannelEvent(*from.event_);
  } else {
    event_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:onos.e2t.e2.v1beta1.WatchChannelsResponse)
}

inline void WatchChannelsResponse::SharedCtor() {
event_ = nullptr;
}

WatchChannelsResponse::~WatchChannelsResponse() {
  // @@protoc_insertion_point(destructor:onos.e2t.e2.v1beta1.WatchChannelsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WatchChannelsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete event_;
}

void WatchChannelsResponse::ArenaDtor(void* object) {
  WatchChannelsResponse* _this = reinterpret_cast< WatchChannelsResponse* >(object);
  (void)_this;
}
void WatchChannelsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WatchChannelsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WatchChannelsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.e2t.e2.v1beta1.WatchChannelsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && event_ != nullptr) {
    delete event_;
  }
  event_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WatchChannelsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .onos.e2t.e2.v1beta1.ChannelEvent event = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WatchChannelsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.e2t.e2.v1beta1.WatchChannelsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .onos.e2t.e2.v1beta1.ChannelEvent event = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_event()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::event(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.e2t.e2.v1beta1.WatchChannelsResponse)
  return target;
}

size_t WatchChannelsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.e2t.e2.v1beta1.WatchChannelsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .onos.e2t.e2.v1beta1.ChannelEvent event = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_event()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *event_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WatchChannelsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WatchChannelsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WatchChannelsResponse::GetClassData() const { return &_class_data_; }

void WatchChannelsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WatchChannelsResponse *>(to)->MergeFrom(
      static_cast<const WatchChannelsResponse &>(from));
}


void WatchChannelsResponse::MergeFrom(const WatchChannelsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.e2t.e2.v1beta1.WatchChannelsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_event()) {
    _internal_mutable_event()->::onos::e2t::e2::v1beta1::ChannelEvent::MergeFrom(from._internal_event());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WatchChannelsResponse::CopyFrom(const WatchChannelsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.e2t.e2.v1beta1.WatchChannelsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchChannelsResponse::IsInitialized() const {
  return true;
}

void WatchChannelsResponse::InternalSwap(WatchChannelsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(event_, other->event_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchChannelsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_getter, &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_once,
      file_level_metadata_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto[15]);
}

// ===================================================================

class ChannelEvent::_Internal {
 public:
  static const ::onos::e2t::e2::v1beta1::Channel& channel(const ChannelEvent* msg);
};

const ::onos::e2t::e2::v1beta1::Channel&
ChannelEvent::_Internal::channel(const ChannelEvent* msg) {
  return *msg->channel_;
}
ChannelEvent::ChannelEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.e2t.e2.v1beta1.ChannelEvent)
}
ChannelEvent::ChannelEvent(const ChannelEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_channel()) {
    channel_ = new ::onos::e2t::e2::v1beta1::Channel(*from.channel_);
  } else {
    channel_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:onos.e2t.e2.v1beta1.ChannelEvent)
}

inline void ChannelEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&channel_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&channel_)) + sizeof(type_));
}

ChannelEvent::~ChannelEvent() {
  // @@protoc_insertion_point(destructor:onos.e2t.e2.v1beta1.ChannelEvent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChannelEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete channel_;
}

void ChannelEvent::ArenaDtor(void* object) {
  ChannelEvent* _this = reinterpret_cast< ChannelEvent* >(object);
  (void)_this;
}
void ChannelEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChannelEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.e2t.e2.v1beta1.ChannelEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && channel_ != nullptr) {
    delete channel_;
  }
  channel_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .onos.e2t.e2.v1beta1.ChannelEventType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::onos::e2t::e2::v1beta1::ChannelEventType>(val));
        } else
          goto handle_unusual;
        continue;
      // .onos.e2t.e2.v1beta1.Channel channel = 2 [(.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChannelEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.e2t.e2.v1beta1.ChannelEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .onos.e2t.e2.v1beta1.ChannelEventType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .onos.e2t.e2.v1beta1.Channel channel = 2 [(.gogoproto.nullable) = false];
  if (this->_internal_has_channel()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::channel(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.e2t.e2.v1beta1.ChannelEvent)
  return target;
}

size_t ChannelEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.e2t.e2.v1beta1.ChannelEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .onos.e2t.e2.v1beta1.Channel channel = 2 [(.gogoproto.nullable) = false];
  if (this->_internal_has_channel()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_);
  }

  // .onos.e2t.e2.v1beta1.ChannelEventType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChannelEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChannelEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChannelEvent::GetClassData() const { return &_class_data_; }

void ChannelEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChannelEvent *>(to)->MergeFrom(
      static_cast<const ChannelEvent &>(from));
}


void ChannelEvent::MergeFrom(const ChannelEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.e2t.e2.v1beta1.ChannelEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_channel()) {
    _internal_mutable_channel()->::onos::e2t::e2::v1beta1::Channel::MergeFrom(from._internal_channel());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelEvent::CopyFrom(const ChannelEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.e2t.e2.v1beta1.ChannelEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelEvent::IsInitialized() const {
  return true;
}

void ChannelEvent::InternalSwap(ChannelEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChannelEvent, type_)
      + sizeof(ChannelEvent::type_)
      - PROTOBUF_FIELD_OFFSET(ChannelEvent, channel_)>(
          reinterpret_cast<char*>(&channel_),
          reinterpret_cast<char*>(&other->channel_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelEvent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_getter, &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_once,
      file_level_metadata_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto[16]);
}

// ===================================================================

class GetSubscriptionRequest::_Internal {
 public:
};

GetSubscriptionRequest::GetSubscriptionRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.e2t.e2.v1beta1.GetSubscriptionRequest)
}
GetSubscriptionRequest::GetSubscriptionRequest(const GetSubscriptionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  subscription_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subscription_id().empty()) {
    subscription_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_subscription_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:onos.e2t.e2.v1beta1.GetSubscriptionRequest)
}

inline void GetSubscriptionRequest::SharedCtor() {
subscription_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

GetSubscriptionRequest::~GetSubscriptionRequest() {
  // @@protoc_insertion_point(destructor:onos.e2t.e2.v1beta1.GetSubscriptionRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetSubscriptionRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  subscription_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetSubscriptionRequest::ArenaDtor(void* object) {
  GetSubscriptionRequest* _this = reinterpret_cast< GetSubscriptionRequest* >(object);
  (void)_this;
}
void GetSubscriptionRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSubscriptionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetSubscriptionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.e2t.e2.v1beta1.GetSubscriptionRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subscription_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSubscriptionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string subscription_id = 1 [(.gogoproto.customname) = "SubscriptionID", (.gogoproto.casttype) = "SubscriptionID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_subscription_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.e2t.e2.v1beta1.GetSubscriptionRequest.subscription_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSubscriptionRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.e2t.e2.v1beta1.GetSubscriptionRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string subscription_id = 1 [(.gogoproto.customname) = "SubscriptionID", (.gogoproto.casttype) = "SubscriptionID"];
  if (!this->_internal_subscription_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subscription_id().data(), static_cast<int>(this->_internal_subscription_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.e2t.e2.v1beta1.GetSubscriptionRequest.subscription_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_subscription_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.e2t.e2.v1beta1.GetSubscriptionRequest)
  return target;
}

size_t GetSubscriptionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.e2t.e2.v1beta1.GetSubscriptionRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string subscription_id = 1 [(.gogoproto.customname) = "SubscriptionID", (.gogoproto.casttype) = "SubscriptionID"];
  if (!this->_internal_subscription_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subscription_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSubscriptionRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetSubscriptionRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSubscriptionRequest::GetClassData() const { return &_class_data_; }

void GetSubscriptionRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetSubscriptionRequest *>(to)->MergeFrom(
      static_cast<const GetSubscriptionRequest &>(from));
}


void GetSubscriptionRequest::MergeFrom(const GetSubscriptionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.e2t.e2.v1beta1.GetSubscriptionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_subscription_id().empty()) {
    _internal_set_subscription_id(from._internal_subscription_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSubscriptionRequest::CopyFrom(const GetSubscriptionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.e2t.e2.v1beta1.GetSubscriptionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSubscriptionRequest::IsInitialized() const {
  return true;
}

void GetSubscriptionRequest::InternalSwap(GetSubscriptionRequest* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &subscription_id_, lhs_arena,
      &other->subscription_id_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSubscriptionRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_getter, &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_once,
      file_level_metadata_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto[17]);
}

// ===================================================================

class GetSubscriptionResponse::_Internal {
 public:
  static const ::onos::e2t::e2::v1beta1::Subscription& subscription(const GetSubscriptionResponse* msg);
};

const ::onos::e2t::e2::v1beta1::Subscription&
GetSubscriptionResponse::_Internal::subscription(const GetSubscriptionResponse* msg) {
  return *msg->subscription_;
}
GetSubscriptionResponse::GetSubscriptionResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.e2t.e2.v1beta1.GetSubscriptionResponse)
}
GetSubscriptionResponse::GetSubscriptionResponse(const GetSubscriptionResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_subscription()) {
    subscription_ = new ::onos::e2t::e2::v1beta1::Subscription(*from.subscription_);
  } else {
    subscription_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:onos.e2t.e2.v1beta1.GetSubscriptionResponse)
}

inline void GetSubscriptionResponse::SharedCtor() {
subscription_ = nullptr;
}

GetSubscriptionResponse::~GetSubscriptionResponse() {
  // @@protoc_insertion_point(destructor:onos.e2t.e2.v1beta1.GetSubscriptionResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetSubscriptionResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete subscription_;
}

void GetSubscriptionResponse::ArenaDtor(void* object) {
  GetSubscriptionResponse* _this = reinterpret_cast< GetSubscriptionResponse* >(object);
  (void)_this;
}
void GetSubscriptionResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetSubscriptionResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetSubscriptionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.e2t.e2.v1beta1.GetSubscriptionResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && subscription_ != nullptr) {
    delete subscription_;
  }
  subscription_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetSubscriptionResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .onos.e2t.e2.v1beta1.Subscription subscription = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscription(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* GetSubscriptionResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.e2t.e2.v1beta1.GetSubscriptionResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .onos.e2t.e2.v1beta1.Subscription subscription = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_subscription()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::subscription(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.e2t.e2.v1beta1.GetSubscriptionResponse)
  return target;
}

size_t GetSubscriptionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.e2t.e2.v1beta1.GetSubscriptionResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .onos.e2t.e2.v1beta1.Subscription subscription = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_subscription()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *subscription_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetSubscriptionResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetSubscriptionResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetSubscriptionResponse::GetClassData() const { return &_class_data_; }

void GetSubscriptionResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<GetSubscriptionResponse *>(to)->MergeFrom(
      static_cast<const GetSubscriptionResponse &>(from));
}


void GetSubscriptionResponse::MergeFrom(const GetSubscriptionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.e2t.e2.v1beta1.GetSubscriptionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_subscription()) {
    _internal_mutable_subscription()->::onos::e2t::e2::v1beta1::Subscription::MergeFrom(from._internal_subscription());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetSubscriptionResponse::CopyFrom(const GetSubscriptionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.e2t.e2.v1beta1.GetSubscriptionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSubscriptionResponse::IsInitialized() const {
  return true;
}

void GetSubscriptionResponse::InternalSwap(GetSubscriptionResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(subscription_, other->subscription_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetSubscriptionResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_getter, &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_once,
      file_level_metadata_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto[18]);
}

// ===================================================================

class ListSubscriptionsRequest::_Internal {
 public:
};

ListSubscriptionsRequest::ListSubscriptionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:onos.e2t.e2.v1beta1.ListSubscriptionsRequest)
}
ListSubscriptionsRequest::ListSubscriptionsRequest(const ListSubscriptionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:onos.e2t.e2.v1beta1.ListSubscriptionsRequest)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListSubscriptionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListSubscriptionsRequest::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata ListSubscriptionsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_getter, &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_once,
      file_level_metadata_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto[19]);
}

// ===================================================================

class ListSubscriptionsResponse::_Internal {
 public:
};

ListSubscriptionsResponse::ListSubscriptionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  subscriptions_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.e2t.e2.v1beta1.ListSubscriptionsResponse)
}
ListSubscriptionsResponse::ListSubscriptionsResponse(const ListSubscriptionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      subscriptions_(from.subscriptions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:onos.e2t.e2.v1beta1.ListSubscriptionsResponse)
}

inline void ListSubscriptionsResponse::SharedCtor() {
}

ListSubscriptionsResponse::~ListSubscriptionsResponse() {
  // @@protoc_insertion_point(destructor:onos.e2t.e2.v1beta1.ListSubscriptionsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListSubscriptionsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListSubscriptionsResponse::ArenaDtor(void* object) {
  ListSubscriptionsResponse* _this = reinterpret_cast< ListSubscriptionsResponse* >(object);
  (void)_this;
}
void ListSubscriptionsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListSubscriptionsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListSubscriptionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.e2t.e2.v1beta1.ListSubscriptionsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subscriptions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListSubscriptionsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .onos.e2t.e2.v1beta1.Subscription subscriptions = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subscriptions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ListSubscriptionsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.e2t.e2.v1beta1.ListSubscriptionsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .onos.e2t.e2.v1beta1.Subscription subscriptions = 1 [(.gogoproto.nullable) = false];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_subscriptions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_subscriptions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.e2t.e2.v1beta1.ListSubscriptionsResponse)
  return target;
}

size_t ListSubscriptionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.e2t.e2.v1beta1.ListSubscriptionsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .onos.e2t.e2.v1beta1.Subscription subscriptions = 1 [(.gogoproto.nullable) = false];
  total_size += 1UL * this->_internal_subscriptions_size();
  for (const auto& msg : this->subscriptions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListSubscriptionsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListSubscriptionsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListSubscriptionsResponse::GetClassData() const { return &_class_data_; }

void ListSubscriptionsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ListSubscriptionsResponse *>(to)->MergeFrom(
      static_cast<const ListSubscriptionsResponse &>(from));
}


void ListSubscriptionsResponse::MergeFrom(const ListSubscriptionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.e2t.e2.v1beta1.ListSubscriptionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  subscriptions_.MergeFrom(from.subscriptions_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListSubscriptionsResponse::CopyFrom(const ListSubscriptionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.e2t.e2.v1beta1.ListSubscriptionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListSubscriptionsResponse::IsInitialized() const {
  return true;
}

void ListSubscriptionsResponse::InternalSwap(ListSubscriptionsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  subscriptions_.InternalSwap(&other->subscriptions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListSubscriptionsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_getter, &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_once,
      file_level_metadata_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto[20]);
}

// ===================================================================

class WatchSubscriptionsRequest::_Internal {
 public:
};

WatchSubscriptionsRequest::WatchSubscriptionsRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.e2t.e2.v1beta1.WatchSubscriptionsRequest)
}
WatchSubscriptionsRequest::WatchSubscriptionsRequest(const WatchSubscriptionsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  no_replay_ = from.no_replay_;
  // @@protoc_insertion_point(copy_constructor:onos.e2t.e2.v1beta1.WatchSubscriptionsRequest)
}

inline void WatchSubscriptionsRequest::SharedCtor() {
no_replay_ = false;
}

WatchSubscriptionsRequest::~WatchSubscriptionsRequest() {
  // @@protoc_insertion_point(destructor:onos.e2t.e2.v1beta1.WatchSubscriptionsRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WatchSubscriptionsRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void WatchSubscriptionsRequest::ArenaDtor(void* object) {
  WatchSubscriptionsRequest* _this = reinterpret_cast< WatchSubscriptionsRequest* >(object);
  (void)_this;
}
void WatchSubscriptionsRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WatchSubscriptionsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WatchSubscriptionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.e2t.e2.v1beta1.WatchSubscriptionsRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  no_replay_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WatchSubscriptionsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool no_replay = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          no_replay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WatchSubscriptionsRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.e2t.e2.v1beta1.WatchSubscriptionsRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool no_replay = 1;
  if (this->_internal_no_replay() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_no_replay(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.e2t.e2.v1beta1.WatchSubscriptionsRequest)
  return target;
}

size_t WatchSubscriptionsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.e2t.e2.v1beta1.WatchSubscriptionsRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool no_replay = 1;
  if (this->_internal_no_replay() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WatchSubscriptionsRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WatchSubscriptionsRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WatchSubscriptionsRequest::GetClassData() const { return &_class_data_; }

void WatchSubscriptionsRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WatchSubscriptionsRequest *>(to)->MergeFrom(
      static_cast<const WatchSubscriptionsRequest &>(from));
}


void WatchSubscriptionsRequest::MergeFrom(const WatchSubscriptionsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.e2t.e2.v1beta1.WatchSubscriptionsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_no_replay() != 0) {
    _internal_set_no_replay(from._internal_no_replay());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WatchSubscriptionsRequest::CopyFrom(const WatchSubscriptionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.e2t.e2.v1beta1.WatchSubscriptionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchSubscriptionsRequest::IsInitialized() const {
  return true;
}

void WatchSubscriptionsRequest::InternalSwap(WatchSubscriptionsRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(no_replay_, other->no_replay_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchSubscriptionsRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_getter, &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_once,
      file_level_metadata_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto[21]);
}

// ===================================================================

class WatchSubscriptionsResponse::_Internal {
 public:
  static const ::onos::e2t::e2::v1beta1::SubscriptionEvent& event(const WatchSubscriptionsResponse* msg);
};

const ::onos::e2t::e2::v1beta1::SubscriptionEvent&
WatchSubscriptionsResponse::_Internal::event(const WatchSubscriptionsResponse* msg) {
  return *msg->event_;
}
WatchSubscriptionsResponse::WatchSubscriptionsResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.e2t.e2.v1beta1.WatchSubscriptionsResponse)
}
WatchSubscriptionsResponse::WatchSubscriptionsResponse(const WatchSubscriptionsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_event()) {
    event_ = new ::onos::e2t::e2::v1beta1::SubscriptionEvent(*from.event_);
  } else {
    event_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:onos.e2t.e2.v1beta1.WatchSubscriptionsResponse)
}

inline void WatchSubscriptionsResponse::SharedCtor() {
event_ = nullptr;
}

WatchSubscriptionsResponse::~WatchSubscriptionsResponse() {
  // @@protoc_insertion_point(destructor:onos.e2t.e2.v1beta1.WatchSubscriptionsResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void WatchSubscriptionsResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete event_;
}

void WatchSubscriptionsResponse::ArenaDtor(void* object) {
  WatchSubscriptionsResponse* _this = reinterpret_cast< WatchSubscriptionsResponse* >(object);
  (void)_this;
}
void WatchSubscriptionsResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WatchSubscriptionsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void WatchSubscriptionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.e2t.e2.v1beta1.WatchSubscriptionsResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && event_ != nullptr) {
    delete event_;
  }
  event_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WatchSubscriptionsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .onos.e2t.e2.v1beta1.SubscriptionEvent event = 1 [(.gogoproto.nullable) = false];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_event(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* WatchSubscriptionsResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.e2t.e2.v1beta1.WatchSubscriptionsResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .onos.e2t.e2.v1beta1.SubscriptionEvent event = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_event()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::event(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.e2t.e2.v1beta1.WatchSubscriptionsResponse)
  return target;
}

size_t WatchSubscriptionsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.e2t.e2.v1beta1.WatchSubscriptionsResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .onos.e2t.e2.v1beta1.SubscriptionEvent event = 1 [(.gogoproto.nullable) = false];
  if (this->_internal_has_event()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *event_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData WatchSubscriptionsResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    WatchSubscriptionsResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*WatchSubscriptionsResponse::GetClassData() const { return &_class_data_; }

void WatchSubscriptionsResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<WatchSubscriptionsResponse *>(to)->MergeFrom(
      static_cast<const WatchSubscriptionsResponse &>(from));
}


void WatchSubscriptionsResponse::MergeFrom(const WatchSubscriptionsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.e2t.e2.v1beta1.WatchSubscriptionsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_event()) {
    _internal_mutable_event()->::onos::e2t::e2::v1beta1::SubscriptionEvent::MergeFrom(from._internal_event());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void WatchSubscriptionsResponse::CopyFrom(const WatchSubscriptionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.e2t.e2.v1beta1.WatchSubscriptionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WatchSubscriptionsResponse::IsInitialized() const {
  return true;
}

void WatchSubscriptionsResponse::InternalSwap(WatchSubscriptionsResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(event_, other->event_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WatchSubscriptionsResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_getter, &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_once,
      file_level_metadata_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto[22]);
}

// ===================================================================

class SubscriptionEvent::_Internal {
 public:
  static const ::onos::e2t::e2::v1beta1::Subscription& subscription(const SubscriptionEvent* msg);
};

const ::onos::e2t::e2::v1beta1::Subscription&
SubscriptionEvent::_Internal::subscription(const SubscriptionEvent* msg) {
  return *msg->subscription_;
}
SubscriptionEvent::SubscriptionEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.e2t.e2.v1beta1.SubscriptionEvent)
}
SubscriptionEvent::SubscriptionEvent(const SubscriptionEvent& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_subscription()) {
    subscription_ = new ::onos::e2t::e2::v1beta1::Subscription(*from.subscription_);
  } else {
    subscription_ = nullptr;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:onos.e2t.e2.v1beta1.SubscriptionEvent)
}

inline void SubscriptionEvent::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&subscription_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&subscription_)) + sizeof(type_));
}

SubscriptionEvent::~SubscriptionEvent() {
  // @@protoc_insertion_point(destructor:onos.e2t.e2.v1beta1.SubscriptionEvent)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SubscriptionEvent::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete subscription_;
}

void SubscriptionEvent::ArenaDtor(void* object) {
  SubscriptionEvent* _this = reinterpret_cast< SubscriptionEvent* >(object);
  (void)_this;
}
void SubscriptionEvent::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscriptionEvent::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscriptionEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.e2t.e2.v1beta1.SubscriptionEvent)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && subscription_ != nullptr) {
    delete subscription_;
  }
  subscription_ = nullptr;
  type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscriptionEvent::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .onos.e2t.e2.v1beta1.SubscriptionEventType type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::onos::e2t::e2::v1beta1::SubscriptionEventType>(val));
        } else
          goto handle_unusual;
        continue;
      // .onos.e2t.e2.v1beta1.Subscription subscription = 2 [(.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscription(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscriptionEvent::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.e2t.e2.v1beta1.SubscriptionEvent)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .onos.e2t.e2.v1beta1.SubscriptionEventType type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .onos.e2t.e2.v1beta1.Subscription subscription = 2 [(.gogoproto.nullable) = false];
  if (this->_internal_has_subscription()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::subscription(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.e2t.e2.v1beta1.SubscriptionEvent)
  return target;
}

size_t SubscriptionEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.e2t.e2.v1beta1.SubscriptionEvent)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .onos.e2t.e2.v1beta1.Subscription subscription = 2 [(.gogoproto.nullable) = false];
  if (this->_internal_has_subscription()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *subscription_);
  }

  // .onos.e2t.e2.v1beta1.SubscriptionEventType type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscriptionEvent::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SubscriptionEvent::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscriptionEvent::GetClassData() const { return &_class_data_; }

void SubscriptionEvent::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SubscriptionEvent *>(to)->MergeFrom(
      static_cast<const SubscriptionEvent &>(from));
}


void SubscriptionEvent::MergeFrom(const SubscriptionEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.e2t.e2.v1beta1.SubscriptionEvent)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_subscription()) {
    _internal_mutable_subscription()->::onos::e2t::e2::v1beta1::Subscription::MergeFrom(from._internal_subscription());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscriptionEvent::CopyFrom(const SubscriptionEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.e2t.e2.v1beta1.SubscriptionEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionEvent::IsInitialized() const {
  return true;
}

void SubscriptionEvent::InternalSwap(SubscriptionEvent* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubscriptionEvent, type_)
      + sizeof(SubscriptionEvent::type_)
      - PROTOBUF_FIELD_OFFSET(SubscriptionEvent, subscription_)>(
          reinterpret_cast<char*>(&subscription_),
          reinterpret_cast<char*>(&other->subscription_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscriptionEvent::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_getter, &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_once,
      file_level_metadata_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto[23]);
}

// ===================================================================

class ChannelMeta::_Internal {
 public:
  static const ::onos::e2t::e2::v1beta1::ServiceModel& service_model(const ChannelMeta* msg);
};

const ::onos::e2t::e2::v1beta1::ServiceModel&
ChannelMeta::_Internal::service_model(const ChannelMeta* msg) {
  return *msg->service_model_;
}
void ChannelMeta::clear_service_model() {
  if (GetArenaForAllocation() == nullptr && service_model_ != nullptr) {
    delete service_model_;
  }
  service_model_ = nullptr;
}
ChannelMeta::ChannelMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  finalizers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.e2t.e2.v1beta1.ChannelMeta)
}
ChannelMeta::ChannelMeta(const ChannelMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      finalizers_(from.finalizers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_id().empty()) {
    app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_id(), 
      GetArenaForAllocation());
  }
  app_instance_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    app_instance_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_app_instance_id().empty()) {
    app_instance_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_instance_id(), 
      GetArenaForAllocation());
  }
  e2_node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    e2_node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_e2_node_id().empty()) {
    e2_node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_e2_node_id(), 
      GetArenaForAllocation());
  }
  transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    transaction_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_transaction_id().empty()) {
    transaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_transaction_id(), 
      GetArenaForAllocation());
  }
  subscription_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_subscription_id().empty()) {
    subscription_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_subscription_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_service_model()) {
    service_model_ = new ::onos::e2t::e2::v1beta1::ServiceModel(*from.service_model_);
  } else {
    service_model_ = nullptr;
  }
  ::memcpy(&revision_, &from.revision_,
    static_cast<size_t>(reinterpret_cast<char*>(&encoding_) -
    reinterpret_cast<char*>(&revision_)) + sizeof(encoding_));
  // @@protoc_insertion_point(copy_constructor:onos.e2t.e2.v1beta1.ChannelMeta)
}

inline void ChannelMeta::SharedCtor() {
app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
app_instance_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  app_instance_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
e2_node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  e2_node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  transaction_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
subscription_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  subscription_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&service_model_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&encoding_) -
    reinterpret_cast<char*>(&service_model_)) + sizeof(encoding_));
}

ChannelMeta::~ChannelMeta() {
  // @@protoc_insertion_point(destructor:onos.e2t.e2.v1beta1.ChannelMeta)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChannelMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_instance_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  e2_node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transaction_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  subscription_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete service_model_;
}

void ChannelMeta::ArenaDtor(void* object) {
  ChannelMeta* _this = reinterpret_cast< ChannelMeta* >(object);
  (void)_this;
}
void ChannelMeta::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChannelMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.e2t.e2.v1beta1.ChannelMeta)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  finalizers_.Clear();
  app_id_.ClearToEmpty();
  app_instance_id_.ClearToEmpty();
  e2_node_id_.ClearToEmpty();
  transaction_id_.ClearToEmpty();
  subscription_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && service_model_ != nullptr) {
    delete service_model_;
  }
  service_model_ = nullptr;
  ::memset(&revision_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&encoding_) -
      reinterpret_cast<char*>(&revision_)) + sizeof(encoding_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string app_id = 1 [(.gogoproto.customname) = "AppID", (.gogoproto.casttype) = "AppID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.e2t.e2.v1beta1.ChannelMeta.app_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string app_instance_id = 2 [(.gogoproto.customname) = "AppInstanceID", (.gogoproto.casttype) = "AppInstanceID"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_app_instance_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.e2t.e2.v1beta1.ChannelMeta.app_instance_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string e2_node_id = 3 [(.gogoproto.customname) = "E2NodeID", (.gogoproto.casttype) = "E2NodeID"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_e2_node_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.e2t.e2.v1beta1.ChannelMeta.e2_node_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string transaction_id = 4 [(.gogoproto.customname) = "TransactionID", (.gogoproto.casttype) = "TransactionID"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          auto str = _internal_mutable_transaction_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.e2t.e2.v1beta1.ChannelMeta.transaction_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string subscription_id = 5 [(.gogoproto.customname) = "SubscriptionID", (.gogoproto.casttype) = "SubscriptionID"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_subscription_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.e2t.e2.v1beta1.ChannelMeta.subscription_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.e2t.e2.v1beta1.ServiceModel service_model = 6 [(.gogoproto.nullable) = false];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_service_model(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.e2t.e2.v1beta1.Encoding encoding = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_encoding(static_cast<::onos::e2t::e2::v1beta1::Encoding>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 revision = 8 [(.gogoproto.casttype) = "Revision"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string finalizers = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_finalizers();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.e2t.e2.v1beta1.ChannelMeta.finalizers"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChannelMeta::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.e2t.e2.v1beta1.ChannelMeta)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string app_id = 1 [(.gogoproto.customname) = "AppID", (.gogoproto.casttype) = "AppID"];
  if (!this->_internal_app_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.e2t.e2.v1beta1.ChannelMeta.app_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_app_id(), target);
  }

  // string app_instance_id = 2 [(.gogoproto.customname) = "AppInstanceID", (.gogoproto.casttype) = "AppInstanceID"];
  if (!this->_internal_app_instance_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_instance_id().data(), static_cast<int>(this->_internal_app_instance_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.e2t.e2.v1beta1.ChannelMeta.app_instance_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_app_instance_id(), target);
  }

  // string e2_node_id = 3 [(.gogoproto.customname) = "E2NodeID", (.gogoproto.casttype) = "E2NodeID"];
  if (!this->_internal_e2_node_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_e2_node_id().data(), static_cast<int>(this->_internal_e2_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.e2t.e2.v1beta1.ChannelMeta.e2_node_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_e2_node_id(), target);
  }

  // string transaction_id = 4 [(.gogoproto.customname) = "TransactionID", (.gogoproto.casttype) = "TransactionID"];
  if (!this->_internal_transaction_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_transaction_id().data(), static_cast<int>(this->_internal_transaction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.e2t.e2.v1beta1.ChannelMeta.transaction_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_transaction_id(), target);
  }

  // string subscription_id = 5 [(.gogoproto.customname) = "SubscriptionID", (.gogoproto.casttype) = "SubscriptionID"];
  if (!this->_internal_subscription_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_subscription_id().data(), static_cast<int>(this->_internal_subscription_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.e2t.e2.v1beta1.ChannelMeta.subscription_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_subscription_id(), target);
  }

  // .onos.e2t.e2.v1beta1.ServiceModel service_model = 6 [(.gogoproto.nullable) = false];
  if (this->_internal_has_service_model()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::service_model(this), target, stream);
  }

  // .onos.e2t.e2.v1beta1.Encoding encoding = 7;
  if (this->_internal_encoding() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_encoding(), target);
  }

  // uint64 revision = 8 [(.gogoproto.casttype) = "Revision"];
  if (this->_internal_revision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(8, this->_internal_revision(), target);
  }

  // repeated string finalizers = 9;
  for (int i = 0, n = this->_internal_finalizers_size(); i < n; i++) {
    const auto& s = this->_internal_finalizers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.e2t.e2.v1beta1.ChannelMeta.finalizers");
    target = stream->WriteString(9, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.e2t.e2.v1beta1.ChannelMeta)
  return target;
}

size_t ChannelMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.e2t.e2.v1beta1.ChannelMeta)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string finalizers = 9;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(finalizers_.size());
  for (int i = 0, n = finalizers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      finalizers_.Get(i));
  }

  // string app_id = 1 [(.gogoproto.customname) = "AppID", (.gogoproto.casttype) = "AppID"];
  if (!this->_internal_app_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string app_instance_id = 2 [(.gogoproto.customname) = "AppInstanceID", (.gogoproto.casttype) = "AppInstanceID"];
  if (!this->_internal_app_instance_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_instance_id());
  }

  // string e2_node_id = 3 [(.gogoproto.customname) = "E2NodeID", (.gogoproto.casttype) = "E2NodeID"];
  if (!this->_internal_e2_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_e2_node_id());
  }

  // string transaction_id = 4 [(.gogoproto.customname) = "TransactionID", (.gogoproto.casttype) = "TransactionID"];
  if (!this->_internal_transaction_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transaction_id());
  }

  // string subscription_id = 5 [(.gogoproto.customname) = "SubscriptionID", (.gogoproto.casttype) = "SubscriptionID"];
  if (!this->_internal_subscription_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_subscription_id());
  }

  // .onos.e2t.e2.v1beta1.ServiceModel service_model = 6 [(.gogoproto.nullable) = false];
  if (this->_internal_has_service_model()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *service_model_);
  }

  // uint64 revision = 8 [(.gogoproto.casttype) = "Revision"];
  if (this->_internal_revision() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_revision());
  }

  // .onos.e2t.e2.v1beta1.Encoding encoding = 7;
  if (this->_internal_encoding() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_encoding());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChannelMeta::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChannelMeta::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChannelMeta::GetClassData() const { return &_class_data_; }

void ChannelMeta::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChannelMeta *>(to)->MergeFrom(
      static_cast<const ChannelMeta &>(from));
}


void ChannelMeta::MergeFrom(const ChannelMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.e2t.e2.v1beta1.ChannelMeta)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  finalizers_.MergeFrom(from.finalizers_);
  if (!from._internal_app_id().empty()) {
    _internal_set_app_id(from._internal_app_id());
  }
  if (!from._internal_app_instance_id().empty()) {
    _internal_set_app_instance_id(from._internal_app_instance_id());
  }
  if (!from._internal_e2_node_id().empty()) {
    _internal_set_e2_node_id(from._internal_e2_node_id());
  }
  if (!from._internal_transaction_id().empty()) {
    _internal_set_transaction_id(from._internal_transaction_id());
  }
  if (!from._internal_subscription_id().empty()) {
    _internal_set_subscription_id(from._internal_subscription_id());
  }
  if (from._internal_has_service_model()) {
    _internal_mutable_service_model()->::onos::e2t::e2::v1beta1::ServiceModel::MergeFrom(from._internal_service_model());
  }
  if (from._internal_revision() != 0) {
    _internal_set_revision(from._internal_revision());
  }
  if (from._internal_encoding() != 0) {
    _internal_set_encoding(from._internal_encoding());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelMeta::CopyFrom(const ChannelMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.e2t.e2.v1beta1.ChannelMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelMeta::IsInitialized() const {
  return true;
}

void ChannelMeta::InternalSwap(ChannelMeta* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  finalizers_.InternalSwap(&other->finalizers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &app_id_, lhs_arena,
      &other->app_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &app_instance_id_, lhs_arena,
      &other->app_instance_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &e2_node_id_, lhs_arena,
      &other->e2_node_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &transaction_id_, lhs_arena,
      &other->transaction_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &subscription_id_, lhs_arena,
      &other->subscription_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChannelMeta, encoding_)
      + sizeof(ChannelMeta::encoding_)
      - PROTOBUF_FIELD_OFFSET(ChannelMeta, service_model_)>(
          reinterpret_cast<char*>(&service_model_),
          reinterpret_cast<char*>(&other->service_model_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelMeta::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_getter, &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_once,
      file_level_metadata_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto[24]);
}

// ===================================================================

class Channel::_Internal {
 public:
  static const ::onos::e2t::e2::v1beta1::ChannelMeta& meta(const Channel* msg);
  static const ::onos::e2t::e2::v1beta1::ChannelSpec& spec(const Channel* msg);
  static const ::onos::e2t::e2::v1beta1::ChannelStatus& status(const Channel* msg);
};

const ::onos::e2t::e2::v1beta1::ChannelMeta&
Channel::_Internal::meta(const Channel* msg) {
  return *msg->meta_;
}
const ::onos::e2t::e2::v1beta1::ChannelSpec&
Channel::_Internal::spec(const Channel* msg) {
  return *msg->spec_;
}
const ::onos::e2t::e2::v1beta1::ChannelStatus&
Channel::_Internal::status(const Channel* msg) {
  return *msg->status_;
}
Channel::Channel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.e2t.e2.v1beta1.Channel)
}
Channel::Channel(const Channel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_meta()) {
    meta_ = new ::onos::e2t::e2::v1beta1::ChannelMeta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  if (from._internal_has_spec()) {
    spec_ = new ::onos::e2t::e2::v1beta1::ChannelSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::onos::e2t::e2::v1beta1::ChannelStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:onos.e2t.e2.v1beta1.Channel)
}

inline void Channel::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&meta_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&meta_)) + sizeof(status_));
}

Channel::~Channel() {
  // @@protoc_insertion_point(destructor:onos.e2t.e2.v1beta1.Channel)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Channel::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete meta_;
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete status_;
}

void Channel::ArenaDtor(void* object) {
  Channel* _this = reinterpret_cast< Channel* >(object);
  (void)_this;
}
void Channel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Channel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Channel::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.e2t.e2.v1beta1.Channel)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Channel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.casttype) = "ChannelID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.e2t.e2.v1beta1.Channel.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.e2t.e2.v1beta1.ChannelMeta meta = 2 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_meta(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.e2t.e2.v1beta1.ChannelSpec spec = 3 [(.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.e2t.e2.v1beta1.ChannelStatus status = 4 [(.gogoproto.nullable) = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Channel::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.e2t.e2.v1beta1.Channel)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.casttype) = "ChannelID"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.e2t.e2.v1beta1.Channel.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .onos.e2t.e2.v1beta1.ChannelMeta meta = 2 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
  if (this->_internal_has_meta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::meta(this), target, stream);
  }

  // .onos.e2t.e2.v1beta1.ChannelSpec spec = 3 [(.gogoproto.nullable) = false];
  if (this->_internal_has_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::spec(this), target, stream);
  }

  // .onos.e2t.e2.v1beta1.ChannelStatus status = 4 [(.gogoproto.nullable) = false];
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.e2t.e2.v1beta1.Channel)
  return target;
}

size_t Channel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.e2t.e2.v1beta1.Channel)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.casttype) = "ChannelID"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .onos.e2t.e2.v1beta1.ChannelMeta meta = 2 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
  if (this->_internal_has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  // .onos.e2t.e2.v1beta1.ChannelSpec spec = 3 [(.gogoproto.nullable) = false];
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spec_);
  }

  // .onos.e2t.e2.v1beta1.ChannelStatus status = 4 [(.gogoproto.nullable) = false];
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Channel::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Channel::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Channel::GetClassData() const { return &_class_data_; }

void Channel::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Channel *>(to)->MergeFrom(
      static_cast<const Channel &>(from));
}


void Channel::MergeFrom(const Channel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.e2t.e2.v1beta1.Channel)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_has_meta()) {
    _internal_mutable_meta()->::onos::e2t::e2::v1beta1::ChannelMeta::MergeFrom(from._internal_meta());
  }
  if (from._internal_has_spec()) {
    _internal_mutable_spec()->::onos::e2t::e2::v1beta1::ChannelSpec::MergeFrom(from._internal_spec());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::onos::e2t::e2::v1beta1::ChannelStatus::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Channel::CopyFrom(const Channel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.e2t.e2.v1beta1.Channel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Channel::IsInitialized() const {
  return true;
}

void Channel::InternalSwap(Channel* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Channel, status_)
      + sizeof(Channel::status_)
      - PROTOBUF_FIELD_OFFSET(Channel, meta_)>(
          reinterpret_cast<char*>(&meta_),
          reinterpret_cast<char*>(&other->meta_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Channel::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_getter, &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_once,
      file_level_metadata_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto[25]);
}

// ===================================================================

class ChannelSpec::_Internal {
 public:
  static const ::onos::e2t::e2::v1beta1::SubscriptionSpec& subscription(const ChannelSpec* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& transaction_timeout(const ChannelSpec* msg);
};

const ::onos::e2t::e2::v1beta1::SubscriptionSpec&
ChannelSpec::_Internal::subscription(const ChannelSpec* msg) {
  return *msg->subscription_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
ChannelSpec::_Internal::transaction_timeout(const ChannelSpec* msg) {
  return *msg->transaction_timeout_;
}
void ChannelSpec::clear_transaction_timeout() {
  if (GetArenaForAllocation() == nullptr && transaction_timeout_ != nullptr) {
    delete transaction_timeout_;
  }
  transaction_timeout_ = nullptr;
}
ChannelSpec::ChannelSpec(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.e2t.e2.v1beta1.ChannelSpec)
}
ChannelSpec::ChannelSpec(const ChannelSpec& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_subscription()) {
    subscription_ = new ::onos::e2t::e2::v1beta1::SubscriptionSpec(*from.subscription_);
  } else {
    subscription_ = nullptr;
  }
  if (from._internal_has_transaction_timeout()) {
    transaction_timeout_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.transaction_timeout_);
  } else {
    transaction_timeout_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:onos.e2t.e2.v1beta1.ChannelSpec)
}

inline void ChannelSpec::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&subscription_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&transaction_timeout_) -
    reinterpret_cast<char*>(&subscription_)) + sizeof(transaction_timeout_));
}

ChannelSpec::~ChannelSpec() {
  // @@protoc_insertion_point(destructor:onos.e2t.e2.v1beta1.ChannelSpec)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChannelSpec::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete subscription_;
  if (this != internal_default_instance()) delete transaction_timeout_;
}

void ChannelSpec::ArenaDtor(void* object) {
  ChannelSpec* _this = reinterpret_cast< ChannelSpec* >(object);
  (void)_this;
}
void ChannelSpec::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelSpec::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChannelSpec::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.e2t.e2.v1beta1.ChannelSpec)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && subscription_ != nullptr) {
    delete subscription_;
  }
  subscription_ = nullptr;
  if (GetArenaForAllocation() == nullptr && transaction_timeout_ != nullptr) {
    delete transaction_timeout_;
  }
  transaction_timeout_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelSpec::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .onos.e2t.e2.v1beta1.SubscriptionSpec subscription = 1 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_subscription(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration transaction_timeout = 2 [(.gogoproto.stdduration) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction_timeout(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChannelSpec::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.e2t.e2.v1beta1.ChannelSpec)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .onos.e2t.e2.v1beta1.SubscriptionSpec subscription = 1 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
  if (this->_internal_has_subscription()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::subscription(this), target, stream);
  }

  // .google.protobuf.Duration transaction_timeout = 2 [(.gogoproto.stdduration) = true];
  if (this->_internal_has_transaction_timeout()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::transaction_timeout(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.e2t.e2.v1beta1.ChannelSpec)
  return target;
}

size_t ChannelSpec::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.e2t.e2.v1beta1.ChannelSpec)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .onos.e2t.e2.v1beta1.SubscriptionSpec subscription = 1 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
  if (this->_internal_has_subscription()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *subscription_);
  }

  // .google.protobuf.Duration transaction_timeout = 2 [(.gogoproto.stdduration) = true];
  if (this->_internal_has_transaction_timeout()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_timeout_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChannelSpec::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChannelSpec::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChannelSpec::GetClassData() const { return &_class_data_; }

void ChannelSpec::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChannelSpec *>(to)->MergeFrom(
      static_cast<const ChannelSpec &>(from));
}


void ChannelSpec::MergeFrom(const ChannelSpec& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.e2t.e2.v1beta1.ChannelSpec)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_subscription()) {
    _internal_mutable_subscription()->::onos::e2t::e2::v1beta1::SubscriptionSpec::MergeFrom(from._internal_subscription());
  }
  if (from._internal_has_transaction_timeout()) {
    _internal_mutable_transaction_timeout()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_transaction_timeout());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelSpec::CopyFrom(const ChannelSpec& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.e2t.e2.v1beta1.ChannelSpec)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelSpec::IsInitialized() const {
  return true;
}

void ChannelSpec::InternalSwap(ChannelSpec* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChannelSpec, transaction_timeout_)
      + sizeof(ChannelSpec::transaction_timeout_)
      - PROTOBUF_FIELD_OFFSET(ChannelSpec, subscription_)>(
          reinterpret_cast<char*>(&subscription_),
          reinterpret_cast<char*>(&other->subscription_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelSpec::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_getter, &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_once,
      file_level_metadata_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto[26]);
}

// ===================================================================

class ChannelStatus::_Internal {
 public:
  static const ::onos::e2t::e2::v1beta1::Error& error(const ChannelStatus* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& timestamp(const ChannelStatus* msg);
};

const ::onos::e2t::e2::v1beta1::Error&
ChannelStatus::_Internal::error(const ChannelStatus* msg) {
  return *msg->error_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ChannelStatus::_Internal::timestamp(const ChannelStatus* msg) {
  return *msg->timestamp_;
}
void ChannelStatus::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
void ChannelStatus::clear_timestamp() {
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
ChannelStatus::ChannelStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.e2t.e2.v1beta1.ChannelStatus)
}
ChannelStatus::ChannelStatus(const ChannelStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  master_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    master_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_master().empty()) {
    master_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_master(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_error()) {
    error_ = new ::onos::e2t::e2::v1beta1::Error(*from.error_);
  } else {
    error_ = nullptr;
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  ::memcpy(&phase_, &from.phase_,
    static_cast<size_t>(reinterpret_cast<char*>(&term_) -
    reinterpret_cast<char*>(&phase_)) + sizeof(term_));
  // @@protoc_insertion_point(copy_constructor:onos.e2t.e2.v1beta1.ChannelStatus)
}

inline void ChannelStatus::SharedCtor() {
master_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  master_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&error_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&term_) -
    reinterpret_cast<char*>(&error_)) + sizeof(term_));
}

ChannelStatus::~ChannelStatus() {
  // @@protoc_insertion_point(destructor:onos.e2t.e2.v1beta1.ChannelStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChannelStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  master_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete error_;
  if (this != internal_default_instance()) delete timestamp_;
}

void ChannelStatus::ArenaDtor(void* object) {
  ChannelStatus* _this = reinterpret_cast< ChannelStatus* >(object);
  (void)_this;
}
void ChannelStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChannelStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.e2t.e2.v1beta1.ChannelStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  master_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
  if (GetArenaForAllocation() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  ::memset(&phase_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&term_) -
      reinterpret_cast<char*>(&phase_)) + sizeof(term_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .onos.e2t.e2.v1beta1.ChannelPhase phase = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_phase(static_cast<::onos::e2t::e2::v1beta1::ChannelPhase>(val));
        } else
          goto handle_unusual;
        continue;
      // .onos.e2t.e2.v1beta1.ChannelState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::onos::e2t::e2::v1beta1::ChannelState>(val));
        } else
          goto handle_unusual;
        continue;
      // .onos.e2t.e2.v1beta1.Error error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp timestamp = 4 [(.gogoproto.stdtime) = true];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint64 term = 5 [(.gogoproto.casttype) = "TermID"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string master = 6 [(.gogoproto.casttype) = "MasterID"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_master();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.e2t.e2.v1beta1.ChannelStatus.master"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChannelStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.e2t.e2.v1beta1.ChannelStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .onos.e2t.e2.v1beta1.ChannelPhase phase = 1;
  if (this->_internal_phase() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_phase(), target);
  }

  // .onos.e2t.e2.v1beta1.ChannelState state = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  // .onos.e2t.e2.v1beta1.Error error = 3;
  if (this->_internal_has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::error(this), target, stream);
  }

  // .google.protobuf.Timestamp timestamp = 4 [(.gogoproto.stdtime) = true];
  if (this->_internal_has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::timestamp(this), target, stream);
  }

  // uint64 term = 5 [(.gogoproto.casttype) = "TermID"];
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_term(), target);
  }

  // string master = 6 [(.gogoproto.casttype) = "MasterID"];
  if (!this->_internal_master().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_master().data(), static_cast<int>(this->_internal_master().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.e2t.e2.v1beta1.ChannelStatus.master");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_master(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.e2t.e2.v1beta1.ChannelStatus)
  return target;
}

size_t ChannelStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.e2t.e2.v1beta1.ChannelStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string master = 6 [(.gogoproto.casttype) = "MasterID"];
  if (!this->_internal_master().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_master());
  }

  // .onos.e2t.e2.v1beta1.Error error = 3;
  if (this->_internal_has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *error_);
  }

  // .google.protobuf.Timestamp timestamp = 4 [(.gogoproto.stdtime) = true];
  if (this->_internal_has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  // .onos.e2t.e2.v1beta1.ChannelPhase phase = 1;
  if (this->_internal_phase() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_phase());
  }

  // .onos.e2t.e2.v1beta1.ChannelState state = 2;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  // uint64 term = 5 [(.gogoproto.casttype) = "TermID"];
  if (this->_internal_term() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_term());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChannelStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChannelStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChannelStatus::GetClassData() const { return &_class_data_; }

void ChannelStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChannelStatus *>(to)->MergeFrom(
      static_cast<const ChannelStatus &>(from));
}


void ChannelStatus::MergeFrom(const ChannelStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.e2t.e2.v1beta1.ChannelStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_master().empty()) {
    _internal_set_master(from._internal_master());
  }
  if (from._internal_has_error()) {
    _internal_mutable_error()->::onos::e2t::e2::v1beta1::Error::MergeFrom(from._internal_error());
  }
  if (from._internal_has_timestamp()) {
    _internal_mutable_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_timestamp());
  }
  if (from._internal_phase() != 0) {
    _internal_set_phase(from._internal_phase());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from._internal_term() != 0) {
    _internal_set_term(from._internal_term());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChannelStatus::CopyFrom(const ChannelStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.e2t.e2.v1beta1.ChannelStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelStatus::IsInitialized() const {
  return true;
}

void ChannelStatus::InternalSwap(ChannelStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &master_, lhs_arena,
      &other->master_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ChannelStatus, term_)
      + sizeof(ChannelStatus::term_)
      - PROTOBUF_FIELD_OFFSET(ChannelStatus, error_)>(
          reinterpret_cast<char*>(&error_),
          reinterpret_cast<char*>(&other->error_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_getter, &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_once,
      file_level_metadata_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto[27]);
}

// ===================================================================

class SubscriptionMeta::_Internal {
 public:
  static const ::onos::e2t::e2::v1beta1::ServiceModel& service_model(const SubscriptionMeta* msg);
};

const ::onos::e2t::e2::v1beta1::ServiceModel&
SubscriptionMeta::_Internal::service_model(const SubscriptionMeta* msg) {
  return *msg->service_model_;
}
void SubscriptionMeta::clear_service_model() {
  if (GetArenaForAllocation() == nullptr && service_model_ != nullptr) {
    delete service_model_;
  }
  service_model_ = nullptr;
}
SubscriptionMeta::SubscriptionMeta(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  finalizers_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.e2t.e2.v1beta1.SubscriptionMeta)
}
SubscriptionMeta::SubscriptionMeta(const SubscriptionMeta& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      finalizers_(from.finalizers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  e2_node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    e2_node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_e2_node_id().empty()) {
    e2_node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_e2_node_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_service_model()) {
    service_model_ = new ::onos::e2t::e2::v1beta1::ServiceModel(*from.service_model_);
  } else {
    service_model_ = nullptr;
  }
  ::memcpy(&revision_, &from.revision_,
    static_cast<size_t>(reinterpret_cast<char*>(&encoding_) -
    reinterpret_cast<char*>(&revision_)) + sizeof(encoding_));
  // @@protoc_insertion_point(copy_constructor:onos.e2t.e2.v1beta1.SubscriptionMeta)
}

inline void SubscriptionMeta::SharedCtor() {
e2_node_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  e2_node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&service_model_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&encoding_) -
    reinterpret_cast<char*>(&service_model_)) + sizeof(encoding_));
}

SubscriptionMeta::~SubscriptionMeta() {
  // @@protoc_insertion_point(destructor:onos.e2t.e2.v1beta1.SubscriptionMeta)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SubscriptionMeta::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  e2_node_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete service_model_;
}

void SubscriptionMeta::ArenaDtor(void* object) {
  SubscriptionMeta* _this = reinterpret_cast< SubscriptionMeta* >(object);
  (void)_this;
}
void SubscriptionMeta::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscriptionMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscriptionMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.e2t.e2.v1beta1.SubscriptionMeta)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  finalizers_.Clear();
  e2_node_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && service_model_ != nullptr) {
    delete service_model_;
  }
  service_model_ = nullptr;
  ::memset(&revision_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&encoding_) -
      reinterpret_cast<char*>(&revision_)) + sizeof(encoding_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscriptionMeta::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string e2_node_id = 1 [(.gogoproto.customname) = "E2NodeID", (.gogoproto.casttype) = "E2NodeID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_e2_node_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.e2t.e2.v1beta1.SubscriptionMeta.e2_node_id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.e2t.e2.v1beta1.ServiceModel service_model = 2 [(.gogoproto.nullable) = false];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_service_model(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.e2t.e2.v1beta1.Encoding encoding = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_encoding(static_cast<::onos::e2t::e2::v1beta1::Encoding>(val));
        } else
          goto handle_unusual;
        continue;
      // uint64 revision = 4 [(.gogoproto.casttype) = "Revision"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          revision_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string finalizers = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_finalizers();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.e2t.e2.v1beta1.SubscriptionMeta.finalizers"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscriptionMeta::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.e2t.e2.v1beta1.SubscriptionMeta)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string e2_node_id = 1 [(.gogoproto.customname) = "E2NodeID", (.gogoproto.casttype) = "E2NodeID"];
  if (!this->_internal_e2_node_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_e2_node_id().data(), static_cast<int>(this->_internal_e2_node_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.e2t.e2.v1beta1.SubscriptionMeta.e2_node_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_e2_node_id(), target);
  }

  // .onos.e2t.e2.v1beta1.ServiceModel service_model = 2 [(.gogoproto.nullable) = false];
  if (this->_internal_has_service_model()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::service_model(this), target, stream);
  }

  // .onos.e2t.e2.v1beta1.Encoding encoding = 3;
  if (this->_internal_encoding() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_encoding(), target);
  }

  // uint64 revision = 4 [(.gogoproto.casttype) = "Revision"];
  if (this->_internal_revision() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(4, this->_internal_revision(), target);
  }

  // repeated string finalizers = 5;
  for (int i = 0, n = this->_internal_finalizers_size(); i < n; i++) {
    const auto& s = this->_internal_finalizers(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.e2t.e2.v1beta1.SubscriptionMeta.finalizers");
    target = stream->WriteString(5, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.e2t.e2.v1beta1.SubscriptionMeta)
  return target;
}

size_t SubscriptionMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.e2t.e2.v1beta1.SubscriptionMeta)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string finalizers = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(finalizers_.size());
  for (int i = 0, n = finalizers_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      finalizers_.Get(i));
  }

  // string e2_node_id = 1 [(.gogoproto.customname) = "E2NodeID", (.gogoproto.casttype) = "E2NodeID"];
  if (!this->_internal_e2_node_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_e2_node_id());
  }

  // .onos.e2t.e2.v1beta1.ServiceModel service_model = 2 [(.gogoproto.nullable) = false];
  if (this->_internal_has_service_model()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *service_model_);
  }

  // uint64 revision = 4 [(.gogoproto.casttype) = "Revision"];
  if (this->_internal_revision() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_revision());
  }

  // .onos.e2t.e2.v1beta1.Encoding encoding = 3;
  if (this->_internal_encoding() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_encoding());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscriptionMeta::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SubscriptionMeta::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscriptionMeta::GetClassData() const { return &_class_data_; }

void SubscriptionMeta::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SubscriptionMeta *>(to)->MergeFrom(
      static_cast<const SubscriptionMeta &>(from));
}


void SubscriptionMeta::MergeFrom(const SubscriptionMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.e2t.e2.v1beta1.SubscriptionMeta)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  finalizers_.MergeFrom(from.finalizers_);
  if (!from._internal_e2_node_id().empty()) {
    _internal_set_e2_node_id(from._internal_e2_node_id());
  }
  if (from._internal_has_service_model()) {
    _internal_mutable_service_model()->::onos::e2t::e2::v1beta1::ServiceModel::MergeFrom(from._internal_service_model());
  }
  if (from._internal_revision() != 0) {
    _internal_set_revision(from._internal_revision());
  }
  if (from._internal_encoding() != 0) {
    _internal_set_encoding(from._internal_encoding());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscriptionMeta::CopyFrom(const SubscriptionMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.e2t.e2.v1beta1.SubscriptionMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionMeta::IsInitialized() const {
  return true;
}

void SubscriptionMeta::InternalSwap(SubscriptionMeta* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  finalizers_.InternalSwap(&other->finalizers_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &e2_node_id_, lhs_arena,
      &other->e2_node_id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubscriptionMeta, encoding_)
      + sizeof(SubscriptionMeta::encoding_)
      - PROTOBUF_FIELD_OFFSET(SubscriptionMeta, service_model_)>(
          reinterpret_cast<char*>(&service_model_),
          reinterpret_cast<char*>(&other->service_model_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscriptionMeta::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_getter, &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_once,
      file_level_metadata_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto[28]);
}

// ===================================================================

class Subscription::_Internal {
 public:
  static const ::onos::e2t::e2::v1beta1::SubscriptionMeta& meta(const Subscription* msg);
  static const ::onos::e2t::e2::v1beta1::SubscriptionSpec& spec(const Subscription* msg);
  static const ::onos::e2t::e2::v1beta1::SubscriptionStatus& status(const Subscription* msg);
};

const ::onos::e2t::e2::v1beta1::SubscriptionMeta&
Subscription::_Internal::meta(const Subscription* msg) {
  return *msg->meta_;
}
const ::onos::e2t::e2::v1beta1::SubscriptionSpec&
Subscription::_Internal::spec(const Subscription* msg) {
  return *msg->spec_;
}
const ::onos::e2t::e2::v1beta1::SubscriptionStatus&
Subscription::_Internal::status(const Subscription* msg) {
  return *msg->status_;
}
Subscription::Subscription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.e2t.e2.v1beta1.Subscription)
}
Subscription::Subscription(const Subscription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_meta()) {
    meta_ = new ::onos::e2t::e2::v1beta1::SubscriptionMeta(*from.meta_);
  } else {
    meta_ = nullptr;
  }
  if (from._internal_has_spec()) {
    spec_ = new ::onos::e2t::e2::v1beta1::SubscriptionSpec(*from.spec_);
  } else {
    spec_ = nullptr;
  }
  if (from._internal_has_status()) {
    status_ = new ::onos::e2t::e2::v1beta1::SubscriptionStatus(*from.status_);
  } else {
    status_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:onos.e2t.e2.v1beta1.Subscription)
}

inline void Subscription::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&meta_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&meta_)) + sizeof(status_));
}

Subscription::~Subscription() {
  // @@protoc_insertion_point(destructor:onos.e2t.e2.v1beta1.Subscription)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Subscription::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete meta_;
  if (this != internal_default_instance()) delete spec_;
  if (this != internal_default_instance()) delete status_;
}

void Subscription::ArenaDtor(void* object) {
  Subscription* _this = reinterpret_cast< Subscription* >(object);
  (void)_this;
}
void Subscription::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Subscription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Subscription::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.e2t.e2.v1beta1.Subscription)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && meta_ != nullptr) {
    delete meta_;
  }
  meta_ = nullptr;
  if (GetArenaForAllocation() == nullptr && spec_ != nullptr) {
    delete spec_;
  }
  spec_ = nullptr;
  if (GetArenaForAllocation() == nullptr && status_ != nullptr) {
    delete status_;
  }
  status_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Subscription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.casttype) = "SubscriptionID"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.e2t.e2.v1beta1.Subscription.id"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.e2t.e2.v1beta1.SubscriptionMeta meta = 2 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_meta(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.e2t.e2.v1beta1.SubscriptionSpec spec = 3 [(.gogoproto.nullable) = false];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_spec(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .onos.e2t.e2.v1beta1.SubscriptionStatus status = 4 [(.gogoproto.nullable) = false];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_status(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Subscription::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.e2t.e2.v1beta1.Subscription)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.casttype) = "SubscriptionID"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.e2t.e2.v1beta1.Subscription.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // .onos.e2t.e2.v1beta1.SubscriptionMeta meta = 2 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
  if (this->_internal_has_meta()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::meta(this), target, stream);
  }

  // .onos.e2t.e2.v1beta1.SubscriptionSpec spec = 3 [(.gogoproto.nullable) = false];
  if (this->_internal_has_spec()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::spec(this), target, stream);
  }

  // .onos.e2t.e2.v1beta1.SubscriptionStatus status = 4 [(.gogoproto.nullable) = false];
  if (this->_internal_has_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.e2t.e2.v1beta1.Subscription)
  return target;
}

size_t Subscription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.e2t.e2.v1beta1.Subscription)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [(.gogoproto.customname) = "ID", (.gogoproto.casttype) = "SubscriptionID"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // .onos.e2t.e2.v1beta1.SubscriptionMeta meta = 2 [(.gogoproto.nullable) = false, (.gogoproto.embed) = true];
  if (this->_internal_has_meta()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *meta_);
  }

  // .onos.e2t.e2.v1beta1.SubscriptionSpec spec = 3 [(.gogoproto.nullable) = false];
  if (this->_internal_has_spec()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *spec_);
  }

  // .onos.e2t.e2.v1beta1.SubscriptionStatus status = 4 [(.gogoproto.nullable) = false];
  if (this->_internal_has_status()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *status_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Subscription::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Subscription::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Subscription::GetClassData() const { return &_class_data_; }

void Subscription::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Subscription *>(to)->MergeFrom(
      static_cast<const Subscription &>(from));
}


void Subscription::MergeFrom(const Subscription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.e2t.e2.v1beta1.Subscription)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_has_meta()) {
    _internal_mutable_meta()->::onos::e2t::e2::v1beta1::SubscriptionMeta::MergeFrom(from._internal_meta());
  }
  if (from._internal_has_spec()) {
    _internal_mutable_spec()->::onos::e2t::e2::v1beta1::SubscriptionSpec::MergeFrom(from._internal_spec());
  }
  if (from._internal_has_status()) {
    _internal_mutable_status()->::onos::e2t::e2::v1beta1::SubscriptionStatus::MergeFrom(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Subscription::CopyFrom(const Subscription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.e2t.e2.v1beta1.Subscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Subscription::IsInitialized() const {
  return true;
}

void Subscription::InternalSwap(Subscription* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, lhs_arena,
      &other->id_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Subscription, status_)
      + sizeof(Subscription::status_)
      - PROTOBUF_FIELD_OFFSET(Subscription, meta_)>(
          reinterpret_cast<char*>(&meta_),
          reinterpret_cast<char*>(&other->meta_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Subscription::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_getter, &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_once,
      file_level_metadata_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto[29]);
}

// ===================================================================

class SubscriptionStatus::_Internal {
 public:
  static const ::onos::e2t::e2::v1beta1::Error& error(const SubscriptionStatus* msg);
};

const ::onos::e2t::e2::v1beta1::Error&
SubscriptionStatus::_Internal::error(const SubscriptionStatus* msg) {
  return *msg->error_;
}
void SubscriptionStatus::clear_error() {
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
}
SubscriptionStatus::SubscriptionStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  channels_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:onos.e2t.e2.v1beta1.SubscriptionStatus)
}
SubscriptionStatus::SubscriptionStatus(const SubscriptionStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      channels_(from.channels_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  master_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    master_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_master().empty()) {
    master_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_master(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_error()) {
    error_ = new ::onos::e2t::e2::v1beta1::Error(*from.error_);
  } else {
    error_ = nullptr;
  }
  ::memcpy(&phase_, &from.phase_,
    static_cast<size_t>(reinterpret_cast<char*>(&term_) -
    reinterpret_cast<char*>(&phase_)) + sizeof(term_));
  // @@protoc_insertion_point(copy_constructor:onos.e2t.e2.v1beta1.SubscriptionStatus)
}

inline void SubscriptionStatus::SharedCtor() {
master_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  master_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&error_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&term_) -
    reinterpret_cast<char*>(&error_)) + sizeof(term_));
}

SubscriptionStatus::~SubscriptionStatus() {
  // @@protoc_insertion_point(destructor:onos.e2t.e2.v1beta1.SubscriptionStatus)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SubscriptionStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  master_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete error_;
}

void SubscriptionStatus::ArenaDtor(void* object) {
  SubscriptionStatus* _this = reinterpret_cast< SubscriptionStatus* >(object);
  (void)_this;
}
void SubscriptionStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubscriptionStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubscriptionStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:onos.e2t.e2.v1beta1.SubscriptionStatus)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_.Clear();
  master_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && error_ != nullptr) {
    delete error_;
  }
  error_ = nullptr;
  ::memset(&phase_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&term_) -
      reinterpret_cast<char*>(&phase_)) + sizeof(term_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubscriptionStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .onos.e2t.e2.v1beta1.SubscriptionPhase phase = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_phase(static_cast<::onos::e2t::e2::v1beta1::SubscriptionPhase>(val));
        } else
          goto handle_unusual;
        continue;
      // .onos.e2t.e2.v1beta1.SubscriptionState state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::onos::e2t::e2::v1beta1::SubscriptionState>(val));
        } else
          goto handle_unusual;
        continue;
      // .onos.e2t.e2.v1beta1.Error error = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string channels = 4 [(.gogoproto.casttype) = "ChannelID"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_channels();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.e2t.e2.v1beta1.SubscriptionStatus.channels"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // uint64 term = 5 [(.gogoproto.casttype) = "TermID"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          term_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string master = 6 [(.gogoproto.casttype) = "MasterID"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_master();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "onos.e2t.e2.v1beta1.SubscriptionStatus.master"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubscriptionStatus::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:onos.e2t.e2.v1beta1.SubscriptionStatus)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .onos.e2t.e2.v1beta1.SubscriptionPhase phase = 1;
  if (this->_internal_phase() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_phase(), target);
  }

  // .onos.e2t.e2.v1beta1.SubscriptionState state = 2;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_state(), target);
  }

  // .onos.e2t.e2.v1beta1.Error error = 3;
  if (this->_internal_has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::error(this), target, stream);
  }

  // repeated string channels = 4 [(.gogoproto.casttype) = "ChannelID"];
  for (int i = 0, n = this->_internal_channels_size(); i < n; i++) {
    const auto& s = this->_internal_channels(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.e2t.e2.v1beta1.SubscriptionStatus.channels");
    target = stream->WriteString(4, s, target);
  }

  // uint64 term = 5 [(.gogoproto.casttype) = "TermID"];
  if (this->_internal_term() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_term(), target);
  }

  // string master = 6 [(.gogoproto.casttype) = "MasterID"];
  if (!this->_internal_master().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_master().data(), static_cast<int>(this->_internal_master().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "onos.e2t.e2.v1beta1.SubscriptionStatus.master");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_master(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:onos.e2t.e2.v1beta1.SubscriptionStatus)
  return target;
}

size_t SubscriptionStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:onos.e2t.e2.v1beta1.SubscriptionStatus)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string channels = 4 [(.gogoproto.casttype) = "ChannelID"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(channels_.size());
  for (int i = 0, n = channels_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      channels_.Get(i));
  }

  // string master = 6 [(.gogoproto.casttype) = "MasterID"];
  if (!this->_internal_master().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_master());
  }

  // .onos.e2t.e2.v1beta1.Error error = 3;
  if (this->_internal_has_error()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *error_);
  }

  // .onos.e2t.e2.v1beta1.SubscriptionPhase phase = 1;
  if (this->_internal_phase() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_phase());
  }

  // .onos.e2t.e2.v1beta1.SubscriptionState state = 2;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  // uint64 term = 5 [(.gogoproto.casttype) = "TermID"];
  if (this->_internal_term() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_term());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubscriptionStatus::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SubscriptionStatus::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubscriptionStatus::GetClassData() const { return &_class_data_; }

void SubscriptionStatus::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SubscriptionStatus *>(to)->MergeFrom(
      static_cast<const SubscriptionStatus &>(from));
}


void SubscriptionStatus::MergeFrom(const SubscriptionStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:onos.e2t.e2.v1beta1.SubscriptionStatus)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
  if (!from._internal_master().empty()) {
    _internal_set_master(from._internal_master());
  }
  if (from._internal_has_error()) {
    _internal_mutable_error()->::onos::e2t::e2::v1beta1::Error::MergeFrom(from._internal_error());
  }
  if (from._internal_phase() != 0) {
    _internal_set_phase(from._internal_phase());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  if (from._internal_term() != 0) {
    _internal_set_term(from._internal_term());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubscriptionStatus::CopyFrom(const SubscriptionStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:onos.e2t.e2.v1beta1.SubscriptionStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscriptionStatus::IsInitialized() const {
  return true;
}

void SubscriptionStatus::InternalSwap(SubscriptionStatus* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  channels_.InternalSwap(&other->channels_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &master_, lhs_arena,
      &other->master_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubscriptionStatus, term_)
      + sizeof(SubscriptionStatus::term_)
      - PROTOBUF_FIELD_OFFSET(SubscriptionStatus, error_)>(
          reinterpret_cast<char*>(&error_),
          reinterpret_cast<char*>(&other->error_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscriptionStatus::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_getter, &descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto_once,
      file_level_metadata_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto[30]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1beta1
}  // namespace e2
}  // namespace e2t
}  // namespace onos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::onos::e2t::e2::v1beta1::SubscribeRequest* Arena::CreateMaybeMessage< ::onos::e2t::e2::v1beta1::SubscribeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::e2t::e2::v1beta1::SubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::e2t::e2::v1beta1::SubscribeResponse* Arena::CreateMaybeMessage< ::onos::e2t::e2::v1beta1::SubscribeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::e2t::e2::v1beta1::SubscribeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::e2t::e2::v1beta1::UnsubscribeRequest* Arena::CreateMaybeMessage< ::onos::e2t::e2::v1beta1::UnsubscribeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::e2t::e2::v1beta1::UnsubscribeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::e2t::e2::v1beta1::UnsubscribeResponse* Arena::CreateMaybeMessage< ::onos::e2t::e2::v1beta1::UnsubscribeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::e2t::e2::v1beta1::UnsubscribeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::e2t::e2::v1beta1::SubscriptionSpec* Arena::CreateMaybeMessage< ::onos::e2t::e2::v1beta1::SubscriptionSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::e2t::e2::v1beta1::SubscriptionSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::e2t::e2::v1beta1::EventTrigger* Arena::CreateMaybeMessage< ::onos::e2t::e2::v1beta1::EventTrigger >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::e2t::e2::v1beta1::EventTrigger >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::e2t::e2::v1beta1::Action* Arena::CreateMaybeMessage< ::onos::e2t::e2::v1beta1::Action >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::e2t::e2::v1beta1::Action >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::e2t::e2::v1beta1::SubsequentAction* Arena::CreateMaybeMessage< ::onos::e2t::e2::v1beta1::SubsequentAction >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::e2t::e2::v1beta1::SubsequentAction >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::e2t::e2::v1beta1::Acknowledgement* Arena::CreateMaybeMessage< ::onos::e2t::e2::v1beta1::Acknowledgement >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::e2t::e2::v1beta1::Acknowledgement >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::e2t::e2::v1beta1::Indication* Arena::CreateMaybeMessage< ::onos::e2t::e2::v1beta1::Indication >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::e2t::e2::v1beta1::Indication >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::e2t::e2::v1beta1::GetChannelRequest* Arena::CreateMaybeMessage< ::onos::e2t::e2::v1beta1::GetChannelRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::e2t::e2::v1beta1::GetChannelRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::e2t::e2::v1beta1::GetChannelResponse* Arena::CreateMaybeMessage< ::onos::e2t::e2::v1beta1::GetChannelResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::e2t::e2::v1beta1::GetChannelResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::e2t::e2::v1beta1::ListChannelsRequest* Arena::CreateMaybeMessage< ::onos::e2t::e2::v1beta1::ListChannelsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::e2t::e2::v1beta1::ListChannelsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::e2t::e2::v1beta1::ListChannelsResponse* Arena::CreateMaybeMessage< ::onos::e2t::e2::v1beta1::ListChannelsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::e2t::e2::v1beta1::ListChannelsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::e2t::e2::v1beta1::WatchChannelsRequest* Arena::CreateMaybeMessage< ::onos::e2t::e2::v1beta1::WatchChannelsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::e2t::e2::v1beta1::WatchChannelsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::e2t::e2::v1beta1::WatchChannelsResponse* Arena::CreateMaybeMessage< ::onos::e2t::e2::v1beta1::WatchChannelsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::e2t::e2::v1beta1::WatchChannelsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::e2t::e2::v1beta1::ChannelEvent* Arena::CreateMaybeMessage< ::onos::e2t::e2::v1beta1::ChannelEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::e2t::e2::v1beta1::ChannelEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::e2t::e2::v1beta1::GetSubscriptionRequest* Arena::CreateMaybeMessage< ::onos::e2t::e2::v1beta1::GetSubscriptionRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::e2t::e2::v1beta1::GetSubscriptionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::e2t::e2::v1beta1::GetSubscriptionResponse* Arena::CreateMaybeMessage< ::onos::e2t::e2::v1beta1::GetSubscriptionResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::e2t::e2::v1beta1::GetSubscriptionResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::e2t::e2::v1beta1::ListSubscriptionsRequest* Arena::CreateMaybeMessage< ::onos::e2t::e2::v1beta1::ListSubscriptionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::e2t::e2::v1beta1::ListSubscriptionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::e2t::e2::v1beta1::ListSubscriptionsResponse* Arena::CreateMaybeMessage< ::onos::e2t::e2::v1beta1::ListSubscriptionsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::e2t::e2::v1beta1::ListSubscriptionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::e2t::e2::v1beta1::WatchSubscriptionsRequest* Arena::CreateMaybeMessage< ::onos::e2t::e2::v1beta1::WatchSubscriptionsRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::e2t::e2::v1beta1::WatchSubscriptionsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::e2t::e2::v1beta1::WatchSubscriptionsResponse* Arena::CreateMaybeMessage< ::onos::e2t::e2::v1beta1::WatchSubscriptionsResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::e2t::e2::v1beta1::WatchSubscriptionsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::e2t::e2::v1beta1::SubscriptionEvent* Arena::CreateMaybeMessage< ::onos::e2t::e2::v1beta1::SubscriptionEvent >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::e2t::e2::v1beta1::SubscriptionEvent >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::e2t::e2::v1beta1::ChannelMeta* Arena::CreateMaybeMessage< ::onos::e2t::e2::v1beta1::ChannelMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::e2t::e2::v1beta1::ChannelMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::e2t::e2::v1beta1::Channel* Arena::CreateMaybeMessage< ::onos::e2t::e2::v1beta1::Channel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::e2t::e2::v1beta1::Channel >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::e2t::e2::v1beta1::ChannelSpec* Arena::CreateMaybeMessage< ::onos::e2t::e2::v1beta1::ChannelSpec >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::e2t::e2::v1beta1::ChannelSpec >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::e2t::e2::v1beta1::ChannelStatus* Arena::CreateMaybeMessage< ::onos::e2t::e2::v1beta1::ChannelStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::e2t::e2::v1beta1::ChannelStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::e2t::e2::v1beta1::SubscriptionMeta* Arena::CreateMaybeMessage< ::onos::e2t::e2::v1beta1::SubscriptionMeta >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::e2t::e2::v1beta1::SubscriptionMeta >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::e2t::e2::v1beta1::Subscription* Arena::CreateMaybeMessage< ::onos::e2t::e2::v1beta1::Subscription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::e2t::e2::v1beta1::Subscription >(arena);
}
template<> PROTOBUF_NOINLINE ::onos::e2t::e2::v1beta1::SubscriptionStatus* Arena::CreateMaybeMessage< ::onos::e2t::e2::v1beta1::SubscriptionStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::onos::e2t::e2::v1beta1::SubscriptionStatus >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
