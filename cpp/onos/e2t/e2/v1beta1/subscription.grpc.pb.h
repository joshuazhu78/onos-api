// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: onos/e2t/e2/v1beta1/subscription.proto
// Original file comments:
// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0
//
#ifndef GRPC_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto__INCLUDED
#define GRPC_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto__INCLUDED

#include "onos/e2t/e2/v1beta1/subscription.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace onos {
namespace e2t {
namespace e2 {
namespace v1beta1 {

class SubscriptionService final {
 public:
  static constexpr char const* service_full_name() {
    return "onos.e2t.e2.v1beta1.SubscriptionService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    std::unique_ptr< ::grpc::ClientReaderInterface< ::onos::e2t::e2::v1beta1::SubscribeResponse>> Subscribe(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::SubscribeRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::onos::e2t::e2::v1beta1::SubscribeResponse>>(SubscribeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::onos::e2t::e2::v1beta1::SubscribeResponse>> AsyncSubscribe(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::onos::e2t::e2::v1beta1::SubscribeResponse>>(AsyncSubscribeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::onos::e2t::e2::v1beta1::SubscribeResponse>> PrepareAsyncSubscribe(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::SubscribeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::onos::e2t::e2::v1beta1::SubscribeResponse>>(PrepareAsyncSubscribeRaw(context, request, cq));
    }
    virtual ::grpc::Status Unsubscribe(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::UnsubscribeRequest& request, ::onos::e2t::e2::v1beta1::UnsubscribeResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::e2t::e2::v1beta1::UnsubscribeResponse>> AsyncUnsubscribe(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::UnsubscribeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::e2t::e2::v1beta1::UnsubscribeResponse>>(AsyncUnsubscribeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::e2t::e2::v1beta1::UnsubscribeResponse>> PrepareAsyncUnsubscribe(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::UnsubscribeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::e2t::e2::v1beta1::UnsubscribeResponse>>(PrepareAsyncUnsubscribeRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void Subscribe(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::SubscribeRequest* request, ::grpc::ClientReadReactor< ::onos::e2t::e2::v1beta1::SubscribeResponse>* reactor) = 0;
      virtual void Unsubscribe(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::UnsubscribeRequest* request, ::onos::e2t::e2::v1beta1::UnsubscribeResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Unsubscribe(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::UnsubscribeRequest* request, ::onos::e2t::e2::v1beta1::UnsubscribeResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderInterface< ::onos::e2t::e2::v1beta1::SubscribeResponse>* SubscribeRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::SubscribeRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::onos::e2t::e2::v1beta1::SubscribeResponse>* AsyncSubscribeRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::onos::e2t::e2::v1beta1::SubscribeResponse>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::SubscribeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::onos::e2t::e2::v1beta1::UnsubscribeResponse>* AsyncUnsubscribeRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::UnsubscribeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::onos::e2t::e2::v1beta1::UnsubscribeResponse>* PrepareAsyncUnsubscribeRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::UnsubscribeRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReader< ::onos::e2t::e2::v1beta1::SubscribeResponse>> Subscribe(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::SubscribeRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::onos::e2t::e2::v1beta1::SubscribeResponse>>(SubscribeRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::onos::e2t::e2::v1beta1::SubscribeResponse>> AsyncSubscribe(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::onos::e2t::e2::v1beta1::SubscribeResponse>>(AsyncSubscribeRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::onos::e2t::e2::v1beta1::SubscribeResponse>> PrepareAsyncSubscribe(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::SubscribeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::onos::e2t::e2::v1beta1::SubscribeResponse>>(PrepareAsyncSubscribeRaw(context, request, cq));
    }
    ::grpc::Status Unsubscribe(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::UnsubscribeRequest& request, ::onos::e2t::e2::v1beta1::UnsubscribeResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::e2t::e2::v1beta1::UnsubscribeResponse>> AsyncUnsubscribe(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::UnsubscribeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::e2t::e2::v1beta1::UnsubscribeResponse>>(AsyncUnsubscribeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::e2t::e2::v1beta1::UnsubscribeResponse>> PrepareAsyncUnsubscribe(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::UnsubscribeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::e2t::e2::v1beta1::UnsubscribeResponse>>(PrepareAsyncUnsubscribeRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Subscribe(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::SubscribeRequest* request, ::grpc::ClientReadReactor< ::onos::e2t::e2::v1beta1::SubscribeResponse>* reactor) override;
      void Unsubscribe(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::UnsubscribeRequest* request, ::onos::e2t::e2::v1beta1::UnsubscribeResponse* response, std::function<void(::grpc::Status)>) override;
      void Unsubscribe(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::UnsubscribeRequest* request, ::onos::e2t::e2::v1beta1::UnsubscribeResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReader< ::onos::e2t::e2::v1beta1::SubscribeResponse>* SubscribeRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::SubscribeRequest& request) override;
    ::grpc::ClientAsyncReader< ::onos::e2t::e2::v1beta1::SubscribeResponse>* AsyncSubscribeRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::SubscribeRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::onos::e2t::e2::v1beta1::SubscribeResponse>* PrepareAsyncSubscribeRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::SubscribeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::onos::e2t::e2::v1beta1::UnsubscribeResponse>* AsyncUnsubscribeRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::UnsubscribeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::onos::e2t::e2::v1beta1::UnsubscribeResponse>* PrepareAsyncUnsubscribeRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::UnsubscribeRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Subscribe_;
    const ::grpc::internal::RpcMethod rpcmethod_Unsubscribe_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status Subscribe(::grpc::ServerContext* context, const ::onos::e2t::e2::v1beta1::SubscribeRequest* request, ::grpc::ServerWriter< ::onos::e2t::e2::v1beta1::SubscribeResponse>* writer);
    virtual ::grpc::Status Unsubscribe(::grpc::ServerContext* context, const ::onos::e2t::e2::v1beta1::UnsubscribeRequest* request, ::onos::e2t::e2::v1beta1::UnsubscribeResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Subscribe() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::onos::e2t::e2::v1beta1::SubscribeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribe(::grpc::ServerContext* context, ::onos::e2t::e2::v1beta1::SubscribeRequest* request, ::grpc::ServerAsyncWriter< ::onos::e2t::e2::v1beta1::SubscribeResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Unsubscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Unsubscribe() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Unsubscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unsubscribe(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::UnsubscribeRequest* /*request*/, ::onos::e2t::e2::v1beta1::UnsubscribeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnsubscribe(::grpc::ServerContext* context, ::onos::e2t::e2::v1beta1::UnsubscribeRequest* request, ::grpc::ServerAsyncResponseWriter< ::onos::e2t::e2::v1beta1::UnsubscribeResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Subscribe<WithAsyncMethod_Unsubscribe<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Subscribe() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::onos::e2t::e2::v1beta1::SubscribeRequest, ::onos::e2t::e2::v1beta1::SubscribeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::onos::e2t::e2::v1beta1::SubscribeRequest* request) { return this->Subscribe(context, request); }));
    }
    ~WithCallbackMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::onos::e2t::e2::v1beta1::SubscribeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::onos::e2t::e2::v1beta1::SubscribeResponse>* Subscribe(
      ::grpc::CallbackServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::SubscribeRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Unsubscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Unsubscribe() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::onos::e2t::e2::v1beta1::UnsubscribeRequest, ::onos::e2t::e2::v1beta1::UnsubscribeResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::onos::e2t::e2::v1beta1::UnsubscribeRequest* request, ::onos::e2t::e2::v1beta1::UnsubscribeResponse* response) { return this->Unsubscribe(context, request, response); }));}
    void SetMessageAllocatorFor_Unsubscribe(
        ::grpc::MessageAllocator< ::onos::e2t::e2::v1beta1::UnsubscribeRequest, ::onos::e2t::e2::v1beta1::UnsubscribeResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::onos::e2t::e2::v1beta1::UnsubscribeRequest, ::onos::e2t::e2::v1beta1::UnsubscribeResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Unsubscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unsubscribe(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::UnsubscribeRequest* /*request*/, ::onos::e2t::e2::v1beta1::UnsubscribeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Unsubscribe(
      ::grpc::CallbackServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::UnsubscribeRequest* /*request*/, ::onos::e2t::e2::v1beta1::UnsubscribeResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Subscribe<WithCallbackMethod_Unsubscribe<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Subscribe() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::onos::e2t::e2::v1beta1::SubscribeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Unsubscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Unsubscribe() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Unsubscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unsubscribe(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::UnsubscribeRequest* /*request*/, ::onos::e2t::e2::v1beta1::UnsubscribeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Subscribe() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::onos::e2t::e2::v1beta1::SubscribeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribe(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(0, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Unsubscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Unsubscribe() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Unsubscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unsubscribe(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::UnsubscribeRequest* /*request*/, ::onos::e2t::e2::v1beta1::UnsubscribeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUnsubscribe(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Subscribe() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->Subscribe(context, request); }));
    }
    ~WithRawCallbackMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::onos::e2t::e2::v1beta1::SubscribeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* Subscribe(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Unsubscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Unsubscribe() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Unsubscribe(context, request, response); }));
    }
    ~WithRawCallbackMethod_Unsubscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Unsubscribe(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::UnsubscribeRequest* /*request*/, ::onos::e2t::e2::v1beta1::UnsubscribeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Unsubscribe(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Unsubscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Unsubscribe() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::onos::e2t::e2::v1beta1::UnsubscribeRequest, ::onos::e2t::e2::v1beta1::UnsubscribeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::onos::e2t::e2::v1beta1::UnsubscribeRequest, ::onos::e2t::e2::v1beta1::UnsubscribeResponse>* streamer) {
                       return this->StreamedUnsubscribe(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Unsubscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Unsubscribe(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::UnsubscribeRequest* /*request*/, ::onos::e2t::e2::v1beta1::UnsubscribeResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUnsubscribe(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::onos::e2t::e2::v1beta1::UnsubscribeRequest,::onos::e2t::e2::v1beta1::UnsubscribeResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Unsubscribe<Service > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_Subscribe : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_Subscribe() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::onos::e2t::e2::v1beta1::SubscribeRequest, ::onos::e2t::e2::v1beta1::SubscribeResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::onos::e2t::e2::v1beta1::SubscribeRequest, ::onos::e2t::e2::v1beta1::SubscribeResponse>* streamer) {
                       return this->StreamedSubscribe(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_Subscribe() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Subscribe(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::SubscribeRequest* /*request*/, ::grpc::ServerWriter< ::onos::e2t::e2::v1beta1::SubscribeResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribe(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::onos::e2t::e2::v1beta1::SubscribeRequest,::onos::e2t::e2::v1beta1::SubscribeResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_Subscribe<Service > SplitStreamedService;
  typedef WithSplitStreamingMethod_Subscribe<WithStreamedUnaryMethod_Unsubscribe<Service > > StreamedService;
};

class SubscriptionAdminService final {
 public:
  static constexpr char const* service_full_name() {
    return "onos.e2t.e2.v1beta1.SubscriptionAdminService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetChannel(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::GetChannelRequest& request, ::onos::e2t::e2::v1beta1::GetChannelResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::e2t::e2::v1beta1::GetChannelResponse>> AsyncGetChannel(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::GetChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::e2t::e2::v1beta1::GetChannelResponse>>(AsyncGetChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::e2t::e2::v1beta1::GetChannelResponse>> PrepareAsyncGetChannel(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::GetChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::e2t::e2::v1beta1::GetChannelResponse>>(PrepareAsyncGetChannelRaw(context, request, cq));
    }
    virtual ::grpc::Status ListChannels(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::ListChannelsRequest& request, ::onos::e2t::e2::v1beta1::ListChannelsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::e2t::e2::v1beta1::ListChannelsResponse>> AsyncListChannels(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::ListChannelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::e2t::e2::v1beta1::ListChannelsResponse>>(AsyncListChannelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::e2t::e2::v1beta1::ListChannelsResponse>> PrepareAsyncListChannels(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::ListChannelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::e2t::e2::v1beta1::ListChannelsResponse>>(PrepareAsyncListChannelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::onos::e2t::e2::v1beta1::WatchChannelsResponse>> WatchChannels(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::WatchChannelsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::onos::e2t::e2::v1beta1::WatchChannelsResponse>>(WatchChannelsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::onos::e2t::e2::v1beta1::WatchChannelsResponse>> AsyncWatchChannels(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::WatchChannelsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::onos::e2t::e2::v1beta1::WatchChannelsResponse>>(AsyncWatchChannelsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::onos::e2t::e2::v1beta1::WatchChannelsResponse>> PrepareAsyncWatchChannels(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::WatchChannelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::onos::e2t::e2::v1beta1::WatchChannelsResponse>>(PrepareAsyncWatchChannelsRaw(context, request, cq));
    }
    virtual ::grpc::Status GetSubscription(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::GetSubscriptionRequest& request, ::onos::e2t::e2::v1beta1::GetSubscriptionResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::e2t::e2::v1beta1::GetSubscriptionResponse>> AsyncGetSubscription(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::GetSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::e2t::e2::v1beta1::GetSubscriptionResponse>>(AsyncGetSubscriptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::e2t::e2::v1beta1::GetSubscriptionResponse>> PrepareAsyncGetSubscription(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::GetSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::e2t::e2::v1beta1::GetSubscriptionResponse>>(PrepareAsyncGetSubscriptionRaw(context, request, cq));
    }
    virtual ::grpc::Status ListSubscriptions(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::ListSubscriptionsRequest& request, ::onos::e2t::e2::v1beta1::ListSubscriptionsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::e2t::e2::v1beta1::ListSubscriptionsResponse>> AsyncListSubscriptions(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::ListSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::e2t::e2::v1beta1::ListSubscriptionsResponse>>(AsyncListSubscriptionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::e2t::e2::v1beta1::ListSubscriptionsResponse>> PrepareAsyncListSubscriptions(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::ListSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::e2t::e2::v1beta1::ListSubscriptionsResponse>>(PrepareAsyncListSubscriptionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::onos::e2t::e2::v1beta1::WatchSubscriptionsResponse>> WatchSubscriptions(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::WatchSubscriptionsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::onos::e2t::e2::v1beta1::WatchSubscriptionsResponse>>(WatchSubscriptionsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::onos::e2t::e2::v1beta1::WatchSubscriptionsResponse>> AsyncWatchSubscriptions(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::WatchSubscriptionsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::onos::e2t::e2::v1beta1::WatchSubscriptionsResponse>>(AsyncWatchSubscriptionsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::onos::e2t::e2::v1beta1::WatchSubscriptionsResponse>> PrepareAsyncWatchSubscriptions(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::WatchSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::onos::e2t::e2::v1beta1::WatchSubscriptionsResponse>>(PrepareAsyncWatchSubscriptionsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetChannel(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::GetChannelRequest* request, ::onos::e2t::e2::v1beta1::GetChannelResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetChannel(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::GetChannelRequest* request, ::onos::e2t::e2::v1beta1::GetChannelResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListChannels(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::ListChannelsRequest* request, ::onos::e2t::e2::v1beta1::ListChannelsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListChannels(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::ListChannelsRequest* request, ::onos::e2t::e2::v1beta1::ListChannelsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void WatchChannels(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::WatchChannelsRequest* request, ::grpc::ClientReadReactor< ::onos::e2t::e2::v1beta1::WatchChannelsResponse>* reactor) = 0;
      virtual void GetSubscription(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::GetSubscriptionRequest* request, ::onos::e2t::e2::v1beta1::GetSubscriptionResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSubscription(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::GetSubscriptionRequest* request, ::onos::e2t::e2::v1beta1::GetSubscriptionResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void ListSubscriptions(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::ListSubscriptionsRequest* request, ::onos::e2t::e2::v1beta1::ListSubscriptionsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListSubscriptions(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::ListSubscriptionsRequest* request, ::onos::e2t::e2::v1beta1::ListSubscriptionsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void WatchSubscriptions(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::WatchSubscriptionsRequest* request, ::grpc::ClientReadReactor< ::onos::e2t::e2::v1beta1::WatchSubscriptionsResponse>* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::onos::e2t::e2::v1beta1::GetChannelResponse>* AsyncGetChannelRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::GetChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::onos::e2t::e2::v1beta1::GetChannelResponse>* PrepareAsyncGetChannelRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::GetChannelRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::onos::e2t::e2::v1beta1::ListChannelsResponse>* AsyncListChannelsRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::ListChannelsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::onos::e2t::e2::v1beta1::ListChannelsResponse>* PrepareAsyncListChannelsRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::ListChannelsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::onos::e2t::e2::v1beta1::WatchChannelsResponse>* WatchChannelsRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::WatchChannelsRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::onos::e2t::e2::v1beta1::WatchChannelsResponse>* AsyncWatchChannelsRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::WatchChannelsRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::onos::e2t::e2::v1beta1::WatchChannelsResponse>* PrepareAsyncWatchChannelsRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::WatchChannelsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::onos::e2t::e2::v1beta1::GetSubscriptionResponse>* AsyncGetSubscriptionRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::GetSubscriptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::onos::e2t::e2::v1beta1::GetSubscriptionResponse>* PrepareAsyncGetSubscriptionRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::GetSubscriptionRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::onos::e2t::e2::v1beta1::ListSubscriptionsResponse>* AsyncListSubscriptionsRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::ListSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::onos::e2t::e2::v1beta1::ListSubscriptionsResponse>* PrepareAsyncListSubscriptionsRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::ListSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::onos::e2t::e2::v1beta1::WatchSubscriptionsResponse>* WatchSubscriptionsRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::WatchSubscriptionsRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::onos::e2t::e2::v1beta1::WatchSubscriptionsResponse>* AsyncWatchSubscriptionsRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::WatchSubscriptionsRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::onos::e2t::e2::v1beta1::WatchSubscriptionsResponse>* PrepareAsyncWatchSubscriptionsRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::WatchSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetChannel(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::GetChannelRequest& request, ::onos::e2t::e2::v1beta1::GetChannelResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::e2t::e2::v1beta1::GetChannelResponse>> AsyncGetChannel(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::GetChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::e2t::e2::v1beta1::GetChannelResponse>>(AsyncGetChannelRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::e2t::e2::v1beta1::GetChannelResponse>> PrepareAsyncGetChannel(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::GetChannelRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::e2t::e2::v1beta1::GetChannelResponse>>(PrepareAsyncGetChannelRaw(context, request, cq));
    }
    ::grpc::Status ListChannels(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::ListChannelsRequest& request, ::onos::e2t::e2::v1beta1::ListChannelsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::e2t::e2::v1beta1::ListChannelsResponse>> AsyncListChannels(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::ListChannelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::e2t::e2::v1beta1::ListChannelsResponse>>(AsyncListChannelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::e2t::e2::v1beta1::ListChannelsResponse>> PrepareAsyncListChannels(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::ListChannelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::e2t::e2::v1beta1::ListChannelsResponse>>(PrepareAsyncListChannelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::onos::e2t::e2::v1beta1::WatchChannelsResponse>> WatchChannels(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::WatchChannelsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::onos::e2t::e2::v1beta1::WatchChannelsResponse>>(WatchChannelsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::onos::e2t::e2::v1beta1::WatchChannelsResponse>> AsyncWatchChannels(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::WatchChannelsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::onos::e2t::e2::v1beta1::WatchChannelsResponse>>(AsyncWatchChannelsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::onos::e2t::e2::v1beta1::WatchChannelsResponse>> PrepareAsyncWatchChannels(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::WatchChannelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::onos::e2t::e2::v1beta1::WatchChannelsResponse>>(PrepareAsyncWatchChannelsRaw(context, request, cq));
    }
    ::grpc::Status GetSubscription(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::GetSubscriptionRequest& request, ::onos::e2t::e2::v1beta1::GetSubscriptionResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::e2t::e2::v1beta1::GetSubscriptionResponse>> AsyncGetSubscription(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::GetSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::e2t::e2::v1beta1::GetSubscriptionResponse>>(AsyncGetSubscriptionRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::e2t::e2::v1beta1::GetSubscriptionResponse>> PrepareAsyncGetSubscription(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::GetSubscriptionRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::e2t::e2::v1beta1::GetSubscriptionResponse>>(PrepareAsyncGetSubscriptionRaw(context, request, cq));
    }
    ::grpc::Status ListSubscriptions(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::ListSubscriptionsRequest& request, ::onos::e2t::e2::v1beta1::ListSubscriptionsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::e2t::e2::v1beta1::ListSubscriptionsResponse>> AsyncListSubscriptions(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::ListSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::e2t::e2::v1beta1::ListSubscriptionsResponse>>(AsyncListSubscriptionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::e2t::e2::v1beta1::ListSubscriptionsResponse>> PrepareAsyncListSubscriptions(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::ListSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::e2t::e2::v1beta1::ListSubscriptionsResponse>>(PrepareAsyncListSubscriptionsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::onos::e2t::e2::v1beta1::WatchSubscriptionsResponse>> WatchSubscriptions(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::WatchSubscriptionsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::onos::e2t::e2::v1beta1::WatchSubscriptionsResponse>>(WatchSubscriptionsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::onos::e2t::e2::v1beta1::WatchSubscriptionsResponse>> AsyncWatchSubscriptions(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::WatchSubscriptionsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::onos::e2t::e2::v1beta1::WatchSubscriptionsResponse>>(AsyncWatchSubscriptionsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::onos::e2t::e2::v1beta1::WatchSubscriptionsResponse>> PrepareAsyncWatchSubscriptions(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::WatchSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::onos::e2t::e2::v1beta1::WatchSubscriptionsResponse>>(PrepareAsyncWatchSubscriptionsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetChannel(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::GetChannelRequest* request, ::onos::e2t::e2::v1beta1::GetChannelResponse* response, std::function<void(::grpc::Status)>) override;
      void GetChannel(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::GetChannelRequest* request, ::onos::e2t::e2::v1beta1::GetChannelResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListChannels(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::ListChannelsRequest* request, ::onos::e2t::e2::v1beta1::ListChannelsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListChannels(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::ListChannelsRequest* request, ::onos::e2t::e2::v1beta1::ListChannelsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void WatchChannels(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::WatchChannelsRequest* request, ::grpc::ClientReadReactor< ::onos::e2t::e2::v1beta1::WatchChannelsResponse>* reactor) override;
      void GetSubscription(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::GetSubscriptionRequest* request, ::onos::e2t::e2::v1beta1::GetSubscriptionResponse* response, std::function<void(::grpc::Status)>) override;
      void GetSubscription(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::GetSubscriptionRequest* request, ::onos::e2t::e2::v1beta1::GetSubscriptionResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListSubscriptions(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::ListSubscriptionsRequest* request, ::onos::e2t::e2::v1beta1::ListSubscriptionsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListSubscriptions(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::ListSubscriptionsRequest* request, ::onos::e2t::e2::v1beta1::ListSubscriptionsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void WatchSubscriptions(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::WatchSubscriptionsRequest* request, ::grpc::ClientReadReactor< ::onos::e2t::e2::v1beta1::WatchSubscriptionsResponse>* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::onos::e2t::e2::v1beta1::GetChannelResponse>* AsyncGetChannelRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::GetChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::onos::e2t::e2::v1beta1::GetChannelResponse>* PrepareAsyncGetChannelRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::GetChannelRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::onos::e2t::e2::v1beta1::ListChannelsResponse>* AsyncListChannelsRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::ListChannelsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::onos::e2t::e2::v1beta1::ListChannelsResponse>* PrepareAsyncListChannelsRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::ListChannelsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::onos::e2t::e2::v1beta1::WatchChannelsResponse>* WatchChannelsRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::WatchChannelsRequest& request) override;
    ::grpc::ClientAsyncReader< ::onos::e2t::e2::v1beta1::WatchChannelsResponse>* AsyncWatchChannelsRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::WatchChannelsRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::onos::e2t::e2::v1beta1::WatchChannelsResponse>* PrepareAsyncWatchChannelsRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::WatchChannelsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::onos::e2t::e2::v1beta1::GetSubscriptionResponse>* AsyncGetSubscriptionRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::GetSubscriptionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::onos::e2t::e2::v1beta1::GetSubscriptionResponse>* PrepareAsyncGetSubscriptionRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::GetSubscriptionRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::onos::e2t::e2::v1beta1::ListSubscriptionsResponse>* AsyncListSubscriptionsRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::ListSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::onos::e2t::e2::v1beta1::ListSubscriptionsResponse>* PrepareAsyncListSubscriptionsRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::ListSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::onos::e2t::e2::v1beta1::WatchSubscriptionsResponse>* WatchSubscriptionsRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::WatchSubscriptionsRequest& request) override;
    ::grpc::ClientAsyncReader< ::onos::e2t::e2::v1beta1::WatchSubscriptionsResponse>* AsyncWatchSubscriptionsRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::WatchSubscriptionsRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::onos::e2t::e2::v1beta1::WatchSubscriptionsResponse>* PrepareAsyncWatchSubscriptionsRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::v1beta1::WatchSubscriptionsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetChannel_;
    const ::grpc::internal::RpcMethod rpcmethod_ListChannels_;
    const ::grpc::internal::RpcMethod rpcmethod_WatchChannels_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSubscription_;
    const ::grpc::internal::RpcMethod rpcmethod_ListSubscriptions_;
    const ::grpc::internal::RpcMethod rpcmethod_WatchSubscriptions_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetChannel(::grpc::ServerContext* context, const ::onos::e2t::e2::v1beta1::GetChannelRequest* request, ::onos::e2t::e2::v1beta1::GetChannelResponse* response);
    virtual ::grpc::Status ListChannels(::grpc::ServerContext* context, const ::onos::e2t::e2::v1beta1::ListChannelsRequest* request, ::onos::e2t::e2::v1beta1::ListChannelsResponse* response);
    virtual ::grpc::Status WatchChannels(::grpc::ServerContext* context, const ::onos::e2t::e2::v1beta1::WatchChannelsRequest* request, ::grpc::ServerWriter< ::onos::e2t::e2::v1beta1::WatchChannelsResponse>* writer);
    virtual ::grpc::Status GetSubscription(::grpc::ServerContext* context, const ::onos::e2t::e2::v1beta1::GetSubscriptionRequest* request, ::onos::e2t::e2::v1beta1::GetSubscriptionResponse* response);
    virtual ::grpc::Status ListSubscriptions(::grpc::ServerContext* context, const ::onos::e2t::e2::v1beta1::ListSubscriptionsRequest* request, ::onos::e2t::e2::v1beta1::ListSubscriptionsResponse* response);
    virtual ::grpc::Status WatchSubscriptions(::grpc::ServerContext* context, const ::onos::e2t::e2::v1beta1::WatchSubscriptionsRequest* request, ::grpc::ServerWriter< ::onos::e2t::e2::v1beta1::WatchSubscriptionsResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetChannel() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChannel(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::GetChannelRequest* /*request*/, ::onos::e2t::e2::v1beta1::GetChannelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetChannel(::grpc::ServerContext* context, ::onos::e2t::e2::v1beta1::GetChannelRequest* request, ::grpc::ServerAsyncResponseWriter< ::onos::e2t::e2::v1beta1::GetChannelResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListChannels() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListChannels(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::ListChannelsRequest* /*request*/, ::onos::e2t::e2::v1beta1::ListChannelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListChannels(::grpc::ServerContext* context, ::onos::e2t::e2::v1beta1::ListChannelsRequest* request, ::grpc::ServerAsyncResponseWriter< ::onos::e2t::e2::v1beta1::ListChannelsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_WatchChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_WatchChannels() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_WatchChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WatchChannels(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::WatchChannelsRequest* /*request*/, ::grpc::ServerWriter< ::onos::e2t::e2::v1beta1::WatchChannelsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWatchChannels(::grpc::ServerContext* context, ::onos::e2t::e2::v1beta1::WatchChannelsRequest* request, ::grpc::ServerAsyncWriter< ::onos::e2t::e2::v1beta1::WatchChannelsResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSubscription() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubscription(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::GetSubscriptionRequest* /*request*/, ::onos::e2t::e2::v1beta1::GetSubscriptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSubscription(::grpc::ServerContext* context, ::onos::e2t::e2::v1beta1::GetSubscriptionRequest* request, ::grpc::ServerAsyncResponseWriter< ::onos::e2t::e2::v1beta1::GetSubscriptionResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListSubscriptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListSubscriptions() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_ListSubscriptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSubscriptions(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::ListSubscriptionsRequest* /*request*/, ::onos::e2t::e2::v1beta1::ListSubscriptionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListSubscriptions(::grpc::ServerContext* context, ::onos::e2t::e2::v1beta1::ListSubscriptionsRequest* request, ::grpc::ServerAsyncResponseWriter< ::onos::e2t::e2::v1beta1::ListSubscriptionsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_WatchSubscriptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_WatchSubscriptions() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_WatchSubscriptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WatchSubscriptions(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::WatchSubscriptionsRequest* /*request*/, ::grpc::ServerWriter< ::onos::e2t::e2::v1beta1::WatchSubscriptionsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWatchSubscriptions(::grpc::ServerContext* context, ::onos::e2t::e2::v1beta1::WatchSubscriptionsRequest* request, ::grpc::ServerAsyncWriter< ::onos::e2t::e2::v1beta1::WatchSubscriptionsResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetChannel<WithAsyncMethod_ListChannels<WithAsyncMethod_WatchChannels<WithAsyncMethod_GetSubscription<WithAsyncMethod_ListSubscriptions<WithAsyncMethod_WatchSubscriptions<Service > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetChannel() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::onos::e2t::e2::v1beta1::GetChannelRequest, ::onos::e2t::e2::v1beta1::GetChannelResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::onos::e2t::e2::v1beta1::GetChannelRequest* request, ::onos::e2t::e2::v1beta1::GetChannelResponse* response) { return this->GetChannel(context, request, response); }));}
    void SetMessageAllocatorFor_GetChannel(
        ::grpc::MessageAllocator< ::onos::e2t::e2::v1beta1::GetChannelRequest, ::onos::e2t::e2::v1beta1::GetChannelResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::onos::e2t::e2::v1beta1::GetChannelRequest, ::onos::e2t::e2::v1beta1::GetChannelResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChannel(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::GetChannelRequest* /*request*/, ::onos::e2t::e2::v1beta1::GetChannelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::GetChannelRequest* /*request*/, ::onos::e2t::e2::v1beta1::GetChannelResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListChannels() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::onos::e2t::e2::v1beta1::ListChannelsRequest, ::onos::e2t::e2::v1beta1::ListChannelsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::onos::e2t::e2::v1beta1::ListChannelsRequest* request, ::onos::e2t::e2::v1beta1::ListChannelsResponse* response) { return this->ListChannels(context, request, response); }));}
    void SetMessageAllocatorFor_ListChannels(
        ::grpc::MessageAllocator< ::onos::e2t::e2::v1beta1::ListChannelsRequest, ::onos::e2t::e2::v1beta1::ListChannelsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::onos::e2t::e2::v1beta1::ListChannelsRequest, ::onos::e2t::e2::v1beta1::ListChannelsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListChannels(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::ListChannelsRequest* /*request*/, ::onos::e2t::e2::v1beta1::ListChannelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListChannels(
      ::grpc::CallbackServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::ListChannelsRequest* /*request*/, ::onos::e2t::e2::v1beta1::ListChannelsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_WatchChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_WatchChannels() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::onos::e2t::e2::v1beta1::WatchChannelsRequest, ::onos::e2t::e2::v1beta1::WatchChannelsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::onos::e2t::e2::v1beta1::WatchChannelsRequest* request) { return this->WatchChannels(context, request); }));
    }
    ~WithCallbackMethod_WatchChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WatchChannels(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::WatchChannelsRequest* /*request*/, ::grpc::ServerWriter< ::onos::e2t::e2::v1beta1::WatchChannelsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::onos::e2t::e2::v1beta1::WatchChannelsResponse>* WatchChannels(
      ::grpc::CallbackServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::WatchChannelsRequest* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetSubscription() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::onos::e2t::e2::v1beta1::GetSubscriptionRequest, ::onos::e2t::e2::v1beta1::GetSubscriptionResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::onos::e2t::e2::v1beta1::GetSubscriptionRequest* request, ::onos::e2t::e2::v1beta1::GetSubscriptionResponse* response) { return this->GetSubscription(context, request, response); }));}
    void SetMessageAllocatorFor_GetSubscription(
        ::grpc::MessageAllocator< ::onos::e2t::e2::v1beta1::GetSubscriptionRequest, ::onos::e2t::e2::v1beta1::GetSubscriptionResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::onos::e2t::e2::v1beta1::GetSubscriptionRequest, ::onos::e2t::e2::v1beta1::GetSubscriptionResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubscription(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::GetSubscriptionRequest* /*request*/, ::onos::e2t::e2::v1beta1::GetSubscriptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSubscription(
      ::grpc::CallbackServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::GetSubscriptionRequest* /*request*/, ::onos::e2t::e2::v1beta1::GetSubscriptionResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListSubscriptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListSubscriptions() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::onos::e2t::e2::v1beta1::ListSubscriptionsRequest, ::onos::e2t::e2::v1beta1::ListSubscriptionsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::onos::e2t::e2::v1beta1::ListSubscriptionsRequest* request, ::onos::e2t::e2::v1beta1::ListSubscriptionsResponse* response) { return this->ListSubscriptions(context, request, response); }));}
    void SetMessageAllocatorFor_ListSubscriptions(
        ::grpc::MessageAllocator< ::onos::e2t::e2::v1beta1::ListSubscriptionsRequest, ::onos::e2t::e2::v1beta1::ListSubscriptionsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::onos::e2t::e2::v1beta1::ListSubscriptionsRequest, ::onos::e2t::e2::v1beta1::ListSubscriptionsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListSubscriptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSubscriptions(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::ListSubscriptionsRequest* /*request*/, ::onos::e2t::e2::v1beta1::ListSubscriptionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListSubscriptions(
      ::grpc::CallbackServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::ListSubscriptionsRequest* /*request*/, ::onos::e2t::e2::v1beta1::ListSubscriptionsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_WatchSubscriptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_WatchSubscriptions() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackServerStreamingHandler< ::onos::e2t::e2::v1beta1::WatchSubscriptionsRequest, ::onos::e2t::e2::v1beta1::WatchSubscriptionsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::onos::e2t::e2::v1beta1::WatchSubscriptionsRequest* request) { return this->WatchSubscriptions(context, request); }));
    }
    ~WithCallbackMethod_WatchSubscriptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WatchSubscriptions(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::WatchSubscriptionsRequest* /*request*/, ::grpc::ServerWriter< ::onos::e2t::e2::v1beta1::WatchSubscriptionsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::onos::e2t::e2::v1beta1::WatchSubscriptionsResponse>* WatchSubscriptions(
      ::grpc::CallbackServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::WatchSubscriptionsRequest* /*request*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetChannel<WithCallbackMethod_ListChannels<WithCallbackMethod_WatchChannels<WithCallbackMethod_GetSubscription<WithCallbackMethod_ListSubscriptions<WithCallbackMethod_WatchSubscriptions<Service > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetChannel() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChannel(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::GetChannelRequest* /*request*/, ::onos::e2t::e2::v1beta1::GetChannelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListChannels() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListChannels(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::ListChannelsRequest* /*request*/, ::onos::e2t::e2::v1beta1::ListChannelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_WatchChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_WatchChannels() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_WatchChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WatchChannels(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::WatchChannelsRequest* /*request*/, ::grpc::ServerWriter< ::onos::e2t::e2::v1beta1::WatchChannelsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSubscription() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubscription(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::GetSubscriptionRequest* /*request*/, ::onos::e2t::e2::v1beta1::GetSubscriptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListSubscriptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListSubscriptions() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_ListSubscriptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSubscriptions(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::ListSubscriptionsRequest* /*request*/, ::onos::e2t::e2::v1beta1::ListSubscriptionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_WatchSubscriptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_WatchSubscriptions() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_WatchSubscriptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WatchSubscriptions(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::WatchSubscriptionsRequest* /*request*/, ::grpc::ServerWriter< ::onos::e2t::e2::v1beta1::WatchSubscriptionsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetChannel() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChannel(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::GetChannelRequest* /*request*/, ::onos::e2t::e2::v1beta1::GetChannelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetChannel(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListChannels() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ListChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListChannels(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::ListChannelsRequest* /*request*/, ::onos::e2t::e2::v1beta1::ListChannelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListChannels(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_WatchChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_WatchChannels() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_WatchChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WatchChannels(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::WatchChannelsRequest* /*request*/, ::grpc::ServerWriter< ::onos::e2t::e2::v1beta1::WatchChannelsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWatchChannels(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSubscription() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubscription(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::GetSubscriptionRequest* /*request*/, ::onos::e2t::e2::v1beta1::GetSubscriptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSubscription(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListSubscriptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListSubscriptions() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_ListSubscriptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSubscriptions(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::ListSubscriptionsRequest* /*request*/, ::onos::e2t::e2::v1beta1::ListSubscriptionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListSubscriptions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_WatchSubscriptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_WatchSubscriptions() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_WatchSubscriptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WatchSubscriptions(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::WatchSubscriptionsRequest* /*request*/, ::grpc::ServerWriter< ::onos::e2t::e2::v1beta1::WatchSubscriptionsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestWatchSubscriptions(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetChannel() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetChannel(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetChannel(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::GetChannelRequest* /*request*/, ::onos::e2t::e2::v1beta1::GetChannelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetChannel(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListChannels() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListChannels(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListChannels(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::ListChannelsRequest* /*request*/, ::onos::e2t::e2::v1beta1::ListChannelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListChannels(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_WatchChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_WatchChannels() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->WatchChannels(context, request); }));
    }
    ~WithRawCallbackMethod_WatchChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WatchChannels(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::WatchChannelsRequest* /*request*/, ::grpc::ServerWriter< ::onos::e2t::e2::v1beta1::WatchChannelsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* WatchChannels(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetSubscription() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSubscription(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSubscription(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::GetSubscriptionRequest* /*request*/, ::onos::e2t::e2::v1beta1::GetSubscriptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSubscription(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListSubscriptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListSubscriptions() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListSubscriptions(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListSubscriptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListSubscriptions(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::ListSubscriptionsRequest* /*request*/, ::onos::e2t::e2::v1beta1::ListSubscriptionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListSubscriptions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_WatchSubscriptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_WatchSubscriptions() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const::grpc::ByteBuffer* request) { return this->WatchSubscriptions(context, request); }));
    }
    ~WithRawCallbackMethod_WatchSubscriptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status WatchSubscriptions(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::WatchSubscriptionsRequest* /*request*/, ::grpc::ServerWriter< ::onos::e2t::e2::v1beta1::WatchSubscriptionsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerWriteReactor< ::grpc::ByteBuffer>* WatchSubscriptions(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetChannel : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetChannel() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::onos::e2t::e2::v1beta1::GetChannelRequest, ::onos::e2t::e2::v1beta1::GetChannelResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::onos::e2t::e2::v1beta1::GetChannelRequest, ::onos::e2t::e2::v1beta1::GetChannelResponse>* streamer) {
                       return this->StreamedGetChannel(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetChannel() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetChannel(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::GetChannelRequest* /*request*/, ::onos::e2t::e2::v1beta1::GetChannelResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetChannel(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::onos::e2t::e2::v1beta1::GetChannelRequest,::onos::e2t::e2::v1beta1::GetChannelResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListChannels() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::onos::e2t::e2::v1beta1::ListChannelsRequest, ::onos::e2t::e2::v1beta1::ListChannelsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::onos::e2t::e2::v1beta1::ListChannelsRequest, ::onos::e2t::e2::v1beta1::ListChannelsResponse>* streamer) {
                       return this->StreamedListChannels(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListChannels(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::ListChannelsRequest* /*request*/, ::onos::e2t::e2::v1beta1::ListChannelsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListChannels(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::onos::e2t::e2::v1beta1::ListChannelsRequest,::onos::e2t::e2::v1beta1::ListChannelsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSubscription : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSubscription() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::onos::e2t::e2::v1beta1::GetSubscriptionRequest, ::onos::e2t::e2::v1beta1::GetSubscriptionResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::onos::e2t::e2::v1beta1::GetSubscriptionRequest, ::onos::e2t::e2::v1beta1::GetSubscriptionResponse>* streamer) {
                       return this->StreamedGetSubscription(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSubscription() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSubscription(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::GetSubscriptionRequest* /*request*/, ::onos::e2t::e2::v1beta1::GetSubscriptionResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSubscription(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::onos::e2t::e2::v1beta1::GetSubscriptionRequest,::onos::e2t::e2::v1beta1::GetSubscriptionResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListSubscriptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListSubscriptions() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::onos::e2t::e2::v1beta1::ListSubscriptionsRequest, ::onos::e2t::e2::v1beta1::ListSubscriptionsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::onos::e2t::e2::v1beta1::ListSubscriptionsRequest, ::onos::e2t::e2::v1beta1::ListSubscriptionsResponse>* streamer) {
                       return this->StreamedListSubscriptions(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListSubscriptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListSubscriptions(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::ListSubscriptionsRequest* /*request*/, ::onos::e2t::e2::v1beta1::ListSubscriptionsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListSubscriptions(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::onos::e2t::e2::v1beta1::ListSubscriptionsRequest,::onos::e2t::e2::v1beta1::ListSubscriptionsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetChannel<WithStreamedUnaryMethod_ListChannels<WithStreamedUnaryMethod_GetSubscription<WithStreamedUnaryMethod_ListSubscriptions<Service > > > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_WatchChannels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_WatchChannels() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::onos::e2t::e2::v1beta1::WatchChannelsRequest, ::onos::e2t::e2::v1beta1::WatchChannelsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::onos::e2t::e2::v1beta1::WatchChannelsRequest, ::onos::e2t::e2::v1beta1::WatchChannelsResponse>* streamer) {
                       return this->StreamedWatchChannels(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_WatchChannels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status WatchChannels(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::WatchChannelsRequest* /*request*/, ::grpc::ServerWriter< ::onos::e2t::e2::v1beta1::WatchChannelsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedWatchChannels(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::onos::e2t::e2::v1beta1::WatchChannelsRequest,::onos::e2t::e2::v1beta1::WatchChannelsResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_WatchSubscriptions : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithSplitStreamingMethod_WatchSubscriptions() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::SplitServerStreamingHandler<
          ::onos::e2t::e2::v1beta1::WatchSubscriptionsRequest, ::onos::e2t::e2::v1beta1::WatchSubscriptionsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerSplitStreamer<
                     ::onos::e2t::e2::v1beta1::WatchSubscriptionsRequest, ::onos::e2t::e2::v1beta1::WatchSubscriptionsResponse>* streamer) {
                       return this->StreamedWatchSubscriptions(context,
                         streamer);
                  }));
    }
    ~WithSplitStreamingMethod_WatchSubscriptions() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status WatchSubscriptions(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::v1beta1::WatchSubscriptionsRequest* /*request*/, ::grpc::ServerWriter< ::onos::e2t::e2::v1beta1::WatchSubscriptionsResponse>* /*writer*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedWatchSubscriptions(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::onos::e2t::e2::v1beta1::WatchSubscriptionsRequest,::onos::e2t::e2::v1beta1::WatchSubscriptionsResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_WatchChannels<WithSplitStreamingMethod_WatchSubscriptions<Service > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetChannel<WithStreamedUnaryMethod_ListChannels<WithSplitStreamingMethod_WatchChannels<WithStreamedUnaryMethod_GetSubscription<WithStreamedUnaryMethod_ListSubscriptions<WithSplitStreamingMethod_WatchSubscriptions<Service > > > > > > StreamedService;
};

}  // namespace v1beta1
}  // namespace e2
}  // namespace e2t
}  // namespace onos


#endif  // GRPC_onos_2fe2t_2fe2_2fv1beta1_2fsubscription_2eproto__INCLUDED
