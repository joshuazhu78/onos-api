// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: onos/e2t/e2/v1beta1/e2.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_onos_2fe2t_2fe2_2fv1beta1_2fe2_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_onos_2fe2t_2fe2_2fv1beta1_2fe2_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_bases.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "gogoproto/gogo.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_onos_2fe2t_2fe2_2fv1beta1_2fe2_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_onos_2fe2t_2fe2_2fv1beta1_2fe2_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_onos_2fe2t_2fe2_2fv1beta1_2fe2_2eproto;
namespace onos {
namespace e2t {
namespace e2 {
namespace v1beta1 {
class Error;
struct ErrorDefaultTypeInternal;
extern ErrorDefaultTypeInternal _Error_default_instance_;
class Error_Cause;
struct Error_CauseDefaultTypeInternal;
extern Error_CauseDefaultTypeInternal _Error_Cause_default_instance_;
class Error_Cause_Misc;
struct Error_Cause_MiscDefaultTypeInternal;
extern Error_Cause_MiscDefaultTypeInternal _Error_Cause_Misc_default_instance_;
class Error_Cause_Protocol;
struct Error_Cause_ProtocolDefaultTypeInternal;
extern Error_Cause_ProtocolDefaultTypeInternal _Error_Cause_Protocol_default_instance_;
class Error_Cause_Ric;
struct Error_Cause_RicDefaultTypeInternal;
extern Error_Cause_RicDefaultTypeInternal _Error_Cause_Ric_default_instance_;
class Error_Cause_RicService;
struct Error_Cause_RicServiceDefaultTypeInternal;
extern Error_Cause_RicServiceDefaultTypeInternal _Error_Cause_RicService_default_instance_;
class Error_Cause_Transport;
struct Error_Cause_TransportDefaultTypeInternal;
extern Error_Cause_TransportDefaultTypeInternal _Error_Cause_Transport_default_instance_;
class Error_Cause_Unknown;
struct Error_Cause_UnknownDefaultTypeInternal;
extern Error_Cause_UnknownDefaultTypeInternal _Error_Cause_Unknown_default_instance_;
class RequestHeaders;
struct RequestHeadersDefaultTypeInternal;
extern RequestHeadersDefaultTypeInternal _RequestHeaders_default_instance_;
class ResponseHeaders;
struct ResponseHeadersDefaultTypeInternal;
extern ResponseHeadersDefaultTypeInternal _ResponseHeaders_default_instance_;
class ServiceModel;
struct ServiceModelDefaultTypeInternal;
extern ServiceModelDefaultTypeInternal _ServiceModel_default_instance_;
}  // namespace v1beta1
}  // namespace e2
}  // namespace e2t
}  // namespace onos
PROTOBUF_NAMESPACE_OPEN
template<> ::onos::e2t::e2::v1beta1::Error* Arena::CreateMaybeMessage<::onos::e2t::e2::v1beta1::Error>(Arena*);
template<> ::onos::e2t::e2::v1beta1::Error_Cause* Arena::CreateMaybeMessage<::onos::e2t::e2::v1beta1::Error_Cause>(Arena*);
template<> ::onos::e2t::e2::v1beta1::Error_Cause_Misc* Arena::CreateMaybeMessage<::onos::e2t::e2::v1beta1::Error_Cause_Misc>(Arena*);
template<> ::onos::e2t::e2::v1beta1::Error_Cause_Protocol* Arena::CreateMaybeMessage<::onos::e2t::e2::v1beta1::Error_Cause_Protocol>(Arena*);
template<> ::onos::e2t::e2::v1beta1::Error_Cause_Ric* Arena::CreateMaybeMessage<::onos::e2t::e2::v1beta1::Error_Cause_Ric>(Arena*);
template<> ::onos::e2t::e2::v1beta1::Error_Cause_RicService* Arena::CreateMaybeMessage<::onos::e2t::e2::v1beta1::Error_Cause_RicService>(Arena*);
template<> ::onos::e2t::e2::v1beta1::Error_Cause_Transport* Arena::CreateMaybeMessage<::onos::e2t::e2::v1beta1::Error_Cause_Transport>(Arena*);
template<> ::onos::e2t::e2::v1beta1::Error_Cause_Unknown* Arena::CreateMaybeMessage<::onos::e2t::e2::v1beta1::Error_Cause_Unknown>(Arena*);
template<> ::onos::e2t::e2::v1beta1::RequestHeaders* Arena::CreateMaybeMessage<::onos::e2t::e2::v1beta1::RequestHeaders>(Arena*);
template<> ::onos::e2t::e2::v1beta1::ResponseHeaders* Arena::CreateMaybeMessage<::onos::e2t::e2::v1beta1::ResponseHeaders>(Arena*);
template<> ::onos::e2t::e2::v1beta1::ServiceModel* Arena::CreateMaybeMessage<::onos::e2t::e2::v1beta1::ServiceModel>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace onos {
namespace e2t {
namespace e2 {
namespace v1beta1 {

enum Error_Cause_Misc_Type : int {
  Error_Cause_Misc_Type_UNSPECIFIED = 0,
  Error_Cause_Misc_Type_CONTROL_PROCESSING_OVERLOAD = 1,
  Error_Cause_Misc_Type_HARDWARE_FAILURE = 2,
  Error_Cause_Misc_Type_OM_INTERVENTION = 3,
  Error_Cause_Misc_Type_Error_Cause_Misc_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Error_Cause_Misc_Type_Error_Cause_Misc_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Error_Cause_Misc_Type_IsValid(int value);
constexpr Error_Cause_Misc_Type Error_Cause_Misc_Type_Type_MIN = Error_Cause_Misc_Type_UNSPECIFIED;
constexpr Error_Cause_Misc_Type Error_Cause_Misc_Type_Type_MAX = Error_Cause_Misc_Type_OM_INTERVENTION;
constexpr int Error_Cause_Misc_Type_Type_ARRAYSIZE = Error_Cause_Misc_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Error_Cause_Misc_Type_descriptor();
template<typename T>
inline const std::string& Error_Cause_Misc_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Error_Cause_Misc_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Error_Cause_Misc_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Error_Cause_Misc_Type_descriptor(), enum_t_value);
}
inline bool Error_Cause_Misc_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Error_Cause_Misc_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Error_Cause_Misc_Type>(
    Error_Cause_Misc_Type_descriptor(), name, value);
}
enum Error_Cause_Protocol_Type : int {
  Error_Cause_Protocol_Type_UNSPECIFIED = 0,
  Error_Cause_Protocol_Type_TRANSFER_SYNTAX_ERROR = 1,
  Error_Cause_Protocol_Type_ABSTRACT_SYNTAX_ERROR_REJECT = 2,
  Error_Cause_Protocol_Type_ABSTRACT_SYNTAX_ERROR_IGNORE_AND_NOTIFY = 3,
  Error_Cause_Protocol_Type_MESSAGE_NOT_COMPATIBLE_WITH_RECEIVER_STATE = 4,
  Error_Cause_Protocol_Type_SEMANTIC_ERROR = 5,
  Error_Cause_Protocol_Type_ABSTRACT_SYNTAX_ERROR_FALSELY_CONSTRUCTED_MESSAGE = 6,
  Error_Cause_Protocol_Type_Error_Cause_Protocol_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Error_Cause_Protocol_Type_Error_Cause_Protocol_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Error_Cause_Protocol_Type_IsValid(int value);
constexpr Error_Cause_Protocol_Type Error_Cause_Protocol_Type_Type_MIN = Error_Cause_Protocol_Type_UNSPECIFIED;
constexpr Error_Cause_Protocol_Type Error_Cause_Protocol_Type_Type_MAX = Error_Cause_Protocol_Type_ABSTRACT_SYNTAX_ERROR_FALSELY_CONSTRUCTED_MESSAGE;
constexpr int Error_Cause_Protocol_Type_Type_ARRAYSIZE = Error_Cause_Protocol_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Error_Cause_Protocol_Type_descriptor();
template<typename T>
inline const std::string& Error_Cause_Protocol_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Error_Cause_Protocol_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Error_Cause_Protocol_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Error_Cause_Protocol_Type_descriptor(), enum_t_value);
}
inline bool Error_Cause_Protocol_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Error_Cause_Protocol_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Error_Cause_Protocol_Type>(
    Error_Cause_Protocol_Type_descriptor(), name, value);
}
enum Error_Cause_Ric_Type : int {
  Error_Cause_Ric_Type_UNSPECIFIED = 0,
  Error_Cause_Ric_Type_RAN_FUNCTION_ID_INVALID = 1,
  Error_Cause_Ric_Type_ACTION_NOT_SUPPORTED = 2,
  Error_Cause_Ric_Type_EXCESSIVE_ACTIONS = 3,
  Error_Cause_Ric_Type_DUPLICATE_ACTION = 4,
  Error_Cause_Ric_Type_DUPLICATE_EVENT = 5,
  Error_Cause_Ric_Type_FUNCTION_RESOURCE_LIMIT = 6,
  Error_Cause_Ric_Type_REQUEST_ID_UNKNOWN = 7,
  Error_Cause_Ric_Type_INCONSISTENT_ACTION_SUBSEQUENT_ACTION_SEQUENCE = 8,
  Error_Cause_Ric_Type_CONTROL_MESSAGE_INVALID = 9,
  Error_Cause_Ric_Type_CALL_PROCESS_ID_INVALID = 10,
  Error_Cause_Ric_Type_CONTROL_TIMER_EXPIRED = 11,
  Error_Cause_Ric_Type_CONTROL_FAILED_TO_EXECUTE = 12,
  Error_Cause_Ric_Type_CONTROL_SYSTEM_NOT_READY = 13,
  Error_Cause_Ric_Type_Error_Cause_Ric_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Error_Cause_Ric_Type_Error_Cause_Ric_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Error_Cause_Ric_Type_IsValid(int value);
constexpr Error_Cause_Ric_Type Error_Cause_Ric_Type_Type_MIN = Error_Cause_Ric_Type_UNSPECIFIED;
constexpr Error_Cause_Ric_Type Error_Cause_Ric_Type_Type_MAX = Error_Cause_Ric_Type_CONTROL_SYSTEM_NOT_READY;
constexpr int Error_Cause_Ric_Type_Type_ARRAYSIZE = Error_Cause_Ric_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Error_Cause_Ric_Type_descriptor();
template<typename T>
inline const std::string& Error_Cause_Ric_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Error_Cause_Ric_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Error_Cause_Ric_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Error_Cause_Ric_Type_descriptor(), enum_t_value);
}
inline bool Error_Cause_Ric_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Error_Cause_Ric_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Error_Cause_Ric_Type>(
    Error_Cause_Ric_Type_descriptor(), name, value);
}
enum Error_Cause_RicService_Type : int {
  Error_Cause_RicService_Type_UNSPECIFIED = 0,
  Error_Cause_RicService_Type_FUNCTION_NOT_REQUIRED = 1,
  Error_Cause_RicService_Type_EXCESSIVE_FUNCTIONS = 2,
  Error_Cause_RicService_Type_RIC_RESOURCE_LIMIT = 3,
  Error_Cause_RicService_Type_Error_Cause_RicService_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Error_Cause_RicService_Type_Error_Cause_RicService_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Error_Cause_RicService_Type_IsValid(int value);
constexpr Error_Cause_RicService_Type Error_Cause_RicService_Type_Type_MIN = Error_Cause_RicService_Type_UNSPECIFIED;
constexpr Error_Cause_RicService_Type Error_Cause_RicService_Type_Type_MAX = Error_Cause_RicService_Type_RIC_RESOURCE_LIMIT;
constexpr int Error_Cause_RicService_Type_Type_ARRAYSIZE = Error_Cause_RicService_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Error_Cause_RicService_Type_descriptor();
template<typename T>
inline const std::string& Error_Cause_RicService_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Error_Cause_RicService_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Error_Cause_RicService_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Error_Cause_RicService_Type_descriptor(), enum_t_value);
}
inline bool Error_Cause_RicService_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Error_Cause_RicService_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Error_Cause_RicService_Type>(
    Error_Cause_RicService_Type_descriptor(), name, value);
}
enum Error_Cause_Transport_Type : int {
  Error_Cause_Transport_Type_UNSPECIFIED = 0,
  Error_Cause_Transport_Type_TRANSPORT_RESOURCE_UNAVAILABLE = 1,
  Error_Cause_Transport_Type_Error_Cause_Transport_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Error_Cause_Transport_Type_Error_Cause_Transport_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Error_Cause_Transport_Type_IsValid(int value);
constexpr Error_Cause_Transport_Type Error_Cause_Transport_Type_Type_MIN = Error_Cause_Transport_Type_UNSPECIFIED;
constexpr Error_Cause_Transport_Type Error_Cause_Transport_Type_Type_MAX = Error_Cause_Transport_Type_TRANSPORT_RESOURCE_UNAVAILABLE;
constexpr int Error_Cause_Transport_Type_Type_ARRAYSIZE = Error_Cause_Transport_Type_Type_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Error_Cause_Transport_Type_descriptor();
template<typename T>
inline const std::string& Error_Cause_Transport_Type_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Error_Cause_Transport_Type>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Error_Cause_Transport_Type_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Error_Cause_Transport_Type_descriptor(), enum_t_value);
}
inline bool Error_Cause_Transport_Type_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Error_Cause_Transport_Type* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Error_Cause_Transport_Type>(
    Error_Cause_Transport_Type_descriptor(), name, value);
}
enum Encoding : int {
  PROTO = 0,
  ASN1_PER = 1,
  ASN1_XER = 2,
  Encoding_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Encoding_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Encoding_IsValid(int value);
constexpr Encoding Encoding_MIN = PROTO;
constexpr Encoding Encoding_MAX = ASN1_XER;
constexpr int Encoding_ARRAYSIZE = Encoding_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Encoding_descriptor();
template<typename T>
inline const std::string& Encoding_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Encoding>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Encoding_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Encoding_descriptor(), enum_t_value);
}
inline bool Encoding_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Encoding* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Encoding>(
    Encoding_descriptor(), name, value);
}
// ===================================================================

class RequestHeaders final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.e2t.e2.v1beta1.RequestHeaders) */ {
 public:
  inline RequestHeaders() : RequestHeaders(nullptr) {}
  ~RequestHeaders() override;
  explicit constexpr RequestHeaders(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RequestHeaders(const RequestHeaders& from);
  RequestHeaders(RequestHeaders&& from) noexcept
    : RequestHeaders() {
    *this = ::std::move(from);
  }

  inline RequestHeaders& operator=(const RequestHeaders& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestHeaders& operator=(RequestHeaders&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RequestHeaders& default_instance() {
    return *internal_default_instance();
  }
  static inline const RequestHeaders* internal_default_instance() {
    return reinterpret_cast<const RequestHeaders*>(
               &_RequestHeaders_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RequestHeaders& a, RequestHeaders& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestHeaders* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RequestHeaders* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  RequestHeaders* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<RequestHeaders>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RequestHeaders& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RequestHeaders& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestHeaders* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.e2t.e2.v1beta1.RequestHeaders";
  }
  protected:
  explicit RequestHeaders(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdFieldNumber = 1,
    kAppInstanceIdFieldNumber = 2,
    kE2NodeIdFieldNumber = 3,
    kServiceModelFieldNumber = 4,
    kEncodingFieldNumber = 5,
  };
  // string app_id = 1 [(.gogoproto.customname) = "AppID", (.gogoproto.casttype) = "AppID"];
  void clear_app_id();
  const std::string& app_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_id();
  PROTOBUF_NODISCARD std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);
  private:
  const std::string& _internal_app_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_id(const std::string& value);
  std::string* _internal_mutable_app_id();
  public:

  // string app_instance_id = 2 [(.gogoproto.customname) = "AppInstanceID", (.gogoproto.casttype) = "AppInstanceID"];
  void clear_app_instance_id();
  const std::string& app_instance_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_instance_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_instance_id();
  PROTOBUF_NODISCARD std::string* release_app_instance_id();
  void set_allocated_app_instance_id(std::string* app_instance_id);
  private:
  const std::string& _internal_app_instance_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_instance_id(const std::string& value);
  std::string* _internal_mutable_app_instance_id();
  public:

  // string e2_node_id = 3 [(.gogoproto.customname) = "E2NodeID", (.gogoproto.casttype) = "E2NodeID"];
  void clear_e2_node_id();
  const std::string& e2_node_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_e2_node_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_e2_node_id();
  PROTOBUF_NODISCARD std::string* release_e2_node_id();
  void set_allocated_e2_node_id(std::string* e2_node_id);
  private:
  const std::string& _internal_e2_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_e2_node_id(const std::string& value);
  std::string* _internal_mutable_e2_node_id();
  public:

  // .onos.e2t.e2.v1beta1.ServiceModel service_model = 4 [(.gogoproto.nullable) = false];
  bool has_service_model() const;
  private:
  bool _internal_has_service_model() const;
  public:
  void clear_service_model();
  const ::onos::e2t::e2::v1beta1::ServiceModel& service_model() const;
  PROTOBUF_NODISCARD ::onos::e2t::e2::v1beta1::ServiceModel* release_service_model();
  ::onos::e2t::e2::v1beta1::ServiceModel* mutable_service_model();
  void set_allocated_service_model(::onos::e2t::e2::v1beta1::ServiceModel* service_model);
  private:
  const ::onos::e2t::e2::v1beta1::ServiceModel& _internal_service_model() const;
  ::onos::e2t::e2::v1beta1::ServiceModel* _internal_mutable_service_model();
  public:
  void unsafe_arena_set_allocated_service_model(
      ::onos::e2t::e2::v1beta1::ServiceModel* service_model);
  ::onos::e2t::e2::v1beta1::ServiceModel* unsafe_arena_release_service_model();

  // .onos.e2t.e2.v1beta1.Encoding encoding = 5;
  void clear_encoding();
  ::onos::e2t::e2::v1beta1::Encoding encoding() const;
  void set_encoding(::onos::e2t::e2::v1beta1::Encoding value);
  private:
  ::onos::e2t::e2::v1beta1::Encoding _internal_encoding() const;
  void _internal_set_encoding(::onos::e2t::e2::v1beta1::Encoding value);
  public:

  // @@protoc_insertion_point(class_scope:onos.e2t.e2.v1beta1.RequestHeaders)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_instance_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr e2_node_id_;
  ::onos::e2t::e2::v1beta1::ServiceModel* service_model_;
  int encoding_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fe2t_2fe2_2fv1beta1_2fe2_2eproto;
};
// -------------------------------------------------------------------

class ResponseHeaders final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.e2t.e2.v1beta1.ResponseHeaders) */ {
 public:
  inline ResponseHeaders() : ResponseHeaders(nullptr) {}
  ~ResponseHeaders() override;
  explicit constexpr ResponseHeaders(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseHeaders(const ResponseHeaders& from);
  ResponseHeaders(ResponseHeaders&& from) noexcept
    : ResponseHeaders() {
    *this = ::std::move(from);
  }

  inline ResponseHeaders& operator=(const ResponseHeaders& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseHeaders& operator=(ResponseHeaders&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseHeaders& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseHeaders* internal_default_instance() {
    return reinterpret_cast<const ResponseHeaders*>(
               &_ResponseHeaders_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ResponseHeaders& a, ResponseHeaders& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseHeaders* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseHeaders* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ResponseHeaders* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ResponseHeaders>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseHeaders& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResponseHeaders& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseHeaders* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.e2t.e2.v1beta1.ResponseHeaders";
  }
  protected:
  explicit ResponseHeaders(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEncodingFieldNumber = 1,
  };
  // .onos.e2t.e2.v1beta1.Encoding encoding = 1;
  void clear_encoding();
  ::onos::e2t::e2::v1beta1::Encoding encoding() const;
  void set_encoding(::onos::e2t::e2::v1beta1::Encoding value);
  private:
  ::onos::e2t::e2::v1beta1::Encoding _internal_encoding() const;
  void _internal_set_encoding(::onos::e2t::e2::v1beta1::Encoding value);
  public:

  // @@protoc_insertion_point(class_scope:onos.e2t.e2.v1beta1.ResponseHeaders)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int encoding_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fe2t_2fe2_2fv1beta1_2fe2_2eproto;
};
// -------------------------------------------------------------------

class ServiceModel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.e2t.e2.v1beta1.ServiceModel) */ {
 public:
  inline ServiceModel() : ServiceModel(nullptr) {}
  ~ServiceModel() override;
  explicit constexpr ServiceModel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServiceModel(const ServiceModel& from);
  ServiceModel(ServiceModel&& from) noexcept
    : ServiceModel() {
    *this = ::std::move(from);
  }

  inline ServiceModel& operator=(const ServiceModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceModel& operator=(ServiceModel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServiceModel& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServiceModel* internal_default_instance() {
    return reinterpret_cast<const ServiceModel*>(
               &_ServiceModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ServiceModel& a, ServiceModel& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceModel* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServiceModel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServiceModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServiceModel>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ServiceModel& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ServiceModel& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceModel* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.e2t.e2.v1beta1.ServiceModel";
  }
  protected:
  explicit ServiceModel(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kVersionFieldNumber = 2,
  };
  // string name = 1 [(.gogoproto.casttype) = "ServiceModelName"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string version = 2 [(.gogoproto.casttype) = "ServiceModelVersion"];
  void clear_version();
  const std::string& version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_version();
  PROTOBUF_NODISCARD std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // @@protoc_insertion_point(class_scope:onos.e2t.e2.v1beta1.ServiceModel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fe2t_2fe2_2fv1beta1_2fe2_2eproto;
};
// -------------------------------------------------------------------

class Error_Cause_Unknown final :
    public ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:onos.e2t.e2.v1beta1.Error.Cause.Unknown) */ {
 public:
  inline Error_Cause_Unknown() : Error_Cause_Unknown(nullptr) {}
  explicit constexpr Error_Cause_Unknown(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Error_Cause_Unknown(const Error_Cause_Unknown& from);
  Error_Cause_Unknown(Error_Cause_Unknown&& from) noexcept
    : Error_Cause_Unknown() {
    *this = ::std::move(from);
  }

  inline Error_Cause_Unknown& operator=(const Error_Cause_Unknown& from) {
    CopyFrom(from);
    return *this;
  }
  inline Error_Cause_Unknown& operator=(Error_Cause_Unknown&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Error_Cause_Unknown& default_instance() {
    return *internal_default_instance();
  }
  static inline const Error_Cause_Unknown* internal_default_instance() {
    return reinterpret_cast<const Error_Cause_Unknown*>(
               &_Error_Cause_Unknown_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Error_Cause_Unknown& a, Error_Cause_Unknown& b) {
    a.Swap(&b);
  }
  inline void Swap(Error_Cause_Unknown* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Error_Cause_Unknown* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Error_Cause_Unknown* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Error_Cause_Unknown>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const Error_Cause_Unknown& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl(this, from);
  }
  using ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const Error_Cause_Unknown& from) {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl(this, from);
  }
  public:

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.e2t.e2.v1beta1.Error.Cause.Unknown";
  }
  protected:
  explicit Error_Cause_Unknown(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:onos.e2t.e2.v1beta1.Error.Cause.Unknown)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fe2t_2fe2_2fv1beta1_2fe2_2eproto;
};
// -------------------------------------------------------------------

class Error_Cause_Misc final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.e2t.e2.v1beta1.Error.Cause.Misc) */ {
 public:
  inline Error_Cause_Misc() : Error_Cause_Misc(nullptr) {}
  ~Error_Cause_Misc() override;
  explicit constexpr Error_Cause_Misc(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Error_Cause_Misc(const Error_Cause_Misc& from);
  Error_Cause_Misc(Error_Cause_Misc&& from) noexcept
    : Error_Cause_Misc() {
    *this = ::std::move(from);
  }

  inline Error_Cause_Misc& operator=(const Error_Cause_Misc& from) {
    CopyFrom(from);
    return *this;
  }
  inline Error_Cause_Misc& operator=(Error_Cause_Misc&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Error_Cause_Misc& default_instance() {
    return *internal_default_instance();
  }
  static inline const Error_Cause_Misc* internal_default_instance() {
    return reinterpret_cast<const Error_Cause_Misc*>(
               &_Error_Cause_Misc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Error_Cause_Misc& a, Error_Cause_Misc& b) {
    a.Swap(&b);
  }
  inline void Swap(Error_Cause_Misc* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Error_Cause_Misc* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Error_Cause_Misc* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Error_Cause_Misc>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Error_Cause_Misc& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Error_Cause_Misc& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error_Cause_Misc* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.e2t.e2.v1beta1.Error.Cause.Misc";
  }
  protected:
  explicit Error_Cause_Misc(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Error_Cause_Misc_Type Type;
  static constexpr Type UNSPECIFIED =
    Error_Cause_Misc_Type_UNSPECIFIED;
  static constexpr Type CONTROL_PROCESSING_OVERLOAD =
    Error_Cause_Misc_Type_CONTROL_PROCESSING_OVERLOAD;
  static constexpr Type HARDWARE_FAILURE =
    Error_Cause_Misc_Type_HARDWARE_FAILURE;
  static constexpr Type OM_INTERVENTION =
    Error_Cause_Misc_Type_OM_INTERVENTION;
  static inline bool Type_IsValid(int value) {
    return Error_Cause_Misc_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Error_Cause_Misc_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Error_Cause_Misc_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Error_Cause_Misc_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Error_Cause_Misc_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Error_Cause_Misc_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Error_Cause_Misc_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // .onos.e2t.e2.v1beta1.Error.Cause.Misc.Type type = 1;
  void clear_type();
  ::onos::e2t::e2::v1beta1::Error_Cause_Misc_Type type() const;
  void set_type(::onos::e2t::e2::v1beta1::Error_Cause_Misc_Type value);
  private:
  ::onos::e2t::e2::v1beta1::Error_Cause_Misc_Type _internal_type() const;
  void _internal_set_type(::onos::e2t::e2::v1beta1::Error_Cause_Misc_Type value);
  public:

  // @@protoc_insertion_point(class_scope:onos.e2t.e2.v1beta1.Error.Cause.Misc)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fe2t_2fe2_2fv1beta1_2fe2_2eproto;
};
// -------------------------------------------------------------------

class Error_Cause_Protocol final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.e2t.e2.v1beta1.Error.Cause.Protocol) */ {
 public:
  inline Error_Cause_Protocol() : Error_Cause_Protocol(nullptr) {}
  ~Error_Cause_Protocol() override;
  explicit constexpr Error_Cause_Protocol(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Error_Cause_Protocol(const Error_Cause_Protocol& from);
  Error_Cause_Protocol(Error_Cause_Protocol&& from) noexcept
    : Error_Cause_Protocol() {
    *this = ::std::move(from);
  }

  inline Error_Cause_Protocol& operator=(const Error_Cause_Protocol& from) {
    CopyFrom(from);
    return *this;
  }
  inline Error_Cause_Protocol& operator=(Error_Cause_Protocol&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Error_Cause_Protocol& default_instance() {
    return *internal_default_instance();
  }
  static inline const Error_Cause_Protocol* internal_default_instance() {
    return reinterpret_cast<const Error_Cause_Protocol*>(
               &_Error_Cause_Protocol_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Error_Cause_Protocol& a, Error_Cause_Protocol& b) {
    a.Swap(&b);
  }
  inline void Swap(Error_Cause_Protocol* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Error_Cause_Protocol* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Error_Cause_Protocol* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Error_Cause_Protocol>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Error_Cause_Protocol& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Error_Cause_Protocol& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error_Cause_Protocol* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.e2t.e2.v1beta1.Error.Cause.Protocol";
  }
  protected:
  explicit Error_Cause_Protocol(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Error_Cause_Protocol_Type Type;
  static constexpr Type UNSPECIFIED =
    Error_Cause_Protocol_Type_UNSPECIFIED;
  static constexpr Type TRANSFER_SYNTAX_ERROR =
    Error_Cause_Protocol_Type_TRANSFER_SYNTAX_ERROR;
  static constexpr Type ABSTRACT_SYNTAX_ERROR_REJECT =
    Error_Cause_Protocol_Type_ABSTRACT_SYNTAX_ERROR_REJECT;
  static constexpr Type ABSTRACT_SYNTAX_ERROR_IGNORE_AND_NOTIFY =
    Error_Cause_Protocol_Type_ABSTRACT_SYNTAX_ERROR_IGNORE_AND_NOTIFY;
  static constexpr Type MESSAGE_NOT_COMPATIBLE_WITH_RECEIVER_STATE =
    Error_Cause_Protocol_Type_MESSAGE_NOT_COMPATIBLE_WITH_RECEIVER_STATE;
  static constexpr Type SEMANTIC_ERROR =
    Error_Cause_Protocol_Type_SEMANTIC_ERROR;
  static constexpr Type ABSTRACT_SYNTAX_ERROR_FALSELY_CONSTRUCTED_MESSAGE =
    Error_Cause_Protocol_Type_ABSTRACT_SYNTAX_ERROR_FALSELY_CONSTRUCTED_MESSAGE;
  static inline bool Type_IsValid(int value) {
    return Error_Cause_Protocol_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Error_Cause_Protocol_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Error_Cause_Protocol_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Error_Cause_Protocol_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Error_Cause_Protocol_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Error_Cause_Protocol_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Error_Cause_Protocol_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // .onos.e2t.e2.v1beta1.Error.Cause.Protocol.Type type = 1;
  void clear_type();
  ::onos::e2t::e2::v1beta1::Error_Cause_Protocol_Type type() const;
  void set_type(::onos::e2t::e2::v1beta1::Error_Cause_Protocol_Type value);
  private:
  ::onos::e2t::e2::v1beta1::Error_Cause_Protocol_Type _internal_type() const;
  void _internal_set_type(::onos::e2t::e2::v1beta1::Error_Cause_Protocol_Type value);
  public:

  // @@protoc_insertion_point(class_scope:onos.e2t.e2.v1beta1.Error.Cause.Protocol)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fe2t_2fe2_2fv1beta1_2fe2_2eproto;
};
// -------------------------------------------------------------------

class Error_Cause_Ric final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.e2t.e2.v1beta1.Error.Cause.Ric) */ {
 public:
  inline Error_Cause_Ric() : Error_Cause_Ric(nullptr) {}
  ~Error_Cause_Ric() override;
  explicit constexpr Error_Cause_Ric(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Error_Cause_Ric(const Error_Cause_Ric& from);
  Error_Cause_Ric(Error_Cause_Ric&& from) noexcept
    : Error_Cause_Ric() {
    *this = ::std::move(from);
  }

  inline Error_Cause_Ric& operator=(const Error_Cause_Ric& from) {
    CopyFrom(from);
    return *this;
  }
  inline Error_Cause_Ric& operator=(Error_Cause_Ric&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Error_Cause_Ric& default_instance() {
    return *internal_default_instance();
  }
  static inline const Error_Cause_Ric* internal_default_instance() {
    return reinterpret_cast<const Error_Cause_Ric*>(
               &_Error_Cause_Ric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(Error_Cause_Ric& a, Error_Cause_Ric& b) {
    a.Swap(&b);
  }
  inline void Swap(Error_Cause_Ric* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Error_Cause_Ric* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Error_Cause_Ric* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Error_Cause_Ric>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Error_Cause_Ric& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Error_Cause_Ric& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error_Cause_Ric* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.e2t.e2.v1beta1.Error.Cause.Ric";
  }
  protected:
  explicit Error_Cause_Ric(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Error_Cause_Ric_Type Type;
  static constexpr Type UNSPECIFIED =
    Error_Cause_Ric_Type_UNSPECIFIED;
  static constexpr Type RAN_FUNCTION_ID_INVALID =
    Error_Cause_Ric_Type_RAN_FUNCTION_ID_INVALID;
  static constexpr Type ACTION_NOT_SUPPORTED =
    Error_Cause_Ric_Type_ACTION_NOT_SUPPORTED;
  static constexpr Type EXCESSIVE_ACTIONS =
    Error_Cause_Ric_Type_EXCESSIVE_ACTIONS;
  static constexpr Type DUPLICATE_ACTION =
    Error_Cause_Ric_Type_DUPLICATE_ACTION;
  static constexpr Type DUPLICATE_EVENT =
    Error_Cause_Ric_Type_DUPLICATE_EVENT;
  static constexpr Type FUNCTION_RESOURCE_LIMIT =
    Error_Cause_Ric_Type_FUNCTION_RESOURCE_LIMIT;
  static constexpr Type REQUEST_ID_UNKNOWN =
    Error_Cause_Ric_Type_REQUEST_ID_UNKNOWN;
  static constexpr Type INCONSISTENT_ACTION_SUBSEQUENT_ACTION_SEQUENCE =
    Error_Cause_Ric_Type_INCONSISTENT_ACTION_SUBSEQUENT_ACTION_SEQUENCE;
  static constexpr Type CONTROL_MESSAGE_INVALID =
    Error_Cause_Ric_Type_CONTROL_MESSAGE_INVALID;
  static constexpr Type CALL_PROCESS_ID_INVALID =
    Error_Cause_Ric_Type_CALL_PROCESS_ID_INVALID;
  static constexpr Type CONTROL_TIMER_EXPIRED =
    Error_Cause_Ric_Type_CONTROL_TIMER_EXPIRED;
  static constexpr Type CONTROL_FAILED_TO_EXECUTE =
    Error_Cause_Ric_Type_CONTROL_FAILED_TO_EXECUTE;
  static constexpr Type CONTROL_SYSTEM_NOT_READY =
    Error_Cause_Ric_Type_CONTROL_SYSTEM_NOT_READY;
  static inline bool Type_IsValid(int value) {
    return Error_Cause_Ric_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Error_Cause_Ric_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Error_Cause_Ric_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Error_Cause_Ric_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Error_Cause_Ric_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Error_Cause_Ric_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Error_Cause_Ric_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // .onos.e2t.e2.v1beta1.Error.Cause.Ric.Type type = 1;
  void clear_type();
  ::onos::e2t::e2::v1beta1::Error_Cause_Ric_Type type() const;
  void set_type(::onos::e2t::e2::v1beta1::Error_Cause_Ric_Type value);
  private:
  ::onos::e2t::e2::v1beta1::Error_Cause_Ric_Type _internal_type() const;
  void _internal_set_type(::onos::e2t::e2::v1beta1::Error_Cause_Ric_Type value);
  public:

  // @@protoc_insertion_point(class_scope:onos.e2t.e2.v1beta1.Error.Cause.Ric)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fe2t_2fe2_2fv1beta1_2fe2_2eproto;
};
// -------------------------------------------------------------------

class Error_Cause_RicService final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.e2t.e2.v1beta1.Error.Cause.RicService) */ {
 public:
  inline Error_Cause_RicService() : Error_Cause_RicService(nullptr) {}
  ~Error_Cause_RicService() override;
  explicit constexpr Error_Cause_RicService(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Error_Cause_RicService(const Error_Cause_RicService& from);
  Error_Cause_RicService(Error_Cause_RicService&& from) noexcept
    : Error_Cause_RicService() {
    *this = ::std::move(from);
  }

  inline Error_Cause_RicService& operator=(const Error_Cause_RicService& from) {
    CopyFrom(from);
    return *this;
  }
  inline Error_Cause_RicService& operator=(Error_Cause_RicService&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Error_Cause_RicService& default_instance() {
    return *internal_default_instance();
  }
  static inline const Error_Cause_RicService* internal_default_instance() {
    return reinterpret_cast<const Error_Cause_RicService*>(
               &_Error_Cause_RicService_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Error_Cause_RicService& a, Error_Cause_RicService& b) {
    a.Swap(&b);
  }
  inline void Swap(Error_Cause_RicService* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Error_Cause_RicService* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Error_Cause_RicService* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Error_Cause_RicService>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Error_Cause_RicService& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Error_Cause_RicService& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error_Cause_RicService* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.e2t.e2.v1beta1.Error.Cause.RicService";
  }
  protected:
  explicit Error_Cause_RicService(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Error_Cause_RicService_Type Type;
  static constexpr Type UNSPECIFIED =
    Error_Cause_RicService_Type_UNSPECIFIED;
  static constexpr Type FUNCTION_NOT_REQUIRED =
    Error_Cause_RicService_Type_FUNCTION_NOT_REQUIRED;
  static constexpr Type EXCESSIVE_FUNCTIONS =
    Error_Cause_RicService_Type_EXCESSIVE_FUNCTIONS;
  static constexpr Type RIC_RESOURCE_LIMIT =
    Error_Cause_RicService_Type_RIC_RESOURCE_LIMIT;
  static inline bool Type_IsValid(int value) {
    return Error_Cause_RicService_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Error_Cause_RicService_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Error_Cause_RicService_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Error_Cause_RicService_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Error_Cause_RicService_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Error_Cause_RicService_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Error_Cause_RicService_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // .onos.e2t.e2.v1beta1.Error.Cause.RicService.Type type = 1;
  void clear_type();
  ::onos::e2t::e2::v1beta1::Error_Cause_RicService_Type type() const;
  void set_type(::onos::e2t::e2::v1beta1::Error_Cause_RicService_Type value);
  private:
  ::onos::e2t::e2::v1beta1::Error_Cause_RicService_Type _internal_type() const;
  void _internal_set_type(::onos::e2t::e2::v1beta1::Error_Cause_RicService_Type value);
  public:

  // @@protoc_insertion_point(class_scope:onos.e2t.e2.v1beta1.Error.Cause.RicService)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fe2t_2fe2_2fv1beta1_2fe2_2eproto;
};
// -------------------------------------------------------------------

class Error_Cause_Transport final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.e2t.e2.v1beta1.Error.Cause.Transport) */ {
 public:
  inline Error_Cause_Transport() : Error_Cause_Transport(nullptr) {}
  ~Error_Cause_Transport() override;
  explicit constexpr Error_Cause_Transport(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Error_Cause_Transport(const Error_Cause_Transport& from);
  Error_Cause_Transport(Error_Cause_Transport&& from) noexcept
    : Error_Cause_Transport() {
    *this = ::std::move(from);
  }

  inline Error_Cause_Transport& operator=(const Error_Cause_Transport& from) {
    CopyFrom(from);
    return *this;
  }
  inline Error_Cause_Transport& operator=(Error_Cause_Transport&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Error_Cause_Transport& default_instance() {
    return *internal_default_instance();
  }
  static inline const Error_Cause_Transport* internal_default_instance() {
    return reinterpret_cast<const Error_Cause_Transport*>(
               &_Error_Cause_Transport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Error_Cause_Transport& a, Error_Cause_Transport& b) {
    a.Swap(&b);
  }
  inline void Swap(Error_Cause_Transport* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Error_Cause_Transport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Error_Cause_Transport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Error_Cause_Transport>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Error_Cause_Transport& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Error_Cause_Transport& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error_Cause_Transport* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.e2t.e2.v1beta1.Error.Cause.Transport";
  }
  protected:
  explicit Error_Cause_Transport(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Error_Cause_Transport_Type Type;
  static constexpr Type UNSPECIFIED =
    Error_Cause_Transport_Type_UNSPECIFIED;
  static constexpr Type TRANSPORT_RESOURCE_UNAVAILABLE =
    Error_Cause_Transport_Type_TRANSPORT_RESOURCE_UNAVAILABLE;
  static inline bool Type_IsValid(int value) {
    return Error_Cause_Transport_Type_IsValid(value);
  }
  static constexpr Type Type_MIN =
    Error_Cause_Transport_Type_Type_MIN;
  static constexpr Type Type_MAX =
    Error_Cause_Transport_Type_Type_MAX;
  static constexpr int Type_ARRAYSIZE =
    Error_Cause_Transport_Type_Type_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Type_descriptor() {
    return Error_Cause_Transport_Type_descriptor();
  }
  template<typename T>
  static inline const std::string& Type_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Type>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Type_Name.");
    return Error_Cause_Transport_Type_Name(enum_t_value);
  }
  static inline bool Type_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Type* value) {
    return Error_Cause_Transport_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
  };
  // .onos.e2t.e2.v1beta1.Error.Cause.Transport.Type type = 1;
  void clear_type();
  ::onos::e2t::e2::v1beta1::Error_Cause_Transport_Type type() const;
  void set_type(::onos::e2t::e2::v1beta1::Error_Cause_Transport_Type value);
  private:
  ::onos::e2t::e2::v1beta1::Error_Cause_Transport_Type _internal_type() const;
  void _internal_set_type(::onos::e2t::e2::v1beta1::Error_Cause_Transport_Type value);
  public:

  // @@protoc_insertion_point(class_scope:onos.e2t.e2.v1beta1.Error.Cause.Transport)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fe2t_2fe2_2fv1beta1_2fe2_2eproto;
};
// -------------------------------------------------------------------

class Error_Cause final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.e2t.e2.v1beta1.Error.Cause) */ {
 public:
  inline Error_Cause() : Error_Cause(nullptr) {}
  ~Error_Cause() override;
  explicit constexpr Error_Cause(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Error_Cause(const Error_Cause& from);
  Error_Cause(Error_Cause&& from) noexcept
    : Error_Cause() {
    *this = ::std::move(from);
  }

  inline Error_Cause& operator=(const Error_Cause& from) {
    CopyFrom(from);
    return *this;
  }
  inline Error_Cause& operator=(Error_Cause&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Error_Cause& default_instance() {
    return *internal_default_instance();
  }
  enum CauseCase {
    kUnknown = 1,
    kProtocol = 2,
    kRic = 3,
    kRicService = 4,
    kTransport = 5,
    kMisc = 6,
    CAUSE_NOT_SET = 0,
  };

  static inline const Error_Cause* internal_default_instance() {
    return reinterpret_cast<const Error_Cause*>(
               &_Error_Cause_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Error_Cause& a, Error_Cause& b) {
    a.Swap(&b);
  }
  inline void Swap(Error_Cause* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Error_Cause* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Error_Cause* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Error_Cause>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Error_Cause& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Error_Cause& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error_Cause* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.e2t.e2.v1beta1.Error.Cause";
  }
  protected:
  explicit Error_Cause(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Error_Cause_Unknown Unknown;
  typedef Error_Cause_Misc Misc;
  typedef Error_Cause_Protocol Protocol;
  typedef Error_Cause_Ric Ric;
  typedef Error_Cause_RicService RicService;
  typedef Error_Cause_Transport Transport;

  // accessors -------------------------------------------------------

  enum : int {
    kUnknownFieldNumber = 1,
    kProtocolFieldNumber = 2,
    kRicFieldNumber = 3,
    kRicServiceFieldNumber = 4,
    kTransportFieldNumber = 5,
    kMiscFieldNumber = 6,
  };
  // .onos.e2t.e2.v1beta1.Error.Cause.Unknown unknown = 1;
  bool has_unknown() const;
  private:
  bool _internal_has_unknown() const;
  public:
  void clear_unknown();
  const ::onos::e2t::e2::v1beta1::Error_Cause_Unknown& unknown() const;
  PROTOBUF_NODISCARD ::onos::e2t::e2::v1beta1::Error_Cause_Unknown* release_unknown();
  ::onos::e2t::e2::v1beta1::Error_Cause_Unknown* mutable_unknown();
  void set_allocated_unknown(::onos::e2t::e2::v1beta1::Error_Cause_Unknown* unknown);
  private:
  const ::onos::e2t::e2::v1beta1::Error_Cause_Unknown& _internal_unknown() const;
  ::onos::e2t::e2::v1beta1::Error_Cause_Unknown* _internal_mutable_unknown();
  public:
  void unsafe_arena_set_allocated_unknown(
      ::onos::e2t::e2::v1beta1::Error_Cause_Unknown* unknown);
  ::onos::e2t::e2::v1beta1::Error_Cause_Unknown* unsafe_arena_release_unknown();

  // .onos.e2t.e2.v1beta1.Error.Cause.Protocol protocol = 2;
  bool has_protocol() const;
  private:
  bool _internal_has_protocol() const;
  public:
  void clear_protocol();
  const ::onos::e2t::e2::v1beta1::Error_Cause_Protocol& protocol() const;
  PROTOBUF_NODISCARD ::onos::e2t::e2::v1beta1::Error_Cause_Protocol* release_protocol();
  ::onos::e2t::e2::v1beta1::Error_Cause_Protocol* mutable_protocol();
  void set_allocated_protocol(::onos::e2t::e2::v1beta1::Error_Cause_Protocol* protocol);
  private:
  const ::onos::e2t::e2::v1beta1::Error_Cause_Protocol& _internal_protocol() const;
  ::onos::e2t::e2::v1beta1::Error_Cause_Protocol* _internal_mutable_protocol();
  public:
  void unsafe_arena_set_allocated_protocol(
      ::onos::e2t::e2::v1beta1::Error_Cause_Protocol* protocol);
  ::onos::e2t::e2::v1beta1::Error_Cause_Protocol* unsafe_arena_release_protocol();

  // .onos.e2t.e2.v1beta1.Error.Cause.Ric ric = 3;
  bool has_ric() const;
  private:
  bool _internal_has_ric() const;
  public:
  void clear_ric();
  const ::onos::e2t::e2::v1beta1::Error_Cause_Ric& ric() const;
  PROTOBUF_NODISCARD ::onos::e2t::e2::v1beta1::Error_Cause_Ric* release_ric();
  ::onos::e2t::e2::v1beta1::Error_Cause_Ric* mutable_ric();
  void set_allocated_ric(::onos::e2t::e2::v1beta1::Error_Cause_Ric* ric);
  private:
  const ::onos::e2t::e2::v1beta1::Error_Cause_Ric& _internal_ric() const;
  ::onos::e2t::e2::v1beta1::Error_Cause_Ric* _internal_mutable_ric();
  public:
  void unsafe_arena_set_allocated_ric(
      ::onos::e2t::e2::v1beta1::Error_Cause_Ric* ric);
  ::onos::e2t::e2::v1beta1::Error_Cause_Ric* unsafe_arena_release_ric();

  // .onos.e2t.e2.v1beta1.Error.Cause.RicService ric_service = 4;
  bool has_ric_service() const;
  private:
  bool _internal_has_ric_service() const;
  public:
  void clear_ric_service();
  const ::onos::e2t::e2::v1beta1::Error_Cause_RicService& ric_service() const;
  PROTOBUF_NODISCARD ::onos::e2t::e2::v1beta1::Error_Cause_RicService* release_ric_service();
  ::onos::e2t::e2::v1beta1::Error_Cause_RicService* mutable_ric_service();
  void set_allocated_ric_service(::onos::e2t::e2::v1beta1::Error_Cause_RicService* ric_service);
  private:
  const ::onos::e2t::e2::v1beta1::Error_Cause_RicService& _internal_ric_service() const;
  ::onos::e2t::e2::v1beta1::Error_Cause_RicService* _internal_mutable_ric_service();
  public:
  void unsafe_arena_set_allocated_ric_service(
      ::onos::e2t::e2::v1beta1::Error_Cause_RicService* ric_service);
  ::onos::e2t::e2::v1beta1::Error_Cause_RicService* unsafe_arena_release_ric_service();

  // .onos.e2t.e2.v1beta1.Error.Cause.Transport transport = 5;
  bool has_transport() const;
  private:
  bool _internal_has_transport() const;
  public:
  void clear_transport();
  const ::onos::e2t::e2::v1beta1::Error_Cause_Transport& transport() const;
  PROTOBUF_NODISCARD ::onos::e2t::e2::v1beta1::Error_Cause_Transport* release_transport();
  ::onos::e2t::e2::v1beta1::Error_Cause_Transport* mutable_transport();
  void set_allocated_transport(::onos::e2t::e2::v1beta1::Error_Cause_Transport* transport);
  private:
  const ::onos::e2t::e2::v1beta1::Error_Cause_Transport& _internal_transport() const;
  ::onos::e2t::e2::v1beta1::Error_Cause_Transport* _internal_mutable_transport();
  public:
  void unsafe_arena_set_allocated_transport(
      ::onos::e2t::e2::v1beta1::Error_Cause_Transport* transport);
  ::onos::e2t::e2::v1beta1::Error_Cause_Transport* unsafe_arena_release_transport();

  // .onos.e2t.e2.v1beta1.Error.Cause.Misc misc = 6;
  bool has_misc() const;
  private:
  bool _internal_has_misc() const;
  public:
  void clear_misc();
  const ::onos::e2t::e2::v1beta1::Error_Cause_Misc& misc() const;
  PROTOBUF_NODISCARD ::onos::e2t::e2::v1beta1::Error_Cause_Misc* release_misc();
  ::onos::e2t::e2::v1beta1::Error_Cause_Misc* mutable_misc();
  void set_allocated_misc(::onos::e2t::e2::v1beta1::Error_Cause_Misc* misc);
  private:
  const ::onos::e2t::e2::v1beta1::Error_Cause_Misc& _internal_misc() const;
  ::onos::e2t::e2::v1beta1::Error_Cause_Misc* _internal_mutable_misc();
  public:
  void unsafe_arena_set_allocated_misc(
      ::onos::e2t::e2::v1beta1::Error_Cause_Misc* misc);
  ::onos::e2t::e2::v1beta1::Error_Cause_Misc* unsafe_arena_release_misc();

  void clear_cause();
  CauseCase cause_case() const;
  // @@protoc_insertion_point(class_scope:onos.e2t.e2.v1beta1.Error.Cause)
 private:
  class _Internal;
  void set_has_unknown();
  void set_has_protocol();
  void set_has_ric();
  void set_has_ric_service();
  void set_has_transport();
  void set_has_misc();

  inline bool has_cause() const;
  inline void clear_has_cause();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union CauseUnion {
    constexpr CauseUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::onos::e2t::e2::v1beta1::Error_Cause_Unknown* unknown_;
    ::onos::e2t::e2::v1beta1::Error_Cause_Protocol* protocol_;
    ::onos::e2t::e2::v1beta1::Error_Cause_Ric* ric_;
    ::onos::e2t::e2::v1beta1::Error_Cause_RicService* ric_service_;
    ::onos::e2t::e2::v1beta1::Error_Cause_Transport* transport_;
    ::onos::e2t::e2::v1beta1::Error_Cause_Misc* misc_;
  } cause_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  uint32_t _oneof_case_[1];

  friend struct ::TableStruct_onos_2fe2t_2fe2_2fv1beta1_2fe2_2eproto;
};
// -------------------------------------------------------------------

class Error final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:onos.e2t.e2.v1beta1.Error) */ {
 public:
  inline Error() : Error(nullptr) {}
  ~Error() override;
  explicit constexpr Error(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Error(const Error& from);
  Error(Error&& from) noexcept
    : Error() {
    *this = ::std::move(from);
  }

  inline Error& operator=(const Error& from) {
    CopyFrom(from);
    return *this;
  }
  inline Error& operator=(Error&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Error& default_instance() {
    return *internal_default_instance();
  }
  static inline const Error* internal_default_instance() {
    return reinterpret_cast<const Error*>(
               &_Error_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Error& a, Error& b) {
    a.Swap(&b);
  }
  inline void Swap(Error* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Error* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Error* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Error>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Error& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Error& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Error* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "onos.e2t.e2.v1beta1.Error";
  }
  protected:
  explicit Error(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Error_Cause Cause;

  // accessors -------------------------------------------------------

  enum : int {
    kCauseFieldNumber = 1,
  };
  // .onos.e2t.e2.v1beta1.Error.Cause cause = 1;
  bool has_cause() const;
  private:
  bool _internal_has_cause() const;
  public:
  void clear_cause();
  const ::onos::e2t::e2::v1beta1::Error_Cause& cause() const;
  PROTOBUF_NODISCARD ::onos::e2t::e2::v1beta1::Error_Cause* release_cause();
  ::onos::e2t::e2::v1beta1::Error_Cause* mutable_cause();
  void set_allocated_cause(::onos::e2t::e2::v1beta1::Error_Cause* cause);
  private:
  const ::onos::e2t::e2::v1beta1::Error_Cause& _internal_cause() const;
  ::onos::e2t::e2::v1beta1::Error_Cause* _internal_mutable_cause();
  public:
  void unsafe_arena_set_allocated_cause(
      ::onos::e2t::e2::v1beta1::Error_Cause* cause);
  ::onos::e2t::e2::v1beta1::Error_Cause* unsafe_arena_release_cause();

  // @@protoc_insertion_point(class_scope:onos.e2t.e2.v1beta1.Error)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::onos::e2t::e2::v1beta1::Error_Cause* cause_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_onos_2fe2t_2fe2_2fv1beta1_2fe2_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestHeaders

// string app_id = 1 [(.gogoproto.customname) = "AppID", (.gogoproto.casttype) = "AppID"];
inline void RequestHeaders::clear_app_id() {
  app_id_.ClearToEmpty();
}
inline const std::string& RequestHeaders::app_id() const {
  // @@protoc_insertion_point(field_get:onos.e2t.e2.v1beta1.RequestHeaders.app_id)
  return _internal_app_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestHeaders::set_app_id(ArgT0&& arg0, ArgT... args) {
 
 app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.e2t.e2.v1beta1.RequestHeaders.app_id)
}
inline std::string* RequestHeaders::mutable_app_id() {
  std::string* _s = _internal_mutable_app_id();
  // @@protoc_insertion_point(field_mutable:onos.e2t.e2.v1beta1.RequestHeaders.app_id)
  return _s;
}
inline const std::string& RequestHeaders::_internal_app_id() const {
  return app_id_.Get();
}
inline void RequestHeaders::_internal_set_app_id(const std::string& value) {
  
  app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RequestHeaders::_internal_mutable_app_id() {
  
  return app_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RequestHeaders::release_app_id() {
  // @@protoc_insertion_point(field_release:onos.e2t.e2.v1beta1.RequestHeaders.app_id)
  return app_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RequestHeaders::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    
  } else {
    
  }
  app_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (app_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    app_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.e2t.e2.v1beta1.RequestHeaders.app_id)
}

// string app_instance_id = 2 [(.gogoproto.customname) = "AppInstanceID", (.gogoproto.casttype) = "AppInstanceID"];
inline void RequestHeaders::clear_app_instance_id() {
  app_instance_id_.ClearToEmpty();
}
inline const std::string& RequestHeaders::app_instance_id() const {
  // @@protoc_insertion_point(field_get:onos.e2t.e2.v1beta1.RequestHeaders.app_instance_id)
  return _internal_app_instance_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestHeaders::set_app_instance_id(ArgT0&& arg0, ArgT... args) {
 
 app_instance_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.e2t.e2.v1beta1.RequestHeaders.app_instance_id)
}
inline std::string* RequestHeaders::mutable_app_instance_id() {
  std::string* _s = _internal_mutable_app_instance_id();
  // @@protoc_insertion_point(field_mutable:onos.e2t.e2.v1beta1.RequestHeaders.app_instance_id)
  return _s;
}
inline const std::string& RequestHeaders::_internal_app_instance_id() const {
  return app_instance_id_.Get();
}
inline void RequestHeaders::_internal_set_app_instance_id(const std::string& value) {
  
  app_instance_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RequestHeaders::_internal_mutable_app_instance_id() {
  
  return app_instance_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RequestHeaders::release_app_instance_id() {
  // @@protoc_insertion_point(field_release:onos.e2t.e2.v1beta1.RequestHeaders.app_instance_id)
  return app_instance_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RequestHeaders::set_allocated_app_instance_id(std::string* app_instance_id) {
  if (app_instance_id != nullptr) {
    
  } else {
    
  }
  app_instance_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_instance_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (app_instance_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    app_instance_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.e2t.e2.v1beta1.RequestHeaders.app_instance_id)
}

// string e2_node_id = 3 [(.gogoproto.customname) = "E2NodeID", (.gogoproto.casttype) = "E2NodeID"];
inline void RequestHeaders::clear_e2_node_id() {
  e2_node_id_.ClearToEmpty();
}
inline const std::string& RequestHeaders::e2_node_id() const {
  // @@protoc_insertion_point(field_get:onos.e2t.e2.v1beta1.RequestHeaders.e2_node_id)
  return _internal_e2_node_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RequestHeaders::set_e2_node_id(ArgT0&& arg0, ArgT... args) {
 
 e2_node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.e2t.e2.v1beta1.RequestHeaders.e2_node_id)
}
inline std::string* RequestHeaders::mutable_e2_node_id() {
  std::string* _s = _internal_mutable_e2_node_id();
  // @@protoc_insertion_point(field_mutable:onos.e2t.e2.v1beta1.RequestHeaders.e2_node_id)
  return _s;
}
inline const std::string& RequestHeaders::_internal_e2_node_id() const {
  return e2_node_id_.Get();
}
inline void RequestHeaders::_internal_set_e2_node_id(const std::string& value) {
  
  e2_node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RequestHeaders::_internal_mutable_e2_node_id() {
  
  return e2_node_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RequestHeaders::release_e2_node_id() {
  // @@protoc_insertion_point(field_release:onos.e2t.e2.v1beta1.RequestHeaders.e2_node_id)
  return e2_node_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RequestHeaders::set_allocated_e2_node_id(std::string* e2_node_id) {
  if (e2_node_id != nullptr) {
    
  } else {
    
  }
  e2_node_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), e2_node_id,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (e2_node_id_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    e2_node_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.e2t.e2.v1beta1.RequestHeaders.e2_node_id)
}

// .onos.e2t.e2.v1beta1.ServiceModel service_model = 4 [(.gogoproto.nullable) = false];
inline bool RequestHeaders::_internal_has_service_model() const {
  return this != internal_default_instance() && service_model_ != nullptr;
}
inline bool RequestHeaders::has_service_model() const {
  return _internal_has_service_model();
}
inline void RequestHeaders::clear_service_model() {
  if (GetArenaForAllocation() == nullptr && service_model_ != nullptr) {
    delete service_model_;
  }
  service_model_ = nullptr;
}
inline const ::onos::e2t::e2::v1beta1::ServiceModel& RequestHeaders::_internal_service_model() const {
  const ::onos::e2t::e2::v1beta1::ServiceModel* p = service_model_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::e2t::e2::v1beta1::ServiceModel&>(
      ::onos::e2t::e2::v1beta1::_ServiceModel_default_instance_);
}
inline const ::onos::e2t::e2::v1beta1::ServiceModel& RequestHeaders::service_model() const {
  // @@protoc_insertion_point(field_get:onos.e2t.e2.v1beta1.RequestHeaders.service_model)
  return _internal_service_model();
}
inline void RequestHeaders::unsafe_arena_set_allocated_service_model(
    ::onos::e2t::e2::v1beta1::ServiceModel* service_model) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(service_model_);
  }
  service_model_ = service_model;
  if (service_model) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.e2t.e2.v1beta1.RequestHeaders.service_model)
}
inline ::onos::e2t::e2::v1beta1::ServiceModel* RequestHeaders::release_service_model() {
  
  ::onos::e2t::e2::v1beta1::ServiceModel* temp = service_model_;
  service_model_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::e2t::e2::v1beta1::ServiceModel* RequestHeaders::unsafe_arena_release_service_model() {
  // @@protoc_insertion_point(field_release:onos.e2t.e2.v1beta1.RequestHeaders.service_model)
  
  ::onos::e2t::e2::v1beta1::ServiceModel* temp = service_model_;
  service_model_ = nullptr;
  return temp;
}
inline ::onos::e2t::e2::v1beta1::ServiceModel* RequestHeaders::_internal_mutable_service_model() {
  
  if (service_model_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::e2t::e2::v1beta1::ServiceModel>(GetArenaForAllocation());
    service_model_ = p;
  }
  return service_model_;
}
inline ::onos::e2t::e2::v1beta1::ServiceModel* RequestHeaders::mutable_service_model() {
  ::onos::e2t::e2::v1beta1::ServiceModel* _msg = _internal_mutable_service_model();
  // @@protoc_insertion_point(field_mutable:onos.e2t.e2.v1beta1.RequestHeaders.service_model)
  return _msg;
}
inline void RequestHeaders::set_allocated_service_model(::onos::e2t::e2::v1beta1::ServiceModel* service_model) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete service_model_;
  }
  if (service_model) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::e2t::e2::v1beta1::ServiceModel>::GetOwningArena(service_model);
    if (message_arena != submessage_arena) {
      service_model = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, service_model, submessage_arena);
    }
    
  } else {
    
  }
  service_model_ = service_model;
  // @@protoc_insertion_point(field_set_allocated:onos.e2t.e2.v1beta1.RequestHeaders.service_model)
}

// .onos.e2t.e2.v1beta1.Encoding encoding = 5;
inline void RequestHeaders::clear_encoding() {
  encoding_ = 0;
}
inline ::onos::e2t::e2::v1beta1::Encoding RequestHeaders::_internal_encoding() const {
  return static_cast< ::onos::e2t::e2::v1beta1::Encoding >(encoding_);
}
inline ::onos::e2t::e2::v1beta1::Encoding RequestHeaders::encoding() const {
  // @@protoc_insertion_point(field_get:onos.e2t.e2.v1beta1.RequestHeaders.encoding)
  return _internal_encoding();
}
inline void RequestHeaders::_internal_set_encoding(::onos::e2t::e2::v1beta1::Encoding value) {
  
  encoding_ = value;
}
inline void RequestHeaders::set_encoding(::onos::e2t::e2::v1beta1::Encoding value) {
  _internal_set_encoding(value);
  // @@protoc_insertion_point(field_set:onos.e2t.e2.v1beta1.RequestHeaders.encoding)
}

// -------------------------------------------------------------------

// ResponseHeaders

// .onos.e2t.e2.v1beta1.Encoding encoding = 1;
inline void ResponseHeaders::clear_encoding() {
  encoding_ = 0;
}
inline ::onos::e2t::e2::v1beta1::Encoding ResponseHeaders::_internal_encoding() const {
  return static_cast< ::onos::e2t::e2::v1beta1::Encoding >(encoding_);
}
inline ::onos::e2t::e2::v1beta1::Encoding ResponseHeaders::encoding() const {
  // @@protoc_insertion_point(field_get:onos.e2t.e2.v1beta1.ResponseHeaders.encoding)
  return _internal_encoding();
}
inline void ResponseHeaders::_internal_set_encoding(::onos::e2t::e2::v1beta1::Encoding value) {
  
  encoding_ = value;
}
inline void ResponseHeaders::set_encoding(::onos::e2t::e2::v1beta1::Encoding value) {
  _internal_set_encoding(value);
  // @@protoc_insertion_point(field_set:onos.e2t.e2.v1beta1.ResponseHeaders.encoding)
}

// -------------------------------------------------------------------

// ServiceModel

// string name = 1 [(.gogoproto.casttype) = "ServiceModelName"];
inline void ServiceModel::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ServiceModel::name() const {
  // @@protoc_insertion_point(field_get:onos.e2t.e2.v1beta1.ServiceModel.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceModel::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.e2t.e2.v1beta1.ServiceModel.name)
}
inline std::string* ServiceModel::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:onos.e2t.e2.v1beta1.ServiceModel.name)
  return _s;
}
inline const std::string& ServiceModel::_internal_name() const {
  return name_.Get();
}
inline void ServiceModel::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ServiceModel::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ServiceModel::release_name() {
  // @@protoc_insertion_point(field_release:onos.e2t.e2.v1beta1.ServiceModel.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ServiceModel::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.e2t.e2.v1beta1.ServiceModel.name)
}

// string version = 2 [(.gogoproto.casttype) = "ServiceModelVersion"];
inline void ServiceModel::clear_version() {
  version_.ClearToEmpty();
}
inline const std::string& ServiceModel::version() const {
  // @@protoc_insertion_point(field_get:onos.e2t.e2.v1beta1.ServiceModel.version)
  return _internal_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServiceModel::set_version(ArgT0&& arg0, ArgT... args) {
 
 version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:onos.e2t.e2.v1beta1.ServiceModel.version)
}
inline std::string* ServiceModel::mutable_version() {
  std::string* _s = _internal_mutable_version();
  // @@protoc_insertion_point(field_mutable:onos.e2t.e2.v1beta1.ServiceModel.version)
  return _s;
}
inline const std::string& ServiceModel::_internal_version() const {
  return version_.Get();
}
inline void ServiceModel::_internal_set_version(const std::string& value) {
  
  version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ServiceModel::_internal_mutable_version() {
  
  return version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ServiceModel::release_version() {
  // @@protoc_insertion_point(field_release:onos.e2t.e2.v1beta1.ServiceModel.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ServiceModel::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (version_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:onos.e2t.e2.v1beta1.ServiceModel.version)
}

// -------------------------------------------------------------------

// Error_Cause_Unknown

// -------------------------------------------------------------------

// Error_Cause_Misc

// .onos.e2t.e2.v1beta1.Error.Cause.Misc.Type type = 1;
inline void Error_Cause_Misc::clear_type() {
  type_ = 0;
}
inline ::onos::e2t::e2::v1beta1::Error_Cause_Misc_Type Error_Cause_Misc::_internal_type() const {
  return static_cast< ::onos::e2t::e2::v1beta1::Error_Cause_Misc_Type >(type_);
}
inline ::onos::e2t::e2::v1beta1::Error_Cause_Misc_Type Error_Cause_Misc::type() const {
  // @@protoc_insertion_point(field_get:onos.e2t.e2.v1beta1.Error.Cause.Misc.type)
  return _internal_type();
}
inline void Error_Cause_Misc::_internal_set_type(::onos::e2t::e2::v1beta1::Error_Cause_Misc_Type value) {
  
  type_ = value;
}
inline void Error_Cause_Misc::set_type(::onos::e2t::e2::v1beta1::Error_Cause_Misc_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:onos.e2t.e2.v1beta1.Error.Cause.Misc.type)
}

// -------------------------------------------------------------------

// Error_Cause_Protocol

// .onos.e2t.e2.v1beta1.Error.Cause.Protocol.Type type = 1;
inline void Error_Cause_Protocol::clear_type() {
  type_ = 0;
}
inline ::onos::e2t::e2::v1beta1::Error_Cause_Protocol_Type Error_Cause_Protocol::_internal_type() const {
  return static_cast< ::onos::e2t::e2::v1beta1::Error_Cause_Protocol_Type >(type_);
}
inline ::onos::e2t::e2::v1beta1::Error_Cause_Protocol_Type Error_Cause_Protocol::type() const {
  // @@protoc_insertion_point(field_get:onos.e2t.e2.v1beta1.Error.Cause.Protocol.type)
  return _internal_type();
}
inline void Error_Cause_Protocol::_internal_set_type(::onos::e2t::e2::v1beta1::Error_Cause_Protocol_Type value) {
  
  type_ = value;
}
inline void Error_Cause_Protocol::set_type(::onos::e2t::e2::v1beta1::Error_Cause_Protocol_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:onos.e2t.e2.v1beta1.Error.Cause.Protocol.type)
}

// -------------------------------------------------------------------

// Error_Cause_Ric

// .onos.e2t.e2.v1beta1.Error.Cause.Ric.Type type = 1;
inline void Error_Cause_Ric::clear_type() {
  type_ = 0;
}
inline ::onos::e2t::e2::v1beta1::Error_Cause_Ric_Type Error_Cause_Ric::_internal_type() const {
  return static_cast< ::onos::e2t::e2::v1beta1::Error_Cause_Ric_Type >(type_);
}
inline ::onos::e2t::e2::v1beta1::Error_Cause_Ric_Type Error_Cause_Ric::type() const {
  // @@protoc_insertion_point(field_get:onos.e2t.e2.v1beta1.Error.Cause.Ric.type)
  return _internal_type();
}
inline void Error_Cause_Ric::_internal_set_type(::onos::e2t::e2::v1beta1::Error_Cause_Ric_Type value) {
  
  type_ = value;
}
inline void Error_Cause_Ric::set_type(::onos::e2t::e2::v1beta1::Error_Cause_Ric_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:onos.e2t.e2.v1beta1.Error.Cause.Ric.type)
}

// -------------------------------------------------------------------

// Error_Cause_RicService

// .onos.e2t.e2.v1beta1.Error.Cause.RicService.Type type = 1;
inline void Error_Cause_RicService::clear_type() {
  type_ = 0;
}
inline ::onos::e2t::e2::v1beta1::Error_Cause_RicService_Type Error_Cause_RicService::_internal_type() const {
  return static_cast< ::onos::e2t::e2::v1beta1::Error_Cause_RicService_Type >(type_);
}
inline ::onos::e2t::e2::v1beta1::Error_Cause_RicService_Type Error_Cause_RicService::type() const {
  // @@protoc_insertion_point(field_get:onos.e2t.e2.v1beta1.Error.Cause.RicService.type)
  return _internal_type();
}
inline void Error_Cause_RicService::_internal_set_type(::onos::e2t::e2::v1beta1::Error_Cause_RicService_Type value) {
  
  type_ = value;
}
inline void Error_Cause_RicService::set_type(::onos::e2t::e2::v1beta1::Error_Cause_RicService_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:onos.e2t.e2.v1beta1.Error.Cause.RicService.type)
}

// -------------------------------------------------------------------

// Error_Cause_Transport

// .onos.e2t.e2.v1beta1.Error.Cause.Transport.Type type = 1;
inline void Error_Cause_Transport::clear_type() {
  type_ = 0;
}
inline ::onos::e2t::e2::v1beta1::Error_Cause_Transport_Type Error_Cause_Transport::_internal_type() const {
  return static_cast< ::onos::e2t::e2::v1beta1::Error_Cause_Transport_Type >(type_);
}
inline ::onos::e2t::e2::v1beta1::Error_Cause_Transport_Type Error_Cause_Transport::type() const {
  // @@protoc_insertion_point(field_get:onos.e2t.e2.v1beta1.Error.Cause.Transport.type)
  return _internal_type();
}
inline void Error_Cause_Transport::_internal_set_type(::onos::e2t::e2::v1beta1::Error_Cause_Transport_Type value) {
  
  type_ = value;
}
inline void Error_Cause_Transport::set_type(::onos::e2t::e2::v1beta1::Error_Cause_Transport_Type value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:onos.e2t.e2.v1beta1.Error.Cause.Transport.type)
}

// -------------------------------------------------------------------

// Error_Cause

// .onos.e2t.e2.v1beta1.Error.Cause.Unknown unknown = 1;
inline bool Error_Cause::_internal_has_unknown() const {
  return cause_case() == kUnknown;
}
inline bool Error_Cause::has_unknown() const {
  return _internal_has_unknown();
}
inline void Error_Cause::set_has_unknown() {
  _oneof_case_[0] = kUnknown;
}
inline void Error_Cause::clear_unknown() {
  if (_internal_has_unknown()) {
    if (GetArenaForAllocation() == nullptr) {
      delete cause_.unknown_;
    }
    clear_has_cause();
  }
}
inline ::onos::e2t::e2::v1beta1::Error_Cause_Unknown* Error_Cause::release_unknown() {
  // @@protoc_insertion_point(field_release:onos.e2t.e2.v1beta1.Error.Cause.unknown)
  if (_internal_has_unknown()) {
    clear_has_cause();
      ::onos::e2t::e2::v1beta1::Error_Cause_Unknown* temp = cause_.unknown_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    cause_.unknown_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::onos::e2t::e2::v1beta1::Error_Cause_Unknown& Error_Cause::_internal_unknown() const {
  return _internal_has_unknown()
      ? *cause_.unknown_
      : reinterpret_cast< ::onos::e2t::e2::v1beta1::Error_Cause_Unknown&>(::onos::e2t::e2::v1beta1::_Error_Cause_Unknown_default_instance_);
}
inline const ::onos::e2t::e2::v1beta1::Error_Cause_Unknown& Error_Cause::unknown() const {
  // @@protoc_insertion_point(field_get:onos.e2t.e2.v1beta1.Error.Cause.unknown)
  return _internal_unknown();
}
inline ::onos::e2t::e2::v1beta1::Error_Cause_Unknown* Error_Cause::unsafe_arena_release_unknown() {
  // @@protoc_insertion_point(field_unsafe_arena_release:onos.e2t.e2.v1beta1.Error.Cause.unknown)
  if (_internal_has_unknown()) {
    clear_has_cause();
    ::onos::e2t::e2::v1beta1::Error_Cause_Unknown* temp = cause_.unknown_;
    cause_.unknown_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Error_Cause::unsafe_arena_set_allocated_unknown(::onos::e2t::e2::v1beta1::Error_Cause_Unknown* unknown) {
  clear_cause();
  if (unknown) {
    set_has_unknown();
    cause_.unknown_ = unknown;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.e2t.e2.v1beta1.Error.Cause.unknown)
}
inline ::onos::e2t::e2::v1beta1::Error_Cause_Unknown* Error_Cause::_internal_mutable_unknown() {
  if (!_internal_has_unknown()) {
    clear_cause();
    set_has_unknown();
    cause_.unknown_ = CreateMaybeMessage< ::onos::e2t::e2::v1beta1::Error_Cause_Unknown >(GetArenaForAllocation());
  }
  return cause_.unknown_;
}
inline ::onos::e2t::e2::v1beta1::Error_Cause_Unknown* Error_Cause::mutable_unknown() {
  ::onos::e2t::e2::v1beta1::Error_Cause_Unknown* _msg = _internal_mutable_unknown();
  // @@protoc_insertion_point(field_mutable:onos.e2t.e2.v1beta1.Error.Cause.unknown)
  return _msg;
}

// .onos.e2t.e2.v1beta1.Error.Cause.Protocol protocol = 2;
inline bool Error_Cause::_internal_has_protocol() const {
  return cause_case() == kProtocol;
}
inline bool Error_Cause::has_protocol() const {
  return _internal_has_protocol();
}
inline void Error_Cause::set_has_protocol() {
  _oneof_case_[0] = kProtocol;
}
inline void Error_Cause::clear_protocol() {
  if (_internal_has_protocol()) {
    if (GetArenaForAllocation() == nullptr) {
      delete cause_.protocol_;
    }
    clear_has_cause();
  }
}
inline ::onos::e2t::e2::v1beta1::Error_Cause_Protocol* Error_Cause::release_protocol() {
  // @@protoc_insertion_point(field_release:onos.e2t.e2.v1beta1.Error.Cause.protocol)
  if (_internal_has_protocol()) {
    clear_has_cause();
      ::onos::e2t::e2::v1beta1::Error_Cause_Protocol* temp = cause_.protocol_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    cause_.protocol_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::onos::e2t::e2::v1beta1::Error_Cause_Protocol& Error_Cause::_internal_protocol() const {
  return _internal_has_protocol()
      ? *cause_.protocol_
      : reinterpret_cast< ::onos::e2t::e2::v1beta1::Error_Cause_Protocol&>(::onos::e2t::e2::v1beta1::_Error_Cause_Protocol_default_instance_);
}
inline const ::onos::e2t::e2::v1beta1::Error_Cause_Protocol& Error_Cause::protocol() const {
  // @@protoc_insertion_point(field_get:onos.e2t.e2.v1beta1.Error.Cause.protocol)
  return _internal_protocol();
}
inline ::onos::e2t::e2::v1beta1::Error_Cause_Protocol* Error_Cause::unsafe_arena_release_protocol() {
  // @@protoc_insertion_point(field_unsafe_arena_release:onos.e2t.e2.v1beta1.Error.Cause.protocol)
  if (_internal_has_protocol()) {
    clear_has_cause();
    ::onos::e2t::e2::v1beta1::Error_Cause_Protocol* temp = cause_.protocol_;
    cause_.protocol_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Error_Cause::unsafe_arena_set_allocated_protocol(::onos::e2t::e2::v1beta1::Error_Cause_Protocol* protocol) {
  clear_cause();
  if (protocol) {
    set_has_protocol();
    cause_.protocol_ = protocol;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.e2t.e2.v1beta1.Error.Cause.protocol)
}
inline ::onos::e2t::e2::v1beta1::Error_Cause_Protocol* Error_Cause::_internal_mutable_protocol() {
  if (!_internal_has_protocol()) {
    clear_cause();
    set_has_protocol();
    cause_.protocol_ = CreateMaybeMessage< ::onos::e2t::e2::v1beta1::Error_Cause_Protocol >(GetArenaForAllocation());
  }
  return cause_.protocol_;
}
inline ::onos::e2t::e2::v1beta1::Error_Cause_Protocol* Error_Cause::mutable_protocol() {
  ::onos::e2t::e2::v1beta1::Error_Cause_Protocol* _msg = _internal_mutable_protocol();
  // @@protoc_insertion_point(field_mutable:onos.e2t.e2.v1beta1.Error.Cause.protocol)
  return _msg;
}

// .onos.e2t.e2.v1beta1.Error.Cause.Ric ric = 3;
inline bool Error_Cause::_internal_has_ric() const {
  return cause_case() == kRic;
}
inline bool Error_Cause::has_ric() const {
  return _internal_has_ric();
}
inline void Error_Cause::set_has_ric() {
  _oneof_case_[0] = kRic;
}
inline void Error_Cause::clear_ric() {
  if (_internal_has_ric()) {
    if (GetArenaForAllocation() == nullptr) {
      delete cause_.ric_;
    }
    clear_has_cause();
  }
}
inline ::onos::e2t::e2::v1beta1::Error_Cause_Ric* Error_Cause::release_ric() {
  // @@protoc_insertion_point(field_release:onos.e2t.e2.v1beta1.Error.Cause.ric)
  if (_internal_has_ric()) {
    clear_has_cause();
      ::onos::e2t::e2::v1beta1::Error_Cause_Ric* temp = cause_.ric_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    cause_.ric_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::onos::e2t::e2::v1beta1::Error_Cause_Ric& Error_Cause::_internal_ric() const {
  return _internal_has_ric()
      ? *cause_.ric_
      : reinterpret_cast< ::onos::e2t::e2::v1beta1::Error_Cause_Ric&>(::onos::e2t::e2::v1beta1::_Error_Cause_Ric_default_instance_);
}
inline const ::onos::e2t::e2::v1beta1::Error_Cause_Ric& Error_Cause::ric() const {
  // @@protoc_insertion_point(field_get:onos.e2t.e2.v1beta1.Error.Cause.ric)
  return _internal_ric();
}
inline ::onos::e2t::e2::v1beta1::Error_Cause_Ric* Error_Cause::unsafe_arena_release_ric() {
  // @@protoc_insertion_point(field_unsafe_arena_release:onos.e2t.e2.v1beta1.Error.Cause.ric)
  if (_internal_has_ric()) {
    clear_has_cause();
    ::onos::e2t::e2::v1beta1::Error_Cause_Ric* temp = cause_.ric_;
    cause_.ric_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Error_Cause::unsafe_arena_set_allocated_ric(::onos::e2t::e2::v1beta1::Error_Cause_Ric* ric) {
  clear_cause();
  if (ric) {
    set_has_ric();
    cause_.ric_ = ric;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.e2t.e2.v1beta1.Error.Cause.ric)
}
inline ::onos::e2t::e2::v1beta1::Error_Cause_Ric* Error_Cause::_internal_mutable_ric() {
  if (!_internal_has_ric()) {
    clear_cause();
    set_has_ric();
    cause_.ric_ = CreateMaybeMessage< ::onos::e2t::e2::v1beta1::Error_Cause_Ric >(GetArenaForAllocation());
  }
  return cause_.ric_;
}
inline ::onos::e2t::e2::v1beta1::Error_Cause_Ric* Error_Cause::mutable_ric() {
  ::onos::e2t::e2::v1beta1::Error_Cause_Ric* _msg = _internal_mutable_ric();
  // @@protoc_insertion_point(field_mutable:onos.e2t.e2.v1beta1.Error.Cause.ric)
  return _msg;
}

// .onos.e2t.e2.v1beta1.Error.Cause.RicService ric_service = 4;
inline bool Error_Cause::_internal_has_ric_service() const {
  return cause_case() == kRicService;
}
inline bool Error_Cause::has_ric_service() const {
  return _internal_has_ric_service();
}
inline void Error_Cause::set_has_ric_service() {
  _oneof_case_[0] = kRicService;
}
inline void Error_Cause::clear_ric_service() {
  if (_internal_has_ric_service()) {
    if (GetArenaForAllocation() == nullptr) {
      delete cause_.ric_service_;
    }
    clear_has_cause();
  }
}
inline ::onos::e2t::e2::v1beta1::Error_Cause_RicService* Error_Cause::release_ric_service() {
  // @@protoc_insertion_point(field_release:onos.e2t.e2.v1beta1.Error.Cause.ric_service)
  if (_internal_has_ric_service()) {
    clear_has_cause();
      ::onos::e2t::e2::v1beta1::Error_Cause_RicService* temp = cause_.ric_service_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    cause_.ric_service_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::onos::e2t::e2::v1beta1::Error_Cause_RicService& Error_Cause::_internal_ric_service() const {
  return _internal_has_ric_service()
      ? *cause_.ric_service_
      : reinterpret_cast< ::onos::e2t::e2::v1beta1::Error_Cause_RicService&>(::onos::e2t::e2::v1beta1::_Error_Cause_RicService_default_instance_);
}
inline const ::onos::e2t::e2::v1beta1::Error_Cause_RicService& Error_Cause::ric_service() const {
  // @@protoc_insertion_point(field_get:onos.e2t.e2.v1beta1.Error.Cause.ric_service)
  return _internal_ric_service();
}
inline ::onos::e2t::e2::v1beta1::Error_Cause_RicService* Error_Cause::unsafe_arena_release_ric_service() {
  // @@protoc_insertion_point(field_unsafe_arena_release:onos.e2t.e2.v1beta1.Error.Cause.ric_service)
  if (_internal_has_ric_service()) {
    clear_has_cause();
    ::onos::e2t::e2::v1beta1::Error_Cause_RicService* temp = cause_.ric_service_;
    cause_.ric_service_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Error_Cause::unsafe_arena_set_allocated_ric_service(::onos::e2t::e2::v1beta1::Error_Cause_RicService* ric_service) {
  clear_cause();
  if (ric_service) {
    set_has_ric_service();
    cause_.ric_service_ = ric_service;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.e2t.e2.v1beta1.Error.Cause.ric_service)
}
inline ::onos::e2t::e2::v1beta1::Error_Cause_RicService* Error_Cause::_internal_mutable_ric_service() {
  if (!_internal_has_ric_service()) {
    clear_cause();
    set_has_ric_service();
    cause_.ric_service_ = CreateMaybeMessage< ::onos::e2t::e2::v1beta1::Error_Cause_RicService >(GetArenaForAllocation());
  }
  return cause_.ric_service_;
}
inline ::onos::e2t::e2::v1beta1::Error_Cause_RicService* Error_Cause::mutable_ric_service() {
  ::onos::e2t::e2::v1beta1::Error_Cause_RicService* _msg = _internal_mutable_ric_service();
  // @@protoc_insertion_point(field_mutable:onos.e2t.e2.v1beta1.Error.Cause.ric_service)
  return _msg;
}

// .onos.e2t.e2.v1beta1.Error.Cause.Transport transport = 5;
inline bool Error_Cause::_internal_has_transport() const {
  return cause_case() == kTransport;
}
inline bool Error_Cause::has_transport() const {
  return _internal_has_transport();
}
inline void Error_Cause::set_has_transport() {
  _oneof_case_[0] = kTransport;
}
inline void Error_Cause::clear_transport() {
  if (_internal_has_transport()) {
    if (GetArenaForAllocation() == nullptr) {
      delete cause_.transport_;
    }
    clear_has_cause();
  }
}
inline ::onos::e2t::e2::v1beta1::Error_Cause_Transport* Error_Cause::release_transport() {
  // @@protoc_insertion_point(field_release:onos.e2t.e2.v1beta1.Error.Cause.transport)
  if (_internal_has_transport()) {
    clear_has_cause();
      ::onos::e2t::e2::v1beta1::Error_Cause_Transport* temp = cause_.transport_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    cause_.transport_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::onos::e2t::e2::v1beta1::Error_Cause_Transport& Error_Cause::_internal_transport() const {
  return _internal_has_transport()
      ? *cause_.transport_
      : reinterpret_cast< ::onos::e2t::e2::v1beta1::Error_Cause_Transport&>(::onos::e2t::e2::v1beta1::_Error_Cause_Transport_default_instance_);
}
inline const ::onos::e2t::e2::v1beta1::Error_Cause_Transport& Error_Cause::transport() const {
  // @@protoc_insertion_point(field_get:onos.e2t.e2.v1beta1.Error.Cause.transport)
  return _internal_transport();
}
inline ::onos::e2t::e2::v1beta1::Error_Cause_Transport* Error_Cause::unsafe_arena_release_transport() {
  // @@protoc_insertion_point(field_unsafe_arena_release:onos.e2t.e2.v1beta1.Error.Cause.transport)
  if (_internal_has_transport()) {
    clear_has_cause();
    ::onos::e2t::e2::v1beta1::Error_Cause_Transport* temp = cause_.transport_;
    cause_.transport_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Error_Cause::unsafe_arena_set_allocated_transport(::onos::e2t::e2::v1beta1::Error_Cause_Transport* transport) {
  clear_cause();
  if (transport) {
    set_has_transport();
    cause_.transport_ = transport;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.e2t.e2.v1beta1.Error.Cause.transport)
}
inline ::onos::e2t::e2::v1beta1::Error_Cause_Transport* Error_Cause::_internal_mutable_transport() {
  if (!_internal_has_transport()) {
    clear_cause();
    set_has_transport();
    cause_.transport_ = CreateMaybeMessage< ::onos::e2t::e2::v1beta1::Error_Cause_Transport >(GetArenaForAllocation());
  }
  return cause_.transport_;
}
inline ::onos::e2t::e2::v1beta1::Error_Cause_Transport* Error_Cause::mutable_transport() {
  ::onos::e2t::e2::v1beta1::Error_Cause_Transport* _msg = _internal_mutable_transport();
  // @@protoc_insertion_point(field_mutable:onos.e2t.e2.v1beta1.Error.Cause.transport)
  return _msg;
}

// .onos.e2t.e2.v1beta1.Error.Cause.Misc misc = 6;
inline bool Error_Cause::_internal_has_misc() const {
  return cause_case() == kMisc;
}
inline bool Error_Cause::has_misc() const {
  return _internal_has_misc();
}
inline void Error_Cause::set_has_misc() {
  _oneof_case_[0] = kMisc;
}
inline void Error_Cause::clear_misc() {
  if (_internal_has_misc()) {
    if (GetArenaForAllocation() == nullptr) {
      delete cause_.misc_;
    }
    clear_has_cause();
  }
}
inline ::onos::e2t::e2::v1beta1::Error_Cause_Misc* Error_Cause::release_misc() {
  // @@protoc_insertion_point(field_release:onos.e2t.e2.v1beta1.Error.Cause.misc)
  if (_internal_has_misc()) {
    clear_has_cause();
      ::onos::e2t::e2::v1beta1::Error_Cause_Misc* temp = cause_.misc_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    cause_.misc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::onos::e2t::e2::v1beta1::Error_Cause_Misc& Error_Cause::_internal_misc() const {
  return _internal_has_misc()
      ? *cause_.misc_
      : reinterpret_cast< ::onos::e2t::e2::v1beta1::Error_Cause_Misc&>(::onos::e2t::e2::v1beta1::_Error_Cause_Misc_default_instance_);
}
inline const ::onos::e2t::e2::v1beta1::Error_Cause_Misc& Error_Cause::misc() const {
  // @@protoc_insertion_point(field_get:onos.e2t.e2.v1beta1.Error.Cause.misc)
  return _internal_misc();
}
inline ::onos::e2t::e2::v1beta1::Error_Cause_Misc* Error_Cause::unsafe_arena_release_misc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:onos.e2t.e2.v1beta1.Error.Cause.misc)
  if (_internal_has_misc()) {
    clear_has_cause();
    ::onos::e2t::e2::v1beta1::Error_Cause_Misc* temp = cause_.misc_;
    cause_.misc_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Error_Cause::unsafe_arena_set_allocated_misc(::onos::e2t::e2::v1beta1::Error_Cause_Misc* misc) {
  clear_cause();
  if (misc) {
    set_has_misc();
    cause_.misc_ = misc;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.e2t.e2.v1beta1.Error.Cause.misc)
}
inline ::onos::e2t::e2::v1beta1::Error_Cause_Misc* Error_Cause::_internal_mutable_misc() {
  if (!_internal_has_misc()) {
    clear_cause();
    set_has_misc();
    cause_.misc_ = CreateMaybeMessage< ::onos::e2t::e2::v1beta1::Error_Cause_Misc >(GetArenaForAllocation());
  }
  return cause_.misc_;
}
inline ::onos::e2t::e2::v1beta1::Error_Cause_Misc* Error_Cause::mutable_misc() {
  ::onos::e2t::e2::v1beta1::Error_Cause_Misc* _msg = _internal_mutable_misc();
  // @@protoc_insertion_point(field_mutable:onos.e2t.e2.v1beta1.Error.Cause.misc)
  return _msg;
}

inline bool Error_Cause::has_cause() const {
  return cause_case() != CAUSE_NOT_SET;
}
inline void Error_Cause::clear_has_cause() {
  _oneof_case_[0] = CAUSE_NOT_SET;
}
inline Error_Cause::CauseCase Error_Cause::cause_case() const {
  return Error_Cause::CauseCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// Error

// .onos.e2t.e2.v1beta1.Error.Cause cause = 1;
inline bool Error::_internal_has_cause() const {
  return this != internal_default_instance() && cause_ != nullptr;
}
inline bool Error::has_cause() const {
  return _internal_has_cause();
}
inline void Error::clear_cause() {
  if (GetArenaForAllocation() == nullptr && cause_ != nullptr) {
    delete cause_;
  }
  cause_ = nullptr;
}
inline const ::onos::e2t::e2::v1beta1::Error_Cause& Error::_internal_cause() const {
  const ::onos::e2t::e2::v1beta1::Error_Cause* p = cause_;
  return p != nullptr ? *p : reinterpret_cast<const ::onos::e2t::e2::v1beta1::Error_Cause&>(
      ::onos::e2t::e2::v1beta1::_Error_Cause_default_instance_);
}
inline const ::onos::e2t::e2::v1beta1::Error_Cause& Error::cause() const {
  // @@protoc_insertion_point(field_get:onos.e2t.e2.v1beta1.Error.cause)
  return _internal_cause();
}
inline void Error::unsafe_arena_set_allocated_cause(
    ::onos::e2t::e2::v1beta1::Error_Cause* cause) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cause_);
  }
  cause_ = cause;
  if (cause) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:onos.e2t.e2.v1beta1.Error.cause)
}
inline ::onos::e2t::e2::v1beta1::Error_Cause* Error::release_cause() {
  
  ::onos::e2t::e2::v1beta1::Error_Cause* temp = cause_;
  cause_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::onos::e2t::e2::v1beta1::Error_Cause* Error::unsafe_arena_release_cause() {
  // @@protoc_insertion_point(field_release:onos.e2t.e2.v1beta1.Error.cause)
  
  ::onos::e2t::e2::v1beta1::Error_Cause* temp = cause_;
  cause_ = nullptr;
  return temp;
}
inline ::onos::e2t::e2::v1beta1::Error_Cause* Error::_internal_mutable_cause() {
  
  if (cause_ == nullptr) {
    auto* p = CreateMaybeMessage<::onos::e2t::e2::v1beta1::Error_Cause>(GetArenaForAllocation());
    cause_ = p;
  }
  return cause_;
}
inline ::onos::e2t::e2::v1beta1::Error_Cause* Error::mutable_cause() {
  ::onos::e2t::e2::v1beta1::Error_Cause* _msg = _internal_mutable_cause();
  // @@protoc_insertion_point(field_mutable:onos.e2t.e2.v1beta1.Error.cause)
  return _msg;
}
inline void Error::set_allocated_cause(::onos::e2t::e2::v1beta1::Error_Cause* cause) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete cause_;
  }
  if (cause) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::onos::e2t::e2::v1beta1::Error_Cause>::GetOwningArena(cause);
    if (message_arena != submessage_arena) {
      cause = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cause, submessage_arena);
    }
    
  } else {
    
  }
  cause_ = cause;
  // @@protoc_insertion_point(field_set_allocated:onos.e2t.e2.v1beta1.Error.cause)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1beta1
}  // namespace e2
}  // namespace e2t
}  // namespace onos

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::onos::e2t::e2::v1beta1::Error_Cause_Misc_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::onos::e2t::e2::v1beta1::Error_Cause_Misc_Type>() {
  return ::onos::e2t::e2::v1beta1::Error_Cause_Misc_Type_descriptor();
}
template <> struct is_proto_enum< ::onos::e2t::e2::v1beta1::Error_Cause_Protocol_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::onos::e2t::e2::v1beta1::Error_Cause_Protocol_Type>() {
  return ::onos::e2t::e2::v1beta1::Error_Cause_Protocol_Type_descriptor();
}
template <> struct is_proto_enum< ::onos::e2t::e2::v1beta1::Error_Cause_Ric_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::onos::e2t::e2::v1beta1::Error_Cause_Ric_Type>() {
  return ::onos::e2t::e2::v1beta1::Error_Cause_Ric_Type_descriptor();
}
template <> struct is_proto_enum< ::onos::e2t::e2::v1beta1::Error_Cause_RicService_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::onos::e2t::e2::v1beta1::Error_Cause_RicService_Type>() {
  return ::onos::e2t::e2::v1beta1::Error_Cause_RicService_Type_descriptor();
}
template <> struct is_proto_enum< ::onos::e2t::e2::v1beta1::Error_Cause_Transport_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::onos::e2t::e2::v1beta1::Error_Cause_Transport_Type>() {
  return ::onos::e2t::e2::v1beta1::Error_Cause_Transport_Type_descriptor();
}
template <> struct is_proto_enum< ::onos::e2t::e2::v1beta1::Encoding> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::onos::e2t::e2::v1beta1::Encoding>() {
  return ::onos::e2t::e2::v1beta1::Encoding_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_onos_2fe2t_2fe2_2fv1beta1_2fe2_2eproto
