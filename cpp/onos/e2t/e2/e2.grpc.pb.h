// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: onos/e2t/e2/e2.proto
// Original file comments:
// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0
//
#ifndef GRPC_onos_2fe2t_2fe2_2fe2_2eproto__INCLUDED
#define GRPC_onos_2fe2t_2fe2_2fe2_2eproto__INCLUDED

#include "onos/e2t/e2/e2.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace onos {
namespace e2t {
namespace e2 {

// E2TService provides means for enhanced interactions with the ONOS RIC E2 Termination service.
class E2TService final {
 public:
  static constexpr char const* service_full_name() {
    return "onos.e2t.e2.E2TService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Stream opens an indications stream
    std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::onos::e2t::e2::StreamRequest, ::onos::e2t::e2::StreamResponse>> Stream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriterInterface< ::onos::e2t::e2::StreamRequest, ::onos::e2t::e2::StreamResponse>>(StreamRaw(context));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::onos::e2t::e2::StreamRequest, ::onos::e2t::e2::StreamResponse>> AsyncStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::onos::e2t::e2::StreamRequest, ::onos::e2t::e2::StreamResponse>>(AsyncStreamRaw(context, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::onos::e2t::e2::StreamRequest, ::onos::e2t::e2::StreamResponse>> PrepareAsyncStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriterInterface< ::onos::e2t::e2::StreamRequest, ::onos::e2t::e2::StreamResponse>>(PrepareAsyncStreamRaw(context, cq));
    }
    // Control sends a E2 control request
    virtual ::grpc::Status Control(::grpc::ClientContext* context, const ::onos::e2t::e2::ControlRequest& request, ::onos::e2t::e2::ControlResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::e2t::e2::ControlResponse>> AsyncControl(::grpc::ClientContext* context, const ::onos::e2t::e2::ControlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::e2t::e2::ControlResponse>>(AsyncControlRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::e2t::e2::ControlResponse>> PrepareAsyncControl(::grpc::ClientContext* context, const ::onos::e2t::e2::ControlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::e2t::e2::ControlResponse>>(PrepareAsyncControlRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Stream opens an indications stream
      virtual void Stream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::onos::e2t::e2::StreamRequest,::onos::e2t::e2::StreamResponse>* reactor) = 0;
      // Control sends a E2 control request
      virtual void Control(::grpc::ClientContext* context, const ::onos::e2t::e2::ControlRequest* request, ::onos::e2t::e2::ControlResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void Control(::grpc::ClientContext* context, const ::onos::e2t::e2::ControlRequest* request, ::onos::e2t::e2::ControlResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientReaderWriterInterface< ::onos::e2t::e2::StreamRequest, ::onos::e2t::e2::StreamResponse>* StreamRaw(::grpc::ClientContext* context) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::onos::e2t::e2::StreamRequest, ::onos::e2t::e2::StreamResponse>* AsyncStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderWriterInterface< ::onos::e2t::e2::StreamRequest, ::onos::e2t::e2::StreamResponse>* PrepareAsyncStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::onos::e2t::e2::ControlResponse>* AsyncControlRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::ControlRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::onos::e2t::e2::ControlResponse>* PrepareAsyncControlRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::ControlRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    std::unique_ptr< ::grpc::ClientReaderWriter< ::onos::e2t::e2::StreamRequest, ::onos::e2t::e2::StreamResponse>> Stream(::grpc::ClientContext* context) {
      return std::unique_ptr< ::grpc::ClientReaderWriter< ::onos::e2t::e2::StreamRequest, ::onos::e2t::e2::StreamResponse>>(StreamRaw(context));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::onos::e2t::e2::StreamRequest, ::onos::e2t::e2::StreamResponse>> AsyncStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::onos::e2t::e2::StreamRequest, ::onos::e2t::e2::StreamResponse>>(AsyncStreamRaw(context, cq, tag));
    }
    std::unique_ptr<  ::grpc::ClientAsyncReaderWriter< ::onos::e2t::e2::StreamRequest, ::onos::e2t::e2::StreamResponse>> PrepareAsyncStream(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderWriter< ::onos::e2t::e2::StreamRequest, ::onos::e2t::e2::StreamResponse>>(PrepareAsyncStreamRaw(context, cq));
    }
    ::grpc::Status Control(::grpc::ClientContext* context, const ::onos::e2t::e2::ControlRequest& request, ::onos::e2t::e2::ControlResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::e2t::e2::ControlResponse>> AsyncControl(::grpc::ClientContext* context, const ::onos::e2t::e2::ControlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::e2t::e2::ControlResponse>>(AsyncControlRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::e2t::e2::ControlResponse>> PrepareAsyncControl(::grpc::ClientContext* context, const ::onos::e2t::e2::ControlRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::e2t::e2::ControlResponse>>(PrepareAsyncControlRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void Stream(::grpc::ClientContext* context, ::grpc::ClientBidiReactor< ::onos::e2t::e2::StreamRequest,::onos::e2t::e2::StreamResponse>* reactor) override;
      void Control(::grpc::ClientContext* context, const ::onos::e2t::e2::ControlRequest* request, ::onos::e2t::e2::ControlResponse* response, std::function<void(::grpc::Status)>) override;
      void Control(::grpc::ClientContext* context, const ::onos::e2t::e2::ControlRequest* request, ::onos::e2t::e2::ControlResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientReaderWriter< ::onos::e2t::e2::StreamRequest, ::onos::e2t::e2::StreamResponse>* StreamRaw(::grpc::ClientContext* context) override;
    ::grpc::ClientAsyncReaderWriter< ::onos::e2t::e2::StreamRequest, ::onos::e2t::e2::StreamResponse>* AsyncStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReaderWriter< ::onos::e2t::e2::StreamRequest, ::onos::e2t::e2::StreamResponse>* PrepareAsyncStreamRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::onos::e2t::e2::ControlResponse>* AsyncControlRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::ControlRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::onos::e2t::e2::ControlResponse>* PrepareAsyncControlRaw(::grpc::ClientContext* context, const ::onos::e2t::e2::ControlRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_Stream_;
    const ::grpc::internal::RpcMethod rpcmethod_Control_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Stream opens an indications stream
    virtual ::grpc::Status Stream(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::onos::e2t::e2::StreamResponse, ::onos::e2t::e2::StreamRequest>* stream);
    // Control sends a E2 control request
    virtual ::grpc::Status Control(::grpc::ServerContext* context, const ::onos::e2t::e2::ControlRequest* request, ::onos::e2t::e2::ControlResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_Stream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Stream() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_Stream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::onos::e2t::e2::StreamResponse, ::onos::e2t::e2::StreamRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::onos::e2t::e2::StreamResponse, ::onos::e2t::e2::StreamRequest>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_Control : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_Control() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_Control() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Control(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::ControlRequest* /*request*/, ::onos::e2t::e2::ControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestControl(::grpc::ServerContext* context, ::onos::e2t::e2::ControlRequest* request, ::grpc::ServerAsyncResponseWriter< ::onos::e2t::e2::ControlResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_Stream<WithAsyncMethod_Control<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_Stream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Stream() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::onos::e2t::e2::StreamRequest, ::onos::e2t::e2::StreamResponse>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->Stream(context); }));
    }
    ~WithCallbackMethod_Stream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::onos::e2t::e2::StreamResponse, ::onos::e2t::e2::StreamRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::onos::e2t::e2::StreamRequest, ::onos::e2t::e2::StreamResponse>* Stream(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_Control : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_Control() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::onos::e2t::e2::ControlRequest, ::onos::e2t::e2::ControlResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::onos::e2t::e2::ControlRequest* request, ::onos::e2t::e2::ControlResponse* response) { return this->Control(context, request, response); }));}
    void SetMessageAllocatorFor_Control(
        ::grpc::MessageAllocator< ::onos::e2t::e2::ControlRequest, ::onos::e2t::e2::ControlResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::onos::e2t::e2::ControlRequest, ::onos::e2t::e2::ControlResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_Control() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Control(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::ControlRequest* /*request*/, ::onos::e2t::e2::ControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Control(
      ::grpc::CallbackServerContext* /*context*/, const ::onos::e2t::e2::ControlRequest* /*request*/, ::onos::e2t::e2::ControlResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_Stream<WithCallbackMethod_Control<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_Stream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Stream() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_Stream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::onos::e2t::e2::StreamResponse, ::onos::e2t::e2::StreamRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_Control : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_Control() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_Control() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Control(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::ControlRequest* /*request*/, ::onos::e2t::e2::ControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_Stream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Stream() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_Stream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::onos::e2t::e2::StreamResponse, ::onos::e2t::e2::StreamRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStream(::grpc::ServerContext* context, ::grpc::ServerAsyncReaderWriter< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* stream, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncBidiStreaming(0, context, stream, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_Control : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_Control() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_Control() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Control(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::ControlRequest* /*request*/, ::onos::e2t::e2::ControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestControl(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Stream : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Stream() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackBidiHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context) { return this->Stream(context); }));
    }
    ~WithRawCallbackMethod_Stream() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Stream(::grpc::ServerContext* /*context*/, ::grpc::ServerReaderWriter< ::onos::e2t::e2::StreamResponse, ::onos::e2t::e2::StreamRequest>* /*stream*/)  override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerBidiReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* Stream(
      ::grpc::CallbackServerContext* /*context*/)
      { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_Control : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_Control() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->Control(context, request, response); }));
    }
    ~WithRawCallbackMethod_Control() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status Control(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::ControlRequest* /*request*/, ::onos::e2t::e2::ControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* Control(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_Control : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_Control() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::onos::e2t::e2::ControlRequest, ::onos::e2t::e2::ControlResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::onos::e2t::e2::ControlRequest, ::onos::e2t::e2::ControlResponse>* streamer) {
                       return this->StreamedControl(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_Control() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status Control(::grpc::ServerContext* /*context*/, const ::onos::e2t::e2::ControlRequest* /*request*/, ::onos::e2t::e2::ControlResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedControl(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::onos::e2t::e2::ControlRequest,::onos::e2t::e2::ControlResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_Control<Service > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_Control<Service > StreamedService;
};

}  // namespace e2
}  // namespace e2t
}  // namespace onos


#endif  // GRPC_onos_2fe2t_2fe2_2fe2_2eproto__INCLUDED
