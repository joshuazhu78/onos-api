// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: onos/pci/pci.proto
// Original file comments:
// SPDX-FileCopyrightText: 2020-present Open Networking Foundation <info@opennetworking.org>
//
// SPDX-License-Identifier: Apache-2.0
//
#ifndef GRPC_onos_2fpci_2fpci_2eproto__INCLUDED
#define GRPC_onos_2fpci_2fpci_2eproto__INCLUDED

#include "onos/pci/pci.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace onos {
namespace pci {

class Pci final {
 public:
  static constexpr char const* service_full_name() {
    return "onos.pci.Pci";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status GetConflicts(::grpc::ClientContext* context, const ::onos::pci::GetConflictsRequest& request, ::onos::pci::GetConflictsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::pci::GetConflictsResponse>> AsyncGetConflicts(::grpc::ClientContext* context, const ::onos::pci::GetConflictsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::pci::GetConflictsResponse>>(AsyncGetConflictsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::pci::GetConflictsResponse>> PrepareAsyncGetConflicts(::grpc::ClientContext* context, const ::onos::pci::GetConflictsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::pci::GetConflictsResponse>>(PrepareAsyncGetConflictsRaw(context, request, cq));
    }
    virtual ::grpc::Status GetResolvedConflicts(::grpc::ClientContext* context, const ::onos::pci::GetResolvedConflictsRequest& request, ::onos::pci::GetResolvedConflictsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::pci::GetResolvedConflictsResponse>> AsyncGetResolvedConflicts(::grpc::ClientContext* context, const ::onos::pci::GetResolvedConflictsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::pci::GetResolvedConflictsResponse>>(AsyncGetResolvedConflictsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::pci::GetResolvedConflictsResponse>> PrepareAsyncGetResolvedConflicts(::grpc::ClientContext* context, const ::onos::pci::GetResolvedConflictsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::pci::GetResolvedConflictsResponse>>(PrepareAsyncGetResolvedConflictsRaw(context, request, cq));
    }
    virtual ::grpc::Status GetCell(::grpc::ClientContext* context, const ::onos::pci::GetCellRequest& request, ::onos::pci::GetCellResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::pci::GetCellResponse>> AsyncGetCell(::grpc::ClientContext* context, const ::onos::pci::GetCellRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::pci::GetCellResponse>>(AsyncGetCellRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::pci::GetCellResponse>> PrepareAsyncGetCell(::grpc::ClientContext* context, const ::onos::pci::GetCellRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::pci::GetCellResponse>>(PrepareAsyncGetCellRaw(context, request, cq));
    }
    virtual ::grpc::Status GetCells(::grpc::ClientContext* context, const ::onos::pci::GetCellsRequest& request, ::onos::pci::GetCellsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::pci::GetCellsResponse>> AsyncGetCells(::grpc::ClientContext* context, const ::onos::pci::GetCellsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::pci::GetCellsResponse>>(AsyncGetCellsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::pci::GetCellsResponse>> PrepareAsyncGetCells(::grpc::ClientContext* context, const ::onos::pci::GetCellsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::onos::pci::GetCellsResponse>>(PrepareAsyncGetCellsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      virtual void GetConflicts(::grpc::ClientContext* context, const ::onos::pci::GetConflictsRequest* request, ::onos::pci::GetConflictsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetConflicts(::grpc::ClientContext* context, const ::onos::pci::GetConflictsRequest* request, ::onos::pci::GetConflictsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetResolvedConflicts(::grpc::ClientContext* context, const ::onos::pci::GetResolvedConflictsRequest* request, ::onos::pci::GetResolvedConflictsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetResolvedConflicts(::grpc::ClientContext* context, const ::onos::pci::GetResolvedConflictsRequest* request, ::onos::pci::GetResolvedConflictsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetCell(::grpc::ClientContext* context, const ::onos::pci::GetCellRequest* request, ::onos::pci::GetCellResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCell(::grpc::ClientContext* context, const ::onos::pci::GetCellRequest* request, ::onos::pci::GetCellResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      virtual void GetCells(::grpc::ClientContext* context, const ::onos::pci::GetCellsRequest* request, ::onos::pci::GetCellsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCells(::grpc::ClientContext* context, const ::onos::pci::GetCellsRequest* request, ::onos::pci::GetCellsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::onos::pci::GetConflictsResponse>* AsyncGetConflictsRaw(::grpc::ClientContext* context, const ::onos::pci::GetConflictsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::onos::pci::GetConflictsResponse>* PrepareAsyncGetConflictsRaw(::grpc::ClientContext* context, const ::onos::pci::GetConflictsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::onos::pci::GetResolvedConflictsResponse>* AsyncGetResolvedConflictsRaw(::grpc::ClientContext* context, const ::onos::pci::GetResolvedConflictsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::onos::pci::GetResolvedConflictsResponse>* PrepareAsyncGetResolvedConflictsRaw(::grpc::ClientContext* context, const ::onos::pci::GetResolvedConflictsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::onos::pci::GetCellResponse>* AsyncGetCellRaw(::grpc::ClientContext* context, const ::onos::pci::GetCellRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::onos::pci::GetCellResponse>* PrepareAsyncGetCellRaw(::grpc::ClientContext* context, const ::onos::pci::GetCellRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::onos::pci::GetCellsResponse>* AsyncGetCellsRaw(::grpc::ClientContext* context, const ::onos::pci::GetCellsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::onos::pci::GetCellsResponse>* PrepareAsyncGetCellsRaw(::grpc::ClientContext* context, const ::onos::pci::GetCellsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetConflicts(::grpc::ClientContext* context, const ::onos::pci::GetConflictsRequest& request, ::onos::pci::GetConflictsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::pci::GetConflictsResponse>> AsyncGetConflicts(::grpc::ClientContext* context, const ::onos::pci::GetConflictsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::pci::GetConflictsResponse>>(AsyncGetConflictsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::pci::GetConflictsResponse>> PrepareAsyncGetConflicts(::grpc::ClientContext* context, const ::onos::pci::GetConflictsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::pci::GetConflictsResponse>>(PrepareAsyncGetConflictsRaw(context, request, cq));
    }
    ::grpc::Status GetResolvedConflicts(::grpc::ClientContext* context, const ::onos::pci::GetResolvedConflictsRequest& request, ::onos::pci::GetResolvedConflictsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::pci::GetResolvedConflictsResponse>> AsyncGetResolvedConflicts(::grpc::ClientContext* context, const ::onos::pci::GetResolvedConflictsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::pci::GetResolvedConflictsResponse>>(AsyncGetResolvedConflictsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::pci::GetResolvedConflictsResponse>> PrepareAsyncGetResolvedConflicts(::grpc::ClientContext* context, const ::onos::pci::GetResolvedConflictsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::pci::GetResolvedConflictsResponse>>(PrepareAsyncGetResolvedConflictsRaw(context, request, cq));
    }
    ::grpc::Status GetCell(::grpc::ClientContext* context, const ::onos::pci::GetCellRequest& request, ::onos::pci::GetCellResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::pci::GetCellResponse>> AsyncGetCell(::grpc::ClientContext* context, const ::onos::pci::GetCellRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::pci::GetCellResponse>>(AsyncGetCellRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::pci::GetCellResponse>> PrepareAsyncGetCell(::grpc::ClientContext* context, const ::onos::pci::GetCellRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::pci::GetCellResponse>>(PrepareAsyncGetCellRaw(context, request, cq));
    }
    ::grpc::Status GetCells(::grpc::ClientContext* context, const ::onos::pci::GetCellsRequest& request, ::onos::pci::GetCellsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::pci::GetCellsResponse>> AsyncGetCells(::grpc::ClientContext* context, const ::onos::pci::GetCellsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::pci::GetCellsResponse>>(AsyncGetCellsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::pci::GetCellsResponse>> PrepareAsyncGetCells(::grpc::ClientContext* context, const ::onos::pci::GetCellsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::onos::pci::GetCellsResponse>>(PrepareAsyncGetCellsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetConflicts(::grpc::ClientContext* context, const ::onos::pci::GetConflictsRequest* request, ::onos::pci::GetConflictsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetConflicts(::grpc::ClientContext* context, const ::onos::pci::GetConflictsRequest* request, ::onos::pci::GetConflictsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetResolvedConflicts(::grpc::ClientContext* context, const ::onos::pci::GetResolvedConflictsRequest* request, ::onos::pci::GetResolvedConflictsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetResolvedConflicts(::grpc::ClientContext* context, const ::onos::pci::GetResolvedConflictsRequest* request, ::onos::pci::GetResolvedConflictsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetCell(::grpc::ClientContext* context, const ::onos::pci::GetCellRequest* request, ::onos::pci::GetCellResponse* response, std::function<void(::grpc::Status)>) override;
      void GetCell(::grpc::ClientContext* context, const ::onos::pci::GetCellRequest* request, ::onos::pci::GetCellResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetCells(::grpc::ClientContext* context, const ::onos::pci::GetCellsRequest* request, ::onos::pci::GetCellsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetCells(::grpc::ClientContext* context, const ::onos::pci::GetCellsRequest* request, ::onos::pci::GetCellsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::onos::pci::GetConflictsResponse>* AsyncGetConflictsRaw(::grpc::ClientContext* context, const ::onos::pci::GetConflictsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::onos::pci::GetConflictsResponse>* PrepareAsyncGetConflictsRaw(::grpc::ClientContext* context, const ::onos::pci::GetConflictsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::onos::pci::GetResolvedConflictsResponse>* AsyncGetResolvedConflictsRaw(::grpc::ClientContext* context, const ::onos::pci::GetResolvedConflictsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::onos::pci::GetResolvedConflictsResponse>* PrepareAsyncGetResolvedConflictsRaw(::grpc::ClientContext* context, const ::onos::pci::GetResolvedConflictsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::onos::pci::GetCellResponse>* AsyncGetCellRaw(::grpc::ClientContext* context, const ::onos::pci::GetCellRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::onos::pci::GetCellResponse>* PrepareAsyncGetCellRaw(::grpc::ClientContext* context, const ::onos::pci::GetCellRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::onos::pci::GetCellsResponse>* AsyncGetCellsRaw(::grpc::ClientContext* context, const ::onos::pci::GetCellsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::onos::pci::GetCellsResponse>* PrepareAsyncGetCellsRaw(::grpc::ClientContext* context, const ::onos::pci::GetCellsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetConflicts_;
    const ::grpc::internal::RpcMethod rpcmethod_GetResolvedConflicts_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCell_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCells_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status GetConflicts(::grpc::ServerContext* context, const ::onos::pci::GetConflictsRequest* request, ::onos::pci::GetConflictsResponse* response);
    virtual ::grpc::Status GetResolvedConflicts(::grpc::ServerContext* context, const ::onos::pci::GetResolvedConflictsRequest* request, ::onos::pci::GetResolvedConflictsResponse* response);
    virtual ::grpc::Status GetCell(::grpc::ServerContext* context, const ::onos::pci::GetCellRequest* request, ::onos::pci::GetCellResponse* response);
    virtual ::grpc::Status GetCells(::grpc::ServerContext* context, const ::onos::pci::GetCellsRequest* request, ::onos::pci::GetCellsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetConflicts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetConflicts() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetConflicts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConflicts(::grpc::ServerContext* /*context*/, const ::onos::pci::GetConflictsRequest* /*request*/, ::onos::pci::GetConflictsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetConflicts(::grpc::ServerContext* context, ::onos::pci::GetConflictsRequest* request, ::grpc::ServerAsyncResponseWriter< ::onos::pci::GetConflictsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetResolvedConflicts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetResolvedConflicts() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetResolvedConflicts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResolvedConflicts(::grpc::ServerContext* /*context*/, const ::onos::pci::GetResolvedConflictsRequest* /*request*/, ::onos::pci::GetResolvedConflictsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetResolvedConflicts(::grpc::ServerContext* context, ::onos::pci::GetResolvedConflictsRequest* request, ::grpc::ServerAsyncResponseWriter< ::onos::pci::GetResolvedConflictsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCell() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_GetCell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCell(::grpc::ServerContext* /*context*/, const ::onos::pci::GetCellRequest* /*request*/, ::onos::pci::GetCellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCell(::grpc::ServerContext* context, ::onos::pci::GetCellRequest* request, ::grpc::ServerAsyncResponseWriter< ::onos::pci::GetCellResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCells : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCells() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_GetCells() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCells(::grpc::ServerContext* /*context*/, const ::onos::pci::GetCellsRequest* /*request*/, ::onos::pci::GetCellsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCells(::grpc::ServerContext* context, ::onos::pci::GetCellsRequest* request, ::grpc::ServerAsyncResponseWriter< ::onos::pci::GetCellsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetConflicts<WithAsyncMethod_GetResolvedConflicts<WithAsyncMethod_GetCell<WithAsyncMethod_GetCells<Service > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetConflicts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetConflicts() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::onos::pci::GetConflictsRequest, ::onos::pci::GetConflictsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::onos::pci::GetConflictsRequest* request, ::onos::pci::GetConflictsResponse* response) { return this->GetConflicts(context, request, response); }));}
    void SetMessageAllocatorFor_GetConflicts(
        ::grpc::MessageAllocator< ::onos::pci::GetConflictsRequest, ::onos::pci::GetConflictsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::onos::pci::GetConflictsRequest, ::onos::pci::GetConflictsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetConflicts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConflicts(::grpc::ServerContext* /*context*/, const ::onos::pci::GetConflictsRequest* /*request*/, ::onos::pci::GetConflictsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetConflicts(
      ::grpc::CallbackServerContext* /*context*/, const ::onos::pci::GetConflictsRequest* /*request*/, ::onos::pci::GetConflictsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetResolvedConflicts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetResolvedConflicts() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::onos::pci::GetResolvedConflictsRequest, ::onos::pci::GetResolvedConflictsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::onos::pci::GetResolvedConflictsRequest* request, ::onos::pci::GetResolvedConflictsResponse* response) { return this->GetResolvedConflicts(context, request, response); }));}
    void SetMessageAllocatorFor_GetResolvedConflicts(
        ::grpc::MessageAllocator< ::onos::pci::GetResolvedConflictsRequest, ::onos::pci::GetResolvedConflictsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::onos::pci::GetResolvedConflictsRequest, ::onos::pci::GetResolvedConflictsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetResolvedConflicts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResolvedConflicts(::grpc::ServerContext* /*context*/, const ::onos::pci::GetResolvedConflictsRequest* /*request*/, ::onos::pci::GetResolvedConflictsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetResolvedConflicts(
      ::grpc::CallbackServerContext* /*context*/, const ::onos::pci::GetResolvedConflictsRequest* /*request*/, ::onos::pci::GetResolvedConflictsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetCell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCell() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::onos::pci::GetCellRequest, ::onos::pci::GetCellResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::onos::pci::GetCellRequest* request, ::onos::pci::GetCellResponse* response) { return this->GetCell(context, request, response); }));}
    void SetMessageAllocatorFor_GetCell(
        ::grpc::MessageAllocator< ::onos::pci::GetCellRequest, ::onos::pci::GetCellResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::onos::pci::GetCellRequest, ::onos::pci::GetCellResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetCell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCell(::grpc::ServerContext* /*context*/, const ::onos::pci::GetCellRequest* /*request*/, ::onos::pci::GetCellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCell(
      ::grpc::CallbackServerContext* /*context*/, const ::onos::pci::GetCellRequest* /*request*/, ::onos::pci::GetCellResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetCells : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCells() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::onos::pci::GetCellsRequest, ::onos::pci::GetCellsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::onos::pci::GetCellsRequest* request, ::onos::pci::GetCellsResponse* response) { return this->GetCells(context, request, response); }));}
    void SetMessageAllocatorFor_GetCells(
        ::grpc::MessageAllocator< ::onos::pci::GetCellsRequest, ::onos::pci::GetCellsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::onos::pci::GetCellsRequest, ::onos::pci::GetCellsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetCells() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCells(::grpc::ServerContext* /*context*/, const ::onos::pci::GetCellsRequest* /*request*/, ::onos::pci::GetCellsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCells(
      ::grpc::CallbackServerContext* /*context*/, const ::onos::pci::GetCellsRequest* /*request*/, ::onos::pci::GetCellsResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetConflicts<WithCallbackMethod_GetResolvedConflicts<WithCallbackMethod_GetCell<WithCallbackMethod_GetCells<Service > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetConflicts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetConflicts() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetConflicts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConflicts(::grpc::ServerContext* /*context*/, const ::onos::pci::GetConflictsRequest* /*request*/, ::onos::pci::GetConflictsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetResolvedConflicts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetResolvedConflicts() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetResolvedConflicts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResolvedConflicts(::grpc::ServerContext* /*context*/, const ::onos::pci::GetResolvedConflictsRequest* /*request*/, ::onos::pci::GetResolvedConflictsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCell() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_GetCell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCell(::grpc::ServerContext* /*context*/, const ::onos::pci::GetCellRequest* /*request*/, ::onos::pci::GetCellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCells : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCells() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_GetCells() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCells(::grpc::ServerContext* /*context*/, const ::onos::pci::GetCellsRequest* /*request*/, ::onos::pci::GetCellsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetConflicts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetConflicts() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetConflicts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConflicts(::grpc::ServerContext* /*context*/, const ::onos::pci::GetConflictsRequest* /*request*/, ::onos::pci::GetConflictsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetConflicts(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetResolvedConflicts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetResolvedConflicts() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetResolvedConflicts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResolvedConflicts(::grpc::ServerContext* /*context*/, const ::onos::pci::GetResolvedConflictsRequest* /*request*/, ::onos::pci::GetResolvedConflictsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetResolvedConflicts(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCell() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_GetCell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCell(::grpc::ServerContext* /*context*/, const ::onos::pci::GetCellRequest* /*request*/, ::onos::pci::GetCellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCell(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCells : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCells() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_GetCells() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCells(::grpc::ServerContext* /*context*/, const ::onos::pci::GetCellsRequest* /*request*/, ::onos::pci::GetCellsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCells(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetConflicts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetConflicts() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetConflicts(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetConflicts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetConflicts(::grpc::ServerContext* /*context*/, const ::onos::pci::GetConflictsRequest* /*request*/, ::onos::pci::GetConflictsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetConflicts(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetResolvedConflicts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetResolvedConflicts() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetResolvedConflicts(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetResolvedConflicts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetResolvedConflicts(::grpc::ServerContext* /*context*/, const ::onos::pci::GetResolvedConflictsRequest* /*request*/, ::onos::pci::GetResolvedConflictsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetResolvedConflicts(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCell() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCell(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetCell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCell(::grpc::ServerContext* /*context*/, const ::onos::pci::GetCellRequest* /*request*/, ::onos::pci::GetCellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCell(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCells : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCells() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCells(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetCells() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCells(::grpc::ServerContext* /*context*/, const ::onos::pci::GetCellsRequest* /*request*/, ::onos::pci::GetCellsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCells(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetConflicts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetConflicts() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::onos::pci::GetConflictsRequest, ::onos::pci::GetConflictsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::onos::pci::GetConflictsRequest, ::onos::pci::GetConflictsResponse>* streamer) {
                       return this->StreamedGetConflicts(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetConflicts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetConflicts(::grpc::ServerContext* /*context*/, const ::onos::pci::GetConflictsRequest* /*request*/, ::onos::pci::GetConflictsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetConflicts(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::onos::pci::GetConflictsRequest,::onos::pci::GetConflictsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetResolvedConflicts : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetResolvedConflicts() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::onos::pci::GetResolvedConflictsRequest, ::onos::pci::GetResolvedConflictsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::onos::pci::GetResolvedConflictsRequest, ::onos::pci::GetResolvedConflictsResponse>* streamer) {
                       return this->StreamedGetResolvedConflicts(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetResolvedConflicts() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetResolvedConflicts(::grpc::ServerContext* /*context*/, const ::onos::pci::GetResolvedConflictsRequest* /*request*/, ::onos::pci::GetResolvedConflictsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetResolvedConflicts(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::onos::pci::GetResolvedConflictsRequest,::onos::pci::GetResolvedConflictsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCell : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCell() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::onos::pci::GetCellRequest, ::onos::pci::GetCellResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::onos::pci::GetCellRequest, ::onos::pci::GetCellResponse>* streamer) {
                       return this->StreamedGetCell(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCell() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCell(::grpc::ServerContext* /*context*/, const ::onos::pci::GetCellRequest* /*request*/, ::onos::pci::GetCellResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCell(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::onos::pci::GetCellRequest,::onos::pci::GetCellResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCells : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCells() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::onos::pci::GetCellsRequest, ::onos::pci::GetCellsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::onos::pci::GetCellsRequest, ::onos::pci::GetCellsResponse>* streamer) {
                       return this->StreamedGetCells(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCells() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCells(::grpc::ServerContext* /*context*/, const ::onos::pci::GetCellsRequest* /*request*/, ::onos::pci::GetCellsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCells(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::onos::pci::GetCellsRequest,::onos::pci::GetCellsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetConflicts<WithStreamedUnaryMethod_GetResolvedConflicts<WithStreamedUnaryMethod_GetCell<WithStreamedUnaryMethod_GetCells<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetConflicts<WithStreamedUnaryMethod_GetResolvedConflicts<WithStreamedUnaryMethod_GetCell<WithStreamedUnaryMethod_GetCells<Service > > > > StreamedService;
};

}  // namespace pci
}  // namespace onos


#endif  // GRPC_onos_2fpci_2fpci_2eproto__INCLUDED
